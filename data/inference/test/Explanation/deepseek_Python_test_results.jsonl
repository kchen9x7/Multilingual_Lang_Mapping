{"task_id": "Python/1", "language": "en", "model_id": "deepseek-chat", "generated_text": "\"Checks if any two distinct elements in a list of floats are closer than a given threshold. Returns True if such a pair exists, False otherwise.\" (298 characters)"}
{"task_id": "Python/1", "language": "sq", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nKontrollon nëse ekziston të paktën një çift elementësh në listën 'numbers' që ndodhen më afër se vlera 'threshold'.\n\nFunksioni merr si hyrje një listë numrash dhe një vlerë kufi. Ai krahason çdo element me të gjithë elementët e tjerë në listë (duke shmangur krahasimin e një elementi me vetveten) dhe kthen True nëse gjen të paktën një çift ku distanca absolute është më e vogël se threshold. Nëse asnjë çift i tillë nuk gjendet, kthen False.\n\"\"\""}
{"task_id": "Python/1", "language": "hy", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Ստուգում է, արդյոք թվերի ցանկում կան տարրեր, որոնք միմյանցից բացարձակ հեռավորությամբ փոքր են տրված threshold-ից:\n\n    Args:\n        numbers: Փոփոխական երկարությամբ float-երի ցանկ:\n        threshold: Հանդիպակաց տարրերի միջև առավելագույն թույլատրելի հեռավորությունը:\n\n    Returns:\n        bool: True, եթե գոյություն ունեն գոնե երկու տարրեր, որոնց հեռավորությունը փոքր է threshold-ից, հակառակ դեպքում՝ False:\n\n    Նկատառումներ:\n        Կրկնակի ցիկլով համեմատում է բոլոր զույգերը, բացառելով նույն ինդեքսով տարրերը:\n        Եթե գտնվում է նույնիսկ մեկ զույգ, որը բավարարում է պայմանին, անմիջապես վերադարձնում է True:\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n```"}
{"task_id": "Python/1", "language": "bn", "model_id": "deepseek-chat", "generated_text": "এই ফাংশনটি একটি সংখ্যার লিস্ট (`numbers`) এবং একটি থ্রেশহোল্ড মান (`threshold`) নেয়। এটি চেক করে যে লিস্টে কোনো দুটি ভিন্ন উপাদানের মধ্যে পার্থক্য থ্রেশহোল্ডের চেয়ে কম কিনা। যদি এমন জোড়া পাওয়া যায়, ফাংশন `True` রিটার্ন করে, অন্যথায় `False` রিটার্ন করে।"}
{"task_id": "Python/1", "language": "bg", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Проверява дали в списъка от числа има поне два елемента, които са на разстояние по-малко от зададения праг.\n\n    Args:\n        numbers: Списък от числа (float).\n        threshold: Праг за сравнение (float).\n\n    Returns:\n        bool: Връща True, ако има поне два различни елемента с разлика по-малка от прага, иначе False.\n\n    Пример:\n        >>> has_close_elements([1.0, 2.0, 3.0], 1.5)\n        True  # 1.0 и 2.0 са на разстояние 1.0 < 1.5\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n```"}
{"task_id": "Python/1", "language": "zh", "model_id": "deepseek-chat", "generated_text": "\"\"\"\n检查给定浮点数列表中是否存在任意两个不同元素的距离小于指定阈值。\n\n遍历列表中的每一对不同的元素，计算它们的绝对差值。若发现任意一对差值小于阈值，则返回True；否则遍历完所有元素后返回False。\n\n参数:\n    numbers: 浮点数列表，待检查的元素集合。\n    threshold: 浮点数，判断元素是否\"接近\"的阈值。\n\n返回:\n    bool: 若存在接近元素对返回True，否则返回False。\n\"\"\""}
{"task_id": "Python/1", "language": "fr", "model_id": "deepseek-chat", "generated_text": "\"\"\"Vérifie si la liste contient des éléments proches selon un seuil donné.\n\nArgs:\n    numbers: Liste de nombres flottants.\n    threshold: Seuil de proximité.\n\nReturns:\n    bool: True si au moins deux éléments distincts ont une distance inférieure au seuil, False sinon.\n\"\"\""}
{"task_id": "Python/1", "language": "de", "model_id": "deepseek-chat", "generated_text": "\"\"\"Prüft, ob in einer Liste von Zahlen mindestens zwei Elemente existieren, deren absolute Differenz kleiner als der gegebene Schwellwert ist. Vergleicht dabei alle Paare unterschiedlicher Indizes. Gibt True zurück, falls solch ein Paar gefunden wird, sonst False.\"\"\""}
{"task_id": "Python/1", "language": "ha", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Duba ko akwai wasu abubuwa a cikin jerin waɗanda ke kusa da juna da ƙasa da ƙayyadaddun nisa (threshold).\n\n    Args:\n        numbers: Jerin lambobi masu iyaka (floats).\n        threshold: Matsakaicin nisa tsakanin abubuwa biyu don a ɗauka suna kusa.\n\n    Returns:\n        bool: True idan akwai abubuwa biyu masu kusa da juna (ƙasa da threshold), False in ba haka ba.\n\n    Misali:\n        >>> has_close_elements([1.0, 2.0, 3.0], 1.5)\n        True  # Saboda 1.0 da 2.0 suna kusa (nisa = 1.0 < 1.5)\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n```"}
{"task_id": "Python/1", "language": "hi", "model_id": "deepseek-chat", "generated_text": "यह फ़ंक्शन (`has_close_elements`) जाँचता है कि क्या दी गई संख्याओं की सूची (`numbers`) में कोई दो अलग-अलग तत्व (`elem` और `elem2`) हैं जिनके बीच की दूरी (`distance`) दिए गए थ्रेशोल्ड (`threshold`) से कम है। यदि ऐसा कोई जोड़ा मिलता है, तो यह `True` वापस करता है, अन्यथा `False`।  \n\n**पैरामीटर्स:**  \n- `numbers` (List[float]): संख्याओं की सूची  \n- `threshold` (float): न्यूनतम दूरी सीमा  \n\n**वापसी मूल्य:**  \n- `bool`: `True` यदि कोई निकट तत्व मिलते हैं, अन्यथा `False`  \n\n**उदाहरण:**  \n```python\nhas_close_elements([1.0, 2.0, 3.0], 1.5) → True  \n```"}
{"task_id": "Python/1", "language": "hu", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nEllenőrzi, hogy a számok listájában van-e két különböző elem, amelyek távolsága kisebb a megadott küszöbértéknél.  \n\nParaméterek:  \n    numbers: float-ok listája  \n    threshold: minimális távolság (küszöbérték)  \n\nVisszatérési érték:  \n    bool: True, ha van ilyen elem, egyébként False  \n\"\"\"  \n\n(Megjegyzés: a leírás 299 karakter hosszú.)"}
{"task_id": "Python/1", "language": "es", "model_id": "deepseek-chat", "generated_text": "\"\"\"Verifica si hay elementos cercanos en una lista de números, comparando la distancia entre todos los pares distintos.\n\nArgs:\n    numbers: Lista de números flotantes.\n    threshold: Distancia mínima para considerar cercanía.\n\nReturns:\n    bool: True si existe al menos un par de elementos distintos cuya distancia sea menor que 'threshold'.\n\"\"\""}
{"task_id": "Python/1", "language": "arb", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"\nتُعرِّف هذه الدالة `has_close_elements` ما إذا كانت هناك عناصر متقاربة في قائمة الأعداد ضمن عتبة مُحددة.\n\nالمُدخلات:\n    numbers (List[float]): قائمة الأعداد المراد فحصها.\n    threshold (float): العتبة التي تحدد الحد الأدنى للمسافة بين العناصر.\n\nالمُخرجات:\n    bool: تُرجع `True` إذا وُجد عنصران أو أكثر يقل الفرق بينهما عن العتبة المُحددة، وإلا تُرجع `False`.\n\nالوصف:\n    تقارن الدالة كل عنصر في القائمة بباقي العناصر (باستثناء نفسه) بحساب القيمة المطلقة للفرق بينها. إذا كان الفرق أقل من العتبة، تُرجع `True` فورًا. إذا لم تُوجد أي عناصر متقاربة بعد فحص جميع الاحتمالات، تُرجع `False`.\n\nملاحظة:\n    تعقيد الدالة الزمني هو O(n²) حيث n هو طول القائمة.\n\"\"\"\n```"}
{"task_id": "Python/1", "language": "sw", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Angalia kama kuna vipengele viwili katika orodha ambavyo viko karibu kuliko kizingiti (threshold).\n    \n    Hii inafanya kwa kuangalia umbali kati ya kila jozi ya vipengele. \n    Kama umbali wowote kati ya vipengele viwili (isipokuwa kipengele na yenyewe) \n    ni chini ya kizingiti, rudisha True. Vinginevyo, rudisha False.\n    \n    :param numbers: Orodha ya nambari za desimali (float)\n    :param threshold: Kizingiti cha umbali wa karibu\n    :return: True ikiwa kuna vipengele viwili vilivyo karibu, False vinginevyo\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n```"}
{"task_id": "Python/1", "language": "tr", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if any two distinct elements in a list of floats are closer than a given threshold.\n\n    Args:\n        numbers: List of floating-point numbers.\n        threshold: Minimum distance to consider elements 'not close'.\n\n    Returns:\n        True if at least one pair of distinct elements has a distance less than threshold, False otherwise.\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n```"}
{"task_id": "Python/1", "language": "vi", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nKiểm tra xem trong danh sách số có cặp phần tử nào gần nhau hơn ngưỡng cho trước không.\n\nArgs:\n    numbers: Danh sách các số thực\n    threshold: Ngưỡng khoảng cách tối thiểu\n\nReturns:\n    True nếu tồn tại ít nhất một cặp phần tử khác nhau có khoảng cách nhỏ hơn ngưỡng,\n    False nếu ngược lại.\n\nVí dụ:\n    has_close_elements([1.0, 2.0, 3.0], 1.5) → True (vì 1.0 và 2.0 cách nhau 1.0 < 1.5)\n\"\"\""}
{"task_id": "Python/1", "language": "id", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Memeriksa apakah ada dua elemen berbeda dalam list yang jaraknya lebih kecil dari threshold. \n    Mengembalikan True jika ada, False jika tidak.\"\"\"\n```"}
{"task_id": "Python/1", "language": "ja", "model_id": "deepseek-chat", "generated_text": "この関数は、与えられた浮動小数点数のリスト内に、指定された閾値（threshold）よりも近い距離にある要素のペアが存在するかどうかを判定します。具体的には、リスト内のすべての要素の組み合わせについて、互いの距離（絶対値差）を計算し、その距離が閾値未満であればTrueを返します。すべての組み合わせをチェックしても該当するペアが見つからない場合、Falseを返します。二重ループを使用しており、計算量はO(n^2)です。主に数値データの近接性チェックに利用されます。"}
{"task_id": "Python/1", "language": "ko", "model_id": "deepseek-chat", "generated_text": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"주어진 실수 리스트에서 임의의 두 서로 다른 원소 사이의 거리가 주어진 임계값(threshold)보다 작은 쌍이 있는지 확인합니다.\n\n    이 함수는 리스트 내 모든 가능한 원소 쌍을 비교하여, 서로 다른 두 원소의 절대 차(거리)가 threshold보다 작으면 True를 반환합니다.\n    모든 쌍을 검사한 후에도 해당 조건을 만족하는 쌍이 없으면 False를 반환합니다.\n\n    Args:\n        numbers (List[float]): 실수로 이루어진 리스트\n        threshold (float): 두 원소가 '가깝다'고 판단하는 기준값\n\n    Returns:\n        bool: 조건을 만족하는 원소 쌍이 있으면 True, 없으면 False\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n```"}
{"task_id": "Python/1", "language": "ml", "model_id": "deepseek-chat", "generated_text": "ഈ ഫംഗ്ഷൻ (`has_close_elements`) ഒരു ഫ്ലോട്ട് മൂല്യങ്ങളുടെ ലിസ്റ്റും (`numbers`) ഒരു ഥ്രെഷോൾഡ് മൂല്യവും (`threshold`) എടുത്ത്, ലിസ്റ്റിൽ ഏതെങ്കിലും രണ്ട് സമീപ സംഖ്യകൾക്ക് തമ്മിലുള്ള അകലം ഥ്രെഷോൾഡിനേക്കാൾ കുറവാണോ എന്ന് പരിശോധിക്കുന്നു.  \n\n**പ്രവർത്തനരീതി:**  \n1. ലിസ്റ്റിലെ ഓരോ എലമെന്റും (`elem`) മറ്റെല്ലാ എലമെന്റുകളുമായും (`elem2`) താരതമ്യം ചെയ്യുന്നു.  \n2. ഇവ രണ്ടും വ്യത്യസ്ത സൂചികകളിൽ (indices) ആണെങ്കിൽ, അവയുടെ പരസ്പര അകലം (`distance = |elem - elem2|`) കണക്കാക്കുന്നു.  \n3. ഈ അകലം ഥ്രെഷോൾഡിനേക്കാൾ കുറവാണെങ്കിൽ, ഫംഗ്ഷൻ `True` റിട്ടേൺ ചെയ്യുന്നു (അടുത്തുള്ള ജോഡി കണ്ടെത്തി).  \n4. ഒരു ജോഡിയും ഈ നിബന്ധന പാലിക്കുന്നില്ലെങ്കിൽ, `False` റിട്ടേൺ ചെയ്യുന്നു.  \n\n**ഉദാഹരണം:**  \n```python\nhas_close_elements([1.0, 2.0, 3.01], 0.1) → False  \nhas_close_elements([1.0, 2.0, 3.0, 2.99], 0.1) → True  \n```"}
{"task_id": "Python/1", "language": "fa", "model_id": "deepseek-chat", "generated_text": "این تابع بررسی می‌کند آیا در لیست اعداد، حداقل یک جفت عدد وجود دارد که فاصله‌ی آنها از هم کمتر از مقدار مشخص شده (threshold) باشد یا خیر. تابع تمام جفت‌های ممکن (به جز مقایسه‌ی هر عدد با خودش) را بررسی کرده و در صورت وجود چنین جفتی، True برمی‌گرداند. در غیر این صورت False بازگشت داده می‌شود."}
{"task_id": "Python/2", "language": "en", "model_id": "deepseek-chat", "generated_text": "This function separates balanced parentheses groups from a string. It removes spaces, then iterates through each character. When encountering '(', it pushes to a stack and builds the current group. On ')', it pops from the stack and continues building. When the stack is empty, a complete balanced group is added to the result. Returns a list of these groups. Example: \"(( )) (()())\" → [\"(())\", \"(()())\"]."}
{"task_id": "Python/2", "language": "sq", "model_id": "deepseek-chat", "generated_text": "Ky kod ndan një varg kllapash në nëngrupe të pavarura të balancuara.  \n\n**Funksioni `separate_paren_groups`:**  \n- Heq të gjitha hapësirat nga vargu hyrës.  \n- Përdor një stivë për të gjurmuar kllapat dhe ndërton nëngrupe të balancuara.  \n- Kur gjendet një kllapë hapëse `(`, shtohet në stivë dhe në grup-in aktual.  \n- Kur gjendet një kllapë mbyllëse `)`, hiqet nga stiva dhe shtohet në grup-in aktual.  \n- Nëse stiva bëhet bosh, grup-i aktual shtohet në rezultat dhe rifillon për grupin tjetër.  \n\n**Kthen:** Një listë me nëngrupe të balancuara kllapash."}
{"task_id": "Python/2", "language": "hy", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"\nՏրված ֆունկցիան վերադարձնում է տողի մեջ գտնվող փակագծերի առանձին խմբերը՝ առանց բացատների:\n\nՄուտք:\n    paren_string (str): Փակագծեր պարունակող տող, օր. \"(()) (()())\"\n\nԵլք:\n    List[str]: Առանձին փակագծերի խմբերի ցուցակ, օր. [\"(())\", \"(()())\"]\n\nԱլգորիթմ:\n    1. Հեռացնում է բոլոր բացատները տողից\n    2. Օգտագործում է stack՝ փակագծերի զույգերը հետևելու համար\n    3. Ամեն անգամ երբ stack-ը դատարկվում է, ավելացնում է ավարտված խումբը արդյունքին\n\nՕրինակ:\n    separate_paren_groups(\"(()) (()())\") → [\"(())\", \"(()())\"]\n\"\"\"\n```"}
{"task_id": "Python/2", "language": "bn", "model_id": "deepseek-chat", "generated_text": "এই পাইথন ফাংশন `separate_paren_groups` একটি স্ট্রিং নেয় যাতে বন্ধনী ও স্পেস থাকে এবং স্পেস মুছে শুধু বন্ধনীগুলোকে আলাদা আলাদা গ্রুপে ভাগ করে। এটি স্ট্যাক ব্যবহার করে বন্ধনীর জোড় চিহ্নিত করে, প্রতিটি পূর্ণ গ্রুপ (যেমন `(())`) রেজাল্ট লিস্টে যোগ করে। উদাহরণ: ইনপুট `\"(()) ()\"` হলে আউটপুট হবে `['(())', '()']`।"}
{"task_id": "Python/2", "language": "bg", "model_id": "deepseek-chat", "generated_text": "Този Python код разделя низ със скоби на отделени, балансирани групи скоби. Първо, премахва всички интервали от входния низ. След това използва стек за проследяване на отварящите скоби и изгражда текуща група. При срещане на отваряща скоба \"(\", я добавя към стека и текущата група. При затваряща скоба \")\", я премахва от стека и добавя към групата. Ако стекът е празен, текущата група е завършена и се добавя към резултата. Накрая връща списък с всички балансирани групи скоби."}
{"task_id": "Python/2", "language": "zh", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \n将包含括号的字符串分割成独立的括号组。  \n\n该函数首先移除输入字符串中的所有空格，然后遍历每个字符。遇到左括号时压入栈并记录到当前组；遇到右括号时弹出栈并记录到当前组。当栈为空时，表示当前组完整闭合，将其加入结果列表并重置当前组。  \n\n参数:  \n    paren_string (str): 包含括号的字符串，可能含有空格。  \n\n返回:  \n    List[str]: 分割后的独立括号组列表。  \n\"\"\""}
{"task_id": "Python/2", "language": "fr", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nSépare les groupes de parenthèses imbriqués dans une chaîne.  \n\n- Supprime les espaces de l'entrée.  \n- Parcourt la chaîne, empile les '(' et dépile pour les ')'.  \n- Ajoute un groupe au résultat quand une paire complète est fermée.  \n- Retourne une liste des groupes de parenthèses trouvés.  \n\"\"\"  \n\n(499 caractères)"}
{"task_id": "Python/2", "language": "de", "model_id": "deepseek-chat", "generated_text": "\"\"\"Trennt eine Zeichenkette mit Klammern in einzelne, vollständige Klammergruppen. Leerzeichen werden entfernt. Jede Gruppe beginnt mit '(' und endet mit ')'. Beispiel: '((a)(b))' wird zu ['(a)', '(b)', '((a)(b))'].\"\"\""}
{"task_id": "Python/2", "language": "ha", "model_id": "deepseek-chat", "generated_text": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Rarraba madaidaicin rukunin maƙallan cikin jeri (List) daga jeren maƙallan da aka ba da shi.\n\n    Aikin yana cire sarari daga jeren maƙallan, sannan ya raba shi zuwa rukunoni masu cikakken maƙallan\n    (wato, kowane rukuni yana farawa da \"(\" kuma yana ƙare da \")\").\n\n    Misali:\n        >>> separate_paren_groups(\"( ()) ((()\")\n        ['(())', '(()']\n\n    Parameters:\n        paren_string (str): Jerin maƙallan da za a raba.\n\n    Returns:\n        List[str]: Jeri na rukunoni masu cikakken maƙallan.\n    \"\"\"\n    # Cire sarari daga jeren maƙallan\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Shirya maƙasudin ajiya don riƙe rukunin yanzu da tarihin maƙallan\n    current_group = \"\"\n    stack = []\n    result = []\n    \n    # Bincika kowane harafi a cikin jeren maƙallan\n    for char in paren_string:\n        # Idan harafin \"(\", saka shi cikin tarihi da rukunin yanzu\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        # Idan harafin \")\" kuma akwai abu a tarihi, cire shi da ƙara zuwa rukunin yanzu\n        elif char == \")\" and stack:\n            stack.pop()\n            current_group += char\n            # Idan tarihi ya ƙare, rukunin yanzu ya cika, saka shi cikin sakamako\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"  # Fara sabon rukuni\n\n    return result\n```"}
{"task_id": "Python/2", "language": "hi", "model_id": "deepseek-chat", "generated_text": "यह फ़ंक्शन एक स्ट्रिंग से सभी संतुलित कोष्ठक समूहों को अलग-अलग निकालता है। इनपुट स्ट्रिंग में रिक्त स्थान हटा दिए जाते हैं। फिर, एक स्टैक का उपयोग करके कोष्ठकों को ट्रैक किया जाता है। प्रत्येक '(' मिलने पर स्टैक में पुश किया जाता है और करंट ग्रुप में जोड़ा जाता है। ')' मिलने पर स्टैक से पॉप किया जाता है और करंट ग्रुप में जोड़ा जाता है। जब स्टैक खाली हो जाता है, तो पूरा ग्रुप रिजल्ट में जोड़ दिया जाता है। अंत में सभी संतुलित कोष्ठक ग्रुप्स की लिस्ट रिटर्न की जाती है।"}
{"task_id": "Python/2", "language": "hu", "model_id": "deepseek-chat", "generated_text": "\"\"\"Egy zárójeleket tartalmazó sztringből kinyeri a különálló, egymásba ágyazott zárójeles csoportokat. Eltávolítja a szóközöket, majd verem segítségével nyomon követi a zárójeleket. Minden teljes csoportot (nyitó és záró zárójel páros) hozzáad az eredmény listához. Visszatérési érték a teljes zárójeles csoportok listája.\"\"\""}
{"task_id": "Python/2", "language": "es", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nSepara grupos de paréntesis balanceados en una cadena. Elimina espacios, luego recorre la cadena,  \nusando una pila para rastrear paréntesis. Cada vez que se cierra un grupo balanceado, lo agrega al resultado.  \nEjemplo: \"(( ))( )\" → [\"(())\", \"()\"].  \n\"\"\""}
{"task_id": "Python/2", "language": "arb", "model_id": "deepseek-chat", "generated_text": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    تفصل الدالة الأقواس المتداخلة في نص معطى إلى مجموعات منفصلة.\n    \n    المدخلات:\n        paren_string (str): سلسلة نصية تحتوي على أقواس متداخلة وفراغات.\n    \n    المخرجات:\n        List[str]: قائمة تحتوي على مجموعات الأقواس المغلقة بشكل صحيح.\n    \n    الوظيفة:\n        1. تزيل الفراغات من النص.\n        2. تتعقب الأقواس المفتوحة باستخدام مكدس.\n        3. تبني المجموعات عند إغلاق الأقواس وتضيفها للنتيجة.\n    \"\"\"\n```"}
{"task_id": "Python/2", "language": "sw", "model_id": "deepseek-chat", "generated_text": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Hutenganisha mabano ya pande zote katika vikundi vilivyofungwa kikamilifu kutoka kwa kamba ya maingizo.\n\n    Fanya:\n        paren_string (str): Kamba yenye mabano na pengine nafasi. Inaweza kuwa na vikundi vya mabano vilivyowekwa kwa njia ya kipekee.\n\n    Rudisha:\n        List[str]: Orodha ya vikundi vya mabano vilivyofungwa kikamilifu, bila nafasi.\n\n    Maelezo:\n        - Hufuta nafasi zote kwenye kamba ya maingizo.\n        - Hutumia stack kufuatilia mabano yaliyofunguliwa.\n        - Huunda kikundi cha sasa na kuongeza mabano yanayofungua/kufunga.\n        - Wakati stack inakuwa tupu, huo ni ishara ya kikundi kukamilika na kuongezwa kwenye matokeo.\n        - Mfano: \"( ( ) ( ) )\" → [\"(())\", \"()\"]\n    \"\"\"\n```"}
{"task_id": "Python/2", "language": "tr", "model_id": "deepseek-chat", "generated_text": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Extracts balanced parentheses groups from a string, ignoring spaces.\n    \n    Processes the input string by removing spaces, then iterates through each character.\n    Uses a stack to track nested parentheses. When a complete balanced group (from '(' to ')')\n    is found, it is added to the result list. Returns a list of all such outermost groups.\n    \n    Example:\n        Input:  \"(()) (( ()() ))\"\n        Output: [\"(())\", \"(( ()() ))\"]\n    \"\"\"\n    # ... (original code remains unchanged)\n```"}
{"task_id": "Python/2", "language": "vi", "model_id": "deepseek-chat", "generated_text": "Hàm `separate_paren_groups` tách các nhóm dấu ngoặc đơn hợp lệ từ một chuỗi đầu vào. \n\n- **Đầu vào:** Một chuỗi chứa các dấu ngoặc đơn `(`, `)` và có thể có khoảng trắng.\n- **Xử lý:** \n  - Loại bỏ khoảng trắng, sau đó duyệt từng ký tự.\n  - Sử dụng stack để theo dõi các nhóm ngoặc: khi gặp `(`, thêm vào stack và nhóm hiện tại; khi gặp `)`, kiểm tra stack và đóng nhóm nếu hợp lệ.\n- **Đầu ra:** Danh sách các nhóm ngoặc đơn đầy đủ, không lồng nhau. \n\nVí dụ: `\"(a) (b (c))\"` → `[\"(a)\", \"(b (c))\"]`."}
{"task_id": "Python/2", "language": "id", "model_id": "deepseek-chat", "generated_text": "Fungsi ini memisahkan string yang berisi tanda kurung menjadi kelompok-kelompok terpisah. Menghapus spasi, lalu mengelompokkan tanda kurung yang seimbang (setiap '(' dan ')'). Kelompok yang sudah seimbang akan dimasukkan ke dalam list hasil. Contoh: input \"( ( ) ( ) )\" menghasilkan [\"(())\", \"()\"]."}
{"task_id": "Python/2", "language": "ja", "model_id": "deepseek-chat", "generated_text": "この関数は、与えられた括弧文字列から独立した括弧グループを抽出します。まず入力文字列からスペースを除去し、スタックを使って括弧のネストを管理します。開き括弧\"(\"が現れるとスタックに積み、現在のグループ文字列に追加します。閉じ括弧\")\"が現れるとスタックから取り出し、現在のグループに追加します。スタックが空になった時点で1つの完全なグループが完成したと判断し、結果リストに追加します。この処理を文字列全体に対して行い、最終的に分離されたすべての括弧グループのリストを返します。例えば、\"(( )) (()())\"は[\"(( ))\",\"(()())\"]に変換されます。"}
{"task_id": "Python/2", "language": "ko", "model_id": "deepseek-chat", "generated_text": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"주어진 문자열에서 공백을 제거한 후, 올바르게 중첩된 괄호 그룹들을 분리하여 리스트로 반환합니다.\n    \n    이 함수는 입력 문자열에서 공백을 모두 제거한 후, 스택을 사용하여 괄호의 중첩 구조를 추적합니다.\n    여는 괄호 '('를 만나면 스택에 추가하고 현재 그룹 문자열에 포함시킵니다.\n    닫는 괄호 ')'를 만나면 스택에서 여는 괄호를 제거하고 현재 그룹 문자열에 포함시킵니다.\n    스택이 비게 되면 완성된 괄호 그룹을 결과 리스트에 추가하고 현재 그룹 문자열을 초기화합니다.\n    \n    Args:\n        paren_string (str): 공백과 괄호로 구성된 입력 문자열 (예: \"( ()) (( ()() ))\")\n        \n    Returns:\n        List[str]: 분리된 괄호 그룹들의 리스트 (예: [\"(())\", \"(()())\"])\n        \n    Examples:\n        >>> separate_paren_groups(\"( ()) (( ()() ))\")\n        [\"(())\", \"(()())\"]\n    \"\"\"\n    # 함수 구현 내용...\n```"}
{"task_id": "Python/2", "language": "ml", "model_id": "deepseek-chat", "generated_text": "`separate_paren_groups` എന്ന ഫംഗ്ഷൻ പരന്ത്രീസ് (parentheses) ഉൾക്കൊള്ളുന്ന ഒരു സ്ട്രിംഗ് ഇൻപുട്ടായി വാങ്ങി, അതിലെ വ്യക്തമായ പരന്ത്രീസ് ഗ്രൂപ്പുകളെ (ഉപസ്ട്രിംഗുകൾ) വേർതിരിച്ച് ഒരു ലിസ്റ്റായി റിട്ടേൺ ചെയ്യുന്നു.  \n\n### പ്രവർത്തനം:\n1. **ഇൻപുട്ട് ക്ലീൻ അപ്പ്**: ആദ്യം സ്ട്രിംഗിൽ നിന്ന് എല്ലാ സ്പെയ്സുകളും (` `) നീക്കം ചെയ്യുന്നു.  \n2. **സ്റ്റാക്ക് ഉപയോഗിച്ച് ഗ്രൂപ്പിംഗ്**:  \n   - ഓരോ `(` (ഓപ്പൺ പരന്ത്രീസ്) കാണുമ്പോൾ അത് ഒരു സ്റ്റാക്കിൽ പുഷ് ചെയ്യുകയും `current_group` എന്ന സ്ട്രിംഗിൽ ചേർക്കുകയും ചെയ്യുന്നു.  \n   - ഓരോ `)` (ക്ലോസ് പരന്ത്രീസ്) കാണുമ്പോൾ സ്റ്റാക്കിൽ നിന്ന് പോപ്പ് ചെയ്യുകയും `current_group`-ൽ ചേർക്കുകയും ചെയ്യുന്നു.  \n   - സ്റ്റാക്ക് ശൂന്യമാകുമ്പോൾ (`(` എന്നതിന് തുല്യമായ `)` കണ്ടാൽ), `current_group` ഒരു പൂർണ്ണമായ ഗ്രൂപ്പായി കണക്കാക്കി റിസൾട്ട് ലിസ്റ്റിൽ ചേർക്കുന്നു.  \n3. **റിട്ടേൺ**: എല്ലാ ഗ്രൂപ്പുകളും അടങ്ങിയ ലിസ്റ്റ് റിട്ടേൺ ചെയ്യുന്നു.  \n\n### ഉദാഹരണം:\n```python\nseparate_paren_groups(\"( ()) ((() ()) )\")  \n# ഔട്ട്പുട്ട്: ['(())', '((()()))']\n```  \nഇവിടെ, ഇൻപുട്ടിൽ 2 സ്വതന്ത്ര പരന്ത്രീസ് ഗ്രൂപ്പുകൾ ഉണ്ട്, അവ വേർതിരിച്ച് ലിസ്റ്റായി റിട്ടേൺ ചെയ്യുന്നു.  \n\n### പ്രധാന കുറിപ്പുകൾ:\n- സ്പെയ്സുകൾ അവഗണിക്കുന്നു.  \n- ബാലൻസ് ചെയ്യാത്ത പരന്ത്രീസ് (`)(`, `(()` തുടങ്ങിയവ) ഉണ്ടെങ്കിൽ അവ റിസൾട്ടിൽ ഉൾപ്പെടുത്തില്ല.  \n- ഓരോ ഗ്രൂപ്പും പൂർണ്ണമായി ക്ലോസ് ചെയ്തതാണെന്ന് സ്റ്റാക്ക് ഉപയോഗിച്ച് ഉറപ്പാക്കുന്നു."}
{"task_id": "Python/2", "language": "fa", "model_id": "deepseek-chat", "generated_text": "این تابع یک رشته شامل پرانتزها را دریافت کرده و گروه‌های تو در توی پرانتزها را جدا می‌کند. ابتدا فاصله‌ها را حذف می‌کند، سپس با استفاده از یک پشته، پرانتزهای باز و بسته را مدیریت می‌کند. هر گروه کامل پرانتز (از باز تا بسته شدن) در لیست نتیجه ذخیره می‌شود. مثال: ورودی `\"(()) ()\"` خروجی `['(())', '()']` خواهد بود."}
{"task_id": "Python/3", "language": "en", "model_id": "deepseek-chat", "generated_text": "\"\"\"Returns the fractional part of a float (number modulo 1.0). For positive numbers, equivalent to the decimal portion after the point. Examples: 3.14 → 0.14, -2.5 → 0.5.\"\"\""}
{"task_id": "Python/3", "language": "sq", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nKthen pjesën thyesore të një numri dhjetor.\n\nFunksioni merr një numër me presje (`number`) dhe kthen vetëm pjesën pas presjes dhjetore.\nP.sh., nëse hyrja është 3.14, funksioni do të kthejë 0.14.\n\nParametrat:\n    number (float): Numri dhjetor për të cilin duhet gjetur pjesa thyesore\n\nKthen:\n    float: Pjesa thyesore e numrit (0 <= vlera < 1)\n\"\"\""}
{"task_id": "Python/3", "language": "hy", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Վերադարձնում է տրված թվի կոտորակային մասը:\n    \n    Օրինակ՝\n    >>> truncate_number(3.14)\n    0.14\n    >>> truncate_number(5.0)\n    0.0\n    \n    Պարամետրեր:\n        number (float): Մուտքային թիվը:\n    \n    Վերադարձվող արժեք:\n        float: Մուտքային թվի կոտորակային մասը (թիվ % 1.0 գործողության արդյունքը):\n    \"\"\"\n    return number % 1.0\n```"}
{"task_id": "Python/3", "language": "bn", "model_id": "deepseek-chat", "generated_text": "এই পাইথন ফাংশনটি একটি দশমিক সংখ্যার ভগ্নাংশ (দশমিকের পরের অংশ) রিটার্ন করে। যেমন, `truncate_number(3.14)` কল করলে এটি `0.14` রিটার্ন করবে। এটি `number % 1.0` অপারেশন ব্যবহার করে সংখ্যাটির পূর্ণসংখ্যা অংশ বাদ দিয়ে শুধুমাত্র ভগ্নাংশটি বের করে।"}
{"task_id": "Python/3", "language": "bg", "model_id": "deepseek-chat", "generated_text": "\"\"\"Връща дробната част на дадено число с плаваща запетая.\n\nФункцията приема число `number` от тип float и връща само неговата дробна част, \nизползвайки оператора за деление с остатък (%). Например, за числото 3.14 резултатът ще бъде 0.14.\n\nАргументи:\n    number (float): Числото, чиято дробна част искаме да получим.\n\nВръща:\n    float: Дробната част на числото (винаги в интервала [0, 1)).\n\"\"\""}
{"task_id": "Python/3", "language": "zh", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"返回输入浮点数的小数部分。\n\n例如:\n    truncate_number(3.14) -> 0.14\n    truncate_number(5.0) -> 0.0\n\n参数:\n    number: 待处理的浮点数\n\n返回:\n    该数的小数部分（即原数减去其整数部分）\n\"\"\"\n``` \n\n（字符数：199）"}
{"task_id": "Python/3", "language": "fr", "model_id": "deepseek-chat", "generated_text": "\"\"\"Retourne la partie décimale d'un nombre flottant.\n\nArgs:\n    number: Nombre à tronquer (float).\n\nReturns:\n    float: Partie décimale du nombre (résultat de number % 1.0).\nExemple: 3.14 -> 0.14\n\"\"\""}
{"task_id": "Python/3", "language": "de", "model_id": "deepseek-chat", "generated_text": "\"\"\"Gibt den Nachkommaanteil einer Fließkommazahl zurück.\n\nBeispiel: truncate_number(3.14) → 0.14\n\"\"\""}
{"task_id": "Python/3", "language": "ha", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"Takes matsayin lamba mai guntu (float) kuma ta mayar da ragowar (decimal) bayan raba ta da 1.0.\n\n    Misali:\n        >>> truncate_number(3.5)\n        0.5\n        >>> truncate_number(4.0)\n        0.0\n\n    Bayani:\n        Ana amfani da aikin modulus (%) don lissafin ragowar lokacin da aka raba lambar da 1.0.\n        Wannan yana ba da ragowar (decimal) na lambar da aka shigar.\n    \"\"\"\n    return number % 1.0\n```\n\n**Bayani a Hausa (Ƙaramin):**  \nWannan aiki yana karɓar lamba mai guntu (float) kuma yana mayar da ragowar (decimal) bayan raba ta da 1.0. Ana amfani da `%` (modulus) don lissafin. Misali, `3.5 % 1.0` ya zama `0.5`."}
{"task_id": "Python/3", "language": "hi", "model_id": "deepseek-chat", "generated_text": "यह फ़ंक्शन किसी दशमलव संख्या का भिन्नात्मक (दशमलव) भाग लौटाता है। उदाहरण के लिए, अगर इनपुट 3.14 है, तो आउटपुट 0.14 होगा। यह संख्या को 1.0 से विभाजित करने के बाद शेष (modulus) लेकर काम करता है, जो दशमलव भाग को अलग कर देता है।"}
{"task_id": "Python/3", "language": "hu", "model_id": "deepseek-chat", "generated_text": "\"\"\"Visszaadja a szám törtrészét (az egészrész utáni részt).\n\nParaméterek:\n    number (float): egy valós szám\n\nVisszatérési érték:\n    float: a szám tizedes tört része (pl. 3.14 esetén 0.14)\n\nPélda:\n    >>> truncate_number(3.14)\n    0.14\n\"\"\""}
{"task_id": "Python/3", "language": "es", "model_id": "deepseek-chat", "generated_text": "\"\"\"Devuelve la parte decimal de un número float.\n\nEjemplo: truncate_number(3.14) → 0.14\nUsa el operador módulo (%) con 1.0 para obtener solo los decimales.\n\"\"\""}
{"task_id": "Python/3", "language": "arb", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    تُعيد هذه الدالة الجزء العشري من العدد المُدخل (بعد الفاصلة العشرية).\n    \n    المدخلات:\n        number (float): العدد العشري المراد استخراج جزئه العشري.\n    \n    المخرجات:\n        float: الجزء العشري من العدد (القيمة بين 0 و 1)، وهو باقي قسمة العدد على 1.0.\n    \n    أمثلة:\n        >>> truncate_number(3.14)\n        0.14\n        >>> truncate_number(5.0)\n        0.0\n    \"\"\"\n    return number % 1.0\n```"}
{"task_id": "Python/3", "language": "sw", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Inarudisha sehemu ya desimali ya namba iliyopewa.\n\n    Hii chaguo-msingi huchukua namba ya desimali (float) na kurejesha sehemu yake\n    ya desimali pekee (yaani, namba baada ya nukta ya desimali). Kwa mfano:\n    - truncate_number(3.14) -> 0.14\n    - truncate_number(5.0) -> 0.0\n\n    Kigezo:\n        number (float): Namba ya desimali ambayo sehemu ya desimali yake itatolewa.\n\n    Rudi:\n        float: Sehemu ya desimali ya namba, au 0.0 ikiwa namba ni kamili.\n    \"\"\"\n    return number % 1.0\n```"}
{"task_id": "Python/3", "language": "tr", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"Verilen float sayının ondalık kısmını döndürür. Örneğin 3.14 için 0.14 döner.\n    Sayının tam sayı kısmını atarak sadece 0 ile 1 arasındaki kısmını verir.\n    \"\"\"\n    return number % 1.0\n``` \n\n(498 karakter)"}
{"task_id": "Python/3", "language": "vi", "model_id": "deepseek-chat", "generated_text": "\"\"\"Trả về phần thập phân của một số thực.\n\nHàm này nhận vào một số thực và trả về phần thập phân của số đó (phần sau dấu phẩy). \nVí dụ: \n- truncate_number(3.14) -> 0.14\n- truncate_number(5.0) -> 0.0\n\nTham số:\n    number (float): Số thực cần lấy phần thập phân\n\nTrả về:\n    float: Phần thập phân của số nhập vào (luôn nằm trong khoảng [0, 1))\n\"\"\""}
{"task_id": "Python/3", "language": "id", "model_id": "deepseek-chat", "generated_text": "Fungsi ini mengembalikan bagian desimal dari suatu bilangan float (angka di belakang koma). Contoh: truncate_number(3.14) mengembalikan 0.14."}
{"task_id": "Python/3", "language": "ja", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"浮動小数点数を受け取り、その小数部分を返す。\n\n    例えば、3.14を入力すると0.14を返す。整数部を除去し、0以上1未満の小数部分のみを返却する。\n\n    Args:\n        number: 小数部分を取得したい浮動小数点数\n\n    Returns:\n        float: 入力値の小数部分（例: 3.14 → 0.14）\n    \"\"\"\n    return number % 1.0\n``` \n\nこの関数は、浮動小数点数の小数部分を抽出するシンプルな操作を行います。`% 1.0`の演算で整数部を除去し、常に[0, 1)の範囲の値を返します。"}
{"task_id": "Python/3", "language": "ko", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"주어진 실수에서 정수 부분을 제거하고 소수 부분만 반환합니다.\n    \n    예를 들어, 입력값이 3.14인 경우 0.14를 반환하고, -2.7인 경우 0.3을 반환합니다.\n    (Python의 % 연산자는 음수에서도 일관되게 동작합니다.)\n    \n    Args:\n        number (float): 정수 부분을 제거할 실수\n    \n    Returns:\n        float: 입력값의 소수 부분 (0 이상 1 미만의 값)\n    \"\"\"\n    return number % 1.0\n```"}
{"task_id": "Python/3", "language": "ml", "model_id": "deepseek-chat", "generated_text": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\"ഒരു ഫ്ലോട്ട് സംഖ്യയുടെ ദശാംശ ഭാഗം മാത്രം തിരികെ നൽകുന്നു.\n\n    ഉദാഹരണം:\n        >>> truncate_number(3.14)\n        0.14\n        >>> truncate_number(5.0)\n        0.0\n\n    ആർഗ്യുമെന്റ്:\n        number (float): ദശാംശ ഭാഗം വേർതിരിക്കേണ്ട സംഖ്യ.\n\n    റിട്ടേൺ:\n        float: സംഖ്യയുടെ ദശാംശ ഭാഗം (1.0-ൽ കുറഞ്ഞത്).\n    \"\"\"\n    return number % 1.0\n```\n\n**ചുരുക്കത്തിൽ:**  \nഈ ഫംഗ്ഷൻ ഒരു ഫ്ലോട്ട് സംഖ്യയുടെ ദശാംശ ഭാഗം (ഉദാ. `3.14`-ൽ `.14`) മാത്രം വേർതിരിച്ച് നൽകുന്നു. `% 1.0` എന്ന മോഡുലോ ഓപ്പറേഷൻ ഉപയോഗിച്ച് പൂർണ്ണസംഖ്യാ ഭാഗം ഒഴിവാക്കി ദശാംശം കണക്കാക്കുന്നു."}
{"task_id": "Python/3", "language": "fa", "model_id": "deepseek-chat", "generated_text": "این تابع بخش اعشاری یک عدد اعشاری را برمی‌گرداند.\n\nبه عبارت دیگر:\n- عدد ورودی را می‌گیرد (مثلاً 3.14)\n- باقیمانده تقسیم آن بر 1.0 را محاسبه می‌کند (که همان بخش اعشاری است)\n- نتیجه را برمی‌گرداند (برای مثال بالا 0.14)\n\nمثال:\ntruncate_number(5.75) → 0.75\ntruncate_number(4.0) → 0.0"}
{"task_id": "Python/4", "language": "en", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nCheck if the cumulative sum of operations results in a negative balance.  \n\nArgs:  \n    operations: List of integers representing transactions (deposits/withdrawals).  \n\nReturns:  \n    True if the final balance is negative, False otherwise.  \n\"\"\""}
{"task_id": "Python/4", "language": "sq", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nFunksioni `below_zero` kontrollon nëse bilanci përfundimtar i operacioneve financiare bie nën zero.\n\nParametrat:\n    operations (List[int]): Një listë e numrave të plotë që përfaqësojnë operacione (depozita/terheqje).\n\nKthen:\n    bool: True nëse bilanci përfundimtar është negativ, False ndryshe.\n\nFunksioni llogarit shumën e të gjitha operacioneve dhe kontrollon nëse totali është më pak se zero.\n\"\"\""}
{"task_id": "Python/4", "language": "hy", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Ստուգում է, արդյոք գործարքների (operations) գումարը բացասական է:\n    \n    Args:\n        operations: Ամբողջ թվերի ցուցակ, որտեղ յուրաքանչյուր տարր գումարվում է հաշվեկշռին (balance):\n                   - Դրական թվեր՝ մուտքեր (ավելացնում են հաշվին)\n                   - Բացասական թվեր՝ ելքեր (նվազեցնում են հաշվից)\n    \n    Returns:\n        bool: True, եթե բոլոր գործարքների գումարը բացասական է, հակառակ դեպքում՝ False:\n              - True → Հաշվի ընդհանուր գումարը < 0\n              - False → Հաշվի ընդհանուր գումարը >= 0\n    \n    Օրինակ:\n        below_zero([10, -20, 5]) → True   # (10 - 20 + 5 = -5 < 0)\n        below_zero([1, 2, 3]) → False     # (1 + 2 + 3 = 6 >= 0)\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n    return balance < 0\n```"}
{"task_id": "Python/4", "language": "bn", "model_id": "deepseek-chat", "generated_text": "এই ফাংশনটি একটি পূর্ণসংখ্যার লিস্ট (operations) গ্রহণ করে এবং চেক করে যে লিস্টের সকল সংখ্যার যোগফল ঋণাত্মক (নেগেটিভ) কিনা। যদি যোগফল ০-এর কম হয়, তাহলে ফাংশনটি True রিটার্ন করে, অন্যথায় False রিটার্ন করে।"}
{"task_id": "Python/4", "language": "bg", "model_id": "deepseek-chat", "generated_text": "Функцията `below_zero` проверява дали балансът става отрицателен след извършване на списък от операции. Тя приема списък от цели числа (`operations`), където всяко число представлява депозит (положително) или теглене (отрицателно). Функцията изчислява общия баланс, сумирайки всички операции. Ако крайният баланс е по-малък от нула, функцията връща `True`, в противен случай - `False`. Пример: при вход `[10, -20, 30]` балансът е `20` (не е отрицателен) и резултатът е `False`."}
{"task_id": "Python/4", "language": "zh", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"检查整数操作列表执行后余额是否为负。\n    \n    遍历整数列表operations，累加所有数值得到最终余额。\n    若余额小于0则返回True，否则返回False。\n    \n    示例:\n        >>> below_zero([1, -2, 3])\n        False\n        >>> below_zero([1, -2, -3])\n        True\n    \"\"\"\n    balance = 0\n \n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n \n    return False\n```"}
{"task_id": "Python/4", "language": "fr", "model_id": "deepseek-chat", "generated_text": "\"\"\"Vérifie si le solde final est négatif après une série d'opérations.\n\nArgs:\n    operations: Liste d'entiers représentant des opérations (dépenses ou gains).\n\nReturns:\n    True si le solde final est < 0, False sinon.\n\"\"\""}
{"task_id": "Python/4", "language": "de", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nÜberprüft, ob der Kontostand nach einer Reihe von Operationen negativ ist.  \nArgs:  \n    operations: Liste von Ganzzahlen (Einzahlungen/Auszahlungen).  \nReturns:  \n    True, wenn der Endkontostand < 0, sonst False.  \n\"\"\""}
{"task_id": "Python/4", "language": "ha", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"  \n    Duba ko ma'auni (balance) ya ragu ƙasa da sifiri bayan aiwatar da ayyuka (operations).\n\n    Parameters:\n        operations (List[int]): Jerin lambobi masu nuna canjin ma'auni (kari ko ragi).\n\n    Returns:\n        bool: True idan ma'auni ya ragu ƙasa da 0, False idan ba haka ba.\n\n    Misali:\n        >>> below_zero([10, -20, 30])\n        False\n        >>> below_zero([-10, -5])\n        True\n    \"\"\"\n    balance = 0\n \n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n \n    return False\n```  \n\n**Bayani:**  \nWannan aikin yana ƙidaya jimlar ayyuka (operations) kuma yana duba ko ma'auni (balance) ya zama mara kyau (<0). Idan ya ragu ƙasa da sifiri, yana dawo da True, in ba haka ba False."}
{"task_id": "Python/4", "language": "hi", "model_id": "deepseek-chat", "generated_text": "यह फ़ंक्शन (`below_zero`) एक पूर्णांक सूची (`operations`) लेता है और जाँचता है कि सभी संचालनों (ऑपरेशन्स) को जोड़ने के बाद कुल शेष (`balance`) शून्य से कम है या नहीं।  \n\n**पैरामीटर:**  \n- `operations`: पूर्णांकों की सूची, जहाँ प्रत्येक पूर्णांक जमा/निकासी को दर्शाता है।  \n\n**वापसी मूल्य:**  \n- `True` अगर कुल शेष (`balance`) शून्य से कम है, अन्यथा `False`।  \n\n**उदाहरण:**  \n```python\nbelow_zero([10, -20, 5])  # True (10 - 20 + 5 = -5 < 0)\nbelow_zero([5, 10, 15])   # False (5 + 10 + 15 = 30 >= 0)\n```"}
{"task_id": "Python/4", "language": "hu", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nEllenőrzi, hogy a számlaegyenleg negatívvá válik-e a tranzakciók végrehajtása után.  \n\nParaméterek:  \n    operations: Egész számok listája, a tranzakciók (pozitív vagy negatív értékek).  \n\nVisszatérési érték:  \n    True, ha az egyenleg negatív lesz a tranzakciók után, egyébként False.  \n\"\"\""}
{"task_id": "Python/4", "language": "es", "model_id": "deepseek-chat", "generated_text": "\"\"\"  \nVerifica si el saldo final es negativo después de aplicar una lista de operaciones.  \n\nArgs:  \n    operations: Lista de enteros representando depósitos (positivos) y retiros (negativos).  \n\nReturns:  \n    bool: True si el saldo final es negativo, False en caso contrario.  \n\"\"\""}
{"task_id": "Python/4", "language": "arb", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    تتحقق هذه الدالة مما إذا كان الرصيد النهائي يصبح سالبًا بعد تطبيق سلسلة من العمليات المالية.\n    \n    المدخلات:\n        operations: قائمة بالأعداد الصحيحة تمثل سلسلة من الإيداعات (قيم موجبة) والسحوبات (قيم سالبة).\n    \n    المخرجات:\n        قيمة منطقية (True/False) تُشير إلى ما إذا كان الرصيد النهائي أقل من الصفر بعد تنفيذ جميع العمليات.\n    \n    مثال:\n        إذا كانت العمليات [100, -200, 50] سيكون الرصيد -50 وتعيد الدالة True.\n    \"\"\"\n    balance = 0\n \n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n \n    return False\n```"}
{"task_id": "Python/4", "language": "sw", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \n    Angalia ikiwa jumla ya shughuli za fedha (operations) inasababisha salio hasi.\n    \n    Inapokea orodha ya nambari kamili (operations) zinazowakilisha:\n        - Thamani chanya: amana (deposit)\n        - Thamani hasi: utoaji (withdrawal)\n    \n    Inarudisha:\n        - True: ikiwa jumla ya shughuli ni hasi (salio chini ya sifuri)\n        - False: ikiwa jumla si hasi\n    \n    Mfano:\n        >>> below_zero([10, -20, 5])\n        True  # (10 - 20 + 5 = -5)\n    \"\"\"\n    balance = 0\n \n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n \n    return False\n```"}
{"task_id": "Python/4", "language": "tr", "model_id": "deepseek-chat", "generated_text": "```python\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"Bir dizi işlem (operations) alır ve bu işlemler uygulandıktan sonra bakiyenin (balance) sıfırın altına düşüp düşmediğini kontrol eder.\n    \n    İşlemler:\n    - Pozitif sayılar bakiye artırır, negatif sayılar azaltır.\n    - Tüm işlemler toplanır ve sonuçta bakiye negatifse True, değilse False döner.\n    \n    Örnek:\n    >>> below_zero([10, -20, 30])\n    False  # (10 - 20 + 30 = 20 >= 0)\n    >>> below_zero([-10, -20])\n    True   # (-10 - 20 = -30 < 0)\n    \"\"\"\n    balance = 0\n \n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n \n    return False\n```"}
{"task_id": "Python/4", "language": "vi", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nKiểm tra xem số dư cuối cùng có âm hay không sau khi thực hiện một chuỗi các giao dịch.\n\nHàm nhận vào một danh sách các số nguyên `operations` đại diện cho các giao dịch (số dương là nạp tiền, số âm là rút tiền).\nHàm tính tổng tất cả các giao dịch và trả về True nếu số dư cuối cùng nhỏ hơn 0, ngược lại trả về False.\n\nVí dụ:\n    below_zero([10, -20, 30]) → True (vì 10 - 20 + 30 = 20 >= 0)\n    below_zero([-10, -20]) → True (vì -10 - 20 = -30 < 0)\n\"\"\""}
{"task_id": "Python/4", "language": "id", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"\nFungsi `below_zero` memeriksa apakah saldo akhir setelah serangkaian operasi (deposit/penarikan) bernilai negatif.\n\nArgs:\n    operations: List[int] - Daftar operasi keuangan (positif untuk deposit, negatif untuk penarikan).\n\nReturns:\n    bool - True jika saldo akhir < 0, False jika sebaliknya.\n\"\"\"\n```"}
{"task_id": "Python/4", "language": "ja", "model_id": "deepseek-chat", "generated_text": "この関数`below_zero`は、整数のリスト`operations`を受け取り、その要素の合計値が0未満かどうかを判定します。初期値0の`balance`変数を用いて、リスト内の各要素を順に加算します。全要素の加算後、`balance`が0未満であれば`True`を返し、そうでなければ`False`を返します。要するに、一連の数値操作（入金/出金）後の残高がマイナスになるかどうかをチェックする関数です。例えば、`[-10, 20, -30]`という入力の場合、合計は-20（0未満）となるため`True`が返されます。"}
{"task_id": "Python/4", "language": "ko", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"\n주어진 입출금 연산(operations) 리스트를 순회하며 잔액(balance)을 계산한 후, 최종 잔액이 0 미만인지 확인하는 함수.\n\nArgs:\n    operations (List[int]): 입출금 내역을 담은 정수 리스트. 양수는 입금, 음수는 출금을 나타냄.\n\nReturns:\n    bool: 모든 연산 후 잔액이 0 미만이면 True, 그렇지 않으면 False를 반환.\n\n예시:\n    below_zero([10, -20, 30]) → True  # 10 - 20 + 30 = 20 (False 아님, 설명 오류 주의)\n    below_zero([-10, -20]) → True     # -10 - 20 = -30 (True)\n    \n주의:\n    - 빈 리스트 입력 시 balance는 0이 되어 False 반환\n    - 각 연산은 순차적으로 적용되며, 중간 잔액은 검사하지 않음\n\"\"\"\n``` \n\n(설명 개선: 첫 번째 예시 결과가 실제로는 False가 되므로 설명을 수정하였습니다. 전체 글자수는 500자 내외입니다.)"}
{"task_id": "Python/4", "language": "ml", "model_id": "deepseek-chat", "generated_text": "`below_zero` എന്ന പൈത്തൺ ഫംഗ്ഷൻ ഒരു പ്രവർത്തന ലിസ്റ്റ് (operations) എടുത്ത് അതിലെ എല്ലാ സംഖ്യകളുടെയും ആകെത്തുക കണക്കാക്കുന്നു. ആകെത്തുക 0-ൽ കുറവാണെങ്കിൽ `True` റിട്ടേൺ ചെയ്യുന്നു, അല്ലാത്തപക്ഷം `False` റിട്ടേൺ ചെയ്യുന്നു.\n\n**വിശദീകരണം:**\n1. ഫംഗ്ഷൻ `operations` എന്ന പൂർണ്ണസംഖ്യ ലിസ്റ്റ് ഇൻപുട്ടായി സ്വീകരിക്കുന്നു.\n2. `balance` എന്ന വേരിയബിൾ 0 ആയി ആരംഭിക്കുന്നു.\n3. ലിസ്റ്റിലെ ഓരോ സംഖ്യയും `balance`-ലേക്ക് കൂട്ടുന്നു.\n4. എല്ലാ പ്രവർത്തനങ്ങളും പൂർത്തിയാക്കിയ ശേഷം, `balance` 0-ൽ കുറവാണോ എന്ന് പരിശോധിക്കുന്നു.\n5. 0-ൽ കുറവാണെങ്കിൽ `True`, അല്ലെങ്കിൽ `False` റിട്ടേൺ ചെയ്യുന്നു.\n\n**ഉദാഹരണം:**\n```python\nbelow_zero([10, -20, 5]) → True  # (10 + -20 + 5 = -5, -5 < 0)\nbelow_zero([1, 2, 3]) → False   # (1 + 2 + 3 = 6, 6 >= 0)\n```\n\nഈ ഫംഗ്ഷൻ സാധാരണയായി ബാങ്ക് ബാലൻസ്, ചെലവ് ട്രാക്കിംഗ് തുടങ്ങിയ സാഹചര്യങ്ങളിൽ ഉപയോഗപ്പെടുത്താം."}
{"task_id": "Python/4", "language": "fa", "model_id": "deepseek-chat", "generated_text": "این تابع بررسی میکند که آیا تراز حساب پس از انجام یک سری عملیات (واریز و برداشت) منفی میشود یا خیر. \n\n**ورودی:** لیستی از اعداد صحیح که هر عدد نشاندهنده یک عملیات (مثبت برای واریز و منفی برای برداشت) است.  \n**خروجی:** `True` اگر تراز نهایی منفی باشد، در غیر این صورت `False`.  \n\nمثال:  \n`below_zero([1, -2, 3])` → `False` (تراز نهایی: 2)  \n`below_zero([1, -2, -3])` → `True` (تراز نهایی: -4)"}
{"task_id": "Python/5", "language": "en", "model_id": "deepseek-chat", "generated_text": "\"Calculates the mean absolute deviation (MAD) of a list of numbers. MAD is the average of absolute differences between each number and the mean of the list.\" (298 characters)"}
{"task_id": "Python/5", "language": "sq", "model_id": "deepseek-chat", "generated_text": "\"\"\"\nLlogarit devijimin mesatar absolut (MAD) të një liste numrash.\n\nFunksioni merr si hyrje një listë numrash dhe kthen devijimin mesatar absolut.\nSë pari llogarit mesataren e numrave, pastaj gjen diferencën absolute midis çdo numri dhe mesatares,\ndhe në fund kthen mesataren e këtyre diferencave.\n\nShembull:\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n\"\"\""}
{"task_id": "Python/5", "language": "hy", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Հաշվում է թվերի ցուցակի միջին բացարձակ շեղումը (MAD):\n    \n    Պարամետրեր:\n        numbers (List[float]): Թվերի ցուցակ, որոնց համար հաշվարկվում է MAD-ը:\n    \n    Վերադարձնում է:\n        float: Միջին բացարձակ շեղման արժեքը:\n    \n    Նկարագրություն:\n        1. Հաշվում է ցուցակի թվերի միջին արժեքը:\n        2. Յուրաքանչյուր թվից հանում է միջինը և վերցնում բացարձակ արժեքը:\n        3. Ստացված արժեքների միջինը հանդիսանում է MAD-ը:\n    \n    Օրինակ:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "Python/5", "language": "bn", "model_id": "deepseek-chat", "generated_text": "এই ফাংশনটি একটি সংখ্যার লিস্ট নিয়ে তার গড় মান থেকে প্রতিটি সংখ্যার পরম বিচ্যুতির গড় হিসাব করে। প্রথমে সংখ্যাগুলোর গড় নির্ণয় করা হয়, তারপর প্রতিটি সংখ্যা থেকে গড় বিয়োগ করে পরম মান নেওয়া হয় এবং সেগুলোর গড় বের করে রিটার্ন করা হয়।"}
{"task_id": "Python/5", "language": "bg", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Изчислява средната абсолютна девиация (MAD) на списък от числа.\n    \n    Параметри:\n        numbers: Списък с числа (float).\n        \n    Връща:\n        Средната абсолютна девиация - средната стойност на абсолютните разлики\n        между всяко число и средната стойност на списъка.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "Python/5", "language": "zh", "model_id": "deepseek-chat", "generated_text": "计算给定数值列表的平均绝对偏差（Mean Absolute Deviation, MAD）。\n\n平均绝对偏差是各数据点与均值之差的绝对值的平均数，用于衡量数据的离散程度。该函数首先计算列表的均值，然后求每个元素与均值的绝对差，最后返回这些绝对差的平均值。"}
{"task_id": "Python/5", "language": "fr", "model_id": "deepseek-chat", "generated_text": "\"\"\"Calcule l'écart absolu moyen d'une liste de nombres.\n\nArgs:\n    numbers: Liste de nombres flottants.\n\nReturns:\n    float: L'écart absolu moyen, soit la moyenne des écarts absolus à la moyenne.\n\"\"\"  \n\n(298 caractères)"}
{"task_id": "Python/5", "language": "de", "model_id": "deepseek-chat", "generated_text": "\"\"\"Berechnet die mittlere absolute Abweichung (MAD) einer Liste von Zahlen. \n\nDie MAD ist der Durchschnitt der absoluten Differenzen zwischen jedem Wert und dem Mittelwert der Liste.\"\"\"  \n\n(Zeichen: 198)"}
{"task_id": "Python/5", "language": "ha", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Lissafin matsakaicin karkacewar mutum-mutumi (MAD) na jerin lambobi.\n    \n    Wannan aikin yana lissafin matsakaicin nisan kowane lamba daga matsakaicin (mean)\n    na jerin. Ana kiransa \"mean absolute deviation\" a Turanci.\n\n    Parameters:\n        numbers (List[float]): Jerin lambobi masu iyaka.\n\n    Returns:\n        float: Matsakaicin karkacewar mutum-mutumi, wanda aka lissafa ta hanyar:\n            1. Lissafin matsakaicin (mean) na jerin\n            2. Nisan kowane lamba daga matsakaicin (absolute deviation)\n            3. Matsakaicin waɗannan nisan (mean of absolute deviations)\n\n    Misali:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n        1.2\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "Python/5", "language": "hi", "model_id": "deepseek-chat", "generated_text": "यह फ़ंक्शन किसी संख्याओं की सूची का **माध्य निरपेक्ष विचलन (Mean Absolute Deviation - MAD)** गणना करता है। MAD, डेटा बिंदुओं के माध्य से उनके निरपेक्ष (absolute) विचलनों का औसत होता है।  \n\n**क्रियाविधि:**  \n1. पहले सभी संख्याओं का माध्य (mean) निकाला जाता है।  \n2. फिर प्रत्येक संख्या और माध्य के बीच का निरपेक्ष अंतर (absolute difference) लिया जाता है।  \n3. इन सभी अंतरों का औसत MAD होता है, जिसे वापस किया जाता है।  \n\n**उदाहरण:**  \n`mean_absolute_deviation([1, 2, 3, 4])` का परिणाम `1.0` होगा।"}
{"task_id": "Python/5", "language": "hu", "model_id": "deepseek-chat", "generated_text": "\"\"\"Kiszámolja egy lebegőpontos számokból álló lista átlagos abszolút eltérését.  \nAz átlag kiszámítása után az egyes elemek átlagtól való abszolút eltéréseinek átlagát adja vissza.  \n\nParaméterek:  \n    numbers: A bemeneti számok listája (float típusú).  \n\nVisszatérési érték:  \n    Az átlagos abszolút eltérés (float).  \n\"\"\""}
{"task_id": "Python/5", "language": "es", "model_id": "deepseek-chat", "generated_text": "\"\"\"Calcula la desviación absoluta media (DAM) de una lista de números.\n\nArgs:\n    numbers: Lista de números flotantes.\n\nReturns:\n    float: La DAM, que es el promedio de las diferencias absolutas entre cada número y la media.\n\"\"\""}
{"task_id": "Python/5", "language": "arb", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    تحسب هذه الدالة متوسط الانحراف المطلق لمجموعة من الأعداد.\n    \n    المدخلات:\n        numbers (List[float]): قائمة بالأعداد المراد حساب متوسط انحرافها المطلق.\n    \n    المخرجات:\n        float: قيمة متوسط الانحراف المطلق، وهو متوسط مجموع القيم المطلقة لانحراف كل عدد عن المتوسط الحسابي.\n    \n    مثال:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n        1.2\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "Python/5", "language": "sw", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Hesa tofauti kamili ya wastani (MAD) ya orodha ya namba.\n    \n    Inachukua:\n        numbers (List[float]): Orodha ya namba za desimali.\n    \n    Inarudisha:\n        float: Tofauti kamili ya wastani, ambayo ni wastani wa tofauti kamili\n               kati ya kila namba na wastani wa orodha.\n    \n    Mfano:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "Python/5", "language": "tr", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Calculate the mean absolute deviation (MAD) of a list of numbers.\n    \n    MAD is the average of the absolute differences between each number and the mean.\n    Steps: 1) Compute mean, 2) Find absolute deviations from mean, 3) Average them.\n    \n    Example: For [1, 2, 3], mean=2, MAD=(|1-2| + |2-2| + |3-2|)/3 ≈ 0.6667.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n``` \n\n(498 karakter)"}
{"task_id": "Python/5", "language": "vi", "model_id": "deepseek-chat", "generated_text": "\"\"\"Tính độ lệch tuyệt đối trung bình (MAD) của một danh sách số.\n\nHàm này nhận một danh sách các số thực và trả về độ lệch tuyệt đối trung bình \nso với giá trị trung bình của danh sách đó. \n\nĐộ lệch tuyệt đối trung bình là trung bình của các khoảng cách tuyệt đối \ngiữa mỗi phần tử và giá trị trung bình của danh sách.\n\nVí dụ:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n\"\"\""}
{"task_id": "Python/5", "language": "id", "model_id": "deepseek-chat", "generated_text": "Fungsi ini menghitung deviasi absolut rata-rata (mean absolute deviation/MAD) dari sebuah daftar angka. MAD adalah rata-rata jarak absolut setiap titik data dari nilai rata-ratanya. Contoh: untuk input [1, 2, 3], rata-ratanya 2 dan MAD-nya (|1-2| + |2-2| + |3-2|)/3 = 0.666."}
{"task_id": "Python/5", "language": "ja", "model_id": "deepseek-chat", "generated_text": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Calculate the mean absolute deviation (MAD) of a list of numbers.\n    \n    Computes the average distance between each data point and the mean of the dataset.\n    Steps:\n    1. Calculate the mean of the input numbers.\n    2. Compute absolute differences between each number and the mean.\n    3. Return the average of these absolute differences.\n    \n    Args:\n        numbers: List of floating-point numbers.\n    \n    Returns:\n        float: The mean absolute deviation of the input numbers.\n    \"\"\"\n```"}
{"task_id": "Python/5", "language": "ko", "model_id": "deepseek-chat", "generated_text": "'''주어진 숫자 리스트의 평균 절대 편차(Mean Absolute Deviation, MAD)를 계산합니다.\n\n평균 절대 편차는 각 데이터 포인트와 데이터셋 평균 사이의 거리의 평균으로, 데이터의 분산 정도를 나타내는 지표입니다.\n\nParameters:\n    numbers (List[float]): 평균 절대 편차를 계산할 실수 값들의 리스트\n\nReturns:\n    float: 입력 리스트의 평균 절대 편차 값\n\n동작 과정:\n1. 입력 리스트의 산술 평균을 계산\n2. 각 원소와 평균 사이의 절대 차이값을 구함\n3. 모든 절대 차이값의 평균을 계산하여 반환\n\n예시:\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n1.2\n'''"}
{"task_id": "Python/5", "language": "ml", "model_id": "deepseek-chat", "generated_text": "`mean_absolute_deviation` എന്ന ഫങ്ഷൻ ഒരു ഫ്ലോട്ട് മൂല്യങ്ങളുടെ ലിസ്റ്റ് (List[float]) ഇൻപുട്ടായി വാങ്ങി, അവയുടെ **മീൻ അബ്സല്യൂട്ട് ഡീവിയേഷൻ (MAD)** കണക്കാക്കി റിട്ടേൺ ചെയ്യുന്നു.  \n\n### പ്രവർത്തനരീതി:\n1. **ശരാശരി (mean)** കണക്കാക്കുന്നു: ലിസ്റ്റിലെ സംഖ്യകളുടെ ആകെത്തുകയെ എണ്ണം കൊണ്ട് ഹരിക്കുന്നു.  \n2. **ഓരോ സംഖ്യയുടെയും വ്യത്യാസം** ശരാശരിയിൽ നിന്ന് കണ്ടെത്തി, അതിന്റെ പൂർണ്ണമൂല്യം (absolute value) എടുക്കുന്നു.  \n3. ഈ പൂർണ്ണമൂല്യ വ്യത്യാസങ്ങളുടെ ശരാശരി കണക്കാക്കി MAD ആയി റിട്ടേൺ ചെയ്യുന്നു.  \n\n### ഉദാഹരണം:\n```python\nnumbers = [1.0, 2.0, 3.0, 4.0, 5.0]  \nmean = 3.0  \nabsolute_deviations = [2.0, 1.0, 0.0, 1.0, 2.0]  \nMAD = (2 + 1 + 0 + 1 + 2) / 5 = 1.2  \n```  \n\nഈ ഫങ്ഷൻ ഡേറ്റയുടെ വിതരണത്തിന്റെ സ്പ്രെഡ് (പ്രചരണം) അളക്കാൻ ഉപയോഗിക്കാം."}
{"task_id": "Python/5", "language": "fa", "model_id": "deepseek-chat", "generated_text": "```python\n\"\"\"\nمحاسبه میانگین انحراف مطلق (MAD) از میانگین داده‌ها.\n\nاین تابع لیستی از اعداد را دریافت کرده و میانگین انحراف مطلق آن‌ها را از میانگین محاسبه می‌کند.\nانحراف مطلق، فاصله هر عدد از میانگین است (بدون توجه به علامت).\n\nورودی:\n    numbers: لیست اعداد (اعشاری)\n\nخروجی:\n    عدد اعشاری: میانگین انحراف مطلق از میانگین\n\"\"\"\n```"}
