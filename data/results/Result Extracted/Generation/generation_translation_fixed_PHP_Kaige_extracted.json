[
  {
    "task_id": "PHP/1",
    "prompt": {
      "en": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Check if in given list of numbers, any two numbers are closer to each other than\n    * given threshold.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "sq": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Kontrolloni nëse në listën e dhënë të numrave, ndonjë dy numra janë më afër njëri-tjetrit sesa\n    * pragu i dhënë.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hy": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Ստուգել, արդյոք տրված թվերի ցուցակում որևէ երկու թիվ ավելի մոտ են միմյանց, քան\n    * տրված շեմը։\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "bn": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * প্রদত্ত সংখ্যার তালিকায়, কোনো দুটি সংখ্যা প্রদত্ত সীমার চেয়ে কাছাকাছি আছে কিনা তা পরীক্ষা করুন।\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "bg": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Проверете дали в даден списък от числа, някои две числа са по-близо едно до друго от\n    * даден праг.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "zh": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "fr": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Vérifiez si, dans la liste donnée de nombres, deux nombres quelconques sont plus proches l'un de l'autre que\n    * le seuil donné.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "de": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Überprüfen, ob in der gegebenen Liste von Zahlen zwei Zahlen näher beieinander liegen als\n    * der gegebene Schwellenwert.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "ha": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Duba idan a cikin jerin lambobin da aka bayar, ko wasu lambobi biyu sun fi kusa da juna fiye da\n    * ƙayyadadden tazara.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hi": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * जाँचें कि दिए गए संख्याओं की सूची में, कोई दो संख्याएँ दी गई सीमा से अधिक निकट हैं या नहीं।\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hu": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Ellenőrizze, hogy a megadott számok listájában bármely két szám közelebb van-e egymáshoz, mint a megadott küszöbérték.\n*/\nfunction has_close_elements($numbers, $threshold) "
    },
    "prompt_bertscore": {
      "sq": "0.9924593948447725",
      "hy": "0.9788281863158723",
      "bn": "0.960983828774841",
      "bg": "0.9919016407348266",
      "zh": "0.9393819803157728",
      "fr": "0.9861060034769906",
      "de": "0.9819339709537338",
      "ha": "0.9781361580683468",
      "hi": "0.9647460868220229",
      "hu": "0.976047956872527"
    },
    "canonical_solution": "{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "instruction": {
      "en": "Write a PHP function `function has_close_elements($numbers, $threshold)` to solve the following problem:\nCheck if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.",
      "sq": "Shkruani një funksion PHP `function has_close_elements($numbers, $threshold)` për të zgjidhur problemin e mëposhtëm:\nKontrolloni nëse në listën e dhënë të numrave, ndonjë dy numra janë më afër njëri-tjetrit sesa pragu i dhënë.",
      "hy": "Գրեք PHP ֆունկցիա `function has_close_elements($numbers, $threshold)`՝ լուծելու հետևյալ խնդիրը:\nՍտուգեք, արդյոք տրված թվերի ցուցակում որևէ երկու թիվ ավելի մոտ են միմյանց, քան տրված շեմը:",
      "bn": "PHP ফাংশন `function has_close_elements($numbers, $threshold)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nযদি প্রদত্ত সংখ্যার তালিকায়, কোনো দুটি সংখ্যা একে অপরের থেকে প্রদত্ত সীমার চেয়ে কাছাকাছি হয় কিনা তা পরীক্ষা করুন।",
      "bg": "Напишете PHP функция `function has_close_elements($numbers, $threshold)` за решаване на следния проблем:\nПроверете дали в даден списък от числа, някои две числа са по-близо едно до друго от дадения праг.",
      "zh": "编写一个 PHP 函数 `function has_close_elements($numbers, $threshold)` 来解决以下问题：\n检查在给定的数字列表中，是否有任意两个数字彼此之间的距离小于给定的阈值。",
      "fr": "Écrire une fonction PHP `function has_close_elements($numbers, $threshold)` pour résoudre le problème suivant :  \nVérifiez si, dans une liste de nombres donnée, deux nombres quelconques sont plus proches l'un de l'autre que le seuil donné.",
      "de": "Schreiben Sie eine PHP-Funktion `function has_close_elements($numbers, $threshold)`, um das folgende Problem zu lösen:\nÜberprüfen Sie, ob in der gegebenen Liste von Zahlen zwei beliebige Zahlen näher beieinander liegen als der angegebene Schwellenwert.",
      "ha": "Rubuta aikin PHP `function has_close_elements($numbers, $threshold)` don warware matsalar mai zuwa:\nDuba idan a cikin jerin lambobin da aka bayar, akwai wasu lambobi biyu da suka fi kusa da juna fiye da ƙayyadadden tazara.",
      "hi": "PHP फ़ंक्शन `function has_close_elements($numbers, $threshold)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nजाँच करें कि दिए गए संख्याओं की सूची में, क्या कोई दो संख्याएँ एक-दूसरे के अधिक निकट हैं दिए गए सीमा से।",
      "hu": "Írj egy PHP függvényt `function has_close_elements($numbers, $threshold)` a következő probléma megoldására:\nEllenőrizd, hogy a megadott számok listájában bármely két szám közelebb van-e egymáshoz, mint a megadott küszöbérték."
    },
    "instruction_bertscore": {
      "sq": "0.9893043498724143",
      "hy": "0.9692019621597785",
      "bn": "0.9415692980717291",
      "bg": "0.9861717501331132",
      "zh": "0.9403252759953075",
      "fr": "0.9787046382188686",
      "de": "0.9662765339078967",
      "ha": "0.9572789749077784",
      "hi": "0.9591455045983631",
      "hu": "0.9760032650367941"
    },
    "level": "easy",
    "test": "// Test cases\nfunction test_has_close_elements() {\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) != true){\n        exit(1);\n    }\n\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) != false){\n        exit(1);\n    }\n}\n\ntest_has_close_elements();\n\n?>",
    "entry_point": "has_close_elements",
    "signature": "function has_close_elements($numbers, $threshold)",
    "docstring": {
      "en": "Check if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.",
      "sq": "Kontrolloni nëse në listën e dhënë të numrave, ndonjë dy numra janë më afër njëri-tjetrit se sa pragu i dhënë.",
      "hy": "Ստուգեք, արդյոք տրված թվերի ցանկում որևէ երկու թիվ ավելի մոտ են միմյանց, քան տրված շեմը:",
      "bn": "প্রদত্ত সংখ্যার তালিকায়, কোনো দুটি সংখ্যা কি নির্দিষ্ট সীমার চেয়ে কাছাকাছি আছে কিনা তা পরীক্ষা করুন।",
      "bg": "Проверете дали в дадения списък от числа, някои две числа са по-близо едно до друго от дадения праг.",
      "zh": "检查给定数字列表中是否有任意两个数字之间的距离小于给定的阈值。",
      "fr": "Vérifiez si, dans la liste donnée de nombres, deux nombres quelconques sont plus proches l'un de l'autre que le seuil donné.",
      "de": "Überprüfen Sie, ob in der gegebenen Liste von Zahlen zwei Zahlen näher beieinander liegen als der angegebene Schwellenwert.",
      "ha": "Duba idan a cikin jerin lambobin da aka bayar, ko akwai kowanne daga cikin lambobi biyu da suka fi kusa da juna fiye da ƙayyadadden ƙimar da aka bayar.",
      "hi": "दिए गए संख्याओं की सूची में जाँच करें कि क्या कोई दो संख्याएँ दी गई सीमा से अधिक निकट हैं।",
      "hu": "Ellenőrizze, hogy a megadott számok listájában bármely két szám közelebb van-e egymáshoz, mint a megadott küszöbérték."
    },
    "docstring_bertscore": {
      "sq": "0.9754973534562983",
      "hy": "0.913825599600681",
      "bn": "0.8403408997241568",
      "bg": "0.9754973534562983",
      "zh": "0.8307951208723822",
      "fr": "0.9617060488402839",
      "de": "0.911736007992194",
      "ha": "0.904459779874124",
      "hi": "0.8477053197314064",
      "hu": "0.9282684118664898"
    }
  },
  {
    "task_id": "PHP/2",
    "prompt": {
      "en": "<?php\n\n\n/**\n    * Determines the outcome of a \"Rock, Paper, Scissors\" game.\n    * In this game, each player selects either rock (0), paper (1), or scissors (2).\n    * The rules are as follows:\n    * - Paper beats rock\n    * - Rock beats scissors\n    * - Scissors beats paper\n    * If both players choose the same item, it's a draw.\n    * Input: Two integers representing the choices of two players.\n    * Output: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "sq": "<?php\n\n\n/**\n    * Përcakton rezultatin e një loje \"Gur, Letër, Gërshërë\".\n    * Në këtë lojë, secili lojtar zgjedh ose gurin (0), letrën (1), ose gërshërët (2).\n    * Rregullat janë si më poshtë:\n    * - Letra mund gurin\n    * - Guri mund gërshërët\n    * - Gërshërët mund letrën\n    * Nëse të dy lojtarët zgjedhin të njëjtën gjë, është barazim.\n    * Hyrja: Dy numra të plotë që përfaqësojnë zgjedhjet e dy lojtarëve.\n    * Dalja: Kthen 1 nëse lojtari i parë fiton, -1 nëse lojtari i dytë fiton, dhe 0 për barazim.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hy": "<?php\n\n\n/**\n    * Սահմանում է \"Քար, թուղթ, մկրատ\" խաղի արդյունքը։\n    * Այս խաղում յուրաքանչյուր խաղացող ընտրում է կամ քար (0), կամ թուղթ (1), կամ մկրատ (2)։\n    * Կանոններն են հետևյալը.\n    * - Թուղթը հաղթում է քարին\n    * - Քարը հաղթում է մկրատին\n    * - Մկրատը հաղթում է թղթին\n    * Եթե երկու խաղացողներն էլ ընտրում են նույն իրը, ապա դա ոչ-ոքի է։\n    * Մուտք: Երկու ամբողջ թվեր, որոնք ներկայացնում են երկու խաղացողների ընտրությունները։\n    * Ելք: Վերադարձնում է 1, եթե առաջին խաղացողը հաղթում է, -1, եթե երկրորդ խաղացողը հաղթում է, և 0՝ ոչ-ոքիի դեպքում։\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "bn": "<?php\n\n\n/**\n    * \"Rock, Paper, Scissors\" গেমের ফলাফল নির্ধারণ করে।\n    * এই গেমে, প্রতিটি খেলোয়াড় পাথর (0), কাগজ (1), বা কাঁচি (2) নির্বাচন করে।\n    * নিয়মগুলি নিম্নরূপ:\n    * - কাগজ পাথরকে হারায়\n    * - পাথর কাঁচিকে হারায়\n    * - কাঁচি কাগজকে হারায়\n    * যদি উভয় খেলোয়াড় একই আইটেম নির্বাচন করে, তবে এটি একটি ড্র।\n    * ইনপুট: দুটি পূর্ণসংখ্যা যা দুই খেলোয়াড়ের পছন্দকে উপস্থাপন করে।\n    * আউটপুট: প্রথম খেলোয়াড় জিতলে 1 ফেরত দেয়, দ্বিতীয় খেলোয়াড় জিতলে -1 ফেরত দেয়, এবং ড্র হলে 0।\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "bg": "<?php\n\n\n/**\n    * Определя изхода от играта \"Камък, Ножица, Хартия\".\n    * В тази игра всеки играч избира или камък (0), хартия (1) или ножица (2).\n    * Правилата са следните:\n    * - Хартия побеждава камък\n    * - Камък побеждава ножица\n    * - Ножица побеждава хартия\n    * Ако и двамата играчи изберат един и същ елемент, това е равенство.\n    * Вход: Две цели числа, представляващи изборите на двамата играчи.\n    * Изход: Връща 1, ако първият играч печели, -1, ако вторият играч печели, и 0 за равенство.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "zh": "<?php\n\n\n/**\n    * 确定“石头、剪刀、布”游戏的结果。\n    * 在这个游戏中，每个玩家选择石头 (0)、布 (1) 或剪刀 (2)。\n    * 规则如下：\n    * - 布胜石头\n    * - 石头胜剪刀\n    * - 剪刀胜布\n    * 如果两个玩家选择相同的物品，则为平局。\n    * 输入：两个整数，代表两个玩家的选择。\n    * 输出：如果第一个玩家赢，返回 1；如果第二个玩家赢，返回 -1；平局返回 0。\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "fr": "<?php\n\n\n/**\n    * Détermine le résultat d'un jeu de \"Pierre, Papier, Ciseaux\".\n    * Dans ce jeu, chaque joueur choisit soit pierre (0), papier (1), ou ciseaux (2).\n    * Les règles sont les suivantes :\n    * - Le papier bat la pierre\n    * - La pierre bat les ciseaux\n    * - Les ciseaux battent le papier\n    * Si les deux joueurs choisissent le même objet, c'est une égalité.\n    * Entrée : Deux entiers représentant les choix de deux joueurs.\n    * Sortie : Retourne 1 si le premier joueur gagne, -1 si le deuxième joueur gagne, et 0 pour une égalité.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "de": "<?php\n\n\n/**\n    * Bestimmt das Ergebnis eines \"Stein, Papier, Schere\" Spiels.\n    * In diesem Spiel wählt jeder Spieler entweder Stein (0), Papier (1) oder Schere (2).\n    * Die Regeln sind wie folgt:\n    * - Papier schlägt Stein\n    * - Stein schlägt Schere\n    * - Schere schlägt Papier\n    * Wenn beide Spieler dasselbe wählen, ist es ein Unentschieden.\n    * Eingabe: Zwei ganze Zahlen, die die Auswahl der beiden Spieler darstellen.\n    * Ausgabe: Gibt 1 zurück, wenn der erste Spieler gewinnt, -1, wenn der zweite Spieler gewinnt, und 0 für ein Unentschieden.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "ha": "<?php\n\n\n/**\n    * Yana tantance sakamakon wasan \"Rock, Paper, Scissors\".\n    * A cikin wannan wasan, kowanne dan wasa yana zaɓar dutse (0), takarda (1), ko almakashi (2).\n    * Dokokin sune kamar haka:\n    * - Takarda tana doke dutse\n    * - Dutse yana doke almakashi\n    * - Almakashi yana doke takarda\n    * Idan duka 'yan wasan biyu sun zaɓi abu ɗaya, wasan ya zama kunnen doki.\n    * Shigarwa: Lambobi guda biyu da ke wakiltar zaɓin 'yan wasa biyu.\n    * Fitarwa: Yana dawowa da 1 idan dan wasa na farko ya ci, -1 idan dan wasa na biyu ya ci, kuma 0 idan kunnen doki.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hi": "<?php\n\n\n/**\n    * \"Rock, Paper, Scissors\" खेल के परिणाम का निर्धारण करता है।\n    * इस खेल में, प्रत्येक खिलाड़ी या तो चट्टान (0), कागज (1), या कैंची (2) का चयन करता है।\n    * नियम इस प्रकार हैं:\n    * - कागज चट्टान को हराता है\n    * - चट्टान कैंची को हराती है\n    * - कैंची कागज को हराती है\n    * यदि दोनों खिलाड़ी एक ही वस्तु चुनते हैं, तो यह एक ड्रॉ है।\n    * इनपुट: दो पूर्णांक जो दो खिलाड़ियों के चयन का प्रतिनिधित्व करते हैं।\n    * आउटपुट: यदि पहला खिलाड़ी जीतता है तो 1 लौटाता है, यदि दूसरा खिलाड़ी जीतता है तो -1 लौटाता है, और ड्रॉ के लिए 0 लौटाता है।\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hu": "<?php\n\n\n/**\n    * Meghatározza egy \"Kő, Papír, Olló\" játék kimenetelét.\n    * Ebben a játékban minden játékos választ egyet a kő (0), papír (1) vagy olló (2) közül.\n    * A szabályok a következők:\n    * - A papír legyőzi a követ\n    * - A kő legyőzi az ollót\n    * - Az olló legyőzi a papírt\n    * Ha mindkét játékos ugyanazt az elemet választja, döntetlen az eredmény.\n    * Bemenet: Két egész szám, amelyek a két játékos választását jelölik.\n    * Kimenet: 1-et ad vissza, ha az első játékos nyer, -1-et, ha a második játékos nyer, és 0-t döntetlen esetén.\n*/\n\nfunction determineGameOutcome($player1, $player2) "
    },
    "prompt_bertscore": {
      "sq": "0.9867749906003161",
      "hy": "0.9890423563998294",
      "bn": "0.9860823664616475",
      "bg": "0.9861461268139596",
      "zh": "0.966648568611575",
      "fr": "0.9890999592103294",
      "de": "0.9808448805745196",
      "ha": "0.9803216881508736",
      "hi": "0.995126404970928",
      "hu": "0.9785737407977666"
    },
    "canonical_solution": "{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}",
    "instruction": {
      "en": "Write a PHP function `function determineGameOutcome($player1, $player2)` to solve the following problem:\nDetermines the outcome of a \"Rock, Paper, Scissors\" game.\nIn this game, each player selects either rock (0), paper (1), or scissors (2).\nThe rules are as follows:\n- Paper beats rock\n- Rock beats scissors\n- Scissors beats paper\nIf both players choose the same item, it's a draw.\nInput: Two integers representing the choices of two players.\nOutput: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.",
      "sq": "Shkruani një funksion PHP `function determineGameOutcome($player1, $player2)` për të zgjidhur problemin e mëposhtëm:\nPërcakton rezultatin e një loje \"Gur, Letër, Gërshërë\".\nNë këtë lojë, secili lojtar zgjedh ose gurin (0), letrën (1), ose gërshërën (2).\nRregullat janë si më poshtë:\n- Letra mund gurin\n- Guri mund gërshërën\n- Gërshëra mund letrën\nNëse të dy lojtarët zgjedhin të njëjtën gjë, është barazim.\nHyrja: Dy numra të plotë që përfaqësojnë zgjedhjet e dy lojtarëve.\nDalja: Kthen 1 nëse fiton lojtari i parë, -1 nëse fiton lojtari i dytë, dhe 0 për barazim.",
      "hy": "Գրեք PHP ֆունկցիա `function determineGameOutcome($player1, $player2)` հետևյալ խնդիրը լուծելու համար:\nՍահմանում է \"Քար, Թուղթ, Մկրատ\" խաղի արդյունքը:\nԱյս խաղում յուրաքանչյուր խաղացող ընտրում է կամ քար (0), թուղթ (1) կամ մկրատ (2):\nԿանոններն են հետևյալը:\n- Թուղթը հաղթում է քարին\n- Քարը հաղթում է մկրատին\n- Մկրատը հաղթում է թղթին\nԵթե երկու խաղացողներն էլ ընտրում են նույն առարկան, դա ոչ ոքի է:\nՄուտք: Երկու ամբողջ թվեր, որոնք ներկայացնում են երկու խաղացողների ընտրությունները:\nԵլք: Վերադարձնում է 1, եթե առաջին խաղացողը հաղթում է, -1, եթե երկրորդ խաղացողը հաղթում է, և 0՝ ոչ ոքիի դեպքում:",
      "bn": "PHP ফাংশন `function determineGameOutcome($player1, $player2)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি \"Rock, Paper, Scissors\" খেলার ফলাফল নির্ধারণ করে।\nএই খেলায়, প্রতিটি খেলোয়াড় পাথর (0), কাগজ (1), বা কাঁচি (2) বেছে নেয়।\nনিয়মগুলি নিম্নরূপ:\n- কাগজ পাথরকে হারায়\n- পাথর কাঁচিকে হারায়\n- কাঁচি কাগজকে হারায়\nযদি উভয় খেলোয়াড় একই আইটেম নির্বাচন করে, তবে এটি একটি ড্র।\nইনপুট: দুটি পূর্ণসংখ্যা যা দুই খেলোয়াড়ের পছন্দকে উপস্থাপন করে।\nআউটপুট: প্রথম খেলোয়াড় জিতলে 1, দ্বিতীয় খেলোয়াড় জিতলে -1, এবং ড্র হলে 0 রিটার্ন করে।",
      "bg": "Напишете PHP функция `function determineGameOutcome($player1, $player2)`, за да решите следния проблем:\nОпределя изхода от играта \"Камък, Ножица, Хартия\".\nВ тази игра всеки играч избира или камък (0), хартия (1), или ножица (2).\nПравилата са следните:\n- Хартията побеждава камъка\n- Камъкът побеждава ножицата\n- Ножицата побеждава хартията\nАко и двамата играчи изберат един и същ предмет, това е равенство.\nВход: Две цели числа, представляващи избора на двамата играчи.\nИзход: Връща 1, ако първият играч печели, -1, ако вторият играч печели, и 0 за равенство.",
      "zh": "编写一个 PHP 函数 `function determineGameOutcome($player1, $player2)` 来解决以下问题：\n确定“石头、剪刀、布”游戏的结果。\n在这个游戏中，每个玩家选择石头 (0)、布 (1) 或剪刀 (2)。\n规则如下：\n- 布胜石头\n- 石头胜剪刀\n- 剪刀胜布\n如果两个玩家选择相同的物品，则为平局。\n输入：两个整数，代表两个玩家的选择。\n输出：如果第一个玩家赢，返回 1；如果第二个玩家赢，返回 -1；平局返回 0。",
      "fr": "Écrire une fonction PHP `function determineGameOutcome($player1, $player2)` pour résoudre le problème suivant :  \nDétermine le résultat d'un jeu de \"Pierre, Papier, Ciseaux\".  \nDans ce jeu, chaque joueur choisit soit pierre (0), papier (1), soit ciseaux (2).  \nLes règles sont les suivantes :  \n- Le papier bat la pierre  \n- La pierre bat les ciseaux  \n- Les ciseaux battent le papier  \nSi les deux joueurs choisissent le même objet, c'est un match nul.  \nEntrée : Deux entiers représentant les choix de deux joueurs.  \nSortie : Retourne 1 si le premier joueur gagne, -1 si le deuxième joueur gagne, et 0 pour un match nul.  ",
      "de": "Schreiben Sie eine PHP-Funktion `function determineGameOutcome($player1, $player2)`, um das folgende Problem zu lösen:\nBestimmt das Ergebnis eines \"Stein, Papier, Schere\" Spiels.\nIn diesem Spiel wählt jeder Spieler entweder Stein (0), Papier (1) oder Schere (2).\nDie Regeln sind wie folgt:\n- Papier schlägt Stein\n- Stein schlägt Schere\n- Schere schlägt Papier\nWenn beide Spieler dasselbe wählen, ist es ein Unentschieden.\nEingabe: Zwei ganze Zahlen, die die Auswahl der beiden Spieler darstellen.\nAusgabe: Gibt 1 zurück, wenn der erste Spieler gewinnt, -1, wenn der zweite Spieler gewinnt, und 0 für ein Unentschieden.",
      "ha": "Rubuta aikin PHP `function determineGameOutcome($player1, $player2)` don warware matsalar mai zuwa:\nYana tantance sakamakon wasan \"Rock, Paper, Scissors\".\nA cikin wannan wasan, kowanne ɗan wasa yana zaɓar ko dai dutse (0), takarda (1), ko almakashi (2).\nDokokin sune kamar haka:\n- Takarda tana doke dutse\n- Dutse yana doke almakashi\n- Almakashi yana doke takarda\nIdan dukkan 'yan wasan sun zaɓi abu iri ɗaya, to wasan ya yi kunnen doki.\nShigarwa: Lambobi guda biyu da ke wakiltar zaɓin 'yan wasa biyu.\nFitarwa: Yana dawowa da 1 idan ɗan wasa na farko ya yi nasara, -1 idan ɗan wasa na biyu ya yi nasara, da 0 don kunnen doki.",
      "hi": "PHP फ़ंक्शन `function determineGameOutcome($player1, $player2)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\n\"Rock, Paper, Scissors\" खेल के परिणाम को निर्धारित करता है।\nइस खेल में, प्रत्येक खिलाड़ी या तो rock (0), paper (1), या scissors (2) का चयन करता है।\nनियम निम्नलिखित हैं:\n- Paper, rock को हराता है\n- Rock, scissors को हराता है\n- Scissors, paper को हराता है\nयदि दोनों खिलाड़ी एक ही वस्तु चुनते हैं, तो यह एक ड्रॉ है।\nइनपुट: दो पूर्णांक जो दो खिलाड़ियों के चयन का प्रतिनिधित्व करते हैं।\nआउटपुट: 1 लौटाता है यदि पहला खिलाड़ी जीतता है, -1 यदि दूसरा खिलाड़ी जीतता है, और 0 ड्रॉ के लिए।",
      "hu": "Írj egy PHP függvényt `function determineGameOutcome($player1, $player2)` a következő probléma megoldására:\nMeghatározza egy \"Kő, papír, olló\" játék kimenetelét.\nEbben a játékban minden játékos kiválasztja a következők egyikét: kő (0), papír (1) vagy olló (2).\nA szabályok a következők:\n- A papír üti a követ\n- A kő üti az ollót\n- Az olló üti a papírt\nHa mindkét játékos ugyanazt az elemet választja, az döntetlen.\nBemenet: Két egész szám, amelyek a két játékos választását képviselik.\nKimenet: 1-et ad vissza, ha az első játékos nyer, -1-et, ha a második játékos nyer, és 0-t döntetlen esetén."
    },
    "instruction_bertscore": {
      "sq": "0.9908437353254348",
      "hy": "0.9892332401960039",
      "bn": "0.9891525962613037",
      "bg": "0.9879677660384306",
      "zh": "0.9747429552691278",
      "fr": "0.9892646237962074",
      "de": "0.9794075911373511",
      "ha": "0.9706640803945763",
      "hi": "0.9846643441714394",
      "hu": "0.9747963868416262"
    },
    "level": "easy",
    "test": "function main(){\n    \n    assert(determineGameOutcome(0, 1) === -1);\n    assert(determineGameOutcome(1, 2) === -1);\n    assert(determineGameOutcome(2, 0) === -1);\n    assert(determineGameOutcome(0, 2) === 1);\n    assert(determineGameOutcome(1, 0) === 1);\n    assert(determineGameOutcome(2, 1) === 1);\n    assert(determineGameOutcome(0, 0) === 0);\n    assert(determineGameOutcome(1, 1) === 0);\n    assert(determineGameOutcome(2, 2) === 0);\n}\nmain();\n// echo \"All test passed!\\n\";\n?>",
    "entry_point": "determineGameOutcome",
    "signature": "function determineGameOutcome($player1, $player2)",
    "docstring": {
      "en": "Determines the outcome of a \"Rock, Paper, Scissors\" game.\nIn this game, each player selects either rock (0), paper (1), or scissors (2).\nThe rules are as follows:\n- Paper beats rock\n- Rock beats scissors\n- Scissors beats paper\nIf both players choose the same item, it's a draw.\nInput: Two integers representing the choices of two players.\nOutput: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.",
      "sq": "Përcakton rezultatin e një loje \"Gur, Letër, Gërshërë\".\nNë këtë lojë, secili lojtar zgjedh ose gurin (0), letrën (1), ose gërshërën (2).\nRregullat janë si më poshtë:\n- Letra mund gurin\n- Guri mund gërshërën\n- Gërshëra mund letrën\nNëse të dy lojtarët zgjedhin të njëjtën gjë, është barazim.\nInput: Dy numra të plotë që përfaqësojnë zgjedhjet e dy lojtarëve.\nOutput: Kthen 1 nëse fiton lojtari i parë, -1 nëse fiton lojtari i dytë, dhe 0 për barazim.",
      "hy": "Վճռում է \"Քար, Թուղթ, Մկրատ\" խաղի արդյունքը։  \nԱյս խաղում յուրաքանչյուր խաղացող ընտրում է կամ քար (0), թուղթ (1), կամ մկրատ (2)։  \nԿանոններն են հետևյալը:  \n- Թուղթը հաղթում է քարին  \n- Քարը հաղթում է մկրատին  \n- Մկրատը հաղթում է թղթին  \nԵթե երկու խաղացողներն էլ ընտրում են նույն առարկան, դա ոչ-ոքի է։  \nՄուտք: Երկու ամբողջ թվեր, որոնք ներկայացնում են երկու խաղացողների ընտրությունները։  \nԵլք: Վերադարձնում է 1, եթե առաջին խաղացողը հաղթում է, -1, եթե երկրորդ խաղացողը հաղթում է, և 0՝ ոչ-ոքիի դեպքում։  ",
      "bn": "\"Rock, Paper, Scissors\" গেমের ফলাফল নির্ধারণ করে। \nএই গেমে, প্রতিটি খেলোয়াড় পাথর (0), কাগজ (1), বা কাঁচি (2) নির্বাচন করে। \nনিয়মগুলি নিম্নরূপ: \n- কাগজ পাথরকে হারায় \n- পাথর কাঁচিকে হারায় \n- কাঁচি কাগজকে হারায় \nযদি উভয় খেলোয়াড় একই আইটেম নির্বাচন করে, তবে এটি একটি ড্র হয়। \nইনপুট: দুটি পূর্ণসংখ্যা যা দুই খেলোয়াড়ের পছন্দকে উপস্থাপন করে। \nআউটপুট: প্রথম খেলোয়াড় জিতলে 1, দ্বিতীয় খেলোয়াড় জিতলে -1, এবং ড্র হলে 0 প্রদান করে।",
      "bg": "Определя изхода от играта \"Камък, Ножица, Хартия\".\nВ тази игра всеки играч избира или камък (0), хартия (1), или ножица (2).\nПравилата са следните:\n- Хартия побеждава камък\n- Камък побеждава ножица\n- Ножица побеждава хартия\nАко и двамата играчи изберат един и същ елемент, това е равенство.\nВход: Две цели числа, представляващи избора на двамата играчи.\nИзход: Връща 1, ако първият играч печели, -1, ако вторият играч печели, и 0 за равенство.",
      "zh": "确定“石头、剪刀、布”游戏的结果。  \n在这个游戏中，每个玩家选择石头 (0)、布 (1) 或剪刀 (2)。  \n规则如下：  \n- 布胜石头  \n- 石头胜剪刀  \n- 剪刀胜布  \n如果两个玩家选择相同的物品，则为平局。  \n输入：两个整数，代表两个玩家的选择。  \n输出：如果第一个玩家获胜，返回 1；如果第二个玩家获胜，返回 -1；平局返回 0。",
      "fr": "Détermine le résultat d'un jeu de \"Pierre, Papier, Ciseaux\".  \nDans ce jeu, chaque joueur choisit soit pierre (0), papier (1), soit ciseaux (2).  \nLes règles sont les suivantes :  \n- Le papier bat la pierre  \n- La pierre bat les ciseaux  \n- Les ciseaux battent le papier  \nSi les deux joueurs choisissent le même objet, c'est une égalité.  \nEntrée : Deux entiers représentant les choix de deux joueurs.  \nSortie : Renvoie 1 si le premier joueur gagne, -1 si le deuxième joueur gagne, et 0 pour une égalité.",
      "de": "Bestimmt das Ergebnis eines \"Stein, Papier, Schere\" Spiels. In diesem Spiel wählt jeder Spieler entweder Stein (0), Papier (1) oder Schere (2). Die Regeln sind wie folgt: \n- Papier schlägt Stein \n- Stein schlägt Schere \n- Schere schlägt Papier \nWenn beide Spieler dasselbe wählen, ist es ein Unentschieden. \nEingabe: Zwei ganze Zahlen, die die Auswahl der beiden Spieler darstellen. \nAusgabe: Gibt 1 zurück, wenn der erste Spieler gewinnt, -1, wenn der zweite Spieler gewinnt, und 0 bei einem Unentschieden.",
      "ha": "Yana tantance sakamakon wasan \"Rock, Paper, Scissors\".\nA cikin wannan wasan, kowane ɗan wasa yana zaɓar dutse (0), takarda (1), ko almakashi (2).  \nDokokin suna kamar haka:  \n- Takarda tana doke dutse  \n- Dutse yana doke almakashi  \n- Almakashi yana doke takarda  \nIdan duka 'yan wasan biyu suka zaɓi abu ɗaya, wasan ya tashi kunnen doki.  \nInput: Lambobi guda biyu da ke wakiltar zaɓin 'yan wasa biyu.  \nOutput: Yana dawowa da 1 idan ɗan wasa na farko ya ci, -1 idan ɗan wasa na biyu ya ci, da 0 idan wasan ya tashi kunnen doki.  ",
      "hi": "\"Rock, Paper, Scissors\" खेल का परिणाम निर्धारित करता है।  \nइस खेल में, प्रत्येक खिलाड़ी चट्टान (0), कागज (1), या कैंची (2) में से एक का चयन करता है।  \nनियम इस प्रकार हैं:  \n- कागज चट्टान को हराता है  \n- चट्टान कैंची को हराता है  \n- कैंची कागज को हराती है  \nयदि दोनों खिलाड़ी एक ही वस्तु चुनते हैं, तो यह ड्रॉ होता है।  \nइनपुट: दो पूर्णांक जो दो खिलाड़ियों की पसंद को दर्शाते हैं।  \nआउटपुट: 1 लौटाता है यदि पहला खिलाड़ी जीतता है, -1 यदि दूसरा खिलाड़ी जीतता है, और ड्रॉ के लिए 0।  ",
      "hu": "Meghatározza a \"Kő, Papír, Olló\" játék kimenetelét.  \nEbben a játékban minden játékos kiválasztja a következők egyikét: kő (0), papír (1) vagy olló (2).  \nA szabályok a következők:  \n- A papír üti a követ  \n- A kő üti az ollót  \n- Az olló üti a papírt  \nHa mindkét játékos ugyanazt az elemet választja, döntetlen az eredmény.  \nBemenet: Két egész szám, amelyek a két játékos választásait képviselik.  \nKimenet: 1-et ad vissza, ha az első játékos nyer, -1-et, ha a második játékos nyer, és 0-t döntetlen esetén.  "
    },
    "docstring_bertscore": {
      "sq": "0.9835657195339355",
      "hy": "0.9855089205515998",
      "bn": "0.9661078967143981",
      "bg": "0.9736294333530462",
      "zh": "0.967519364202032",
      "fr": "0.9708492039097009",
      "de": "0.9685848175659031",
      "ha": "0.9741764614224162",
      "hi": "0.9736246662239013",
      "hu": "0.96692784292731"
    }
  },
  {
    "task_id": "PHP/3",
    "prompt": {
      "en": "<?php\n\n/**\n    * Removes all asterisks (*) from a string except those at the beginning.\n    * This function takes a string that may contain alphabetic characters and asterisks.\n    * It will preserve any asterisks that appear at the start of the string but remove all others.\n    * For example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\n    * Input: A single string.\n    * Output: The modified string with only the leading asterisks retained.\n*/\nfunction removeInnerAsterisks($string) ",
      "sq": "<?php\n\n/**\n    * Heq të gjitha yjet (*) nga një varg përveç atyre në fillim.\n    * Kjo funksion merr një varg që mund të përmbajë karaktere alfabetike dhe yje.\n    * Do të ruajë çdo yll që shfaqet në fillim të vargut por do të heqë të gjithë të tjerët.\n    * Për shembull, një varg si \"***Hello*World**\" do të transformohej në \"***HelloWorld\".\n    * Hyrja: Një varg i vetëm.\n    * Dalja: Vargu i modifikuar me vetëm yjet kryesorë të ruajtur.\n*/\nfunction removeInnerAsterisks($string) ",
      "hy": "<?php\n\n/**\n    * Հեռացնում է բոլոր աստղանիշերը (*) տողից, բացի սկզբում գտնվողներից:\n    * Այս ֆունկցիան ընդունում է տող, որը կարող է պարունակել այբբենական նիշեր և աստղանիշեր:\n    * Այն կպահպանի ցանկացած աստղանիշ, որը հայտնվում է տողի սկզբում, բայց կհեռացնի բոլոր մյուսները:\n    * Օրինակ, տողը, ինչպիսին է \"***Hello*World**\", կվերափոխվի \"***HelloWorld\":\n    * Մուտք: Միայն մեկ տող:\n    * Ելք: Փոփոխված տողը, որտեղ միայն սկզբնական աստղանիշերն են պահպանված:\n*/\nfunction removeInnerAsterisks($string) ",
      "bn": "<?php\n\n/**\n    * একটি স্ট্রিং থেকে সমস্ত তারকা চিহ্ন (*) সরিয়ে দেয় শুধুমাত্র শুরুতে থাকা ছাড়া।\n    * এই ফাংশনটি একটি স্ট্রিং গ্রহণ করে যা বর্ণমালা অক্ষর এবং তারকা চিহ্ন থাকতে পারে।\n    * এটি স্ট্রিংয়ের শুরুতে উপস্থিত যে কোনো তারকা চিহ্ন সংরক্ষণ করবে কিন্তু অন্য সব সরিয়ে দেবে।\n    * উদাহরণস্বরূপ, \"***Hello*World**\" এর মতো একটি স্ট্রিং \"***HelloWorld\" এ রূপান্তরিত হবে।\n    * ইনপুট: একটি একক স্ট্রিং।\n    * আউটপুট: পরিবর্তিত স্ট্রিং যেখানে শুধুমাত্র শুরুর তারকা চিহ্নগুলি সংরক্ষিত থাকবে।\n*/\nfunction removeInnerAsterisks($string) ",
      "bg": "<?php\n\n/**\n    * Премахва всички звездички (*) от низ, с изключение на тези в началото.\n    * Тази функция приема низ, който може да съдържа буквени символи и звездички.\n    * Ще запази всички звездички, които се появяват в началото на низа, но ще премахне всички останали.\n    * Например, низ като \"***Hello*World**\" ще бъде преобразуван в \"***HelloWorld\".\n    * Вход: Един низ.\n    * Изход: Модифицираният низ, в който са запазени само водещите звездички.\n*/\nfunction removeInnerAsterisks($string) ",
      "zh": "<?php\n\n/**\n    * 从字符串中移除所有星号 (*)，除了开头的那些。\n    * 此函数接受一个可能包含字母字符和星号的字符串。\n    * 它将保留出现在字符串开头的任何星号，但移除所有其他星号。\n    * 例如，像 \"***Hello*World**\" 这样的字符串将被转换为 \"***HelloWorld\"。\n    * 输入：一个字符串。\n    * 输出：仅保留开头星号的修改后字符串。\n*/\nfunction removeInnerAsterisks($string) ",
      "fr": "<?php\n\n/**\n    * Supprime tous les astérisques (*) d'une chaîne sauf ceux au début.\n    * Cette fonction prend une chaîne qui peut contenir des caractères alphabétiques et des astérisques.\n    * Elle conservera tous les astérisques qui apparaissent au début de la chaîne mais supprimera tous les autres.\n    * Par exemple, une chaîne comme \"***Hello*World**\" serait transformée en \"***HelloWorld\".\n    * Entrée : Une chaîne unique.\n    * Sortie : La chaîne modifiée avec seulement les astérisques de début conservés.\n*/\nfunction removeInnerAsterisks($string) ",
      "de": "<?php\n\n/**\n    * Entfernt alle Sternchen (*) aus einem String, außer denen am Anfang.\n    * Diese Funktion nimmt einen String, der alphabetische Zeichen und Sternchen enthalten kann.\n    * Sie wird alle Sternchen, die am Anfang des Strings erscheinen, beibehalten, aber alle anderen entfernen.\n    * Zum Beispiel würde ein String wie \"***Hello*World**\" in \"***HelloWorld\" umgewandelt werden.\n    * Eingabe: Ein einzelner String.\n    * Ausgabe: Der modifizierte String, bei dem nur die führenden Sternchen erhalten bleiben.\n*/\nfunction removeInnerAsterisks($string) ",
      "ha": "<?php\n\n/**\n    * Yana cire dukkan taurari (*) daga cikin kirtani sai dai wadanda suke a farkon.\n    * Wannan aiki yana karɓar kirtani wanda zai iya ƙunsar haruffa da taurari.\n    * Zai adana duk wani tauraro da ya bayyana a farkon kirtani amma ya cire duk sauran.\n    * Alal misali, kirtani kamar \"***Hello*World**\" zai koma \"***HelloWorld\".\n    * Shigarwa: Kirtani guda ɗaya.\n    * Fitarwa: Kirtani da aka gyara tare da adana taurari na farkon kawai.\n*/\nfunction removeInnerAsterisks($string) ",
      "hi": "<?php\n\n/**\n    * एक स्ट्रिंग से सभी तारांकन चिह्न (*) हटाता है, सिवाय उन तारांकन चिह्नों के जो शुरुआत में होते हैं।\n    * यह फ़ंक्शन एक स्ट्रिंग लेता है जिसमें वर्णमाला के अक्षर और तारांकन चिह्न हो सकते हैं।\n    * यह किसी भी तारांकन चिह्न को संरक्षित करेगा जो स्ट्रिंग की शुरुआत में दिखाई देते हैं लेकिन सभी अन्य को हटा देगा।\n    * उदाहरण के लिए, \"***Hello*World**\" जैसी स्ट्रिंग को \"***HelloWorld\" में परिवर्तित किया जाएगा।\n    * इनपुट: एकल स्ट्रिंग।\n    * आउटपुट: संशोधित स्ट्रिंग जिसमें केवल अग्रणी तारांकन चिह्न संरक्षित हैं।\n*/\nfunction removeInnerAsterisks($string) ",
      "hu": "<?php\n\n/**\n    * Eltávolítja az összes csillagot (*) egy szövegből, kivéve azokat, amelyek az elején vannak.\n    * Ez a függvény egy olyan szöveget vesz át, amely tartalmazhat betűket és csillagokat.\n    * Megőrzi azokat a csillagokat, amelyek a szöveg elején jelennek meg, de eltávolítja az összes többit.\n    * Például egy \"***Hello*World**\" szöveg \"***HelloWorld\" formára alakulna át.\n    * Bemenet: Egyetlen szöveg.\n    * Kimenet: A módosított szöveg, amely csak a kezdő csillagokat tartalmazza.\n*/\nfunction removeInnerAsterisks($string) "
    },
    "prompt_bertscore": {
      "sq": "0.9914080442379549",
      "hy": "0.9763749024797104",
      "bn": "0.9634019550335597",
      "bg": "0.9732432958923144",
      "zh": "0.9606435749321283",
      "fr": "0.9873551899433191",
      "de": "0.9831432327134743",
      "ha": "0.9546107729993367",
      "hi": "0.982680821186425",
      "hu": "0.9273314723591483"
    },
    "canonical_solution": "{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}",
    "instruction": {
      "en": "Write a PHP function `function removeInnerAsterisks($string)` to solve the following problem:\nRemoves all asterisks (*) from a string except those at the beginning.\nThis function takes a string that may contain alphabetic characters and asterisks.\nIt will preserve any asterisks that appear at the start of the string but remove all others.\nFor example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\nInput: A single string.\nOutput: The modified string with only the leading asterisks retained.",
      "sq": "Shkruani një funksion PHP `function removeInnerAsterisks($string)` për të zgjidhur problemin e mëposhtëm:\nHeq të gjitha yjet (*) nga një varg përveç atyre në fillim.\nKy funksion merr një varg që mund të përmbajë karaktere alfabetike dhe yje.\nDo të ruajë çdo yll që shfaqet në fillim të vargut, por do të heqë të gjithë të tjerët.\nPër shembull, një varg si \"***Hello*World**\" do të transformohej në \"***HelloWorld\".\nInput: Një varg i vetëm.\nOutput: Vargu i modifikuar me vetëm yjet e parë të ruajtur.",
      "hy": "Գրեք PHP ֆունկցիա `function removeInnerAsterisks($string)` հետևյալ խնդիրը լուծելու համար:\nՀեռացնում է բոլոր աստղանիշերը (*) տողից բացի սկզբում գտնվողներից:\nԱյս ֆունկցիան ընդունում է տող, որը կարող է պարունակել այբբենական նիշեր և աստղանիշեր:\nԱյն կպահպանի ցանկացած աստղանիշ, որը հայտնվում է տողի սկզբում, բայց կհեռացնի բոլոր մնացածները:\nՕրինակ, \"***Hello*World**\" տողը կվերափոխվի \"***HelloWorld\":\nՄուտք: Միայն մեկ տող:\nԵլք: Փոփոխված տողը, որտեղ միայն առաջատար աստղանիշերն են պահպանված:",
      "bn": "একটি PHP ফাংশন লিখুন `function removeInnerAsterisks($string)` নিম্নলিখিত সমস্যার সমাধানের জন্য:\nস্ট্রিংয়ের শুরুতে থাকা অ্যাস্টেরিস্কগুলি ব্যতীত সমস্ত অ্যাস্টেরিস্ক (*) সরিয়ে দেয়।\nএই ফাংশনটি একটি স্ট্রিং নেয় যা বর্ণমালার অক্ষর এবং অ্যাস্টেরিস্ক থাকতে পারে।\nএটি স্ট্রিংয়ের শুরুতে উপস্থিত অ্যাস্টেরিস্কগুলি সংরক্ষণ করবে কিন্তু অন্য সবগুলি সরিয়ে দেবে।\nউদাহরণস্বরূপ, \"***Hello*World**\" এর মতো একটি স্ট্রিং \"***HelloWorld\" এ রূপান্তরিত হবে।\nইনপুট: একটি একক স্ট্রিং।\nআউটপুট: শুধুমাত্র শুরুর অ্যাস্টেরিস্কগুলি সংরক্ষিত সহ পরিবর্তিত স্ট্রিং।",
      "bg": "Напишете PHP функция `function removeInnerAsterisks($string)`, за да решите следния проблем:  \nПремахва всички звездички (*) от низ, с изключение на тези в началото.  \nТази функция приема низ, който може да съдържа азбучни знаци и звездички.  \nТя ще запази всички звездички, които се появяват в началото на низа, но ще премахне всички останали.  \nНапример, низ като \"***Hello*World**\" ще бъде преобразуван в \"***HelloWorld\".  \nВход: Един низ.  \nИзход: Модифицираният низ с запазени само водещите звездички.",
      "zh": "编写一个 PHP 函数 `function removeInnerAsterisks($string)` 来解决以下问题：\n移除字符串中除开头以外的所有星号（*）。\n此函数接收一个可能包含字母字符和星号的字符串。\n它将保留出现在字符串开头的任何星号，但移除所有其他星号。\n例如，像 \"***Hello*World**\" 这样的字符串将被转换为 \"***HelloWorld\"。\n输入：一个字符串。\n输出：仅保留开头星号的修改后字符串。",
      "fr": "Écrire une fonction PHP `function removeInnerAsterisks($string)` pour résoudre le problème suivant :\nSupprime tous les astérisques (*) d'une chaîne sauf ceux au début.\nCette fonction prend une chaîne qui peut contenir des caractères alphabétiques et des astérisques.\nElle préservera tous les astérisques qui apparaissent au début de la chaîne mais supprimera tous les autres.\nPar exemple, une chaîne comme \"***Hello*World**\" serait transformée en \"***HelloWorld\".\nEntrée : Une seule chaîne.\nSortie : La chaîne modifiée avec uniquement les astérisques de début conservés.",
      "de": "Schreiben Sie eine PHP-Funktion `function removeInnerAsterisks($string)`, um das folgende Problem zu lösen:\nEntfernt alle Sternchen (*) aus einem String, außer denen am Anfang.\nDiese Funktion nimmt einen String, der alphabetische Zeichen und Sternchen enthalten kann.\nSie wird alle Sternchen, die am Anfang des Strings erscheinen, beibehalten, aber alle anderen entfernen.\nZum Beispiel würde ein String wie \"***Hello*World**\" in \"***HelloWorld\" umgewandelt werden.\nEingabe: Ein einzelner String.\nAusgabe: Der modifizierte String, bei dem nur die führenden Sternchen beibehalten werden.",
      "ha": "Rubuta aikin PHP `function removeInnerAsterisks($string)` don warware matsalar mai zuwa:\nCire dukkan taurari (*) daga wani kirtani sai dai wadanda suke a farkon.\nWannan aikin yana karɓar kirtani wanda zai iya ƙunsar haruffa da taurari.\nZai adana duk wani tauraro da ya bayyana a farkon kirtani amma ya cire duk sauran.\nMisali, kirtani kamar \"***Hello*World**\" za a canza shi zuwa \"***HelloWorld\".\nShigarwa: Kirtani guda ɗaya.\nFitarwa: Kirtani da aka gyara tare da taurari na farkon kawai da aka adana.",
      "hi": "PHP फ़ंक्शन `function removeInnerAsterisks($string)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक स्ट्रिंग से सभी तारांकन चिह्न (*) हटाता है सिवाय उन तारांकन चिह्नों के जो शुरुआत में होते हैं।\nयह फ़ंक्शन एक स्ट्रिंग लेता है जिसमें वर्णमाला के अक्षर और तारांकन चिह्न हो सकते हैं।\nयह किसी भी तारांकन चिह्न को संरक्षित करेगा जो स्ट्रिंग की शुरुआत में दिखाई देते हैं लेकिन अन्य सभी को हटा देगा।\nउदाहरण के लिए, एक स्ट्रिंग जैसे \"***Hello*World**\" को \"***HelloWorld\" में परिवर्तित किया जाएगा।\nइनपुट: एकल स्ट्रिंग।\nआउटपुट: संशोधित स्ट्रिंग जिसमें केवल अग्रणी तारांकन चिह्न संरक्षित हैं।",
      "hu": "Írj egy PHP függvényt `function removeInnerAsterisks($string)` a következő probléma megoldására:\nEltávolítja az összes csillagot (*) egy szövegből, kivéve azokat, amelyek az elején vannak.\nEz a függvény egy olyan szöveget vesz át, amely tartalmazhat betűket és csillagokat.\nMegőrzi azokat a csillagokat, amelyek a szöveg elején jelennek meg, de eltávolítja az összes többit.\nPéldául egy \"***Hello*World**\" szöveg \"***HelloWorld\" formára alakulna át.\nBemenet: Egyetlen szöveg.\nKimenet: A módosított szöveg, amely csak a kezdő csillagokat tartja meg."
    },
    "instruction_bertscore": {
      "sq": "0.9864359285398896",
      "hy": "0.9745129412878893",
      "bn": "0.9740429818063608",
      "bg": "0.978006452429531",
      "zh": "0.9744297151582357",
      "fr": "0.9899161314460019",
      "de": "0.9772296090093036",
      "ha": "0.9651506969081909",
      "hi": "0.9743331807930528",
      "hu": "0.9388146919475372"
    },
    "level": "easy",
    "test": "function main(){\n    assert(removeInnerAsterisks(\"***Hello*World**\") === \"***HelloWorld\");\n    assert(removeInnerAsterisks(\"****\") === \"****\");\n    assert(removeInnerAsterisks(\"abc*def**ghi\") === \"abcdefghi\");\n    assert(removeInnerAsterisks(\"*a*b*c*\") === \"*abc\");\n    assert(removeInnerAsterisks(\"\") === \"\");\n    \n}\n\nmain();\n?>",
    "entry_point": "removeInnerAsterisks",
    "signature": "function removeInnerAsterisks($string)",
    "docstring": {
      "en": "Removes all asterisks (*) from a string except those at the beginning.\nThis function takes a string that may contain alphabetic characters and asterisks.\nIt will preserve any asterisks that appear at the start of the string but remove all others.\nFor example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\nInput: A single string.\nOutput: The modified string with only the leading asterisks retained.",
      "sq": "Heq të gjitha yjet (*) nga një varg përveç atyre në fillim.  \nKjo funksion merr një varg që mund të përmbajë karaktere alfabetike dhe yje.  \nDo të ruajë çdo yll që shfaqet në fillim të vargut, por do të heqë të gjithë të tjerët.  \nPër shembull, një varg si \"***Hello*World**\" do të transformohej në \"***HelloWorld\".  \nHyrja: Një varg i vetëm.  \nDalja: Vargu i modifikuar me vetëm yjet kryesore të ruajtura.",
      "hy": "Հեռացնում է բոլոր աստղանիշերը (*) տողից, բացի սկզբում գտնվողներից։  \nԱյս ֆունկցիան ընդունում է տող, որը կարող է պարունակել այբբենական նիշեր և աստղանիշեր։  \nԱյն կպահպանի ցանկացած աստղանիշ, որը հայտնվում է տողի սկզբում, բայց կհեռացնի բոլոր մյուսները։  \nՕրինակ, \"***Hello*World**\" տողը կվերափոխվի \"***HelloWorld\"։  \nՄուտք: Միայն մեկ տող։  \nԵլք: Փոփոխված տող, որտեղ միայն սկզբնական աստղանիշերն են պահպանված։  ",
      "bn": "একটি স্ট্রিং থেকে সমস্ত তারকা চিহ্ন (*) সরিয়ে দেয় শুধুমাত্র শুরুতে থাকা ছাড়া।\nএই ফাংশনটি এমন একটি স্ট্রিং গ্রহণ করে যা বর্ণমালা অক্ষর এবং অ্যাস্টেরিক্স থাকতে পারে।\nএটি স্ট্রিংয়ের শুরুতে উপস্থিত যে কোনও অ্যাস্টেরিক্স সংরক্ষণ করবে কিন্তু অন্য সব সরিয়ে দেবে।\nউদাহরণস্বরূপ, \"***Hello*World**\" এর মতো একটি স্ট্রিং \"***HelloWorld\" এ রূপান্তরিত হবে।\nInput: একটি একক স্ট্রিং।\nOutput: শুধুমাত্র প্রারম্ভিক অ্যাস্টেরিক্স সংরক্ষিত অবস্থায় সংশোধিত স্ট্রিং।",
      "bg": "Премахва всички звездички (*) от низ, с изключение на тези в началото.\nТази функция приема низ, който може да съдържа буквени символи и звездички.\nТя ще запази всички звездички, които се появяват в началото на низа, но ще премахне всички останали.\nНапример, низ като \"***Hello*World**\" ще бъде трансформиран в \"***HelloWorld\".\nВход: Един низ.\nИзход: Модифицираният низ с запазени само водещите звездички.",
      "zh": "移除字符串中除开头以外的所有星号（*）。\n此函数接受一个可能包含字母字符和星号的字符串。\n它将保留出现在字符串开头的任何星号，但会移除所有其他星号。\n例如，像 \"***Hello*World**\" 这样的字符串将被转换为 \"***HelloWorld\"。\n输入：一个字符串。\n输出：仅保留前导星号的修改后字符串。",
      "fr": "Supprime tous les astérisques (*) d'une chaîne sauf ceux au début.  \nCette fonction prend une chaîne qui peut contenir des caractères alphabétiques et des astérisques.  \nElle conservera tous les astérisques qui apparaissent au début de la chaîne mais supprimera tous les autres.  \nPar exemple, une chaîne comme \"***Hello*World**\" serait transformée en \"***HelloWorld\".  \nEntrée : Une seule chaîne.  \nSortie : La chaîne modifiée avec uniquement les astérisques initiaux conservés.",
      "de": "Entfernt alle Sternchen (*) aus einem String, außer denen am Anfang.  \nDiese Funktion nimmt einen String, der alphabetische Zeichen und Sternchen enthalten kann.  \nSie bewahrt alle Sternchen, die am Anfang des Strings erscheinen, entfernt jedoch alle anderen.  \nZum Beispiel würde ein String wie \"***Hello*World**\" in \"***HelloWorld\" umgewandelt.  \nEingabe: Ein einzelner String.  \nAusgabe: Der modifizierte String, bei dem nur die führenden Sternchen beibehalten werden.",
      "ha": "Yana cire dukkan taurari (*) daga cikin kirtani sai dai wadanda suke a farkon.\nWannan aikin yana ɗaukar jere wanda zai iya ƙunsar haruffan alphabetic da asterisks.\nZai adana duk wani asterisk da ya bayyana a farkon jere amma ya cire duk sauran.\nMisali, wata jere kamar \"***Hello*World**\" za a canza shi zuwa \"***HelloWorld\".\nInput: Wata jere guda.\nOutput: Jeren da aka gyara tare da ajiye asterisks na farko kawai.",
      "hi": "एक स्ट्रिंग से सभी तारांकन चिह्न (*) हटाता है, सिवाय उन तारांकन चिह्नों के जो शुरुआत में होते हैं।\nयह फ़ंक्शन एक स्ट्रिंग लेता है जिसमें वर्णमाला के अक्षर और तारांकन चिह्न हो सकते हैं।  \nयह स्ट्रिंग की शुरुआत में दिखाई देने वाले किसी भी तारांकन चिह्न को संरक्षित करेगा लेकिन सभी अन्य को हटा देगा।  \nउदाहरण के लिए, \"***Hello*World**\" जैसी स्ट्रिंग को \"***HelloWorld\" में बदल दिया जाएगा।  \nInput: एक एकल स्ट्रिंग।  \nOutput: परिवर्तित स्ट्रिंग जिसमें केवल अग्रणी तारांकन चिह्न संरक्षित हैं।  ",
      "hu": "Eltávolítja az összes csillagot (*) egy szövegből, kivéve az elején lévőket.\nEz a függvény egy olyan szöveget vesz be, amely tartalmazhat alfabetikus karaktereket és csillagokat.\nMegőrzi azokat a csillagokat, amelyek a szöveg elején jelennek meg, de eltávolítja az összes többit.\nPéldául egy olyan szöveg, mint \"***Hello*World**\", \"***HelloWorld\" formára alakulna át.\nBemenet: Egyetlen szöveg.\nKimenet: A módosított szöveg, amelyben csak a kezdő csillagok maradnak meg."
    },
    "docstring_bertscore": {
      "sq": "0.9447604937734355",
      "hy": "0.9640282366249627",
      "bn": "0.9815575663816727",
      "bg": "0.9801685441270958",
      "zh": "0.9581718184705301",
      "fr": "0.9794046116816355",
      "de": "0.9799150917608952",
      "ha": "0.9848176868255983",
      "hi": "0.9772425199840707",
      "hu": "0.9026661475333789"
    }
  },
  {
    "task_id": "PHP/4",
    "prompt": {
      "en": "<?php\n\n/**\n * Converts a numerical score to its corresponding letter grade.\n * The grading system is as follows:\n * - A score between 90 and 100 (inclusive) is graded as 'A'.\n * - A score between 80 and 89 (inclusive) is graded as 'B'.\n * - A score between 70 and 79 (inclusive) is graded as 'C'.\n * - A score between 60 and 69 (inclusive) is graded as 'D'.\n * - A score below 60 is graded as 'E'.\n * If the score is outside the range of 0 to 100, an error message is returned.\n * Input: A numeric score.\n * Output: Returns the corresponding letter grade or an error message if the score is out of range.\n */\n \nfunction convertScoreToGrade($score) ",
      "sq": "<?php\n\n/**\n * Konverton një rezultat numerik në notën përkatëse me shkronjë.\n * Sistemi i notimit është si më poshtë:\n * - Një rezultat midis 90 dhe 100 (përfshirë) vlerësohet si 'A'.\n * - Një rezultat midis 80 dhe 89 (përfshirë) vlerësohet si 'B'.\n * - Një rezultat midis 70 dhe 79 (përfshirë) vlerësohet si 'C'.\n * - Një rezultat midis 60 dhe 69 (përfshirë) vlerësohet si 'D'.\n * - Një rezultat nën 60 vlerësohet si 'E'.\n * Nëse rezultati është jashtë intervalit nga 0 në 100, kthehet një mesazh gabimi.\n * Hyrja: Një rezultat numerik.\n * Dalja: Kthen notën përkatëse me shkronjë ose një mesazh gabimi nëse rezultati është jashtë intervalit.\n */\n \nfunction convertScoreToGrade($score) ",
      "hy": "<?php\n\n/**\n * Թվային գնահատականը փոխակերպում է համապատասխան տառային գնահատականի:\n * Գնահատման համակարգը հետևյալն է.\n * - 90-ից մինչև 100 (ներառյալ) գնահատականը համապատասխանում է 'A'-ին:\n * - 80-ից մինչև 89 (ներառյալ) գնահատականը համապատասխանում է 'B'-ին:\n * - 70-ից մինչև 79 (ներառյալ) գնահատականը համապատասխանում է 'C'-ին:\n * - 60-ից մինչև 69 (ներառյալ) գնահատականը համապատասխանում է 'D'-ին:\n * - 60-ից ցածր գնահատականը համապատասխանում է 'E'-ին:\n * Եթե գնահատականը 0-ից 100 միջակայքից դուրս է, վերադարձվում է սխալի հաղորդագրություն:\n * Մուտք: Թվային գնահատական:\n * Ելք: Վերադարձնում է համապատասխան տառային գնահատականը կամ սխալի հաղորդագրություն, եթե գնահատականը միջակայքից դուրս է:\n */\n \nfunction convertScoreToGrade($score) ",
      "bn": "<?php\n\n/**\n * একটি সংখ্যাসূচক স্কোরকে তার সংশ্লিষ্ট অক্ষর গ্রেডে রূপান্তর করে।\n * গ্রেডিং সিস্টেম নিম্নরূপ:\n * - 90 এবং 100 এর মধ্যে (অন্তর্ভুক্ত) একটি স্কোর 'A' হিসেবে গ্রেড করা হয়।\n * - 80 এবং 89 এর মধ্যে (অন্তর্ভুক্ত) একটি স্কোর 'B' হিসেবে গ্রেড করা হয়।\n * - 70 এবং 79 এর মধ্যে (অন্তর্ভুক্ত) একটি স্কোর 'C' হিসেবে গ্রেড করা হয়।\n * - 60 এবং 69 এর মধ্যে (অন্তর্ভুক্ত) একটি স্কোর 'D' হিসেবে গ্রেড করা হয়।\n * - 60 এর নিচে একটি স্কোর 'E' হিসেবে গ্রেড করা হয়।\n * যদি স্কোর 0 থেকে 100 এর পরিসরের বাইরে হয়, তাহলে একটি ত্রুটির বার্তা ফেরত দেওয়া হয়।\n * ইনপুট: একটি সংখ্যাসূচক স্কোর।\n * আউটপুট: সংশ্লিষ্ট অক্ষর গ্রেড বা একটি ত্রুটির বার্তা ফেরত দেয় যদি স্কোর পরিসরের বাইরে হয়।\n */\n \nfunction convertScoreToGrade($score) ",
      "bg": "<?php\n\n/**\n * Преобразува числов резултат в съответната буквена оценка.\n * Системата за оценяване е следната:\n * - Резултат между 90 и 100 (включително) се оценява с 'A'.\n * - Резултат между 80 и 89 (включително) се оценява с 'B'.\n * - Резултат между 70 и 79 (включително) се оценява с 'C'.\n * - Резултат между 60 и 69 (включително) се оценява с 'D'.\n * - Резултат под 60 се оценява с 'E'.\n * Ако резултатът е извън диапазона от 0 до 100, се връща съобщение за грешка.\n * Вход: Числов резултат.\n * Изход: Връща съответната буквена оценка или съобщение за грешка, ако резултатът е извън диапазона.\n */\n \nfunction convertScoreToGrade($score) ",
      "zh": "<?php\n\n/**\n * 将分数转换为相应的字母等级。\n * 评分系统如下：\n * - 分数在90到100之间（包括90和100）被评为 'A'。\n * - 分数在80到89之间（包括80和89）被评为 'B'。\n * - 分数在70到79之间（包括70和79）被评为 'C'。\n * - 分数在60到69之间（包括60和69）被评为 'D'。\n * - 分数低于60被评为 'E'。\n * 如果分数超出0到100的范围，则返回错误信息。\n * 输入：一个数字分数。\n * 输出：返回相应的字母等级或如果分数超出范围则返回错误信息。\n */\n \nfunction convertScoreToGrade($score) ",
      "fr": "<?php\n\n/**\n * Convertit un score numérique en sa note correspondante.\n * Le système de notation est le suivant :\n * - Un score entre 90 et 100 (inclus) est noté 'A'.\n * - Un score entre 80 et 89 (inclus) est noté 'B'.\n * - Un score entre 70 et 79 (inclus) est noté 'C'.\n * - Un score entre 60 et 69 (inclus) est noté 'D'.\n * - Un score inférieur à 60 est noté 'E'.\n * Si le score est en dehors de la plage de 0 à 100, un message d'erreur est retourné.\n * Entrée : Un score numérique.\n * Sortie : Retourne la note correspondante ou un message d'erreur si le score est hors de portée.\n */\n \nfunction convertScoreToGrade($score) ",
      "de": "<?php\n\n/**\n * Konvertiert eine numerische Punktzahl in die entsprechende Buchstabennote.\n * Das Bewertungssystem ist wie folgt:\n * - Eine Punktzahl zwischen 90 und 100 (einschließlich) wird mit 'A' bewertet.\n * - Eine Punktzahl zwischen 80 und 89 (einschließlich) wird mit 'B' bewertet.\n * - Eine Punktzahl zwischen 70 und 79 (einschließlich) wird mit 'C' bewertet.\n * - Eine Punktzahl zwischen 60 und 69 (einschließlich) wird mit 'D' bewertet.\n * - Eine Punktzahl unter 60 wird mit 'E' bewertet.\n * Wenn die Punktzahl außerhalb des Bereichs von 0 bis 100 liegt, wird eine Fehlermeldung zurückgegeben.\n * Eingabe: Eine numerische Punktzahl.\n * Ausgabe: Gibt die entsprechende Buchstabennote oder eine Fehlermeldung zurück, wenn die Punktzahl außerhalb des Bereichs liegt.\n */\n \nfunction convertScoreToGrade($score) ",
      "ha": "<?php\n\n/**\n * Canza maki na lambobi zuwa harafin da ya dace.\n * Tsarin ba da maki yana kamar haka:\n * - Maki tsakanin 90 da 100 (ciki har da) ana ba da shi azaman 'A'.\n * - Maki tsakanin 80 da 89 (ciki har da) ana ba da shi azaman 'B'.\n * - Maki tsakanin 70 da 79 (ciki har da) ana ba da shi azaman 'C'.\n * - Maki tsakanin 60 da 69 (ciki har da) ana ba da shi azaman 'D'.\n * - Maki kasa da 60 ana ba da shi azaman 'E'.\n * Idan maki ya wuce iyaka daga 0 zuwa 100, ana mayar da saƙon kuskure.\n * Shigarwa: Maki na lambobi.\n * Fitarwa: Yana mayar da harafin da ya dace ko saƙon kuskure idan maki ya fita daga iyaka.\n */\n \nfunction convertScoreToGrade($score) ",
      "hi": "<?php\n\n/**\n * एक संख्यात्मक स्कोर को उसके संबंधित अक्षर ग्रेड में बदलता है।\n * ग्रेडिंग प्रणाली इस प्रकार है:\n * - 90 और 100 (समावेशी) के बीच का स्कोर 'A' के रूप में ग्रेड किया जाता है।\n * - 80 और 89 (समावेशी) के बीच का स्कोर 'B' के रूप में ग्रेड किया जाता है।\n * - 70 और 79 (समावेशी) के बीच का स्कोर 'C' के रूप में ग्रेड किया जाता है।\n * - 60 और 69 (समावेशी) के बीच का स्कोर 'D' के रूप में ग्रेड किया जाता है।\n * - 60 से नीचे का स्कोर 'E' के रूप में ग्रेड किया जाता है।\n * यदि स्कोर 0 से 100 की सीमा के बाहर है, तो एक त्रुटि संदेश लौटाया जाता है।\n * इनपुट: एक संख्यात्मक स्कोर।\n * आउटपुट: संबंधित अक्षर ग्रेड या यदि स्कोर सीमा से बाहर है तो एक त्रुटि संदेश लौटाता है।\n */\n \nfunction convertScoreToGrade($score) ",
      "hu": "<?php\n\n/**\n * Egy numerikus pontszám átalakítása a megfelelő betűjegyre.\n * Az osztályozási rendszer a következő:\n * - A 90 és 100 közötti (beleértve) pontszám 'A' minősítést kap.\n * - A 80 és 89 közötti (beleértve) pontszám 'B' minősítést kap.\n * - A 70 és 79 közötti (beleértve) pontszám 'C' minősítést kap.\n * - A 60 és 69 közötti (beleértve) pontszám 'D' minősítést kap.\n * - A 60 alatti pontszám 'E' minősítést kap.\n * Ha a pontszám kívül esik a 0 és 100 közötti tartományon, hibaüzenet kerül visszaadásra.\n * Bemenet: Egy numerikus pontszám.\n * Kimenet: Visszaadja a megfelelő betűjegyet vagy egy hibaüzenetet, ha a pontszám kívül esik a tartományon.\n */\n \nfunction convertScoreToGrade($score) "
    },
    "prompt_bertscore": {
      "sq": "0.9953097408126231",
      "hy": "0.9563015148027056",
      "bn": "0.9990269097633101",
      "bg": "0.9920470381737441",
      "zh": "0.9030838672246952",
      "fr": "0.9776636163918647",
      "de": "0.9963356667306684",
      "ha": "0.9435895676772349",
      "hi": "0.9990269097633101",
      "hu": "0.9447761855735373"
    },
    "canonical_solution": "{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}",
    "instruction": {
      "en": "Write a PHP function `function convertScoreToGrade($score)` to solve the following problem:\nConverts a numerical score to its corresponding letter grade.\nThe grading system is as follows:\n- A score between 90 and 100 (inclusive) is graded as 'A'.\n- A score between 80 and 89 (inclusive) is graded as 'B'.\n- A score between 70 and 79 (inclusive) is graded as 'C'.\n- A score between 60 and 69 (inclusive) is graded as 'D'.\n- A score below 60 is graded as 'E'.\nIf the score is outside the range of 0 to 100, an error message is returned.\nInput: A numeric score.\nOutput: Returns the corresponding letter grade or an error message if the score is out of range.",
      "sq": "Shkruani një funksion PHP `function convertScoreToGrade($score)` për të zgjidhur problemin në vijim:\nKonverton një rezultat numerik në notën përkatëse me shkronjë.\nSistemi i notimit është si më poshtë:\n- Një rezultat midis 90 dhe 100 (përfshirë) vlerësohet si 'A'.\n- Një rezultat midis 80 dhe 89 (përfshirë) vlerësohet si 'B'.\n- Një rezultat midis 70 dhe 79 (përfshirë) vlerësohet si 'C'.\n- Një rezultat midis 60 dhe 69 (përfshirë) vlerësohet si 'D'.\n- Një rezultat nën 60 vlerësohet si 'E'.\nNëse rezultati është jashtë intervalit nga 0 deri në 100, kthehet një mesazh gabimi.\nHyrja: Një rezultat numerik.\nDalja: Kthen notën përkatëse me shkronjë ose një mesazh gabimi nëse rezultati është jashtë intervalit.",
      "hy": "Գրեք PHP ֆունկցիա `function convertScoreToGrade($score)` հետևյալ խնդիրը լուծելու համար:\nԹվային գնահատականը փոխարկում է համապատասխան տառային գնահատականի:\nԳնահատման համակարգը հետևյալն է.\n- 90-ից 100 (ներառյալ) գնահատականը գնահատվում է որպես 'A':\n- 80-ից 89 (ներառյալ) գնահատականը գնահատվում է որպես 'B':\n- 70-ից 79 (ներառյալ) գնահատականը գնահատվում է որպես 'C':\n- 60-ից 69 (ներառյալ) գնահատականը գնահատվում է որպես 'D':\n- 60-ից ցածր գնահատականը գնահատվում է որպես 'E':\nԵթե գնահատականը 0-ից 100 միջակայքից դուրս է, վերադարձվում է սխալի հաղորդագրություն:\nՄուտք: Թվային գնահատական:\nԵլք: Վերադարձնում է համապատասխան տառային գնահատականը կամ սխալի հաղորդագրություն, եթե գնահատականը միջակայքից դուրս է:",
      "bn": "একটি PHP ফাংশন `function convertScoreToGrade($score)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি সংখ্যাসূচক স্কোরকে তার সংশ্লিষ্ট অক্ষর গ্রেডে রূপান্তর করে।\nগ্রেডিং সিস্টেমটি নিম্নরূপ:\n- 90 এবং 100 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'A' হিসাবে গ্রেড করা হয়।\n- 80 এবং 89 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'B' হিসাবে গ্রেড করা হয়।\n- 70 এবং 79 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'C' হিসাবে গ্রেড করা হয়।\n- 60 এবং 69 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'D' হিসাবে গ্রেড করা হয়।\n- 60 এর নিচে একটি স্কোর 'E' হিসাবে গ্রেড করা হয়।\nযদি স্কোর 0 থেকে 100 এর সীমার বাইরে হয়, তাহলে একটি ত্রুটি বার্তা ফেরত দেওয়া হয়।\nইনপুট: একটি সংখ্যাসূচক স্কোর।\nআউটপুট: সংশ্লিষ্ট অক্ষর গ্রেড বা একটি ত্রুটি বার্তা ফেরত দেয় যদি স্কোর সীমার বাইরে হয়।",
      "bg": "Напишете PHP функция `function convertScoreToGrade($score)`, за да решите следния проблем:\nПреобразува числова оценка в съответната буквена оценка.\nСистемата за оценяване е както следва:\n- Оценка между 90 и 100 (включително) се оценява с 'A'.\n- Оценка между 80 и 89 (включително) се оценява с 'B'.\n- Оценка между 70 и 79 (включително) се оценява с 'C'.\n- Оценка между 60 и 69 (включително) се оценява с 'D'.\n- Оценка под 60 се оценява с 'E'.\nАко оценката е извън диапазона от 0 до 100, се връща съобщение за грешка.\nВход: Числова оценка.\nИзход: Връща съответната буквена оценка или съобщение за грешка, ако оценката е извън обхвата.",
      "zh": "编写一个 PHP 函数 `function convertScoreToGrade($score)` 来解决以下问题：\n将数值分数转换为其对应的字母等级。\n评分系统如下：\n- 分数在 90 到 100 之间（包括 90 和 100）被评为 'A'。\n- 分数在 80 到 89 之间（包括 80 和 89）被评为 'B'。\n- 分数在 70 到 79 之间（包括 70 和 79）被评为 'C'。\n- 分数在 60 到 69 之间（包括 60 和 69）被评为 'D'。\n- 分数低于 60 被评为 'E'。\n如果分数超出 0 到 100 的范围，则返回错误信息。\n输入：一个数值分数。\n输出：返回相应的字母等级或如果分数超出范围则返回错误信息。",
      "fr": "Écrire une fonction PHP `function convertScoreToGrade($score)` pour résoudre le problème suivant :\nConvertit un score numérique en sa note alphabétique correspondante.\nLe système de notation est le suivant :\n- Un score entre 90 et 100 (inclus) est noté 'A'.\n- Un score entre 80 et 89 (inclus) est noté 'B'.\n- Un score entre 70 et 79 (inclus) est noté 'C'.\n- Un score entre 60 et 69 (inclus) est noté 'D'.\n- Un score inférieur à 60 est noté 'E'.\nSi le score est en dehors de la plage de 0 à 100, un message d'erreur est retourné.\nEntrée : Un score numérique.\nSortie : Retourne la note alphabétique correspondante ou un message d'erreur si le score est hors de portée.",
      "de": "Schreiben Sie eine PHP-Funktion `function convertScoreToGrade($score)`, um das folgende Problem zu lösen:\nKonvertiert eine numerische Punktzahl in die entsprechende Buchstabennote.\nDas Bewertungssystem ist wie folgt:\n- Eine Punktzahl zwischen 90 und 100 (einschließlich) wird mit 'A' bewertet.\n- Eine Punktzahl zwischen 80 und 89 (einschließlich) wird mit 'B' bewertet.\n- Eine Punktzahl zwischen 70 und 79 (einschließlich) wird mit 'C' bewertet.\n- Eine Punktzahl zwischen 60 und 69 (einschließlich) wird mit 'D' bewertet.\n- Eine Punktzahl unter 60 wird mit 'E' bewertet.\nWenn die Punktzahl außerhalb des Bereichs von 0 bis 100 liegt, wird eine Fehlermeldung zurückgegeben.\nEingabe: Eine numerische Punktzahl.\nAusgabe: Gibt die entsprechende Buchstabennote oder eine Fehlermeldung zurück, wenn die Punktzahl außerhalb des Bereichs liegt.",
      "ha": "Rubuta aikin PHP `function convertScoreToGrade($score)` don warware matsalar mai zuwa:\nCanza maki na lambobi zuwa harafin daraja da ya dace.\nTsarin darajar yana kamar haka:\n- Maki tsakanin 90 da 100 (ciki har) ana ba shi darajar 'A'.\n- Maki tsakanin 80 da 89 (ciki har) ana ba shi darajar 'B'.\n- Maki tsakanin 70 da 79 (ciki har) ana ba shi darajar 'C'.\n- Maki tsakanin 60 da 69 (ciki har) ana ba shi darajar 'D'.\n- Maki kasa da 60 ana ba shi darajar 'E'.\nIdan maki ya wuce iyaka daga 0 zuwa 100, ana mayar da saƙon kuskure.\nShigarwa: Maki na lambobi.\nFitarwa: Yana mayar da harafin daraja da ya dace ko saƙon kuskure idan maki ya fita daga iyaka.",
      "hi": "PHP फ़ंक्शन `function convertScoreToGrade($score)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nसंख्यात्मक स्कोर को उसके संबंधित अक्षर ग्रेड में परिवर्तित करता है।\nग्रेडिंग सिस्टम इस प्रकार है:\n- 90 और 100 (समावेशी) के बीच का स्कोर 'A' के रूप में ग्रेड किया जाता है।\n- 80 और 89 (समावेशी) के बीच का स्कोर 'B' के रूप में ग्रेड किया जाता है।\n- 70 और 79 (समावेशी) के बीच का स्कोर 'C' के रूप में ग्रेड किया जाता है।\n- 60 और 69 (समावेशी) के बीच का स्कोर 'D' के रूप में ग्रेड किया जाता है।\n- 60 से कम का स्कोर 'E' के रूप में ग्रेड किया जाता है।\nयदि स्कोर 0 से 100 की सीमा के बाहर है, तो एक त्रुटि संदेश लौटाया जाता है।\nइनपुट: एक संख्यात्मक स्कोर।\nआउटपुट: संबंधित अक्षर ग्रेड या एक त्रुटि संदेश लौटाता है यदि स्कोर सीमा से बाहर है।",
      "hu": "Írj egy PHP függvényt `function convertScoreToGrade($score)` a következő probléma megoldására:\nÁtalakít egy numerikus pontszámot a megfelelő betűjegyre.\nAz osztályozási rendszer a következő:\n- A 90 és 100 közötti (beleértve) pontszám 'A' osztályzatot kap.\n- A 80 és 89 közötti (beleértve) pontszám 'B' osztályzatot kap.\n- A 70 és 79 közötti (beleértve) pontszám 'C' osztályzatot kap.\n- A 60 és 69 közötti (beleértve) pontszám 'D' osztályzatot kap.\n- A 60 alatti pontszám 'E' osztályzatot kap.\nHa a pontszám kívül esik a 0 és 100 közötti tartományon, hibaüzenet kerül visszaadásra.\nBemenet: Egy numerikus pontszám.\nKimenet: Visszaadja a megfelelő betűjegyet vagy egy hibaüzenetet, ha a pontszám kívül esik a tartományon."
    },
    "instruction_bertscore": {
      "sq": "0.9921503259718822",
      "hy": "0.9874304708577313",
      "bn": "0.9956658850858188",
      "bg": "0.9892924320495523",
      "zh": "0.9058070897486836",
      "fr": "0.9852105777192853",
      "de": "0.9956031178854117",
      "ha": "0.9399337755142877",
      "hi": "0.9872920254821499",
      "hu": "0.9444315618624417"
    },
    "level": "easy",
    "test": "function main(){\n    assert(convertScoreToGrade(95) === 'A');\n    assert(convertScoreToGrade(85) === 'B');\n    assert(convertScoreToGrade(75) === 'C');\n    assert(convertScoreToGrade(65) === 'D');\n    assert(convertScoreToGrade(55) === 'E');\n    assert(convertScoreToGrade(-1) === 'Score is error!');\n    assert(convertScoreToGrade(101) === 'Score is error!');\n    \n}\n\nmain();\n?>",
    "entry_point": "convertScoreToGrade",
    "signature": "function convertScoreToGrade($score)",
    "docstring": {
      "en": "Converts a numerical score to its corresponding letter grade.\nThe grading system is as follows:\n- A score between 90 and 100 (inclusive) is graded as 'A'.\n- A score between 80 and 89 (inclusive) is graded as 'B'.\n- A score between 70 and 79 (inclusive) is graded as 'C'.\n- A score between 60 and 69 (inclusive) is graded as 'D'.\n- A score below 60 is graded as 'E'.\nIf the score is outside the range of 0 to 100, an error message is returned.\nInput: A numeric score.\nOutput: Returns the corresponding letter grade or an error message if the score is out of range.",
      "sq": "Konverton një rezultat numerik në notën përkatëse me shkronjë.\nSistemi i notimit është si më poshtë:\n- Një rezultat midis 90 dhe 100 (përfshirë) vlerësohet si 'A'.\n- Një rezultat midis 80 dhe 89 (përfshirë) vlerësohet si 'B'.\n- Një rezultat midis 70 dhe 79 (përfshirë) vlerësohet si 'C'.\n- Një rezultat midis 60 dhe 69 (përfshirë) vlerësohet si 'D'.\n- Një rezultat nën 60 vlerësohet si 'E'.\nNëse rezultati është jashtë intervalit nga 0 në 100, kthehet një mesazh gabimi.\nInput: Një rezultat numerik.\nOutput: Kthen notën përkatëse me shkronjë ose një mesazh gabimi nëse rezultati është jashtë intervalit.",
      "hy": "Վերածում է թվային գնահատականը համապատասխան տառային գնահատականի:  \nԳնահատման համակարգը հետևյալն է.  \n- 90-ից մինչև 100 (ներառյալ) գնահատականը 'A' է:  \n- 80-ից մինչև 89 (ներառյալ) գնահատականը 'B' է:  \n- 70-ից մինչև 79 (ներառյալ) գնահատականը 'C' է:  \n- 60-ից մինչև 69 (ներառյալ) գնահատականը 'D' է:  \n- 60-ից ցածր գնահատականը 'E' է:  \nԵթե գնահատականը 0-ից մինչև 100 միջակայքից դուրս է, վերադարձվում է սխալի հաղորդագրություն:  \nՄուտք: Թվային գնահատական:  \nԵլք: Վերադարձնում է համապատասխան տառային գնահատականը կամ սխալի հաղորդագրություն, եթե գնահատականը միջակայքից դուրս է:",
      "bn": "সংখ্যাসূচক স্কোরকে তার সংশ্লিষ্ট অক্ষর গ্রেডে রূপান্তর করে। \nগ্রেডিং সিস্টেমটি নিম্নরূপ:\n- 90 থেকে 100 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'A' হিসাবে গ্রেড করা হয়।\n- 80 থেকে 89 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'B' হিসাবে গ্রেড করা হয়।\n- 70 থেকে 79 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'C' হিসাবে গ্রেড করা হয়।\n- 60 থেকে 69 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'D' হিসাবে গ্রেড করা হয়।\n- 60 এর নিচে একটি স্কোর 'E' হিসাবে গ্রেড করা হয়।\nযদি স্কোরটি 0 থেকে 100 এর পরিসরের বাইরে হয়, তবে একটি ত্রুটি বার্তা ফেরত দেওয়া হয়।\nইনপুট: একটি সংখ্যাসূচক স্কোর।\nআউটপুট: সংশ্লিষ্ট অক্ষর গ্রেড বা একটি ত্রুটি বার্তা ফেরত দেয় যদি স্কোরটি পরিসরের বাইরে হয়।",
      "bg": "Преобразува числова оценка в съответстващата й буквена оценка.\nСистемата за оценяване е както следва:\n- Оценка между 90 и 100 (включително) се оценява с 'A'.\n- Оценка между 80 и 89 (включително) се оценява с 'B'.\n- Оценка между 70 и 79 (включително) се оценява с 'C'.\n- Оценка между 60 и 69 (включително) се оценява с 'D'.\n- Оценка под 60 се оценява с 'E'.\nАко оценката е извън диапазона от 0 до 100, се връща съобщение за грешка.\nВход: Числова оценка.\nИзход: Връща съответстващата буквена оценка или съобщение за грешка, ако оценката е извън диапазона.",
      "zh": "将数值分数转换为其对应的字母等级。  \n评分系统如下：  \n- 分数在90到100之间（包括90和100）被评为 'A'。  \n- 分数在80到89之间（包括80和89）被评为 'B'。  \n- 分数在70到79之间（包括70和79）被评为 'C'。  \n- 分数在60到69之间（包括60和69）被评为 'D'。  \n- 分数低于60被评为 'E'。  \n如果分数不在0到100的范围内，则返回错误信息。  \n输入：一个数值分数。  \n输出：返回对应的字母等级或如果分数超出范围则返回错误信息。",
      "fr": "Convertit un score numérique en sa note correspondante en lettres.\nLe système de notation est le suivant :  \n- Un score entre 90 et 100 (inclus) est noté 'A'.  \n- Un score entre 80 et 89 (inclus) est noté 'B'.  \n- Un score entre 70 et 79 (inclus) est noté 'C'.  \n- Un score entre 60 et 69 (inclus) est noté 'D'.  \n- Un score inférieur à 60 est noté 'E'.  \nSi le score est en dehors de la plage de 0 à 100, un message d'erreur est renvoyé.  \nEntrée : Un score numérique.  \nSortie : Renvoie la note correspondante en lettres ou un message d'erreur si le score est hors de portée.",
      "de": "Konvertiert eine numerische Punktzahl in die entsprechende Buchstabennote.\nDas Bewertungssystem ist wie folgt:\n- Eine Punktzahl zwischen 90 und 100 (einschließlich) wird mit 'A' bewertet.\n- Eine Punktzahl zwischen 80 und 89 (einschließlich) wird mit 'B' bewertet.\n- Eine Punktzahl zwischen 70 und 79 (einschließlich) wird mit 'C' bewertet.\n- Eine Punktzahl zwischen 60 und 69 (einschließlich) wird mit 'D' bewertet.\n- Eine Punktzahl unter 60 wird mit 'E' bewertet.\nWenn die Punktzahl außerhalb des Bereichs von 0 bis 100 liegt, wird eine Fehlermeldung zurückgegeben.\nEingabe: Eine numerische Punktzahl.\nAusgabe: Gibt die entsprechende Buchstabennote oder eine Fehlermeldung zurück, wenn die Punktzahl außerhalb des Bereichs liegt.",
      "ha": "Canza maki na lambobi zuwa harafin da ya dace.\nYana sauya maki na lambobi zuwa harafin daraja da ya dace.  \nThe grading system is as follows:  \nTsarin daraja yana kamar haka:  \n- A score between 90 and 100 (inclusive) is graded as 'A'.  \n- Maki tsakanin 90 da 100 (ciki har) ana ba shi darajar 'A'.  \n- A score between 80 and 89 (inclusive) is graded as 'B'.  \n- Maki tsakanin 80 da 89 (ciki har) ana ba shi darajar 'B'.  \n- A score between 70 and 79 (inclusive) is graded as 'C'.  \n- Maki tsakanin 70 da 79 (ciki har) ana ba shi darajar 'C'.  \n- A score between 60 and 69 (inclusive) is graded as 'D'.  \n- Maki tsakanin 60 da 69 (ciki har) ana ba shi darajar 'D'.  \n- A score below 60 is graded as 'E'.  \n- Maki kasa da 60 ana ba shi darajar 'E'.  \nIf the score is outside the range of 0 to 100, an error message is returned.  \nIdan maki ya fita daga zangon 0 zuwa 100, ana mayar da saƙon kuskure.  \nInput: A numeric score.  \nShigarwa: Maki na lambobi.  \nOutput: Returns the corresponding letter grade or an error message if the score is out of range.  \nFitarwa: Yana mayar da harafin daraja da ya dace ko kuma saƙon kuskure idan maki ya fita daga zango.  ",
      "hi": "संख्यात्मक स्कोर को उसके संबंधित अक्षर ग्रेड में परिवर्तित करता है। \nग्रेडिंग प्रणाली इस प्रकार है:\n- 90 और 100 (समावेशी) के बीच का स्कोर 'A' के रूप में ग्रेड किया जाता है।\n- 80 और 89 (समावेशी) के बीच का स्कोर 'B' के रूप में ग्रेड किया जाता है।\n- 70 और 79 (समावेशी) के बीच का स्कोर 'C' के रूप में ग्रेड किया जाता है।\n- 60 और 69 (समावेशी) के बीच का स्कोर 'D' के रूप में ग्रेड किया जाता है।\n- 60 से कम का स्कोर 'E' के रूप में ग्रेड किया जाता है।\nयदि स्कोर 0 से 100 की सीमा के बाहर है, तो एक त्रुटि संदेश लौटाया जाता है।\nइनपुट: एक संख्यात्मक स्कोर।\nआउटपुट: संबंधित अक्षर ग्रेड या एक त्रुटि संदेश लौटाता है यदि स्कोर सीमा से बाहर है।",
      "hu": "Átalakít egy numerikus pontszámot a megfelelő betűjegyre.\nAz osztályozási rendszer a következő:\n- A 90 és 100 közötti (beleértve) pontszám 'A' minősítést kap.\n- A 80 és 89 közötti (beleértve) pontszám 'B' minősítést kap.\n- A 70 és 79 közötti (beleértve) pontszám 'C' minősítést kap.\n- A 60 és 69 közötti (beleértve) pontszám 'D' minősítést kap.\n- A 60 alatti pontszám 'E' minősítést kap.\nHa a pontszám kívül esik a 0 és 100 közötti tartományon, hibaüzenet kerül visszaadásra.\nBemenet: Egy numerikus pontszám.\nKimenet: Visszaadja a megfelelő betűjegyet vagy egy hibaüzenetet, ha a pontszám kívül esik a tartományon."
    },
    "docstring_bertscore": {
      "sq": "0.9950833021782434",
      "hy": "0.9479415593257092",
      "bn": "0.9983303130170207",
      "bg": "0.9662451503076932",
      "zh": "0.887823690940928",
      "fr": "0.982082745109129",
      "de": "0.9963920777588823",
      "ha": "1",
      "hi": "0.9964484887870962",
      "hu": "0.9447396375834268"
    }
  },
  {
    "task_id": "PHP/5",
    "prompt": {
      "en": "<?php\n/**\n * Calculates the day number of the year for a given date.\n * This function takes a date in the format 'YYYY/MM/DD' and returns the day number\n * in the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\n * while '2024/12/31' would return 366 for a leap year or 365 otherwise.\n * Input: A string representing the date in 'YYYY/MM/DD' format.\n * Output: An integer representing the day number in the year.\n */\n\nfunction getDayOfYear($date): int ",
      "sq": "<?php\n/**\n * Llogarit numrin e ditës së vitit për një datë të caktuar.\n * Kjo funksion merr një datë në formatin 'YYYY/MM/DD' dhe kthen numrin e ditës\n * në vit për atë datë. Për shembull, '2024/01/01' do të kthente 1, pasi është dita e parë e vitit,\n * ndërsa '2024/12/31' do të kthente 366 për një vit të brishtë ose 365 përndryshe.\n * Hyrja: Një varg që përfaqëson datën në formatin 'YYYY/MM/DD'.\n * Dalja: Një numër i plotë që përfaqëson numrin e ditës në vit.\n */\n\nfunction getDayOfYear($date): int ",
      "hy": "<?php\n/**\n * Հաշվում է տարվա օրվա համարը տրված ամսաթվի համար:\n * Այս ֆունկցիան ընդունում է ամսաթիվ 'YYYY/MM/DD' ձևաչափով և վերադարձնում է օրվա համարը\n * տարվա համար այդ ամսաթվի համար: Օրինակ, '2024/01/01' կվերադարձնի 1, քանի որ դա տարվա առաջին օրն է,\n * իսկ '2024/12/31' կվերադարձնի 366 նահանջ տարի համար կամ 365 այլ դեպքում:\n * Մուտք: Տող, որը ներկայացնում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով:\n * Ելք: Ամբողջ թիվ, որը ներկայացնում է օրվա համարը տարվա մեջ:\n */\n\nfunction getDayOfYear($date): int ",
      "bn": "<?php\n/**\n * প্রদত্ত তারিখের জন্য বছরের দিন সংখ্যা গণনা করে।\n * এই ফাংশনটি 'YYYY/MM/DD' ফরম্যাটে একটি তারিখ গ্রহণ করে এবং সেই তারিখের জন্য বছরের দিন সংখ্যা ফেরত দেয়। উদাহরণস্বরূপ, '2024/01/01' 1 ফেরত দেবে, কারণ এটি বছরের প্রথম দিন,\n * যেখানে '2024/12/31' একটি অধিবর্ষের জন্য 366 বা অন্যথায় 365 ফেরত দেবে।\n * ইনপুট: 'YYYY/MM/DD' ফরম্যাটে তারিখ উপস্থাপনকারী একটি স্ট্রিং।\n * আউটপুট: বছরের দিন সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n */\n\nfunction getDayOfYear($date): int ",
      "bg": "<?php\n/**\n * Изчислява номера на деня от годината за дадена дата.\n * Тази функция приема дата във формат 'YYYY/MM/DD' и връща номера на деня\n * в годината за тази дата. Например, '2024/01/01' би върнала 1, тъй като това е първият ден от годината,\n * докато '2024/12/31' би върнала 366 за високосна година или 365 в противен случай.\n * Вход: Низ, представляващ датата във формат 'YYYY/MM/DD'.\n * Изход: Цяло число, представляващо номера на деня в годината.\n */\n\nfunction getDayOfYear($date): int ",
      "zh": "<?php\n/**\n * 计算给定日期在一年中的天数。\n * 此函数接受格式为 'YYYY/MM/DD' 的日期，并返回该日期在一年中的天数。例如，'2024/01/01' 会返回 1，因为它是一年的第一天，\n * 而 '2024/12/31' 在闰年会返回 366，否则返回 365。\n * 输入：一个表示日期的字符串，格式为 'YYYY/MM/DD'。\n * 输出：一个整数，表示该日期在一年中的天数。\n */\n\nfunction getDayOfYear($date): int ",
      "fr": "<?php\n/**\n * Calcule le numéro du jour de l'année pour une date donnée.\n * Cette fonction prend une date au format 'YYYY/MM/DD' et renvoie le numéro du jour\n * dans l'année pour cette date. Par exemple, '2024/01/01' renverrait 1, car c'est le premier jour de l'année,\n * tandis que '2024/12/31' renverrait 366 pour une année bissextile ou 365 sinon.\n * Entrée : Une chaîne représentant la date au format 'YYYY/MM/DD'.\n * Sortie : Un entier représentant le numéro du jour dans l'année.\n */\n\nfunction getDayOfYear($date): int ",
      "de": "<?php\n/**\n * Berechnet die Tagesnummer des Jahres für ein gegebenes Datum.\n * Diese Funktion nimmt ein Datum im Format 'YYYY/MM/DD' und gibt die Tagesnummer\n * im Jahr für dieses Datum zurück. Zum Beispiel würde '2024/01/01' 1 zurückgeben, da es der erste Tag des Jahres ist,\n * während '2024/12/31' 366 für ein Schaltjahr oder 365 ansonsten zurückgeben würde.\n * Eingabe: Ein String, der das Datum im Format 'YYYY/MM/DD' darstellt.\n * Ausgabe: Eine ganze Zahl, die die Tagesnummer im Jahr darstellt.\n */\n\nfunction getDayOfYear($date): int ",
      "ha": "<?php\n/**\n * Lissafa lambar ranar shekara don wata kwanan wata da aka bayar.\n * Wannan aikin yana ɗaukar kwanan wata a cikin tsari 'YYYY/MM/DD' kuma yana mayar da lambar ranar\n * a cikin shekara don wannan kwanan wata. Alal misali, '2024/01/01' zai mayar da 1, domin ita ce ranar farko ta shekara,\n * yayin da '2024/12/31' zai mayar da 366 don shekara mai tsallakewa ko 365 in ba haka ba.\n * Shigarwa: Wani kirtani da ke wakiltar kwanan wata a cikin tsari 'YYYY/MM/DD'.\n * Fitarwa: Wani lamba da ke wakiltar lambar ranar a cikin shekara.\n */\n\nfunction getDayOfYear($date): int ",
      "hi": "<?php\n/**\n * दिए गए दिनांक के लिए वर्ष का दिनांक संख्या गणना करता है।\n * यह फ़ंक्शन 'YYYY/MM/DD' प्रारूप में दिनांक लेता है और उस दिनांक के लिए वर्ष में दिनांक संख्या लौटाता है। उदाहरण के लिए, '2024/01/01' 1 लौटाएगा, क्योंकि यह वर्ष का पहला दिन है,\n * जबकि '2024/12/31' एक लीप वर्ष के लिए 366 या अन्यथा 365 लौटाएगा।\n * इनपुट: 'YYYY/MM/DD' प्रारूप में दिनांक को दर्शाने वाली एक स्ट्रिंग।\n * आउटपुट: वर्ष में दिनांक संख्या को दर्शाने वाला एक पूर्णांक।\n */\n\nfunction getDayOfYear($date): int ",
      "hu": "<?php\n/**\n * Kiszámítja az év napjának számát egy adott dátumhoz.\n * Ez a függvény egy dátumot vesz fel 'ÉÉÉÉ/HH/NN' formátumban, és visszaadja az év napjának számát\n * az adott dátumhoz. Például, '2024/01/01' esetén 1-et ad vissza, mivel ez az év első napja,\n * míg '2024/12/31' esetén 366-ot ad vissza szökőévben vagy 365-öt egyébként.\n * Bemenet: Egy karakterlánc, amely a dátumot 'ÉÉÉÉ/HH/NN' formátumban képviseli.\n * Kimenet: Egy egész szám, amely az év napjának számát képviseli.\n */\n\nfunction getDayOfYear($date): int "
    },
    "prompt_bertscore": {
      "sq": "0.9932356423738569",
      "hy": "0.9835522126680251",
      "bn": "0.9764275395306846",
      "bg": "0.9848975362387743",
      "zh": "0.949562780495716",
      "fr": "0.9898861382584656",
      "de": "0.992473100341064",
      "ha": "0.9876255258919076",
      "hi": "0.9752260243558046",
      "hu": "0.9687010163388086"
    },
    "canonical_solution": "{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}",
    "instruction": {
      "en": "Write a PHP function `function getDayOfYear($date): int` to solve the following problem:\nCalculates the day number of the year for a given date.\nThis function takes a date in the format 'YYYY/MM/DD' and returns the day number\nin the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\nwhile '2024/12/31' would return 366 for a leap year or 365 otherwise.\nInput: A string representing the date in 'YYYY/MM/DD' format.\nOutput: An integer representing the day number in the year.",
      "sq": "Shkruani një funksion PHP `function getDayOfYear($date): int` për të zgjidhur problemin në vijim:\nLlogarit numrin e ditës së vitit për një datë të dhënë.\nKy funksion merr një datë në formatin 'YYYY/MM/DD' dhe kthen numrin e ditës\nnë vit për atë datë. Për shembull, '2024/01/01' do të kthejë 1, pasi është dita e parë e vitit,\nndërsa '2024/12/31' do të kthejë 366 për një vit të brishtë ose 365 ndryshe.\nHyrja: Një varg që përfaqëson datën në formatin 'YYYY/MM/DD'.\nDalja: Një numër i plotë që përfaqëson numrin e ditës në vit.",
      "hy": "Գրեք PHP ֆունկցիա `function getDayOfYear($date): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվարկում է տարվա օրվա համարը տրված ամսաթվի համար։\nԱյս ֆունկցիան ընդունում է ամսաթիվ 'YYYY/MM/DD' ձևաչափով և վերադարձնում է տարվա օրվա համարը\nտրված ամսաթվի համար։ Օրինակ, '2024/01/01' կվերադարձնի 1, քանի որ դա տարվա առաջին օրն է,\nմինչդեռ '2024/12/31' կվերադարձնի 366 նահանջ տարվա համար կամ 365 այլապես։\nՄուտք: Տող, որը ներկայացնում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով։\nԵլք: Ամբողջ թիվ, որը ներկայացնում է տարվա օրվա համարը։",
      "bn": "একটি PHP ফাংশন `function getDayOfYear($date): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রদত্ত তারিখের জন্য বছরের দিনের সংখ্যা গণনা করে।\nএই ফাংশনটি 'YYYY/MM/DD' ফরম্যাটে একটি তারিখ গ্রহণ করে এবং সেই তারিখের জন্য বছরের দিনের সংখ্যা ফেরত দেয়। উদাহরণস্বরূপ, '2024/01/01' 1 ফেরত দেবে, কারণ এটি বছরের প্রথম দিন, যখন '2024/12/31' একটি লিপ বছরের জন্য 366 বা অন্যথায় 365 ফেরত দেবে।\nইনপুট: 'YYYY/MM/DD' ফরম্যাটে একটি তারিখ উপস্থাপনকারী একটি স্ট্রিং।\nআউটপুট: বছরের দিনের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।",
      "bg": "Напишете PHP функция `function getDayOfYear($date): int`, за да решите следния проблем:\nИзчислява номера на деня в годината за дадена дата.\nТази функция приема дата във формат 'YYYY/MM/DD' и връща номера на деня\nв годината за тази дата. Например, '2024/01/01' би върнала 1, тъй като това е първият ден от годината,\nдокато '2024/12/31' би върнала 366 за високосна година или 365 в противен случай.\nВход: Низ, представляващ датата във формат 'YYYY/MM/DD'.\nИзход: Цяло число, представляващо номера на деня в годината.",
      "zh": "编写一个 PHP 函数 `function getDayOfYear($date): int` 来解决以下问题：\n计算给定日期在一年中的天数。\n此函数接受格式为 'YYYY/MM/DD' 的日期，并返回该日期在一年中的天数。例如，'2024/01/01' 将返回 1，因为它是一年的第一天，而 '2024/12/31' 在闰年时将返回 366，否则返回 365。\n输入：一个表示日期的字符串，格式为 'YYYY/MM/DD'。\n输出：一个整数，表示一年中的天数。",
      "fr": "Écrire une fonction PHP `function getDayOfYear($date): int` pour résoudre le problème suivant :\nCalcule le numéro du jour de l'année pour une date donnée.\nCette fonction prend une date au format 'YYYY/MM/DD' et retourne le numéro du jour\ndans l'année pour cette date. Par exemple, '2024/01/01' retournerait 1, car c'est le premier jour de l'année,\ntandis que '2024/12/31' retournerait 366 pour une année bissextile ou 365 autrement.\nEntrée : Une chaîne représentant la date au format 'YYYY/MM/DD'.\nSortie : Un entier représentant le numéro du jour dans l'année.",
      "de": "Schreiben Sie eine PHP-Funktion `function getDayOfYear($date): int`, um das folgende Problem zu lösen:\nBerechnet die Tagesnummer des Jahres für ein gegebenes Datum.\nDiese Funktion nimmt ein Datum im Format 'YYYY/MM/DD' und gibt die Tagesnummer\nim Jahr für dieses Datum zurück. Zum Beispiel würde '2024/01/01' den Wert 1 zurückgeben, da es der erste Tag des Jahres ist,\nwährend '2024/12/31' für ein Schaltjahr 366 oder sonst 365 zurückgeben würde.\nEingabe: Ein String, der das Datum im Format 'YYYY/MM/DD' darstellt.\nAusgabe: Ein Integer, der die Tagesnummer im Jahr darstellt.",
      "ha": "Rubuta aikin PHP `function getDayOfYear($date): int` don warware matsalar mai zuwa:\nLissafa lambar ranar shekara don wata rana da aka bayar.\nWannan aikin yana ɗaukar wata rana a cikin tsarin 'YYYY/MM/DD' kuma yana mayar da lambar ranar\na cikin shekarar don wannan ranar. Alal misali, '2024/01/01' zai dawo da 1, domin ita ce ranar farko ta shekara,\nyayinda '2024/12/31' zai dawo da 366 don shekara mai tsalle ko 365 in ba haka ba.\nShigarwa: Wani jere da ke wakiltar ranar a cikin tsarin 'YYYY/MM/DD'.\nFitarwa: Wani lamba mai wakiltar lambar ranar a cikin shekarar.",
      "hi": "PHP फ़ंक्शन `function getDayOfYear($date): int` लिखें ताकि निम्नलिखित समस्या का समाधान हो सके:\nदिए गए दिनांक के लिए वर्ष के दिनांक संख्या की गणना करता है।\nयह फ़ंक्शन 'YYYY/MM/DD' प्रारूप में एक दिनांक लेता है और उस दिनांक के लिए वर्ष में दिनांक संख्या लौटाता है। उदाहरण के लिए, '2024/01/01' 1 लौटाएगा, क्योंकि यह वर्ष का पहला दिन है, जबकि '2024/12/31' एक लीप वर्ष के लिए 366 या अन्यथा 365 लौटाएगा।\nइनपुट: 'YYYY/MM/DD' प्रारूप में दिनांक का प्रतिनिधित्व करने वाली एक स्ट्रिंग।\nआउटपुट: वर्ष में दिनांक संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।",
      "hu": "Írj egy PHP függvényt `function getDayOfYear($date): int` a következő probléma megoldására:\nKiszámítja az év napjának számát egy adott dátumhoz.\nEz a függvény egy dátumot vesz fel 'YYYY/MM/DD' formátumban, és visszaadja az év napjának számát az adott dátumhoz. Például, '2024/01/01' esetén 1-et ad vissza, mivel ez az év első napja, míg '2024/12/31' esetén 366-ot ad vissza szökőév esetén, vagy 365-öt egyébként.\nBemenet: Egy karakterlánc, amely a dátumot 'YYYY/MM/DD' formátumban ábrázolja.\nKimenet: Egy egész szám, amely az év napjának számát jelöli."
    },
    "instruction_bertscore": {
      "sq": "0.9904834198142375",
      "hy": "0.9795269679963531",
      "bn": "0.9578422906683932",
      "bg": "0.984890186914676",
      "zh": "0.9525035032869376",
      "fr": "0.9920160518343026",
      "de": "0.9805729555828827",
      "ha": "0.9895705145830012",
      "hi": "0.9625112964049993",
      "hu": "0.949494848905402"
    },
    "level": "easy",
    "test": "function main(){\n    assert(getDayOfYear('2024/01/01') === 1);\n    assert(getDayOfYear('2024/03/01') === 61); // Non-leap year\n    assert(getDayOfYear('2024/12/31') === 366); // Leap year\n    assert(getDayOfYear('2023/12/31') === 365); // Non-leap year\n    \n}\n\nmain();\n?>",
    "entry_point": "getDayOfYear",
    "signature": "function getDayOfYear($date): int",
    "docstring": {
      "en": "Calculates the day number of the year for a given date.\nThis function takes a date in the format 'YYYY/MM/DD' and returns the day number\nin the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\nwhile '2024/12/31' would return 366 for a leap year or 365 otherwise.\nInput: A string representing the date in 'YYYY/MM/DD' format.\nOutput: An integer representing the day number in the year.",
      "sq": "Llogarit numrin e ditës së vitit për një datë të dhënë.  \nKjo funksion merr një datë në formatin 'YYYY/MM/DD' dhe kthen numrin e ditës  \nnë vit për atë datë. Për shembull, '2024/01/01' do të kthejë 1, pasi është dita e parë e vitit,  \nndërsa '2024/12/31' do të kthejë 366 për një vit të brishtë ose 365 ndryshe.  \nHyrja: Një varg që përfaqëson datën në formatin 'YYYY/MM/DD'.  \nDalja: Një numër i plotë që përfaqëson numrin e ditës në vit.  ",
      "hy": "Հաշվում է տարվա օրվա համարը տրված ամսաթվի համար։  \nԱյս ֆունկցիան ընդունում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով և վերադարձնում է տարվա օրվա համարը  \nայդ ամսաթվի համար։ Օրինակ՝ '2024/01/01'-ը կվերադարձնի 1, քանի որ դա տարվա առաջին օրն է,  \nմինչդեռ '2024/12/31'-ը կվերադարձնի 366 նահանջ տարվա համար կամ 365 այլապես։  \nՄուտք: Տող, որը ներկայացնում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով։  \nԵլք: Ամբողջ թիվ, որը ներկայացնում է տարվա օրվա համարը։",
      "bn": "বছরের দিনের সংখ্যা নির্ণয় করে একটি প্রদত্ত তারিখের জন্য।\nএই ফাংশনটি 'YYYY/MM/DD' ফরম্যাটে একটি তারিখ গ্রহণ করে এবং সেই তারিখের জন্য বছরের দিনের সংখ্যা ফেরত দেয়। উদাহরণস্বরূপ, '2024/01/01' 1 ফেরত দেবে, কারণ এটি বছরের প্রথম দিন, যখন '2024/12/31' একটি অধিবর্ষের জন্য 366 বা অন্যথায় 365 ফেরত দেবে।\nইনপুট: 'YYYY/MM/DD' ফরম্যাটে একটি তারিখকে উপস্থাপনকারী একটি স্ট্রিং।\nআউটপুট: বছরের দিনের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।",
      "bg": "Изчислява номера на деня в годината за дадена дата.\nТази функция приема дата във формат 'YYYY/MM/DD' и връща номера на деня\nв годината за тази дата. Например, '2024/01/01' би върнала 1, тъй като това е първият ден от годината,\nдокато '2024/12/31' би върнала 366 за високосна година или 365 в противен случай.\nВход: Низ, представляващ датата във формат 'YYYY/MM/DD'.\nИзход: Цяло число, представляващо номера на деня в годината.",
      "zh": "计算给定日期在一年中的天数。\n此函数接受格式为 'YYYY/MM/DD' 的日期，并返回该日期在一年中的天数。例如，'2024/01/01' 将返回 1，因为它是一年的第一天，而 '2024/12/31' 将在闰年返回 366，否则返回 365。\n输入：一个表示日期的字符串，格式为 'YYYY/MM/DD'。\n输出：一个整数，表示一年中的天数。",
      "fr": "Calcule le numéro du jour de l'année pour une date donnée.\nCette fonction prend une date au format 'YYYY/MM/DD' et renvoie le numéro du jour\ndans l'année pour cette date. Par exemple, '2024/01/01' renverrait 1, car c'est le premier jour de l'année,\ntandis que '2024/12/31' renverrait 366 pour une année bissextile ou 365 sinon.\nEntrée : Une chaîne représentant la date au format 'YYYY/MM/DD'.\nSortie : Un entier représentant le numéro du jour dans l'année.",
      "de": "Berechnet die Tagesnummer des Jahres für ein gegebenes Datum.\nDiese Funktion nimmt ein Datum im Format 'YYYY/MM/DD' und gibt die Tagesnummer\nim Jahr für dieses Datum zurück. Zum Beispiel würde '2024/01/01' den Wert 1 zurückgeben, da es der erste Tag des Jahres ist,\nwährend '2024/12/31' für ein Schaltjahr 366 oder sonst 365 zurückgeben würde.\nEingabe: Ein String, der das Datum im Format 'YYYY/MM/DD' darstellt.\nAusgabe: Ein Integer, der die Tagesnummer im Jahr darstellt.",
      "ha": "Yana lissafin lambar ranar shekara don wata ranar da aka bayar.\nWannan aikin yana ɗaukar wata rana a cikin tsarin 'YYYY/MM/DD' kuma yana mayar da lambar ranar\na cikin shekarar don wannan ranar. Alal misali, '2024/01/01' zai mayar da 1, domin ita ce rana ta farko a cikin shekara,\nyayinda '2024/12/31' zai mayar da 366 don shekara mai tsalle ko 365 idan ba haka ba.\nShigarwa: Wani kirtani da ke wakiltar ranar a cikin tsarin 'YYYY/MM/DD'.\nFitarwa: Wani cikakken lamba da ke wakiltar lambar ranar a cikin shekara.",
      "hi": "वर्ष के लिए दिए गए दिनांक के लिए दिन संख्या की गणना करता है।\nयह फ़ंक्शन 'YYYY/MM/DD' प्रारूप में एक दिनांक लेता है और उस दिनांक के लिए वर्ष में दिन संख्या लौटाता है। उदाहरण के लिए, '2024/01/01' 1 लौटाएगा, क्योंकि यह वर्ष का पहला दिन है, जबकि '2024/12/31' एक लीप वर्ष के लिए 366 या अन्यथा 365 लौटाएगा।\nइनपुट: 'YYYY/MM/DD' प्रारूप में दिनांक का प्रतिनिधित्व करने वाली एक स्ट्रिंग।\nआउटपुट: वर्ष में दिन संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।",
      "hu": "Kiszámítja az év napjának számát egy adott dátumhoz.\nEz a függvény egy dátumot vesz fel 'YYYY/MM/DD' formátumban, és visszaadja az év napjának számát\naz adott dátumhoz. Például, a '2024/01/01' 1-et adna vissza, mivel ez az év első napja,\nmíg a '2024/12/31' 366-ot adna vissza szökőév esetén vagy 365-öt máskülönben.\nBemenet: Egy string, amely a dátumot 'YYYY/MM/DD' formátumban ábrázolja.\nKimenet: Egy egész szám, amely az év napjának számát képviseli."
    },
    "docstring_bertscore": {
      "sq": "0.9882823965619899",
      "hy": "0.95640599438313",
      "bn": "0.9377575810596696",
      "bg": "0.9823354029538053",
      "zh": "0.9405435707840648",
      "fr": "0.989877597152081",
      "de": "0.9786645148818995",
      "ha": "0.9776401780069026",
      "hi": "0.976298429783012",
      "hu": "0.9572281255302334"
    }
  },
  {
    "task_id": "PHP/6",
    "prompt": {
      "en": "<?php\n/**\n    * Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\n    * A number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\n    * For example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\n    * Input: An integer N.\n    * Output: Returns the sum of all integers less than or equal to N that are not related to 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "sq": "<?php\n/**\n    * Llogarit shumën e të gjithë numrave të plotë pozitivë më të vegjël ose të barabartë me një numër të dhënë N që nuk janë 'të lidhur' me numrin 2.\n    * Një numër është 'i lidhur' me 2 nëse është i pjestueshëm me 2 ose nëse ndonjë nga shifrat e tij është 2.\n    * Për shembull, për N = 8, numrat që nuk janë të lidhur me 2 janë 1, 3, 5, dhe 7, dhe shuma e tyre është 16.\n    * Hyrja: Një numër i plotë N.\n    * Dalja: Kthen shumën e të gjithë numrave të plotë më të vegjël ose të barabartë me N që nuk janë të lidhur me 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hy": "<?php\n/**\n    * Հաշվում է բոլոր դրական ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են տրված N թվին և 'կապված' չեն 2 թվի հետ:\n    * Թիվը 'կապված' է 2 թվի հետ, եթե այն բաժանվում է 2-ի վրա կամ եթե նրա որևէ թվանշանը 2 է:\n    * Օրինակ, N = 8 համար, 2-ի հետ չկապված թվերն են 1, 3, 5 և 7, և նրանց գումարը 16 է:\n    * Մուտք: Ամբողջ թիվ N:\n    * Ելք: Վերադարձնում է բոլոր այն ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են N թվին և 2-ի հետ չկապված են:\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "bn": "<?php\n/**\n    * একটি প্রদত্ত সংখ্যা N এর চেয়ে ছোট বা সমান সমস্ত ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করে যা সংখ্যা 2 এর সাথে 'সম্পর্কিত' নয়।\n    * একটি সংখ্যা 2 এর সাথে 'সম্পর্কিত' যদি এটি 2 দ্বারা বিভাজ্য হয় বা এর কোনো অঙ্ক 2 হয়।\n    * উদাহরণস্বরূপ, N = 8 এর জন্য, 2 এর সাথে সম্পর্কিত নয় এমন সংখ্যা হল 1, 3, 5, এবং 7, এবং তাদের যোগফল 16।\n    * ইনপুট: একটি পূর্ণসংখ্যা N।\n    * আউটপুট: 2 এর সাথে সম্পর্কিত নয় এমন N এর চেয়ে ছোট বা সমান সমস্ত পূর্ণসংখ্যার যোগফল প্রদান করে।\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "bg": "<?php\n/**\n    * Изчислява сумата на всички положителни цели числа, по-малки или равни на дадено число N, които не са 'свързани' с числото 2.\n    * Едно число е 'свързано' с 2, ако е делимо на 2 или ако някоя от неговите цифри е 2.\n    * Например, за N = 8, числата, които не са свързани с 2, са 1, 3, 5 и 7, и тяхната сума е 16.\n    * Вход: Цяло число N.\n    * Изход: Връща сумата на всички цели числа, по-малки или равни на N, които не са свързани с 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "zh": "<?php\n/**\n    * 计算小于或等于给定数字 N 的所有正整数的和，这些整数与数字 2 无关。\n    * 如果一个数字能被 2 整除或者其任何一位数字是 2，则称其与 2 有关。\n    * 例如，对于 N = 8，与 2 无关的数字是 1, 3, 5 和 7，它们的和是 16。\n    * 输入：一个整数 N。\n    * 输出：返回小于或等于 N 的所有与 2 无关的整数的和。\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "fr": "<?php\n/**\n    * Calcule la somme de tous les entiers positifs inférieurs ou égaux à un nombre donné N qui ne sont pas 'liés' au nombre 2.\n    * Un nombre est 'lié' à 2 s'il est divisible par 2 ou si l'un de ses chiffres est 2.\n    * Par exemple, pour N = 8, les nombres non liés à 2 sont 1, 3, 5 et 7, et leur somme est 16.\n    * Entrée : Un entier N.\n    * Sortie : Renvoie la somme de tous les entiers inférieurs ou égaux à N qui ne sont pas liés à 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "de": "<?php\n/**\n    * Berechnet die Summe aller positiven ganzen Zahlen, die kleiner oder gleich einer gegebenen Zahl N sind und nicht 'verwandt' mit der Zahl 2 sind.\n    * Eine Zahl ist 'verwandt' mit 2, wenn sie durch 2 teilbar ist oder wenn eine ihrer Ziffern eine 2 ist.\n    * Zum Beispiel, für N = 8, sind die Zahlen, die nicht mit 2 verwandt sind, 1, 3, 5 und 7, und ihre Summe ist 16.\n    * Eingabe: Eine ganze Zahl N.\n    * Ausgabe: Gibt die Summe aller ganzen Zahlen zurück, die kleiner oder gleich N sind und nicht mit 2 verwandt sind.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "ha": "<?php\n/**\n    * Lissafa jimillar dukkan lambobin ƙididdiga masu kyau waɗanda suka yi ƙasa ko dai daidai da wata lamba N da ba su da alaƙa da lamba 2.\n    * Lamba tana da alaƙa da 2 idan ana iya raba ta da 2 ko idan wani daga cikin lambobinta shi ne 2.\n    * Alal misali, don N = 8, lambobin da ba su da alaƙa da 2 su ne 1, 3, 5, da 7, kuma jimillarsu ita ce 16.\n    * Shigarwa: Lamba N.\n    * Fitarwa: Mayar da jimillar dukkan lambobin da suka yi ƙasa ko dai daidai da N da ba su da alaƙa da 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hi": "<?php\n/**\n    * एक दिए गए संख्या N से कम या उसके बराबर सभी धनात्मक पूर्णांकों का योग गणना करता है जो संख्या 2 से 'संबंधित' नहीं हैं।\n    * एक संख्या 2 से 'संबंधित' होती है यदि वह 2 से विभाज्य है या यदि उसके किसी भी अंक में 2 है।\n    * उदाहरण के लिए, N = 8 के लिए, 2 से संबंधित नहीं होने वाली संख्याएँ 1, 3, 5, और 7 हैं, और उनका योग 16 है।\n    * इनपुट: एक पूर्णांक N।\n    * आउटपुट: उन सभी पूर्णांकों का योग लौटाता है जो N से कम या उसके बराबर हैं और 2 से संबंधित नहीं हैं।\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hu": "<?php\n/**\n    * Kiszámítja az összes pozitív egész szám összegét, amely kisebb vagy egyenlő egy adott N számmal, és nem 'kapcsolódik' a 2-es számhoz.\n    * Egy szám akkor 'kapcsolódik' a 2-eshez, ha osztható 2-vel, vagy ha bármelyik számjegye 2.\n    * Például, ha N = 8, a 2-höz nem kapcsolódó számok 1, 3, 5 és 7, és ezek összege 16.\n    * Bemenet: Egy egész szám N.\n    * Kimenet: Visszaadja az összes olyan egész szám összegét, amely kisebb vagy egyenlő N-nél, és nem kapcsolódik a 2-höz.\n*/\n\nfunction sumOfUnrelatedToTwo($N) "
    },
    "prompt_bertscore": {
      "sq": "0.994215486043502",
      "hy": "0.9685822353709497",
      "bn": "0.970371895104074",
      "bg": "0.9952576996527921",
      "zh": "0.9654200397048742",
      "fr": "0.9968376057035435",
      "de": "0.9737460293867136",
      "ha": "0.9544262453753553",
      "hi": "0.9903545086969459",
      "hu": "0.9779536167481757"
    },
    "canonical_solution": "{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "instruction": {
      "en": "Write a PHP function `function sumOfUnrelatedToTwo($N)` to solve the following problem:\nCalculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\nA number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\nFor example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\nInput: An integer N.\nOutput: Returns the sum of all integers less than or equal to N that are not related to 2.",
      "sq": "Shkruani një funksion PHP `function sumOfUnrelatedToTwo($N)` për të zgjidhur problemin e mëposhtëm:\nLlogarit shumën e të gjithë numrave të plotë pozitivë më të vegjël ose të barabartë me një numër të dhënë N që nuk janë 'të lidhur' me numrin 2.\nNjë numër është 'i lidhur' me 2 nëse është i pjestueshëm me 2 ose nëse ndonjë nga shifrat e tij është 2.\nPër shembull, për N = 8, numrat që nuk janë të lidhur me 2 janë 1, 3, 5, dhe 7, dhe shuma e tyre është 16.\nHyrja: Një numër i plotë N.\nDalja: Kthen shumën e të gjithë numrave të plotë më të vegjël ose të barabartë me N që nuk janë të lidhur me 2.",
      "hy": "Գրեք PHP ֆունկցիա `function sumOfUnrelatedToTwo($N)` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է տրված N թվից փոքր կամ հավասար բոլոր դրական ամբողջ թվերի գումարը, որոնք 'կապված' չեն 2 թվի հետ:\nԹիվը 'կապված' է 2-ի հետ, եթե այն բաժանվում է 2-ի վրա կամ եթե նրա որևէ թվանշան 2 է:\nՕրինակ, երբ N = 8, 2-ի հետ չկապված թվերն են 1, 3, 5 և 7, և նրանց գումարը 16 է:\nՄուտք: Ամբողջ թիվ N:\nԵլք: Վերադարձնում է N-ից փոքր կամ հավասար բոլոր թվերի գումարը, որոնք 2-ի հետ կապ չունեն:",
      "bn": "একটি PHP ফাংশন `function sumOfUnrelatedToTwo($N)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রদত্ত সংখ্যা N এর চেয়ে কম বা সমান সমস্ত ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করে যা সংখ্যা 2 এর সাথে 'সম্পর্কিত' নয়।\nএকটি সংখ্যা 2 এর সাথে 'সম্পর্কিত' যদি এটি 2 দ্বারা বিভাজ্য হয় বা যদি এর কোনো অঙ্ক 2 হয়।\nউদাহরণস্বরূপ, N = 8 এর জন্য, 2 এর সাথে সম্পর্কিত নয় এমন সংখ্যা হল 1, 3, 5, এবং 7, এবং তাদের যোগফল হল 16।\nইনপুট: একটি পূর্ণসংখ্যা N।\nআউটপুট: N এর চেয়ে কম বা সমান সমস্ত পূর্ণসংখ্যার যোগফল প্রদান করে যা 2 এর সাথে সম্পর্কিত নয়।",
      "bg": "Напишете PHP функция `function sumOfUnrelatedToTwo($N)` за решаване на следния проблем:\nИзчислява сумата на всички положителни цели числа, по-малки или равни на дадено число N, които не са 'свързани' с числото 2.\nЕдно число е 'свързано' с 2, ако е делимо на 2 или ако някоя от цифрите му е 2.\nНапример, за N = 8, числата, които не са свързани с 2, са 1, 3, 5 и 7, и тяхната сума е 16.\nВход: Цяло число N.\nИзход: Връща сумата на всички числа, по-малки или равни на N, които не са свързани с 2.",
      "zh": "编写一个 PHP 函数 `function sumOfUnrelatedToTwo($N)` 来解决以下问题：\n计算小于或等于给定数字 N 的所有正整数中，与数字 2 无关的数的和。\n如果一个数字可以被 2 整除，或者它的任何一个数字是 2，则该数字与 2 有关。\n例如，对于 N = 8，与 2 无关的数字是 1, 3, 5 和 7，它们的和是 16。\n输入：一个整数 N。\n输出：返回小于或等于 N 的所有与 2 无关的整数的和。",
      "fr": "Écrire une fonction PHP `function sumOfUnrelatedToTwo($N)` pour résoudre le problème suivant :\nCalcule la somme de tous les entiers positifs inférieurs ou égaux à un nombre donné N qui ne sont pas 'liés' au nombre 2.\nUn nombre est 'lié' à 2 s'il est divisible par 2 ou si l'un de ses chiffres est 2.\nPar exemple, pour N = 8, les nombres non liés à 2 sont 1, 3, 5 et 7, et leur somme est 16.\nEntrée : Un entier N.\nSortie : Renvoie la somme de tous les entiers inférieurs ou égaux à N qui ne sont pas liés à 2.",
      "de": "Schreiben Sie eine PHP-Funktion `function sumOfUnrelatedToTwo($N)`, um das folgende Problem zu lösen:\nBerechnet die Summe aller positiven ganzen Zahlen, die kleiner oder gleich einer gegebenen Zahl N sind und nicht 'verwandt' mit der Zahl 2 sind.\nEine Zahl ist 'verwandt' mit 2, wenn sie durch 2 teilbar ist oder wenn eine ihrer Ziffern eine 2 ist.\nZum Beispiel, für N = 8, sind die Zahlen, die nicht mit 2 verwandt sind, 1, 3, 5 und 7, und ihre Summe ist 16.\nEingabe: Eine ganze Zahl N.\nAusgabe: Gibt die Summe aller ganzen Zahlen zurück, die kleiner oder gleich N sind und nicht mit 2 verwandt sind.",
      "ha": "Rubuta aikin PHP `function sumOfUnrelatedToTwo($N)` don warware matsalar mai zuwa:\nLissafa jimillar dukkan lambobin kirari masu kyau da suka fi ƙasa ko daidai da wata lamba N da ba su da 'alaƙa' da lamba 2.\nAna cewa wata lamba tana da 'alaƙa' da 2 idan tana rarrabuwa da 2 ko kuma idan wani daga cikin lambobinta ya kasance 2.\nMisali, don N = 8, lambobin da ba su da alaƙa da 2 sune 1, 3, 5, da 7, kuma jimillarsu ita ce 16.\nShigarwa: Wata lamba N.\nFitarwa: Mayar da jimillar dukkan lambobin da suka fi ƙasa ko daidai da N da ba su da alaƙa da 2.",
      "hi": "PHP फ़ंक्शन `function sumOfUnrelatedToTwo($N)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक दिए गए संख्या N से कम या उसके बराबर सभी धनात्मक पूर्णांकों का योग गणना करता है जो संख्या 2 से 'संबंधित' नहीं हैं।\nएक संख्या 2 से 'संबंधित' है यदि वह 2 से विभाज्य है या उसके किसी भी अंक में 2 है।\nउदाहरण के लिए, N = 8 के लिए, 2 से संबंधित नहीं होने वाली संख्याएँ 1, 3, 5, और 7 हैं, और उनका योग 16 है।\nइनपुट: एक पूर्णांक N।\nआउटपुट: उन सभी पूर्णांकों का योग लौटाता है जो N से कम या उसके बराबर हैं और 2 से संबंधित नहीं हैं।",
      "hu": "Írj egy PHP függvényt `function sumOfUnrelatedToTwo($N)` a következő probléma megoldására:\nKiszámítja az összegét minden pozitív egész számnak, amely kisebb vagy egyenlő egy adott N számnál, és amelyek nem 'kapcsolódnak' a 2-es számhoz.\nEgy szám akkor 'kapcsolódik' a 2-eshez, ha osztható 2-vel, vagy ha bármelyik számjegye 2.\nPéldául, ha N = 8, a 2-höz nem kapcsolódó számok: 1, 3, 5 és 7, és ezek összege 16.\nBemenet: Egy egész szám N.\nKimenet: Visszaadja az összegét minden olyan egész számnak, amely kisebb vagy egyenlő N-nél, és nem kapcsolódik a 2-höz."
    },
    "instruction_bertscore": {
      "sq": "0.9938104786965718",
      "hy": "0.9793070841645474",
      "bn": "0.992747011636511",
      "bg": "0.9933973275040193",
      "zh": "0.9462816052314007",
      "fr": "0.9954626862060201",
      "de": "0.9727421514409633",
      "ha": "0.9517532763377687",
      "hi": "0.9706150186904607",
      "hu": "0.9764545532625054"
    },
    "level": "easy",
    "test": "function main(){\n    assert(sumOfUnrelatedToTwo(8) === 16);  // 1 + 3 + 5 + 7\n    assert(sumOfUnrelatedToTwo(10) === 25); // 1 + 3 + 5 + 7 + 9\n    assert(sumOfUnrelatedToTwo(2) === 1);   // 1\n    assert(sumOfUnrelatedToTwo(22) === 100); // Sum of numbers not containing 2 and not even, up to 22\n    assert(sumOfUnrelatedToTwo(0) === 0);   // No numbers to sum\n    \n}\n\n\nmain();\n?>",
    "entry_point": "sumOfUnrelatedToTwo",
    "signature": "function sumOfUnrelatedToTwo($N)",
    "docstring": {
      "en": "Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\nA number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\nFor example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\nInput: An integer N.\nOutput: Returns the sum of all integers less than or equal to N that are not related to 2.",
      "sq": "Llogarit shumën e të gjithë numrave të plotë pozitivë më të vegjël ose të barabartë me një numër të dhënë N që nuk janë 'të lidhur' me numrin 2. Një numër është 'i lidhur' me 2 nëse është i pjestueshëm me 2 ose nëse ndonjë nga shifrat e tij është 2. Për shembull, për N = 8, numrat që nuk janë të lidhur me 2 janë 1, 3, 5, dhe 7, dhe shuma e tyre është 16. \n\nArgs:\n    N: Një numër i plotë.\n\nReturns:\n    Kthen shumën e të gjithë numrave të plotë më të vegjël ose të barabartë me N që nuk janë të lidhur me 2.",
      "hy": "Հաշվում է բոլոր դրական ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են տրված N թվին և չեն 'կապված' 2 թվի հետ:\nԹիվը 'կապված' է 2-ի հետ, եթե այն բաժանվում է 2-ի վրա կամ եթե նրա որևէ թվանշանը 2 է:\nՕրինակ, N = 8-ի համար, 2-ի հետ չկապված թվերն են 1, 3, 5 և 7, և նրանց գումարը 16 է:\nՄուտք: Ամբողջ թիվ N:\nԵլք: Վերադարձնում է բոլոր այն ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են N թվին և չեն կապված 2-ի հետ:",
      "bn": "সমস্ত ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করে যা একটি প্রদত্ত সংখ্যা N এর চেয়ে ছোট বা সমান এবং যা সংখ্যা 2 এর সাথে 'সম্পর্কিত' নয়।\nএকটি সংখ্যা 2 এর সাথে 'সম্পর্কিত' যদি এটি 2 দ্বারা বিভাজ্য হয় বা যদি এর কোনো অঙ্ক 2 হয়।\nউদাহরণস্বরূপ, N = 8 এর জন্য, 2 এর সাথে সম্পর্কিত নয় এমন সংখ্যাগুলি হল 1, 3, 5, এবং 7, এবং তাদের যোগফল 16।\nইনপুট: একটি পূর্ণসংখ্যা N।\nআউটপুট: সমস্ত পূর্ণসংখ্যার যোগফল প্রদান করে যা N এর চেয়ে ছোট বা সমান এবং 2 এর সাথে সম্পর্কিত নয়।",
      "bg": "Изчислява сумата на всички положителни цели числа, по-малки или равни на дадено число N, които не са 'свързани' с числото 2. Едно число е 'свързано' с 2, ако е делимо на 2 или ако някоя от цифрите му е 2. Например, за N = 8, числата, които не са свързани с 2, са 1, 3, 5 и 7, и тяхната сума е 16. Вход: Цяло число N. Изход: Връща сумата на всички цели числа, по-малки или равни на N, които не са свързани с 2.",
      "zh": "计算小于或等于给定数字 N 的所有正整数的和，这些整数与数字 2 无关。\n如果一个数字可以被 2 整除或者其任何一位数字是 2，则该数字与 2 有关。\n例如，对于 N = 8，与 2 无关的数字是 1、3、5 和 7，它们的和是 16。\n输入：一个整数 N。\n输出：返回小于或等于 N 的所有与 2 无关的整数的和。",
      "fr": "Calcule la somme de tous les entiers positifs inférieurs ou égaux à un nombre donné N qui ne sont pas 'liés' au nombre 2.\nUn nombre est 'lié' à 2 s'il est divisible par 2 ou si l'un de ses chiffres est 2.\nPar exemple, pour N = 8, les nombres non liés à 2 sont 1, 3, 5, et 7, et leur somme est 16.\nEntrée : Un entier N.\nSortie : Renvoie la somme de tous les entiers inférieurs ou égaux à N qui ne sont pas liés à 2.",
      "de": "Berechnet die Summe aller positiven ganzen Zahlen, die kleiner oder gleich einer gegebenen Zahl N sind und nicht 'verwandt' mit der Zahl 2 sind.\nEine Zahl ist 'verwandt' mit 2, wenn sie durch 2 teilbar ist oder wenn eine ihrer Ziffern eine 2 ist.\nZum Beispiel, für N = 8, sind die Zahlen, die nicht mit 2 verwandt sind, 1, 3, 5 und 7, und ihre Summe ist 16.\nEingabe: Eine ganze Zahl N.\nAusgabe: Gibt die Summe aller ganzen Zahlen zurück, die kleiner oder gleich N sind und nicht mit 2 verwandt sind.",
      "ha": "Yana lissafin jimillar dukkan lambobin cikakkun lambobi masu kyau da suka kasa ko daidai da wani adadi N da ba su da 'dangantaka' da lamba 2. \nLamba tana da 'dangantaka' da 2 idan ana iya raba ta da 2 ko kuma idan wani daga cikin lambobinta yana dauke da 2.\nMisali, ga N = 8, lambobin da ba su da dangantaka da 2 sune 1, 3, 5, da 7, kuma jimillarsu ita ce 16.\nShigarwa: Lamba N.\nFitarwa: Yana dawo da jimillar dukkan lambobin da suka kasa ko daidai da N da ba su da dangantaka da 2.",
      "hi": "सभी धनात्मक पूर्णांकों का योग गणना करता है जो एक दिए गए संख्या N से कम या उसके बराबर हैं और जो संख्या 2 से 'संबंधित' नहीं हैं। \nएक संख्या 2 से 'संबंधित' होती है यदि वह 2 से विभाज्य है या यदि उसके किसी भी अंक में 2 है। \nउदाहरण के लिए, N = 8 के लिए, 2 से संबंधित नहीं होने वाली संख्याएँ 1, 3, 5, और 7 हैं, और उनका योग 16 है।\n\nइनपुट: एक पूर्णांक N।\n\nआउटपुट: उन सभी पूर्णांकों का योग लौटाता है जो N से कम या उसके बराबर हैं और जो 2 से संबंधित नहीं हैं।",
      "hu": "Kiszámítja az összes olyan pozitív egész szám összegét, amely kisebb vagy egyenlő egy adott N számmal, és nem 'kapcsolódik' a 2-es számhoz. \nEgy szám 'kapcsolódik' a 2-eshez, ha osztható 2-vel, vagy ha bármelyik számjegye 2.\nPéldául, ha N = 8, a 2-höz nem kapcsolódó számok: 1, 3, 5 és 7, és ezek összege 16.\nBemenet: Egy egész szám N.\nKimenet: Visszaadja az összes olyan egész szám összegét, amely kisebb vagy egyenlő N-nél, és nem kapcsolódik a 2-eshez."
    },
    "docstring_bertscore": {
      "sq": "0.9673098091500402",
      "hy": "0.9772868145590415",
      "bn": "0.9684388242358425",
      "bg": "0.9959012620873451",
      "zh": "0.9639819557461816",
      "fr": "0.9941886709420623",
      "de": "0.970212394908103",
      "ha": "0.966432061496247",
      "hi": "0.9692003731167302",
      "hu": "0.9723087399495453"
    }
  },
  {
    "task_id": "PHP/7",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the number of different ways to exchange a paper bill into coins.\n    * Given a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\n    * The function determines how many distinct combinations of these coins can sum up to the value of the bill.\n    * Example: For a bill of value 4, there are 5 ways:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Input: An integer representing the bill value.\n    * Output: Returns the number of different ways to exchange the bill into coins.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "sq": "<?php\n\n/**\n    * Llogarit numrin e mënyrave të ndryshme për të shkëmbyer një kartëmonedhë në monedha.\n    * Duke pasur një kartëmonedhë me vlerë N (1 <= N <= 10), ka dy lloje monedhash të disponueshme: 1 dhe 2 njësi.\n    * Funksioni përcakton sa kombinime të ndryshme të këtyre monedhave mund të arrijnë vlerën e kartëmonedhës.\n    * Shembull: Për një kartëmonedhë me vlerë 4, ka 5 mënyra:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Hyrja: Një numër i plotë që përfaqëson vlerën e kartëmonedhës.\n    * Dalja: Kthen numrin e mënyrave të ndryshme për të shkëmbyer kartëmonedhën në monedha.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է թղթադրամը մետաղադրամներով փոխանակելու տարբեր եղանակների քանակը:\n    * Տրված է N արժեքով թղթադրամ (1 <= N <= 10), առկա են երկու տեսակի մետաղադրամներ՝ 1 և 2 միավոր:\n    * Ֆունկցիան որոշում է, թե այս մետաղադրամների քանի տարբեր կոմբինացիաներ կարող են գումարվել թղթադրամի արժեքին:\n    * Օրինակ: 4 արժեքով թղթադրամի համար կա 5 եղանակ.\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Մուտք: Թղթադրամի արժեքը ներկայացնող ամբողջ թիվ:\n    * Ելք: Վերադարձնում է թղթադրամը մետաղադրամներով փոխանակելու տարբեր եղանակների քանակը:\n*/\nfunction countCoinExchangeWays($billValue) ",
      "bn": "<?php\n\n/**\n    * একটি কাগজের নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা গণনা করে।\n    * N মানের একটি কাগজের নোট দেওয়া হয়েছে (1 <= N <= 10), এখানে দুটি প্রকারের কয়েন উপলব্ধ: 1 এবং 2 ইউনিট।\n    * ফাংশনটি নির্ধারণ করে যে এই কয়েনগুলির কতগুলি ভিন্ন সংমিশ্রণ নোটের মান পর্যন্ত যোগ করতে পারে।\n    * উদাহরণ: 4 মানের একটি নোটের জন্য, 5টি উপায় আছে:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * ইনপুট: নোটের মানকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n    * আউটপুট: নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা প্রদান করে।\n*/\nfunction countCoinExchangeWays($billValue) ",
      "bg": "<?php\n\n/**\n    * Изчислява броя на различните начини за обмен на банкнота в монети.\n    * Дадена е банкнота с номинал N (1 <= N <= 10), налични са два вида монети: 1 и 2 единици.\n    * Функцията определя колко различни комбинации от тези монети могат да се сумират до стойността на банкнотата.\n    * Пример: За банкнота с номинал 4, има 5 начина:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Вход: Цяло число, представляващо стойността на банкнотата.\n    * Изход: Връща броя на различните начини за обмен на банкнотата в монети.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "zh": "<?php\n\n/**\n    * 计算将纸币兑换成硬币的不同方式的数量。\n    * 给定面值为 N 的纸币 (1 <= N <= 10)，有两种类型的硬币可用：1 和 2 单位。\n    * 该函数确定这些硬币的多少种不同组合可以加总为纸币的面值。\n    * 示例：对于面值为 4 的纸币，有 5 种方式：\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * 输入：一个整数，表示纸币的面值。\n    * 输出：返回将纸币兑换成硬币的不同方式的数量。\n*/\nfunction countCoinExchangeWays($billValue) ",
      "fr": "<?php\n\n/**\n    * Calcule le nombre de façons différentes d'échanger un billet en papier contre des pièces.\n    * Étant donné un billet en papier de valeur N (1 <= N <= 10), il existe deux types de pièces disponibles : 1 et 2 unités.\n    * La fonction détermine combien de combinaisons distinctes de ces pièces peuvent totaliser la valeur du billet.\n    * Exemple : Pour un billet de valeur 4, il y a 5 façons :\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Entrée : Un entier représentant la valeur du billet.\n    * Sortie : Retourne le nombre de façons différentes d'échanger le billet en pièces.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "de": "<?php\n\n/**\n    * Berechnet die Anzahl der verschiedenen Möglichkeiten, einen Geldschein in Münzen zu tauschen.\n    * Gegeben ist ein Geldschein mit dem Wert N (1 <= N <= 10), es stehen zwei Arten von Münzen zur Verfügung: 1 und 2 Einheiten.\n    * Die Funktion bestimmt, wie viele unterschiedliche Kombinationen dieser Münzen den Wert des Scheins ergeben können.\n    * Beispiel: Für einen Schein mit dem Wert 4 gibt es 5 Möglichkeiten:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Eingabe: Eine ganze Zahl, die den Wert des Scheins darstellt.\n    * Ausgabe: Gibt die Anzahl der verschiedenen Möglichkeiten zurück, den Schein in Münzen zu tauschen.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "ha": "<?php\n\n/**\n    * Lissafi yawan hanyoyi daban-daban na musanya takardar kudi zuwa tsabar kudi.\n    * An ba da takardar kudi mai darajar N (1 <= N <= 10), akwai nau'ikan tsabar kudi guda biyu: 1 da 2 raka'a.\n    * Aikin yana tantance yawan haɗuwa daban-daban na waɗannan tsabar kudin da za su iya kaiwa ga darajar takardar kudin.\n    * Misali: Don takardar kudi mai darajar 4, akwai hanyoyi 5:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Shigarwa: Lamba mai wakiltar darajar takardar kudin.\n    * Fitarwa: Yana mayar da yawan hanyoyi daban-daban na musanya takardar kudin zuwa tsabar kudi.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hi": "<?php\n\n/**\n    * सिक्कों में एक कागजी बिल को बदलने के विभिन्न तरीकों की संख्या की गणना करता है।\n    * दिए गए कागजी बिल का मूल्य N (1 <= N <= 10) है, दो प्रकार के सिक्के उपलब्ध हैं: 1 और 2 इकाइयाँ।\n    * यह फ़ंक्शन निर्धारित करता है कि इन सिक्कों के कितने भिन्न संयोजन बिल के मूल्य के बराबर हो सकते हैं।\n    * उदाहरण: मूल्य 4 के बिल के लिए, 5 तरीके हैं:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * इनपुट: बिल के मूल्य का प्रतिनिधित्व करने वाला एक पूर्णांक।\n    * आउटपुट: बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या लौटाता है।\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hu": "<?php\n\n/**\n    * Kiszámítja, hányféleképpen lehet egy papírpénzt érmékre váltani.\n    * Adott egy N értékű papírpénz (1 <= N <= 10), kétféle érme áll rendelkezésre: 1 és 2 egység.\n    * A függvény meghatározza, hogy ezeknek az érméknek hány különböző kombinációja adja ki a papírpénz értékét.\n    * Példa: Egy 4 értékű papírpénz esetén 5 mód van:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Bemenet: Egy egész szám, amely a papírpénz értékét jelöli.\n    * Kimenet: Visszaadja, hányféleképpen lehet a papírpénzt érmékre váltani.\n*/\nfunction countCoinExchangeWays($billValue) "
    },
    "prompt_bertscore": {
      "sq": "0.93189599851533",
      "hy": "0.9569947348325174",
      "bn": "0.9499391850677771",
      "bg": "0.9618679326008274",
      "zh": "0.9653193341016896",
      "fr": "0.9857732975887572",
      "de": "0.9750597707268784",
      "ha": "0.92771184953883",
      "hi": "0.9696236544587156",
      "hu": "0.9230102684197342"
    },
    "canonical_solution": "{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}",
    "instruction": {
      "en": "Write a PHP function `function countCoinExchangeWays($billValue)` to solve the following problem:\nCalculates the number of different ways to exchange a paper bill into coins.\nGiven a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\nThe function determines how many distinct combinations of these coins can sum up to the value of the bill.\nExample: For a bill of value 4, there are 5 ways:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: An integer representing the bill value.\nOutput: Returns the number of different ways to exchange the bill into coins.",
      "sq": "Shkruani një funksion PHP `function countCoinExchangeWays($billValue)` për të zgjidhur problemin e mëposhtëm:\nLlogarit numrin e mënyrave të ndryshme për të shkëmbyer një kartëmonedhë në monedha.\nDuke pasur një kartëmonedhë me vlerë N (1 <= N <= 10), ka dy lloje monedhash të disponueshme: 1 dhe 2 njësi.\nFunksioni përcakton sa kombinime të dallueshme të këtyre monedhave mund të arrijnë vlerën e kartëmonedhës.\nShembull: Për një kartëmonedhë me vlerë 4, ka 5 mënyra:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: Një numër i plotë që përfaqëson vlerën e kartëmonedhës.\nOutput: Kthen numrin e mënyrave të ndryshme për të shkëmbyer kartëmonedhën në monedha.",
      "hy": "Գրեք PHP ֆունկցիա `function countCoinExchangeWays($billValue)`՝ լուծելու հետևյալ խնդիրը:\nՀաշվում է թղթադրամի փոխանակման տարբեր եղանակների քանակը մետաղադրամներով:\nՏրված է N արժեքով թղթադրամ (1 <= N <= 10), առկա են երկու տեսակի մետաղադրամներ՝ 1 և 2 միավոր:\nՖունկցիան որոշում է, թե այս մետաղադրամներից քանի տարբեր կոմբինացիաներ կարող են գումարվել թղթադրամի արժեքին:\nՕրինակ: 4 արժեքով թղթադրամի համար կա 5 եղանակ.\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nՄուտք: Թվային արժեք, որը ներկայացնում է թղթադրամի արժեքը:\nԵլք: Վերադարձնում է մետաղադրամներով թղթադրամի փոխանակման տարբեր եղանակների քանակը:",
      "bn": "একটি PHP ফাংশন `function countCoinExchangeWays($billValue)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি কাগজের নোটকে কয়েনে বিনিময় করার বিভিন্ন পদ্ধতির সংখ্যা গণনা করে।\nযদি একটি কাগজের নোটের মান N দেওয়া হয় (1 <= N <= 10), তবে দুটি প্রকারের কয়েন পাওয়া যায়: 1 এবং 2 ইউনিট।\nফাংশনটি নির্ধারণ করে কতগুলি স্বতন্ত্র সংমিশ্রণ এই কয়েনগুলির মাধ্যমে নোটের মানের সমান হতে পারে।\nউদাহরণ: একটি 4 মানের নোটের জন্য, 5টি পদ্ধতি রয়েছে:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nইনপুট: একটি পূর্ণসংখ্যা যা নোটের মানকে নির্দেশ করে।\nআউটপুট: নোটকে কয়েনে বিনিময় করার বিভিন্ন পদ্ধতির সংখ্যা প্রদান করে।",
      "bg": "Напишете PHP функция `function countCoinExchangeWays($billValue)`, за да решите следния проблем:\nИзчислява броя на различните начини за обмен на банкнота в монети.\nДадена е банкнота със стойност N (1 <= N <= 10), има два вида монети на разположение: 1 и 2 единици.\nФункцията определя колко различни комбинации от тези монети могат да се сумират до стойността на банкнотата.\nПример: За банкнота със стойност 4, има 5 начина:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nВход: Цяло число, представляващо стойността на банкнотата.\nИзход: Връща броя на различните начини за обмен на банкнотата в монети.",
      "zh": "编写一个 PHP 函数 `function countCoinExchangeWays($billValue)` 来解决以下问题：\n计算将纸币兑换成硬币的不同方式的数量。\n给定面值为 N 的纸币 (1 <= N <= 10)，有两种类型的硬币可用：1 和 2 单位。\n该函数确定这些硬币的多少种不同组合可以加起来等于纸币的面值。\n示例：对于面值为 4 的纸币，有 5 种方式：\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\n输入：一个表示纸币面值的整数。\n输出：返回将纸币兑换成硬币的不同方式的数量。",
      "fr": "Écrire une fonction PHP `function countCoinExchangeWays($billValue)` pour résoudre le problème suivant :\nCalcule le nombre de façons différentes d'échanger un billet de banque en pièces de monnaie.\nÉtant donné un billet de valeur N (1 <= N <= 10), il y a deux types de pièces disponibles : 1 et 2 unités.\nLa fonction détermine combien de combinaisons distinctes de ces pièces peuvent totaliser la valeur du billet.\nExemple : Pour un billet de valeur 4, il y a 5 façons :\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEntrée : Un entier représentant la valeur du billet.\nSortie : Retourne le nombre de façons différentes d'échanger le billet en pièces de monnaie.",
      "de": "Schreiben Sie eine PHP-Funktion `function countCoinExchangeWays($billValue)`, um das folgende Problem zu lösen:\nBerechnet die Anzahl der verschiedenen Möglichkeiten, einen Geldschein in Münzen zu wechseln.\nGegeben ist ein Geldschein mit dem Wert N (1 <= N <= 10), es stehen zwei Arten von Münzen zur Verfügung: 1 und 2 Einheiten.\nDie Funktion bestimmt, wie viele verschiedene Kombinationen dieser Münzen den Wert des Scheins ergeben können.\nBeispiel: Für einen Schein mit dem Wert 4 gibt es 5 Möglichkeiten:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEingabe: Eine ganze Zahl, die den Wert des Scheins darstellt.\nAusgabe: Gibt die Anzahl der verschiedenen Möglichkeiten zurück, den Schein in Münzen zu wechseln.",
      "ha": "Rubuta aikin PHP `function countCoinExchangeWays($billValue)` don warware matsalar mai zuwa:\nYana lissafin yawan hanyoyin daban-daban don musanya takardar kudi zuwa tsabar kudi.\nAn ba da takardar kudi mai darajar N (1 <= N <= 10), akwai nau'ikan tsabar kudi guda biyu da ake da su: 1 da 2 raka'a.\nAikin yana tantance yawan haɗin tsabar kudi daban-daban waɗanda za su iya kaiwa ga darajar takardar kudin.\nMisali: Don takardar kudi mai darajar 4, akwai hanyoyi 5:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nShigarwa: Lamba mai nuna darajar takardar kudin.\nFitarwa: Yana mayar da yawan hanyoyin daban-daban don musanya takardar kudin zuwa tsabar kudi.",
      "hi": "PHP फ़ंक्शन `function countCoinExchangeWays($billValue)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nकागज़ी बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या की गणना करता है।\nमान लीजिए कि N मूल्य का एक कागज़ी बिल है (1 <= N <= 10), दो प्रकार के सिक्के उपलब्ध हैं: 1 और 2 इकाइयाँ।\nफ़ंक्शन यह निर्धारित करता है कि इन सिक्कों के कितने भिन्न संयोजन बिल के मूल्य तक जोड़ सकते हैं।\nउदाहरण: 4 मूल्य के बिल के लिए, 5 तरीके हैं:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nइनपुट: बिल के मूल्य का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या लौटाता है।",
      "hu": "Írj egy PHP függvényt `function countCoinExchangeWays($billValue)` a következő probléma megoldására:\nKiszámítja, hogy hány különböző módon lehet egy papírpénzt érmékre váltani.\nAdott egy N értékű papírpénz (1 <= N <= 10), kétféle érme áll rendelkezésre: 1 és 2 egység.\nA függvény meghatározza, hogy ezekből az érmékből hány különböző kombináció tudja kiadni a papírpénz értékét.\nPélda: Egy 4 értékű papírpénz esetén 5 mód van:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nBemenet: Egy egész szám, amely a papírpénz értékét jelöli.\nKimenet: Visszaadja a különböző módok számát, ahogyan a papírpénzt érmékre lehet váltani."
    },
    "instruction_bertscore": {
      "sq": "0.9663814107490831",
      "hy": "0.9593004362955704",
      "bn": "0.9490312455960667",
      "bg": "0.9773432255872555",
      "zh": "0.955603527643749",
      "fr": "0.9734492755974475",
      "de": "0.9732709055152782",
      "ha": "0.961006274007898",
      "hi": "0.9714905814100625",
      "hu": "0.9629027968860191"
    },
    "level": "easy",
    "test": "function main(){\n    assert(countCoinExchangeWays(4) === 5);\n    assert(countCoinExchangeWays(3) === 3);\n    assert(countCoinExchangeWays(2) === 2);\n    assert(countCoinExchangeWays(1) === 1);\n}\n\nmain();\n?>",
    "entry_point": "countCoinExchangeWays",
    "signature": "function countCoinExchangeWays($billValue)",
    "docstring": {
      "en": "Calculates the number of different ways to exchange a paper bill into coins.\nGiven a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\nThe function determines how many distinct combinations of these coins can sum up to the value of the bill.\nExample: For a bill of value 4, there are 5 ways:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: An integer representing the bill value.\nOutput: Returns the number of different ways to exchange the bill into coins.",
      "sq": "Llogarit numrin e mënyrave të ndryshme për të shkëmbyer një kartëmonedhë në monedha.  \nDuke pasur një kartëmonedhë me vlerë N (1 <= N <= 10), ka dy lloje monedhash të disponueshme: 1 dhe 2 njësi.  \nFunksioni përcakton sa kombinime të ndryshme të këtyre monedhave mund të arrijnë vlerën e kartëmonedhës.  \nShembull: Për një kartëmonedhë me vlerë 4, ka 5 mënyra:  \n4 = 1 + 1 + 1 + 1  \n4 = 2 + 1 + 1  \n4 = 1 + 2 + 1  \n4 = 1 + 1 + 2  \n4 = 2 + 2  \nInput: Një numër i plotë që përfaqëson vlerën e kartëmonedhës.  \nOutput: Kthen numrin e mënyrave të ndryshme për të shkëmbyer kartëmonedhën në monedha.",
      "hy": "Հաշվում է թղթադրամը մետաղադրամներով փոխանակելու տարբեր եղանակների քանակը։\nՏրված է N արժեքով (1 <= N <= 10) թղթադրամ, առկա են երկու տեսակի մետաղադրամներ՝ 1 և 2 միավոր։\nՖունկցիան որոշում է, թե մետաղադրամների քանի տարբեր կոմբինացիաներ կարող են գումարվել թղթադրամի արժեքին։\nՕրինակ՝ 4 արժեքով թղթադրամի համար կա 5 եղանակ.\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nՄուտք: Թղթադրամի արժեքը ներկայացնող ամբողջ թիվ։\nԵլք: Վերադարձնում է թղթադրամը մետաղադրամներով փոխանակելու տարբեր եղանակների քանակը։",
      "bn": "কাগজের নোটকে কয়েনে বিনিময় করার বিভিন্ন পদ্ধতির সংখ্যা গণনা করে। \nN মানের একটি কাগজের নোট দেওয়া হয়েছে (1 <= N <= 10), এখানে দুটি প্রকারের কয়েন পাওয়া যায়: 1 এবং 2 ইউনিট। \nফাংশনটি নির্ধারণ করে যে এই কয়েনগুলির কতগুলি ভিন্ন সংমিশ্রণ নোটের মানের সমান হতে পারে। \nউদাহরণ: 4 মানের একটি নোটের জন্য, 5টি পদ্ধতি রয়েছে:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nইনপুট: নোটের মানকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\nআউটপুট: নোটকে কয়েনে বিনিময় করার বিভিন্ন পদ্ধতির সংখ্যা প্রদান করে।",
      "bg": "Изчислява броя на различните начини за размяна на хартиена банкнота в монети.  \nДадена е хартиена банкнота със стойност N (1 <= N <= 10), като има два вида монети на разположение: 1 и 2 единици.  \nФункцията определя колко различни комбинации от тези монети могат да се сумират до стойността на банкнотата.  \nПример: За банкнота със стойност 4, има 5 начина:  \n4 = 1 + 1 + 1 + 1  \n4 = 2 + 1 + 1  \n4 = 1 + 2 + 1  \n4 = 1 + 1 + 2  \n4 = 2 + 2  \n\nВход: Цяло число, представляващо стойността на банкнотата.  \nИзход: Връща броя на различните начини за размяна на банкнотата в монети.",
      "zh": "计算将纸币兑换成硬币的不同方式数量。\n给定面值为 N 的纸币（1 <= N <= 10），有两种可用的硬币：1 和 2 单位。\n该函数确定这些硬币可以组合成纸币面值的不同组合数量。\n示例：对于面值为 4 的纸币，有 5 种方式：\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\n输入：一个表示纸币面值的整数。\n输出：返回将纸币兑换成硬币的不同方式数量。",
      "fr": "Calcule le nombre de façons différentes d'échanger un billet en papier en pièces de monnaie.\nÉtant donné un billet en papier de valeur N (1 <= N <= 10), il existe deux types de pièces disponibles : 1 et 2 unités.\nLa fonction détermine combien de combinaisons distinctes de ces pièces peuvent totaliser la valeur du billet.\nExemple : Pour un billet de valeur 4, il y a 5 façons :\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEntrée : Un entier représentant la valeur du billet.\nSortie : Retourne le nombre de façons différentes d'échanger le billet en pièces de monnaie.",
      "de": "Berechnet die Anzahl der verschiedenen Möglichkeiten, einen Geldschein in Münzen zu wechseln.\nGegeben ist ein Geldschein mit dem Wert N (1 <= N <= 10), es stehen zwei Arten von Münzen zur Verfügung: 1 und 2 Einheiten.\nDie Funktion bestimmt, wie viele verschiedene Kombinationen dieser Münzen den Wert des Scheins ergeben können.\nBeispiel: Für einen Schein mit dem Wert 4 gibt es 5 Möglichkeiten:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEingabe: Eine ganze Zahl, die den Wert des Scheins darstellt.\nAusgabe: Gibt die Anzahl der verschiedenen Möglichkeiten zurück, den Schein in Münzen zu wechseln.",
      "ha": "Yana ƙididdige yawan hanyoyin daban-daban don musanya takardar kuɗi zuwa tsabar kuɗi.\nAn ba da takardar kuɗi mai darajar N (1 <= N <= 10), akwai nau'ikan tsabar kuɗi guda biyu da ake da su: 1 da 2 raka'a.\nAikin yana ƙayyade yawan haɗakar tsabar kuɗi daban-daban waɗanda za su iya kaiwa ga darajar takardar kuɗin.\nMisali: Don takardar kuɗi mai darajar 4, akwai hanyoyi 5:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nShigarwa: Lamba ɗaya da ke wakiltar darajar takardar kuɗin.\nFitarwa: Yana mayar da yawan hanyoyin daban-daban don musanya takardar kuɗin zuwa tsabar kuɗi.",
      "hi": "विभिन्न तरीकों की संख्या की गणना करता है जिससे एक कागजी बिल को सिक्कों में बदला जा सकता है। दिए गए कागजी बिल का मान N (1 <= N <= 10) है, और दो प्रकार के सिक्के उपलब्ध हैं: 1 और 2 इकाइयाँ। यह फ़ंक्शन निर्धारित करता है कि इन सिक्कों के कितने भिन्न संयोजन बिल के मान के बराबर हो सकते हैं। उदाहरण: मान 4 के बिल के लिए, 5 तरीके हैं:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nइनपुट: बिल के मान का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या लौटाता है।",
      "hu": "Kiszámítja, hányféleképpen lehet egy papírpénzt érmékre váltani.\nAdott egy N értékű papírpénz (1 <= N <= 10), kétféle érme áll rendelkezésre: 1 és 2 egység.\nA függvény meghatározza, hány különböző kombinációja van ezeknek az érméknek, amelyek összege megegyezik a papírpénz értékével.\nPélda: Egy 4 értékű papírpénz esetén 5 mód van:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nBemenet: Egy egész szám, amely a papírpénz értékét jelöli.\nKimenet: Visszaadja, hányféleképpen lehet a papírpénzt érmékre váltani."
    },
    "docstring_bertscore": {
      "sq": "0.9333898976110934",
      "hy": "0.954692410085942",
      "bn": "0.9294955503605233",
      "bg": "0.9628487694223776",
      "zh": "0.8961540504911502",
      "fr": "0.9812479016176393",
      "de": "0.929419673554968",
      "ha": "0.9025521336946649",
      "hi": "0.949722082061306",
      "hu": "0.913797394086574"
    }
  },
  {
    "task_id": "PHP/8",
    "prompt": {
      "en": "<?php\n\n/**\n * Compares two playing cards to determine which one is higher based on a given trump suit.\n * In this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\n * The trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\n * The rules for comparison are as follows:\n * - If neither card is of the trump suit, the card with the higher rank wins.\n * - If both cards are of the trump suit, the card with the higher rank wins.\n * - If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n * - If both cards have the same rank, the result is a draw.\n * Input: The trump suit and two card strings.\n * Output: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "sq": "<?php\n\n/**\n * Krahason dy letra lojë për të përcaktuar se cila është më e lartë bazuar në një ngjyrë trumfi të dhënë.\n * Në këtë lojë, çdo letër përfaqësohet nga ngjyra dhe rangu i saj (p.sh., '8D', 'QS').\n * Ngjyra e trumfit është një nga katër ngjyrat: Shpata (S), Zemrat (H), Diamantet (D), ose Katroret (C).\n * Rregullat për krahasimin janë si më poshtë:\n * - Nëse asnjëra letër nuk është e ngjyrës së trumfit, letra me rangun më të lartë fiton.\n * - Nëse të dyja letrat janë të ngjyrës së trumfit, letra me rangun më të lartë fiton.\n * - Nëse një letër është e ngjyrës së trumfit dhe tjetra nuk është, letra e ngjyrës së trumfit fiton pavarësisht nga rangu.\n * - Nëse të dyja letrat kanë të njëjtin rang, rezultati është barazim.\n * Hyrja: Ngjyra e trumfit dhe dy vargje letrash.\n * Dalja: Kthen 1 nëse letra e parë fiton, -1 nëse letra e dytë fiton, dhe 0 për barazim.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hy": "<?php\n\n/**\n * Համեմատում է երկու խաղաթուղթ՝ որոշելու համար, թե դրանցից որը բարձր է տրված թղթախաղի կոզրի հիման վրա:\n * Այս խաղում յուրաքանչյուր քարտ ներկայացված է իր կոստյումով և վարկանիշով (օրինակ՝ '8D', 'QS'):\n * Կոզրը չորս կոստյումներից մեկն է՝ Սպադ (S), Սիրտ (H), Ադամանդ (D) կամ Խաչ (C):\n * Համեմատության կանոնները հետևյալն են.\n * - Եթե ոչ մի քարտ կոզրի կոստյումից չէ, ապա հաղթում է ավելի բարձր վարկանիշ ունեցող քարտը:\n * - Եթե երկու քարտերն էլ կոզրի կոստյումից են, ապա հաղթում է ավելի բարձր վարկանիշ ունեցող քարտը:\n * - Եթե մեկ քարտը կոզրի կոստյումից է, իսկ մյուսը՝ ոչ, ապա կոզրի կոստյումի քարտը հաղթում է անկախ վարկանիշից:\n * - Եթե երկու քարտերն էլ ունեն նույն վարկանիշը, ապա արդյունքը ոչ-ոքի է:\n * Մուտք: Կոզրի կոստյումը և երկու քարտերի տողերը:\n * Ելք: Վերադարձնում է 1, եթե առաջին քարտը հաղթում է, -1, եթե երկրորդ քարտը հաղթում է, և 0՝ ոչ-ոքիի դեպքում:\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "bn": "<?php\n\n/**\n * দুটি তাসের কার্ড তুলনা করে কোনটি উচ্চতর তা নির্ধারণ করে একটি প্রদত্ত ট্রাম্প স্যুটের ভিত্তিতে।\n * এই খেলায়, প্রতিটি কার্ড তার স্যুট এবং র‍্যাঙ্ক দ্বারা উপস্থাপিত হয় (যেমন, '8D', 'QS')।\n * ট্রাম্প স্যুট চারটি স্যুটের একটি: স্পেডস (S), হার্টস (H), ডায়মন্ডস (D), বা ক্লাবস (C)।\n * তুলনার নিয়মগুলি নিম্নরূপ:\n * - যদি কোন কার্ডই ট্রাম্প স্যুটের না হয়, তবে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n * - যদি উভয় কার্ডই ট্রাম্প স্যুটের হয়, তবে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n * - যদি একটি কার্ড ট্রাম্প স্যুটের হয় এবং অন্যটি না হয়, তবে ট্রাম্প স্যুটের কার্ডটি র‍্যাঙ্ক নির্বিশেষে জেতে।\n * - যদি উভয় কার্ডের র‍্যাঙ্ক একই হয়, তবে ফলাফল ড্র হয়।\n * ইনপুট: ট্রাম্প স্যুট এবং দুটি কার্ড স্ট্রিং।\n * আউটপুট: প্রথম কার্ডটি জিতলে 1 ফেরত দেয়, দ্বিতীয় কার্ডটি জিতলে -1 ফেরত দেয়, এবং ড্র হলে 0 ফেরত দেয়।\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "bg": "<?php\n\n/**\n * Сравнява две игрални карти, за да определи коя е по-висока въз основа на дадена козова боя.\n * В тази игра всяка карта е представена чрез нейната боя и ранг (например '8D', 'QS').\n * Козовата боя е една от четирите бои: Пика (S), Купа (H), Каро (D) или Спатия (C).\n * Правилата за сравнение са както следва:\n * - Ако нито една от картите не е от козовата боя, картата с по-висок ранг печели.\n * - Ако и двете карти са от козовата боя, картата с по-висок ранг печели.\n * - Ако едната карта е от козовата боя, а другата не е, картата от козовата боя печели независимо от ранга.\n * - Ако и двете карти имат еднакъв ранг, резултатът е равенство.\n * Вход: Козовата боя и два стринга, представляващи карти.\n * Изход: Връща 1, ако първата карта печели, -1 ако втората карта печели, и 0 за равенство.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "zh": "<?php\n\n/**\n * 比较两张扑克牌以确定哪一张更高，基于给定的王牌花色。\n * 在这个游戏中，每张牌由其花色和点数表示（例如，'8D', 'QS'）。\n * 王牌花色是四种花色之一：黑桃 (S)、红心 (H)、方块 (D) 或梅花 (C)。\n * 比较规则如下：\n * - 如果两张牌都不是王牌花色，则点数较高的牌获胜。\n * - 如果两张牌都是王牌花色，则点数较高的牌获胜。\n * - 如果一张牌是王牌花色而另一张不是，则无论点数如何，王牌花色的牌获胜。\n * - 如果两张牌点数相同，则结果为平局。\n * 输入：王牌花色和两个牌字符串。\n * 输出：如果第一张牌获胜，返回 1；如果第二张牌获胜，返回 -1；平局返回 0。\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "fr": "<?php\n\n/**\n * Compare deux cartes à jouer pour déterminer laquelle est la plus haute en fonction d'un atout donné.\n * Dans ce jeu, chaque carte est représentée par sa couleur et son rang (par exemple, '8D', 'QS').\n * L'atout est l'une des quatre couleurs : Piques (S), Cœurs (H), Carreaux (D) ou Trèfles (C).\n * Les règles de comparaison sont les suivantes :\n * - Si aucune des cartes n'est de la couleur de l'atout, la carte avec le rang le plus élevé gagne.\n * - Si les deux cartes sont de la couleur de l'atout, la carte avec le rang le plus élevé gagne.\n * - Si une carte est de la couleur de l'atout et l'autre ne l'est pas, la carte de l'atout gagne quel que soit le rang.\n * - Si les deux cartes ont le même rang, le résultat est une égalité.\n * Entrée : La couleur de l'atout et deux chaînes de caractères représentant les cartes.\n * Sortie : Retourne 1 si la première carte gagne, -1 si la seconde carte gagne, et 0 pour une égalité.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "de": "<?php\n\n/**\n * Vergleicht zwei Spielkarten, um festzustellen, welche höher ist, basierend auf einer gegebenen Trumpffarbe.\n * In diesem Spiel wird jede Karte durch ihre Farbe und ihren Rang dargestellt (z.B. '8D', 'QS').\n * Die Trumpffarbe ist eine der vier Farben: Pik (S), Herz (H), Karo (D) oder Kreuz (C).\n * Die Regeln für den Vergleich sind wie folgt:\n * - Wenn keine der Karten die Trumpffarbe hat, gewinnt die Karte mit dem höheren Rang.\n * - Wenn beide Karten die Trumpffarbe haben, gewinnt die Karte mit dem höheren Rang.\n * - Wenn eine Karte die Trumpffarbe hat und die andere nicht, gewinnt die Karte mit der Trumpffarbe unabhängig vom Rang.\n * - Wenn beide Karten den gleichen Rang haben, ist das Ergebnis ein Unentschieden.\n * Eingabe: Die Trumpffarbe und zwei Kartenstrings.\n * Ausgabe: Gibt 1 zurück, wenn die erste Karte gewinnt, -1, wenn die zweite Karte gewinnt, und 0 für ein Unentschieden.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "ha": "<?php\n\n/**\n * Kwatanta katunan wasa guda biyu don tantance wanda ya fi girma bisa ga wata alama ta trump da aka bayar.\n * A cikin wannan wasan, kowane kati yana wakilta da alamar sa da matsayi (misali, '8D', 'QS').\n * Alamar trump ɗin tana ɗaya daga cikin alamomi huɗu: Spades (S), Hearts (H), Diamonds (D), ko Clubs (C).\n * Dokokin kwatantawa sune kamar haka:\n * - Idan babu ɗayan kati da yake da alamar trump, katin da ke da matsayi mafi girma ya ci.\n * - Idan duk katunan suna da alamar trump, katin da ke da matsayi mafi girma ya ci.\n * - Idan ɗaya daga cikin katunan yana da alamar trump ɗin kuma ɗayan ba haka ba, katin da ke da alamar trump ɗin ya ci duk da matsayi.\n * - Idan duk katunan suna da matsayi ɗaya, sakamakon yana zama kunnen doki.\n * Shigarwa: Alamar trump ɗin da katunan guda biyu.\n * Fitowa: Yana mayar da 1 idan katin farko ya ci, -1 idan katin na biyu ya ci, kuma 0 don kunnen doki.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hi": "<?php\n\n/**\n * दो ताश के पत्तों की तुलना करने के लिए, यह निर्धारित करने के लिए कि कौन सा पत्ता उच्च है, एक दिए गए ट्रम्प सूट के आधार पर।\n * इस खेल में, प्रत्येक पत्ता उसके सूट और रैंक द्वारा दर्शाया जाता है (जैसे, '8D', 'QS')।\n * ट्रम्प सूट चार सूट में से एक है: स्पेड्स (S), हार्ट्स (H), डायमंड्स (D), या क्लब्स (C)।\n * तुलना के नियम इस प्रकार हैं:\n * - यदि कोई भी पत्ता ट्रम्प सूट का नहीं है, तो उच्च रैंक वाला पत्ता जीतता है।\n * - यदि दोनों पत्ते ट्रम्प सूट के हैं, तो उच्च रैंक वाला पत्ता जीतता है।\n * - यदि एक पत्ता ट्रम्प सूट का है और दूसरा नहीं है, तो ट्रम्प सूट वाला पत्ता रैंक की परवाह किए बिना जीतता है।\n * - यदि दोनों पत्तों की रैंक समान है, तो परिणाम ड्रॉ होता है।\n * इनपुट: ट्रम्प सूट और दो पत्तों की स्ट्रिंग्स।\n * आउटपुट: यदि पहला पत्ता जीतता है तो 1 लौटाता है, यदि दूसरा पत्ता जीतता है तो -1 लौटाता है, और ड्रॉ के लिए 0 लौटाता है।\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hu": "<?php\n\n/**\n * Két játékkártyát hasonlít össze annak meghatározására, hogy melyik a magasabb egy adott aduszín alapján.\n * Ebben a játékban minden kártyát a színe és értéke képvisel (pl. '8D', 'QS').\n * Az aduszín a négy szín egyike: Pikk (S), Kőr (H), Káró (D) vagy Treff (C).\n * Az összehasonlítás szabályai a következők:\n * - Ha egyik kártya sem aduszínű, a magasabb értékű kártya nyer.\n * - Ha mindkét kártya aduszínű, a magasabb értékű kártya nyer.\n * - Ha az egyik kártya aduszínű, a másik pedig nem, az aduszínű kártya nyer az értéktől függetlenül.\n * - Ha mindkét kártya értéke azonos, az eredmény döntetlen.\n * Bemenet: Az aduszín és két kártya string.\n * Kimenet: 1-et ad vissza, ha az első kártya nyer, -1-et, ha a második kártya nyer, és 0-t döntetlen esetén.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) "
    },
    "prompt_bertscore": {
      "sq": "0.9875949368132281",
      "hy": "0.9721470548193828",
      "bn": "0.9887535478258046",
      "bg": "0.9856422015372741",
      "zh": "0.9778836988540515",
      "fr": "0.9741083312017212",
      "de": "0.9767910331279784",
      "ha": "0.9647822375513713",
      "hi": "0.9829384447906272",
      "hu": "0.9741291873917299"
    },
    "canonical_solution": "{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}",
    "instruction": {
      "en": "Write a PHP function `function compareCards($trumpSuit, $card1, $card2)` to solve the following problem:\nCompares two playing cards to determine which one is higher based on a given trump suit.\nIn this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\nThe trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\nThe rules for comparison are as follows:\n- If neither card is of the trump suit, the card with the higher rank wins.\n- If both cards are of the trump suit, the card with the higher rank wins.\n- If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n- If both cards have the same rank, the result is a draw.\nInput: The trump suit and two card strings.\nOutput: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.",
      "sq": "Shkruani një funksion PHP `function compareCards($trumpSuit, $card1, $card2)` për të zgjidhur problemin e mëposhtëm:\nKrahasoni dy letra loje për të përcaktuar se cila është më e lartë bazuar në një ngjyrë të caktuar trumfi.\nNë këtë lojë, secila letër përfaqësohet nga ngjyra dhe rangu i saj (p.sh., '8D', 'QS').\nNgjyra e trumfit është një nga katër ngjyrat: Shpata (S), Zemra (H), Diamanti (D), ose Dërrasa (C).\nRregullat për krahasim janë si më poshtë:\n- Nëse asnjëra nga letrat nuk është e ngjyrës së trumfit, letra me rang më të lartë fiton.\n- Nëse të dyja letrat janë të ngjyrës së trumfit, letra me rang më të lartë fiton.\n- Nëse njëra letër është e ngjyrës së trumfit dhe tjetra nuk është, letra e ngjyrës së trumfit fiton pavarësisht nga rangu.\n- Nëse të dyja letrat kanë të njëjtin rang, rezultati është barazim.\nHyrja: Ngjyra e trumfit dhe dy vargje letrash.\nDalja: Kthen 1 nëse letra e parë fiton, -1 nëse letra e dytë fiton, dhe 0 për barazim.",
      "hy": "Գրեք PHP ֆունկցիա `function compareCards($trumpSuit, $card1, $card2)` հետևյալ խնդիրը լուծելու համար:\nՀամեմատում է երկու խաղաթղթեր՝ որոշելու համար, թե որ մեկն է ավելի բարձր՝ հիմնված տրված տրյուֆի վրա:\nԱյս խաղում յուրաքանչյուր քարտ ներկայացված է իր սյուտով և վարկանիշով (օրինակ՝ '8D', 'QS'):\nՏրյուֆը չորս սյուտներից մեկն է՝ Սպադ (S), Սիրտ (H), Ակն (D) կամ Խաչ (C):\nՀամեմատության կանոններն են հետևյալը.\n- Եթե ոչ մի քարտ տրյուֆի չէ, ապա ավելի բարձր վարկանիշ ունեցող քարտը հաղթում է:\n- Եթե երկու քարտերն էլ տրյուֆի են, ապա ավելի բարձր վարկանիշ ունեցող քարտը հաղթում է:\n- Եթե մեկ քարտը տրյուֆի է, իսկ մյուսը՝ ոչ, ապա տրյուֆի քարտը հաղթում է անկախ վարկանիշից:\n- Եթե երկու քարտերն էլ ունեն նույն վարկանիշը, ապա արդյունքը ոչ-ոքի է:\nՄուտք: Տրյուֆի սյուտը և երկու քարտերի տողեր:\nԵլք: Վերադարձնում է 1, եթե առաջին քարտը հաղթում է, -1, եթե երկրորդ քարտը հաղթում է, և 0՝ ոչ-ոքիի համար:",
      "bn": "PHP ফাংশন `function compareCards($trumpSuit, $card1, $card2)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nদুটি তাসের তুলনা করে কোনটি উচ্চতর তা নির্ধারণ করুন একটি নির্দিষ্ট ট্রাম্প স্যুটের ভিত্তিতে।\nএই খেলায়, প্রতিটি তাস তার স্যুট এবং র‍্যাঙ্ক দ্বারা উপস্থাপিত হয় (যেমন, '8D', 'QS')।\nট্রাম্প স্যুট চারটি স্যুটের মধ্যে একটি: স্পেডস (S), হার্টস (H), ডায়মন্ডস (D), বা ক্লাবস (C)।\nতুলনার নিয়মগুলি নিম্নরূপ:\n- যদি কোনো তাস ট্রাম্প স্যুটের না হয়, তাহলে উচ্চতর র‍্যাঙ্কের তাস জেতে।\n- যদি উভয় তাস ট্রাম্প স্যুটের হয়, তাহলে উচ্চতর র‍্যাঙ্কের তাস জেতে।\n- যদি একটি তাস ট্রাম্প স্যুটের হয় এবং অন্যটি না হয়, তাহলে ট্রাম্প স্যুটের তাসটি র‍্যাঙ্ক নির্বিশেষে জেতে।\n- যদি উভয় তাসের র‍্যাঙ্ক একই হয়, তাহলে ফলাফল ড্র হয়।\nইনপুট: ট্রাম্প স্যুট এবং দুটি তাসের স্ট্রিং।\nআউটপুট: প্রথম তাস জিতলে 1 রিটার্ন করে, দ্বিতীয় তাস জিতলে -1 রিটার্ন করে, এবং ড্র হলে 0 রিটার্ন করে।",
      "bg": "Напишете PHP функция `function compareCards($trumpSuit, $card1, $card2)` за решаване на следния проблем:\nСравнява две игрални карти, за да определи коя е по-висока въз основа на дадена козова боя.\nВ тази игра всяка карта е представена чрез своята боя и ранг (например, '8D', 'QS').\nКозовата боя е една от четирите бои: Пика (S), Купа (H), Каро (D) или Спатия (C).\nПравилата за сравнение са следните:\n- Ако нито една от картите не е от козовата боя, картата с по-висок ранг печели.\n- Ако и двете карти са от козовата боя, картата с по-висок ранг печели.\n- Ако едната карта е от козовата боя, а другата не е, картата от козовата боя печели независимо от ранга.\n- Ако и двете карти имат еднакъв ранг, резултатът е равенство.\nВход: Козовата боя и два стринга на карти.\nИзход: Връща 1, ако първата карта печели, -1, ако втората карта печели, и 0 за равенство.",
      "zh": "编写一个 PHP 函数 `function compareCards($trumpSuit, $card1, $card2)` 来解决以下问题：\n比较两张扑克牌以确定哪一张更高，基于给定的王牌花色。\n在这个游戏中，每张牌由其花色和点数表示（例如，'8D', 'QS'）。\n王牌花色是四种花色之一：黑桃 (S)、红心 (H)、方块 (D) 或梅花 (C)。\n比较规则如下：\n- 如果两张牌都不是王牌花色，则点数较高的牌获胜。\n- 如果两张牌都是王牌花色，则点数较高的牌获胜。\n- 如果一张牌是王牌花色而另一张不是，则无论点数如何，王牌花色的牌获胜。\n- 如果两张牌点数相同，则结果为平局。\n输入：王牌花色和两个牌字符串。\n输出：如果第一张牌获胜返回 1，如果第二张牌获胜返回 -1，平局返回 0。",
      "fr": "Écrire une fonction PHP `function compareCards($trumpSuit, $card1, $card2)` pour résoudre le problème suivant :\nCompare deux cartes à jouer pour déterminer laquelle est la plus haute en fonction d'un atout donné.\nDans ce jeu, chaque carte est représentée par sa couleur et son rang (par exemple, '8D', 'QS').\nL'atout est l'une des quatre couleurs : Piques (S), Cœurs (H), Carreaux (D) ou Trèfles (C).\nLes règles de comparaison sont les suivantes :\n- Si aucune des cartes n'est de l'atout, la carte avec le rang le plus élevé gagne.\n- Si les deux cartes sont de l'atout, la carte avec le rang le plus élevé gagne.\n- Si une carte est de l'atout et l'autre ne l'est pas, la carte d'atout gagne quel que soit le rang.\n- Si les deux cartes ont le même rang, le résultat est une égalité.\nEntrée : L'atout et deux chaînes de caractères représentant les cartes.\nSortie : Retourne 1 si la première carte gagne, -1 si la deuxième carte gagne, et 0 pour une égalité.",
      "de": "Schreiben Sie eine PHP-Funktion `function compareCards($trumpSuit, $card1, $card2)`, um das folgende Problem zu lösen:\nVergleicht zwei Spielkarten, um festzustellen, welche höher ist, basierend auf einer gegebenen Trumpffarbe.\nIn diesem Spiel wird jede Karte durch ihre Farbe und ihren Rang dargestellt (z.B. '8D', 'QS').\nDie Trumpffarbe ist eine der vier Farben: Pik (S), Herz (H), Karo (D) oder Kreuz (C).\nDie Regeln für den Vergleich sind wie folgt:\n- Wenn keine der Karten die Trumpffarbe hat, gewinnt die Karte mit dem höheren Rang.\n- Wenn beide Karten die Trumpffarbe haben, gewinnt die Karte mit dem höheren Rang.\n- Wenn eine Karte die Trumpffarbe hat und die andere nicht, gewinnt die Karte mit der Trumpffarbe unabhängig vom Rang.\n- Wenn beide Karten den gleichen Rang haben, ist das Ergebnis ein Unentschieden.\nEingabe: Die Trumpffarbe und zwei Kartenstrings.\nAusgabe: Gibt 1 zurück, wenn die erste Karte gewinnt, -1, wenn die zweite Karte gewinnt, und 0 für ein Unentschieden.",
      "ha": "Rubuta aikin PHP `function compareCards($trumpSuit, $card1, $card2)` don warware matsalar mai zuwa:\nYa kwatanta kati biyu na wasa don tantance wanda yake da daraja mafi girma bisa ga wata takamaiman suit na trump.\nA cikin wannan wasa, kowane kati yana wakilta ta suit da darajarsa (misali, '8D', 'QS').\nSuit na trump yana daya daga cikin suits hudu: Spades (S), Hearts (H), Diamonds (D), ko Clubs (C).\nDokokin kwatanta sune kamar haka:\n- Idan babu wani kati daga suit na trump, katin da ke da daraja mafi girma ya ci.\n- Idan duk katin suna daga suit na trump, katin da ke da daraja mafi girma ya ci.\n- Idan kati daya yana daga suit na trump kuma dayan ba haka ba, katin suit na trump ya ci duk da darajar.\n- Idan duk katin suna da daraja daya, sakamakon shi ne draw.\nShigarwa: Suit na trump da igiyoyin katin guda biyu.\nFitarwa: Yana mayar da 1 idan katin farko ya ci, -1 idan katin na biyu ya ci, da 0 don draw.",
      "hi": "PHP फ़ंक्शन `function compareCards($trumpSuit, $card1, $card2)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदो ताश के पत्तों की तुलना करता है ताकि यह निर्धारित किया जा सके कि दिए गए ट्रम्प सूट के आधार पर कौन सा पत्ता उच्च है।\nइस खेल में, प्रत्येक पत्ता उसके सूट और रैंक द्वारा दर्शाया जाता है (उदाहरण के लिए, '8D', 'QS')।\nट्रम्प सूट चार सूट में से एक है: स्पेड्स (S), हार्ट्स (H), डायमंड्स (D), या क्लब्स (C)।\nतुलना के नियम इस प्रकार हैं:\n- यदि दोनों में से कोई भी पत्ता ट्रम्प सूट का नहीं है, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि दोनों पत्ते ट्रम्प सूट के हैं, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि एक पत्ता ट्रम्प सूट का है और दूसरा नहीं, तो ट्रम्प सूट वाला पत्ता रैंक की परवाह किए बिना जीतता है।\n- यदि दोनों पत्तों की रैंक समान है, तो परिणाम ड्रॉ होता है।\nइनपुट: ट्रम्प सूट और दो पत्तों की स्ट्रिंग्स।\nआउटपुट: यदि पहला पत्ता जीतता है तो 1 लौटाता है, यदि दूसरा पत्ता जीतता है तो -1 लौटाता है, और ड्रॉ के लिए 0 लौटाता है।",
      "hu": "Írj egy PHP függvényt `function compareCards($trumpSuit, $card1, $card2)` a következő probléma megoldására:\nÖsszehasonlít két játékkártyát annak meghatározására, hogy melyik a magasabb egy adott aduszín alapján.\nEbben a játékban minden kártyát a színe és a rangja képvisel (pl. '8D', 'QS').\nAz aduszín a négy szín egyike: Pikk (S), Kőr (H), Káró (D) vagy Treff (C).\nAz összehasonlítás szabályai a következők:\n- Ha egyik kártya sem az aduszínhez tartozik, a magasabb rangú kártya nyer.\n- Ha mindkét kártya az aduszínhez tartozik, a magasabb rangú kártya nyer.\n- Ha az egyik kártya az aduszínhez tartozik, a másik pedig nem, az aduszínű kártya nyer a rangtól függetlenül.\n- Ha mindkét kártya azonos rangú, az eredmény döntetlen.\nBemenet: Az aduszín és két kártya string.\nKimenet: Visszaad 1-et, ha az első kártya nyer, -1-et, ha a második kártya nyer, és 0-t döntetlen esetén."
    },
    "instruction_bertscore": {
      "sq": "0.9870061963638407",
      "hy": "0.9612992538199244",
      "bn": "0.9717706502473217",
      "bg": "0.9890431509213535",
      "zh": "0.9842269600724005",
      "fr": "0.9598456766915111",
      "de": "0.9822124507479447",
      "ha": "0.9749535034730248",
      "hi": "0.9820738067419824",
      "hu": "0.9776119724927956"
    },
    "level": "hard",
    "test": "function main(){\n    assert(compareCards('S', '8D', '3S') === -1); \n    assert(compareCards('S', '8D', '9S') === -1); // Non-trump vs trump\n    assert(compareCards('H', '8H', '7H') === 1);  // Both trump, first higher\n    assert(compareCards('D', '9C', '9S') === 0);  // Same rank, non-trump\n    assert(compareCards('C', 'QH', 'JS') === 1);  // Neither trump, first higher\n    assert(compareCards('D', 'KD', 'AD') === -1); // Both trump, second higher\n\n}\nmain();\n?>",
    "entry_point": "compareCards",
    "signature": "function compareCards($trumpSuit, $card1, $card2)",
    "docstring": {
      "en": "Compares two playing cards to determine which one is higher based on a given trump suit.\nIn this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\nThe trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\nThe rules for comparison are as follows:\n- If neither card is of the trump suit, the card with the higher rank wins.\n- If both cards are of the trump suit, the card with the higher rank wins.\n- If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n- If both cards have the same rank, the result is a draw.\nInput: The trump suit and two card strings.\nOutput: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.",
      "sq": "Krahason dy letra loje për të përcaktuar se cila është më e lartë bazuar në një ngjyrë të caktuar trumfi. Në këtë lojë, secila letër përfaqësohet nga ngjyra dhe rangu i saj (p.sh., '8D', 'QS'). Ngjyra e trumfit është një nga katër ngjyrat: Shpata (S), Zemra (H), Karo (D) ose Trefla (C). Rregullat për krahasimin janë si më poshtë: \n- Nëse asnjëra letër nuk është e ngjyrës së trumfit, letra me rangun më të lartë fiton. \n- Nëse të dyja letrat janë të ngjyrës së trumfit, letra me rangun më të lartë fiton. \n- Nëse njëra letër është e ngjyrës së trumfit dhe tjetra nuk është, letra e ngjyrës së trumfit fiton pavarësisht nga rangu. \n- Nëse të dyja letrat kanë të njëjtin rang, rezultati është barazim. \nInput: Ngjyra e trumfit dhe dy vargje letrash. \nOutput: Kthen 1 nëse letra e parë fiton, -1 nëse letra e dytë fiton, dhe 0 për barazim.",
      "hy": "Համեմատում է երկու խաղաթղթեր՝ որոշելու, թե որն է ավելի բարձր՝ հիմնված տրված տրյուֆելային կոստյումի վրա:\nԱյս խաղում յուրաքանչյուր քարտ ներկայացվում է իր կոստյումով և աստիճանով (օրինակ՝ '8D', 'QS'):\nՏրյուֆելային կոստյումը չորս կոստյումներից մեկն է՝ Սպադ (S), Սրտեր (H), Ակն (D) կամ Խաչ (C):\nՀամեմատության կանոններն են հետևյալը.\n- Եթե ոչ մի քարտ տրյուֆելային կոստյումից չէ, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է:\n- Եթե երկու քարտերն էլ տրյուֆելային կոստյումից են, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է:\n- Եթե մեկ քարտը տրյուֆելային կոստյումից է, իսկ մյուսը՝ ոչ, ապա տրյուֆելային կոստյումի քարտը հաղթում է անկախ աստիճանից:\n- Եթե երկու քարտերն էլ ունեն նույն աստիճանը, ապա արդյունքը ոչ-ոքի է:\nՄուտք: Տրյուֆելային կոստյումը և երկու քարտի տողեր:\nԵլք: Վերադարձնում է 1, եթե առաջին քարտը հաղթում է, -1, եթե երկրորդ քարտը հաղթում է, և 0՝ ոչ-ոքիի դեպքում:",
      "bn": "দুটি তাসের কার্ড তুলনা করে নির্ধারণ করা হয় কোনটি একটি নির্দিষ্ট ট্রাম্প স্যুটের ভিত্তিতে উচ্চতর।\nএই খেলায়, প্রতিটি কার্ড তার স্যুট এবং র‍্যাঙ্ক দ্বারা উপস্থাপিত হয় (যেমন, '8D', 'QS')।\nট্রাম্প স্যুট চারটি স্যুটের মধ্যে একটি: স্পেডস (S), হার্টস (H), ডায়মন্ডস (D), বা ক্লাবস (C)।\nতুলনার নিয়মগুলি নিম্নরূপ:\n- যদি কোন কার্ডই ট্রাম্প স্যুটের না হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n- যদি উভয় কার্ডই ট্রাম্প স্যুটের হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n- যদি একটি কার্ড ট্রাম্প স্যুটের হয় এবং অন্যটি না হয়, তাহলে ট্রাম্প স্যুটের কার্ডটি র‍্যাঙ্ক নির্বিশেষে জেতে।\n- যদি উভয় কার্ডের র‍্যাঙ্ক একই হয়, তাহলে ফলাফল ড্র হয়।\nইনপুট: ট্রাম্প স্যুট এবং দুটি কার্ড স্ট্রিং।\nআউটপুট: 1 ফেরত দেয় যদি প্রথম কার্ডটি জেতে, -1 যদি দ্বিতীয় কার্ডটি জেতে, এবং 0 ড্র এর জন্য।",
      "bg": "Сравнява две игрални карти, за да определи коя е по-висока въз основа на дадена козова боя. В тази игра всяка карта е представена чрез нейната боя и ранг (например, '8D', 'QS'). Козовата боя е една от четирите бои: Пики (S), Купи (H), Каро (D) или Спатия (C). Правилата за сравнение са следните: - Ако нито една от картите не е от козовата боя, картата с по-висок ранг печели. - Ако и двете карти са от козовата боя, картата с по-висок ранг печели. - Ако едната карта е от козовата боя, а другата не е, картата от козовата боя печели независимо от ранга. - Ако и двете карти имат еднакъв ранг, резултатът е равен. Вход: Козовата боя и два стринга на карти. Изход: Връща 1, ако първата карта печели, -1, ако втората карта печели, и 0 за равенство.",
      "zh": "比较两张扑克牌以确定哪一张更高，基于给定的王牌花色。\n在这个游戏中，每张牌由其花色和点数表示（例如，'8D', 'QS'）。\n王牌花色是四种花色之一：黑桃 (S)、红心 (H)、方块 (D) 或梅花 (C)。\n比较规则如下：\n- 如果两张牌都不是王牌花色，则点数较高的牌获胜。\n- 如果两张牌都是王牌花色，则点数较高的牌获胜。\n- 如果一张牌是王牌花色而另一张不是，则无论点数如何，王牌花色的牌获胜。\n- 如果两张牌点数相同，则结果为平局。\n输入：王牌花色和两个牌字符串。\n输出：如果第一张牌获胜，返回 1；如果第二张牌获胜，返回 -1；平局返回 0。",
      "fr": "Compare deux cartes à jouer pour déterminer laquelle est la plus haute en fonction d'un atout donné.\nDans ce jeu, chaque carte est représentée par sa couleur et sa valeur (par exemple, '8D', 'QS').\nL'atout est l'une des quatre couleurs : Piques (S), Cœurs (H), Carreaux (D) ou Trèfles (C).\nLes règles de comparaison sont les suivantes :\n- Si aucune des cartes n'est de la couleur de l'atout, la carte avec la valeur la plus haute gagne.\n- Si les deux cartes sont de la couleur de l'atout, la carte avec la valeur la plus haute gagne.\n- Si une carte est de la couleur de l'atout et l'autre ne l'est pas, la carte de l'atout gagne indépendamment de la valeur.\n- Si les deux cartes ont la même valeur, le résultat est une égalité.\nEntrée : La couleur de l'atout et deux chaînes de caractères représentant les cartes.\nSortie : Renvoie 1 si la première carte gagne, -1 si la deuxième carte gagne, et 0 pour une égalité.",
      "de": "Vergleicht zwei Spielkarten, um festzustellen, welche höher ist, basierend auf einer gegebenen Trumpffarbe.\nIn diesem Spiel wird jede Karte durch ihre Farbe und ihren Rang dargestellt (z.B. '8D', 'QS').\nDie Trumpffarbe ist eine der vier Farben: Pik (S), Herz (H), Karo (D) oder Kreuz (C).\nDie Regeln für den Vergleich sind wie folgt:\n- Wenn keine der Karten die Trumpffarbe hat, gewinnt die Karte mit dem höheren Rang.\n- Wenn beide Karten die Trumpffarbe haben, gewinnt die Karte mit dem höheren Rang.\n- Wenn eine Karte die Trumpffarbe hat und die andere nicht, gewinnt die Karte mit der Trumpffarbe unabhängig vom Rang.\n- Wenn beide Karten den gleichen Rang haben, ist das Ergebnis ein Unentschieden.\nEingabe: Die Trumpffarbe und zwei Kartenstrings.\nAusgabe: Gibt 1 zurück, wenn die erste Karte gewinnt, -1, wenn die zweite Karte gewinnt, und 0 für ein Unentschieden.",
      "ha": "Kwatanta katunan wasa guda biyu don tantance wanda ya fi girma bisa ga wata alama ta trump da aka bayar.\nA cikin wannan wasan, kowace kati tana wakilta ta hanyar alama da matsayi (misali, '8D', 'QS').  \nAlamar trump ɗin tana ɗaya daga cikin alamomi huɗu: Spades (S), Hearts (H), Diamonds (D), ko Clubs (C).  \nDokokin kwatanta sune kamar haka:  \n- Idan babu kati ɗaya daga cikin alamar trump, katin da ke da matsayi mafi girma ya ci.  \n- Idan duk katunan suna daga cikin alamar trump, katin da ke da matsayi mafi girma ya ci.  \n- Idan kati ɗaya yana daga cikin alamar trump ɗin kuma ɗayan ba haka ba, katin alamar trump ya ci ba tare da la'akari da matsayi ba.  \n- Idan duk katunan suna da matsayi ɗaya, sakamakon shi ne kunnen doki.  \nInput: Alamar trump da katunan guda biyu.  \nOutput: Yana dawowa 1 idan katin farko ya ci, -1 idan katin na biyu ya ci, da 0 don kunnen doki.",
      "hi": "दो ताश के पत्तों की तुलना करता है ताकि यह निर्धारित किया जा सके कि दिए गए ट्रम्प सूट के आधार पर कौन सा पत्ता उच्च है।\nइस खेल में, प्रत्येक पत्ता उसके सूट और रैंक द्वारा दर्शाया जाता है (जैसे, '8D', 'QS')।\nट्रम्प सूट चार सूट में से एक है: स्पेड्स (S), हार्ट्स (H), डायमंड्स (D), या क्लब्स (C)।\nतुलना के नियम निम्नलिखित हैं:\n- यदि कोई भी पत्ता ट्रम्प सूट का नहीं है, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि दोनों पत्ते ट्रम्प सूट के हैं, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि एक पत्ता ट्रम्प सूट का है और दूसरा नहीं है, तो ट्रम्प सूट वाला पत्ता रैंक की परवाह किए बिना जीतता है।\n- यदि दोनों पत्तों की रैंक समान है, तो परिणाम ड्रॉ होता है।\nइनपुट: ट्रम्प सूट और दो पत्तों की स्ट्रिंग्स।\nआउटपुट: 1 लौटाता है यदि पहला पत्ता जीतता है, -1 यदि दूसरा पत्ता जीतता है, और 0 ड्रॉ के लिए।",
      "hu": "Összehasonlít két játékkártyát annak meghatározására, hogy melyik a magasabb egy adott adu szín alapján.\nEbben a játékban minden kártyát a színe és rangja képvisel (pl. '8D', 'QS').\nAz adu szín a négy szín egyike: pikk (S), kőr (H), káró (D) vagy treff (C).\nAz összehasonlítás szabályai a következők:\n- Ha egyik kártya sem adu színű, a magasabb rangú kártya nyer.\n- Ha mindkét kártya adu színű, a magasabb rangú kártya nyer.\n- Ha az egyik kártya adu színű, a másik pedig nem, az adu színű kártya nyer rangtól függetlenül.\n- Ha mindkét kártya azonos rangú, az eredmény döntetlen.\nBemenet: Az adu szín és két kártya string.\nKimenet: 1-et ad vissza, ha az első kártya nyer, -1-et, ha a második kártya nyer, és 0-t döntetlen esetén."
    },
    "docstring_bertscore": {
      "sq": "0.983910740505793",
      "hy": "0.9808796408912006",
      "bn": "0.986688983645328",
      "bg": "0.9867277165696298",
      "zh": "0.9729689873361052",
      "fr": "0.9556428564591939",
      "de": "0.9758880594157939",
      "ha": "0.9780169798397258",
      "hi": "0.9848798581348622",
      "hu": "0.9798980095481262"
    }
  },
  {
    "task_id": "PHP/9",
    "prompt": {
      "en": "<?php\n\n/**\n    * This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\n    * The sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\n    * The goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n    *\n    * Input: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\n    * Output: An integer representing the minimum number of 6x6xh packages required to ship the order.\n    *\n    * Example:\n    * For an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\n    * the function will calculate and return the minimum number of packages needed.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "sq": "<?php\n\n/**\n    * Kjo funksion llogarit numrin minimal të pakove 6x6xh të nevojshme për të dërguar një porosi të produkteve të madhësive të ndryshme.\n    * Madhësitë e produkteve variojnë nga 1x1 deri në 6x6, dhe secili produkt kërkon një sasi të caktuar hapësire në paketë.\n    * Qëllimi është të paketohen këto produkte në mënyrë efikase për të minimizuar numrin e pakove, duke reduktuar kostot e transportit.\n    *\n    * Hyrja: Gjashtë numra të plotë ($a, $b, $c, $d, $e, $f), secili që përfaqëson sasinë e produkteve nga madhësia 1x1 deri në 6x6.\n    * Dalja: Një numër i plotë që përfaqëson numrin minimal të pakove 6x6xh të nevojshme për të dërguar porosinë.\n    *\n    * Shembull:\n    * Për një porosi me 1 produkt të madhësisë 1x1, 2 produkte të madhësisë 2x2, dhe 1 produkt të madhësisë 3x3,\n    * funksioni do të llogarisë dhe kthejë numrin minimal të pakove të nevojshme.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hy": "<?php\n\n/**\n    * Այս ֆունկցիան հաշվում է 6x6xh չափսի փաթեթների նվազագույն քանակը, որոնք անհրաժեշտ են տարբեր չափսերի ապրանքների պատվերը առաքելու համար:\n    * Ապրանքների չափսերը տատանվում են 1x1-ից մինչև 6x6, և յուրաքանչյուր ապրանք պահանջում է որոշակի տարածք փաթեթում:\n    * Նպատակն է արդյունավետորեն փաթեթավորել այս ապրանքները՝ նվազեցնելու փաթեթների քանակը և առաքման ծախսերը:\n    *\n    * Մուտք: Վեց ամբողջ թվեր ($a, $b, $c, $d, $e, $f), որոնք ներկայացնում են 1x1-ից մինչև 6x6 չափսի ապրանքների քանակը:\n    * Ելք: Ամբողջ թիվ, որը ներկայացնում է պատվերը առաքելու համար պահանջվող 6x6xh փաթեթների նվազագույն քանակը:\n    *\n    * Օրինակ:\n    * Եթե պատվերը պարունակում է 1 ապրանք 1x1 չափսի, 2 ապրանք 2x2 չափսի և 1 ապրանք 3x3 չափսի,\n    * ֆունկցիան կհաշվի և կվերադարձնի անհրաժեշտ փաթեթների նվազագույն քանակը:\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "bn": "<?php\n\n/**\n    * এই ফাংশনটি বিভিন্ন আকারের পণ্যের একটি অর্ডার পাঠানোর জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক 6x6xh প্যাকেজ গণনা করে।\n    * পণ্যের আকার 1x1 থেকে 6x6 পর্যন্ত এবং প্রতিটি পণ্য প্যাকেজে একটি নির্দিষ্ট পরিমাণ স্থান প্রয়োজন।\n    * লক্ষ্য হল এই পণ্যগুলি দক্ষতার সাথে প্যাক করা যাতে প্যাকেজের সংখ্যা কমানো যায়, যা শিপিং খরচ কমায়।\n    *\n    * ইনপুট: ছয়টি পূর্ণসংখ্যা ($a, $b, $c, $d, $e, $f), প্রতিটি 1x1 থেকে 6x6 আকারের পণ্যের পরিমাণ উপস্থাপন করে।\n    * আউটপুট: একটি পূর্ণসংখ্যা যা অর্ডারটি পাঠানোর জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক 6x6xh প্যাকেজ উপস্থাপন করে।\n    *\n    * উদাহরণ:\n    * 1x1 আকারের 1টি পণ্য, 2x2 আকারের 2টি পণ্য, এবং 3x3 আকারের 1টি পণ্যের একটি অর্ডারের জন্য,\n    * ফাংশনটি প্রয়োজনীয় সর্বনিম্ন সংখ্যক প্যাকেজ গণনা করে এবং ফেরত দেবে।\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "bg": "<?php\n\n/**\n    * Тази функция изчислява минималния брой пакети с размери 6x6xh, необходими за изпращане на поръчка от продукти с различни размери.\n    * Размерите на продуктите варират от 1x1 до 6x6, и всеки продукт изисква определено количество пространство в пакета.\n    * Целта е да се опаковат тези продукти ефективно, за да се минимизира броят на пакетите, намалявайки разходите за доставка.\n    *\n    * Вход: Шест цели числа ($a, $b, $c, $d, $e, $f), всяко представляващо количеството продукти от размер 1x1 до 6x6.\n    * Изход: Цяло число, представляващо минималния брой пакети с размери 6x6xh, необходими за изпращане на поръчката.\n    *\n    * Пример:\n    * За поръчка с 1 продукт с размер 1x1, 2 продукта с размер 2x2 и 1 продукт с размер 3x3,\n    * функцията ще изчисли и върне минималния брой необходими пакети.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "zh": "<?php\n\n/**\n    * 此函数计算运送各种尺寸产品订单所需的最少 6x6xh 包裹数量。\n    * 产品的尺寸范围从 1x1 到 6x6，每个产品在包裹中需要一定的空间。\n    * 目标是有效地包装这些产品，以最小化包裹数量，从而降低运输成本。\n    *\n    * 输入：六个整数 ($a, $b, $c, $d, $e, $f)，每个整数代表从尺寸 1x1 到 6x6 的产品数量。\n    * 输出：一个整数，表示运送订单所需的最少 6x6xh 包裹数量。\n    *\n    * 示例：\n    * 对于一个包含 1 个尺寸为 1x1 的产品，2 个尺寸为 2x2 的产品，以及 1 个尺寸为 3x3 的产品的订单，\n    * 函数将计算并返回所需的最少包裹数量。\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "fr": "<?php\n\n/**\n    * Cette fonction calcule le nombre minimum de colis 6x6xh nécessaires pour expédier une commande de produits de différentes tailles.\n    * Les tailles des produits varient de 1x1 à 6x6, et chaque produit nécessite une certaine quantité d'espace dans le colis.\n    * L'objectif est de conditionner ces produits de manière efficace pour minimiser le nombre de colis, réduisant ainsi les coûts d'expédition.\n    *\n    * Entrée : Six entiers ($a, $b, $c, $d, $e, $f), chacun représentant la quantité de produits de taille 1x1 à 6x6.\n    * Sortie : Un entier représentant le nombre minimum de colis 6x6xh nécessaires pour expédier la commande.\n    *\n    * Exemple :\n    * Pour une commande avec 1 produit de taille 1x1, 2 produits de taille 2x2, et 1 produit de taille 3x3,\n    * la fonction calculera et retournera le nombre minimum de colis nécessaires.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "de": "<?php\n\n/**\n    * Diese Funktion berechnet die minimale Anzahl von 6x6xh Paketen, die benötigt werden, um eine Bestellung von Produkten verschiedener Größen zu versenden.\n    * Die Größen der Produkte reichen von 1x1 bis 6x6, und jedes Produkt benötigt eine bestimmte Menge an Platz im Paket.\n    * Das Ziel ist es, diese Produkte effizient zu verpacken, um die Anzahl der Pakete zu minimieren und die Versandkosten zu senken.\n    *\n    * Eingabe: Sechs ganze Zahlen ($a, $b, $c, $d, $e, $f), die jeweils die Menge der Produkte von Größe 1x1 bis 6x6 darstellen.\n    * Ausgabe: Eine ganze Zahl, die die minimale Anzahl von 6x6xh Paketen darstellt, die benötigt werden, um die Bestellung zu versenden.\n    *\n    * Beispiel:\n    * Für eine Bestellung mit 1 Produkt der Größe 1x1, 2 Produkten der Größe 2x2 und 1 Produkt der Größe 3x3,\n    * wird die Funktion die minimale Anzahl benötigter Pakete berechnen und zurückgeben.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "ha": "<?php\n\n/**\n    * Wannan aiki yana ƙididdige mafi ƙarancin adadin fakitoci na 6x6xh da ake buƙata don jigilar oda na kayayyaki masu girma dabam-dabam.\n    * Girman kayayyakin yana daga 1x1 zuwa 6x6, kuma kowanne kaya yana buƙatar wani yanki a cikin fakitin.\n    * Manufar ita ce a cika waɗannan kayayyakin yadda ya kamata don rage adadin fakitoci, rage farashin jigilar kaya.\n    *\n    * Shigarwa: Lamba shida ($a, $b, $c, $d, $e, $f), kowanne yana wakiltar adadin kayayyaki daga girman 1x1 zuwa 6x6.\n    * Fitarwa: Lamba guda ɗaya da ke wakiltar mafi ƙarancin adadin fakitoci na 6x6xh da ake buƙata don jigilar odar.\n    *\n    * Misali:\n    * Don oda tare da kaya 1 na girman 1x1, kaya 2 na girman 2x2, da kaya 1 na girman 3x3,\n    * aikin zai ƙididdige kuma ya dawo da mafi ƙarancin adadin fakitoci da ake buƙata.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hi": "<?php\n\n/**\n    * यह फ़ंक्शन विभिन्न आकार के उत्पादों के ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम संख्या में 6x6xh पैकेजों की गणना करता है।\n    * उत्पादों के आकार 1x1 से 6x6 तक होते हैं, और प्रत्येक उत्पाद को पैकेज में एक निश्चित मात्रा में स्थान की आवश्यकता होती है।\n    * लक्ष्य इन उत्पादों को कुशलतापूर्वक पैक करना है ताकि पैकेजों की संख्या को कम किया जा सके, जिससे शिपिंग लागत कम हो।\n    *\n    * इनपुट: छह पूर्णांक ($a, $b, $c, $d, $e, $f), प्रत्येक 1x1 से 6x6 आकार के उत्पादों की मात्रा का प्रतिनिधित्व करते हैं।\n    * आउटपुट: एक पूर्णांक जो ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम संख्या में 6x6xh पैकेजों का प्रतिनिधित्व करता है।\n    *\n    * उदाहरण:\n    * यदि ऑर्डर में 1x1 आकार का 1 उत्पाद, 2x2 आकार के 2 उत्पाद, और 3x3 आकार का 1 उत्पाद है,\n    * तो फ़ंक्शन आवश्यक न्यूनतम पैकेजों की संख्या की गणना करेगा और लौटाएगा।\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hu": "<?php\n\n/**\n    * Ez a függvény kiszámítja a szükséges 6x6xh csomagok minimális számát különböző méretű termékek rendelésének szállításához.\n    * A termékek méretei 1x1-től 6x6-ig terjednek, és minden termék bizonyos helyet igényel a csomagban.\n    * A cél az, hogy hatékonyan csomagoljuk ezeket a termékeket, hogy minimalizáljuk a csomagok számát, csökkentve a szállítási költségeket.\n    *\n    * Bemenet: Hat egész szám ($a, $b, $c, $d, $e, $f), amelyek az 1x1-től 6x6-ig terjedő méretű termékek mennyiségét jelzik.\n    * Kimenet: Egy egész szám, amely a rendelés szállításához szükséges 6x6xh csomagok minimális számát jelzi.\n    *\n    * Példa:\n    * Egy rendelés esetén, amely 1 darab 1x1 méretű, 2 darab 2x2 méretű és 1 darab 3x3 méretű terméket tartalmaz,\n    * a függvény kiszámítja és visszaadja a szükséges csomagok minimális számát.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int "
    },
    "prompt_bertscore": {
      "sq": "0.994972466425626",
      "hy": "0.96724068577744",
      "bn": "0.9804279554047273",
      "bg": "0.9758213196077662",
      "zh": "0.9948147539030843",
      "fr": "0.9932122039888948",
      "de": "0.9967283589939744",
      "ha": "0.9682058307988886",
      "hi": "0.9876088409399005",
      "hu": "0.9783127404770867"
    },
    "canonical_solution": "{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}",
    "instruction": {
      "en": "Write a PHP function `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` to solve the following problem:\nThis function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\nThe sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\nThe goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n\nInput: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\nOutput: An integer representing the minimum number of 6x6xh packages required to ship the order.\n\nExample:\nFor an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\nthe function will calculate and return the minimum number of packages needed.",
      "sq": "Shkruani një funksion PHP `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` për të zgjidhur problemin e mëposhtëm:\nKy funksion llogarit numrin minimal të paketave 6x6xh të nevojshme për të dërguar një porosi të produkteve të madhësive të ndryshme.\nMadhësitë e produkteve variojnë nga 1x1 deri në 6x6, dhe secili produkt kërkon një sasi të caktuar hapësire në paketë.\nQëllimi është të paketohen këto produkte në mënyrë efikase për të minimizuar numrin e paketave, duke reduktuar kostot e transportit.\n\nHyrja: Gjashtë numra të plotë ($a, $b, $c, $d, $e, $f), secili që përfaqëson sasinë e produkteve nga madhësia 1x1 deri në 6x6.\nDalja: Një numër i plotë që përfaqëson numrin minimal të paketave 6x6xh të nevojshme për të dërguar porosinë.\n\nShembull:\nPër një porosi me 1 produkt të madhësisë 1x1, 2 produkte të madhësisë 2x2, dhe 1 produkt të madhësisë 3x3,\nfunksioni do të llogarisë dhe kthejë numrin minimal të paketave të nevojshme.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` հետևյալ խնդիրը լուծելու համար:\nԱյս ֆունկցիան հաշվում է 6x6xh փաթեթների նվազագույն քանակը, որոնք անհրաժեշտ են տարբեր չափերի ապրանքների պատվերը առաքելու համար:\nԱպրանքների չափերը տատանվում են 1x1-ից մինչև 6x6, և յուրաքանչյուր ապրանք պահանջում է որոշակի տարածք փաթեթում:\nՆպատակն է արդյունավետորեն փաթեթավորել այս ապրանքները՝ նվազեցնելով փաթեթների քանակը և առաքման ծախսերը:\n\nՄուտք: Վեց ամբողջ թիվ ($a, $b, $c, $d, $e, $f), որոնք ներկայացնում են 1x1-ից մինչև 6x6 չափի ապրանքների քանակը:\nԵլք: Ամբողջ թիվ, որը ներկայացնում է 6x6xh փաթեթների նվազագույն քանակը, որոնք անհրաժեշտ են պատվերը առաքելու համար:\n\nՕրինակ:\nԵթե պատվերը պարունակում է 1 ապրանք 1x1 չափով, 2 ապրանք 2x2 չափով և 1 ապրանք 3x3 չափով,\nֆունկցիան կհաշվի և կվերադարձնի անհրաժեշտ փաթեթների նվազագույն քանակը:",
      "bn": "PHP ফাংশন `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএই ফাংশনটি বিভিন্ন আকারের পণ্যের অর্ডার পাঠানোর জন্য প্রয়োজনীয় ন্যূনতম সংখ্যক 6x6xh প্যাকেজ গণনা করে।\nপণ্যের আকার 1x1 থেকে 6x6 পর্যন্ত এবং প্রতিটি পণ্য প্যাকেজে একটি নির্দিষ্ট পরিমাণ স্থান প্রয়োজন।\nলক্ষ্য হল এই পণ্যগুলিকে দক্ষতার সাথে প্যাক করা যাতে প্যাকেজের সংখ্যা কমিয়ে আনা যায়, যা শিপিং খরচ কমায়।\n\nইনপুট: ছয়টি পূর্ণসংখ্যা ($a, $b, $c, $d, $e, $f), প্রতিটি 1x1 থেকে 6x6 আকারের পণ্যের পরিমাণ উপস্থাপন করে।\nআউটপুট: একটি পূর্ণসংখ্যা যা অর্ডারটি পাঠানোর জন্য প্রয়োজনীয় ন্যূনতম সংখ্যক 6x6xh প্যাকেজ উপস্থাপন করে।\n\nউদাহরণ:\nযদি অর্ডারে 1x1 আকারের 1টি পণ্য, 2x2 আকারের 2টি পণ্য এবং 3x3 আকারের 1টি পণ্য থাকে,\nতাহলে ফাংশনটি প্রয়োজনীয় প্যাকেজের ন্যূনতম সংখ্যা গণনা করবে এবং ফেরত দেবে।",
      "bg": "Напишете PHP функция `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int`, за да решите следния проблем:\nТази функция изчислява минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчка от продукти с различни размери.\nРазмерите на продуктите варират от 1x1 до 6x6, и всеки продукт изисква определено количество пространство в пакета.\nЦелта е да се опаковат тези продукти ефективно, за да се минимизира броят на пакетите, като се намалят разходите за доставка.\n\nВход: Шест цели числа ($a, $b, $c, $d, $e, $f), всяко представляващо количеството продукти от размер 1x1 до 6x6.\nИзход: Цяло число, представляващо минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчката.\n\nПример:\nЗа поръчка с 1 продукт с размер 1x1, 2 продукта с размер 2x2 и 1 продукт с размер 3x3,\nфункцията ще изчисли и върне минималния брой необходими пакети.",
      "zh": "编写一个 PHP 函数 `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` 来解决以下问题：\n该函数计算所需的最少数量的 6x6xh 包裹，以便运送各种尺寸的产品订单。\n产品的尺寸范围从 1x1 到 6x6，每种产品在包裹中需要一定的空间。\n目标是有效地包装这些产品，以最小化包裹数量，从而降低运输成本。\n\n输入：六个整数 ($a, $b, $c, $d, $e, $f)，每个整数代表从尺寸 1x1 到 6x6 的产品数量。\n输出：一个整数，表示运送订单所需的最少数量的 6x6xh 包裹。\n\n示例：\n对于一个包含 1 个尺寸为 1x1 的产品，2 个尺寸为 2x2 的产品，以及 1 个尺寸为 3x3 的产品的订单，\n该函数将计算并返回所需的最少包裹数量。",
      "fr": "Écrire une fonction PHP `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` pour résoudre le problème suivant :\nCette fonction calcule le nombre minimum de colis 6x6xh nécessaires pour expédier une commande de produits de différentes tailles.\nLes tailles des produits varient de 1x1 à 6x6, et chaque produit nécessite une certaine quantité d'espace dans le colis.\nL'objectif est de ranger efficacement ces produits pour minimiser le nombre de colis, réduisant ainsi les coûts d'expédition.\n\nEntrée : Six entiers ($a, $b, $c, $d, $e, $f), chacun représentant la quantité de produits de taille 1x1 à 6x6.\nSortie : Un entier représentant le nombre minimum de colis 6x6xh nécessaires pour expédier la commande.\n\nExemple :\nPour une commande avec 1 produit de taille 1x1, 2 produits de taille 2x2, et 1 produit de taille 3x3,\nla fonction calculera et renverra le nombre minimum de colis nécessaires.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int`, um das folgende Problem zu lösen:\nDiese Funktion berechnet die minimale Anzahl von 6x6xh Paketen, die erforderlich sind, um eine Bestellung von Produkten verschiedener Größen zu versenden.\nDie Größen der Produkte reichen von 1x1 bis 6x6, und jedes Produkt benötigt eine bestimmte Menge an Platz im Paket.\nDas Ziel ist es, diese Produkte effizient zu verpacken, um die Anzahl der Pakete zu minimieren und die Versandkosten zu senken.\n\nEingabe: Sechs ganze Zahlen ($a, $b, $c, $d, $e, $f), die jeweils die Menge der Produkte von Größe 1x1 bis 6x6 darstellen.\nAusgabe: Eine ganze Zahl, die die minimale Anzahl von 6x6xh Paketen darstellt, die erforderlich sind, um die Bestellung zu versenden.\n\nBeispiel:\nFür eine Bestellung mit 1 Produkt der Größe 1x1, 2 Produkten der Größe 2x2 und 1 Produkt der Größe 3x3,\nwird die Funktion die minimale Anzahl der benötigten Pakete berechnen und zurückgeben.",
      "ha": "Rubuta aikin PHP `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` don warware matsalar mai zuwa:\nWannan aikin yana lissafin mafi ƙarancin adadin fakiti na 6x6xh da ake buƙata don jigilar oda na kayayyaki masu girma dabam-dabam.\nGirman kayayyakin yana daga 1x1 zuwa 6x6, kuma kowane kaya yana buƙatar wani yanki na sarari a cikin fakitin.\nManufar ita ce a shirya waɗannan kayayyakin yadda ya kamata don rage yawan fakiti, rage farashin jigilar kaya.\n\nShigarwa: Lamba shida ($a, $b, $c, $d, $e, $f), kowanne yana wakiltar adadin kayayyaki daga girman 1x1 zuwa 6x6.\nFitarwa: Lamba mai wakiltar mafi ƙarancin adadin fakiti na 6x6xh da ake buƙata don jigilar odar.\n\nMisali:\nDon oda tare da kaya 1 na girman 1x1, kayayyaki 2 na girman 2x2, da kaya 1 na girman 3x3,\naikin zai lissafa kuma ya dawo da mafi ƙarancin adadin fakiti da ake buƙata.",
      "hi": "PHP फ़ंक्शन `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nयह फ़ंक्शन विभिन्न आकारों के उत्पादों के ऑर्डर को शिप करने के लिए आवश्यक 6x6xh पैकेजों की न्यूनतम संख्या की गणना करता है।\nउत्पादों के आकार 1x1 से 6x6 तक होते हैं, और प्रत्येक उत्पाद को पैकेज में एक निश्चित मात्रा में स्थान की आवश्यकता होती है।\nलक्ष्य इन उत्पादों को कुशलतापूर्वक पैक करना है ताकि पैकेजों की संख्या को कम किया जा सके, जिससे शिपिंग लागत कम हो।\n\nइनपुट: छह पूर्णांक ($a, $b, $c, $d, $e, $f), प्रत्येक 1x1 से 6x6 आकार के उत्पादों की मात्रा का प्रतिनिधित्व करता है।\nआउटपुट: एक पूर्णांक जो ऑर्डर को शिप करने के लिए आवश्यक 6x6xh पैकेजों की न्यूनतम संख्या का प्रतिनिधित्व करता है।\n\nउदाहरण:\n1x1 आकार के 1 उत्पाद, 2x2 आकार के 2 उत्पाद, और 3x3 आकार के 1 उत्पाद के ऑर्डर के लिए,\nफ़ंक्शन आवश्यक पैकेजों की न्यूनतम संख्या की गणना करेगा और लौटाएगा।",
      "hu": "Írj egy PHP függvényt `function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int` a következő probléma megoldására:\nEz a függvény kiszámítja a szükséges minimális számú 6x6xh csomagokat különböző méretű termékek rendelésének szállításához.\nA termékek méretei 1x1-től 6x6-ig terjednek, és minden termék bizonyos mennyiségű helyet igényel a csomagban.\nA cél az, hogy hatékonyan csomagoljuk ezeket a termékeket a csomagok számának minimalizálása érdekében, csökkentve a szállítási költségeket.\n\nBemenet: Hat egész szám ($a, $b, $c, $d, $e, $f), amelyek az 1x1-től 6x6-ig terjedő méretű termékek mennyiségét jelölik.\nKimenet: Egy egész szám, amely a rendelés szállításához szükséges minimális számú 6x6xh csomagot jelenti.\n\nPélda:\nEgy rendelés esetén, amely 1 darab 1x1 méretű, 2 darab 2x2 méretű és 1 darab 3x3 méretű terméket tartalmaz,\na függvény kiszámítja és visszaadja a szükséges minimális csomagok számát."
    },
    "instruction_bertscore": {
      "sq": "0.9912235166139735",
      "hy": "0.9564153300110386",
      "bn": "0.9620681520249105",
      "bg": "0.9797238107039586",
      "zh": "0.9919143530792128",
      "fr": "0.9910507081824731",
      "de": "0.9983108472396793",
      "ha": "0.9735311113144339",
      "hi": "0.9743033862358975",
      "hu": "0.9836862881752236"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateMinimumPackages(0, 0, 4, 0, 0, 1) === 2);\n    assert(calculateMinimumPackages(7, 5, 1, 0, 0, 0) === 1);\n    assert(calculateMinimumPackages(0, 0, 0, 0, 0, 0) === 0);\n    assert(calculateMinimumPackages(0, 0, 4, 1, 1, 1) === 4);\n    assert(calculateMinimumPackages(1, 2, 1, 1, 1, 1) === 4);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateMinimumPackages",
    "signature": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int",
    "docstring": {
      "en": "This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\nThe sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\nThe goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n\nInput: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\nOutput: An integer representing the minimum number of 6x6xh packages required to ship the order.\n\nExample:\nFor an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\nthe function will calculate and return the minimum number of packages needed.",
      "sq": "Kjo funksion llogarit numrin minimal të paketave 6x6xh të nevojshme për të transportuar një porosi të produkteve të madhësive të ndryshme.\nMadhësitë e produkteve variojnë nga 1x1 deri në 6x6, dhe secili produkt kërkon një sasi të caktuar hapësire në paketë.\nQëllimi është të paketohen këto produkte në mënyrë efikase për të minimizuar numrin e paketave, duke reduktuar kostot e transportit.\n\nInput: Gjashtë numra të plotë ($a, $b, $c, $d, $e, $f), secili që përfaqëson sasinë e produkteve nga madhësia 1x1 deri në 6x6.\nOutput: Një numër i plotë që përfaqëson numrin minimal të paketave 6x6xh të nevojshme për të transportuar porosinë.\n\nShembull:\nPër një porosi me 1 produkt të madhësisë 1x1, 2 produkte të madhësisë 2x2, dhe 1 produkt të madhësisë 3x3,\nfunksioni do të llogarisë dhe kthejë numrin minimal të paketave të nevojshme.",
      "hy": "Այս ֆունկցիան հաշվարկում է 6x6xh փաթեթների նվազագույն քանակը, որոնք անհրաժեշտ են տարբեր չափերի ապրանքների պատվերը առաքելու համար:\nԱպրանքների չափերը տատանվում են 1x1-ից մինչև 6x6, և յուրաքանչյուր ապրանք պահանջում է որոշակի տարածք փաթեթում:\nՆպատակն է արդյունավետորեն փաթեթավորել այս ապրանքները՝ նվազեցնելով փաթեթների քանակը և առաքման ծախսերը:\n\nՄուտք: Վեց ամբողջ թիվ ($a, $b, $c, $d, $e, $f), որոնք ներկայացնում են 1x1-ից մինչև 6x6 չափերի ապրանքների քանակը:\nԵլք: Ամբողջ թիվ, որը ներկայացնում է 6x6xh փաթեթների նվազագույն քանակը, որոնք անհրաժեշտ են պատվերը առաքելու համար:\n\nՕրինակ:\nՊատվերի համար, որը ներառում է 1 ապրանք 1x1 չափով, 2 ապրանք 2x2 չափով և 1 ապրանք 3x3 չափով,\nֆունկցիան կհաշվարկի և կվերադարձնի անհրաժեշտ փաթեթների նվազագույն քանակը:",
      "bn": "এই ফাংশনটি বিভিন্ন আকারের পণ্যের একটি অর্ডার পাঠানোর জন্য প্রয়োজনীয় ন্যূনতম সংখ্যক 6x6xh প্যাকেজ গণনা করে।\nপণ্যের আকার 1x1 থেকে 6x6 পর্যন্ত হয়, এবং প্রতিটি পণ্য প্যাকেজে একটি নির্দিষ্ট পরিমাণ স্থান প্রয়োজন।\nলক্ষ্য হল এই পণ্যগুলি দক্ষতার সাথে প্যাক করা যাতে প্যাকেজের সংখ্যা কমানো যায়, যা শিপিং খরচ কমায়।\n\nইনপুট: ছয়টি পূর্ণসংখ্যা ($a, $b, $c, $d, $e, $f), প্রতিটি 1x1 থেকে 6x6 আকারের পণ্যের পরিমাণ প্রতিনিধিত্ব করে।\nআউটপুট: অর্ডারটি পাঠানোর জন্য প্রয়োজনীয় ন্যূনতম সংখ্যক 6x6xh প্যাকেজের সংখ্যা প্রতিনিধিত্বকারী একটি পূর্ণসংখ্যা।\n\nউদাহরণ:\n1x1 আকারের 1টি পণ্য, 2x2 আকারের 2টি পণ্য, এবং 3x3 আকারের 1টি পণ্যের একটি অর্ডারের জন্য,\nফাংশনটি প্রয়োজনীয় প্যাকেজের ন্যূনতম সংখ্যা গণনা করবে এবং ফেরত দেবে।",
      "bg": "Тази функция изчислява минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчка от продукти с различни размери. Размерите на продуктите варират от 1x1 до 6x6, и всеки продукт изисква определено количество пространство в пакета. Целта е да се опаковат тези продукти ефективно, за да се минимизира броят на пакетите, намалявайки разходите за доставка.\n\nВход: Шест цели числа ($a, $b, $c, $d, $e, $f), всяко представляващо количеството продукти от размер 1x1 до 6x6. Изход: Цяло число, представляващо минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчката.\n\nПример: За поръчка с 1 продукт с размер 1x1, 2 продукта с размер 2x2 и 1 продукт с размер 3x3, функцията ще изчисли и върне минималния брой необходими пакети.",
      "zh": "此函数计算运送各种尺寸产品订单所需的最小6x6xh包裹数量。\n产品的尺寸范围从1x1到6x6，每个产品在包裹中需要一定的空间。\n目标是高效地包装这些产品，以最小化包裹数量，从而降低运输成本。\n\n输入：六个整数 ($a, $b, $c, $d, $e, $f)，每个整数代表从尺寸1x1到6x6的产品数量。\n输出：一个整数，表示运送订单所需的最小6x6xh包裹数量。\n\n示例：\n对于一个包含1个尺寸为1x1的产品、2个尺寸为2x2的产品和1个尺寸为3x3的产品的订单，\n该函数将计算并返回所需的最小包裹数量。",
      "fr": "Cette fonction calcule le nombre minimum de colis 6x6xh nécessaires pour expédier une commande de produits de différentes tailles.  \nLes tailles des produits varient de 1x1 à 6x6, et chaque produit nécessite une certaine quantité d'espace dans le colis.  \nL'objectif est d'emballer ces produits de manière efficace pour minimiser le nombre de colis, réduisant ainsi les coûts d'expédition.\n\nEntrée : Six entiers ($a, $b, $c, $d, $e, $f), chacun représentant la quantité de produits de taille 1x1 à 6x6.  \nSortie : Un entier représentant le nombre minimum de colis 6x6xh nécessaires pour expédier la commande.\n\nExemple :  \nPour une commande avec 1 produit de taille 1x1, 2 produits de taille 2x2, et 1 produit de taille 3x3,  \nla fonction calculera et retournera le nombre minimum de colis nécessaires.",
      "de": "Diese Funktion berechnet die minimale Anzahl von 6x6xh Paketen, die benötigt werden, um eine Bestellung von Produkten verschiedener Größen zu versenden. Die Größen der Produkte reichen von 1x1 bis 6x6, und jedes Produkt benötigt eine bestimmte Menge an Platz im Paket. Das Ziel ist es, diese Produkte effizient zu verpacken, um die Anzahl der Pakete zu minimieren und die Versandkosten zu senken.\n\nEingabe: Sechs ganze Zahlen ($a, $b, $c, $d, $e, $f), die jeweils die Menge der Produkte von Größe 1x1 bis 6x6 darstellen. Ausgabe: Eine ganze Zahl, die die minimale Anzahl von 6x6xh Paketen darstellt, die benötigt werden, um die Bestellung zu versenden.\n\nBeispiel: Für eine Bestellung mit 1 Produkt der Größe 1x1, 2 Produkten der Größe 2x2 und 1 Produkt der Größe 3x3, wird die Funktion die minimale Anzahl der benötigten Pakete berechnen und zurückgeben.",
      "ha": "Wannan aikin yana ƙididdige mafi ƙarancin adadin fakitin 6x6xh da ake buƙata don jigilar oda na samfuran masu girma dabam-dabam. \nGirman samfuran suna farawa daga 1x1 zuwa 6x6, kuma kowane samfur yana buƙatar wani adadin sarari a cikin fakitin. \nManufar ita ce a shirya waɗannan samfuran yadda ya dace don rage yawan fakitoci, don rage farashin jigilar kaya.\n\nShigarwa: Lamba guda shida ($a, $b, $c, $d, $e, $f), kowanne yana wakiltar adadin samfuran daga girman 1x1 zuwa 6x6.\nFitarwa: Wani lamba wanda ke wakiltar mafi ƙarancin adadin fakitin 6x6xh da ake buƙata don jigilar odar.\n\nMisali:\nDon oda tare da samfur guda 1 na girman 1x1, samfura 2 na girman 2x2, da samfur guda 1 na girman 3x3,\naikin zai ƙididdige kuma ya dawo da mafi ƙarancin adadin fakitoci da ake buƙata.",
      "hi": "यह फ़ंक्शन विभिन्न आकार के उत्पादों के ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम 6x6xh पैकेजों की संख्या की गणना करता है। उत्पादों के आकार 1x1 से 6x6 तक होते हैं, और प्रत्येक उत्पाद को पैकेज में एक निश्चित मात्रा में जगह की आवश्यकता होती है। लक्ष्य इन उत्पादों को कुशलतापूर्वक पैक करना है ताकि पैकेजों की संख्या को कम किया जा सके, जिससे शिपिंग लागत कम हो सके।\n\nइनपुट: छह पूर्णांक ($a, $b, $c, $d, $e, $f), प्रत्येक 1x1 से 6x6 आकार के उत्पादों की मात्रा का प्रतिनिधित्व करता है।\nआउटपुट: एक पूर्णांक जो ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम 6x6xh पैकेजों की संख्या का प्रतिनिधित्व करता है।\n\nउदाहरण:\nयदि ऑर्डर में 1x1 आकार का 1 उत्पाद, 2x2 आकार के 2 उत्पाद, और 3x3 आकार का 1 उत्पाद है,\nतो फ़ंक्शन आवश्यक न्यूनतम पैकेजों की संख्या की गणना करेगा और लौटाएगा।",
      "hu": "Ez a függvény kiszámítja a szükséges 6x6xh csomagok minimális számát különböző méretű termékek rendelésének szállításához.  \nA termékek méretei 1x1-től 6x6-ig terjednek, és minden termék bizonyos mennyiségű helyet igényel a csomagban.  \nA cél az, hogy hatékonyan csomagoljuk ezeket a termékeket, minimalizálva a csomagok számát, csökkentve a szállítási költségeket.\n\nBemenet: Hat egész szám ($a, $b, $c, $d, $e, $f), amelyek az 1x1-től 6x6-ig terjedő méretű termékek mennyiségét jelölik.  \nKimenet: Egy egész szám, amely a rendelés szállításához szükséges 6x6xh csomagok minimális számát jelöli.\n\nPélda:  \nEgy rendelés esetén, amely 1 darab 1x1-es méretű, 2 darab 2x2-es méretű és 1 darab 3x3-as méretű terméket tartalmaz,  \na függvény kiszámítja és visszaadja a szükséges csomagok minimális számát."
    },
    "docstring_bertscore": {
      "sq": "0.9897351791688791",
      "hy": "0.9587484424666745",
      "bn": "0.9789181658784811",
      "bg": "0.9797899546208433",
      "zh": "0.9919711613681887",
      "fr": "0.9923882851683621",
      "de": "0.9966612219251846",
      "ha": "0.9740231187682573",
      "hi": "0.9804631129821705",
      "hu": "0.9768571770448631"
    }
  },
  {
    "task_id": "PHP/10",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the number of chickens and rabbits in a farm.\n    * Given the total number of animals and the total number of legs, the function determines\n    * how many chickens and rabbits are there. \n    * Assumptions: \n    * - Each chicken has 2 legs.\n    * - Each rabbit has 4 legs.\n    * - The total number of animals and legs are non-negative integers.\n    * \n    * Input: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\n    * Output: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists, \n    *         or \"No answer\" if no valid solution is found.\n    * \n    * Example:\n    * For 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\n    * For 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "sq": "<?php\n\n/**\n    * Llogarit numrin e pulave dhe lepujve në një fermë.\n    * Duke pasur parasysh numrin total të kafshëve dhe numrin total të këmbëve, funksioni përcakton\n    * sa pula dhe lepuj ka.\n    * Supozime:\n    * - Çdo pulë ka 2 këmbë.\n    * - Çdo lepur ka 4 këmbë.\n    * - Numri total i kafshëve dhe këmbëve janë numra të plotë jo-negativë.\n    * \n    * Hyrja: Dy numra të plotë, $totalAnimals (numri total i kafshëve) dhe $totalLegs (numri total i këmbëve).\n    * Dalja: Kthen një varg [numri_i_pulave, numri_i_lepujve] nëse ekziston një zgjidhje e vlefshme,\n    *         ose \"Nuk ka përgjigje\" nëse nuk gjendet asnjë zgjidhje e vlefshme.\n    * \n    * Shembull:\n    * Për 5 kafshë dhe 12 këmbë, funksioni do të kthejë [4, 1] (4 pula dhe 1 lepur).\n    * Për 10 kafshë dhe 16 këmbë, funksioni do të kthejë \"Nuk ka përgjigje\" pasi nuk ekziston asnjë kombinim i vlefshëm.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է ֆերմայում հավերի և նապաստակների քանակը։\n    * Տրված է կենդանիների ընդհանուր քանակը և ոտքերի ընդհանուր քանակը, ֆունկցիան որոշում է\n    * թե քանի հավ և նապաստակ կա։ \n    * Ենթադրություններ: \n    * - Ամեն հավ ունի 2 ոտք։\n    * - Ամեն նապաստակ ունի 4 ոտք։\n    * - Կենդանիների և ոտքերի ընդհանուր քանակները ոչ բացասական ամբողջ թվեր են։\n    * \n    * Մուտք: Երկու ամբողջ թիվ, $totalAnimals (կենդանիների ընդհանուր քանակը) և $totalLegs (ոտքերի ընդհանուր քանակը)։\n    * Ելք: Վերադարձնում է զանգված [number_of_chickens, number_of_rabbits], եթե կա վավեր լուծում, \n    *         կամ \"No answer\", եթե վավեր լուծում չի գտնվել։\n    * \n    * Օրինակ:\n    * 5 կենդանի և 12 ոտքերի համար, ֆունկցիան կվերադարձնի [4, 1] (4 հավ և 1 նապաստակ)։\n    * 10 կենդանի և 16 ոտքերի համար, ֆունկցիան կվերադարձնի \"No answer\", քանի որ վավեր համակցություն չկա։\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "bn": "<?php\n\n/**\n    * একটি খামারে মুরগি এবং খরগোশের সংখ্যা গণনা করে।\n    * মোট প্রাণীর সংখ্যা এবং মোট পায়ের সংখ্যা দেওয়া হলে, ফাংশনটি নির্ধারণ করে\n    * সেখানে কতগুলি মুরগি এবং খরগোশ আছে।\n    * অনুমানসমূহ:\n    * - প্রতিটি মুরগির 2টি পা থাকে।\n    * - প্রতিটি খরগোশের 4টি পা থাকে।\n    * - প্রাণী এবং পায়ের মোট সংখ্যা অ-ঋণাত্মক পূর্ণসংখ্যা।\n    * \n    * ইনপুট: দুটি পূর্ণসংখ্যা, $totalAnimals (প্রাণীর মোট সংখ্যা) এবং $totalLegs (পায়ের মোট সংখ্যা)।\n    * আউটপুট: একটি অ্যারে [number_of_chickens, number_of_rabbits] ফেরত দেয় যদি একটি বৈধ সমাধান থাকে,\n    *         অথবা \"No answer\" যদি কোন বৈধ সমাধান পাওয়া না যায়।\n    * \n    * উদাহরণ:\n    * 5টি প্রাণী এবং 12টি পায়ের জন্য, ফাংশনটি [4, 1] (4টি মুরগি এবং 1টি খরগোশ) ফেরত দেবে।\n    * 10টি প্রাণী এবং 16টি পায়ের জন্য, ফাংশনটি \"No answer\" ফেরত দেবে কারণ কোন বৈধ সংমিশ্রণ নেই।\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "bg": "<?php\n\n/**\n    * Изчислява броя на кокошките и зайците във ферма.\n    * Като се даде общият брой на животните и общият брой на краката, функцията определя\n    * колко кокошки и зайци има. \n    * Предположения: \n    * - Всяка кокошка има 2 крака.\n    * - Всеки заек има 4 крака.\n    * - Общият брой на животните и краката са неотрицателни цели числа.\n    * \n    * Вход: Две цели числа, $totalAnimals (общ брой на животните) и $totalLegs (общ брой на краката).\n    * Изход: Връща масив [number_of_chickens, number_of_rabbits] ако съществува валидно решение,\n    *         или \"No answer\" ако не е намерено валидно решение.\n    * \n    * Пример:\n    * За 5 животни и 12 крака, функцията ще върне [4, 1] (4 кокошки и 1 заек).\n    * За 10 животни и 16 крака, функцията ще върне \"No answer\", тъй като не съществува валидна комбинация.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "zh": "<?php\n\n/**\n    * 计算农场中的鸡和兔子的数量。\n    * 给定动物的总数和腿的总数，函数确定有多少只鸡和兔子。\n    * 假设：\n    * - 每只鸡有2条腿。\n    * - 每只兔子有4条腿。\n    * - 动物和腿的总数是非负整数。\n    * \n    * 输入：两个整数，$totalAnimals（动物的总数）和 $totalLegs（腿的总数）。\n    * 输出：如果存在有效解，则返回一个数组 [number_of_chickens, number_of_rabbits]，\n    *         如果没有找到有效解，则返回 \"No answer\"。\n    * \n    * 示例：\n    * 对于5只动物和12条腿，函数将返回 [4, 1]（4只鸡和1只兔子）。\n    * 对于10只动物和16条腿，函数将返回 \"No answer\"，因为不存在有效组合。\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "fr": "<?php\n\n/**\n    * Calcule le nombre de poulets et de lapins dans une ferme.\n    * Étant donné le nombre total d'animaux et le nombre total de pattes, la fonction détermine\n    * combien il y a de poulets et de lapins.\n    * Hypothèses :\n    * - Chaque poulet a 2 pattes.\n    * - Chaque lapin a 4 pattes.\n    * - Le nombre total d'animaux et de pattes sont des entiers non négatifs.\n    * \n    * Entrée : Deux entiers, $totalAnimals (nombre total d'animaux) et $totalLegs (nombre total de pattes).\n    * Sortie : Retourne un tableau [number_of_chickens, number_of_rabbits] si une solution valide existe,\n    *         ou \"No answer\" si aucune solution valide n'est trouvée.\n    * \n    * Exemple :\n    * Pour 5 animaux et 12 pattes, la fonction retournera [4, 1] (4 poulets et 1 lapin).\n    * Pour 10 animaux et 16 pattes, la fonction retournera \"No answer\" car aucune combinaison valide n'existe.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "de": "<?php\n\n/**\n    * Berechnet die Anzahl der Hühner und Kaninchen auf einem Bauernhof.\n    * Gegeben die Gesamtanzahl der Tiere und die Gesamtanzahl der Beine, bestimmt die Funktion,\n    * wie viele Hühner und Kaninchen es gibt.\n    * Annahmen:\n    * - Jedes Huhn hat 2 Beine.\n    * - Jedes Kaninchen hat 4 Beine.\n    * - Die Gesamtanzahl der Tiere und Beine sind nicht-negative ganze Zahlen.\n    * \n    * Eingabe: Zwei ganze Zahlen, $totalAnimals (Gesamtanzahl der Tiere) und $totalLegs (Gesamtanzahl der Beine).\n    * Ausgabe: Gibt ein Array [number_of_chickens, number_of_rabbits] zurück, wenn eine gültige Lösung existiert,\n    *          oder \"No answer\", wenn keine gültige Lösung gefunden wird.\n    * \n    * Beispiel:\n    * Für 5 Tiere und 12 Beine wird die Funktion [4, 1] zurückgeben (4 Hühner und 1 Kaninchen).\n    * Für 10 Tiere und 16 Beine wird die Funktion \"No answer\" zurückgeben, da keine gültige Kombination existiert.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "ha": "<?php\n\n/**\n    * Lissafa yawan kaji da zomaye a gona.\n    * An ba da jimillar adadin dabbobi da jimillar adadin ƙafafu, aikin yana tantance\n    * yawan kaji da zomaye da ke akwai.\n    * Tsammani:\n    * - Kowace kaza tana da ƙafafu 2.\n    * - Kowanne zomo yana da ƙafafu 4.\n    * - Jimillar adadin dabbobi da ƙafafu lambobi ne marasa kyau.\n    * \n    * Shigarwa: Lambobi guda biyu, $totalAnimals (jimillar adadin dabbobi) da $totalLegs (jimillar adadin ƙafafu).\n    * Fitarwa: Yana mayar da jerin [number_of_chickens, number_of_rabbits] idan akwai ingantaccen bayani,\n    *         ko \"Babu amsa\" idan ba a sami ingantaccen bayani ba.\n    * \n    * Misali:\n    * Don dabbobi 5 da ƙafafu 12, aikin zai mayar da [4, 1] (kaji 4 da zomo 1).\n    * Don dabbobi 10 da ƙafafu 16, aikin zai mayar da \"Babu amsa\" saboda babu wata ingantacciyar haɗuwa.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hi": "<?php\n\n/**\n    * एक फार्म में मुर्गियों और खरगोशों की संख्या की गणना करता है।\n    * जानवरों की कुल संख्या और कुल पैरों की संख्या दी गई है, यह फ़ंक्शन निर्धारित करता है\n    * कि वहां कितनी मुर्गियां और खरगोश हैं।\n    * धारणाएं:\n    * - प्रत्येक मुर्गी के 2 पैर होते हैं।\n    * - प्रत्येक खरगोश के 4 पैर होते हैं।\n    * - जानवरों और पैरों की कुल संख्या गैर-ऋणात्मक पूर्णांक हैं।\n    * \n    * इनपुट: दो पूर्णांक, $totalAnimals (जानवरों की कुल संख्या) और $totalLegs (पैरों की कुल संख्या)।\n    * आउटपुट: एक सरणी [number_of_chickens, number_of_rabbits] लौटाता है यदि एक मान्य समाधान मौजूद है,\n    *         या \"No answer\" यदि कोई मान्य समाधान नहीं मिलता है।\n    * \n    * उदाहरण:\n    * 5 जानवरों और 12 पैरों के लिए, फ़ंक्शन [4, 1] (4 मुर्गियां और 1 खरगोश) लौटाएगा।\n    * 10 जानवरों और 16 पैरों के लिए, फ़ंक्शन \"No answer\" लौटाएगा क्योंकि कोई मान्य संयोजन मौजूद नहीं है।\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hu": "<?php\n\n/**\n    * Kiszámítja a csirkék és nyulak számát egy farmon.\n    * Az állatok összes száma és a lábak összes száma alapján a függvény meghatározza,\n    * hány csirke és nyúl van. \n    * Feltételezések: \n    * - Minden csirkének 2 lába van.\n    * - Minden nyúlnak 4 lába van.\n    * - Az állatok és lábak összes száma nem negatív egész számok.\n    * \n    * Bemenet: Két egész szám, $totalAnimals (az állatok összes száma) és $totalLegs (a lábak összes száma).\n    * Kimenet: Egy tömböt ad vissza [number_of_chickens, number_of_rabbits] ha létezik érvényes megoldás, \n    *          vagy \"Nincs megoldás\", ha nem található érvényes megoldás.\n    * \n    * Példa:\n    * 5 állat és 12 láb esetén a függvény [4, 1] (4 csirke és 1 nyúl) értéket ad vissza.\n    * 10 állat és 16 láb esetén a függvény \"Nincs megoldás\" értéket ad vissza, mivel nincs érvényes kombináció.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) "
    },
    "prompt_bertscore": {
      "sq": "0.9884176638514747",
      "hy": "0.9862174351207512",
      "bn": "0.9939783213685464",
      "bg": "0.9967879481082849",
      "zh": "0.9778070275269719",
      "fr": "0.9979823125894476",
      "de": "0.9980069427566959",
      "ha": "0.976930868916227",
      "hi": "0.9977957986616558",
      "hu": "0.9783985488016939"
    },
    "canonical_solution": "{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }",
    "instruction": {
      "en": "Write a PHP function `function calculateAnimals($totalAnimals, $totalLegs)` to solve the following problem:\nCalculates the number of chickens and rabbits in a farm.\nGiven the total number of animals and the total number of legs, the function determines\nhow many chickens and rabbits are there.\nAssumptions:\n- Each chicken has 2 legs.\n- Each rabbit has 4 legs.\n- The total number of animals and legs are non-negative integers.\n\nInput: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\nOutput: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists,\nor \"No answer\" if no valid solution is found.\n\nExample:\nFor 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\nFor 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.",
      "sq": "Shkruani një funksion PHP `function calculateAnimals($totalAnimals, $totalLegs)` për të zgjidhur problemin në vijim:\nLlogarit numrin e pulave dhe lepujve në një fermë.\nDuke dhënë numrin total të kafshëve dhe numrin total të këmbëve, funksioni përcakton\nsa pula dhe lepuj janë atje.\nSupozime:\n- Çdo pulë ka 2 këmbë.\n- Çdo lepur ka 4 këmbë.\n- Numri total i kafshëve dhe këmbëve janë numra të plotë jo-negativë.\n\nHyrja: Dy numra të plotë, $totalAnimals (numri total i kafshëve) dhe $totalLegs (numri total i këmbëve).\nDalja: Kthen një varg [numri_i_pulave, numri_i_lepujve] nëse ekziston një zgjidhje e vlefshme,\nose \"No answer\" nëse nuk gjendet asnjë zgjidhje e vlefshme.\n\nShembull:\nPër 5 kafshë dhe 12 këmbë, funksioni do të kthejë [4, 1] (4 pula dhe 1 lepur).\nPër 10 kafshë dhe 16 këmbë, funksioni do të kthejë \"No answer\" pasi nuk ekziston asnjë kombinim i vlefshëm.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateAnimals($totalAnimals, $totalLegs)`՝ հետևյալ խնդիրը լուծելու համար:\nՀաշվում է ֆերմայում հավերի և նապաստակների քանակը:\nՏրված է կենդանիների ընդհանուր քանակը և ոտքերի ընդհանուր քանակը, ֆունկցիան որոշում է\nթե քանի հավ և նապաստակ կա:\nԵնթադրություններ:\n- Յուրաքանչյուր հավ ունի 2 ոտք:\n- Յուրաքանչյուր նապաստակ ունի 4 ոտք:\n- Կենդանիների և ոտքերի ընդհանուր քանակը ոչ բացասական ամբողջ թվեր են:\n\nՄուտք: Երկու ամբողջ թիվ, $totalAnimals (կենդանիների ընդհանուր քանակը) և $totalLegs (ոտքերի ընդհանուր քանակը):\nԵլք: Վերադարձնում է զանգված [number_of_chickens, number_of_rabbits], եթե գոյություն ունի վավեր լուծում,\nկամ \"No answer\", եթե վավեր լուծում չի գտնվել:\n\nՕրինակ:\n5 կենդանի և 12 ոտքերի դեպքում ֆունկցիան կվերադարձնի [4, 1] (4 հավ և 1 նապաստակ):\n10 կենդանի և 16 ոտքերի դեպքում ֆունկցիան կվերադարձնի \"No answer\", քանի որ վավեր համակցություն չկա:",
      "bn": "PHP ফাংশন `function calculateAnimals($totalAnimals, $totalLegs)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি খামারে মুরগি এবং খরগোশের সংখ্যা গণনা করে।\nমোট প্রাণীর সংখ্যা এবং মোট পায়ের সংখ্যা দেওয়া হলে, ফাংশনটি নির্ধারণ করে\nকতগুলি মুরগি এবং খরগোশ আছে।\nঅনুমানসমূহ:\n- প্রতিটি মুরগির ২টি পা থাকে।\n- প্রতিটি খরগোশের ৪টি পা থাকে।\n- প্রাণী এবং পায়ের মোট সংখ্যা অ-ঋণাত্মক পূর্ণসংখ্যা।\n\nইনপুট: দুটি পূর্ণসংখ্যা, $totalAnimals (প্রাণীর মোট সংখ্যা) এবং $totalLegs (পায়ের মোট সংখ্যা)।\nআউটপুট: একটি অ্যারে [number_of_chickens, number_of_rabbits] ফেরত দেয় যদি একটি বৈধ সমাধান থাকে,\nঅথবা \"No answer\" যদি কোন বৈধ সমাধান না পাওয়া যায়।\n\nউদাহরণ:\n৫টি প্রাণী এবং ১২টি পায়ের জন্য, ফাংশনটি [4, 1] (৪টি মুরগি এবং ১টি খরগোশ) ফেরত দেবে।\n১০টি প্রাণী এবং ১৬টি পায়ের জন্য, ফাংশনটি \"No answer\" ফেরত দেবে কারণ কোন বৈধ সমন্বয় নেই।",
      "bg": "Напишете PHP функция `function calculateAnimals($totalAnimals, $totalLegs)` за решаване на следния проблем:\nИзчислява броя на пилетата и зайците във фермата.\nДадени са общият брой на животните и общият брой на краката, функцията определя\nколко пилета и зайци има.\nПредположения:\n- Всяко пиле има 2 крака.\n- Всеки заек има 4 крака.\n- Общият брой на животните и краката са неотрицателни цели числа.\n\nВход: Две цели числа, $totalAnimals (общ брой на животните) и $totalLegs (общ брой на краката).\nИзход: Връща масив [number_of_chickens, number_of_rabbits] ако съществува валидно решение,\nили \"No answer\" ако не е намерено валидно решение.\n\nПример:\nЗа 5 животни и 12 крака, функцията ще върне [4, 1] (4 пилета и 1 заек).\nЗа 10 животни и 16 крака, функцията ще върне \"No answer\", тъй като не съществува валидна комбинация.",
      "zh": "编写一个 PHP 函数 `function calculateAnimals($totalAnimals, $totalLegs)` 来解决以下问题：\n计算农场中鸡和兔子的数量。\n给定动物的总数和腿的总数，该函数确定有多少只鸡和兔子。\n假设：\n- 每只鸡有 2 条腿。\n- 每只兔子有 4 条腿。\n- 动物和腿的总数是非负整数。\n\n输入：两个整数，$totalAnimals（动物的总数）和 $totalLegs（腿的总数）。\n输出：如果存在有效的解决方案，则返回一个数组 [number_of_chickens, number_of_rabbits]，\n如果没有找到有效的解决方案，则返回 \"No answer\"。\n\n示例：\n对于 5 只动物和 12 条腿，函数将返回 [4, 1]（4 只鸡和 1 只兔子）。\n对于 10 只动物和 16 条腿，函数将返回 \"No answer\"，因为不存在有效组合。",
      "fr": "Écrire une fonction PHP `function calculateAnimals($totalAnimals, $totalLegs)` pour résoudre le problème suivant :\nCalcule le nombre de poulets et de lapins dans une ferme.\nÉtant donné le nombre total d'animaux et le nombre total de pattes, la fonction détermine\ncombien il y a de poulets et de lapins.\nHypothèses :\n- Chaque poulet a 2 pattes.\n- Chaque lapin a 4 pattes.\n- Le nombre total d'animaux et de pattes sont des entiers non négatifs.\n\nEntrée : Deux entiers, $totalAnimals (nombre total d'animaux) et $totalLegs (nombre total de pattes).\nSortie : Retourne un tableau [number_of_chickens, number_of_rabbits] si une solution valide existe,\nou \"No answer\" si aucune solution valide n'est trouvée.\n\nExemple :\nPour 5 animaux et 12 pattes, la fonction retournera [4, 1] (4 poulets et 1 lapin).\nPour 10 animaux et 16 pattes, la fonction retournera \"No answer\" car aucune combinaison valide n'existe.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateAnimals($totalAnimals, $totalLegs)`, um das folgende Problem zu lösen:\nBerechnet die Anzahl der Hühner und Kaninchen auf einem Bauernhof.\nGegeben die Gesamtzahl der Tiere und die Gesamtzahl der Beine, bestimmt die Funktion,\nwie viele Hühner und Kaninchen es gibt.\nAnnahmen:\n- Jedes Huhn hat 2 Beine.\n- Jedes Kaninchen hat 4 Beine.\n- Die Gesamtzahl der Tiere und Beine sind nicht-negative ganze Zahlen.\n\nEingabe: Zwei ganze Zahlen, $totalAnimals (Gesamtzahl der Tiere) und $totalLegs (Gesamtzahl der Beine).\nAusgabe: Gibt ein Array [number_of_chickens, number_of_rabbits] zurück, wenn eine gültige Lösung existiert,\noder \"No answer\", wenn keine gültige Lösung gefunden wird.\n\nBeispiel:\nFür 5 Tiere und 12 Beine gibt die Funktion [4, 1] zurück (4 Hühner und 1 Kaninchen).\nFür 10 Tiere und 16 Beine gibt die Funktion \"No answer\" zurück, da keine gültige Kombination existiert.",
      "ha": "Rubuta aikin PHP `function calculateAnimals($totalAnimals, $totalLegs)` don warware matsalar mai zuwa:\nLissafa adadin kaji da zomaye a gona.\nAn ba da jimillar adadin dabbobi da jimillar adadin ƙafafu, aikin yana tantance\nnawa ne kaji da zomaye a can.\nTsammani:\n- Kowace kaza tana da ƙafafu 2.\n- Kowane zomo yana da ƙafafu 4.\n- Jimillar adadin dabbobi da ƙafafu lambobi ne marasa kyau.\n\nShigar: Lambobi guda biyu, $totalAnimals (jimillar adadin dabbobi) da $totalLegs (jimillar adadin ƙafafu).\nFitarwa: Yana dawowa da jerin [number_of_chickens, number_of_rabbits] idan akwai ingantaccen mafita,\nko \"Babu amsa\" idan ba a sami ingantaccen mafita ba.\n\nMisali:\nDon dabbobi 5 da ƙafafu 12, aikin zai dawo da [4, 1] (kaji 4 da zomo 1).\nDon dabbobi 10 da ƙafafu 16, aikin zai dawo da \"Babu amsa\" domin babu ingantaccen haɗuwa.",
      "hi": "PHP फ़ंक्शन `function calculateAnimals($totalAnimals, $totalLegs)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nफार्म में मुर्गियों और खरगोशों की संख्या की गणना करता है।\nकुल जानवरों की संख्या और कुल पैरों की संख्या दी गई है, फ़ंक्शन यह निर्धारित करता है\nकि कितनी मुर्गियाँ और खरगोश हैं।\nअनुमान:\n- प्रत्येक मुर्गी के 2 पैर होते हैं।\n- प्रत्येक खरगोश के 4 पैर होते हैं।\n- जानवरों और पैरों की कुल संख्या गैर-ऋणात्मक पूर्णांक हैं।\n\nइनपुट: दो पूर्णांक, $totalAnimals (कुल जानवरों की संख्या) और $totalLegs (कुल पैरों की संख्या)।\nआउटपुट: यदि कोई मान्य समाधान मौजूद है, तो एक array [number_of_chickens, number_of_rabbits] लौटाता है,\nया \"No answer\" लौटाता है यदि कोई मान्य समाधान नहीं मिलता है।\n\nउदाहरण:\n5 जानवरों और 12 पैरों के लिए, फ़ंक्शन [4, 1] लौटाएगा (4 मुर्गियाँ और 1 खरगोश)।\n10 जानवरों और 16 पैरों के लिए, फ़ंक्शन \"No answer\" लौटाएगा क्योंकि कोई मान्य संयोजन मौजूद नहीं है।",
      "hu": "Írj egy PHP függvényt `function calculateAnimals($totalAnimals, $totalLegs)` a következő probléma megoldására:\nKiszámítja a csirkék és nyulak számát egy farmon.\nAdott az állatok teljes száma és a lábak teljes száma, a függvény meghatározza,\nhány csirke és nyúl van.\nFeltételezések:\n- Minden csirkének 2 lába van.\n- Minden nyúlnak 4 lába van.\n- Az állatok és lábak teljes száma nem negatív egész számok.\n\nBemenet: Két egész szám, $totalAnimals (az állatok teljes száma) és $totalLegs (a lábak teljes száma).\nKimenet: Egy tömböt ad vissza [number_of_chickens, number_of_rabbits] ha létezik érvényes megoldás,\nvagy \"No answer\" ha nem található érvényes megoldás.\n\nPélda:\n5 állat és 12 láb esetén a függvény visszaadja [4, 1] (4 csirke és 1 nyúl).\n10 állat és 16 láb esetén a függvény \"No answer\"-t ad vissza, mivel nem létezik érvényes kombináció."
    },
    "instruction_bertscore": {
      "sq": "0.9885134036951334",
      "hy": "0.9917995447189747",
      "bn": "0.9837718978694496",
      "bg": "0.9894835144761078",
      "zh": "0.9735354811828166",
      "fr": "0.9960808239518006",
      "de": "0.9946280413449115",
      "ha": "0.9827098212220561",
      "hi": "0.978097822404807",
      "hu": "0.9893230211282317"
    },
    "level": "middle",
    "test": "function main(){\n    assert(calculateAnimals(14, 32) === [12, 2]);\n    assert(calculateAnimals(10, 16) === \"No answer\");\n    assert(calculateAnimals(5, 12) === [4, 1]);\n    assert(calculateAnimals(3, 10) === [1, 2]);\n    assert(calculateAnimals(0, 0) === [0, 0]);\n}\n\n\nmain();\n?>",
    "entry_point": "calculateAnimals",
    "signature": "function calculateAnimals($totalAnimals, $totalLegs)",
    "docstring": {
      "en": "Calculates the number of chickens and rabbits in a farm.\nGiven the total number of animals and the total number of legs, the function determines\nhow many chickens and rabbits are there.\nAssumptions:\n- Each chicken has 2 legs.\n- Each rabbit has 4 legs.\n- The total number of animals and legs are non-negative integers.\n\nInput: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\nOutput: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists,\nor \"No answer\" if no valid solution is found.\n\nExample:\nFor 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\nFor 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.",
      "sq": "Llogarit numrin e pulave dhe lepujve në një fermë. Duke pasur parasysh numrin total të kafshëve dhe numrin total të këmbëve, funksioni përcakton sa pula dhe lepuj janë atje. Supozime: - Çdo pulë ka 2 këmbë. - Çdo lepur ka 4 këmbë. - Numri total i kafshëve dhe këmbëve janë numra të plotë jo-negativë.\n\nInput: Dy numra të plotë, $totalAnimals (numri total i kafshëve) dhe $totalLegs (numri total i këmbëve). Output: Kthen një varg [number_of_chickens, number_of_rabbits] nëse ekziston një zgjidhje e vlefshme, ose \"No answer\" nëse nuk gjendet asnjë zgjidhje e vlefshme.\n\nShembull: Për 5 kafshë dhe 12 këmbë, funksioni do të kthejë [4, 1] (4 pula dhe 1 lepur). Për 10 kafshë dhe 16 këmbë, funksioni do të kthejë \"No answer\" pasi nuk ekziston asnjë kombinim i vlefshëm.",
      "hy": "Հաշվում է ֆերմայում հավերի և նապաստակների քանակը։ Տրված է կենդանիների ընդհանուր քանակը և ոտքերի ընդհանուր քանակը, ֆունկցիան որոշում է, թե որքան հավ և նապաստակ կա։ Ենթադրություններ՝ - Յուրաքանչյուր հավ ունի 2 ոտք։ - Յուրաքանչյուր նապաստակ ունի 4 ոտք։ - Կենդանիների և ոտքերի ընդհանուր քանակները ոչ բացասական ամբողջ թվեր են։\n\nՄուտք՝ Երկու ամբողջ թիվ՝ $totalAnimals (կենդանիների ընդհանուր քանակը) և $totalLegs (ոտքերի ընդհանուր քանակը)։ Ելք՝ Վերադարձնում է զանգված [number_of_chickens, number_of_rabbits], եթե գոյություն ունի վավեր լուծում, կամ \"No answer\", եթե վավեր լուծում չի գտնվել։\n\nՕրինակ՝ 5 կենդանիների և 12 ոտքերի դեպքում ֆունկցիան կվերադարձնի [4, 1] (4 հավ և 1 նապաստակ)։ 10 կենդանիների և 16 ոտքերի դեպքում ֆունկցիան կվերադարձնի \"No answer\", քանի որ վավեր համադրություն գոյություն չունի։",
      "bn": "মুরগি এবং খরগোশের সংখ্যা গণনা করে একটি খামারে। \nপ্রাণীদের মোট সংখ্যা এবং মোট পায়ের সংখ্যা দেওয়া হলে, ফাংশনটি নির্ধারণ করে \nকতগুলি মুরগি এবং খরগোশ আছে। \nঅনুমানসমূহ:\n- প্রতিটি মুরগির ২টি পা থাকে।\n- প্রতিটি খরগোশের ৪টি পা থাকে।\n- প্রাণী এবং পায়ের মোট সংখ্যা অ-ঋণাত্মক পূর্ণসংখ্যা।\n\nইনপুট: দুটি পূর্ণসংখ্যা, $totalAnimals (প্রাণীর মোট সংখ্যা) এবং $totalLegs (পায়ের মোট সংখ্যা)।\nআউটপুট: একটি অ্যারে [number_of_chickens, number_of_rabbits] ফেরত দেয় যদি একটি বৈধ সমাধান থাকে, \nঅথবা \"No answer\" যদি কোনও বৈধ সমাধান পাওয়া না যায়।\n\nউদাহরণ:\n৫টি প্রাণী এবং ১২টি পায়ের জন্য, ফাংশনটি [4, 1] (৪টি মুরগি এবং ১টি খরগোশ) ফেরত দেবে।\n১০টি প্রাণী এবং ১৬টি পায়ের জন্য, ফাংশনটি \"No answer\" ফেরত দেবে কারণ কোনও বৈধ সংমিশ্রণ নেই।",
      "bg": "Изчислява броя на пилетата и зайците във фермата.  \nДаден е общият брой на животните и общият брой на краката, функцията определя колко пилета и зайци има.  \nПредположения:  \n- Всяко пиле има 2 крака.  \n- Всеки заек има 4 крака.  \n- Общият брой на животните и краката са неотрицателни цели числа.  \n\nВход: Две цели числа, $totalAnimals (общ брой на животните) и $totalLegs (общ брой на краката).  \nИзход: Връща масив [number_of_chickens, number_of_rabbits] ако съществува валидно решение, или \"No answer\" ако не е намерено валидно решение.  \n\nПример:  \nЗа 5 животни и 12 крака, функцията ще върне [4, 1] (4 пилета и 1 заек).  \nЗа 10 животни и 16 крака, функцията ще върне \"No answer\", тъй като не съществува валидна комбинация.",
      "zh": "计算农场中的鸡和兔子的数量。  \n给定动物的总数和腿的总数，该函数确定有多少只鸡和兔子。  \n假设：  \n- 每只鸡有2条腿。  \n- 每只兔子有4条腿。  \n- 动物和腿的总数是非负整数。  \n\n输入：两个整数，$totalAnimals（动物总数）和 $totalLegs（腿的总数）。  \n输出：如果存在有效解，则返回一个数组 [number_of_chickens, number_of_rabbits]，如果没有找到有效解，则返回 \"No answer\"。  \n\n示例：  \n对于5只动物和12条腿，函数将返回 [4, 1]（4只鸡和1只兔子）。  \n对于10只动物和16条腿，函数将返回 \"No answer\"，因为不存在有效组合。",
      "fr": "Calcule le nombre de poulets et de lapins dans une ferme.\nÉtant donné le nombre total d'animaux et le nombre total de pattes, la fonction détermine\ncombien il y a de poulets et de lapins.\nHypothèses :\n- Chaque poulet a 2 pattes.\n- Chaque lapin a 4 pattes.\n- Le nombre total d'animaux et de pattes sont des entiers non négatifs.\n\nEntrée : Deux entiers, $totalAnimals (nombre total d'animaux) et $totalLegs (nombre total de pattes).\nSortie : Renvoie un tableau [number_of_chickens, number_of_rabbits] si une solution valide existe,\nou \"No answer\" si aucune solution valide n'est trouvée.\n\nExemple :\nPour 5 animaux et 12 pattes, la fonction renverra [4, 1] (4 poulets et 1 lapin).\nPour 10 animaux et 16 pattes, la fonction renverra \"No answer\" car aucune combinaison valide n'existe.",
      "de": "Berechnet die Anzahl der Hühner und Kaninchen auf einem Bauernhof.\nAngesichts der Gesamtanzahl der Tiere und der Gesamtanzahl der Beine bestimmt die Funktion,\nwie viele Hühner und Kaninchen es gibt.\nAnnahmen:\n- Jedes Huhn hat 2 Beine.\n- Jedes Kaninchen hat 4 Beine.\n- Die Gesamtanzahl der Tiere und Beine sind nicht-negative ganze Zahlen.\n\nEingabe: Zwei ganze Zahlen, $totalAnimals (Gesamtanzahl der Tiere) und $totalLegs (Gesamtanzahl der Beine).\nAusgabe: Gibt ein Array [number_of_chickens, number_of_rabbits] zurück, wenn eine gültige Lösung existiert,\noder \"No answer\", wenn keine gültige Lösung gefunden wird.\n\nBeispiel:\nFür 5 Tiere und 12 Beine wird die Funktion [4, 1] zurückgeben (4 Hühner und 1 Kaninchen).\nFür 10 Tiere und 16 Beine wird die Funktion \"No answer\" zurückgeben, da keine gültige Kombination existiert.",
      "ha": "Lissafi yawan kaji da zomaye a gona.\nAn ba da jimillar dabbobi da jimillar kafafu, aikin yana tantance\nnawa ne kaji da zomaye a can.\nHasashe:\n- Kowace kaza tana da kafafu 2.\n- Kowanne zomo yana da kafafu 4.\n- Jimillar dabbobi da kafafu lambobi ne marasa kyau.\n\nShigarwa: Lambobi guda biyu, $totalAnimals (jimillar dabbobi) da $totalLegs (jimillar kafafu).\nFitarwa: Yana dawowa da jerin [number_of_chickens, number_of_rabbits] idan akwai ingantaccen mafita,\nko \"Babu amsa\" idan ba a sami ingantaccen mafita ba.\n\nMisali:\nDon dabbobi 5 da kafafu 12, aikin zai dawo da [4, 1] (kaji 4 da zomo 1).\nDon dabbobi 10 da kafafu 16, aikin zai dawo da \"Babu amsa\" saboda babu ingantaccen haɗuwa.",
      "hi": "मुर्गियों और खरगोशों की संख्या की गणना करता है।  \nकुल जानवरों की संख्या और कुल पैरों की संख्या को देखते हुए, यह फ़ंक्शन निर्धारित करता है कि कितनी मुर्गियाँ और खरगोश हैं।\n\nमान्यताएँ:\n- प्रत्येक मुर्गी के 2 पैर होते हैं।\n- प्रत्येक खरगोश के 4 पैर होते हैं।\n- जानवरों और पैरों की कुल संख्या गैर-ऋणात्मक पूर्णांक हैं।\n\nइनपुट: दो पूर्णांक, $totalAnimals (जानवरों की कुल संख्या) और $totalLegs (पैरों की कुल संख्या)।\nआउटपुट: यदि कोई मान्य समाधान मौजूद है तो एक array [number_of_chickens, number_of_rabbits] लौटाता है, \nया \"No answer\" लौटाता है यदि कोई मान्य समाधान नहीं मिलता है।\n\nउदाहरण:\n5 जानवरों और 12 पैरों के लिए, फ़ंक्शन [4, 1] (4 मुर्गियाँ और 1 खरगोश) लौटाएगा।\n10 जानवरों और 16 पैरों के लिए, फ़ंक्शन \"No answer\" लौटाएगा क्योंकि कोई मान्य संयोजन मौजूद नहीं है।",
      "hu": "Kiszámítja a csirkék és nyulak számát egy farmon.  \nAdott az állatok teljes száma és a lábak teljes száma, a függvény meghatározza,  \nhány csirke és nyúl van.  \nFeltételezések:  \n- Minden csirkének 2 lába van.  \n- Minden nyúlnak 4 lába van.  \n- Az állatok és lábak teljes száma nemnegatív egész számok.  \n\nBemenet: Két egész szám, $totalAnimals (az állatok teljes száma) és $totalLegs (a lábak teljes száma).  \nKimenet: Visszaad egy tömböt [number_of_chickens, number_of_rabbits], ha létezik érvényes megoldás,  \nvagy \"Nincs megoldás\", ha nem található érvényes megoldás.  \n\nPélda:  \n5 állat és 12 láb esetén a függvény [4, 1] (4 csirke és 1 nyúl) értéket ad vissza.  \n10 állat és 16 láb esetén a függvény \"Nincs megoldás\" értéket ad vissza, mivel nem létezik érvényes kombináció."
    },
    "docstring_bertscore": {
      "sq": "0.9847767689671051",
      "hy": "0.9908200983100917",
      "bn": "0.985863475781747",
      "bg": "0.9948115758169876",
      "zh": "0.9730732682861485",
      "fr": "0.9945191918961044",
      "de": "0.9975522778145071",
      "ha": "0.938591828660016",
      "hi": "0.9829098420157583",
      "hu": "0.9834916304018094"
    }
  },
  {
    "task_id": "PHP/11",
    "prompt": {
      "en": "<?php\n\n/**\n * Identifies the most frequently occurring character in a given string.\n * The string is composed of lowercase letters from 'a' to 'z'.\n * If there are multiple characters with the same highest frequency,\n * the character with the smallest ASCII value is returned.\n * \n * Example:\n * Input: \"apple\"\n * Output: \"p 2\" (The character 'p' appears twice)\n * \n * Input: \"environment\"\n * Output: \"n 3\" (The character 'n' appears three times, the most frequent)\n */\n\nfunction findMostFrequentChar($string) ",
      "sq": "<?php\n\n/**\n * Identifikon karakterin që ndodh më shpesh në një varg të dhënë.\n * Vargu është i përbërë nga shkronjat e vogla nga 'a' deri te 'z'.\n * Nëse ka disa karaktere me të njëjtën frekuencë më të lartë,\n * kthehet karakteri me vlerën më të vogël ASCII.\n * \n * Shembull:\n * Hyrja: \"apple\"\n * Dalja: \"p 2\" (Karakteri 'p' shfaqet dy herë)\n * \n * Hyrja: \"environment\"\n * Dalja: \"n 3\" (Karakteri 'n' shfaqet tre herë, më i shpeshti)\n */\n\nfunction findMostFrequentChar($string) ",
      "hy": "<?php\n\n/**\n * Հայտնաբերում է տրված տողի մեջ ամենահաճախ հանդիպող նիշը։\n * Տողը կազմված է փոքրատառ տառերից՝ 'a'-ից 'z'։\n * Եթե կան մի քանի նիշեր նույն ամենաբարձր հաճախականությամբ,\n * վերադարձվում է ամենափոքր ASCII արժեք ունեցող նիշը։\n * \n * Օրինակ:\n * Մուտք: \"apple\"\n * Ելք: \"p 2\" (Նիշը 'p' հայտնվում է երկու անգամ)\n * \n * Մուտք: \"environment\"\n * Ելք: \"n 3\" (Նիշը 'n' հայտնվում է երեք անգամ, ամենահաճախը)\n */\n\nfunction findMostFrequentChar($string) ",
      "bn": "<?php\n\n/**\n * প্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন উপস্থিত চরিত্রটি সনাক্ত করে।\n * স্ট্রিংটি 'a' থেকে 'z' পর্যন্ত ছোট হাতের অক্ষর নিয়ে গঠিত।\n * যদি একাধিক চরিত্র একই সর্বোচ্চ ফ্রিকোয়েন্সি থাকে,\n * তবে সবচেয়ে ছোট ASCII মানের চরিত্রটি ফেরত দেওয়া হয়।\n * \n * উদাহরণ:\n * ইনপুট: \"apple\"\n * আউটপুট: \"p 2\" (চরিত্র 'p' দুইবার উপস্থিত হয়েছে)\n * \n * ইনপুট: \"environment\"\n * আউটপুট: \"n 3\" (চরিত্র 'n' তিনবার উপস্থিত হয়েছে, সবচেয়ে ঘন ঘন)\n */\n\nfunction findMostFrequentChar($string) ",
      "bg": "<?php\n\n/**\n * Идентифицира най-често срещания символ в даден низ.\n * Низът се състои от малки букви от 'a' до 'z'.\n * Ако има няколко символа с еднаква най-висока честота,\n * се връща символът с най-малка ASCII стойност.\n * \n * Пример:\n * Вход: \"apple\"\n * Изход: \"p 2\" (Символът 'p' се появява два пъти)\n * \n * Вход: \"environment\"\n * Изход: \"n 3\" (Символът 'n' се появява три пъти, най-често срещан)\n */\n\nfunction findMostFrequentChar($string) ",
      "zh": "<?php\n\n/**\n * 识别给定字符串中出现频率最高的字符。\n * 字符串由从 'a' 到 'z' 的小写字母组成。\n * 如果有多个字符具有相同的最高频率，\n * 则返回 ASCII 值最小的字符。\n * \n * 示例:\n * 输入: \"apple\"\n * 输出: \"p 2\" (字符 'p' 出现两次)\n * \n * 输入: \"environment\"\n * 输出: \"n 3\" (字符 'n' 出现三次，频率最高)\n */\n\nfunction findMostFrequentChar($string) ",
      "fr": "<?php\n\n/**\n * Identifie le caractère le plus fréquent dans une chaîne donnée.\n * La chaîne est composée de lettres minuscules de 'a' à 'z'.\n * S'il y a plusieurs caractères avec la même fréquence la plus élevée,\n * le caractère avec la plus petite valeur ASCII est retourné.\n * \n * Exemple:\n * Entrée: \"apple\"\n * Sortie: \"p 2\" (Le caractère 'p' apparaît deux fois)\n * \n * Entrée: \"environment\"\n * Sortie: \"n 3\" (Le caractère 'n' apparaît trois fois, le plus fréquent)\n */\n\nfunction findMostFrequentChar($string) ",
      "de": "<?php\n\n/**\n * Identifiziert das am häufigsten vorkommende Zeichen in einem gegebenen String.\n * Der String besteht aus Kleinbuchstaben von 'a' bis 'z'.\n * Wenn es mehrere Zeichen mit der gleichen höchsten Häufigkeit gibt,\n * wird das Zeichen mit dem kleinsten ASCII-Wert zurückgegeben.\n * \n * Beispiel:\n * Eingabe: \"apple\"\n * Ausgabe: \"p 2\" (Das Zeichen 'p' erscheint zweimal)\n * \n * Eingabe: \"environment\"\n * Ausgabe: \"n 3\" (Das Zeichen 'n' erscheint dreimal, am häufigsten)\n */\n\nfunction findMostFrequentChar($string) ",
      "ha": "<?php\n\n/**\n * Gano harafin da ya fi yawan bayyana a cikin wani kirtani da aka bayar.\n * Kirtanin ya ƙunshi ƙananan haruffa daga 'a' zuwa 'z'.\n * Idan akwai haruffa da yawa da suke da yawan bayyana iri ɗaya,\n * harafin da ke da ƙaramar ƙimar ASCII za a mayar.\n * \n * Misali:\n * Shigarwa: \"apple\"\n * Fitarwa: \"p 2\" (Harafin 'p' ya bayyana sau biyu)\n * \n * Shigarwa: \"environment\"\n * Fitarwa: \"n 3\" (Harafin 'n' ya bayyana sau uku, shi ne mafi yawa)\n */\n\nfunction findMostFrequentChar($string) ",
      "hi": "<?php\n\n/**\n * दिए गए स्ट्रिंग में सबसे अधिक बार आने वाले वर्ण की पहचान करता है।\n * स्ट्रिंग 'a' से 'z' तक के लोअरकेस अक्षरों से बनी होती है।\n * यदि कई वर्ण समान उच्चतम आवृत्ति के साथ हैं,\n * तो सबसे छोटे ASCII मान वाला वर्ण लौटाया जाता है।\n * \n * उदाहरण:\n * इनपुट: \"apple\"\n * आउटपुट: \"p 2\" (वर्ण 'p' दो बार आता है)\n * \n * इनपुट: \"environment\"\n * आउटपुट: \"n 3\" (वर्ण 'n' तीन बार आता है, सबसे अधिक बार)\n */\n\nfunction findMostFrequentChar($string) ",
      "hu": "<?php\n\n/**\n * Azonosítja a leggyakrabban előforduló karaktert egy adott sztringben.\n * A sztring kisbetűkből áll, 'a'-tól 'z'-ig.\n * Ha több karakter is ugyanazzal a legmagasabb gyakorisággal rendelkezik,\n * akkor a legkisebb ASCII értékű karakter kerül visszaadásra.\n * \n * Példa:\n * Bemenet: \"apple\"\n * Kimenet: \"p 2\" (A 'p' karakter kétszer jelenik meg)\n * \n * Bemenet: \"environment\"\n * Kimenet: \"n 3\" (Az 'n' karakter háromszor jelenik meg, a leggyakoribb)\n */\n\nfunction findMostFrequentChar($string) "
    },
    "prompt_bertscore": {
      "sq": "0.9816326486657039",
      "hy": "0.9876386354970558",
      "bn": "0.9644413878175153",
      "bg": "0.9888854383988118",
      "zh": "0.9511260015944606",
      "fr": "0.9947786031737359",
      "de": "0.9888854383988118",
      "ha": "0.9634967017253134",
      "hi": "0.9756246755305417",
      "hu": "0.982288128923119"
    },
    "canonical_solution": "{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}",
    "instruction": {
      "en": "Write a PHP function `function findMostFrequentChar($string)` to solve the following problem:\nIdentifies the most frequently occurring character in a given string.\nThe string is composed of lowercase letters from 'a' to 'z'.\nIf there are multiple characters with the same highest frequency,\nthe character with the smallest ASCII value is returned.\n\nExample:\nInput: \"apple\"\nOutput: \"p 2\" (The character 'p' appears twice)\n\nInput: \"environment\"\nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)",
      "sq": "Shkruani një funksion PHP `function findMostFrequentChar($string)` për të zgjidhur problemin në vijim:\nIdentifikon karakterin që ndodh më shpesh në një varg të dhënë.\nVargu përbëhet nga shkronja të vogla nga 'a' deri në 'z'.\nNëse ka shumë karaktere me të njëjtën frekuencë më të lartë,\nkthen karakterin me vlerën më të vogël ASCII.\n\nShembull:\nInput: \"apple\"\nOutput: \"p 2\" (Karakteri 'p' shfaqet dy herë)\n\nInput: \"environment\"\nOutput: \"n 3\" (Karakteri 'n' shfaqet tre herë, më i shpeshti)",
      "hy": "Գրեք PHP ֆունկցիա `function findMostFrequentChar($string)` հետևյալ խնդիրը լուծելու համար:\nՀայտնաբերում է ամենահաճախ հանդիպող սիմվոլը տրված տողում:\nՏողը կազմված է փոքրատառերից 'a'-ից 'z':\nԵթե կան մի քանի սիմվոլներ նույն ամենաբարձր հաճախականությամբ,\nվերադարձվում է փոքրագույն ASCII արժեք ունեցող սիմվոլը:\n\nՕրինակ:\nՄուտքագրում: \"apple\"\nԵլք: \"p 2\" (Սիմվոլը 'p' հայտնվում է երկու անգամ)\n\nՄուտքագրում: \"environment\"\nԵլք: \"n 3\" (Սիմվոլը 'n' հայտնվում է երեք անգամ, ամենահաճախը)",
      "bn": "একটি PHP ফাংশন `function findMostFrequentChar($string)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন উপস্থিত চরিত্রটি সনাক্ত করে।\nস্ট্রিংটি 'a' থেকে 'z' পর্যন্ত ছোট হাতের অক্ষর নিয়ে গঠিত।\nযদি একাধিক চরিত্র একই সর্বোচ্চ ফ্রিকোয়েন্সি থাকে,\nতাহলে সবচেয়ে ছোট ASCII মান সহ চরিত্রটি ফেরত দেওয়া হয়।\n\nউদাহরণ:\nইনপুট: \"apple\"\nআউটপুট: \"p 2\" (অক্ষর 'p' দুইবার উপস্থিত হয়েছে)\n\nইনপুট: \"environment\"\nআউটপুট: \"n 3\" (অক্ষর 'n' তিনবার উপস্থিত হয়েছে, সবচেয়ে ঘন ঘন)",
      "bg": "Напишете PHP функция `function findMostFrequentChar($string)`, за да решите следния проблем:\nИдентифицира най-често срещания символ в даден низ.\nНизът се състои от малки букви от 'a' до 'z'.\nАко има няколко символа с еднаква най-висока честота,\nсе връща символът с най-малка ASCII стойност.\n\nПример:\nВход: \"apple\"\nИзход: \"p 2\" (Символът 'p' се появява два пъти)\n\nВход: \"environment\"\nИзход: \"n 3\" (Символът 'n' се появява три пъти, най-често)",
      "zh": "编写一个 PHP 函数 `function findMostFrequentChar($string)` 来解决以下问题：\n识别给定字符串中出现频率最高的字符。\n字符串由从 'a' 到 'z' 的小写字母组成。\n如果有多个字符具有相同的最高频率，\n则返回 ASCII 值最小的字符。\n\n示例：\n输入: \"apple\"\n输出: \"p 2\" (字符 'p' 出现了两次)\n\n输入: \"environment\"\n输出: \"n 3\" (字符 'n' 出现了三次，出现频率最高)",
      "fr": "Écrire une fonction PHP `function findMostFrequentChar($string)` pour résoudre le problème suivant :\nIdentifie le caractère le plus fréquent dans une chaîne donnée.\nLa chaîne est composée de lettres minuscules de 'a' à 'z'.\nS'il y a plusieurs caractères avec la même fréquence la plus élevée,\nle caractère avec la plus petite valeur ASCII est renvoyé.\n\nExemple :\nEntrée : \"apple\"\nSortie : \"p 2\" (Le caractère 'p' apparaît deux fois)\n\nEntrée : \"environment\"\nSortie : \"n 3\" (Le caractère 'n' apparaît trois fois, le plus fréquent)",
      "de": "Schreiben Sie eine PHP-Funktion `function findMostFrequentChar($string)`, um das folgende Problem zu lösen:\nIdentifiziert das am häufigsten vorkommende Zeichen in einem gegebenen String.\nDer String besteht aus Kleinbuchstaben von 'a' bis 'z'.\nWenn es mehrere Zeichen mit der gleichen höchsten Häufigkeit gibt,\nwird das Zeichen mit dem kleinsten ASCII-Wert zurückgegeben.\n\nBeispiel:\nEingabe: \"apple\"\nAusgabe: \"p 2\" (Das Zeichen 'p' erscheint zweimal)\n\nEingabe: \"environment\"\nAusgabe: \"n 3\" (Das Zeichen 'n' erscheint dreimal, am häufigsten)",
      "ha": "Rubuta aikin PHP `function findMostFrequentChar($string)` don warware matsalar mai zuwa:\nGano harafin da yafi yawan fitowa a cikin wani kirtani da aka bayar.\nKirtanin ya ƙunshi ƙananan haruffa daga 'a' zuwa 'z'.\nIdan akwai haruffa da yawa da suka yi daidai da mafi girman yawa,\nana dawo da harafin da ke da mafi ƙarancin ƙimar ASCII.\n\nMisali:\nShigarwa: \"apple\"\nFitarwa: \"p 2\" (Harafin 'p' ya bayyana sau biyu)\n\nShigarwa: \"environment\"\nFitarwa: \"n 3\" (Harafin 'n' ya bayyana sau uku, mafi yawa)",
      "hi": "PHP फ़ंक्शन `function findMostFrequentChar($string)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदिए गए स्ट्रिंग में सबसे अधिक बार आने वाले वर्ण की पहचान करता है।\nस्ट्रिंग 'a' से 'z' तक के छोटे अक्षरों से बनी होती है।\nयदि कई वर्ण समान उच्चतम आवृत्ति के साथ हैं,\nतो सबसे छोटे ASCII मान वाला वर्ण लौटाया जाता है।\n\nउदाहरण:\nइनपुट: \"apple\"\nआउटपुट: \"p 2\" (वर्ण 'p' दो बार आता है)\n\nइनपुट: \"environment\"\nआउटपुट: \"n 3\" (वर्ण 'n' तीन बार आता है, सबसे अधिक बार)",
      "hu": "Írj egy PHP függvényt `function findMostFrequentChar($string)` a következő probléma megoldására:\nAzonosítja a leggyakrabban előforduló karaktert egy adott szövegben.\nA szöveg kisbetűkből áll 'a'-tól 'z'-ig.\nHa több karakter is ugyanazzal a legmagasabb gyakorisággal rendelkezik,\nakkor a legkisebb ASCII értékű karakter kerül visszaadásra.\n\nPélda:\nBemenet: \"apple\"\nKimenet: \"p 2\" (A 'p' karakter kétszer jelenik meg)\n\nBemenet: \"environment\"\nKimenet: \"n 3\" (Az 'n' karakter háromszor jelenik meg, a leggyakoribb)"
    },
    "instruction_bertscore": {
      "sq": "0.9847829265089172",
      "hy": "0.983563335969363",
      "bn": "0.9734180906276251",
      "bg": "0.9867442028912558",
      "zh": "0.95609891181405",
      "fr": "0.992188661635422",
      "de": "0.9867442028912558",
      "ha": "0.970548477512814",
      "hi": "0.955141910638224",
      "hu": "0.9748935170979522"
    },
    "level": "middle",
    "test": "function main(){\n    assert(findMostFrequentChar(\"abbccc\") === \"c 3\");\n    assert(findMostFrequentChar(\"adfadffasdf\") === \"f 4\");\n    assert(findMostFrequentChar(\"environment\") === \"n 3\");\n    assert(findMostFrequentChar(\"apple\") === \"p 2\");\n    assert(findMostFrequentChar(\"banana\") === \"a 3\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMostFrequentChar",
    "signature": "function findMostFrequentChar($string)",
    "docstring": {
      "en": "Identifies the most frequently occurring character in a given string.\nThe string is composed of lowercase letters from 'a' to 'z'.\nIf there are multiple characters with the same highest frequency,\nthe character with the smallest ASCII value is returned.\n\nExample:\nInput: \"apple\"\nOutput: \"p 2\" (The character 'p' appears twice)\n\nInput: \"environment\"\nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)",
      "sq": "Identifikon karakterin që shfaqet më shpesh në një varg të dhënë.\nVargu përbëhet nga shkronja të vogla nga 'a' deri në 'z'.\nNëse ka disa karaktere me të njëjtën frekuencë më të lartë,\nkthen karakterin me vlerën më të vogël ASCII.\n\nShembull:\nInput: \"apple\"\nOutput: \"p 2\" (Karakteri 'p' shfaqet dy herë)\n\nInput: \"environment\"\nOutput: \"n 3\" (Karakteri 'n' shfaqet tre herë, më shpesh)",
      "hy": "Հայտնաբերում է ամենահաճախ հանդիպող նիշը տրված տողում։  \nՏողը կազմված է փոքրատառերից 'a'-ից 'z'։  \nԵթե կան մի քանի նիշեր նույն ամենաբարձր հաճախականությամբ,  \nվերադարձվում է նիշը ամենափոքր ASCII արժեքով։  \n\nՕրինակ:  \nՄուտք: \"apple\"  \nԵլք: \"p 2\" (Նիշը 'p' հայտնվում է երկու անգամ)  \n\nՄուտք: \"environment\"  \nԵլք: \"n 3\" (Նիշը 'n' հայտնվում է երեք անգամ, ամենահաճախը)",
      "bn": "প্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন উপস্থিত চরিত্রটি সনাক্ত করে।\nপ্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন উপস্থিত অক্ষরটি সনাক্ত করে।  \nThe string is composed of lowercase letters from 'a' to 'z'.  \nস্ট্রিংটি 'a' থেকে 'z' পর্যন্ত ছোট হাতের অক্ষর নিয়ে গঠিত।  \nIf there are multiple characters with the same highest frequency,  \nযদি একই সর্বোচ্চ ঘনত্বের সাথে একাধিক অক্ষর থাকে,  \nthe character with the smallest ASCII value is returned.  \nতাহলে সবচেয়ে ছোট ASCII মানের অক্ষরটি ফেরত দেওয়া হয়।  \n\nExample:  \nউদাহরণ:  \nInput: \"apple\"  \nইনপুট: \"apple\"  \nOutput: \"p 2\" (The character 'p' appears twice)  \nআউটপুট: \"p 2\" (অক্ষর 'p' দুবার উপস্থিত হয়েছে)  \n\nInput: \"environment\"  \nইনপুট: \"environment\"  \nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)  \nআউটপুট: \"n 3\" (অক্ষর 'n' তিনবার উপস্থিত হয়েছে, সবচেয়ে ঘন ঘন)  ",
      "bg": "Идентифицира най-често срещания символ в даден низ.  \nНизът се състои от малки букви от 'a' до 'z'.  \nАко има няколко символа с еднаква най-висока честота,  \nсе връща символът с най-малка ASCII стойност.\n\nПример:  \nВход: \"apple\"  \nИзход: \"p 2\" (Символът 'p' се появява два пъти)\n\nВход: \"environment\"  \nИзход: \"n 3\" (Символът 'n' се появява три пъти, най-често)",
      "zh": "识别给定字符串中出现频率最高的字符。\n字符串由从 'a' 到 'z' 的小写字母组成。\n如果有多个字符具有相同的最高频率，\n则返回 ASCII 值最小的字符。\n\n示例：\n输入: \"apple\"\n输出: \"p 2\" (字符 'p' 出现了两次)\n\n输入: \"environment\"\n输出: \"n 3\" (字符 'n' 出现了三次，是最频繁的)",
      "fr": "Identifie le caractère le plus fréquent dans une chaîne de caractères donnée.  \nLa chaîne est composée de lettres minuscules de 'a' à 'z'.  \nS'il y a plusieurs caractères avec la même fréquence la plus élevée,  \nle caractère avec la plus petite valeur ASCII est retourné.  \n\nExemple:  \nEntrée: \"apple\"  \nSortie: \"p 2\" (Le caractère 'p' apparaît deux fois)  \n\nEntrée: \"environment\"  \nSortie: \"n 3\" (Le caractère 'n' apparaît trois fois, le plus fréquent)  ",
      "de": "Identifiziert das am häufigsten vorkommende Zeichen in einem gegebenen String.  \nDer String besteht aus Kleinbuchstaben von 'a' bis 'z'.  \nWenn es mehrere Zeichen mit der gleichen höchsten Häufigkeit gibt,  \nwird das Zeichen mit dem kleinsten ASCII-Wert zurückgegeben.\n\nBeispiel:  \nEingabe: \"apple\"  \nAusgabe: \"p 2\" (Das Zeichen 'p' erscheint zweimal)\n\nEingabe: \"environment\"  \nAusgabe: \"n 3\" (Das Zeichen 'n' erscheint dreimal, am häufigsten)",
      "ha": "Yana gano harafin da yafi yawan faruwa a cikin wani kirtani da aka bayar. Kirtanin ya ƙunshi ƙananan haruffa daga 'a' zuwa 'z'. Idan akwai haruffa da yawa da suke da yawan faruwa iri ɗaya, ana mayar da harafin da ke da ƙaramar ƙimar ASCII.\n\nMisali:\nShigarwa: \"apple\"\nFitarwa: \"p 2\" (Harafin 'p' ya bayyana sau biyu)\n\nShigarwa: \"environment\"\nFitarwa: \"n 3\" (Harafin 'n' ya bayyana sau uku, mafi yawa)",
      "hi": "सबसे अधिक बार आने वाले वर्ण की पहचान करता है एक दिए गए स्ट्रिंग में।  \nस्ट्रिंग छोटे अक्षरों से बनी होती है 'a' से 'z' तक।  \nयदि कई वर्ण समान उच्चतम आवृत्ति के साथ हैं,  \nतो सबसे छोटे ASCII मान वाला वर्ण लौटाया जाता है।\n\nउदाहरण:  \nइनपुट: \"apple\"  \nआउटपुट: \"p 2\" (वर्ण 'p' दो बार आता है)\n\nइनपुट: \"environment\"  \nआउटपुट: \"n 3\" (वर्ण 'n' तीन बार आता है, सबसे अधिक बार)",
      "hu": "Azonosítja a leggyakrabban előforduló karaktert egy adott sztringben.\nA sztring kisbetűkből áll, 'a'-tól 'z'-ig.\nHa több karakter is azonos legmagasabb gyakorisággal rendelkezik,\nakkor a legkisebb ASCII értékű karakter kerül visszaadásra.\n\nPélda:\nBemenet: \"apple\"\nKimenet: \"p 2\" (A 'p' karakter kétszer fordul elő)\n\nBemenet: \"environment\"\nKimenet: \"n 3\" (Az 'n' karakter háromszor fordul elő, a leggyakoribb)"
    },
    "docstring_bertscore": {
      "sq": "0.9645804290842398",
      "hy": "0.9786410764969374",
      "bn": "1",
      "bg": "0.98634197636966",
      "zh": "0.9446436991093871",
      "fr": "0.9915002087347551",
      "de": "0.9877939644550251",
      "ha": "0.9658145196416096",
      "hi": "0.9622365905880281",
      "hu": "0.9813899223400793"
    }
  },
  {
    "task_id": "PHP/12",
    "prompt": {
      "en": "<?php\n\n\n/**\n    * Finds the fractional element in a diagonally arranged sequence.\n    * In this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\n    * For example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * The function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\n    * Input: An integer 'n' (n < 20000).\n    * Output: A string representing the 'n'th element in the sequence.\n    * Examples:\n    * - Input: 3, Output: \"2/1\"\n    * - Input: 14, Output: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "sq": "<?php\n\n\n/**\n    * Gjen elementin fraksional në një sekuencë të organizuar diagonal.\n    * Në këtë sekuencë, fraksionet janë të organizuara në një model diagonal. Rreshti i parë përmban fraksione me numërues 1 dhe emërues në rritje. Çdo rresht pasues rrit numëruesin dhe ul emëruesin derisa të arrijë 1.\n    * Për shembull, sekuenca fillon me 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Funksioni merr një numër të plotë 'n' dhe kthen elementin e 'n'-të në këtë sekuencë si një varg në formën 'numërues/emërues'.\n    * Hyrja: Një numër i plotë 'n' (n < 20000).\n    * Dalja: Një varg që përfaqëson elementin e 'n'-të në sekuencë.\n    * Shembuj:\n    * - Hyrja: 3, Dalja: \"2/1\"\n    * - Hyrja: 14, Dalja: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hy": "<?php\n\n\n/**\n    * Գտնում է կոտորակային տարրը անկյունագծային դասավորված հաջորդականության մեջ:\n    * Այս հաջորդականության մեջ կոտորակները դասավորված են անկյունագծային ձևով: Առաջին տողը պարունակում է կոտորակներ, որոնց համարիչը 1 է և հայտարարը աճում է: Յուրաքանչյուր հաջորդ տողում համարիչը աճում է և հայտարարը նվազում է մինչև հասնում է 1-ի:\n    * Օրինակ, հաջորդականությունը սկսվում է 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Ֆունկցիան ընդունում է ամբողջ թիվ 'n' և վերադարձնում է այս հաջորդականության 'n'-րդ տարրը որպես տող 'համարիչ/հայտարար' ձևով:\n    * Մուտք: Ամբողջ թիվ 'n' (n < 20000):\n    * Ելք: Տող, որը ներկայացնում է հաջորդականության 'n'-րդ տարրը:\n    * Օրինակներ:\n    * - Մուտք: 3, Ելք: \"2/1\"\n    * - Մուտք: 14, Ելք: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "bn": "<?php\n\n\n/**\n    * একটি ত্রিভুজাকৃতির ক্রমে ভগ্নাংশ উপাদান খুঁজে বের করে।\n    * এই ক্রমে, ভগ্নাংশগুলি ত্রিভুজাকৃতির প্যাটার্নে সাজানো থাকে। প্রথম সারিতে লব 1 এবং গুণিতক বাড়তে থাকা ভগ্নাংশ থাকে। প্রতিটি পরবর্তী সারিতে লব বাড়ে এবং গুণিতক কমে যায় যতক্ষণ না এটি 1 এ পৌঁছায়।\n    * উদাহরণস্বরূপ, ক্রমটি শুরু হয় 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * ফাংশনটি একটি পূর্ণসংখ্যা 'n' গ্রহণ করে এবং এই ক্রমের 'n' তম উপাদানটি একটি স্ট্রিং হিসাবে 'লব/গুণিতক' আকারে ফেরত দেয়।\n    * ইনপুট: একটি পূর্ণসংখ্যা 'n' (n < 20000)।\n    * আউটপুট: ক্রমের 'n' তম উপাদানটি প্রতিনিধিত্বকারী একটি স্ট্রিং।\n    * উদাহরণ:\n    * - ইনপুট: 3, আউটপুট: \"2/1\"\n    * - ইনপুট: 14, আউটপুট: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "bg": "<?php\n\n\n/**\n    * Намира дробния елемент в диагонално подредена последователност.\n    * В тази последователност дробите са подредени в диагонален модел. Първият ред съдържа дроби с числител 1 и нарастващи знаменатели. Всеки следващ ред увеличава числителя и намалява знаменателя, докато достигне 1.\n    * Например, последователността започва с 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Функцията приема цяло число 'n' и връща 'n'-тия елемент в тази последователност като низ във формата 'числител/знаменател'.\n    * Вход: Цяло число 'n' (n < 20000).\n    * Изход: Низ, представляващ 'n'-тия елемент в последователността.\n    * Примери:\n    * - Вход: 3, Изход: \"2/1\"\n    * - Вход: 14, Изход: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "zh": "<?php\n\n\n/**\n    * 在对角排列的序列中找到分数元素。\n    * 在这个序列中，分数按照对角线模式排列。第一行包含分子为1且分母递增的分数。每一行后续行增加分子并减少分母，直到达到1。\n    * 例如，序列以1/1, 1/2, 2/1, 3/1, 2/2, ...开始\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * 该函数接受一个整数'n'并返回该序列中的第'n'个元素，格式为字符串形式'numerator/denominator'。\n    * 输入：一个整数'n' (n < 20000)。\n    * 输出：表示序列中第'n'个元素的字符串。\n    * 示例：\n    * - 输入: 3, 输出: \"2/1\"\n    * - 输入: 14, 输出: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "fr": "<?php\n\n\n/**\n    * Trouve l'élément fractionnaire dans une séquence disposée en diagonale.\n    * Dans cette séquence, les fractions sont arrangées selon un motif diagonal. La première ligne contient des fractions avec le numérateur 1 et des dénominateurs croissants. Chaque ligne suivante augmente le numérateur et diminue le dénominateur jusqu'à atteindre 1.\n    * Par exemple, la séquence commence par 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * La fonction prend un entier 'n' et renvoie le 'nième' élément de cette séquence sous forme de chaîne de caractères sous la forme 'numérateur/dénominateur'.\n    * Entrée : Un entier 'n' (n < 20000).\n    * Sortie : Une chaîne représentant le 'nième' élément de la séquence.\n    * Exemples :\n    * - Entrée : 3, Sortie : \"2/1\"\n    * - Entrée : 14, Sortie : \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "de": "<?php\n\n\n/**\n    * Findet das Bruch-Element in einer diagonal angeordneten Sequenz.\n    * In dieser Sequenz sind Brüche in einem diagonalen Muster angeordnet. Die erste Zeile enthält Brüche mit dem Zähler 1 und zunehmenden Nennern. Jede nachfolgende Zeile erhöht den Zähler und verringert den Nenner, bis er 1 erreicht.\n    * Zum Beispiel beginnt die Sequenz mit 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Die Funktion nimmt eine ganze Zahl 'n' und gibt das 'n'-te Element in dieser Sequenz als Zeichenkette in der Form 'Zähler/Nenner' zurück.\n    * Eingabe: Eine ganze Zahl 'n' (n < 20000).\n    * Ausgabe: Eine Zeichenkette, die das 'n'-te Element in der Sequenz darstellt.\n    * Beispiele:\n    * - Eingabe: 3, Ausgabe: \"2/1\"\n    * - Eingabe: 14, Ausgabe: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "ha": "<?php\n\n\n/**\n    * Nemi abin kason a cikin jerin da aka shirya a diagonal.\n    * A cikin wannan jerin, ana shirya kason a cikin tsarin diagonal. Jeren farko yana dauke da kason da ke da numerator 1 da kuma denominator da ke karuwa. Kowanne jere na gaba yana kara numerator kuma yana rage denominator har sai ya kai 1.\n    * Alal misali, jerin yana farawa da 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Aikin yana daukar cikakken lamba 'n' kuma yana mayar da abin 'n' a cikin wannan jerin a matsayin kirtani a cikin tsarin 'numerator/denominator'.\n    * Shigarwa: Cikakken lamba 'n' (n < 20000).\n    * Fitarwa: Kirtani da ke wakiltar abin 'n' a cikin jerin.\n    * Misalai:\n    * - Shigarwa: 3, Fitarwa: \"2/1\"\n    * - Shigarwa: 14, Fitarwa: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hi": "<?php\n\n\n/**\n    * एक विकर्ण रूप से व्यवस्थित अनुक्रम में भिन्नात्मक तत्व खोजता है।\n    * इस अनुक्रम में, भिन्नों को एक विकर्ण पैटर्न में व्यवस्थित किया जाता है। पहली पंक्ति में अंश 1 और बढ़ते हरों के साथ भिन्न होते हैं। प्रत्येक अगली पंक्ति अंश को बढ़ाती है और हर को घटाती है जब तक कि यह 1 तक नहीं पहुँच जाता।\n    * उदाहरण के लिए, अनुक्रम 1/1, 1/2, 2/1, 3/1, 2/2, ... से शुरू होता है\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * यह फ़ंक्शन एक पूर्णांक 'n' लेता है और इस अनुक्रम में 'n'वें तत्व को एक स्ट्रिंग के रूप में 'अंश/हर' के रूप में लौटाता है।\n    * इनपुट: एक पूर्णांक 'n' (n < 20000)।\n    * आउटपुट: अनुक्रम में 'n'वें तत्व का प्रतिनिधित्व करने वाली एक स्ट्रिंग।\n    * उदाहरण:\n    * - इनपुट: 3, आउटपुट: \"2/1\"\n    * - इनपुट: 14, आउटपुट: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hu": "<?php\n\n\n/**\n    * Megkeresi a tört elemet egy átlósan elrendezett sorozatban.\n    * Ebben a sorozatban a törtek átlós mintázatban vannak elrendezve. Az első sor olyan törteket tartalmaz, amelyek számlálója 1, és a nevezők növekednek. Minden következő sor növeli a számlálót és csökkenti a nevezőt, amíg el nem éri az 1-et.\n    * Például a sorozat így kezdődik: 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * A függvény egy egész számot, 'n'-t kap, és visszaadja a sorozat 'n'-edik elemét sztringként, 'számláló/nevező' formában.\n    * Bemenet: Egy egész szám 'n' (n < 20000).\n    * Kimenet: Egy sztring, amely a sorozat 'n'-edik elemét reprezentálja.\n    * Példák:\n    * - Bemenet: 3, Kimenet: \"2/1\"\n    * - Bemenet: 14, Kimenet: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) "
    },
    "prompt_bertscore": {
      "sq": "0.9775521847481042",
      "hy": "0.9326209994061073",
      "bn": "0.9768015605381734",
      "bg": "0.9721853904829225",
      "zh": "0.981212148149053",
      "fr": "0.9744460028494806",
      "de": "0.9836999936715151",
      "ha": "0.9407132011294687",
      "hi": "0.9928576487587475",
      "hu": "0.9459260568493483"
    },
    "canonical_solution": "{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}",
    "instruction": {
      "en": "Write a PHP function `function findFractionalElement($n)` to solve the following problem:\nFinds the fractional element in a diagonally arranged sequence.\nIn this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\nFor example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nInput: An integer 'n' (n < 20000).\nOutput: A string representing the 'n'th element in the sequence.\nExamples:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"",
      "sq": "Shkruani një funksion PHP `function findFractionalElement($n)` për të zgjidhur problemin e mëposhtëm:\nGjen elementin fraksional në një sekuencë të renditur diagonalisht.\nNë këtë sekuencë, fraksionet janë të renditura në një model diagonal. Rreshti i parë përmban fraksione me numëruesin 1 dhe emëruesit në rritje. Çdo rresht pasues rrit numëruesin dhe zvogëlon emëruesin derisa të arrijë në 1.\nPër shembull, sekuenca fillon me 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nFunksioni merr një numër të plotë 'n' dhe kthen elementin e 'n'-të në këtë sekuencë si një varg në formën 'numërues/emërues'.\nHyrja: Një numër i plotë 'n' (n < 20000).\nDalja: Një varg që përfaqëson elementin e 'n'-të në sekuencë.\nShembuj:\n- Hyrja: 3, Dalja: \"2/1\"\n- Hyrja: 14, Dalja: \"2/4\"",
      "hy": "Գրեք PHP ֆունկցիա `function findFractionalElement($n)`՝ լուծելու հետևյալ խնդիրը:\nԳտնում է կոտորակային տարրը անկյունագծորեն դասավորված հաջորդականության մեջ:\nԱյս հաջորդականության մեջ կոտորակները դասավորված են անկյունագծային նախշով: Առաջին տողը պարունակում է կոտորակներ, որոնց համարիչը 1 է և անվանիչները աճում են: Յուրաքանչյուր հաջորդ տողում համարիչը մեծանում է և անվանիչը փոքրանում է, մինչև հասնում է 1-ի:\nՕրինակ, հաջորդականությունը սկսվում է 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nՖունկցիան ընդունում է ամբողջ թիվ 'n' և վերադարձնում է այս հաջորդականության 'n'-րդ տարրը որպես տող 'համարիչ/անվանիչ' ձևով:\nՄուտք: Ամբողջ թիվ 'n' (n < 20000):\nԵլք: Տող, որը ներկայացնում է հաջորդականության 'n'-րդ տարրը:\nՕրինակներ:\n- Մուտք: 3, Ելք: \"2/1\"\n- Մուտք: 14, Ելք: \"2/4\"",
      "bn": "PHP ফাংশন `function findFractionalElement($n)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি ত্রিভুজাকৃতি বিন্যাসে ক্রমিক ভগ্নাংশ খুঁজে বের করে।\nএই বিন্যাসে, ভগ্নাংশগুলি একটি ত্রিভুজাকৃতি প্যাটার্নে সাজানো থাকে। প্রথম সারিতে 1 এর লব্ধাংশ এবং ক্রমবর্ধমান হর থাকে। প্রতিটি পরবর্তী সারিতে লব্ধাংশ বৃদ্ধি পায় এবং হর হ্রাস পায় যতক্ষণ না এটি 1 এ পৌঁছায়।\nউদাহরণস্বরূপ, বিন্যাসটি শুরু হয় 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nফাংশনটি একটি পূর্ণসংখ্যা 'n' গ্রহণ করে এবং এই বিন্যাসে 'n'th উপাদানটি একটি স্ট্রিং হিসেবে 'লব্ধাংশ/হর' আকারে ফেরত দেয়।\nইনপুট: একটি পূর্ণসংখ্যা 'n' (n < 20000)।\nআউটপুট: একটি স্ট্রিং যা বিন্যাসে 'n'th উপাদানটি উপস্থাপন করে।\nউদাহরণ:\n- ইনপুট: 3, আউটপুট: \"2/1\"\n- ইনপুট: 14, আউটপুট: \"2/4\"",
      "bg": "Напишете PHP функция `function findFractionalElement($n)`, за да решите следния проблем:\nНамира дробния елемент в диагонално подредена последователност.\nВ тази последователност дробите са подредени в диагонален модел. Първият ред съдържа дроби с числител 1 и увеличаващи се знаменатели. Всеки следващ ред увеличава числителя и намалява знаменателя, докато достигне 1.\nНапример, последователността започва с 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nФункцията приема цяло число 'n' и връща 'n'-тия елемент в тази последователност като низ във формата 'числител/знаменател'.\nВход: Цяло число 'n' (n < 20000).\nИзход: Низ, представляващ 'n'-тия елемент в последователността.\nПримери:\n- Вход: 3, Изход: \"2/1\"\n- Вход: 14, Изход: \"2/4\"",
      "zh": "编写一个PHP函数 `function findFractionalElement($n)` 来解决以下问题：\n找到对角排列序列中的分数元素。\n在这个序列中，分数以对角线模式排列。第一行包含分子为1且分母递增的分数。每一行的分子增加，分母减少，直到分母为1。\n例如，序列以 1/1, 1/2, 2/1, 3/1, 2/2, ... 开始\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\n该函数接受一个整数 'n' 并返回该序列中的第 'n' 个元素，格式为 'numerator/denominator' 的字符串。\n输入：一个整数 'n' (n < 20000)。\n输出：表示序列中第 'n' 个元素的字符串。\n示例：\n- 输入: 3, 输出: \"2/1\"\n- 输入: 14, 输出: \"2/4\"",
      "fr": "Écrire une fonction PHP `function findFractionalElement($n)` pour résoudre le problème suivant :\nTrouver l'élément fractionnaire dans une séquence disposée en diagonale.\nDans cette séquence, les fractions sont arrangées selon un motif diagonal. La première ligne contient des fractions avec le numérateur 1 et des dénominateurs croissants. Chaque ligne suivante augmente le numérateur et diminue le dénominateur jusqu'à atteindre 1.\nPar exemple, la séquence commence par 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nLa fonction prend un entier 'n' et retourne le 'nième' élément de cette séquence sous forme de chaîne de caractères sous la forme 'numérateur/dénominateur'.\nEntrée : Un entier 'n' (n < 20000).\nSortie : Une chaîne représentant le 'nième' élément dans la séquence.\nExemples :\n- Entrée : 3, Sortie : \"2/1\"\n- Entrée : 14, Sortie : \"2/4\"",
      "de": "Schreiben Sie eine PHP-Funktion `function findFractionalElement($n)`, um das folgende Problem zu lösen:\nFindet das Bruch-Element in einer diagonal angeordneten Sequenz.\nIn dieser Sequenz sind Brüche in einem diagonalen Muster angeordnet. Die erste Zeile enthält Brüche mit dem Zähler 1 und zunehmenden Nennern. Jede nachfolgende Zeile erhöht den Zähler und verringert den Nenner, bis er 1 erreicht.\nZum Beispiel beginnt die Sequenz mit 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nDie Funktion nimmt eine ganze Zahl 'n' und gibt das 'n'-te Element in dieser Sequenz als String in der Form 'Zähler/Nenner' zurück.\nEingabe: Eine ganze Zahl 'n' (n < 20000).\nAusgabe: Ein String, der das 'n'-te Element in der Sequenz darstellt.\nBeispiele:\n- Eingabe: 3, Ausgabe: \"2/1\"\n- Eingabe: 14, Ausgabe: \"2/4\"",
      "ha": "Rubuta aikin PHP `function findFractionalElement($n)` don magance matsalar mai zuwa:\nNeman abu mai kason cikin jerin da aka tsara a diagonally.\nA cikin wannan jerin, ana tsara kason a cikin tsarin diagonal. Layin farko yana dauke da kason tare da mai rarraba 1 da masu rarraba masu karuwa. Kowanne layi na gaba yana kara mai rarraba kuma yana rage mai rarraba har sai ya kai 1.\nMisali, jerin yana farawa da 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nAikin yana daukar lamba 'n' kuma yana mayar da abu na 'n' a cikin wannan jerin a matsayin kirtani a cikin tsarin 'numerator/denominator'.\nShigar: Lamba 'n' (n < 20000).\nFitarwa: Kirtani da ke wakiltar abu na 'n' a cikin jerin.\nMisalai:\n- Shigar: 3, Fitarwa: \"2/1\"\n- Shigar: 14, Fitarwa: \"2/4\"",
      "hi": "PHP फ़ंक्शन `function findFractionalElement($n)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक विकर्ण रूप से व्यवस्थित अनुक्रम में अंशात्मक तत्व खोजें।\nइस अनुक्रम में, अंश विकर्ण पैटर्न में व्यवस्थित होते हैं। पहली पंक्ति में अंश होते हैं जिनमें अंश 1 होता है और हर बढ़ते हर में हर बढ़ता है। प्रत्येक अगली पंक्ति में अंश बढ़ता है और हर घटता है जब तक कि यह 1 तक नहीं पहुंच जाता।\nउदाहरण के लिए, अनुक्रम 1/1, 1/2, 2/1, 3/1, 2/2, ... से शुरू होता है\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nयह फ़ंक्शन एक पूर्णांक 'n' लेता है और इस अनुक्रम में 'n'th तत्व को एक स्ट्रिंग के रूप में 'numerator/denominator' के रूप में लौटाता है।\nइनपुट: एक पूर्णांक 'n' (n < 20000)।\nआउटपुट: अनुक्रम में 'n'th तत्व का प्रतिनिधित्व करने वाली एक स्ट्रिंग।\nउदाहरण:\n- इनपुट: 3, आउटपुट: \"2/1\"\n- इनपुट: 14, आउटपुट: \"2/4\"",
      "hu": "Írj egy PHP függvényt `function findFractionalElement($n)` a következő probléma megoldására:\nMegtalálja a tört elemet egy átlósan elrendezett sorozatban.\nEbben a sorozatban a törtek átlós mintázatban vannak elrendezve. Az első sor olyan törteket tartalmaz, amelyek számlálója 1, és a nevezők növekednek. Minden következő sor növeli a számlálót és csökkenti a nevezőt, amíg el nem éri az 1-et.\nPéldául a sorozat így kezdődik: 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nA függvény egy egész számot 'n' kap, és visszaadja a sorozat 'n'-edik elemét egy stringként a 'számláló/nevező' formában.\nBemenet: Egy egész szám 'n' (n < 20000).\nKimenet: Egy string, amely a sorozat 'n'-edik elemét képviseli.\nPéldák:\n- Bemenet: 3, Kimenet: \"2/1\"\n- Bemenet: 14, Kimenet: \"2/4\""
    },
    "instruction_bertscore": {
      "sq": "0.9749310582399678",
      "hy": "0.9538778268933179",
      "bn": "0.9280292608877238",
      "bg": "0.970753464066042",
      "zh": "0.9382142323056687",
      "fr": "0.9753465929970928",
      "de": "0.9824972867143488",
      "ha": "0.9464095231967872",
      "hi": "0.9717754173764666",
      "hu": "0.9416022707149808"
    },
    "level": "middle",
    "test": "function main(){\n    assert(findFractionalElement(3) === \"2/1\");\n    assert(findFractionalElement(14) === \"2/4\");\n    assert(findFractionalElement(7) === \"1/4\");\n    assert(findFractionalElement(12345) === \"59/99\");\n    \n}\n\nmain();\n?>",
    "entry_point": "findFractionalElement",
    "signature": "function findFractionalElement($n)",
    "docstring": {
      "en": "Finds the fractional element in a diagonally arranged sequence.\nIn this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\nFor example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nInput: An integer 'n' (n < 20000).\nOutput: A string representing the 'n'th element in the sequence.\nExamples:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"",
      "sq": "Gjen elementin fraksional në një sekuencë të rregulluar diagonal.\nNë këtë sekuencë, fraksionet janë të rregulluara në një model diagonal. Rreshti i parë përmban fraksione me numëruesin 1 dhe emëruesit në rritje. Çdo rresht i mëvonshëm rrit numëruesin dhe zvogëlon emëruesin derisa të arrijë 1.\nPër shembull, sekuenca fillon me 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nFunksioni merr një numër të plotë 'n' dhe kthen elementin e 'n'-të në këtë sekuencë si një varg në formën 'numërues/emërues'.\nInput: Një numër i plotë 'n' (n < 20000).\nOutput: Një varg që përfaqëson elementin e 'n'-të në sekuencë.\nShembuj:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"",
      "hy": "Գտնում է կոտորակային տարրը անկյունագծորեն դասավորված հաջորդականության մեջ:\nԱյս հաջորդականության մեջ կոտորակները դասավորված են անկյունագծային նախշով: Առաջին տողը պարունակում է կոտորակներ, որոնց համարիչը 1 է և հայտարարը մեծանում է: Յուրաքանչյուր հաջորդ տողում համարիչը մեծանում է և հայտարարը փոքրանում է մինչև հասնում է 1:\nՕրինակ, հաջորդականությունը սկսվում է 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nՖունկցիան ընդունում է ամբողջ թիվ 'n' և վերադարձնում է այս հաջորդականության 'n'-րդ տարրը որպես տող 'համարիչ/հայտարար' ձևով:\nՄուտք: Ամբողջ թիվ 'n' (n < 20000):\nԵլք: Տող, որը ներկայացնում է հաջորդականության 'n'-րդ տարրը:\nՕրինակներ:\n- Մուտք: 3, Ելք: \"2/1\"\n- Մուտք: 14, Ելք: \"2/4\"",
      "bn": "ডায়াগোনালভাবে সাজানো একটি ক্রমে ভগ্নাংশীয় উপাদান খুঁজে বের করে।\nএই ক্রমে, ভগ্নাংশগুলি একটি ডায়াগোনাল প্যাটার্নে সাজানো থাকে। প্রথম সারিতে লব্ধাংশ ১ এবং ক্রমবর্ধমান হর সহ ভগ্নাংশ থাকে। প্রতিটি পরবর্তী সারি লব্ধাংশ বাড়ায় এবং হর কমায় যতক্ষণ না এটি ১ এ পৌঁছায়।\nউদাহরণস্বরূপ, ক্রমটি শুরু হয় 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nফাংশনটি একটি পূর্ণসংখ্যা 'n' গ্রহণ করে এবং এই ক্রমের 'n' তম উপাদানটি একটি স্ট্রিং আকারে 'লব্ধাংশ/হর' রূপে ফেরত দেয়।\nইনপুট: একটি পূর্ণসংখ্যা 'n' (n < 20000)।\nআউটপুট: ক্রমের 'n' তম উপাদানটি উপস্থাপনকারী একটি স্ট্রিং।\nউদাহরণ:\n- ইনপুট: 3, আউটপুট: \"2/1\"\n- ইনপুট: 14, আউটপুট: \"2/4\"",
      "bg": "Намира дробния елемент в диагонално подредена последователност.\nВ тази последователност дробите са подредени в диагонален модел. Първият ред съдържа дроби с числител 1 и увеличаващи се знаменатели. Всеки следващ ред увеличава числителя и намалява знаменателя, докато достигне 1.\nНапример, последователността започва с 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nФункцията приема цяло число 'n' и връща 'n'-тия елемент в тази последователност като низ във формата 'числител/знаменател'.\nВход: Цяло число 'n' (n < 20000).\nИзход: Низ, представляващ 'n'-тия елемент в последователността.\nПримери:\n- Вход: 3, Изход: \"2/1\"\n- Вход: 14, Изход: \"2/4\"",
      "zh": "找到对角排列序列中的分数元素。\n在这个序列中，分数以对角线模式排列。第一行包含分子为1且分母递增的分数。每一行后续行增加分子并减少分母，直到分母达到1。\n例如，序列以1/1, 1/2, 2/1, 3/1, 2/2, ... 开始。\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\n函数接受一个整数 'n' 并返回该序列中的第 'n' 个元素，形式为 'numerator/denominator' 的字符串。\n输入：一个整数 'n' (n < 20000)。\n输出：表示序列中第 'n' 个元素的字符串。\n示例：\n- 输入: 3, 输出: \"2/1\"\n- 输入: 14, 输出: \"2/4\"",
      "fr": "Trouve l'élément fractionnaire dans une séquence disposée en diagonale.\nDans cette séquence, les fractions sont disposées selon un motif diagonal. La première ligne contient des fractions avec le numérateur 1 et des dénominateurs croissants. Chaque ligne suivante augmente le numérateur et diminue le dénominateur jusqu'à ce qu'il atteigne 1.\nPar exemple, la séquence commence par 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nLa fonction prend un entier 'n' et renvoie le 'nième' élément de cette séquence sous forme de chaîne de caractères sous la forme 'numérateur/dénominateur'.\nEntrée : Un entier 'n' (n < 20000).\nSortie : Une chaîne représentant le 'nième' élément de la séquence.\nExemples :\n- Entrée : 3, Sortie : \"2/1\"\n- Entrée : 14, Sortie : \"2/4\"",
      "de": "Findet das Bruch-Element in einer diagonal angeordneten Sequenz.\nIn dieser Sequenz sind Brüche in einem diagonalen Muster angeordnet. Die erste Zeile enthält Brüche mit dem Zähler 1 und zunehmenden Nennern. Jede nachfolgende Zeile erhöht den Zähler und verringert den Nenner, bis er 1 erreicht.\nZum Beispiel beginnt die Sequenz mit 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nDie Funktion nimmt eine ganze Zahl 'n' und gibt das 'n'-te Element in dieser Sequenz als Zeichenkette in der Form 'Zähler/Nenner' zurück.\nEingabe: Eine ganze Zahl 'n' (n < 20000).\nAusgabe: Eine Zeichenkette, die das 'n'-te Element in der Sequenz darstellt.\nBeispiele:\n- Eingabe: 3, Ausgabe: \"2/1\"\n- Eingabe: 14, Ausgabe: \"2/4\"",
      "ha": "Nemi abin kason a cikin jerin da aka shirya a diagonal.\nA cikin wannan jerin, an shirya kason a cikin tsarin diagonal. Layin farko yana dauke da kason da ke da mai kidayar 1 da kuma masu rarrabewa masu karuwa. Kowanne layi na gaba yana kara mai kidayar kuma yana rage mai rarrabewa har sai ya kai 1.  \nMisali, jerin yana farawa da 1/1, 1/2, 2/1, 3/1, 2/2, ...  \n1/1   1/2   1/3   1/4   1/5  \n\n2/1   2/2   2/3   2/4  \n\n3/1   3/2   3/3  \n\n4/1   4/2  \n\n5/1  \n\nAikin yana daukar cikakken lamba 'n' kuma yana mayar da abu na 'n' a cikin wannan jerin a matsayin kirtani a cikin nau'i na 'mai kidayar/mai rarrabewa'.  \nShigarwa: Cikakken lamba 'n' (n < 20000).  \nFitarwa: Kirtani da ke wakiltar abu na 'n' a cikin jerin.  \nMisalai:  \n- Shigarwa: 3, Fitarwa: \"2/1\"  \n- Shigarwa: 14, Fitarwa: \"2/4\"  ",
      "hi": "एक विकर्ण रूप से व्यवस्थित अनुक्रम में भिन्नात्मक तत्व खोजता है।\nइस अनुक्रम में, भिन्नों को एक विकर्ण पैटर्न में व्यवस्थित किया गया है। पहली पंक्ति में अंश 1 के साथ भिन्न होते हैं और हर बढ़ते हर में हर बढ़ता है। प्रत्येक बाद की पंक्ति में अंश बढ़ता है और हर घटता है जब तक कि यह 1 तक नहीं पहुंच जाता।\nउदाहरण के लिए, अनुक्रम 1/1, 1/2, 2/1, 3/1, 2/2, ... से शुरू होता है।\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nयह फ़ंक्शन एक पूर्णांक 'n' लेता है और इस अनुक्रम में 'n'th तत्व को 'अंश/हर' के रूप में एक स्ट्रिंग के रूप में लौटाता है।\nInput: An integer 'n' (n < 20000).\nइनपुट: एक पूर्णांक 'n' (n < 20000)।\nOutput: A string representing the 'n'th element in the sequence.\nआउटपुट: अनुक्रम में 'n'th तत्व को दर्शाने वाली एक स्ट्रिंग।\nExamples:\nउदाहरण:\n- Input: 3, Output: \"2/1\"\n- इनपुट: 3, आउटपुट: \"2/1\"\n- Input: 14, Output: \"2/4\"\n- इनपुट: 14, आउटपुट: \"2/4\"",
      "hu": "Megkeresi a tört elemet egy átlósan elrendezett sorozatban.\nEbben a sorozatban a törtek átlós mintában vannak elrendezve. Az első sor olyan törteket tartalmaz, amelyek számlálója 1, és a nevezők növekvőek. Minden egyes következő sor növeli a számlálót és csökkenti a nevezőt, amíg el nem éri az 1-et.\nPéldául a sorozat így kezdődik: 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nA függvény egy 'n' egész számot vesz be, és visszaadja az 'n'-edik elemet ebben a sorozatban egy 'számláló/nevező' formájú sztringként.\nBemenet: Egy 'n' egész szám (n < 20000).\nKimenet: Egy sztring, amely az 'n'-edik elemet képviseli a sorozatban.\nPéldák:\n- Bemenet: 3, Kimenet: \"2/1\"\n- Bemenet: 14, Kimenet: \"2/4\""
    },
    "docstring_bertscore": {
      "sq": "0.9750522227723991",
      "hy": "0.9425153745765982",
      "bn": "0.962782824135874",
      "bg": "0.9712879784214069",
      "zh": "0.9523658524328804",
      "fr": "0.9681130704109453",
      "de": "0.975769278447935",
      "ha": "0.9777881576407736",
      "hi": "0.9645502372663225",
      "hu": "0.9396721793024648"
    }
  },
  {
    "task_id": "PHP/13",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the monthly repayment amount for an equal principal repayment loan.\n    * In this repayment model, each month's repayment amount consists of two parts:\n    * - A constant principal payment, which is the total loan amount divided by the total number of months.\n    * - The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\n    * Input: \n    * - $loanAmount (int): The total loan amount in ten-thousands.\n    * - $monthlyInterestRate (float): The monthly interest rate.\n    * - $totalMonths (int): The total number of months for loan repayment.\n    * Output: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\n    * Example: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "sq": "<?php\n\n/**\n    * Llogarit shumën mujore të këstit për një kredi me shlyerje të barabartë të principalit.\n    * Në këtë model shlyerjeje, shuma mujore e këstit përbëhet nga dy pjesë:\n    * - Një pagesë e vazhdueshme e principalit, e cila është shuma totale e kredisë e ndarë me numrin total të muajve.\n    * - Pagesa e interesit, e cila është shuma e mbetur e kredisë e shumëzuar me normën mujore të interesit.\n    * Hyrja: \n    * - $loanAmount (int): Shuma totale e kredisë në dhjetë-mijëra.\n    * - $monthlyInterestRate (float): Norma mujore e interesit.\n    * - $totalMonths (int): Numri total i muajve për shlyerjen e kredisë.\n    * Dalja: Kthen shumën e këstit të muajit të parë si një numër i plotë (në Yuan). Injoro pikën dhjetore dhe mos e rrumbullakos\n    * Shembull: calculateMonthlyRepayment(500, 0.004, 360) duhet të kthejë 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hy": "<?php\n\n/**\n    * Հաշվարկում է ամսական վճարման գումարը հավասար հիմնական վճարման վարկի համար:\n    * Այս վճարման մոդելում յուրաքանչյուր ամսվա վճարման գումարը բաղկացած է երկու մասից.\n    * - Հիմնական հաստատուն վճարումը, որը ընդհանուր վարկի գումարը բաժանված է ամիսների ընդհանուր քանակով:\n    * - Տոկոսադրույքի վճարումը, որը մնացորդային վարկի գումարը բազմապատկված է ամսական տոկոսադրույքով:\n    * Մուտք: \n    * - $loanAmount (int): Ընդհանուր վարկի գումարը տասնյակ հազարներով:\n    * - $monthlyInterestRate (float): Ամսական տոկոսադրույքը:\n    * - $totalMonths (int): Վարկի վճարման ամիսների ընդհանուր քանակը:\n    * Ելք: Վերադարձնում է առաջին ամսվա վճարման գումարը որպես ամբողջ թիվ (Յուանով): Անտեսել տասնորդական կետը և չկլորացնել\n    * Օրինակ: calculateMonthlyRepayment(500, 0.004, 360) պետք է վերադարձնի 33889:\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "bn": "<?php\n\n/**\n    * সমান মূলধন পরিশোধ ঋণের জন্য মাসিক পরিশোধের পরিমাণ গণনা করে।\n    * এই পরিশোধ মডেলে, প্রতিটি মাসের পরিশোধের পরিমাণ দুটি অংশ নিয়ে গঠিত:\n    * - একটি ধ্রুবক মূলধন পরিশোধ, যা মোট ঋণের পরিমাণকে মোট মাসের সংখ্যা দ্বারা ভাগ করে পাওয়া যায়।\n    * - সুদের পরিশোধ, যা বকেয়া ঋণের পরিমাণকে মাসিক সুদের হারের সাথে গুণ করে পাওয়া যায়।\n    * ইনপুট: \n    * - $loanAmount (int): মোট ঋণের পরিমাণ দশ হাজারে।\n    * - $monthlyInterestRate (float): মাসিক সুদের হার।\n    * - $totalMonths (int): ঋণ পরিশোধের মোট মাসের সংখ্যা।\n    * আউটপুট: প্রথম মাসের পরিশোধের পরিমাণ একটি পূর্ণসংখ্যা হিসাবে (ইউয়ান) ফেরত দেয়। দশমিক বিন্দু বাদ দিন এবং রাউন্ড করবেন না\n    * উদাহরণ: calculateMonthlyRepayment(500, 0.004, 360) 33889 ফেরত দেবে।\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "bg": "<?php\n\n/**\n    * Изчислява месечната сума за погасяване на заем с равни главници.\n    * В този модел на погасяване, месечната сума за погасяване се състои от две части:\n    * - Постоянно плащане на главницата, което е общата сума на заема, разделена на общия брой месеци.\n    * - Лихвеното плащане, което е оставащата сума на заема, умножена по месечния лихвен процент.\n    * Вход: \n    * - $loanAmount (int): Общата сума на заема в десет хиляди.\n    * - $monthlyInterestRate (float): Месечният лихвен процент.\n    * - $totalMonths (int): Общият брой месеци за погасяване на заема.\n    * Изход: Връща сумата за погасяване за първия месец като цяло число (в юани). Изхвърлете десетичната точка и не закръгляйте\n    * Пример: calculateMonthlyRepayment(500, 0.004, 360) трябва да върне 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "zh": "<?php\n\n/**\n    * 计算等额本金还款贷款的月还款额。\n    * 在这种还款模式中，每月的还款额由两部分组成：\n    * - 固定本金还款，即贷款总额除以总月数。\n    * - 利息还款，即未偿还贷款金额乘以月利率。\n    * 输入：\n    * - $loanAmount (int): 贷款总额，以万元为单位。\n    * - $monthlyInterestRate (float): 月利率。\n    * - $totalMonths (int): 贷款还款的总月数。\n    * 输出：返回第一个月的还款额，作为整数（以元为单位）。舍弃小数点，不进行四舍五入。\n    * 示例：calculateMonthlyRepayment(500, 0.004, 360) 应返回 33889。\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "fr": "<?php\n\n/**\n    * Calcule le montant du remboursement mensuel pour un prêt à remboursement de capital égal.\n    * Dans ce modèle de remboursement, le montant du remboursement de chaque mois se compose de deux parties :\n    * - Un paiement de capital constant, qui est le montant total du prêt divisé par le nombre total de mois.\n    * - Le paiement des intérêts, qui est le montant du prêt restant multiplié par le taux d'intérêt mensuel.\n    * Entrée : \n    * - $loanAmount (int) : Le montant total du prêt en dizaines de milliers.\n    * - $monthlyInterestRate (float) : Le taux d'intérêt mensuel.\n    * - $totalMonths (int) : Le nombre total de mois pour le remboursement du prêt.\n    * Sortie : Retourne le montant du remboursement du premier mois en tant qu'entier (en Yuan). Supprimer le point décimal et ne pas arrondir\n    * Exemple : calculateMonthlyRepayment(500, 0.004, 360) devrait retourner 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "de": "<?php\n\n/**\n    * Berechnet den monatlichen Rückzahlungsbetrag für ein Darlehen mit gleichbleibender Tilgung.\n    * In diesem Rückzahlungsmodell besteht der monatliche Rückzahlungsbetrag aus zwei Teilen:\n    * - Eine konstante Tilgungszahlung, die sich aus dem gesamten Darlehensbetrag geteilt durch die Gesamtanzahl der Monate ergibt.\n    * - Die Zinszahlung, die sich aus dem ausstehenden Darlehensbetrag multipliziert mit dem monatlichen Zinssatz ergibt.\n    * Eingabe: \n    * - $loanAmount (int): Der gesamte Darlehensbetrag in Zehntausenden.\n    * - $monthlyInterestRate (float): Der monatliche Zinssatz.\n    * - $totalMonths (int): Die Gesamtanzahl der Monate für die Darlehensrückzahlung.\n    * Ausgabe: Gibt den Rückzahlungsbetrag des ersten Monats als Ganzzahl (in Yuan) zurück. Den Dezimalpunkt verwerfen und nicht runden.\n    * Beispiel: calculateMonthlyRepayment(500, 0.004, 360) sollte 33889 zurückgeben.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "ha": "<?php\n\n/**\n    * Lissafin adadin biyan kuɗi na wata-wata don lamunin biyan kuɗi na babban jari daidai.\n    * A cikin wannan samfurin biyan kuɗi, adadin biyan kuɗi na kowane wata ya ƙunshi sassa biyu:\n    * - Biyan babban jari mai ɗorewa, wanda shine jimillar adadin lamuni da aka raba da jimillar adadin watanni.\n    * - Biyan riba, wanda shine adadin lamuni da bai biya ba an ninka shi da ƙimar riba ta wata-wata.\n    * Shigarwa: \n    * - $loanAmount (int): Jimillar adadin lamuni a cikin dubu goma.\n    * - $monthlyInterestRate (float): Ƙimar riba ta wata-wata.\n    * - $totalMonths (int): Jimillar adadin watanni don biyan lamuni.\n    * Fitarwa: Yana dawowa da adadin biyan kuɗi na watan farko a matsayin cikakken lamba (a Yuan). A watsar da maki na goma da kada a yi zagaye\n    * Misali: calculateMonthlyRepayment(500, 0.004, 360) yakamata ya dawo da 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hi": "<?php\n\n/**\n    * समान मूलधन पुनर्भुगतान ऋण के लिए मासिक पुनर्भुगतान राशि की गणना करता है।\n    * इस पुनर्भुगतान मॉडल में, प्रत्येक महीने की पुनर्भुगतान राशि दो भागों में होती है:\n    * - एक स्थिर मूलधन भुगतान, जो कुल ऋण राशि को कुल महीनों की संख्या से विभाजित करके प्राप्त होता है।\n    * - ब्याज भुगतान, जो शेष ऋण राशि को मासिक ब्याज दर से गुणा करके प्राप्त होता है।\n    * इनपुट: \n    * - $loanAmount (int): कुल ऋण राशि दस-हजारों में।\n    * - $monthlyInterestRate (float): मासिक ब्याज दर।\n    * - $totalMonths (int): ऋण पुनर्भुगतान के लिए कुल महीनों की संख्या।\n    * आउटपुट: पहले महीने की पुनर्भुगतान राशि को पूर्णांक के रूप में (युआन में) लौटाता है। दशमलव बिंदु को हटा दें और गोल न करें\n    * उदाहरण: calculateMonthlyRepayment(500, 0.004, 360) को 33889 लौटाना चाहिए।\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hu": "<?php\n\n/**\n    * Kiszámítja a havi törlesztőrészlet összegét egy egyenlő tőketörlesztésű kölcsön esetén.\n    * Ebben a törlesztési modellben minden hónap törlesztőrészlete két részből áll:\n    * - Egy állandó tőketörlesztés, amely a teljes kölcsönösszeg osztva a hónapok teljes számával.\n    * - A kamatfizetés, amely a fennálló kölcsönösszeg szorozva a havi kamatlábbal.\n    * Bemenet: \n    * - $loanAmount (int): A teljes kölcsönösszeg tízezerben.\n    * - $monthlyInterestRate (float): A havi kamatláb.\n    * - $totalMonths (int): A kölcsön törlesztésének teljes hónapjainak száma.\n    * Kimenet: Visszaadja az első hónap törlesztőrészletét egész számként (jüanban). Tizedesjegyet el kell hagyni és nem kell kerekíteni\n    * Példa: calculateMonthlyRepayment(500, 0.004, 360) vissza kell adnia 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int "
    },
    "prompt_bertscore": {
      "sq": "0.9791263305178056",
      "hy": "0.9610893015071705",
      "bn": "0.9641019284963267",
      "bg": "0.9792224676222265",
      "zh": "0.9546894306302265",
      "fr": "0.9653002655851102",
      "de": "0.9646868949684745",
      "ha": "0.9456197688017924",
      "hi": "0.9585432572830653",
      "hu": "0.9657303003600507"
    },
    "canonical_solution": "{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}",
    "instruction": {
      "en": "Write a PHP function `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` to solve the following problem:\nCalculates the monthly repayment amount for an equal principal repayment loan.\nIn this repayment model, each month's repayment amount consists of two parts:\n- A constant principal payment, which is the total loan amount divided by the total number of months.\n- The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\nInput:\n- $loanAmount (int): The total loan amount in ten-thousands.\n- $monthlyInterestRate (float): The monthly interest rate.\n- $totalMonths (int): The total number of months for loan repayment.\nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.",
      "sq": "Shkruani një funksion PHP `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` për të zgjidhur problemin e mëposhtëm:\nLlogarit shumën e pagesës mujore për një kredi me pagesë të barabartë të principalit.\nNë këtë model pagese, shuma e pagesës mujore përbëhet nga dy pjesë:\n- Një pagesë konstante e principalit, e cila është shuma totale e kredisë e ndarë me numrin total të muajve.\n- Pagesa e interesit, e cila është shuma e mbetur e kredisë e shumëzuar me normën mujore të interesit.\nHyrja:\n- $loanAmount (int): Shuma totale e kredisë në dhjetë-mijëra.\n- $monthlyInterestRate (float): Norma mujore e interesit.\n- $totalMonths (int): Numri total i muajve për shlyerjen e kredisë.\nDalja: Kthen shumën e pagesës së muajit të parë si një numër i plotë (në Yuan). Hiqni pikën dhjetore dhe mos rrumbullakosni.\nShembull: calculateMonthlyRepayment(500, 0.004, 360) duhet të kthejë 33889.",
      "hy": "PHP ֆունկցիա գրել `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվարկում է հավասար հիմնական վճարով վարկի ամսական վճարման գումարը:\nԱյս մոդելում յուրաքանչյուր ամսվա վճարման գումարը բաղկացած է երկու մասից:\n- Հիմնական վճար, որը վարկի ընդհանուր գումարը բաժանված է ամիսների ընդհանուր քանակի վրա:\n- Տոկոսավճար, որը վարկի մնացորդային գումարը բազմապատկված է ամսական տոկոսադրույքով:\nՄուտք:\n- $loanAmount (int): Վարկի ընդհանուր գումարը տասնյակ հազարներով:\n- $monthlyInterestRate (float): Ամսական տոկոսադրույքը:\n- $totalMonths (int): Վարկի մարումը կատարելու ամիսների ընդհանուր քանակը:\nԵլք: Վերադարձնում է առաջին ամսվա վճարման գումարը որպես ամբողջ թիվ (Յուանով): Հեռացրեք տասնորդական կետը և մի կլորացրեք\nՕրինակ: calculateMonthlyRepayment(500, 0.004, 360) պետք է վերադարձնի 33889:",
      "bn": "PHP ফাংশন `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nসমান মূলধন পরিশোধ ঋণের জন্য মাসিক পরিশোধের পরিমাণ গণনা করে।\nএই পরিশোধ মডেলে, প্রতিটি মাসের পরিশোধের পরিমাণ দুটি অংশ নিয়ে গঠিত:\n- একটি ধ্রুবক মূলধন পরিশোধ, যা মোট ঋণের পরিমাণকে মোট মাসের সংখ্যা দ্বারা ভাগ করে পাওয়া যায়।\n- সুদ পরিশোধ, যা বকেয়া ঋণের পরিমাণকে মাসিক সুদের হারের সাথে গুণ করে পাওয়া যায়।\nইনপুট:\n- $loanAmount (int): মোট ঋণের পরিমাণ দশ-হাজারে।\n- $monthlyInterestRate (float): মাসিক সুদের হার।\n- $totalMonths (int): ঋণ পরিশোধের জন্য মোট মাসের সংখ্যা।\nআউটপুট: প্রথম মাসের পরিশোধের পরিমাণ একটি পূর্ণসংখ্যা (ইউয়ান) হিসাবে ফেরত দেয়। দশমিক বিন্দু বাদ দিন এবং রাউন্ড করবেন না\nউদাহরণ: calculateMonthlyRepayment(500, 0.004, 360) 33889 ফেরত দেবে।",
      "bg": "Напишете PHP функция `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int`, за да решите следния проблем:\nИзчислява месечната вноска за заем с равни главници.\nВ този модел на изплащане, месечната вноска се състои от две части:\n- Постоянно плащане на главницата, което е общата сума на заема, разделена на общия брой месеци.\n- Лихвеното плащане, което е оставащата сума на заема, умножена по месечния лихвен процент.\nВход:\n- $loanAmount (int): Общата сума на заема в десетки хиляди.\n- $monthlyInterestRate (float): Месечният лихвен процент.\n- $totalMonths (int): Общият брой месеци за изплащане на заема.\nИзход: Връща месечната вноска за първия месец като цяло число (в юани). Отхвърлете десетичната точка и не закръгляйте.\nПример: calculateMonthlyRepayment(500, 0.004, 360) трябва да върне 33889.",
      "zh": "编写一个 PHP 函数 `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` 来解决以下问题：\n计算等额本金还款贷款的月还款额。\n在这种还款模式中，每月的还款额由两部分组成：\n- 固定本金支付，即总贷款金额除以总月数。\n- 利息支付，即未偿还贷款金额乘以月利率。\n输入：\n- $loanAmount (int): 总贷款金额，以万元为单位。\n- $monthlyInterestRate (float): 月利率。\n- $totalMonths (int): 贷款还款的总月数。\n输出：返回第一个月的还款额，作为整数（以元为单位）。舍弃小数点，不进行四舍五入\n示例：calculateMonthlyRepayment(500, 0.004, 360) 应返回 33889。",
      "fr": "Écrire une fonction PHP `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` pour résoudre le problème suivant :\nCalcule le montant du remboursement mensuel pour un prêt à remboursement de capital égal.\nDans ce modèle de remboursement, le montant du remboursement de chaque mois se compose de deux parties :\n- Un paiement de capital constant, qui est le montant total du prêt divisé par le nombre total de mois.\n- Le paiement des intérêts, qui est le montant du prêt restant multiplié par le taux d'intérêt mensuel.\nEntrée :\n- $loanAmount (int) : Le montant total du prêt en dizaines de milliers.\n- $monthlyInterestRate (float) : Le taux d'intérêt mensuel.\n- $totalMonths (int) : Le nombre total de mois pour le remboursement du prêt.\nSortie : Retourne le montant du remboursement du premier mois en tant qu'entier (en Yuan). Supprimez le point décimal et ne pas arrondir\nExemple : calculateMonthlyRepayment(500, 0.004, 360) devrait retourner 33889.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int`, um das folgende Problem zu lösen:\nBerechnet den monatlichen Rückzahlungsbetrag für ein Darlehen mit gleichbleibender Kapitalrückzahlung.\nIn diesem Rückzahlungsmodell besteht der monatliche Rückzahlungsbetrag aus zwei Teilen:\n- Einer konstanten Kapitalzahlung, die der gesamten Darlehenssumme geteilt durch die Gesamtanzahl der Monate entspricht.\n- Der Zinszahlung, die der ausstehenden Darlehenssumme multipliziert mit dem monatlichen Zinssatz entspricht.\nEingabe:\n- $loanAmount (int): Die gesamte Darlehenssumme in Zehntausend.\n- $monthlyInterestRate (float): Der monatliche Zinssatz.\n- $totalMonths (int): Die Gesamtanzahl der Monate für die Darlehensrückzahlung.\nAusgabe: Gibt den Rückzahlungsbetrag des ersten Monats als Ganzzahl (in Yuan) zurück. Den Dezimalpunkt verwerfen und nicht runden.\nBeispiel: calculateMonthlyRepayment(500, 0.004, 360) sollte 33889 zurückgeben.",
      "ha": "Rubuta aikin PHP `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` don warware matsalar mai zuwa:\nYana ƙididdige adadin biyan kuɗi na wata-wata don bashi mai daidaitaccen biyan kuɗi na babban bashi.\nA cikin wannan samfurin biyan kuɗi, adadin biyan kuɗi na kowane wata ya ƙunshi sassa biyu:\n- Daidaitaccen biyan babban bashi, wanda shine jimillar adadin bashin da aka raba da jimillar adadin watanni.\n- Biyan kuɗin sha'awa, wanda shine adadin bashin da ba a biya ba da aka ninka da ƙimar sha'awar wata-wata.\nShigarwa:\n- $loanAmount (int): Jimillar adadin bashin a cikin dubu goma.\n- $monthlyInterestRate (float): Ƙimar sha'awar wata-wata.\n- $totalMonths (int): Jimillar adadin watanni don biyan bashi.\nFitarwa: Yana dawowa da adadin biyan kuɗi na watan farko a matsayin cikakken lamba (a cikin Yuan). Yi watsi da maƙasudin adadi kuma kada ka yi zagaye\nMisali: calculateMonthlyRepayment(500, 0.004, 360) ya kamata ya dawo da 33889.",
      "hi": "PHP फ़ंक्शन `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nसमान मूलधन पुनर्भुगतान ऋण के लिए मासिक पुनर्भुगतान राशि की गणना करता है।\nइस पुनर्भुगतान मॉडल में, प्रत्येक महीने की पुनर्भुगतान राशि दो भागों में होती है:\n- एक स्थिर मूलधन भुगतान, जो कुल ऋण राशि को कुल महीनों की संख्या से विभाजित करता है।\n- ब्याज भुगतान, जो बकाया ऋण राशि को मासिक ब्याज दर से गुणा करता है।\nइनपुट:\n- $loanAmount (int): कुल ऋण राशि दस-हजारों में।\n- $monthlyInterestRate (float): मासिक ब्याज दर।\n- $totalMonths (int): ऋण पुनर्भुगतान के लिए कुल महीनों की संख्या।\nआउटपुट: पहले महीने की पुनर्भुगतान राशि को एक पूर्णांक (युआन में) के रूप में लौटाता है। दशमलव बिंदु को हटा दें और गोल न करें\nउदाहरण: calculateMonthlyRepayment(500, 0.004, 360) को 33889 लौटाना चाहिए।",
      "hu": "Írj egy PHP függvényt `function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int` a következő probléma megoldására:\nKiszámítja a havi törlesztőrészlet összegét egy egyenlő tőketörlesztésű kölcsön esetén.\nEbben a törlesztési modellben minden hónap törlesztőrészlete két részből áll:\n- Egy állandó tőketörlesztés, amely a teljes kölcsönösszeg osztva a hónapok teljes számával.\n- A kamattörlesztés, amely a fennálló kölcsönösszeg szorozva a havi kamatlábbal.\nBemenet:\n- $loanAmount (int): A teljes kölcsönösszeg tízezerben.\n- $monthlyInterestRate (float): A havi kamatláb.\n- $totalMonths (int): A kölcsön törlesztésének teljes hónapszáma.\nKimenet: Visszaadja az első hónap törlesztőrészletét egész számként (jüanban). Eldobja a tizedesjegyet és nem kerekít.\nPélda: calculateMonthlyRepayment(500, 0.004, 360) vissza kell adnia 33889."
    },
    "instruction_bertscore": {
      "sq": "0.979327543093794",
      "hy": "0.9551160886886895",
      "bn": "0.9611026097426999",
      "bg": "0.9665103218663748",
      "zh": "0.9607661298772269",
      "fr": "0.9598858000284802",
      "de": "0.980847264139092",
      "ha": "0.9552449998059811",
      "hi": "0.9659698485995788",
      "hu": "0.9726688568303614"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateMonthlyRepayment(500, 0.004, 360) === 33888);\n    assert(calculateMonthlyRepayment(300, 0.005, 180) === 31666); // Example test case\n\n}\n\nmain();\n?>",
    "entry_point": "calculateMonthlyRepayment",
    "signature": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int",
    "docstring": {
      "en": "Calculates the monthly repayment amount for an equal principal repayment loan.\nIn this repayment model, each month's repayment amount consists of two parts:\n- A constant principal payment, which is the total loan amount divided by the total number of months.\n- The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\nInput:\n- $loanAmount (int): The total loan amount in ten-thousands.\n- $monthlyInterestRate (float): The monthly interest rate.\n- $totalMonths (int): The total number of months for loan repayment.\nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.",
      "sq": "Llogarit shumën e pagesës mujore për një hua me shlyerje të barabartë të principalit. Në këtë model shlyerjeje, shuma e pagesës mujore përbëhet nga dy pjesë:\n- Një pagesë konstante e principalit, e cila është shuma totale e huasë e ndarë me numrin total të muajve.\n- Pagesa e interesit, e cila është shuma e mbetur e huasë e shumëzuar me normën mujore të interesit.\nInput:\n- $loanAmount (int): Shuma totale e huasë në dhjetë-mijëra.\n- $monthlyInterestRate (float): Norma mujore e interesit.\n- $totalMonths (int): Numri total i muajve për shlyerjen e huasë.\nOutput: Kthen shumën e pagesës së muajit të parë si një numër i plotë (në Yuan). Injoroni pikën dhjetore dhe mos e rrumbullakosni.\nShembull: calculateMonthlyRepayment(500, 0.004, 360) duhet të kthejë 33889.",
      "hy": "Հաշվում է հավասար հիմնական մարումների վարկի ամսական մարումների գումարը։ Այս մարումների մոդելում յուրաքանչյուր ամսվա մարումների գումարը բաղկացած է երկու մասից՝ \n- Հիմնական վճարումը, որը վարկի ընդհանուր գումարը բաժանված է ամիսների ընդհանուր քանակի վրա։\n- Տոկոսավճարը, որը չվճարված վարկի գումարը բազմապատկված է ամսական տոկոսադրույքով։\nՄուտք՝\n- $loanAmount (int): Վարկի ընդհանուր գումարը տասնյակ հազարներով։\n- $monthlyInterestRate (float): Ամսական տոկոսադրույքը։\n- $totalMonths (int): Վարկի մարումների ամիսների ընդհանուր քանակը։\nԵլք՝ Վերադարձնում է առաջին ամսվա մարումների գումարը որպես ամբողջ թիվ (Յուանով)։ Անտեսեք տասնորդական կետը և մի կլորացրեք։\nՕրինակ՝ calculateMonthlyRepayment(500, 0.004, 360) պետք է վերադարձնի 33889։",
      "bn": "সমান মূলধন পরিশোধ ঋণের জন্য মাসিক পরিশোধের পরিমাণ গণনা করে। \nএই পরিশোধ মডেলে, প্রতিটি মাসের পরিশোধের পরিমাণ দুটি অংশ নিয়ে গঠিত:\n- একটি ধ্রুবক মূলধন পরিশোধ, যা মোট ঋণের পরিমাণকে মোট মাসের সংখ্যা দ্বারা ভাগ করে পাওয়া যায়।\n- সুদের পরিশোধ, যা বকেয়া ঋণের পরিমাণকে মাসিক সুদের হার দ্বারা গুণ করে পাওয়া যায়।\nইনপুট:\n- $loanAmount (int): মোট ঋণের পরিমাণ দশ হাজারে।\n- $monthlyInterestRate (float): মাসিক সুদের হার।\n- $totalMonths (int): ঋণ পরিশোধের মোট মাসের সংখ্যা।\nআউটপুট: প্রথম মাসের পরিশোধের পরিমাণ একটি পূর্ণসংখ্যা হিসাবে (ইউয়ানে) ফেরত দেয়। দশমিক বিন্দু বাদ দিন এবং রাউন্ড করবেন না\nউদাহরণ: calculateMonthlyRepayment(500, 0.004, 360) 33889 ফেরত দেবে।",
      "bg": "Изчислява месечната сума за погасяване на заем с равни вноски по главницата. В този модел на погасяване, месечната сума за погасяване се състои от две части:\n- Постоянно плащане по главницата, което е общата сума на заема, разделена на общия брой месеци.\n- Плащане на лихвата, което е оставащата сума на заема, умножена по месечния лихвен процент.\nВход:\n- $loanAmount (int): Общата сума на заема в десетки хиляди.\n- $monthlyInterestRate (float): Месечният лихвен процент.\n- $totalMonths (int): Общият брой месеци за погасяване на заема.\nИзход: Връща сумата за погасяване за първия месец като цяло число (в юани). Изхвърлете десетичната точка и не закръгляйте.\nПример: calculateMonthlyRepayment(500, 0.004, 360) трябва да върне 33889.",
      "zh": "计算等额本金贷款的每月还款金额。\n在这种还款模式中，每月的还款金额由两部分组成：\n- 固定的本金支付，即总贷款金额除以总月数。\n- 利息支付，即未偿还贷款金额乘以月利率。\n输入：\n- $loanAmount (int): 以万元为单位的总贷款金额。\n- $monthlyInterestRate (float): 月利率。\n- $totalMonths (int): 贷款还款的总月数。\n输出：返回第一个月的还款金额，作为整数（以元为单位）。舍弃小数点，不进行四舍五入。\n示例：calculateMonthlyRepayment(500, 0.004, 360) 应返回 33889。",
      "fr": "Calcule le montant du remboursement mensuel pour un prêt à remboursement de capital égal.  \nDans ce modèle de remboursement, le montant du remboursement de chaque mois se compose de deux parties :  \n- Un paiement de capital constant, qui est le montant total du prêt divisé par le nombre total de mois.  \n- Le paiement des intérêts, qui est le montant du prêt restant multiplié par le taux d'intérêt mensuel.  \nEntrée :  \n- $loanAmount (int): Le montant total du prêt en dizaines de milliers.  \n- $monthlyInterestRate (float): Le taux d'intérêt mensuel.  \n- $totalMonths (int): Le nombre total de mois pour le remboursement du prêt.  \nSortie : Renvoie le montant du remboursement du premier mois en tant qu'entier (en Yuan). Supprimez le point décimal et ne pas arrondir  \nExemple : calculateMonthlyRepayment(500, 0.004, 360) devrait renvoyer 33889.",
      "de": "Berechnet den monatlichen Rückzahlungsbetrag für ein Darlehen mit gleichbleibender Tilgung.\nIn diesem Rückzahlungsmodell besteht der monatliche Rückzahlungsbetrag aus zwei Teilen:\n- Einer konstanten Tilgungszahlung, die dem gesamten Darlehensbetrag geteilt durch die Gesamtzahl der Monate entspricht.\n- Der Zinszahlung, die dem ausstehenden Darlehensbetrag multipliziert mit dem monatlichen Zinssatz entspricht.\nEingabe:\n- $loanAmount (int): Der gesamte Darlehensbetrag in Zehntausend.\n- $monthlyInterestRate (float): Der monatliche Zinssatz.\n- $totalMonths (int): Die Gesamtzahl der Monate für die Darlehensrückzahlung.\nAusgabe: Gibt den Rückzahlungsbetrag des ersten Monats als Ganzzahl (in Yuan) zurück. Den Dezimalpunkt verwerfen und nicht runden.\nBeispiel: calculateMonthlyRepayment(500, 0.004, 360) sollte 33889 zurückgeben.",
      "ha": "Lissafin adadin biyan kuɗi na wata-wata don lamunin biyan kuɗi na babban jari daidai.\nA cikin wannan samfurin biyan, adadin biyan kowane wata ya ƙunshi sassa biyu:  \n- Biyan babban jari mai ɗorewa, wanda shine jimillar adadin rancen da aka raba da jimillar adadin watanni.  \n- Biyan riba, wanda shine adadin rancen da bai biya ba wanda aka ninka da yawan ribar wata-wata.  \nInput:  \n- $loanAmount (int): Jimillar adadin rancen a cikin dubu goma.  \n- $monthlyInterestRate (float): Yawan ribar wata-wata.  \n- $totalMonths (int): Jimillar adadin watanni don biyan rance.  \nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round  \nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.",
      "hi": "मासिक पुनर्भुगतान राशि की गणना एक समान मूलधन पुनर्भुगतान ऋण के लिए करता है। इस पुनर्भुगतान मॉडल में, प्रत्येक महीने की पुनर्भुगतान राशि दो भागों में होती है:\n- एक स्थिर मूलधन भुगतान, जो कुल ऋण राशि को कुल महीनों की संख्या से विभाजित करता है।\n- ब्याज भुगतान, जो बकाया ऋण राशि को मासिक ब्याज दर से गुणा करता है।\nइनपुट:\n- $loanAmount (int): कुल ऋण राशि दस-हजारों में।\n- $monthlyInterestRate (float): मासिक ब्याज दर।\n- $totalMonths (int): ऋण पुनर्भुगतान के लिए कुल महीनों की संख्या।\nआउटपुट: पहले महीने की पुनर्भुगतान राशि को पूर्णांक (युआन में) के रूप में लौटाता है। दशमलव बिंदु को हटा दें और राउंड न करें।\nउदाहरण: calculateMonthlyRepayment(500, 0.004, 360) को 33889 लौटाना चाहिए।",
      "hu": "Kiszámítja az egyenlő tőketörlesztésű kölcsön havi törlesztőrészletét.\nEbben a törlesztési modellben minden havi törlesztőrészlet két részből áll:\n- Egy állandó tőketörlesztés, amely a teljes kölcsönösszeg elosztva a hónapok teljes számával.\n- A kamattörlesztés, amely a fennálló kölcsönösszeg szorozva a havi kamatlábbal.\nBemenet:\n- $loanAmount (int): A teljes kölcsönösszeg tízezerben.\n- $monthlyInterestRate (float): A havi kamatláb.\n- $totalMonths (int): A kölcsön törlesztésének teljes hónapszáma.\nKimenet: Visszaadja az első havi törlesztőrészlet összegét egész számként (jüanban). Elveti a tizedesjegyet és nem kerekít\nPélda: calculateMonthlyRepayment(500, 0.004, 360) vissza kell adnia 33889."
    },
    "docstring_bertscore": {
      "sq": "0.975057784423068",
      "hy": "0.9605617392151419",
      "bn": "0.9515306116806287",
      "bg": "0.9724106373350161",
      "zh": "0.9504768775092386",
      "fr": "0.9522184686901525",
      "de": "0.9586387984963431",
      "ha": "0.9747232908614053",
      "hi": "0.966847397622991",
      "hu": "0.9478418468744297"
    }
  },
  {
    "task_id": "PHP/14",
    "prompt": {
      "en": "<?php\n/**\n * Converts a decimal number into a sum of powers of 2.\n * This function is useful for understanding the binary representation of a decimal number.\n * It breaks down the number into a sum of powers of 2, which are easier to understand and work with,\n * especially in contexts where binary calculations are frequent.\n * \n * For example:\n * - Input: 7\n * - Output: \"7=4+2+1\"\n * - Input: 43\n * - Output: \"43=32+8+2+1\"\n * \n * Input: A single integer ($number), where 0 < $number < 1000000.\n * Output: A string representing the equation of the sum of powers of 2 that equals the input number.\n */\n\nfunction decimalToBinarySum($number) ",
      "sq": "<?php\n/**\n * Konverton një numër dhjetor në një shumë të fuqive të 2.\n * Kjo funksion është e dobishme për të kuptuar përfaqësimin binar të një numri dhjetor.\n * E ndan numrin në një shumë të fuqive të 2, të cilat janë më të lehta për t'u kuptuar dhe punuar me to,\n * veçanërisht në kontekste ku llogaritjet binare janë të shpeshta.\n * \n * Për shembull:\n * - Hyrja: 7\n * - Dalja: \"7=4+2+1\"\n * - Hyrja: 43\n * - Dalja: \"43=32+8+2+1\"\n * \n * Hyrja: Një numër i vetëm i plotë ($number), ku 0 < $number < 1000000.\n * Dalja: Një varg që përfaqëson ekuacionin e shumës së fuqive të 2 që është e barabartë me numrin e hyrjes.\n */\n\nfunction decimalToBinarySum($number) ",
      "hy": "<?php\n/**\n * Վերածում է տասնորդական թիվը 2-ի աստիճանների գումարի:\n * Այս ֆունկցիան օգտակար է տասնորդական թվի բինար ներկայացումը հասկանալու համար:\n * Այն բաժանում է թիվը 2-ի աստիճանների գումարի, որոնք ավելի հեշտ են հասկանալ և աշխատել,\n * հատկապես այն համատեքստերում, որտեղ բինար հաշվարկները հաճախակի են:\n * \n * Օրինակ:\n * - Մուտք: 7\n * - Ելք: \"7=4+2+1\"\n * - Մուտք: 43\n * - Ելք: \"43=32+8+2+1\"\n * \n * Մուտք: Մեկ ամբողջ թիվ ($number), որտեղ 0 < $number < 1000000:\n * Ելք: Տող, որը ներկայացնում է 2-ի աստիճանների գումարի հավասարումը, որը հավասար է մուտքագրված թվին:\n */\n\nfunction decimalToBinarySum($number) ",
      "bn": "<?php\n/**\n * একটি দশমিক সংখ্যা ২ এর ঘাতের যোগফলে রূপান্তর করে।\n * এই ফাংশনটি একটি দশমিক সংখ্যার বাইনারি উপস্থাপনা বোঝার জন্য উপকারী।\n * এটি সংখ্যাটিকে ২ এর ঘাতের যোগফলে ভেঙে দেয়, যা বোঝা এবং কাজ করার জন্য সহজ,\n * বিশেষ করে সেই প্রসঙ্গে যেখানে বাইনারি গণনা ঘন ঘন হয়।\n * \n * উদাহরণস্বরূপ:\n * - ইনপুট: 7\n * - আউটপুট: \"7=4+2+1\"\n * - ইনপুট: 43\n * - আউটপুট: \"43=32+8+2+1\"\n * \n * ইনপুট: একটি একক পূর্ণসংখ্যা ($number), যেখানে 0 < $number < 1000000।\n * আউটপুট: একটি স্ট্রিং যা ২ এর ঘাতের যোগফলের সমীকরণ উপস্থাপন করে যা ইনপুট সংখ্যার সমান।\n */\n\nfunction decimalToBinarySum($number) ",
      "bg": "<?php\n/**\n * Преобразува десетично число в сума от степени на 2.\n * Тази функция е полезна за разбиране на двоичното представяне на десетично число.\n * Тя разбива числото на сума от степени на 2, които са по-лесни за разбиране и работа,\n * особено в контексти, където двоичните изчисления са чести.\n * \n * Например:\n * - Вход: 7\n * - Изход: \"7=4+2+1\"\n * - Вход: 43\n * - Изход: \"43=32+8+2+1\"\n * \n * Вход: Едно цяло число ($number), където 0 < $number < 1000000.\n * Изход: Низ, представляващ уравнението на сумата от степени на 2, която е равна на входното число.\n */\n\nfunction decimalToBinarySum($number) ",
      "zh": "<?php\n/**\n * 将十进制数转换为2的幂之和。\n * 此函数对于理解十进制数的二进制表示非常有用。\n * 它将数字分解为2的幂之和，这样更容易理解和处理，\n * 特别是在二进制计算频繁的情况下。\n * \n * 例如:\n * - 输入: 7\n * - 输出: \"7=4+2+1\"\n * - 输入: 43\n * - 输出: \"43=32+8+2+1\"\n * \n * 输入: 一个整数 ($number)，其中 0 < $number < 1000000。\n * 输出: 一个字符串，表示等于输入数字的2的幂之和的方程。\n */\n\nfunction decimalToBinarySum($number) ",
      "fr": "<?php\n/**\n * Convertit un nombre décimal en une somme de puissances de 2.\n * Cette fonction est utile pour comprendre la représentation binaire d'un nombre décimal.\n * Elle décompose le nombre en une somme de puissances de 2, ce qui est plus facile à comprendre et à manipuler,\n * surtout dans les contextes où les calculs binaires sont fréquents.\n * \n * Par exemple :\n * - Entrée : 7\n * - Sortie : \"7=4+2+1\"\n * - Entrée : 43\n * - Sortie : \"43=32+8+2+1\"\n * \n * Entrée : Un seul entier ($number), où 0 < $number < 1000000.\n * Sortie : Une chaîne représentant l'équation de la somme des puissances de 2 qui est égale au nombre d'entrée.\n */\n\nfunction decimalToBinarySum($number) ",
      "de": "<?php\n/**\n * Wandelt eine Dezimalzahl in eine Summe von Zweierpotenzen um.\n * Diese Funktion ist nützlich, um die binäre Darstellung einer Dezimalzahl zu verstehen.\n * Sie zerlegt die Zahl in eine Summe von Zweierpotenzen, die leichter zu verstehen und zu handhaben sind,\n * besonders in Kontexten, in denen binäre Berechnungen häufig vorkommen.\n * \n * Zum Beispiel:\n * - Eingabe: 7\n * - Ausgabe: \"7=4+2+1\"\n * - Eingabe: 43\n * - Ausgabe: \"43=32+8+2+1\"\n * \n * Eingabe: Eine einzelne ganze Zahl ($number), wobei 0 < $number < 1000000.\n * Ausgabe: Ein String, der die Gleichung der Summe von Zweierpotenzen darstellt, die der Eingabezahl entspricht.\n */\n\nfunction decimalToBinarySum($number) ",
      "ha": "<?php\n/**\n * Yana canza lambar decimal zuwa jumlar karfin 2.\n * Wannan aikin yana da amfani don fahimtar wakilcin binary na lambar decimal.\n * Yana rarraba lambar zuwa jumlar karfin 2, wanda yake sauƙin fahimta da aiki da shi,\n * musamman a cikin yanayi inda lissafin binary ya fi yawa.\n * \n * Alal misali:\n * - Shigarwa: 7\n * - Fitarwa: \"7=4+2+1\"\n * - Shigarwa: 43\n * - Fitarwa: \"43=32+8+2+1\"\n * \n * Shigarwa: Lamba guda ɗaya ($number), inda 0 < $number < 1000000.\n * Fitarwa: Jeren haruffa da ke wakiltar daidaiton jumlar karfin 2 wanda yayi daidai da lambar shigarwa.\n */\n\nfunction decimalToBinarySum($number) ",
      "hi": "<?php\n/**\n * एक दशमलव संख्या को 2 की शक्तियों के योग में परिवर्तित करता है।\n * यह फ़ंक्शन एक दशमलव संख्या के बाइनरी प्रतिनिधित्व को समझने के लिए उपयोगी है।\n * यह संख्या को 2 की शक्तियों के योग में तोड़ देता है, जो समझने और काम करने में आसान होते हैं,\n * विशेष रूप से उन संदर्भों में जहां बाइनरी गणनाएँ बार-बार होती हैं।\n * \n * उदाहरण के लिए:\n * - इनपुट: 7\n * - आउटपुट: \"7=4+2+1\"\n * - इनपुट: 43\n * - आउटपुट: \"43=32+8+2+1\"\n * \n * इनपुट: एक एकल पूर्णांक ($number), जहां 0 < $number < 1000000।\n * आउटपुट: एक स्ट्रिंग जो 2 की शक्तियों के योग का समीकरण दर्शाती है जो इनपुट संख्या के बराबर है।\n */\n\nfunction decimalToBinarySum($number) ",
      "hu": "<?php\n/**\n * Egy decimális számot alakít át a 2 hatványainak összegévé.\n * Ez a függvény hasznos a decimális szám bináris ábrázolásának megértéséhez.\n * A számot a 2 hatványainak összegére bontja le, amelyek könnyebben érthetők és kezelhetők,\n * különösen olyan kontextusokban, ahol gyakoriak a bináris számítások.\n * \n * Például:\n * - Bemenet: 7\n * - Kimenet: \"7=4+2+1\"\n * - Bemenet: 43\n * - Kimenet: \"43=32+8+2+1\"\n * \n * Bemenet: Egyetlen egész szám ($number), ahol 0 < $number < 1000000.\n * Kimenet: Egy karakterlánc, amely az input számnak megfelelő 2 hatványainak összegét ábrázoló egyenletet képviseli.\n */\n\nfunction decimalToBinarySum($number) "
    },
    "prompt_bertscore": {
      "sq": "0.999999801369619",
      "hy": "0.9822543617583431",
      "bn": "0.9984969639067091",
      "bg": "0.9917427364299987",
      "zh": "0.9664666231825471",
      "fr": "0.991283304358665",
      "de": "0.9826265950924025",
      "ha": "0.9780960347313777",
      "hi": "0.999999801369619",
      "hu": "0.9850504816321712"
    },
    "canonical_solution": "{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}",
    "instruction": {
      "en": "Write a PHP function `function decimalToBinarySum($number)` to solve the following problem:\nConverts a decimal number into a sum of powers of 2.\nThis function is useful for understanding the binary representation of a decimal number.\nIt breaks down the number into a sum of powers of 2, which are easier to understand and work with,\nespecially in contexts where binary calculations are frequent.\n\nFor example:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: A single integer ($number), where 0 < $number < 1000000.\nOutput: A string representing the equation of the sum of powers of 2 that equals the input number.",
      "sq": "Shkruani një funksion PHP `function decimalToBinarySum($number)` për të zgjidhur problemin e mëposhtëm:\nKonverton një numër dhjetor në një shumë të fuqive të 2.\nKy funksion është i dobishëm për të kuptuar përfaqësimin binar të një numri dhjetor.\nAi e ndan numrin në një shumë të fuqive të 2, të cilat janë më të lehta për t'u kuptuar dhe punuar me to,\nsidomos në kontekste ku llogaritjet binare janë të shpeshta.\n\nPër shembull:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: Një numër i vetëm ($number), ku 0 < $number < 1000000.\nOutput: Një varg që përfaqëson ekuacionin e shumës së fuqive të 2 që është e barabartë me numrin e dhënë si input.",
      "hy": "Գրեք PHP ֆունկցիա `function decimalToBinarySum($number)` հետևյալ խնդիրը լուծելու համար:\nՎերափոխում է տասնորդական թիվը 2-ի աստիճանների գումարի:\nԱյս ֆունկցիան օգտակար է տասնորդական թվի բինար ներկայացումը հասկանալու համար:\nԱյն բաժանում է թիվը 2-ի աստիճանների գումարի, որոնք ավելի հեշտ են հասկանալ և աշխատել դրանց հետ,\nհատկապես այն համատեքստերում, որտեղ բինար հաշվարկները հաճախակի են:\n\nՕրինակ:\n- Մուտք: 7\n- Ելք: \"7=4+2+1\"\n- Մուտք: 43\n- Ելք: \"43=32+8+2+1\"\n\nՄուտք: Մեկ ամբողջ թիվ ($number), որտեղ 0 < $number < 1000000:\nԵլք: Տող, որը ներկայացնում է 2-ի աստիճանների գումարի հավասարումը, որը հավասար է մուտքային թվին:",
      "bn": "PHP ফাংশন `function decimalToBinarySum($number)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি দশমিক সংখ্যাকে ২ এর ঘাতের যোগফলে রূপান্তর করে।\nএই ফাংশনটি একটি দশমিক সংখ্যার বাইনারি উপস্থাপনাটি বোঝার জন্য উপকারী।\nএটি সংখ্যাটিকে ২ এর ঘাতের যোগফলে ভেঙে দেয়, যা বোঝা এবং কাজ করা সহজ,\nবিশেষ করে সেই প্রেক্ষাপটে যেখানে বাইনারি গণনা ঘন ঘন হয়।\n\nউদাহরণস্বরূপ:\n- ইনপুট: 7\n- আউটপুট: \"7=4+2+1\"\n- ইনপুট: 43\n- আউটপুট: \"43=32+8+2+1\"\n\nইনপুট: একটি একক পূর্ণসংখ্যা ($number), যেখানে 0 < $number < 1000000।\nআউটপুট: একটি স্ট্রিং যা ইনপুট সংখ্যার সমান ২ এর ঘাতের যোগফলের সমীকরণ উপস্থাপন করে।",
      "bg": "Напишете PHP функция `function decimalToBinarySum($number)`, за да решите следния проблем:\nПреобразува десетично число в сума от степени на 2.\nТази функция е полезна за разбиране на двоичното представяне на десетично число.\nТя разбива числото на сума от степени на 2, които са по-лесни за разбиране и работа,\nособено в контексти, където двоичните изчисления са чести.\n\nНапример:\n- Вход: 7\n- Изход: \"7=4+2+1\"\n- Вход: 43\n- Изход: \"43=32+8+2+1\"\n\nВход: Едно цяло число ($number), където 0 < $number < 1000000.\nИзход: Низ, представляващ уравнението на сумата от степени на 2, която е равна на входното число.",
      "zh": "编写一个 PHP 函数 `function decimalToBinarySum($number)` 来解决以下问题：\n将十进制数转换为2的幂的和。\n此函数对于理解十进制数的二进制表示非常有用。\n它将数字分解为2的幂的和，这样更容易理解和处理，\n尤其是在二进制计算频繁的情况下。\n\n例如：\n- 输入: 7\n- 输出: \"7=4+2+1\"\n- 输入: 43\n- 输出: \"43=32+8+2+1\"\n\n输入: 一个整数 ($number)，其中 0 < $number < 1000000。\n输出: 一个字符串，表示等于输入数字的2的幂的和的方程。",
      "fr": "Écrire une fonction PHP `function decimalToBinarySum($number)` pour résoudre le problème suivant :\nConvertit un nombre décimal en une somme de puissances de 2.\nCette fonction est utile pour comprendre la représentation binaire d'un nombre décimal.\nElle décompose le nombre en une somme de puissances de 2, qui sont plus faciles à comprendre et à manipuler,\nsurtout dans des contextes où les calculs binaires sont fréquents.\n\nPar exemple :\n- Entrée : 7\n- Sortie : \"7=4+2+1\"\n- Entrée : 43\n- Sortie : \"43=32+8+2+1\"\n\nEntrée : Un entier ($number), où 0 < $number < 1000000.\nSortie : Une chaîne représentant l'équation de la somme des puissances de 2 qui est égale au nombre d'entrée.",
      "de": "Schreiben Sie eine PHP-Funktion `function decimalToBinarySum($number)`, um das folgende Problem zu lösen:\nWandelt eine Dezimalzahl in eine Summe von Zweierpotenzen um.\nDiese Funktion ist nützlich, um die binäre Darstellung einer Dezimalzahl zu verstehen.\nSie zerlegt die Zahl in eine Summe von Zweierpotenzen, die leichter zu verstehen und zu bearbeiten sind,\nbesonders in Kontexten, in denen binäre Berechnungen häufig vorkommen.\n\nZum Beispiel:\n- Eingabe: 7\n- Ausgabe: \"7=4+2+1\"\n- Eingabe: 43\n- Ausgabe: \"43=32+8+2+1\"\n\nEingabe: Eine einzelne ganze Zahl ($number), wobei 0 < $number < 1000000.\nAusgabe: Ein String, der die Gleichung der Summe von Zweierpotenzen darstellt, die der Eingabezahlen entspricht.",
      "ha": "Rubuta aikin PHP `function decimalToBinarySum($number)` don warware matsalar mai zuwa:\nCanza lambar decimal zuwa jumlar ikon 2.\nWannan aikin yana da amfani don fahimtar wakilcin binary na lambar decimal.\nYana rarraba lambar zuwa jumlar ikon 2, wanda ya fi sauƙi a fahimta da aiki da shi,\nmusamman a cikin mahallin inda lissafin binary ke yawan faruwa.\n\nMisali:\n- Shigarwa: 7\n- Fitarwa: \"7=4+2+1\"\n- Shigarwa: 43\n- Fitarwa: \"43=32+8+2+1\"\n\nShigarwa: Wani cikakken lamba guda ɗaya ($number), inda 0 < $number < 1000000.\nFitarwa: Wani jere mai wakiltar daidaiton jumlar ikon 2 wanda yayi daidai da lambar da aka shigar.",
      "hi": "PHP फ़ंक्शन `function decimalToBinarySum($number)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदशमलव संख्या को 2 की शक्तियों के योग में परिवर्तित करता है।\nयह फ़ंक्शन दशमलव संख्या के द्विआधारी प्रतिनिधित्व को समझने के लिए उपयोगी है।\nयह संख्या को 2 की शक्तियों के योग में तोड़ता है, जो समझने और कार्य करने में आसान होते हैं,\nविशेष रूप से उन संदर्भों में जहां द्विआधारी गणनाएँ अक्सर होती हैं।\n\nउदाहरण के लिए:\n- इनपुट: 7\n- आउटपुट: \"7=4+2+1\"\n- इनपुट: 43\n- आउटपुट: \"43=32+8+2+1\"\n\nइनपुट: एकल पूर्णांक ($number), जहाँ 0 < $number < 1000000।\nआउटपुट: एक स्ट्रिंग जो इनपुट संख्या के बराबर 2 की शक्तियों के योग का समीकरण दर्शाती है।",
      "hu": "Írj egy PHP függvényt `function decimalToBinarySum($number)` a következő probléma megoldására:\nÁtalakít egy decimális számot a 2 hatványainak összegévé.\nEz a függvény hasznos a decimális szám bináris reprezentációjának megértéséhez.\nA számot a 2 hatványainak összegére bontja le, amelyek könnyebben érthetők és kezelhetők,\nkülönösen olyan környezetekben, ahol gyakoriak a bináris számítások.\n\nPéldául:\n- Bemenet: 7\n- Kimenet: \"7=4+2+1\"\n- Bemenet: 43\n- Kimenet: \"43=32+8+2+1\"\n\nBemenet: Egyetlen egész szám ($number), ahol 0 < $number < 1000000.\nKimenet: Egy karakterlánc, amely a bemeneti számmal egyenlő 2 hatványainak összegének egyenletét ábrázolja."
    },
    "instruction_bertscore": {
      "sq": "0.991500010104374",
      "hy": "0.9879631975396668",
      "bn": "0.9706458063995211",
      "bg": "0.9955387616419564",
      "zh": "0.9650241693554718",
      "fr": "0.9896547338645599",
      "de": "0.9877903891081664",
      "ha": "0.973702330702886",
      "hi": "0.9770095265471168",
      "hu": "0.9757468332148781"
    },
    "level": "easy",
    "test": "function main(){\n    assert(decimalToBinarySum(7) === \"7=4+2+1\");\n    assert(decimalToBinarySum(43) === \"43=32+8+2+1\");\n    assert(decimalToBinarySum(15) === \"15=8+4+2+1\");\n    assert(decimalToBinarySum(1) === \"1=1\");\n    assert(decimalToBinarySum(32) === \"32=32\");\n    \n}\n\nmain();\n?>",
    "entry_point": "decimalToBinarySum",
    "signature": "function decimalToBinarySum($number)",
    "docstring": {
      "en": "Converts a decimal number into a sum of powers of 2.\nThis function is useful for understanding the binary representation of a decimal number.\nIt breaks down the number into a sum of powers of 2, which are easier to understand and work with,\nespecially in contexts where binary calculations are frequent.\n\nFor example:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: A single integer ($number), where 0 < $number < 1000000.\nOutput: A string representing the equation of the sum of powers of 2 that equals the input number.",
      "sq": "Konverton një numër dhjetor në një shumë të fuqive të 2.\nKjo funksion është e dobishme për të kuptuar përfaqësimin binar të një numri dhjetor.\nAjo e ndan numrin në një shumë të fuqive të 2, të cilat janë më të lehta për t'u kuptuar dhe punuar me to,\nsidomos në kontekste ku llogaritjet binare janë të shpeshta.\n\nPër shembull:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: Një numër i vetëm i plotë ($number), ku 0 < $number < 1000000.\nOutput: Një varg që përfaqëson ekuacionin e shumës së fuqive të 2 që është e barabartë me numrin e dhënë si input.",
      "hy": "Վերափոխում է տասնորդական թիվը 2-ի աստիճանների գումարի:\nԱյս ֆունկցիան օգտակար է տասնորդական թվի երկբայնային ներկայացումը հասկանալու համար:\nԱյն բաժանում է թիվը 2-ի աստիճանների գումարի, որոնք ավելի հեշտ են հասկանալ և աշխատել,\nհատկապես այն համատեքստերում, որտեղ երկբայնային հաշվարկները հաճախակի են:\n\nՕրինակ:\n- Մուտքագրում: 7\n- Ելք: \"7=4+2+1\"\n- Մուտքագրում: 43\n- Ելք: \"43=32+8+2+1\"\n\nՄուտքագրում: Միակ ամբողջ թիվ ($number), որտեղ 0 < $number < 1000000:\nԵլք: Տող, որը ներկայացնում է 2-ի աստիճանների գումարի հավասարումը, որը հավասար է մուտքագրված թվին:",
      "bn": "দশমিক সংখ্যাকে ২ এর ঘাতের যোগফলে রূপান্তর করে।\nএই ফাংশনটি একটি দশমিক সংখ্যার বাইনারি উপস্থাপন বোঝার জন্য উপকারী।\nএটি সংখ্যাটিকে ২ এর ঘাতের যোগফলে ভেঙে দেয়, যা বোঝা এবং কাজ করা সহজ,\nবিশেষত সেই প্রসঙ্গে যেখানে বাইনারি গণনা ঘন ঘন হয়।\n\nউদাহরণস্বরূপ:\n- ইনপুট: 7\n- আউটপুট: \"7=4+2+1\"\n- ইনপুট: 43\n- আউটপুট: \"43=32+8+2+1\"\n\nইনপুট: একটি একক পূর্ণসংখ্যা ($number), যেখানে 0 < $number < 1000000।\nআউটপুট: একটি স্ট্রিং যা ইনপুট সংখ্যার সমান ২ এর ঘাতের যোগফলের সমীকরণ উপস্থাপন করে।",
      "bg": "Преобразува десетично число в сума от степени на 2.  \nТази функция е полезна за разбиране на двоичното представяне на десетично число.  \nРазбива числото на сума от степени на 2, които са по-лесни за разбиране и работа,  \nособено в контексти, където двоичните изчисления са чести.\n\nНапример:  \n- Вход: 7  \n- Изход: \"7=4+2+1\"  \n- Вход: 43  \n- Изход: \"43=32+8+2+1\"  \n\nВход: Едно цяло число ($number), където 0 < $number < 1000000.  \nИзход: Низ, представляващ уравнението на сумата от степени на 2, което е равно на входното число.",
      "zh": "将十进制数转换为2的幂之和。\n此函数对于理解十进制数的二进制表示非常有用。\n它将数字分解为2的幂之和，这样更容易理解和处理，\n特别是在二进制计算频繁的情况下。\n\n例如：\n- 输入: 7\n- 输出: \"7=4+2+1\"\n- 输入: 43\n- 输出: \"43=32+8+2+1\"\n\n输入: 一个整数 ($number)，其中 0 < $number < 1000000。\n输出: 一个字符串，表示等于输入数字的2的幂之和的方程。",
      "fr": "Convertit un nombre décimal en une somme de puissances de 2.  \nCette fonction est utile pour comprendre la représentation binaire d'un nombre décimal.  \nElle décompose le nombre en une somme de puissances de 2, ce qui est plus facile à comprendre et à manipuler,  \nsurtout dans des contextes où les calculs binaires sont fréquents.\n\nPar exemple :  \n- Entrée : 7  \n- Sortie : \"7=4+2+1\"  \n- Entrée : 43  \n- Sortie : \"43=32+8+2+1\"\n\nEntrée : Un seul entier ($number), où 0 < $number < 1000000.  \nSortie : Une chaîne de caractères représentant l'équation de la somme des puissances de 2 qui est égale au nombre d'entrée.",
      "de": "Konvertiert eine Dezimalzahl in eine Summe von Zweierpotenzen.\nDiese Funktion ist nützlich, um die binäre Darstellung einer Dezimalzahl zu verstehen.\nSie zerlegt die Zahl in eine Summe von Zweierpotenzen, die leichter zu verstehen und zu bearbeiten sind,\ninsbesondere in Kontexten, in denen binäre Berechnungen häufig vorkommen.\n\nZum Beispiel:\n- Eingabe: 7\n- Ausgabe: \"7=4+2+1\"\n- Eingabe: 43\n- Ausgabe: \"43=32+8+2+1\"\n\nEingabe: Eine einzelne ganze Zahl ($number), wobei 0 < $number < 1000000.\nAusgabe: Ein String, der die Gleichung der Summe von Zweierpotenzen darstellt, die der Eingabezahl entspricht.",
      "ha": "Yana canza lambar decimal zuwa jumlar karfin 2.\nWannan aikin yana da amfani don fahimtar wakilcin binary na lambar decimal.  \nYana rarraba lambar zuwa jumlar ikon 2, wanda ya fi sauƙi a fahimta da aiki da shi,  \nmusamman a cikin yanayi inda lissafin binary ya zama ruwan dare.  \n\nMisali:  \n- Shigarwa: 7  \n- Fitarwa: \"7=4+2+1\"  \n- Shigarwa: 43  \n- Fitarwa: \"43=32+8+2+1\"  \n\nShigarwa: Lamba guda ɗaya ($number), inda 0 < $number < 1000000.  \nFitarwa: Wani rubutu mai wakiltar daidaiton jumlar ikon 2 wanda yayi daidai da lambar shigarwa.",
      "hi": "दशमलव संख्या को 2 की शक्तियों के योग में परिवर्तित करता है।\nयह फ़ंक्शन एक दशमलव संख्या के द्विआधारी निरूपण को समझने के लिए उपयोगी है।  \nयह संख्या को 2 की शक्तियों के योग में विभाजित करता है, जो समझने और काम करने में आसान होते हैं,  \nविशेष रूप से उन संदर्भों में जहाँ द्विआधारी गणनाएँ बार-बार होती हैं।\n\nउदाहरण के लिए:  \n- इनपुट: 7  \n- आउटपुट: \"7=4+2+1\"  \n- इनपुट: 43  \n- आउटपुट: \"43=32+8+2+1\"  \n\nइनपुट: एकल पूर्णांक ($number), जहाँ 0 < $number < 1000000।  \nआउटपुट: एक स्ट्रिंग जो 2 की शक्तियों के योग का समीकरण दर्शाती है जो इनपुट संख्या के बराबर है।",
      "hu": "Átalakít egy decimális számot a 2 hatványainak összegévé.\nEz a függvény hasznos a decimális szám bináris reprezentációjának megértéséhez.\nA számot a 2 hatványainak összegére bontja le, amelyek könnyebben érthetők és kezelhetők,\nkülönösen olyan kontextusokban, ahol a bináris számítások gyakoriak.\n\nPéldául:\n- Bemenet: 7\n- Kimenet: \"7=4+2+1\"\n- Bemenet: 43\n- Kimenet: \"43=32+8+2+1\"\n\nBemenet: Egyetlen egész szám ($number), ahol 0 < $number < 1000000.\nKimenet: Egy karakterlánc, amely az input számnak megfelelő 2 hatványainak összegének egyenletét ábrázolja."
    },
    "docstring_bertscore": {
      "sq": "0.9934990262591091",
      "hy": "0.9919961887961992",
      "bn": "0.9762966421095827",
      "bg": "0.9912564892572252",
      "zh": "0.9594341145420069",
      "fr": "0.9861340103607166",
      "de": "0.9790923647226487",
      "ha": "0.961251185267714",
      "hi": "1",
      "hu": "0.98158775819959"
    }
  },
  {
    "task_id": "PHP/15",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the rectangle with the largest area that includes a given point.\n * In this task, we are given a list of rectangles, each defined by two opposite corner points,\n * and a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\n * The goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\n * Input: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\n *        and a needle point [x, y].\n * Output: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\n * Example: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\n *          the function should return 2, as the second rectangle is larger and contains the needle.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "sq": "<?php\n\n\n/**\n * Gjen drejtkëndëshin me sipërfaqen më të madhe që përfshin një pikë të dhënë.\n * Në këtë detyrë, na jepet një listë drejtkëndëshash, secili i përcaktuar nga dy pika të kundërta të qosheve,\n * dhe një pikë e referuar si \"gjilpëra\". Anët e drejtkëndëshave janë paralele me boshtet e koordinatave.\n * Qëllimi është të gjejmë drejtkëndëshin me sipërfaqen maksimale që përmban gjilpërën (duke përfshirë kufirin e saj).\n * Hyrja: Një varg drejtkëndëshash (çdo drejtkëndësh është një varg me dy pika [x1, y1, x2, y2]),\n *        dhe një pikë gjilpërë [x, y].\n * Dalja: Kthen indeksin (bazuar në 1) të drejtkëndëshit me sipërfaqen më të madhe që përmban gjilpërën.\n * Shembull: Për drejtkëndëshat [[1,1,4,4], [2,2,6,6]] dhe pikën gjilpërë [3,3],\n *          funksioni duhet të kthejë 2, pasi drejtkëndëshi i dytë është më i madh dhe përmban gjilpërën.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hy": "<?php\n\n\n/**\n * Գտնում է ամենամեծ մակերեսով ուղղանկյունը, որը ներառում է տրված կետը:\n * Այս առաջադրանքում մեզ տրված է ուղղանկյունների ցուցակ, որոնք յուրաքանչյուրն սահմանված են երկու հակադիր անկյունային կետերով,\n * և կետ, որը կոչվում է \"ասեղ\": Ուղղանկյունների կողմերը զուգահեռ են կոորդինատային առանցքներին:\n * Նպատակն է գտնել ամենամեծ մակերեսով ուղղանկյունը, որը պարունակում է ասեղը (ներառյալ նրա սահմանը):\n * Մուտք: Ուղղանկյունների զանգված (յուրաքանչյուր ուղղանկյունը երկու կետերի զանգված է [x1, y1, x2, y2]),\n *        և ասեղի կետ [x, y]:\n * Ելք: Վերադարձնում է ամենամեծ մակերեսով ուղղանկյան ինդեքսը (1-ից սկսած), որը պարունակում է ասեղը:\n * Օրինակ: Ուղղանկյունների համար [[1,1,4,4], [2,2,6,6]] և ասեղի կետ [3,3],\n *          ֆունկցիան պետք է վերադարձնի 2, քանի որ երկրորդ ուղղանկյունը ավելի մեծ է և պարունակում է ասեղը:\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "bn": "<?php\n\n\n/**\n * একটি প্রদত্ত বিন্দু অন্তর্ভুক্ত করে এমন সর্বাধিক ক্ষেত্রফল বিশিষ্ট আয়তক্ষেত্র খুঁজে বের করে।\n * এই কাজে, আমাদের একটি আয়তক্ষেত্রের তালিকা দেওয়া হয়েছে, প্রতিটি দুটি বিপরীত কোণ বিন্দু দ্বারা সংজ্ঞায়িত,\n * এবং একটি বিন্দু যা \"সুই\" হিসাবে উল্লেখ করা হয়। আয়তক্ষেত্রগুলির পার্শ্বগুলি স্থানাঙ্ক অক্ষের সাথে সমান্তরাল।\n * লক্ষ্য হল সর্বাধিক ক্ষেত্রফল বিশিষ্ট আয়তক্ষেত্র খুঁজে বের করা যা সুইকে অন্তর্ভুক্ত করে (এর সীমানা সহ)।\n * ইনপুট: আয়তক্ষেত্রের একটি অ্যারে (প্রতিটি আয়তক্ষেত্র দুটি বিন্দুর একটি অ্যারে [x1, y1, x2, y2]),\n *        এবং একটি সুই বিন্দু [x, y]।\n * আউটপুট: আয়তক্ষেত্রের সূচক (১-ভিত্তিক) ফেরত দেয় যার সর্বাধিক ক্ষেত্রফল রয়েছে এবং যা সুইকে অন্তর্ভুক্ত করে।\n * উদাহরণ: আয়তক্ষেত্র [[1,1,4,4], [2,2,6,6]] এবং সুই বিন্দু [3,3] এর জন্য,\n *          ফাংশনটি ২ ফেরত দেবে, কারণ দ্বিতীয় আয়তক্ষেত্রটি বড় এবং সুইকে অন্তর্ভুক্ত করে।\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "bg": "<?php\n\n\n/**\n * Намира правоъгълника с най-голяма площ, който включва дадена точка.\n * В тази задача ни е даден списък от правоъгълници, всеки дефиниран от две противоположни ъглови точки,\n * и точка, наречена \"игла\". Страните на правоъгълниците са успоредни на координатните оси.\n * Целта е да се намери правоъгълникът с максимална площ, който съдържа иглата (включително и границата ѝ).\n * Вход: Масив от правоъгълници (всеки правоъгълник е масив от две точки [x1, y1, x2, y2]),\n *        и точка игла [x, y].\n * Изход: Връща индекса (базиран на 1) на правоъгълника с най-голяма площ, който съдържа иглата.\n * Пример: За правоъгълници [[1,1,4,4], [2,2,6,6]] и точка игла [3,3],\n *          функцията трябва да върне 2, тъй като вторият правоъгълник е по-голям и съдържа иглата.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "zh": "<?php\n\n\n/**\n * 查找包含给定点的最大面积的矩形。\n * 在这个任务中，我们给出一个矩形列表，每个矩形由两个对角点定义，\n * 以及一个称为“针”的点。矩形的边与坐标轴平行。\n * 目标是找到包含针（包括其边界）的最大面积的矩形。\n * 输入：一个矩形数组（每个矩形是由两个点 [x1, y1, x2, y2] 组成的数组），\n *       和一个针点 [x, y]。\n * 输出：返回包含针的最大面积矩形的索引（从1开始）。\n * 示例：对于矩形 [[1,1,4,4], [2,2,6,6]] 和针点 [3,3]，\n *       函数应返回 2，因为第二个矩形更大并且包含针。\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "fr": "<?php\n\n\n/**\n * Trouve le rectangle avec la plus grande aire qui inclut un point donné.\n * Dans cette tâche, on nous donne une liste de rectangles, chacun défini par deux points de coin opposés,\n * et un point appelé \"aiguille\". Les côtés des rectangles sont parallèles aux axes de coordonnées.\n * L'objectif est de trouver le rectangle avec l'aire maximale qui contient l'aiguille (y compris sa frontière).\n * Entrée : Un tableau de rectangles (chaque rectangle est un tableau de deux points [x1, y1, x2, y2]),\n *          et un point aiguille [x, y].\n * Sortie : Renvoie l'indice (basé sur 1) du rectangle avec la plus grande aire qui contient l'aiguille.\n * Exemple : Pour les rectangles [[1,1,4,4], [2,2,6,6]] et le point aiguille [3,3],\n *           la fonction doit renvoyer 2, car le deuxième rectangle est plus grand et contient l'aiguille.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "de": "<?php\n\n\n/**\n * Findet das Rechteck mit der größten Fläche, das einen gegebenen Punkt einschließt.\n * In dieser Aufgabe erhalten wir eine Liste von Rechtecken, die jeweils durch zwei gegenüberliegende Eckpunkte definiert sind,\n * und einen Punkt, der als \"Nadel\" bezeichnet wird. Die Seiten der Rechtecke sind parallel zu den Koordinatenachsen.\n * Das Ziel ist es, das Rechteck mit der maximalen Fläche zu finden, das die Nadel enthält (einschließlich seiner Grenze).\n * Eingabe: Ein Array von Rechtecken (jedes Rechteck ist ein Array von zwei Punkten [x1, y1, x2, y2]),\n *          und ein Nadelpunkt [x, y].\n * Ausgabe: Gibt den Index (1-basiert) des Rechtecks mit der größten Fläche zurück, das die Nadel enthält.\n * Beispiel: Für die Rechtecke [[1,1,4,4], [2,2,6,6]] und den Nadelpunkt [3,3],\n *           sollte die Funktion 2 zurückgeben, da das zweite Rechteck größer ist und die Nadel enthält.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "ha": "<?php\n\n\n/**\n * Nemi rectangle mai girma mafi girma wanda ya haɗa da wani maki.\n * A wannan aikin, an ba mu jerin rectangles, kowanne an ayyana shi ta wurin maki biyu masu kishiyar juna,\n * da kuma wani maki da ake kira \"allura\". Gefen rectangles suna daidai da axises na tsarawa.\n * Manufar ita ce a nemo rectangle mai girma mafi girma wanda ya ƙunshi allura (ciki har da iyakarta).\n * Shigarwa: Jerin rectangles (kowanne rectangle jerin maki biyu ne [x1, y1, x2, y2]),\n *        da kuma maki na allura [x, y].\n * Fitarwa: Mayar da lamba (wanda aka fara da 1) na rectangle mai girma mafi girma wanda ya ƙunshi allura.\n * Misali: Don rectangles [[1,1,4,4], [2,2,6,6]] da maki na allura [3,3],\n *          aikin ya kamata ya dawo da 2, domin rectangle na biyu ya fi girma kuma ya ƙunshi allura.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hi": "<?php\n\n\n/**\n * उस आयत को ढूंढें जिसका क्षेत्रफल सबसे बड़ा है और जिसमें एक दिया गया बिंदु शामिल है।\n * इस कार्य में, हमें आयतों की एक सूची दी जाती है, प्रत्येक को दो विपरीत कोने के बिंदुओं द्वारा परिभाषित किया जाता है,\n * और एक बिंदु जिसे \"सुई\" कहा जाता है। आयतों के किनारे निर्देशांक अक्षों के समानांतर होते हैं।\n * लक्ष्य यह है कि उस आयत को ढूंढा जाए जिसका क्षेत्रफल अधिकतम हो और जिसमें सुई शामिल हो (इसके सीमा सहित)।\n * इनपुट: आयतों की एक श्रृंखला (प्रत्येक आयत दो बिंदुओं की एक श्रृंखला है [x1, y1, x2, y2]),\n *        और एक सुई बिंदु [x, y]।\n * आउटपुट: उस आयत का सूचकांक (1-आधारित) लौटाता है जिसका क्षेत्रफल सबसे बड़ा है और जिसमें सुई शामिल है।\n * उदाहरण: आयतों के लिए [[1,1,4,4], [2,2,6,6]] और सुई बिंदु [3,3],\n *          फ़ंक्शन को 2 लौटाना चाहिए, क्योंकि दूसरी आयत बड़ी है और सुई को शामिल करती है।\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hu": "<?php\n\n\n/**\n * Megkeresi azt a téglalapot, amely a legnagyobb területű és tartalmaz egy adott pontot.\n * Ebben a feladatban egy téglalapokból álló listát kapunk, ahol minden téglalapot két szemközti sarokpont határoz meg,\n * és egy pontot, amelyet \"tűnek\" nevezünk. A téglalapok oldalai párhuzamosak a koordinátatengelyekkel.\n * A cél az, hogy megtaláljuk azt a téglalapot, amely a maximális területű és tartalmazza a tűt (beleértve a határát is).\n * Bemenet: Téglalapok tömbje (minden téglalap egy két pontból álló tömb [x1, y1, x2, y2]),\n *          és egy tű pont [x, y].\n * Kimenet: Visszaadja annak a téglalapnak az indexét (1-alapú), amely a legnagyobb területű és tartalmazza a tűt.\n * Példa: Téglalapok [[1,1,4,4], [2,2,6,6]] és tű pont [3,3] esetén\n *         a függvénynek 2-t kell visszaadnia, mivel a második téglalap nagyobb és tartalmazza a tűt.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)"
    },
    "prompt_bertscore": {
      "sq": "0.9937929992230408",
      "hy": "0.9768009646470303",
      "bn": "0.9864776409199069",
      "bg": "0.9816439705974229",
      "zh": "0.9669028154992997",
      "fr": "0.9870794909744426",
      "de": "0.9897480901436463",
      "ha": "0.9430828615752148",
      "hi": "0.9773914927698469",
      "hu": "0.9860823664616475"
    },
    "canonical_solution": "{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}",
    "instruction": {
      "en": "Write a PHP function `function findMaxAreaRectangle($rectangles, $needle)` to solve the following problem:\nFinds the rectangle with the largest area that includes a given point.\nIn this task, we are given a list of rectangles, each defined by two opposite corner points,\nand a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\nThe goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\nInput: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\nand a needle point [x, y].\nOutput: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\nExample: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\nthe function should return 2, as the second rectangle is larger and contains the needle.",
      "sq": "Shkruani një funksion PHP `function findMaxAreaRectangle($rectangles, $needle)` për të zgjidhur problemin e mëposhtëm:\nGjen drejtkëndëshin me sipërfaqen më të madhe që përfshin një pikë të dhënë.\nNë këtë detyrë, na jepet një listë drejtkëndëshash, secili i përcaktuar nga dy pika këndore të kundërta,\ndhe një pikë e referuar si \"gjilpëra\". Anët e drejtkëndëshave janë paralele me boshtet e koordinatave.\nQëllimi është të gjendet drejtkëndëshi me sipërfaqen maksimale që përmban gjilpërën (duke përfshirë kufirin e saj).\nHyrja: Një varg drejtkëndëshash (çdo drejtkëndësh është një varg me dy pika [x1, y1, x2, y2]),\ndhe një pikë gjilpërë [x, y].\nDalja: Kthen indeksin (bazuar në 1) të drejtkëndëshit me sipërfaqen më të madhe që përmban gjilpërën.\nShembull: Për drejtkëndëshat [[1,1,4,4], [2,2,6,6]] dhe pikën gjilpërë [3,3],\nfunksioni duhet të kthejë 2, pasi drejtkëndëshi i dytë është më i madh dhe përmban gjilpërën.",
      "hy": "Գրեք PHP ֆունկցիա `function findMaxAreaRectangle($rectangles, $needle)` հետևյալ խնդիրը լուծելու համար:\nԳտնում է ամենամեծ մակերեսով ուղղանկյունը, որը պարունակում է տրված կետը։\nԱյս առաջադրանքում մեզ տրված է ուղղանկյունների ցուցակ, որոնցից յուրաքանչյուրը սահմանվում է երկու հակադիր անկյունային կետերով,\nև կետ, որը կոչվում է \"ասեղ\": Ուղղանկյունների կողմերը զուգահեռ են կոորդինատային առանցքներին։\nՆպատակն է գտնել ամենամեծ մակերեսով ուղղանկյունը, որը պարունակում է ասեղը (ներառյալ դրա սահմանը)։\nՄուտք: Ուղղանկյունների զանգված (յուրաքանչյուր ուղղանկյունը երկու կետերի զանգված է [x1, y1, x2, y2]),\nև ասեղի կետ [x, y]։\nԵլք: Վերադարձնում է ամենամեծ մակերեսով ուղղանկյան ինդեքսը (1-ից սկսած), որը պարունակում է ասեղը։\nՕրինակ: Ուղղանկյունների համար [[1,1,4,4], [2,2,6,6]] և ասեղի կետ [3,3],\nֆունկցիան պետք է վերադարձնի 2, քանի որ երկրորդ ուղղանկյունը ավելի մեծ է և պարունակում է ասեղը։",
      "bn": "PHP ফাংশন `function findMaxAreaRectangle($rectangles, $needle)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রদত্ত বিন্দু অন্তর্ভুক্ত করে এমন বৃহত্তম ক্ষেত্রফল সহ আয়তক্ষেত্র খুঁজে বের করুন।\nএই কাজটিতে, আমাদের একটি আয়তক্ষেত্রের তালিকা দেওয়া হয়েছে, প্রতিটি দুটি বিপরীত কোণ বিন্দু দ্বারা সংজ্ঞায়িত,\nএবং একটি বিন্দু যা \"সুঁই\" হিসাবে উল্লেখ করা হয়। আয়তক্ষেত্রগুলির পার্শ্বগুলি স্থানাঙ্ক অক্ষের সাথে সমান্তরাল।\nলক্ষ্য হল বৃহত্তম ক্ষেত্রফল সহ সেই আয়তক্ষেত্রটি খুঁজে বের করা যা সুঁইকে অন্তর্ভুক্ত করে (এর সীমানা সহ)।\nইনপুট: আয়তক্ষেত্রের একটি অ্যারে (প্রতিটি আয়তক্ষেত্র দুটি বিন্দুর একটি অ্যারে [x1, y1, x2, y2]),\nএবং একটি সুঁই বিন্দু [x, y]।\nআউটপুট: বৃহত্তম ক্ষেত্রফল সহ আয়তক্ষেত্রের সূচক (১-ভিত্তিক) ফেরত দেয় যা সুঁইকে অন্তর্ভুক্ত করে।\nউদাহরণ: আয়তক্ষেত্র [[1,1,4,4], [2,2,6,6]] এবং সুঁই বিন্দু [3,3] এর জন্য,\nফাংশনটি ২ ফেরত দেবে, কারণ দ্বিতীয় আয়তক্ষেত্রটি বড় এবং সুঁইকে অন্তর্ভুক্ত করে।",
      "bg": "Напишете PHP функция `function findMaxAreaRectangle($rectangles, $needle)` за решаване на следния проблем:\nНамира правоъгълника с най-голяма площ, който включва дадена точка.\nВ тази задача ни е даден списък от правоъгълници, всеки от които е определен от две противоположни ъглови точки,\nи точка, наречена \"игла\". Страните на правоъгълниците са успоредни на координатните оси.\nЦелта е да се намери правоъгълникът с максимална площ, който съдържа иглата (включително и границата ѝ).\nВход: Масив от правоъгълници (всеки правоъгълник е масив от две точки [x1, y1, x2, y2]),\nи точка игла [x, y].\nИзход: Връща индекса (1-базирано) на правоъгълника с най-голяма площ, който съдържа иглата.\nПример: За правоъгълници [[1,1,4,4], [2,2,6,6]] и точка игла [3,3],\nфункцията трябва да върне 2, тъй като вторият правоъгълник е по-голям и съдържа иглата.",
      "zh": "编写一个 PHP 函数 `function findMaxAreaRectangle($rectangles, $needle)` 来解决以下问题：\n寻找包含给定点的最大面积的矩形。\n在这个任务中，我们给定一个矩形列表，每个矩形由两个相对的角点定义，\n以及一个被称为“针”的点。矩形的边与坐标轴平行。\n目标是找到包含针（包括其边界）的最大面积的矩形。\n输入：一个矩形数组（每个矩形是由两个点 [x1, y1, x2, y2] 组成的数组），\n以及一个针点 [x, y]。\n输出：返回包含针的最大面积矩形的索引（从1开始）。\n示例：对于矩形 [[1,1,4,4], [2,2,6,6]] 和针点 [3,3]，\n函数应返回 2，因为第二个矩形更大并且包含针。",
      "fr": "Écrire une fonction PHP `function findMaxAreaRectangle($rectangles, $needle)` pour résoudre le problème suivant :\nTrouve le rectangle avec la plus grande aire qui inclut un point donné.\nDans cette tâche, on nous donne une liste de rectangles, chacun défini par deux points de coin opposés,\net un point appelé \"needle\". Les côtés des rectangles sont parallèles aux axes de coordonnées.\nL'objectif est de trouver le rectangle avec l'aire maximale qui contient le needle (y compris sa frontière).\nEntrée : Un tableau de rectangles (chaque rectangle est un tableau de deux points [x1, y1, x2, y2]),\net un point needle [x, y].\nSortie : Renvoie l'indice (basé sur 1) du rectangle avec la plus grande aire qui contient le needle.\nExemple : Pour les rectangles [[1,1,4,4], [2,2,6,6]] et le point needle [3,3],\nla fonction doit renvoyer 2, car le deuxième rectangle est plus grand et contient le needle.",
      "de": "Schreiben Sie eine PHP-Funktion `function findMaxAreaRectangle($rectangles, $needle)`, um das folgende Problem zu lösen:\nFindet das Rechteck mit der größten Fläche, das einen gegebenen Punkt einschließt.\nIn dieser Aufgabe haben wir eine Liste von Rechtecken, die jeweils durch zwei gegenüberliegende Eckpunkte definiert sind,\nund einen Punkt, der als \"Nadel\" bezeichnet wird. Die Seiten der Rechtecke sind parallel zu den Koordinatenachsen.\nDas Ziel ist es, das Rechteck mit der maximalen Fläche zu finden, das die Nadel enthält (einschließlich seiner Grenze).\nEingabe: Ein Array von Rechtecken (jedes Rechteck ist ein Array von zwei Punkten [x1, y1, x2, y2]),\nund ein Nadelpunkt [x, y].\nAusgabe: Gibt den Index (1-basiert) des Rechtecks mit der größten Fläche zurück, das die Nadel enthält.\nBeispiel: Für Rechtecke [[1,1,4,4], [2,2,6,6]] und Nadelpunkt [3,3],\nsollte die Funktion 2 zurückgeben, da das zweite Rechteck größer ist und die Nadel enthält.",
      "ha": "Rubuta aikin PHP `function findMaxAreaRectangle($rectangles, $needle)` don warware matsalar mai zuwa:\nNemo rectangle mai girman yanki mafi girma wanda ya haɗa da wani batu da aka bayar.\nA cikin wannan aikin, an ba mu jerin rectangles, kowanne an ayyana shi ta wurin maki biyu masu kishiyar juna,\nda kuma wani batu da ake kira \"needle\". Gefen rectangles suna daidai da layin daidaitawa.\nManufar ita ce a nemo rectangle mai yanki mafi girma wanda ya ƙunshi needle (ciki har da iyakarsa).\nShigarwa: Jerin rectangles (kowanne rectangle jerin maki biyu ne [x1, y1, x2, y2]),\nda kuma batu needle [x, y].\nFitarwa: Ya dawo da index (1-based) na rectangle mai yanki mafi girma wanda ya ƙunshi needle.\nMisali: Don rectangles [[1,1,4,4], [2,2,6,6]] da batu needle [3,3],\naikin ya kamata ya dawo da 2, domin rectangle na biyu ya fi girma kuma ya ƙunshi needle.",
      "hi": "PHP फ़ंक्शन `function findMaxAreaRectangle($rectangles, $needle)` लिखें ताकि निम्नलिखित समस्या को हल किया जा सके:\nएक दिए गए बिंदु को शामिल करने वाले सबसे बड़े क्षेत्रफल वाले आयत को खोजें।\nइस कार्य में, हमें आयतों की एक सूची दी जाती है, प्रत्येक को दो विपरीत कोने के बिंदुओं द्वारा परिभाषित किया जाता है,\nऔर एक बिंदु जिसे \"सुई\" कहा जाता है। आयतों के किनारे निर्देशांक अक्षों के समानांतर होते हैं।\nलक्ष्य यह है कि अधिकतम क्षेत्रफल वाले आयत को खोजा जाए जो सुई को शामिल करता हो (उसकी सीमा सहित)।\nइनपुट: आयतों की एक सरणी (प्रत्येक आयत दो बिंदुओं की एक सरणी है [x1, y1, x2, y2]),\nऔर एक सुई बिंदु [x, y]।\nआउटपुट: उस आयत का इंडेक्स (1-आधारित) लौटाता है जिसका सबसे बड़ा क्षेत्रफल है और जो सुई को शामिल करता है।\nउदाहरण: आयतों के लिए [[1,1,4,4], [2,2,6,6]] और सुई बिंदु [3,3],\nफंक्शन को 2 लौटाना चाहिए, क्योंकि दूसरा आयत बड़ा है और सुई को शामिल करता है।",
      "hu": "Írj egy PHP függvényt `function findMaxAreaRectangle($rectangles, $needle)` a következő probléma megoldására:\nMegtalálja a legnagyobb területű téglalapot, amely tartalmaz egy adott pontot.\nEbben a feladatban egy téglalapokból álló listát kapunk, amelyek mindegyike két szemközti sarokponttal van meghatározva,\nés egy pontot, amelyet \"tűnek\" nevezünk. A téglalapok oldalai párhuzamosak a koordinátatengelyekkel.\nA cél az, hogy megtaláljuk a legnagyobb területű téglalapot, amely tartalmazza a tűt (beleértve a határát is).\nBemenet: Téglalapok tömbje (minden téglalap két pont tömbje [x1, y1, x2, y2]),\nés egy tűpont [x, y].\nKimenet: Visszaadja annak a téglalapnak az indexét (1-alapú), amely a legnagyobb területű és tartalmazza a tűt.\nPélda: Téglalapok [[1,1,4,4], [2,2,6,6]] és tűpont [3,3] esetén\na függvénynek 2-t kell visszaadnia, mivel a második téglalap nagyobb és tartalmazza a tűt."
    },
    "instruction_bertscore": {
      "sq": "0.9939058212794686",
      "hy": "0.9716006226411559",
      "bn": "0.9779873839129516",
      "bg": "0.9903433853956078",
      "zh": "0.9699464288278973",
      "fr": "0.9798421944110554",
      "de": "0.9874841010606107",
      "ha": "0.9691753456887199",
      "hi": "0.970975135571277",
      "hu": "0.985720859168164"
    },
    "level": "middle",
    "test": "function main(){\n    assert(findMaxAreaRectangle([[2,3,6,8], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[6,8,2,3], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[1,1,4,4], [2,2,6,6]], [3,3]) === 2);\n    assert(findMaxAreaRectangle([[0,0,5,5], [1,1,3,3]], [2,2]) === 1);\n    assert(findMaxAreaRectangle([[1,1,2,2], [2,2,4,4]], [5,5]) === -1); // Needle is outside all rectangles\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMaxAreaRectangle",
    "signature": "function findMaxAreaRectangle($rectangles, $needle)",
    "docstring": {
      "en": "Finds the rectangle with the largest area that includes a given point.\nIn this task, we are given a list of rectangles, each defined by two opposite corner points,\nand a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\nThe goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\nInput: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\nand a needle point [x, y].\nOutput: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\nExample: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\nthe function should return 2, as the second rectangle is larger and contains the needle.",
      "sq": "Gjen drejtkëndëshin me sipërfaqen më të madhe që përfshin një pikë të dhënë.\nNë këtë detyrë, na jepet një listë drejtkëndëshash, secili i përcaktuar nga dy pika të kundërta të qosheve,\ndhe një pikë e referuar si \"gjilpëra\". Anët e drejtkëndëshave janë paralele me boshtet e koordinatave.\nQëllimi është të gjejmë drejtkëndëshin me sipërfaqen maksimale që përmban gjilpërën (duke përfshirë kufirin e saj).\nHyrja: Një varg drejtkëndëshash (çdo drejtkëndësh është një varg me dy pika [x1, y1, x2, y2]),\ndhe një pikë gjilpër [x, y].\nDalja: Kthen indeksin (bazuar në 1) të drejtkëndëshit me sipërfaqen më të madhe që përmban gjilpërën.\nShembull: Për drejtkëndëshat [[1,1,4,4], [2,2,6,6]] dhe pikën e gjilpërës [3,3],\nfunksioni duhet të kthejë 2, pasi drejtkëndëshi i dytë është më i madh dhe përmban gjilpërën.",
      "hy": "Գտնում է ամենամեծ մակերեսով ուղղանկյունը, որը ներառում է տրված կետը։\nԱյս առաջադրանքում մեզ տրված է ուղղանկյունների ցուցակ, որոնցից յուրաքանչյուրը սահմանված է երկու հակադիր անկյունային կետերով,\nև կետ, որը կոչվում է \"ասեղ\"։ Ուղղանկյունների կողմերը զուգահեռ են կոորդինատային առանցքներին։\nՆպատակն է գտնել ամենամեծ մակերեսով ուղղանկյունը, որը պարունակում է ասեղը (ներառյալ դրա սահմանը)։\nՄուտք: Ուղղանկյունների զանգված (յուրաքանչյուր ուղղանկյունը երկու կետերի զանգված է [x1, y1, x2, y2]),\nև ասեղի կետ [x, y]։\nԵլք: Վերադարձնում է ամենամեծ մակերեսով ուղղանկյան ինդեքսը (1-ից սկսած), որը պարունակում է ասեղը։\nՕրինակ: Ուղղանկյունների համար [[1,1,4,4], [2,2,6,6]] և ասեղի կետ [3,3],\nֆունկցիան պետք է վերադարձնի 2, քանի որ երկրորդ ուղղանկյունը մեծ է և պարունակում է ասեղը։",
      "bn": "প্রদত্ত বিন্দুটি অন্তর্ভুক্ত করে এমন সর্বাধিক ক্ষেত্রফলযুক্ত আয়তক্ষেত্রটি খুঁজে বের করে।\nএই কাজটিতে, আমাদেরকে আয়তক্ষেত্রগুলির একটি তালিকা দেওয়া হয়েছে, প্রতিটি আয়তক্ষেত্র দুটি বিপরীত কোণ বিন্দু দ্বারা সংজ্ঞায়িত,\nএবং একটি বিন্দু যা \"সুঁই\" নামে পরিচিত। আয়তক্ষেত্রগুলির পার্শ্বগুলি স্থানাঙ্ক অক্ষের সমান্তরাল।\nলক্ষ্য হল সর্বাধিক ক্ষেত্রফলযুক্ত আয়তক্ষেত্রটি খুঁজে বের করা যা সুঁইটিকে অন্তর্ভুক্ত করে (এর সীমানা সহ)।\nইনপুট: আয়তক্ষেত্রগুলির একটি অ্যারে (প্রতিটি আয়তক্ষেত্র দুটি বিন্দুর একটি অ্যারে [x1, y1, x2, y2]),\nএবং একটি সুঁই বিন্দু [x, y]।\nআউটপুট: সর্বাধিক ক্ষেত্রফলযুক্ত আয়তক্ষেত্রটির সূচক (১-ভিত্তিক) প্রদান করে যা সুঁইটিকে অন্তর্ভুক্ত করে।\nউদাহরণ: আয়তক্ষেত্রগুলির জন্য [[1,1,4,4], [2,2,6,6]] এবং সুঁই বিন্দু [3,3],\nফাংশনটি ২ প্রদান করা উচিত, কারণ দ্বিতীয় আয়তক্ষেত্রটি বড় এবং সুঁইটিকে অন্তর্ভুক্ত করে।",
      "bg": "Намира правоъгълника с най-голяма площ, който включва дадена точка.\nВ тази задача ни е даден списък от правоъгълници, всеки от които е определен от две противоположни ъглови точки,\nи точка, наречена \"игла\". Страните на правоъгълниците са успоредни на координатните оси.\nЦелта е да се намери правоъгълникът с максимална площ, който съдържа иглата (включително и границата му).\nВход: Масив от правоъгълници (всеки правоъгълник е масив от две точки [x1, y1, x2, y2]),\nи точка игла [x, y].\nИзход: Връща индекса (базиран на 1) на правоъгълника с най-голяма площ, който съдържа иглата.\nПример: За правоъгълници [[1,1,4,4], [2,2,6,6]] и точка игла [3,3],\nфункцията трябва да върне 2, тъй като вторият правоъгълник е по-голям и съдържа иглата.",
      "zh": "找到包含给定点的最大面积矩形。\n在这个任务中，我们给定了一组矩形，每个矩形由两个对角点定义，\n以及一个称为“针”的点。矩形的边是与坐标轴平行的。\n目标是找到包含针（包括其边界）的最大面积的矩形。\n输入：一个矩形数组（每个矩形是由两个点 [x1, y1, x2, y2] 组成的数组），\n和一个针点 [x, y]。\n输出：返回包含针的最大面积矩形的索引（从1开始）。\n示例：对于矩形 [[1,1,4,4], [2,2,6,6]] 和针点 [3,3]，\n函数应返回 2，因为第二个矩形更大并且包含针。",
      "fr": "Trouve le rectangle avec la plus grande aire qui inclut un point donné.\nDans cette tâche, nous avons une liste de rectangles, chacun défini par deux points de coin opposés,\net un point appelé \"aiguille\". Les côtés des rectangles sont parallèles aux axes de coordonnées.\nL'objectif est de trouver le rectangle avec l'aire maximale qui contient l'aiguille (y compris sa frontière).\nEntrée : Un tableau de rectangles (chaque rectangle est un tableau de deux points [x1, y1, x2, y2]),\net un point aiguille [x, y].\nSortie : Renvoie l'indice (basé sur 1) du rectangle avec la plus grande aire qui contient l'aiguille.\nExemple : Pour les rectangles [[1,1,4,4], [2,2,6,6]] et le point aiguille [3,3],\nla fonction doit renvoyer 2, car le deuxième rectangle est plus grand et contient l'aiguille.",
      "de": "Findet das Rechteck mit der größten Fläche, das einen gegebenen Punkt einschließt.\nIn dieser Aufgabe haben wir eine Liste von Rechtecken, die jeweils durch zwei gegenüberliegende Eckpunkte definiert sind,\nund einen Punkt, der als \"Nadel\" bezeichnet wird. Die Seiten der Rechtecke sind parallel zu den Koordinatenachsen.\nDas Ziel ist es, das Rechteck mit der maximalen Fläche zu finden, das die Nadel einschließt (einschließlich seiner Grenze).\nEingabe: Ein Array von Rechtecken (jedes Rechteck ist ein Array von zwei Punkten [x1, y1, x2, y2]),\nund ein Nadelpunkt [x, y].\nAusgabe: Gibt den Index (1-basiert) des Rechtecks mit der größten Fläche zurück, das die Nadel enthält.\nBeispiel: Für Rechtecke [[1,1,4,4], [2,2,6,6]] und Nadelpunkt [3,3],\nsollte die Funktion 2 zurückgeben, da das zweite Rechteck größer ist und die Nadel enthält.",
      "ha": "Yana samun murabba'i tare da mafi girman yanki wanda ya haɗa da wani maki da aka bayar.\nA cikin wannan aikin, an ba mu jerin murabba'ai, kowanne an ayyana shi ta wurin maki biyu masu kishiyar kusurwa,\nda kuma wani maki da ake kira \"allura\". Gefen murabba'ai suna daidai da axes na tsarawa.\nManufar ita ce a sami murabba'i tare da mafi girman yanki wanda ya ƙunshi allura (ciki har da iyakarsa).\nShigarwa: Jerin murabba'ai (kowanne murabba'i jerin maki biyu ne [x1, y1, x2, y2]),\nda maki na allura [x, y].\nFitarwa: Yana mayar da lamba (1-tushen) na murabba'i tare da mafi girman yanki wanda ya ƙunshi allura.\nMisali: Don murabba'ai [[1,1,4,4], [2,2,6,6]] da maki na allura [3,3],\naikin ya kamata ya mayar da 2, domin murabba'i na biyu ya fi girma kuma ya ƙunshi allura.",
      "hi": "दिए गए बिंदु को शामिल करने वाले सबसे बड़े क्षेत्रफल वाले आयत को खोजता है।\nइस कार्य में, हमें आयतों की एक सूची दी गई है, प्रत्येक को दो विपरीत कोने के बिंदुओं द्वारा परिभाषित किया गया है,\nऔर एक बिंदु जिसे \"सुई\" कहा जाता है। आयतों की भुजाएँ निर्देशांक अक्षों के समानांतर हैं।\nलक्ष्य यह है कि सुई को शामिल करने वाले (इसके सीमा सहित) अधिकतम क्षेत्रफल वाला आयत खोजा जाए।\nइनपुट: आयतों की एक श्रृंखला (प्रत्येक आयत दो बिंदुओं की एक श्रृंखला है [x1, y1, x2, y2]),\nऔर एक सुई बिंदु [x, y]।\nआउटपुट: उस आयत का सूचकांक (1-आधारित) लौटाता है जिसका सबसे बड़ा क्षेत्रफल है और जो सुई को शामिल करता है।\nउदाहरण: आयतों के लिए [[1,1,4,4], [2,2,6,6]] और सुई बिंदु [3,3],\nफंक्शन को 2 लौटाना चाहिए, क्योंकि दूसरा आयत बड़ा है और सुई को शामिल करता है।",
      "hu": "Megkeresi a legnagyobb területű téglalapot, amely tartalmaz egy adott pontot.\nEbben a feladatban kapunk egy téglalapokból álló listát, amelyek mindegyike két szemközti sarokponttal van meghatározva,\nés egy pontot, amelyet \"tűnek\" nevezünk. A téglalapok oldalai párhuzamosak a koordinátatengelyekkel.\nA cél az, hogy megtaláljuk azt a téglalapot, amelynek a legnagyobb a területe, és amely tartalmazza a tűt (beleértve a határát is).\nBemenet: Téglalapok tömbje (minden téglalap két pontból álló tömb [x1, y1, x2, y2]),\nés egy tű pont [x, y].\nKimenet: Visszaadja annak a téglalapnak az indexét (1-alapú), amelynek a legnagyobb a területe, és amely tartalmazza a tűt.\nPélda: Téglalapok [[1,1,4,4], [2,2,6,6]] és tű pont [3,3] esetén\na függvénynek 2-t kell visszaadnia, mivel a második téglalap nagyobb és tartalmazza a tűt."
    },
    "docstring_bertscore": {
      "sq": "0.9930681969626445",
      "hy": "0.9746237770405068",
      "bn": "0.9692538046892286",
      "bg": "0.9848883992412467",
      "zh": "0.9450864462287137",
      "fr": "0.9746116605872637",
      "de": "0.9869577305508682",
      "ha": "0.9446413155448146",
      "hi": "0.9786122750916874",
      "hu": "0.9858831401894694"
    }
  },
  {
    "task_id": "PHP/16",
    "prompt": {
      "en": "<?php\n\n/**\n * Calculates the maximum value of a segment from a given array of values.\n * Imagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\n * The goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\n * This is akin to finding the most valuable portion of the ribbon to sell or use.\n *\n * Input: \n * An array $values of integers representing the value of each segment of the ribbon.\n *\n * Output:\n * Returns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n *\n * Example:\n * For a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5, \n * as the segment [3, 2] gives the maximum value.\n */\n\n function maxSegmentValue($values)",
      "sq": "<?php\n\n/**\n * Llogarit vlerën maksimale të një segmenti nga një varg i dhënë vlerash.\n * Imagjinoni një rrobaqepës që ka një shirit me segmente të ndryshme, secili me një vlerë të ndryshme, pozitive ose negative.\n * Qëllimi është të gjendet vlera totale maksimale që mund të merret duke prerë një segment të vazhdueshëm të shiritit.\n * Kjo është e ngjashme me gjetjen e pjesës më të vlefshme të shiritit për ta shitur ose përdorur.\n *\n * Hyrja: \n * Një varg $values i numrave të plotë që përfaqëson vlerën e secilit segment të shiritit.\n *\n * Dalja:\n * Kthen një numër të plotë që përfaqëson vlerën maksimale që mund të merret nga çdo segment i vazhdueshëm i shiritit.\n *\n * Shembull:\n * Për një shirit me gjatësi 4 me vlera [-1, 3, 2, -4], funksioni duhet të kthejë 5, \n * pasi segmenti [3, 2] jep vlerën maksimale.\n */\n\n function maxSegmentValue($values)",
      "hy": "<?php\n\n/**\n * Հաշվարկում է հատվածի առավելագույն արժեքը տրված արժեքների զանգվածից:\n * Պատկերացրեք, որ դերձակը ունի ժապավեն տարբեր հատվածներով, որոնցից յուրաքանչյուրն ունի տարբեր արժեք, դրական կամ բացասական:\n * Նպատակն է գտնել առավելագույն ընդհանուր արժեքը, որը կարելի է ստանալ ժապավենի շարունակական հատված կտրելով:\n * Սա նման է ժապավենի առավել արժեքավոր մասը վաճառելու կամ օգտագործելու:\n *\n * Մուտք: \n * Ամբողջ թվերի զանգված $values, որը ներկայացնում է ժապավենի յուրաքանչյուր հատվածի արժեքը:\n *\n * Ելք:\n * Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է ժապավենի ցանկացած շարունակական հատվածից ստացվող առավելագույն արժեքը:\n *\n * Օրինակ:\n * Եթե ժապավենի երկարությունը 4 է և արժեքները [-1, 3, 2, -4] են, ֆունկցիան պետք է վերադարձնի 5, \n * քանի որ հատվածը [3, 2] տալիս է առավելագույն արժեքը:\n */\n\n function maxSegmentValue($values)",
      "bn": "<?php\n\n/**\n * একটি প্রদত্ত মানের অ্যারের একটি অংশের সর্বাধিক মান গণনা করে।\n * কল্পনা করুন একটি দর্জির কাছে বিভিন্ন অংশ সহ একটি ফিতা রয়েছে, প্রতিটি অংশের মান ভিন্ন, ইতিবাচক বা নেতিবাচক।\n * লক্ষ্য হল ফিতার একটি ধারাবাহিক অংশ কেটে সর্বাধিক মোট মান খুঁজে বের করা।\n * এটি ফিতার সবচেয়ে মূল্যবান অংশ বিক্রি বা ব্যবহারের জন্য খুঁজে বের করার মতো।\n *\n * ইনপুট:\n * একটি পূর্ণসংখ্যার অ্যারে $values যা ফিতার প্রতিটি অংশের মান উপস্থাপন করে।\n *\n * আউটপুট:\n * একটি পূর্ণসংখ্যা প্রদান করে যা ফিতার যেকোনো ধারাবাহিক অংশ থেকে প্রাপ্ত সর্বাধিক মান উপস্থাপন করে।\n *\n * উদাহরণ:\n * 4 দৈর্ঘ্যের একটি ফিতার জন্য যার মান [-1, 3, 2, -4], ফাংশনটি 5 ফেরত দেবে,\n * কারণ অংশ [3, 2] সর্বাধিক মান প্রদান করে।\n */\n\n function maxSegmentValue($values)",
      "bg": "<?php\n\n/**\n * Изчислява максималната стойност на сегмент от даден масив от стойности.\n * Представете си, че шивач има лента с различни сегменти, всеки с различна стойност, положителна или отрицателна.\n * Целта е да се намери максималната обща стойност, която може да се получи чрез изрязване на непрекъснат сегмент от лентата.\n * Това е подобно на намирането на най-ценната част от лентата за продажба или използване.\n *\n * Вход: \n * Масив $values от цели числа, представляващи стойността на всеки сегмент от лентата.\n *\n * Изход:\n * Връща цяло число, представляващо максималната стойност, която може да се получи от който и да е непрекъснат сегмент от лентата.\n *\n * Пример:\n * За лента с дължина 4 със стойности [-1, 3, 2, -4], функцията трябва да върне 5,\n * тъй като сегментът [3, 2] дава максималната стойност.\n */\n\n function maxSegmentValue($values)",
      "zh": "<?php\n\n/**\n * 计算给定数组中某段的最大值。\n * 想象一下，一个裁缝有一条缎带，其中包含各种段，每段都有不同的值，可以是正数或负数。\n * 目标是通过剪下一段连续的缎带来获得最大总价值。\n * 这类似于寻找缎带中最有价值的部分进行出售或使用。\n *\n * 输入:\n * 一个整数数组 $values，表示缎带每段的价值。\n *\n * 输出:\n * 返回一个整数，表示从缎带的任何连续段中可以获得的最大值。\n *\n * 示例:\n * 对于长度为 4 的缎带，其值为 [-1, 3, 2, -4]，函数应返回 5，\n * 因为段 [3, 2] 提供了最大值。\n */\n\n function maxSegmentValue($values)",
      "fr": "<?php\n\n/**\n * Calcule la valeur maximale d'un segment à partir d'un tableau donné de valeurs.\n * Imaginez qu'un tailleur a un ruban avec divers segments, chacun ayant une valeur différente, positive ou négative.\n * L'objectif est de trouver la valeur totale maximale qui peut être obtenue en coupant un segment continu du ruban.\n * Cela revient à trouver la portion la plus précieuse du ruban à vendre ou à utiliser.\n *\n * Entrée : \n * Un tableau $values d'entiers représentant la valeur de chaque segment du ruban.\n *\n * Sortie :\n * Renvoie un entier représentant la valeur maximale qui peut être obtenue à partir de n'importe quel segment continu du ruban.\n *\n * Exemple :\n * Pour un ruban de longueur 4 avec les valeurs [-1, 3, 2, -4], la fonction doit renvoyer 5, \n * car le segment [3, 2] donne la valeur maximale.\n */\n\n function maxSegmentValue($values)",
      "de": "<?php\n\n/**\n * Berechnet den maximalen Wert eines Segments aus einem gegebenen Array von Werten.\n * Stellen Sie sich vor, ein Schneider hat ein Band mit verschiedenen Segmenten, von denen jedes einen anderen Wert hat, positiv oder negativ.\n * Das Ziel ist es, den maximalen Gesamtwert zu finden, der durch das Schneiden eines kontinuierlichen Segments des Bandes erzielt werden kann.\n * Dies ist vergleichbar damit, den wertvollsten Teil des Bandes zu finden, um ihn zu verkaufen oder zu verwenden.\n *\n * Eingabe: \n * Ein Array $values von ganzen Zahlen, das den Wert jedes Segments des Bandes darstellt.\n *\n * Ausgabe:\n * Gibt eine ganze Zahl zurück, die den maximalen Wert darstellt, der aus einem beliebigen kontinuierlichen Segment des Bandes erzielt werden kann.\n *\n * Beispiel:\n * Für ein Band der Länge 4 mit den Werten [-1, 3, 2, -4] sollte die Funktion 5 zurückgeben, \n * da das Segment [3, 2] den maximalen Wert liefert.\n */\n\n function maxSegmentValue($values)",
      "ha": "<?php\n\n/**\n * Lissafi mafi girman ƙima na wani yanki daga wani tsararren jerin ƙimomi.\n * Ka yi tunanin wani ɗinki yana da zane mai yankuna daban-daban, kowanne yana da ƙima daban, mai kyau ko mara kyau.\n * Manufar ita ce a gano mafi girman jimillar ƙima da za a iya samu ta hanyar yanke wani ci gaba na zane.\n * Wannan yana kama da gano mafi darajar ɓangaren zane don sayarwa ko amfani.\n *\n * Shigarwa:\n * Wani tsararren $values na lambobi masu nuna ƙimar kowane yanki na zane.\n *\n * Fitarwa:\n * Yana dawo da lamba mai nuna mafi girman ƙima da za a iya samu daga kowane ci gaba na zane.\n *\n * Misali:\n * Don zane mai tsawon 4 tare da ƙimomi [-1, 3, 2, -4], aikin ya kamata ya dawo da 5,\n * domin yanki [3, 2] yana bayar da mafi girman ƙima.\n */\n\n function maxSegmentValue($values)",
      "hi": "<?php\n\n/**\n * दिए गए मानों की एक सरणी से एक खंड का अधिकतम मान गणना करता है।\n * कल्पना करें कि एक दर्जी के पास एक रिबन है जिसमें विभिन्न खंड हैं, जिनमें से प्रत्येक का एक अलग मान है, सकारात्मक या नकारात्मक।\n * लक्ष्य यह है कि रिबन के एक सतत खंड को काटकर प्राप्त किया जा सकने वाला अधिकतम कुल मान खोजा जाए।\n * यह रिबन के सबसे मूल्यवान हिस्से को बेचने या उपयोग करने के समान है।\n *\n * इनपुट:\n * पूर्णांकों की एक सरणी $values जो रिबन के प्रत्येक खंड के मान का प्रतिनिधित्व करती है।\n *\n * आउटपुट:\n * एक पूर्णांक लौटाता है जो रिबन के किसी भी सतत खंड से प्राप्त किया जा सकने वाला अधिकतम मान दर्शाता है।\n *\n * उदाहरण:\n * 4 लंबाई के रिबन के लिए जिसमें मान [-1, 3, 2, -4] हैं, फ़ंक्शन को 5 लौटाना चाहिए,\n * क्योंकि खंड [3, 2] अधिकतम मान देता है।\n */\n\n function maxSegmentValue($values)",
      "hu": "<?php\n\n/**\n * Kiszámítja egy adott értéktömb egy szakaszának maximális értékét.\n * Képzeljünk el egy szabót, akinek van egy szalagja különböző szakaszokkal, amelyek mindegyike eltérő, pozitív vagy negatív értékkel rendelkezik.\n * A cél az, hogy megtaláljuk azt a maximális összértéket, amelyet a szalag egy folytonos szakaszának elvágásával lehet elérni.\n * Ez hasonló ahhoz, hogy megtaláljuk a szalag legértékesebb részét, amelyet eladhatunk vagy felhasználhatunk.\n *\n * Bemenet: \n * Egy $values egész számokat tartalmazó tömb, amely a szalag minden szakaszának értékét képviseli.\n *\n * Kimenet:\n * Visszaad egy egész számot, amely a szalag bármely folytonos szakaszából elérhető maximális értéket képviseli.\n *\n * Példa:\n * Egy 4 hosszúságú szalag esetén, amelynek értékei [-1, 3, 2, -4], a függvénynek 5-öt kell visszaadnia, \n * mivel a [3, 2] szakasz adja a maximális értéket.\n */\n\n function maxSegmentValue($values)"
    },
    "prompt_bertscore": {
      "sq": "0.9619823437003034",
      "hy": "0.9687161122477672",
      "bn": "0.9585573600401188",
      "bg": "0.9881600402472723",
      "zh": "0.9603154375426587",
      "fr": "0.9893732746146335",
      "de": "0.9861586405279649",
      "ha": "0.9445086304502833",
      "hi": "0.9839411309540914",
      "hu": "0.9654714849735623"
    },
    "canonical_solution": "  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}",
    "instruction": {
      "en": "Write a PHP function `function maxSegmentValue($values)` to solve the following problem:\nCalculates the maximum value of a segment from a given array of values.\nImagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\nThe goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\nThis is akin to finding the most valuable portion of the ribbon to sell or use.\n\nInput:\nAn array $values of integers representing the value of each segment of the ribbon.\n\nOutput:\nReturns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n\nExample:\nFor a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5,\nas the segment [3, 2] gives the maximum value.",
      "sq": "Shkruani një funksion PHP `function maxSegmentValue($values)` për të zgjidhur problemin në vijim:\nLlogarit vlerën maksimale të një segmenti nga një varg i dhënë vlerash.\nImagjinoni një rrobaqepës që ka një shirit me segmente të ndryshme, secili me një vlerë të ndryshme, pozitive ose negative.\nQëllimi është të gjendet vlera totale maksimale që mund të merret duke prerë një segment të vazhdueshëm të shiritit.\nKjo është e ngjashme me gjetjen e pjesës më të vlefshme të shiritit për ta shitur ose përdorur.\n\nHyrja:\nNjë varg $values i numrave të plotë që përfaqësojnë vlerën e secilit segment të shiritit.\n\nDalja:\nKthen një numër të plotë që përfaqëson vlerën maksimale që mund të merret nga çdo segment i vazhdueshëm i shiritit.\n\nShembull:\nPër një shirit me gjatësi 4 me vlera [-1, 3, 2, -4], funksioni duhet të kthejë 5,\npasi segmenti [3, 2] jep vlerën maksimale.",
      "hy": "PHP ֆունկցիա `function maxSegmentValue($values)` գրեք հետևյալ խնդիրը լուծելու համար:\nՀաշվում է տրված արժեքների զանգվածից հատվածի առավելագույն արժեքը:\nՊատկերացրեք, որ դերձակը ունի ժապավեն տարբեր հատվածներով, որոնցից յուրաքանչյուրը ունի տարբեր արժեք՝ դրական կամ բացասական:\nՆպատակն է գտնել առավելագույն ընդհանուր արժեքը, որը հնարավոր է ստանալ ժապավենի շարունակական հատված կտրելով:\nՍա նման է ժապավենի ամենաարժեքավոր մասը վաճառելու կամ օգտագործելու համար գտնելուն:\n\nՄուտք:\nԱմբողջ թվերի զանգված $values, որը ներկայացնում է ժապավենի յուրաքանչյուր հատվածի արժեքը:\n\nԵլք:\nՎերադարձնում է ամբողջ թիվ, որը ներկայացնում է ժապավենի ցանկացած շարունակական հատվածից ստացվող առավելագույն արժեքը:\n\nՕրինակ:\nԵթե ժապավենի երկարությունը 4 է և արժեքները [-1, 3, 2, -4] են, ապա ֆունկցիան պետք է վերադարձնի 5,\nքանի որ հատվածը [3, 2] տալիս է առավելագույն արժեքը:",
      "bn": "PHP ফাংশন `function maxSegmentValue($values)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রদত্ত মানের অ্যারের একটি সেগমেন্টের সর্বাধিক মান গণনা করে।\nকল্পনা করুন একটি দর্জির কাছে একটি ফিতা রয়েছে যার বিভিন্ন সেগমেন্ট রয়েছে, প্রতিটি সেগমেন্টের মান ভিন্ন, ইতিবাচক বা নেতিবাচক হতে পারে।\nলক্ষ্য হল ফিতার একটি ধারাবাহিক সেগমেন্ট কেটে সর্বাধিক মোট মান খুঁজে বের করা।\nএটি ফিতার সবচেয়ে মূল্যবান অংশ বিক্রি বা ব্যবহারের জন্য খুঁজে বের করার মতো।\n\nইনপুট:\nএকটি অ্যারে $values যা ফিতার প্রতিটি সেগমেন্টের মানকে উপস্থাপন করে।\n\nআউটপুট:\nএকটি পূর্ণসংখ্যা ফেরত দেয় যা ফিতার যেকোনো ধারাবাহিক সেগমেন্ট থেকে প্রাপ্ত সর্বাধিক মানকে উপস্থাপন করে।\n\nউদাহরণ:\n4 দৈর্ঘ্যের একটি ফিতার জন্য যার মান [-1, 3, 2, -4], ফাংশনটি 5 ফেরত দেবে,\nকারণ সেগমেন্ট [3, 2] সর্বাধিক মান প্রদান করে।",
      "bg": "Напишете PHP функция `function maxSegmentValue($values)` за решаване на следния проблем:\nИзчислява максималната стойност на сегмент от даден масив от стойности.\nПредставете си, че шивач има лента с различни сегменти, всеки от които има различна стойност, положителна или отрицателна.\nЦелта е да се намери максималната обща стойност, която може да се получи чрез изрязване на непрекъснат сегмент от лентата.\nТова е подобно на намирането на най-ценната част от лентата за продажба или употреба.\n\nВход:\nМасив $values от цели числа, представляващи стойността на всеки сегмент от лентата.\n\nИзход:\nВръща цяло число, представляващо максималната стойност, която може да се получи от който и да е непрекъснат сегмент от лентата.\n\nПример:\nЗа лента с дължина 4 със стойности [-1, 3, 2, -4], функцията трябва да върне 5,\nтъй като сегментът [3, 2] дава максималната стойност.",
      "zh": "编写一个 PHP 函数 `function maxSegmentValue($values)` 来解决以下问题：\n计算给定数值数组中某个片段的最大值。\n想象一下，一个裁缝有一条带有不同价值段的丝带，每段的价值可能是正数或负数。\n目标是通过剪切丝带的连续片段来获得最大总价值。\n这类似于寻找丝带中最有价值的部分以出售或使用。\n\n输入：\n一个整数数组 $values，表示丝带每个段的价值。\n\n输出：\n返回一个整数，表示可以从丝带的任何连续片段中获得的最大值。\n\n示例：\n对于长度为 4 的丝带，数值为 [-1, 3, 2, -4]，函数应返回 5，\n因为片段 [3, 2] 提供了最大值。",
      "fr": "Écrire une fonction PHP `function maxSegmentValue($values)` pour résoudre le problème suivant :\nCalcule la valeur maximale d'un segment à partir d'un tableau donné de valeurs.\nImaginez qu'un tailleur a un ruban avec divers segments, chacun ayant une valeur différente, positive ou négative.\nL'objectif est de trouver la valeur totale maximale qui peut être obtenue en coupant un segment continu du ruban.\nCeci est similaire à trouver la portion la plus précieuse du ruban à vendre ou à utiliser.\n\nEntrée :\nUn tableau $values d'entiers représentant la valeur de chaque segment du ruban.\n\nSortie :\nRetourne un entier représentant la valeur maximale qui peut être obtenue à partir de n'importe quel segment continu du ruban.\n\nExemple :\nPour un ruban de longueur 4 avec les valeurs [-1, 3, 2, -4], la fonction doit retourner 5,\ncar le segment [3, 2] donne la valeur maximale.",
      "de": "Schreiben Sie eine PHP-Funktion `function maxSegmentValue($values)`, um das folgende Problem zu lösen:\nBerechnet den maximalen Wert eines Segments aus einem gegebenen Array von Werten.\nStellen Sie sich vor, ein Schneider hat ein Band mit verschiedenen Segmenten, die jeweils einen unterschiedlichen Wert haben, positiv oder negativ.\nDas Ziel ist es, den maximalen Gesamtwert zu finden, der durch das Schneiden eines kontinuierlichen Segments des Bandes erzielt werden kann.\nDies ist vergleichbar mit dem Finden des wertvollsten Teils des Bandes, um ihn zu verkaufen oder zu verwenden.\n\nEingabe:\nEin Array $values von ganzen Zahlen, das den Wert jedes Segments des Bandes darstellt.\n\nAusgabe:\nGibt eine ganze Zahl zurück, die den maximalen Wert darstellt, der aus einem beliebigen kontinuierlichen Segment des Bandes erzielt werden kann.\n\nBeispiel:\nFür ein Band der Länge 4 mit den Werten [-1, 3, 2, -4] sollte die Funktion 5 zurückgeben,\nda das Segment [3, 2] den maximalen Wert liefert.",
      "ha": "Rubuta aikin PHP `function maxSegmentValue($values)` don warware matsalar mai zuwa:\nLissafa mafi girman ƙimar wani yanki daga jerin ƙimomi da aka bayar.\nKa yi tunanin wani ɗinki yana da zare mai sassa daban-daban, kowanne yana da wata ƙima, mai kyau ko mara kyau.\nManufar ita ce a gano mafi girman jimillar ƙima da za a iya samu ta hanyar yanke wani yanki mai ci gaba na zaren.\nWannan yana kama da gano mafi darajar ɓangaren zaren don sayarwa ko amfani.\n\nShigarwa:\nJerin $values na lambobi masu nuna ƙimar kowanne yanki na zaren.\n\nFitarwa:\nYa dawo da lamba mai nuna mafi girman ƙimar da za a iya samu daga kowane yanki mai ci gaba na zaren.\n\nMisali:\nDon zaren mai tsawon 4 tare da ƙimomi [-1, 3, 2, -4], aikin ya kamata ya dawo da 5,\ndomin yankin [3, 2] yana bayar da mafi girman ƙima.",
      "hi": "PHP फ़ंक्शन `function maxSegmentValue($values)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदिए गए मानों की एक array से किसी खंड का अधिकतम मान गणना करता है।\nकल्पना करें कि एक दर्जी के पास विभिन्न खंडों के साथ एक रिबन है, प्रत्येक का एक अलग मान है, सकारात्मक या नकारात्मक।\nलक्ष्य यह है कि रिबन के एक सतत खंड को काटकर अधिकतम कुल मूल्य प्राप्त किया जा सके।\nयह रिबन के सबसे मूल्यवान हिस्से को बेचने या उपयोग करने के समान है।\n\nइनपुट:\nएक array $values जिसमें रिबन के प्रत्येक खंड का मान दर्शाया गया है।\n\nआउटपुट:\nएक पूर्णांक लौटाता है जो रिबन के किसी भी सतत खंड से प्राप्त अधिकतम मान का प्रतिनिधित्व करता है।\n\nउदाहरण:\nयदि रिबन की लंबाई 4 है और मान [-1, 3, 2, -4] हैं, तो फ़ंक्शन को 5 लौटाना चाहिए,\nक्योंकि खंड [3, 2] अधिकतम मान देता है।",
      "hu": "Írj egy PHP függvényt `function maxSegmentValue($values)` a következő probléma megoldására:\nKiszámítja egy szegmens maximális értékét egy adott értékek tömbjéből.\nKépzelj el egy szabót, akinek van egy szalagja különböző szegmensekkel, mindegyiknek eltérő, pozitív vagy negatív értéke van.\nA cél az, hogy megtaláljuk a maximális összértéket, amelyet a szalag egy folyamatos szegmensének elvágásával lehet elérni.\nEz hasonló ahhoz, hogy megtaláljuk a szalag legértékesebb részét, amelyet eladhatunk vagy felhasználhatunk.\n\nBemenet:\nEgy $values tömb, amely egész számokat tartalmaz, és a szalag minden szegmensének értékét képviseli.\n\nKimenet:\nEgy egész számot ad vissza, amely a szalag bármely folyamatos szegmenséből elérhető maximális értéket képviseli.\n\nPélda:\nEgy 4 hosszúságú szalag esetén, amelynek értékei [-1, 3, 2, -4], a függvénynek 5-öt kell visszaadnia,\nmivel a [3, 2] szegmens adja a maximális értéket."
    },
    "instruction_bertscore": {
      "sq": "0.9630110504436831",
      "hy": "0.9621815699724814",
      "bn": "0.9479397716522799",
      "bg": "0.9837955348847928",
      "zh": "0.9651135530269375",
      "fr": "0.994317979320116",
      "de": "0.9881775197208035",
      "ha": "0.9317291489952606",
      "hi": "0.9503833225997711",
      "hu": "0.9683909543140131"
    },
    "level": "easy",
    "test": "function main(){\n    assert(maxSegmentValue([-1, 3, 2, -4]) === 5);\n    assert(maxSegmentValue([-2, -3, 4, -1, -2, 1, 5, -3]) === 7);\n    assert(maxSegmentValue([-1, -2, -3]) === -1);\n    assert(maxSegmentValue([10]) === 10);\n    assert(maxSegmentValue([1, -3]) === 1);\n    \n    \n}\n\n\nmain();\n?>",
    "entry_point": "maxSegmentValue",
    "signature": "function maxSegmentValue($values)",
    "docstring": {
      "en": "Calculates the maximum value of a segment from a given array of values.\nImagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\nThe goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\nThis is akin to finding the most valuable portion of the ribbon to sell or use.\n\nInput:\nAn array $values of integers representing the value of each segment of the ribbon.\n\nOutput:\nReturns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n\nExample:\nFor a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5,\nas the segment [3, 2] gives the maximum value.",
      "sq": "Llogarit vlerën maksimale të një segmenti nga një varg i dhënë vlerash.\nImagjinoni një rrobaqepës që ka një shirit me segmente të ndryshme, secili me një vlerë të ndryshme, pozitive ose negative.\nQëllimi është të gjendet vlera totale maksimale që mund të merret duke prerë një segment të vazhdueshëm të shiritit.\nKjo është e ngjashme me gjetjen e pjesës më të vlefshme të shiritit për ta shitur ose përdorur.\n\nInput:\nNjë varg $values i numrave të plotë që përfaqësojnë vlerën e secilit segment të shiritit.\n\nOutput:\nKthen një numër të plotë që përfaqëson vlerën maksimale që mund të merret nga çdo segment i vazhdueshëm i shiritit.\n\nShembull:\nPër një shirit me gjatësi 4 me vlera [-1, 3, 2, -4], funksioni duhet të kthejë 5,\npasi segmenti [3, 2] jep vlerën maksimale.",
      "hy": "Հաշվում է տրված արժեքների զանգվածից հատվածի առավելագույն արժեքը:\nՊատկերացրեք, որ դերձակը ունի ժապավեն տարբեր հատվածներով, որոնցից յուրաքանչյուրը ունի տարբեր արժեք, դրական կամ բացասական:\nՆպատակն է գտնել առավելագույն ընդհանուր արժեքը, որը կարելի է ստանալ ժապավենի շարունակական հատվածը կտրելով:\nՍա նման է ժապավենի առավել արժեքավոր մասը վաճառելու կամ օգտագործելու համար գտնելուն:\n\nՄուտք:\nԱրժեքների ամբողջ թվերի զանգված, որը ներկայացնում է ժապավենի յուրաքանչյուր հատվածի արժեքը:\n\nԵլք:\nՎերադարձնում է ամբողջ թիվ, որը ներկայացնում է ժապավենի ցանկացած շարունակական հատվածից ստացված առավելագույն արժեքը:\n\nՕրինակ:\nԵթե ժապավենի երկարությունը 4 է և արժեքները [-1, 3, 2, -4] են, ֆունկցիան պետք է վերադարձնի 5,\nքանի որ հատվածը [3, 2] տալիս է առավելագույն արժեքը:",
      "bn": "একটি প্রদত্ত মানের অ্যারের একটি অংশের সর্বাধিক মান গণনা করে।\nধরা যাক একটি দর্জির কাছে একটি ফিতা আছে যার বিভিন্ন অংশ রয়েছে, প্রতিটি অংশের মান ভিন্ন, ইতিবাচক বা নেতিবাচক হতে পারে।\nলক্ষ্য হল ফিতার একটি ধারাবাহিক অংশ কেটে সর্বাধিক মোট মান খুঁজে বের করা।\nএটি ফিতার সবচেয়ে মূল্যবান অংশ বিক্রি বা ব্যবহারের জন্য খুঁজে বের করার মতো।\n\nইনপুট:\nএকটি পূর্ণসংখ্যার অ্যারে $values যা ফিতার প্রতিটি অংশের মান উপস্থাপন করে।\n\nআউটপুট:\nএকটি পূর্ণসংখ্যা প্রদান করে যা ফিতার যেকোনো ধারাবাহিক অংশ থেকে প্রাপ্ত সর্বাধিক মান উপস্থাপন করে।\n\nউদাহরণ:\nযদি ফিতার দৈর্ঘ্য 4 হয় এবং মান [-1, 3, 2, -4] হয়, তাহলে ফাংশনটি 5 প্রদান করা উচিত,\nকারণ অংশ [3, 2] সর্বাধিক মান প্রদান করে।",
      "bg": "Изчислява максималната стойност на сегмент от даден масив от стойности.\nПредставете си, че шивач има лента с различни сегменти, всеки от които има различна стойност, положителна или отрицателна.\nЦелта е да се намери максималната обща стойност, която може да се получи чрез изрязване на непрекъснат сегмент от лентата.\nТова е подобно на намирането на най-ценната част от лентата за продажба или употреба.\n\nВход:\nМасив $values от цели числа, представляващи стойността на всеки сегмент от лентата.\n\nИзход:\nВръща цяло число, представляващо максималната стойност, която може да се получи от който и да е непрекъснат сегмент от лентата.\n\nПример:\nЗа лента с дължина 4 със стойности [-1, 3, 2, -4], функцията трябва да върне 5,\nтъй като сегментът [3, 2] дава максималната стойност.",
      "zh": "计算给定数组中某个片段的最大值。\n想象一下，一个裁缝有一条带有不同片段的丝带，每个片段都有不同的值，可能是正数也可能是负数。\n目标是通过剪下一段连续的丝带来找到可以获得的最大总价值。\n这类似于寻找丝带中最有价值的部分进行出售或使用。\n\n输入：\n一个整数数组 $values，表示丝带每个片段的价值。\n\n输出：\n返回一个整数，表示从丝带的任何连续片段中可以获得的最大值。\n\n示例：\n对于长度为4的丝带，值为 [-1, 3, 2, -4]，函数应返回5，\n因为片段 [3, 2] 给出了最大值。",
      "fr": "Calcule la valeur maximale d'un segment à partir d'un tableau donné de valeurs.\nImaginez qu'un tailleur a un ruban avec divers segments, chacun ayant une valeur différente, positive ou négative.\nL'objectif est de trouver la valeur totale maximale qui peut être obtenue en coupant un segment continu du ruban.\nC'est comme trouver la portion la plus précieuse du ruban à vendre ou à utiliser.\n\nEntrée :\nUn tableau $values d'entiers représentant la valeur de chaque segment du ruban.\n\nSortie :\nRenvoie un entier représentant la valeur maximale qui peut être obtenue à partir de n'importe quel segment continu du ruban.\n\nExemple :\nPour un ruban de longueur 4 avec des valeurs [-1, 3, 2, -4], la fonction doit renvoyer 5,\ncar le segment [3, 2] donne la valeur maximale.",
      "de": "Berechnet den maximalen Wert eines Segments aus einem gegebenen Array von Werten.\nStellen Sie sich vor, ein Schneider hat ein Band mit verschiedenen Segmenten, von denen jedes einen anderen Wert hat, positiv oder negativ.\nDas Ziel ist es, den maximalen Gesamtwert zu finden, der durch Schneiden eines kontinuierlichen Segments des Bandes erzielt werden kann.\nDies ist vergleichbar mit dem Finden des wertvollsten Teils des Bandes zum Verkauf oder zur Nutzung.\n\nEingabe:\nEin Array $values von Ganzzahlen, das den Wert jedes Segments des Bandes darstellt.\n\nAusgabe:\nGibt eine Ganzzahl zurück, die den maximalen Wert darstellt, der aus einem beliebigen kontinuierlichen Segment des Bandes erzielt werden kann.\n\nBeispiel:\nFür ein Band der Länge 4 mit den Werten [-1, 3, 2, -4] sollte die Funktion 5 zurückgeben,\nda das Segment [3, 2] den maximalen Wert liefert.",
      "ha": "Yana ƙididdige matsakaicin ƙimar wani yanki daga wani jerin ƙimomi da aka bayar.\nKa yi tunanin wani ɗinki yana da zare mai yanki daban-daban, kowanne yana da ƙima daban-daban, mai kyau ko mara kyau.\nManufar ita ce samun jimillar ƙima mafi girma da za a iya samu ta hanyar yanke wani yanki mai ci gaba na zaren.\nWannan yana kama da neman mafi daraja na zaren don sayarwa ko amfani.\n\nShigar:\nWani jerin $values na lambobi masu nuna ƙimar kowane yanki na zaren.\n\nFita:\nYana dawo da lamba mai nuna matsakaicin ƙima da za a iya samu daga kowane yanki mai ci gaba na zaren.\n\nMisali:\nDon zaren da tsawonsa ya kai 4 tare da ƙimomi [-1, 3, 2, -4], aikin ya kamata ya dawo da 5,\ndomin yankin [3, 2] yana bayar da matsakaicin ƙima.",
      "hi": "दिए गए मानों की एक सरणी से एक खंड का अधिकतम मान गणना करता है।\nकल्पना करें कि एक दर्जी के पास विभिन्न खंडों के साथ एक रिबन है, जिनमें से प्रत्येक का एक अलग मूल्य है, सकारात्मक या नकारात्मक।\nउद्देश्य यह है कि रिबन के एक निरंतर खंड को काटकर अधिकतम कुल मूल्य प्राप्त किया जा सके।\nयह रिबन के सबसे मूल्यवान हिस्से को बेचने या उपयोग करने के समान है।\n\nInput:\nएक array $values जिसमें रिबन के प्रत्येक खंड का मूल्य दर्शाने वाले पूर्णांक होते हैं।\n\nOutput:\nएक पूर्णांक लौटाता है जो रिबन के किसी भी निरंतर खंड से प्राप्त किया जा सकने वाला अधिकतम मूल्य दर्शाता है।\n\nExample:\nलंबाई 4 के रिबन के लिए जिसमें मान [-1, 3, 2, -4] हैं, फ़ंक्शन को 5 लौटाना चाहिए,\nक्योंकि खंड [3, 2] अधिकतम मूल्य देता है।",
      "hu": "Kiszámítja egy adott értéktömb szegmensének maximális értékét. \nKépzeljük el, hogy egy szabónak van egy szalagja különböző szegmensekkel, amelyek mindegyikének más-más értéke van, lehet pozitív vagy negatív. \nA cél az, hogy megtaláljuk azt a maximális összértéket, amelyet a szalag egy folytonos szegmensének elvágásával kaphatunk meg. \nEz hasonló ahhoz, hogy megtaláljuk a szalag legértékesebb részét, amelyet eladhatunk vagy felhasználhatunk.\n\nBemenet:\nEgy $values tömb egész számokkal, amely a szalag minden szegmensének értékét képviseli.\n\nKimenet:\nEgy egész számot ad vissza, amely a szalag bármely folytonos szegmenséből nyerhető maximális értéket képviseli.\n\nPélda:\nEgy 4 hosszúságú szalag esetén, amelynek értékei [-1, 3, 2, -4], a függvénynek 5-öt kell visszaadnia, \nmivel a [3, 2] szegmens adja a maximális értéket."
    },
    "docstring_bertscore": {
      "sq": "0.957458735402615",
      "hy": "0.9648217649971972",
      "bn": "0.8957714883772769",
      "bg": "0.981017887636401",
      "zh": "0.9648036896325229",
      "fr": "0.9907950708820812",
      "de": "0.9857572085278934",
      "ha": "0.9168622608659424",
      "hi": "0.9658206771834216",
      "hu": "0.9616063363890044"
    }
  },
  {
    "task_id": "PHP/17",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines the position of a new student in a choir formation.\n * The choir is arranged with the shortest members on the sides and the tallest in the center.\n * The new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\n * If the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n *\n * Input:\n * - $newStudentHeight (int): The height of the new student.\n * - $heights (array): An array of integers representing the heights of the current choir members from left to right.\n * - $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n *\n * Output:\n * - Returns an integer representing the position (1-indexed) where the new student will stand.\n *\n * Examples:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "sq": "<?php\n\n/**\n * Përcakton pozicionin e një studenti të ri në një formacion kori.\n * Kori është i rregulluar me anëtarët më të shkurtër në anët dhe më të gjatët në qendër.\n * Studenti i ri mund të qëndrojë në anën e majtë ose të djathtë, ose, nëse është më i gjati, në të djathtë të studentit aktual më të gjatë.\n * Nëse studenti i ri nuk është më i gjati, pozicioni i tij bazohet në preferencën e mësuesit: anë e majtë ose e djathtë.\n *\n * Hyrja:\n * - $newStudentHeight (int): Lartësia e studentit të ri.\n * - $heights (array): Një varg me numra të plotë që përfaqësojnë lartësitë e anëtarëve aktualë të korit nga e majta në të djathtë.\n * - $teacherPreference (int): Preferenca e mësuesit për pozicionin e studentit të ri (1 për majtas, 2 për djathtas).\n *\n * Dalja:\n * - Kthen një numër të plotë që përfaqëson pozicionin (i indeksuar me 1) ku do të qëndrojë studenti i ri.\n *\n * Shembuj:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) duhet të kthejë 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) duhet të kthejë 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "hy": "<?php\n\n/**\n * Որոշում է նոր ուսանողի դիրքը երգչախմբի կազմավորման մեջ:\n * Երգչախումբը դասավորված է այնպես, որ ամենակարճ անդամները լինեն կողքերում, իսկ ամենաբարձրերը՝ կենտրոնում:\n * Նոր ուսանողը կարող է կանգնել ձախ կամ աջ կողմում, կամ, եթե նա ամենաբարձրն է, ներկայիս ամենաբարձր ուսանողի աջ կողմում:\n * Եթե նոր ուսանողը ամենաբարձրը չէ, նրա դիրքը որոշվում է ուսուցչի նախընտրությամբ՝ ձախ կամ աջ կողմում:\n *\n * Մուտք:\n * - $newStudentHeight (int): Նոր ուսանողի բարձրությունը:\n * - $heights (array): Թվերի զանգված, որը ներկայացնում է ներկայիս երգչախմբի անդամների բարձրությունները ձախից աջ:\n * - $teacherPreference (int): Ուսուցչի նախընտրությունը նոր ուսանողի դիրքի համար (1՝ ձախ, 2՝ աջ):\n *\n * Ելք:\n * - Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է դիրքը (1-ից սկսվող), որտեղ նոր ուսանողը կկանգնի:\n *\n * Օրինակներ:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) պետք է վերադարձնի 8:\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) պետք է վերադարձնի 3:\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "bn": "<?php\n\n/**\n * একটি নতুন ছাত্রের গায়কদল গঠনে অবস্থান নির্ধারণ করে।\n * গায়কদলটি এমনভাবে সাজানো হয় যে ছোট সদস্যরা পাশে থাকে এবং লম্বা সদস্যরা কেন্দ্রে থাকে।\n * নতুন ছাত্রটি বাম বা ডান পাশে দাঁড়াতে পারে, অথবা যদি সে সবচেয়ে লম্বা হয়, তাহলে বর্তমান সবচেয়ে লম্বা ছাত্রের ডান পাশে দাঁড়াতে পারে।\n * যদি নতুন ছাত্রটি সবচেয়ে লম্বা না হয়, তাহলে তার অবস্থান শিক্ষককের পছন্দের উপর ভিত্তি করে: বাম বা ডান পাশে।\n *\n * ইনপুট:\n * - $newStudentHeight (int): নতুন ছাত্রের উচ্চতা।\n * - $heights (array): গায়কদলের বর্তমান সদস্যদের উচ্চতা বাম থেকে ডান পর্যন্ত একটি পূর্ণসংখ্যার অ্যারে।\n * - $teacherPreference (int): নতুন ছাত্রের অবস্থানের জন্য শিক্ষকের পছন্দ (বামের জন্য 1, ডানের জন্য 2)।\n *\n * আউটপুট:\n * - একটি পূর্ণসংখ্যা রিটার্ন করে যা নতুন ছাত্রটি যেখানে দাঁড়াবে সেই অবস্থান (1-সূচক) নির্দেশ করে।\n *\n * উদাহরণ:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 রিটার্ন করা উচিত।\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 রিটার্ন করা উচিত।\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "bg": "<?php\n\n/**\n * Определя позицията на нов ученик в хорова формация.\n * Хорът е подреден с най-ниските членове отстрани и най-високите в центъра.\n * Новият ученик може да застане отляво или отдясно, или, ако е най-високият, вдясно от настоящия най-висок ученик.\n * Ако новият ученик не е най-високият, неговата позиция се определя според предпочитанията на учителя: лява или дясна страна.\n *\n * Вход:\n * - $newStudentHeight (int): Височината на новия ученик.\n * - $heights (array): Масив от цели числа, представляващи височините на настоящите членове на хора отляво надясно.\n * - $teacherPreference (int): Предпочитанието на учителя за позицията на новия ученик (1 за ляво, 2 за дясно).\n *\n * Изход:\n * - Връща цяло число, представляващо позицията (индексирана от 1), където новият ученик ще застане.\n *\n * Примери:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) трябва да върне 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) трябва да върне 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "zh": "<?php\n\n/**\n * 确定新学生在合唱队形中的位置。\n * 合唱队的排列方式是两侧是最矮的成员，中间是最高的成员。\n * 新学生可以站在左侧或右侧，或者如果他们是最高的，可以站在当前最高学生的右侧。\n * 如果新学生不是最高的，他们的位置取决于老师的偏好：左侧或右侧。\n *\n * 输入:\n * - $newStudentHeight (int): 新学生的身高。\n * - $heights (array): 一个整数数组，表示当前合唱队成员从左到右的身高。\n * - $teacherPreference (int): 老师对新学生位置的偏好（1表示左侧，2表示右侧）。\n *\n * 输出:\n * - 返回一个整数，表示新学生将站立的位置（1-索引）。\n *\n * 示例:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 应返回 8。\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 应返回 3。\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "fr": "<?php\n\n/**\n * Détermine la position d'un nouvel élève dans une formation de chorale.\n * La chorale est disposée avec les membres les plus petits sur les côtés et les plus grands au centre.\n * Le nouvel élève peut se tenir sur le côté gauche ou droit, ou, s'il est le plus grand, à droite de l'élève actuellement le plus grand.\n * Si le nouvel élève n'est pas le plus grand, sa position est basée sur la préférence de l'enseignant : côté gauche ou droit.\n *\n * Entrée :\n * - $newStudentHeight (int) : La taille du nouvel élève.\n * - $heights (array) : Un tableau d'entiers représentant les tailles des membres actuels de la chorale de gauche à droite.\n * - $teacherPreference (int) : La préférence de l'enseignant pour la position du nouvel élève (1 pour gauche, 2 pour droite).\n *\n * Sortie :\n * - Retourne un entier représentant la position (indexée à partir de 1) où le nouvel élève se tiendra.\n *\n * Exemples :\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) devrait retourner 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) devrait retourner 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "de": "<?php\n\n/**\n * Bestimmt die Position eines neuen Schülers in einer Choraufstellung.\n * Der Chor ist so angeordnet, dass die kleinsten Mitglieder an den Seiten und die größten in der Mitte stehen.\n * Der neue Schüler kann auf der linken oder rechten Seite stehen oder, wenn er der größte ist, rechts vom derzeit größten Schüler.\n * Wenn der neue Schüler nicht der größte ist, basiert seine Position auf der Präferenz des Lehrers: linke oder rechte Seite.\n *\n * Eingabe:\n * - $newStudentHeight (int): Die Größe des neuen Schülers.\n * - $heights (array): Ein Array von ganzen Zahlen, das die Größen der aktuellen Chormitglieder von links nach rechts darstellt.\n * - $teacherPreference (int): Die Präferenz des Lehrers für die Position des neuen Schülers (1 für links, 2 für rechts).\n *\n * Ausgabe:\n * - Gibt eine ganze Zahl zurück, die die Position (1-indexiert) darstellt, an der der neue Schüler stehen wird.\n *\n * Beispiele:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) sollte 8 zurückgeben.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) sollte 3 zurückgeben.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "ha": "<?php\n\n/**\n * Yana tantance matsayi na sabon ɗalibi a cikin tsarin rukunin waƙa.\n * An tsara rukunin waƙa tare da mambobi mafi guntu a gefuna da mafi tsawo a tsakiya.\n * Sabon ɗalibi na iya tsayawa a gefen hagu ko dama, ko, idan sun fi tsawo, zuwa dama na ɗalibin da ya fi tsawo a yanzu.\n * Idan sabon ɗalibi ba shi ne mafi tsawo ba, matsayinsu yana dogara ne akan zaɓin malam: gefen hagu ko dama.\n *\n * Shigarwa:\n * - $newStudentHeight (int): Tsawon sabon ɗalibi.\n * - $heights (array): Jerin lambobi masu wakiltar tsayin mambobin rukunin waƙa na yanzu daga hagu zuwa dama.\n * - $teacherPreference (int): Zaɓin malam don matsayi na sabon ɗalibi (1 don hagu, 2 don dama).\n *\n * Fitarwa:\n * - Yana dawowa da lamba mai nuna matsayi (1-indexed) inda sabon ɗalibi zai tsaya.\n *\n * Misalai:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) ya kamata ya dawo 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) ya kamata ya dawo 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int",
      "hi": "<?php\n\n/**\n * एक नए छात्र की गायक मंडली में स्थिति निर्धारित करता है।\n * गायक मंडली को सबसे छोटे सदस्यों को किनारों पर और सबसे लंबे को केंद्र में रखा जाता है।\n * नया छात्र बाईं या दाईं ओर खड़ा हो सकता है, या, यदि वे सबसे लंबे हैं, तो वर्तमान सबसे लंबे छात्र के दाईं ओर।\n * यदि नया छात्र सबसे लंबा नहीं है, तो उनकी स्थिति शिक्षक की पसंद पर निर्भर करती है: बाईं या दाईं ओर।\n *\n * इनपुट:\n * - $newStudentHeight (int): नए छात्र की ऊँचाई।\n * - $heights (array): बाईं से दाईं ओर वर्तमान गायक मंडली के सदस्यों की ऊँचाइयों का एक सरणी।\n * - $teacherPreference (int): नए छात्र की स्थिति के लिए शिक्षक की पसंद (1 बाईं ओर के लिए, 2 दाईं ओर के लिए)।\n *\n * आउटपुट:\n * - एक पूर्णांक लौटाता है जो उस स्थिति का प्रतिनिधित्व करता है (1-इंडेक्सेड) जहां नया छात्र खड़ा होगा।\n *\n * उदाहरण:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 लौटाना चाहिए।\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 लौटाना चाहिए।\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int",
      "hu": "<?php\n\n/**\n * Meghatározza egy új diák helyét a kórus felállásában.\n * A kórus úgy van elrendezve, hogy a legalacsonyabb tagok a széleken, a legmagasabbak pedig középen állnak.\n * Az új diák állhat a bal vagy jobb oldalon, vagy ha ő a legmagasabb, akkor a jelenlegi legmagasabb diák jobb oldalán.\n * Ha az új diák nem a legmagasabb, a helye a tanár preferenciája alapján dől el: bal vagy jobb oldal.\n *\n * Bemenet:\n * - $newStudentHeight (int): Az új diák magassága.\n * - $heights (array): Egész számokat tartalmazó tömb, amely a jelenlegi kórustagok magasságát jelzi balról jobbra.\n * - $teacherPreference (int): A tanár preferenciája az új diák helyére vonatkozóan (1 a bal, 2 a jobb oldalra).\n *\n * Kimenet:\n * - Egy egész számot ad vissza, amely azt a pozíciót jelzi (1-indexelt), ahol az új diák állni fog.\n *\n * Példák:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) vissza kell adnia 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) vissza kell adnia 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int"
    },
    "prompt_bertscore": {
      "sq": "0.988988924827331",
      "hy": "0.9757152509842936",
      "bn": "0.9797311600280569",
      "bg": "0.9921177505893926",
      "zh": "0.9685407216213133",
      "fr": "0.9962858105050286",
      "de": "0.9855399068910412",
      "ha": "0.9796608448731705",
      "hi": "0.9699023328833075",
      "hu": "0.9705903885232123"
    },
    "canonical_solution": "{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}",
    "instruction": {
      "en": "Write a PHP function `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` to solve the following problem:\nDetermines the position of a new student in a choir formation.\nThe choir is arranged with the shortest members on the sides and the tallest in the center.\nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n\nInput:\n- $newStudentHeight (int): The height of the new student.\n- $heights (array): An array of integers representing the heights of the current choir members from left to right.\n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n\nOutput:\n- Returns an integer representing the position (1-indexed) where the new student will stand.\n\nExamples:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.",
      "sq": "Shkruani një funksion PHP `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` për të zgjidhur problemin e mëposhtëm:\nPërcakton pozicionin e një studenti të ri në një formacion kori.\nKori është i rregulluar me anëtarët më të shkurtër në anët dhe më të gjatët në qendër.\nStudenti i ri mund të qëndrojë në anën e majtë ose të djathtë, ose, nëse ai është më i gjati, në të djathtë të studentit aktual më të gjatë.\nNëse studenti i ri nuk është më i gjati, pozicioni i tij bazohet në preferencën e mësuesit: anën e majtë ose të djathtë.\n\nHyrja:\n- $newStudentHeight (int): Lartësia e studentit të ri.\n- $heights (array): Një varg i numrave të plotë që përfaqësojnë lartësitë e anëtarëve aktualë të korit nga e majta në të djathtë.\n- $teacherPreference (int): Preferenca e mësuesit për pozicionin e studentit të ri (1 për majtas, 2 për djathtas).\n\nDalja:\n- Kthen një numër të plotë që përfaqëson pozicionin (i indeksuar me 1) ku studenti i ri do të qëndrojë.\n\nShembuj:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) duhet të kthejë 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) duhet të kthejë 3.",
      "hy": "PHP ֆունկցիա գրեք `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` հետևյալ խնդիրը լուծելու համար:\nՈրոշում է նոր ուսանողի դիրքը երգչախմբի կազմում:\nԵրգչախումբը դասավորված է այնպես, որ ամենակարճ անդամները լինեն կողքերում, իսկ ամենաբարձրերը՝ կենտրոնում:\nՆոր ուսանողը կարող է կանգնել ձախ կամ աջ կողմում, կամ, եթե նա ամենաբարձրն է, ներկայիս ամենաբարձր ուսանողի աջ կողմում:\nԵթե նոր ուսանողը ամենաբարձրն չէ, նրա դիրքը որոշվում է ուսուցչի նախընտրությամբ՝ ձախ կամ աջ կողմում:\n\nՄուտք:\n- $newStudentHeight (int): Նոր ուսանողի բարձրությունը:\n- $heights (array): Թվերի զանգված, որը ներկայացնում է ներկայիս երգչախմբի անդամների բարձրությունները ձախից աջ:\n- $teacherPreference (int): Ուսուցչի նախընտրությունը նոր ուսանողի դիրքի համար (1՝ ձախ, 2՝ աջ):\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է դիրքը (1-ից սկսած), որտեղ նոր ուսանողը կկանգնի:\n\nՕրինակներ:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) պետք է վերադարձնի 8:\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) պետք է վերադարձնի 3:",
      "bn": "PHP ফাংশন `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি নতুন ছাত্রের গায়কদলের অবস্থান নির্ধারণ করে।\nগায়কদলটি এমনভাবে সাজানো হয় যাতে সবচেয়ে ছোট সদস্যরা পাশে এবং সবচেয়ে লম্বা সদস্যরা কেন্দ্রে থাকে।\nনতুন ছাত্রটি বাম বা ডান পাশে দাঁড়াতে পারে, অথবা যদি সে সবচেয়ে লম্বা হয়, তাহলে বর্তমান সবচেয়ে লম্বা ছাত্রের ডান পাশে দাঁড়াতে পারে।\nযদি নতুন ছাত্রটি সবচেয়ে লম্বা না হয়, তাহলে তার অবস্থান শিক্ষককের পছন্দের উপর নির্ভর করে: বাম বা ডান পাশে।\n\nইনপুট:\n- $newStudentHeight (int): নতুন ছাত্রের উচ্চতা।\n- $heights (array): বাম থেকে ডান পর্যন্ত বর্তমান গায়কদল সদস্যদের উচ্চতা নির্দেশকারী পূর্ণসংখ্যার একটি অ্যারে।\n- $teacherPreference (int): নতুন ছাত্রের অবস্থানের জন্য শিক্ষককের পছন্দ (বামের জন্য 1, ডানের জন্য 2)।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা ফেরত দেয় যা নির্দেশ করে যে নতুন ছাত্রটি কোথায় দাঁড়াবে (1-সূচককৃত)।\n\nউদাহরণ:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 ফেরত দেবে।\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 ফেরত দেবে।",
      "bg": "Напишете PHP функция `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int`, за да решите следния проблем:\nОпределя позицията на нов ученик в хорова формация.\nХорът е подреден с най-ниските членове отстрани и най-високите в центъра.\nНовият ученик може да застане от лявата или дясната страна, или, ако е най-високият, вдясно от настоящия най-висок ученик.\nАко новият ученик не е най-високият, неговата позиция се определя според предпочитанието на учителя: лява или дясна страна.\n\nВход:\n- $newStudentHeight (int): Височината на новия ученик.\n- $heights (array): Масив от цели числа, представляващи височините на текущите членове на хора отляво надясно.\n- $teacherPreference (int): Предпочитанието на учителя за позицията на новия ученик (1 за ляво, 2 за дясно).\n\nИзход:\n- Връща цяло число, представляващо позицията (индексирана от 1), където новият ученик ще застане.\n\nПримери:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) трябва да върне 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) трябва да върне 3.",
      "zh": "编写一个 PHP 函数 `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` 来解决以下问题：\n确定新学生在合唱队中的位置。\n合唱队的排列方式是两侧最矮，中间最高。\n新学生可以站在左侧或右侧，或者如果他们是最高的，可以站在当前最高学生的右边。\n如果新学生不是最高的，他们的位置取决于老师的偏好：左侧或右侧。\n\n输入：\n- $newStudentHeight (int): 新学生的身高。\n- $heights (array): 一个整数数组，表示当前合唱队成员从左到右的身高。\n- $teacherPreference (int): 老师对新学生位置的偏好（1表示左侧，2表示右侧）。\n\n输出：\n- 返回一个整数，表示新学生将站立的位置（从1开始计数）。\n\n示例：\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 应该返回 8。\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 应该返回 3。",
      "fr": "Écrire une fonction PHP `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` pour résoudre le problème suivant :\nDétermine la position d'un nouvel élève dans une formation de chorale.\nLa chorale est arrangée avec les membres les plus petits sur les côtés et les plus grands au centre.\nLe nouvel élève peut se tenir sur le côté gauche ou droit, ou, s'il est le plus grand, à droite de l'élève le plus grand actuel.\nSi le nouvel élève n'est pas le plus grand, sa position est basée sur la préférence de l'enseignant : côté gauche ou droit.\n\nEntrée :\n- $newStudentHeight (int) : La taille du nouvel élève.\n- $heights (array) : Un tableau d'entiers représentant les tailles des membres actuels de la chorale de gauche à droite.\n- $teacherPreference (int) : La préférence de l'enseignant pour la position du nouvel élève (1 pour gauche, 2 pour droite).\n\nSortie :\n- Retourne un entier représentant la position (indexée à partir de 1) où le nouvel élève se tiendra.\n\nExemples :\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) devrait retourner 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) devrait retourner 3.",
      "de": "Schreiben Sie eine PHP-Funktion `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int`, um das folgende Problem zu lösen:\nBestimmt die Position eines neuen Schülers in einer Choraufstellung.\nDer Chor ist so angeordnet, dass die kleinsten Mitglieder an den Seiten und die größten in der Mitte stehen.\nDer neue Schüler kann auf der linken oder rechten Seite stehen oder, wenn er der größte ist, rechts vom derzeit größten Schüler.\nWenn der neue Schüler nicht der größte ist, basiert seine Position auf der Präferenz des Lehrers: linke oder rechte Seite.\n\nEingabe:\n- $newStudentHeight (int): Die Größe des neuen Schülers.\n- $heights (array): Ein Array von ganzen Zahlen, das die Größen der aktuellen Chormitglieder von links nach rechts darstellt.\n- $teacherPreference (int): Die Präferenz des Lehrers für die Position des neuen Schülers (1 für links, 2 für rechts).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die Position (1-indexiert) darstellt, an der der neue Schüler stehen wird.\n\nBeispiele:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) sollte 8 zurückgeben.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) sollte 3 zurückgeben.",
      "ha": "Rubuta aikin PHP `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` don warware matsalar mai zuwa:\nYana tantance matsayin sabon ɗalibi a cikin tsarin kide-kide.\nAna shirya kide-kide tare da membobin da suka fi kankanta a gefuna da mafi tsayi a tsakiya.\nSabon ɗalibi na iya tsayawa a gefen hagu ko dama, ko kuma, idan sun fi tsayi, a dama na ɗalibin da ya fi tsayi a yanzu.\nIdan sabon ɗalibi bai fi tsayi ba, matsayin su yana dogara ne akan zaɓin malami: gefen hagu ko dama.\n\nShigarwa:\n- $newStudentHeight (int): Tsawon sabon ɗalibi.\n- $heights (array): Jeri na lambobi masu wakiltar tsayin membobin kide-kide na yanzu daga hagu zuwa dama.\n- $teacherPreference (int): Zaɓin malamin don matsayin sabon ɗalibi (1 don hagu, 2 don dama).\n\nFitarwa:\n- Yana mayar da lamba mai nuna matsayin (1-indexed) inda sabon ɗalibi zai tsaya.\n\nMisalai:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) ya kamata ya mayar da 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) ya kamata ya mayar da 3.",
      "hi": "PHP फ़ंक्शन `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक नए छात्र की गायक मंडली में स्थिति निर्धारित करता है।\nगायक मंडली को इस प्रकार व्यवस्थित किया जाता है कि सबसे छोटे सदस्य किनारों पर होते हैं और सबसे लंबे सदस्य केंद्र में होते हैं।\nनया छात्र बाएँ या दाएँ किनारे पर खड़ा हो सकता है, या यदि वह सबसे लंबा है, तो वर्तमान सबसे लंबे छात्र के दाएँ खड़ा हो सकता है।\nयदि नया छात्र सबसे लंबा नहीं है, तो उसकी स्थिति शिक्षक की पसंद पर आधारित होती है: बाएँ या दाएँ किनारे।\n\nइनपुट:\n- $newStudentHeight (int): नए छात्र की ऊँचाई।\n- $heights (array): बाएँ से दाएँ तक वर्तमान गायक मंडली के सदस्यों की ऊँचाइयों का एक सरणी।\n- $teacherPreference (int): नए छात्र की स्थिति के लिए शिक्षक की पसंद (1 बाएँ के लिए, 2 दाएँ के लिए)।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है जो उस स्थिति (1-इंडेक्स्ड) का प्रतिनिधित्व करता है जहाँ नया छात्र खड़ा होगा।\n\nउदाहरण:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) को 8 लौटाना चाहिए।\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) को 3 लौटाना चाहिए।",
      "hu": "Írj egy PHP függvényt `function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int` a következő probléma megoldására:\nMeghatározza egy új diák helyét egy kórus felállásában.\nA kórus úgy van elrendezve, hogy a legalacsonyabb tagok a széleken, a legmagasabbak pedig középen állnak.\nAz új diák állhat a bal vagy a jobb oldalon, vagy ha ő a legmagasabb, akkor a jelenlegi legmagasabb diák jobb oldalán.\nHa az új diák nem a legmagasabb, a helyét a tanár preferenciája alapján határozzák meg: bal vagy jobb oldal.\n\nBemenet:\n- $newStudentHeight (int): Az új diák magassága.\n- $heights (array): Egész számokat tartalmazó tömb, amely a jelenlegi kórustagok magasságát jelöli balról jobbra.\n- $teacherPreference (int): A tanár preferenciája az új diák helyére (1 a bal oldalra, 2 a jobb oldalra).\n\nKimenet:\n- Egy egész számot ad vissza, amely jelzi a pozíciót (1-indexelt), ahol az új diák állni fog.\n\nPéldák:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) vissza kell adnia 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) vissza kell adnia 3."
    },
    "instruction_bertscore": {
      "sq": "0.9853742491532581",
      "hy": "0.9684104200913545",
      "bn": "0.9658284237682819",
      "bg": "0.9886009996931698",
      "zh": "0.9597805259265317",
      "fr": "0.9941868832686329",
      "de": "0.9864810176363845",
      "ha": "0.9641799902360735",
      "hi": "0.9689220919529004",
      "hu": "0.9703707033217878"
    },
    "level": "hard",
    "test": "function main(){\n    \n    assert(determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) === 8);\n    assert(determineChoirPosition(15, [5, 10, 20, 10, 5], 1) === 3);\n    assert(determineChoirPosition(12, [10, 15, 20, 15], 2) === 5);\n    assert(determineChoirPosition(18, [6, 9, 12, 15, 17, 21], 1) === 6);\n    assert(determineChoirPosition(18, [6, 9, 12, 15], 1) === 5);\n    assert(determineChoirPosition(10, [5, 8, 12], 2) === 4);   \n}\n\n\nmain();\n?>",
    "entry_point": "determineChoirPosition",
    "signature": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int",
    "docstring": {
      "en": "Determines the position of a new student in a choir formation.\nThe choir is arranged with the shortest members on the sides and the tallest in the center.\nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n\nInput:\n- $newStudentHeight (int): The height of the new student.\n- $heights (array): An array of integers representing the heights of the current choir members from left to right.\n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n\nOutput:\n- Returns an integer representing the position (1-indexed) where the new student will stand.\n\nExamples:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.",
      "sq": "Përcakton pozicionin e një studenti të ri në formacionin e korit.  \nKori është i rregulluar me anëtarët më të shkurtër në anët dhe më të gjatë në qendër.  \nStudenti i ri mund të qëndrojë në anën e majtë ose të djathtë, ose, nëse është më i gjati, në të djathtë të studentit aktual më të gjatë.  \nNëse studenti i ri nuk është më i gjati, pozicioni i tij bazohet në preferencën e mësuesit: ana e majtë ose e djathtë.\n\nInput:  \n- $newStudentHeight (int): Lartësia e studentit të ri.  \n- $heights (array): Një varg i numrave të plotë që përfaqësojnë lartësitë e anëtarëve aktualë të korit nga e majta në të djathtë.  \n- $teacherPreference (int): Preferenca e mësuesit për pozicionin e studentit të ri (1 për majtas, 2 për djathtas).\n\nOutput:  \n- Kthen një numër të plotë që përfaqëson pozicionin (i indeksuar me 1) ku studenti i ri do të qëndrojë.\n\nShembuj:  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) duhet të kthejë 8.  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) duhet të kthejë 3.",
      "hy": "Որոշում է նոր ուսանողի դիրքը երգչախմբի կազմավորման մեջ:\nԵրգչախումբը դասավորված է այնպես, որ ամենակարճ անդամները լինեն կողքերին, իսկ ամենաբարձրերը՝ կենտրոնում:\nՆոր ուսանողը կարող է կանգնել ձախ կամ աջ կողմում, կամ, եթե նա ամենաբարձրն է, ներկայիս ամենաբարձր ուսանողի աջ կողմում:\nԵթե նոր ուսանողը ամենաբարձրը չէ, նրա դիրքը որոշվում է ուսուցչի նախընտրությամբ՝ ձախ կամ աջ կողմում:\n\nՄուտք:\n- $newStudentHeight (int): Նոր ուսանողի բարձրությունը:\n- $heights (array): Թվերի զանգված, որը ներկայացնում է ներկայիս երգչախմբի անդամների բարձրությունները ձախից աջ:\n- $teacherPreference (int): Ուսուցչի նախընտրությունը նոր ուսանողի դիրքի համար (1՝ ձախի համար, 2՝ աջի համար):\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է դիրքը (1-ից սկսած), որտեղ նոր ուսանողը կկանգնի:\n\nՕրինակներ:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) պետք է վերադարձնի 8:\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) պետք է վերադարձնի 3:",
      "bn": "নতুন ছাত্রের গায়কদলের গঠনে অবস্থান নির্ধারণ করে।  \nগায়কদলটি এমনভাবে সাজানো হয় যে, সবচেয়ে ছোট সদস্যরা পাশে এবং সবচেয়ে লম্বা সদস্যরা কেন্দ্রে থাকে।  \nনতুন ছাত্রটি বাম বা ডান পাশে দাঁড়াতে পারে, অথবা যদি সে সবচেয়ে লম্বা হয়, তবে বর্তমান সবচেয়ে লম্বা ছাত্রের ডান পাশে দাঁড়াতে পারে।  \nযদি নতুন ছাত্রটি সবচেয়ে লম্বা না হয়, তবে তার অবস্থান শিক্ষককের পছন্দের উপর ভিত্তি করে নির্ধারিত হয়: বাম বা ডান পাশে।\n\nইনপুট:  \n- $newStudentHeight (int): নতুন ছাত্রের উচ্চতা।  \n- $heights (array): একটি পূর্ণসংখ্যার অ্যারে যা বাম থেকে ডান পর্যন্ত বর্তমান গায়কদলের সদস্যদের উচ্চতা উপস্থাপন করে।  \n- $teacherPreference (int): নতুন ছাত্রের অবস্থানের জন্য শিক্ষকের পছন্দ (বামের জন্য 1, ডানের জন্য 2)।  \n\nআউটপুট:  \n- একটি পূর্ণসংখ্যা প্রদান করে যা অবস্থান (1-সূচকিত) উপস্থাপন করে যেখানে নতুন ছাত্রটি দাঁড়াবে।  \n\nউদাহরণ:  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 প্রদান করা উচিত।  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 প্রদান করা উচিত।  ",
      "bg": "Определя позицията на нов ученик в хоровата формация.\nХорът е подреден с най-ниските членове отстрани и най-високите в центъра.\nНовият ученик може да застане от лявата или дясната страна, или, ако е най-високият, вдясно от настоящия най-висок ученик.\nАко новият ученик не е най-високият, неговата позиция се определя според предпочитанието на учителя: лява или дясна страна.\n\nВход:\n- $newStudentHeight (int): Височината на новия ученик.\n- $heights (array): Масив от цели числа, представляващи височините на настоящите членове на хора отляво надясно.\n- $teacherPreference (int): Предпочитанието на учителя за позицията на новия ученик (1 за ляво, 2 за дясно).\n\nИзход:\n- Връща цяло число, представляващо позицията (индексирана от 1), където новият ученик ще застане.\n\nПримери:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) трябва да върне 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) трябва да върне 3.",
      "zh": "确定新学生在合唱队形中的位置。  \n合唱队排列方式是两侧为最矮成员，中间为最高成员。  \n新学生可以站在左侧或右侧，或者如果他们是最高的，可以站在当前最高学生的右侧。  \n如果新学生不是最高的，他们的位置取决于老师的偏好：左侧或右侧。\n\n输入:\n- $newStudentHeight (int): 新学生的身高。\n- $heights (array): 一个整数数组，表示当前合唱成员从左到右的身高。\n- $teacherPreference (int): 老师对新学生位置的偏好（1表示左侧，2表示右侧）。\n\n输出:\n- 返回一个整数，表示新学生将站立的位置（从1开始计数）。\n\n示例:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 应返回 8。\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 应返回 3。",
      "fr": "Détermine la position d'un nouvel élève dans une formation de chorale.\nLa chorale est arrangée avec les membres les plus petits sur les côtés et les plus grands au centre.\nLe nouvel élève peut se tenir sur le côté gauche ou droit, ou, s'il est le plus grand, à droite de l'élève actuellement le plus grand.\nSi le nouvel élève n'est pas le plus grand, sa position est basée sur la préférence de l'enseignant : côté gauche ou droit.\n\nEntrée :\n- $newStudentHeight (int) : La taille du nouvel élève.\n- $heights (array) : Un tableau d'entiers représentant les tailles des membres actuels de la chorale de gauche à droite.\n- $teacherPreference (int) : La préférence de l'enseignant pour la position du nouvel élève (1 pour gauche, 2 pour droite).\n\nSortie :\n- Retourne un entier représentant la position (indexée à partir de 1) où le nouvel élève se tiendra.\n\nExemples :\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) devrait retourner 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) devrait retourner 3.",
      "de": "Bestimmt die Position eines neuen Schülers in einer Choraufstellung.\nDer Chor ist so angeordnet, dass die kleinsten Mitglieder an den Seiten und die größten in der Mitte stehen.\nDer neue Schüler kann auf der linken oder rechten Seite stehen oder, wenn er der größte ist, rechts vom derzeit größten Schüler.\nWenn der neue Schüler nicht der größte ist, basiert seine Position auf der Präferenz des Lehrers: linke oder rechte Seite.\n\nEingabe:\n- $newStudentHeight (int): Die Größe des neuen Schülers.\n- $heights (array): Ein Array von ganzen Zahlen, das die Größen der aktuellen Chormitglieder von links nach rechts darstellt.\n- $teacherPreference (int): Die Präferenz des Lehrers für die Position des neuen Schülers (1 für links, 2 für rechts).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die Position (1-indexiert) darstellt, an der der neue Schüler stehen wird.\n\nBeispiele:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) sollte 8 zurückgeben.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) sollte 3 zurückgeben.",
      "ha": "Yana tantance matsayin sabon ɗalibi a cikin tsararrakin ƙungiyar waƙa. \nAn shirya ƙungiyar waƙa tare da mafi guntu a gefuna da mafi tsawo a tsakiya. \nSabon ɗalibi na iya tsayawa a gefen hagu ko dama, ko kuma, idan sun fi kowa tsawo, a dama da ɗalibin da ya fi tsawo a yanzu. \nIdan sabon ɗalibi ba shi ne mafi tsawo ba, matsayin su yana dogara ne akan zaɓin malamin: gefen hagu ko dama.\n\nShigar:\n- $newStudentHeight (int): Tsawon sabon ɗalibi.\n- $heights (array): Jerin lambobi masu nuna tsayin mambobin ƙungiyar waƙa na yanzu daga hagu zuwa dama.\n- $teacherPreference (int): Zaɓin malamin don matsayin sabon ɗalibi (1 don hagu, 2 don dama).\n\nFitarwa:\n- Yana dawo da lamba mai nuna matsayin (1-indexed) inda sabon ɗalibi zai tsaya.\n\nMisalai:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) ya kamata ya dawo da 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) ya kamata ya dawo da 3.",
      "hi": "एक नए छात्र की गायक मंडली में स्थिति निर्धारित करता है।\nनए छात्र की गायक मंडली में स्थिति निर्धारित करता है।  \nThe choir is arranged with the shortest members on the sides and the tallest in the center.  \nगायक मंडली को इस प्रकार व्यवस्थित किया गया है कि सबसे छोटे सदस्य किनारों पर होते हैं और सबसे लंबे सदस्य केंद्र में होते हैं।  \nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.  \nनया छात्र बाईं या दाईं ओर खड़ा हो सकता है, या यदि वे सबसे लंबे हैं, तो वर्तमान सबसे लंबे छात्र के दाईं ओर खड़ा हो सकता है।  \nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.  \nयदि नया छात्र सबसे लंबा नहीं है, तो उनकी स्थिति शिक्षक की पसंद पर आधारित होती है: बाईं या दाईं ओर।  \n\nInput:  \n- $newStudentHeight (int): The height of the new student.  \n  $newStudentHeight (int): नए छात्र की ऊंचाई।  \n- $heights (array): An array of integers representing the heights of the current choir members from left to right.  \n  $heights (array): एक पूर्णांकों की श्रेणी जो बाएं से दाएं वर्तमान गायक मंडली के सदस्यों की ऊंचाई को दर्शाती है।  \n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).  \n  $teacherPreference (int): नए छात्र की स्थिति के लिए शिक्षक की पसंद (1 बाईं ओर के लिए, 2 दाईं ओर के लिए)।  \n\nOutput:  \n- Returns an integer representing the position (1-indexed) where the new student will stand.  \n  एक पूर्णांक लौटाता है जो उस स्थिति को दर्शाता है (1-इंडेक्स्ड) जहां नया छात्र खड़ा होगा।  \n\nExamples:  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.",
      "hu": "Meghatározza egy új diák helyzetét egy kórus formációban.\nA kórus úgy van elrendezve, hogy a legalacsonyabb tagok a széleken, a legmagasabbak pedig középen állnak.\nAz új diák állhat a bal vagy a jobb oldalon, vagy ha ő a legmagasabb, akkor a jelenlegi legmagasabb diák jobb oldalán.\nHa az új diák nem a legmagasabb, akkor a helyzetét a tanár preferenciája alapján határozzák meg: bal vagy jobb oldal.\n\nBemenet:\n- $newStudentHeight (int): Az új diák magassága.\n- $heights (array): Egész számokat tartalmazó tömb, amely a jelenlegi kórustagok magasságát jelöli balról jobbra.\n- $teacherPreference (int): A tanár preferenciája az új diák helyzetére (1 a bal oldalra, 2 a jobb oldalra).\n\nKimenet:\n- Egy egész számot ad vissza, amely azt a pozíciót jelöli (1-indexelt), ahol az új diák állni fog.\n\nPéldák:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) vissza kell adnia 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) vissza kell adnia 3."
    },
    "docstring_bertscore": {
      "sq": "0.9877145123026111",
      "hy": "0.9605341295921781",
      "bn": "0.968225097945849",
      "bg": "0.9902248030581301",
      "zh": "0.9631133450899161",
      "fr": "0.9927043061045886",
      "de": "0.9810770794899493",
      "ha": "0.9575532834639875",
      "hi": "0.9999996027392379",
      "hu": "0.9713743826371571"
    }
  },
  {
    "task_id": "PHP/18",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines the exact price of an item within a specified range based on a series of hints.\n * The item's price is within the range [1, maxPrice].\n * Hints are given in a string where:\n * - 'u' indicates the actual price is higher than the current guess.\n * - 'd' indicates the actual price is lower than the current guess.\n * - 'y' indicates the current guess is correct.\n * The function uses a binary search approach to narrow down the possible price.\n * Input: The maximum price (maxPrice) and a string of hints.\n * Output: Returns the exact price of the item.\n * Example: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "sq": "<?php\n\n/**\n * Përcakton çmimin e saktë të një artikulli brenda një diapazoni të specifikuar bazuar në një seri të dhënash.\n * Çmimi i artikullit është brenda diapazonit [1, maxPrice].\n * Të dhënat jepen në një varg ku:\n * - 'u' tregon se çmimi aktual është më i lartë se supozimi aktual.\n * - 'd' tregon se çmimi aktual është më i ulët se supozimi aktual.\n * - 'y' tregon se supozimi aktual është i saktë.\n * Funksioni përdor një qasje kërkimi binar për të ngushtuar çmimin e mundshëm.\n * Hyrja: Çmimi maksimal (maxPrice) dhe një varg të dhënash.\n * Dalja: Kthen çmimin e saktë të artikullit.\n * Shembull: Për maxPrice = 1000000 dhe hints = \"uddy\", funksioni kthen 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hy": "<?php\n\n/**\n * Որոշում է ապրանքի ճշգրիտ գինը նշված միջակայքում հիմնվելով հուշումների շարքի վրա:\n * Ապրանքի գինը գտնվում է [1, maxPrice] միջակայքում:\n * Հուշումները տրվում են տողում, որտեղ՝\n * - 'u' նշանակում է, որ իրական գինը բարձր է ընթացիկ գուշակությունից:\n * - 'd' նշանակում է, որ իրական գինը ցածր է ընթացիկ գուշակությունից:\n * - 'y' նշանակում է, որ ընթացիկ գուշակությունը ճիշտ է:\n * Ֆունկցիան օգտագործում է երկբաժան որոնման մոտեցում՝ հնարավոր գինը նեղացնելու համար:\n * Մուտք: Առավելագույն գինը (maxPrice) և հուշումների տող:\n * Ելք: Վերադարձնում է ապրանքի ճշգրիտ գինը:\n * Օրինակ: maxPrice = 1000000 և hints = \"uddy\" դեպքում ֆունկցիան վերադարձնում է 562500:\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "bn": "<?php\n\n/**\n * একটি নির্দিষ্ট সীমার মধ্যে একটি আইটেমের সঠিক মূল্য নির্ধারণ করে একটি সিরিজের ইঙ্গিতের ভিত্তিতে।\n * আইটেমটির মূল্য [1, maxPrice] সীমার মধ্যে।\n * ইঙ্গিতগুলি একটি স্ট্রিংয়ে দেওয়া হয় যেখানে:\n * - 'u' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে বেশি।\n * - 'd' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে কম।\n * - 'y' নির্দেশ করে যে বর্তমান অনুমান সঠিক।\n * ফাংশনটি সম্ভাব্য মূল্য সংকীর্ণ করতে একটি বাইনারি অনুসন্ধান পদ্ধতি ব্যবহার করে।\n * ইনপুট: সর্বাধিক মূল্য (maxPrice) এবং ইঙ্গিতের একটি স্ট্রিং।\n * আউটপুট: আইটেমটির সঠিক মূল্য প্রদান করে।\n * উদাহরণ: maxPrice = 1000000 এবং hints = \"uddy\" এর জন্য, ফাংশনটি 562500 প্রদান করে।\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "bg": "<?php\n\n/**\n * Определя точната цена на артикул в рамките на определен диапазон въз основа на поредица от подсказки.\n * Цената на артикула е в диапазона [1, maxPrice].\n * Подсказките са дадени в низ, където:\n * - 'u' указва, че действителната цена е по-висока от текущото предположение.\n * - 'd' указва, че действителната цена е по-ниска от текущото предположение.\n * - 'y' указва, че текущото предположение е правилно.\n * Функцията използва подход на двоично търсене, за да стесни възможната цена.\n * Вход: Максималната цена (maxPrice) и низ от подсказки.\n * Изход: Връща точната цена на артикула.\n * Пример: За maxPrice = 1000000 и подсказки = \"uddy\", функцията връща 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "zh": "<?php\n\n/**\n * 确定在指定范围内基于一系列提示的物品确切价格。\n * 物品的价格在范围 [1, maxPrice] 之内。\n * 提示以字符串形式给出，其中：\n * - 'u' 表示实际价格高于当前猜测。\n * - 'd' 表示实际价格低于当前猜测。\n * - 'y' 表示当前猜测正确。\n * 该函数使用二分搜索方法来缩小可能的价格范围。\n * 输入：最大价格 (maxPrice) 和提示字符串。\n * 输出：返回物品的确切价格。\n * 例子：对于 maxPrice = 1000000 和 hints = \"uddy\"，函数返回 562500。\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "fr": "<?php\n\n/**\n * Détermine le prix exact d'un article dans une plage spécifiée basée sur une série d'indices.\n * Le prix de l'article est dans la plage [1, maxPrice].\n * Les indices sont donnés dans une chaîne où :\n * - 'u' indique que le prix réel est supérieur à la supposition actuelle.\n * - 'd' indique que le prix réel est inférieur à la supposition actuelle.\n * - 'y' indique que la supposition actuelle est correcte.\n * La fonction utilise une approche de recherche binaire pour réduire la plage de prix possible.\n * Entrée : Le prix maximum (maxPrice) et une chaîne d'indices.\n * Sortie : Retourne le prix exact de l'article.\n * Exemple : Pour maxPrice = 1000000 et hints = \"uddy\", la fonction retourne 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "de": "<?php\n\n/**\n * Bestimmt den genauen Preis eines Artikels innerhalb eines angegebenen Bereichs basierend auf einer Reihe von Hinweisen.\n * Der Preis des Artikels liegt im Bereich [1, maxPrice].\n * Hinweise werden in einem String gegeben, wobei:\n * - 'u' anzeigt, dass der tatsächliche Preis höher als der aktuelle Schätzwert ist.\n * - 'd' anzeigt, dass der tatsächliche Preis niedriger als der aktuelle Schätzwert ist.\n * - 'y' anzeigt, dass der aktuelle Schätzwert korrekt ist.\n * Die Funktion verwendet einen binären Suchansatz, um den möglichen Preis einzugrenzen.\n * Eingabe: Der maximale Preis (maxPrice) und ein String von Hinweisen.\n * Ausgabe: Gibt den genauen Preis des Artikels zurück.\n * Beispiel: Für maxPrice = 1000000 und hints = \"uddy\" gibt die Funktion 562500 zurück.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "ha": "<?php\n\n/**\n * Yana tantance ainihin farashin wani kaya a cikin kewayon da aka kayyade bisa ga jerin alamu.\n * Farashin kayan yana cikin kewayon [1, maxPrice].\n * Ana bayar da alamu a cikin wata igiya inda:\n * - 'u' yana nuna cewa ainihin farashin ya fi na yanzu tsada.\n * - 'd' yana nuna cewa ainihin farashin ya fi na yanzu araha.\n * - 'y' yana nuna cewa farashin na yanzu daidai ne.\n * Aikin yana amfani da hanyar bincike na binary don rage yuwuwar farashin.\n * Shigarwa: Matsakaicin farashi (maxPrice) da igiyar alamu.\n * Fitarwa: Yana dawo da ainihin farashin kayan.\n * Misali: Don maxPrice = 1000000 da alamu = \"uddy\", aikin yana dawo da 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hi": "<?php\n\n/**\n * एक निर्दिष्ट सीमा के भीतर किसी वस्तु की सटीक कीमत निर्धारित करता है जो संकेतों की एक श्रृंखला पर आधारित होती है।\n * वस्तु की कीमत सीमा [1, maxPrice] के भीतर होती है।\n * संकेत एक स्ट्रिंग में दिए जाते हैं जहाँ:\n * - 'u' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से अधिक है।\n * - 'd' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से कम है।\n * - 'y' इंगित करता है कि वर्तमान अनुमान सही है।\n * यह फ़ंक्शन संभावित कीमत को संकीर्ण करने के लिए बाइनरी सर्च दृष्टिकोण का उपयोग करता है।\n * इनपुट: अधिकतम कीमत (maxPrice) और संकेतों की एक स्ट्रिंग।\n * आउटपुट: वस्तु की सटीक कीमत लौटाता है।\n * उदाहरण: यदि maxPrice = 1000000 और संकेत = \"uddy\", तो फ़ंक्शन 562500 लौटाता है।\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hu": "<?php\n\n/**\n * Meghatározza egy termék pontos árát egy megadott tartományon belül, egy sor utalás alapján.\n * A termék ára a [1, maxPrice] tartományban van.\n * Az utalásokat egy stringben adják meg, ahol:\n * - 'u' azt jelzi, hogy a tényleges ár magasabb, mint a jelenlegi tipp.\n * - 'd' azt jelzi, hogy a tényleges ár alacsonyabb, mint a jelenlegi tipp.\n * - 'y' azt jelzi, hogy a jelenlegi tipp helyes.\n * A függvény bináris keresési megközelítést alkalmaz a lehetséges ár szűkítésére.\n * Bemenet: A maximális ár (maxPrice) és egy utalásokat tartalmazó string.\n * Kimenet: Visszaadja a termék pontos árát.\n * Példa: Ha maxPrice = 1000000 és hints = \"uddy\", a függvény 562500-at ad vissza.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int "
    },
    "prompt_bertscore": {
      "sq": "0.9695912777066069",
      "hy": "0.9845475495073909",
      "bn": "0.9800978317114473",
      "bg": "0.983335506922316",
      "zh": "0.9686481806574533",
      "fr": "0.9852890367197941",
      "de": "0.9732941452698592",
      "ha": "0.9531136958174767",
      "hi": "0.9869158195404698",
      "hu": "0.9709874506549011"
    },
    "canonical_solution": "{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}",
    "instruction": {
      "en": "Write a PHP function `function guessItemPrice(int $maxPrice, string $hints): int` to solve the following problem:\nDetermines the exact price of an item within a specified range based on a series of hints.\nThe item's price is within the range [1, maxPrice].\nHints are given in a string where:\n- 'u' indicates the actual price is higher than the current guess.\n- 'd' indicates the actual price is lower than the current guess.\n- 'y' indicates the current guess is correct.\nThe function uses a binary search approach to narrow down the possible price.\nInput: The maximum price (maxPrice) and a string of hints.\nOutput: Returns the exact price of the item.\nExample: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.",
      "sq": "Shkruani një funksion PHP `function guessItemPrice(int $maxPrice, string $hints): int` për të zgjidhur problemin e mëposhtëm:\nPërcakton çmimin e saktë të një artikulli brenda një diapazoni të specifikuar bazuar në një seri udhëzimesh.\nÇmimi i artikullit është brenda diapazonit [1, maxPrice].\nUdhëzimet jepen në një varg ku:\n- 'u' tregon se çmimi aktual është më i lartë se supozimi aktual.\n- 'd' tregon se çmimi aktual është më i ulët se supozimi aktual.\n- 'y' tregon se supozimi aktual është i saktë.\nFunksioni përdor një qasje kërkimi binar për të ngushtuar çmimin e mundshëm.\nInput: Çmimi maksimal (maxPrice) dhe një varg udhëzimesh.\nOutput: Kthen çmimin e saktë të artikullit.\nShembull: Për maxPrice = 1000000 dhe hints = \"uddy\", funksioni kthen 562500.",
      "hy": "Գրեք PHP ֆունկցիա `function guessItemPrice(int $maxPrice, string $hints): int` հետևյալ խնդիրը լուծելու համար:\nՈրոշում է իրի ճշգրիտ գինը նշված միջակայքում հիմնվելով հուշումների շարքի վրա։\nԻրի գինը գտնվում է [1, maxPrice] միջակայքում։\nՀուշումները տրվում են տողում, որտեղ՝\n- 'u' նշում է, որ իրական գինը ավելի բարձր է, քան ընթացիկ գուշակումը։\n- 'd' նշում է, որ իրական գինը ավելի ցածր է, քան ընթացիկ գուշակումը։\n- 'y' նշում է, որ ընթացիկ գուշակումը ճիշտ է։\nՖունկցիան օգտագործում է երկբաշխ որոնման մոտեցում՝ հնարավոր գինը նեղացնելու համար։\nՄուտք: Առավելագույն գինը (maxPrice) և հուշումների տող։\nԵլք: Վերադարձնում է իրի ճշգրիտ գինը։\nՕրինակ: maxPrice = 1000000 և hints = \"uddy\" համար, ֆունկցիան վերադարձնում է 562500։",
      "bn": "একটি PHP ফাংশন `function guessItemPrice(int $maxPrice, string $hints): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি নির্দিষ্ট সীমার মধ্যে একটি আইটেমের সঠিক মূল্য নির্ধারণ করে একটি সিরিজের সংকেতের ভিত্তিতে।\nআইটেমের মূল্য [1, maxPrice] সীমার মধ্যে রয়েছে।\nসংকেতগুলি একটি স্ট্রিংয়ে দেওয়া হয় যেখানে:\n- 'u' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে বেশি।\n- 'd' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে কম।\n- 'y' নির্দেশ করে যে বর্তমান অনুমান সঠিক।\nফাংশনটি একটি বাইনারি সার্চ পদ্ধতি ব্যবহার করে সম্ভাব্য মূল্য সংকুচিত করে।\nইনপুট: সর্বাধিক মূল্য (maxPrice) এবং সংকেতের একটি স্ট্রিং।\nআউটপুট: আইটেমের সঠিক মূল্য প্রদান করে।\nউদাহরণ: maxPrice = 1000000 এবং hints = \"uddy\" এর জন্য, ফাংশনটি 562500 প্রদান করে।",
      "bg": "Напишете PHP функция `function guessItemPrice(int $maxPrice, string $hints): int`, за да решите следния проблем:\nОпределя точната цена на артикул в рамките на определен диапазон въз основа на серия от подсказки.\nЦената на артикула е в диапазона [1, maxPrice].\nПодсказките са дадени в низ, където:\n- 'u' показва, че действителната цена е по-висока от текущата предположение.\n- 'd' показва, че действителната цена е по-ниска от текущата предположение.\n- 'y' показва, че текущата предположение е правилна.\nФункцията използва подход на бинарно търсене, за да стесни възможната цена.\nВход: Максималната цена (maxPrice) и низ от подсказки.\nИзход: Връща точната цена на артикула.\nПример: За maxPrice = 1000000 и hints = \"uddy\", функцията връща 562500.",
      "zh": "编写一个 PHP 函数 `function guessItemPrice(int $maxPrice, string $hints): int` 来解决以下问题：\n确定物品的确切价格在指定范围内，基于一系列提示。\n物品的价格在范围 [1, maxPrice] 内。\n提示以字符串形式给出，其中：\n- 'u' 表示实际价格高于当前猜测。\n- 'd' 表示实际价格低于当前猜测。\n- 'y' 表示当前猜测是正确的。\n该函数使用二分搜索方法来缩小可能的价格范围。\n输入：最大价格 (maxPrice) 和提示字符串。\n输出：返回物品的确切价格。\n示例：对于 maxPrice = 1000000 和 hints = \"uddy\"，函数返回 562500。",
      "fr": "Écrire une fonction PHP `function guessItemPrice(int $maxPrice, string $hints): int` pour résoudre le problème suivant :\nDétermine le prix exact d'un article dans une plage spécifiée basée sur une série d'indices.\nLe prix de l'article est dans la plage [1, maxPrice].\nLes indices sont donnés dans une chaîne où :\n- 'u' indique que le prix réel est supérieur à la supposition actuelle.\n- 'd' indique que le prix réel est inférieur à la supposition actuelle.\n- 'y' indique que la supposition actuelle est correcte.\nLa fonction utilise une approche de recherche binaire pour réduire le prix possible.\nEntrée : Le prix maximum (maxPrice) et une chaîne d'indices.\nSortie : Retourne le prix exact de l'article.\nExemple : Pour maxPrice = 1000000 et hints = \"uddy\", la fonction retourne 562500.",
      "de": "Schreiben Sie eine PHP-Funktion `function guessItemPrice(int $maxPrice, string $hints): int`, um das folgende Problem zu lösen:\nBestimmt den genauen Preis eines Artikels innerhalb eines angegebenen Bereichs basierend auf einer Reihe von Hinweisen.\nDer Preis des Artikels liegt im Bereich [1, maxPrice].\nHinweise werden in einem String gegeben, wobei:\n- 'u' anzeigt, dass der tatsächliche Preis höher ist als der aktuelle Schätzwert.\n- 'd' anzeigt, dass der tatsächliche Preis niedriger ist als der aktuelle Schätzwert.\n- 'y' anzeigt, dass der aktuelle Schätzwert korrekt ist.\nDie Funktion verwendet einen binären Suchansatz, um den möglichen Preis einzugrenzen.\nEingabe: Der maximale Preis (maxPrice) und ein String von Hinweisen.\nAusgabe: Gibt den genauen Preis des Artikels zurück.\nBeispiel: Für maxPrice = 1000000 und hints = \"uddy\" gibt die Funktion 562500 zurück.",
      "ha": "Rubuta aikin PHP `function guessItemPrice(int $maxPrice, string $hints): int` don warware matsalar mai zuwa:\nYana tantance ainihin farashin wani abu a cikin kewayon da aka kayyade bisa jerin shawarwari.\nFarashin abu yana cikin kewayon [1, maxPrice].\nAna bayar da shawarwari a cikin wani igiya inda:\n- 'u' yana nufin ainihin farashin ya fi na yanzu tsada.\n- 'd' yana nufin ainihin farashin ya fi na yanzu araha.\n- 'y' yana nufin farashin na yanzu dai-dai ne.\nAikin yana amfani da hanyar bincike ta binary don takaita yiwuwar farashin.\nShigarwa: Matsakaicin farashi (maxPrice) da igiyar shawarwari.\nFitarwa: Yana dawo da ainihin farashin abu.\nMisali: Don maxPrice = 1000000 da hints = \"uddy\", aikin yana dawo da 562500.",
      "hi": "PHP फ़ंक्शन `function guessItemPrice(int $maxPrice, string $hints): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nसंकेतों की एक श्रृंखला के आधार पर निर्दिष्ट सीमा के भीतर किसी वस्तु की सही कीमत निर्धारित करता है।\nवस्तु की कीमत सीमा [1, maxPrice] के भीतर है।\nसंकेत एक स्ट्रिंग में दिए जाते हैं जहाँ:\n- 'u' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से अधिक है।\n- 'd' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से कम है।\n- 'y' इंगित करता है कि वर्तमान अनुमान सही है।\nफ़ंक्शन संभावित कीमत को संकीर्ण करने के लिए एक बाइनरी सर्च दृष्टिकोण का उपयोग करता है।\nइनपुट: अधिकतम कीमत (maxPrice) और संकेतों की एक स्ट्रिंग।\nआउटपुट: वस्तु की सही कीमत लौटाता है।\nउदाहरण: maxPrice = 1000000 और hints = \"uddy\" के लिए, फ़ंक्शन 562500 लौटाता है।",
      "hu": "Írj egy PHP függvényt `function guessItemPrice(int $maxPrice, string $hints): int` a következő probléma megoldására:\nMeghatározza egy tárgy pontos árát egy megadott tartományon belül egy sor tipp alapján.\nA tárgy ára a [1, maxPrice] tartományon belül van.\nA tippek egy olyan stringben vannak megadva, ahol:\n- 'u' azt jelzi, hogy a tényleges ár magasabb, mint a jelenlegi tipp.\n- 'd' azt jelzi, hogy a tényleges ár alacsonyabb, mint a jelenlegi tipp.\n- 'y' azt jelzi, hogy a jelenlegi tipp helyes.\nA függvény bináris keresési megközelítést használ a lehetséges ár szűkítésére.\nBemenet: A maximális ár (maxPrice) és egy tipp string.\nKimenet: Visszaadja a tárgy pontos árát.\nPélda: Ha maxPrice = 1000000 és hints = \"uddy\", a függvény 562500-at ad vissza."
    },
    "instruction_bertscore": {
      "sq": "0.9699361000480835",
      "hy": "0.9826369238722162",
      "bn": "0.9726668705265511",
      "bg": "0.9800861125189663",
      "zh": "0.9733285083257783",
      "fr": "0.9847277072629895",
      "de": "0.9831450203869035",
      "ha": "0.9625748581269306",
      "hi": "0.979799687509514",
      "hu": "0.9839800625087742"
    },
    "level": "easy",
    "test": "function main(){\n    assert(guessItemPrice(1000000, \"uddy\") === 562500);\n    assert(guessItemPrice(500, \"ududy\") === 327);\n    assert(guessItemPrice(100, \"uuudy\") === 91);\n    assert(guessItemPrice(1000, \"ddduy\") === 93);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "guessItemPrice",
    "signature": "function guessItemPrice(int $maxPrice, string $hints): int",
    "docstring": {
      "en": "Determines the exact price of an item within a specified range based on a series of hints.\nThe item's price is within the range [1, maxPrice].\nHints are given in a string where:\n- 'u' indicates the actual price is higher than the current guess.\n- 'd' indicates the actual price is lower than the current guess.\n- 'y' indicates the current guess is correct.\nThe function uses a binary search approach to narrow down the possible price.\nInput: The maximum price (maxPrice) and a string of hints.\nOutput: Returns the exact price of the item.\nExample: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.",
      "sq": "Përcakton çmimin e saktë të një artikulli brenda një diapazoni të specifikuar bazuar në një seri të dhënash ndihmëse.\nÇmimi i artikullit është brenda diapazonit [1, maxPrice].\nTë dhënat ndihmëse jepen në një varg ku:\n- 'u' tregon se çmimi aktual është më i lartë se supozimi aktual.\n- 'd' tregon se çmimi aktual është më i ulët se supozimi aktual.\n- 'y' tregon se supozimi aktual është i saktë.\nFunksioni përdor një qasje kërkimi binar për të ngushtuar çmimin e mundshëm.\nHyrja: Çmimi maksimal (maxPrice) dhe një varg të dhënash ndihmëse.\nDalja: Kthen çmimin e saktë të artikullit.\nShembull: Për maxPrice = 1000000 dhe hints = \"uddy\", funksioni kthen 562500.",
      "hy": "Սահմանում է ապրանքի ճշգրիտ գինը նշված միջակայքում հիմնված հուշումների շարքի վրա։  \nԱպրանքի գինը գտնվում է [1, maxPrice] միջակայքում։  \nՀուշումները տրվում են տողում, որտեղ՝  \n- 'u' ցույց է տալիս, որ իրական գինը բարձր է ընթացիկ գուշակությունից։  \n- 'd' ցույց է տալիս, որ իրական գինը ցածր է ընթացիկ գուշակությունից։  \n- 'y' ցույց է տալիս, որ ընթացիկ գուշակությունը ճիշտ է։  \nՖունկցիան օգտագործում է երկբևեռ որոնման մոտեցում՝ հնարավոր գինը նեղացնելու համար։  \nՄուտք: Առավելագույն գինը (maxPrice) և հուշումների տող։  \nԵլք: Վերադարձնում է ապրանքի ճշգրիտ գինը։  \nՕրինակ: maxPrice = 1000000 և hints = \"uddy\" համար, ֆունկցիան վերադարձնում է 562500։  ",
      "bn": "একটি নির্দিষ্ট সীমার মধ্যে একটি আইটেমের সঠিক মূল্য নির্ধারণ করে একটি সিরিজের ইঙ্গিতের ভিত্তিতে। \nআইটেমের মূল্য সীমার মধ্যে [1, maxPrice]। \nইঙ্গিতগুলি একটি স্ট্রিংয়ে দেওয়া হয় যেখানে: \n- 'u' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে বেশি। \n- 'd' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে কম। \n- 'y' নির্দেশ করে যে বর্তমান অনুমান সঠিক। \nফাংশনটি সম্ভাব্য মূল্য সংকুচিত করতে একটি বাইনারি অনুসন্ধান পদ্ধতি ব্যবহার করে। \nইনপুট: সর্বাধিক মূল্য (maxPrice) এবং ইঙ্গিতের একটি স্ট্রিং। \nআউটপুট: আইটেমের সঠিক মূল্য প্রদান করে। \nউদাহরণ: maxPrice = 1000000 এবং hints = \"uddy\" এর জন্য, ফাংশনটি 562500 প্রদান করে।",
      "bg": "Определя точната цена на артикул в зададен диапазон въз основа на серия от подсказки.\nЦената на артикула е в диапазона [1, maxPrice].\nПодсказките са дадени в низ, където:\n- 'u' показва, че действителната цена е по-висока от текущата предположение.\n- 'd' показва, че действителната цена е по-ниска от текущата предположение.\n- 'y' показва, че текущата предположение е правилно.\nФункцията използва подхода на двоично търсене, за да стесни възможната цена.\nВход: Максималната цена (maxPrice) и низ от подсказки.\nИзход: Връща точната цена на артикула.\nПример: За maxPrice = 1000000 и hints = \"uddy\", функцията връща 562500.",
      "zh": "确定在指定范围内基于一系列提示的商品确切价格。\n商品的价格在范围 [1, maxPrice] 内。\n提示以字符串形式给出，其中：\n- 'u' 表示实际价格高于当前猜测。\n- 'd' 表示实际价格低于当前猜测。\n- 'y' 表示当前猜测正确。\n该函数使用二分查找方法来缩小可能的价格范围。\n输入：最大价格 (maxPrice) 和提示字符串。\n输出：返回商品的确切价格。\n示例：对于 maxPrice = 1000000 和 hints = \"uddy\"，函数返回 562500。",
      "fr": "Détermine le prix exact d'un article dans une plage spécifiée en fonction d'une série d'indices.  \nLe prix de l'article est dans la plage [1, maxPrice].  \nLes indices sont donnés dans une chaîne où :  \n- 'u' indique que le prix réel est supérieur à la supposition actuelle.  \n- 'd' indique que le prix réel est inférieur à la supposition actuelle.  \n- 'y' indique que la supposition actuelle est correcte.  \nLa fonction utilise une approche de recherche binaire pour réduire les possibilités de prix.  \nEntrée : Le prix maximum (maxPrice) et une chaîne d'indices.  \nSortie : Renvoie le prix exact de l'article.  \nExemple : Pour maxPrice = 1000000 et hints = \"uddy\", la fonction renvoie 562500.  ",
      "de": "Bestimmt den genauen Preis eines Artikels innerhalb eines angegebenen Bereichs basierend auf einer Reihe von Hinweisen.\nDer Preis des Artikels liegt im Bereich [1, maxPrice].\nHinweise werden in einem String gegeben, wobei:\n- 'u' anzeigt, dass der tatsächliche Preis höher als der aktuelle Schätzwert ist.\n- 'd' anzeigt, dass der tatsächliche Preis niedriger als der aktuelle Schätzwert ist.\n- 'y' anzeigt, dass der aktuelle Schätzwert korrekt ist.\nDie Funktion verwendet einen binären Suchansatz, um den möglichen Preis einzugrenzen.\nEingabe: Der maximale Preis (maxPrice) und ein String von Hinweisen.\nAusgabe: Gibt den genauen Preis des Artikels zurück.\nBeispiel: Für maxPrice = 1000000 und hints = \"uddy\" gibt die Funktion 562500 zurück.",
      "ha": "Yana tantance ainihin farashin wani abu a cikin kewayon da aka fayyace bisa jerin alamu.\nFarashin abu yana cikin kewayon [1, maxPrice].\nAna bayar da alamu a cikin wani igiya inda:\n- 'u' yana nuna cewa ainihin farashin ya fi na yanzu tsada.\n- 'd' yana nuna cewa ainihin farashin ya fi na yanzu araha.\n- 'y' yana nuna cewa farashin da ake tsammani na yanzu daidai ne.\nAikin yana amfani da hanyar bincike ta binary don rage yiwuwar farashi.\nShigarwa: Matsakaicin farashi (maxPrice) da igiyar alamu.\nFitarwa: Yana mayar da ainihin farashin abu.\nMisali: Domin maxPrice = 1000000 da hints = \"uddy\", aikin yana mayar da 562500.",
      "hi": "निर्धारित सीमा के भीतर किसी वस्तु की सटीक कीमत का निर्धारण करता है, जो संकेतों की एक श्रृंखला पर आधारित होती है। वस्तु की कीमत [1, maxPrice] की सीमा के भीतर है। संकेत एक स्ट्रिंग में दिए जाते हैं जहाँ:\n- 'u' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से अधिक है।\n- 'd' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से कम है।\n- 'y' इंगित करता है कि वर्तमान अनुमान सही है।\nयह फ़ंक्शन संभावित कीमत को संकीर्ण करने के लिए बाइनरी सर्च दृष्टिकोण का उपयोग करता है।\nइनपुट: अधिकतम कीमत (maxPrice) और संकेतों की एक स्ट्रिंग।\nआउटपुट: वस्तु की सटीक कीमत लौटाता है।\nउदाहरण: maxPrice = 1000000 और hints = \"uddy\" के लिए, फ़ंक्शन 562500 लौटाता है।",
      "hu": "Meghatározza egy elem pontos árát egy megadott tartományon belül egy sor utalás alapján.\nAz elem ára a [1, maxPrice] tartományban van.\nAz utalásokat egy olyan karakterláncban adják meg, ahol:\n- 'u' azt jelzi, hogy a tényleges ár magasabb, mint a jelenlegi tipp.\n- 'd' azt jelzi, hogy a tényleges ár alacsonyabb, mint a jelenlegi tipp.\n- 'y' azt jelzi, hogy a jelenlegi tipp helyes.\nA függvény bináris keresési megközelítést használ a lehetséges ár szűkítésére.\nBemenet: A maximális ár (maxPrice) és egy utalásokat tartalmazó karakterlánc.\nKimenet: Visszaadja az elem pontos árát.\nPélda: Ha maxPrice = 1000000 és hints = \"uddy\", a függvény 562500-at ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9804629143517894",
      "hy": "0.9624342278171578",
      "bn": "0.9690408729207592",
      "bg": "0.9766126630458092",
      "zh": "0.965777177129975",
      "fr": "0.9796824955847033",
      "de": "0.9726577335290235",
      "ha": "0.96961491472195",
      "hi": "0.9787399944266928",
      "hu": "0.9793587280636165"
    }
  },
  {
    "task_id": "PHP/19",
    "prompt": {
      "en": "<?php\n\n/**\n * Calculates the total effort required to sort a list of disordered elements.\n * In this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order. \n * The effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\n * Input: An array of integers representing the unsorted container numbers.\n * Output: Returns an integer representing the total effort required to sort the containers.\n * Example: For input [3, 1, 4, 2], the output is 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "sq": "<?php\n\n/**\n * Llogarit përpjekjen totale të nevojshme për të renditur një listë elementësh të çrregullt.\n * Në këtë skenar, imagjinoni një seri kontejnerësh të numëruar në një depo. Çdo kontejner duhet të rregullohet në rend rritës.\n * Përpjekja për të ndërruar dy kontejnerë është proporcionale me distancën midis tyre, e matur si dyfishi i diferencës së tyre pozicionale.\n * Hyrja: Një varg me numra të plotë që përfaqësojnë numrat e kontejnerëve të çrregullt.\n * Dalja: Kthen një numër të plotë që përfaqëson përpjekjen totale të nevojshme për të renditur kontejnerët.\n * Shembull: Për hyrjen [3, 1, 4, 2], dalja është 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hy": "<?php\n\n/**\n * Հաշվում է ընդհանուր ջանքերը, որոնք անհրաժեշտ են տարրերի անկանոն ցուցակը դասավորելու համար:\n * Այս սցենարում պատկերացրեք համարակալված տարաների շարք պահեստում: Յուրաքանչյուր տարա պետք է դասավորվի աճման կարգով:\n * Երկու տարաների փոխանակման ջանքը համեմատական է նրանց միջև հեռավորությանը, որը չափվում է որպես նրանց դիրքային տարբերության կրկնապատիկ:\n * Մուտքագրում: Անկարգ տարաների համարները ներկայացնող ամբողջ թվերի զանգված:\n * Ելք: Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է տարաները դասավորելու համար անհրաժեշտ ընդհանուր ջանքը:\n * Օրինակ: Մուտքի համար [3, 1, 4, 2], ելքը 8 է:\n */\n\nfunction calculateEffort($horseNumbers) ",
      "bn": "<?php\n\n/**\n * এলোমেলো উপাদানগুলির একটি তালিকা সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা গণনা করে।\n * এই পরিস্থিতিতে, একটি গুদামে নম্বরযুক্ত কন্টেইনারগুলির একটি সিরিজ কল্পনা করুন। প্রতিটি কন্টেইনারকে ঊর্ধ্বক্রমে সাজাতে হবে।\n * দুটি কন্টেইনার অদলবদল করার প্রচেষ্টা তাদের মধ্যে দূরত্বের সমানুপাতিক, যা তাদের অবস্থানগত পার্থক্যের দ্বিগুণ হিসাবে পরিমাপ করা হয়।\n * ইনপুট: অসংলগ্ন কন্টেইনার নম্বরগুলিকে উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n * আউটপুট: কন্টেইনারগুলি সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা উপস্থাপনকারী একটি পূর্ণসংখ্যা প্রদান করে।\n * উদাহরণ: ইনপুট [3, 1, 4, 2] এর জন্য, আউটপুট 8।\n */\n\nfunction calculateEffort($horseNumbers) ",
      "bg": "<?php\n\n/**\n * Изчислява общото усилие, необходимо за сортиране на списък от неупорядъчени елементи.\n * В този сценарий си представете серия от номерирани контейнери в склад. Всеки контейнер трябва да бъде подреден във възходящ ред.\n * Усилието за размяна на два контейнера е пропорционално на разстоянието между тях, измерено като двойно на разликата в позициите им.\n * Вход: Масив от цели числа, представляващи несортираните номера на контейнерите.\n * Изход: Връща цяло число, представляващо общото усилие, необходимо за сортиране на контейнерите.\n * Пример: За вход [3, 1, 4, 2], изходът е 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "zh": "<?php\n\n/**\n * 计算对一组无序元素进行排序所需的总努力。\n * 在这种情况下，想象一个仓库中有一系列编号的容器。每个容器必须按升序排列。\n * 交换两个容器的努力与它们之间的距离成正比，距离测量为它们位置差的两倍。\n * 输入：一个整数数组，表示未排序的容器编号。\n * 输出：返回一个整数，表示对容器进行排序所需的总努力。\n * 示例：对于输入 [3, 1, 4, 2]，输出是 8。\n */\n\nfunction calculateEffort($horseNumbers) ",
      "fr": "<?php\n\n/**\n * Calcule l'effort total nécessaire pour trier une liste d'éléments désordonnés.\n * Dans ce scénario, imaginez une série de conteneurs numérotés dans un entrepôt. Chaque conteneur doit être arrangé dans l'ordre croissant.\n * L'effort pour échanger deux conteneurs est proportionnel à la distance entre eux, mesurée comme le double de leur différence de position.\n * Entrée : Un tableau d'entiers représentant les numéros de conteneurs non triés.\n * Sortie : Retourne un entier représentant l'effort total nécessaire pour trier les conteneurs.\n * Exemple : Pour l'entrée [3, 1, 4, 2], la sortie est 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "de": "<?php\n\n/**\n * Berechnet den gesamten Aufwand, der erforderlich ist, um eine Liste ungeordneter Elemente zu sortieren.\n * In diesem Szenario stellen Sie sich eine Reihe von nummerierten Containern in einem Lagerhaus vor. Jeder Container muss in aufsteigender Reihenfolge angeordnet werden.\n * Der Aufwand, zwei Container zu tauschen, ist proportional zur Entfernung zwischen ihnen, gemessen als das Doppelte ihrer Positionsdifferenz.\n * Eingabe: Ein Array von ganzen Zahlen, das die unsortierten Containernummern darstellt.\n * Ausgabe: Gibt eine ganze Zahl zurück, die den gesamten Aufwand darstellt, der erforderlich ist, um die Container zu sortieren.\n * Beispiel: Für die Eingabe [3, 1, 4, 2] ist die Ausgabe 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "ha": "<?php\n\n/**\n * Lissafa jimillar ƙoƙari da ake buƙata don tsara jerin abubuwa marasa tsari.\n * A wannan yanayin, ka yi tunanin jerin kwantena masu lamba a cikin sito. Dole ne a tsara kowanne kwantena a cikin tsari mai ƙaruwa.\n * Ƙoƙarin musanya kwantena biyu yana da alaƙa da nisan dake tsakaninsu, wanda aka auna a matsayin ninki biyu na bambancin matsayinsu.\n * Shigarwa: Jeri na lambobin cikakkun lambobi da ke wakiltar lambobin kwantena marasa tsari.\n * Fitarwa: Yana mayar da cikakken lamba wanda ke wakiltar jimillar ƙoƙari da ake buƙata don tsara kwantenan.\n * Misali: Don shigarwa [3, 1, 4, 2], fitarwa shine 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hi": "<?php\n\n/**\n * अव्यवस्थित तत्वों की सूची को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास की गणना करता है।\n * इस परिदृश्य में, एक गोदाम में क्रमांकित कंटेनरों की एक श्रृंखला की कल्पना करें। प्रत्येक कंटेनर को आरोही क्रम में व्यवस्थित किया जाना चाहिए।\n * दो कंटेनरों को अदला-बदली करने का प्रयास उनके बीच की दूरी के समानुपाती होता है, जिसे उनकी स्थिति के अंतर के दोगुने के रूप में मापा जाता है।\n * इनपुट: अव्यवस्थित कंटेनर नंबरों का एक पूर्णांक सरणी।\n * आउटपुट: कंटेनरों को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास का प्रतिनिधित्व करने वाला एक पूर्णांक लौटाता है।\n * उदाहरण: इनपुट [3, 1, 4, 2] के लिए, आउटपुट 8 है।\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hu": "<?php\n\n/**\n * Kiszámítja a rendezetlen elemek listájának rendezéséhez szükséges teljes erőfeszítést.\n * Ebben a forgatókönyvben képzelj el egy sor számozott konténert egy raktárban. Minden konténert növekvő sorrendbe kell rendezni.\n * Két konténer felcserélésének erőfeszítése arányos a köztük lévő távolsággal, amelyet a pozícióbeli különbségük kétszeresével mérünk.\n * Bemenet: Egész számokat tartalmazó tömb, amely a rendezetlen konténerszámokat jelöli.\n * Kimenet: Egy egész számot ad vissza, amely a konténerek rendezéséhez szükséges teljes erőfeszítést jelenti.\n * Példa: A [3, 1, 4, 2] bemenetre a kimenet 8.\n */\n\nfunction calculateEffort($horseNumbers) "
    },
    "prompt_bertscore": {
      "sq": "0.981143620667596",
      "hy": "0.976622991825623",
      "bn": "0.9861165308871854",
      "bg": "0.9843977822000906",
      "zh": "0.9597445738275644",
      "fr": "0.9906453035747809",
      "de": "0.9914445922280652",
      "ha": "0.953656155388083",
      "hi": "0.9778036508104944",
      "hu": "0.9771195677782102"
    },
    "canonical_solution": "{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}",
    "instruction": {
      "en": "Write a PHP function `function calculateEffort($horseNumbers)` to solve the following problem:\nCalculates the total effort required to sort a list of disordered elements.\nIn this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Returns an integer representing the total effort required to sort the containers.\nExample: For input [3, 1, 4, 2], the output is 8.",
      "sq": "Shkruani një funksion PHP `function calculateEffort($horseNumbers)` për të zgjidhur problemin e mëposhtëm:\nLlogarit përpjekjen totale të nevojshme për të renditur një listë elementesh të çrregullta.\nNë këtë skenar, imagjinoni një seri kontejnerësh të numëruar në një depo. Çdo kontejner duhet të renditet në rritje.\nPërpjekja për të ndërruar dy kontejnerë është proporcionale me distancën midis tyre, e matur si dyfishi i diferencës së tyre pozicionale.\nHyrja: Një varg i numrave të plotë që përfaqësojnë numrat e kontejnerëve të çrregullt.\nDalja: Kthen një numër të plotë që përfaqëson përpjekjen totale të nevojshme për të renditur kontejnerët.\nShembull: Për hyrjen [3, 1, 4, 2], dalja është 8.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateEffort($horseNumbers)` հետևյալ խնդիրը լուծելու համար:\nՀաշվարկում է ընդհանուր ջանքերը, որոնք անհրաժեշտ են տարրերի անկարգ ցուցակը դասավորելու համար:\nԱյս սցենարում պատկերացրեք համարակալված տարաների շարք պահեստում: Յուրաքանչյուր տարա պետք է դասավորվի աճման կարգով:\nԵրկու տարաների տեղերը փոխելու ջանքերը համեմատական են նրանց միջև հեռավորությանը, որը չափվում է որպես նրանց դիրքային տարբերության կրկնապատիկը:\nՄուտք: Անկարգ տարաների համարները ներկայացնող ամբողջ թվերի զանգված:\nԵլք: Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է տարաների դասավորության համար անհրաժեշտ ընդհանուր ջանքերը:\nՕրինակ: Մուտքի համար [3, 1, 4, 2], ելքը 8 է:",
      "bn": "একটি PHP ফাংশন `function calculateEffort($horseNumbers)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি তালিকার বিশৃঙ্খল উপাদানগুলোকে সাজানোর জন্য মোট প্রচেষ্টা গণনা করে।\nএই পরিস্থিতিতে, একটি গুদামে ধারাবাহিকভাবে নম্বরযুক্ত কন্টেইনার কল্পনা করুন। প্রতিটি কন্টেইনারকে ক্রমবর্ধমান ক্রমে সাজাতে হবে।\nদুইটি কন্টেইনার অদলবদল করার প্রচেষ্টা তাদের মধ্যে দূরত্বের সমানুপাতিক, যা তাদের অবস্থানগত পার্থক্যের দ্বিগুণ হিসাবে মাপা হয়।\nইনপুট: একটি পূর্ণসংখ্যার অ্যারে যা অসম্পূর্ণ কন্টেইনার নম্বরগুলোকে উপস্থাপন করে।\nআউটপুট: একটি পূর্ণসংখ্যা ফেরত দেয় যা কন্টেইনারগুলোকে সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা উপস্থাপন করে।\nউদাহরণ: ইনপুট [3, 1, 4, 2] এর জন্য, আউটপুট 8।",
      "bg": "Напишете PHP функция `function calculateEffort($horseNumbers)`, за да решите следния проблем:\nИзчислява общото усилие, необходимо за сортиране на списък от неупорядъчени елементи.\nВ този сценарий си представете серия от номерирани контейнери в склад. Всеки контейнер трябва да бъде подреден във възходящ ред.\nУсилието за размяна на два контейнера е пропорционално на разстоянието между тях, измерено като двойно на разликата в позициите им.\nВход: Масив от цели числа, представляващи несортираните номера на контейнерите.\nИзход: Връща цяло число, представляващо общото усилие, необходимо за сортиране на контейнерите.\nПример: За вход [3, 1, 4, 2], изходът е 8.",
      "zh": "编写一个 PHP 函数 `function calculateEffort($horseNumbers)` 来解决以下问题：\n计算对一组无序元素进行排序所需的总努力。\n在这种情况下，想象一个仓库中编号的容器系列。每个容器必须按升序排列。\n交换两个容器的努力与它们之间的距离成正比，测量为它们位置差的两倍。\n输入：一个整数数组，表示未排序的容器编号。\n输出：返回一个整数，表示对容器进行排序所需的总努力。\n示例：对于输入 [3, 1, 4, 2]，输出是 8。",
      "fr": "Écrire une fonction PHP `function calculateEffort($horseNumbers)` pour résoudre le problème suivant :\nCalcule l'effort total nécessaire pour trier une liste d'éléments désordonnés.\nDans ce scénario, imaginez une série de conteneurs numérotés dans un entrepôt. Chaque conteneur doit être arrangé dans l'ordre croissant.\nL'effort pour échanger deux conteneurs est proportionnel à la distance entre eux, mesurée comme le double de leur différence positionnelle.\nEntrée : Un tableau d'entiers représentant les numéros de conteneurs non triés.\nSortie : Retourne un entier représentant l'effort total nécessaire pour trier les conteneurs.\nExemple : Pour l'entrée [3, 1, 4, 2], la sortie est 8.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateEffort($horseNumbers)`, um das folgende Problem zu lösen:\nBerechnet den gesamten Aufwand, der erforderlich ist, um eine Liste ungeordneter Elemente zu sortieren.\nIn diesem Szenario stellen Sie sich eine Reihe von nummerierten Containern in einem Lagerhaus vor. Jeder Container muss in aufsteigender Reihenfolge angeordnet werden.\nDer Aufwand, zwei Container zu tauschen, ist proportional zur Entfernung zwischen ihnen, gemessen als das Doppelte ihrer Positionsdifferenz.\nEingabe: Ein Array von ganzen Zahlen, das die unsortierten Container-Nummern darstellt.\nAusgabe: Gibt eine ganze Zahl zurück, die den gesamten Aufwand darstellt, der erforderlich ist, um die Container zu sortieren.\nBeispiel: Für die Eingabe [3, 1, 4, 2] beträgt die Ausgabe 8.",
      "ha": "Rubuta aikin PHP `function calculateEffort($horseNumbers)` don warware matsalar mai zuwa:\nYana ƙididdige jimillar ƙoƙari da ake buƙata don tsara jerin abubuwan da ba a tsara ba.\nA wannan yanayin, yi tunanin jerin kwantena masu lamba a cikin sito. Dole ne a shirya kowanne kwantena a cikin tsari mai tashi.\nƘoƙarin musanya kwantena biyu yana da alaƙa da nisan da ke tsakanin su, wanda aka auna a matsayin ninki biyu na bambancin matsayinsu.\nShigarwa: Jerin lambobi na integers da ke wakiltar lambobin kwantena da ba a tsara ba.\nFitarwa: Yana dawowa da integer da ke wakiltar jimillar ƙoƙari da ake buƙata don tsara kwantenan.\nMisali: Don shigarwa [3, 1, 4, 2], fitarwa shine 8.",
      "hi": "PHP फ़ंक्शन `function calculateEffort($horseNumbers)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nबिना क्रम वाले तत्वों की सूची को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास की गणना करता है।\nइस परिदृश्य में, एक गोदाम में क्रमांकित कंटेनरों की एक श्रृंखला की कल्पना करें। प्रत्येक कंटेनर को आरोही क्रम में व्यवस्थित किया जाना चाहिए।\nदो कंटेनरों को अदला-बदली करने का प्रयास उनके बीच की दूरी के समानुपाती होता है, जिसे उनके स्थिति अंतर के दोगुने के रूप में मापा जाता है।\nइनपुट: पूर्णांकों की एक सरणी जो बिना क्रम वाले कंटेनर नंबरों का प्रतिनिधित्व करती है।\nआउटपुट: एक पूर्णांक लौटाता है जो कंटेनरों को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास का प्रतिनिधित्व करता है।\nउदाहरण: इनपुट [3, 1, 4, 2] के लिए, आउटपुट 8 है।",
      "hu": "Írj egy PHP függvényt `function calculateEffort($horseNumbers)` a következő probléma megoldására:\nKiszámítja a rendezetlen elemek listájának rendezéséhez szükséges teljes erőfeszítést.\nEbben a helyzetben képzelj el egy sor számozott konténert egy raktárban. Minden konténert növekvő sorrendbe kell rendezni.\nKét konténer felcserélésének erőfeszítése arányos a köztük lévő távolsággal, amelyet a pozícióbeli különbségük kétszereseként mérünk.\nBemenet: Egész számokat tartalmazó tömb, amely a rendezetlen konténerszámokat képviseli.\nKimenet: Egész számot ad vissza, amely a konténerek rendezéséhez szükséges teljes erőfeszítést jelenti.\nPélda: A [3, 1, 4, 2] bemenetre a kimenet 8."
    },
    "instruction_bertscore": {
      "sq": "0.9756077919481536",
      "hy": "0.9837381307046738",
      "bn": "0.968908783717371",
      "bg": "0.9825133757752126",
      "zh": "0.9712403071299586",
      "fr": "0.992922799523727",
      "de": "0.991055673941999",
      "ha": "0.957316516049794",
      "hi": "0.973360686447506",
      "hu": "0.9613457333290866"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateEffort([2, 3, 6, 5, 8, 4]) === 14);\n    assert(calculateEffort([3, 1, 4, 2]) === 8);\n    assert(calculateEffort([1, 2, 3, 4]) === 0); // Already sorted\n    assert(calculateEffort([4, 3, 2, 1]) === 20); // Reverse order\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateEffort",
    "signature": "function calculateEffort($horseNumbers)",
    "docstring": {
      "en": "Calculates the total effort required to sort a list of disordered elements.\nIn this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Returns an integer representing the total effort required to sort the containers.\nExample: For input [3, 1, 4, 2], the output is 8.",
      "sq": "Llogarit përpjekjen totale të nevojshme për të renditur një listë elementesh të çrregullta.\nNë këtë skenar, imagjinoni një seri kontejnerësh të numëruar në një depo. Çdo kontejner duhet të renditet në rritje.\nPërpjekja për të shkëmbyer dy kontejnerë është proporcionale me distancën midis tyre, e matur si dyfishi i ndryshimit të tyre pozicional.\nInput: Një varg i numrave të plotë që përfaqësojnë numrat e kontejnerëve të parenditur.\nOutput: Kthen një numër të plotë që përfaqëson përpjekjen totale të nevojshme për të renditur kontejnerët.\nShembull: Për inputin [3, 1, 4, 2], outputi është 8.",
      "hy": "Հաշվում է անշարունակ տարրերի ցուցակը դասավորելու համար պահանջվող ընդհանուր ջանքերը:\nԱյս սցենարում պատկերացրեք համարակալված տարաների շարք պահեստում: Յուրաքանչյուր տարա պետք է դասավորվի աճման կարգով:\nԵրկու տարաների փոխանակման ջանքը համեմատական է նրանց միջև եղած հեռավորությանը, որը չափվում է որպես նրանց դիրքային տարբերության կրկնապատիկ:\nՄուտք: Անկարգ տարաների համարները ներկայացնող ամբողջ թվերի զանգված:\nԵլք: Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է տարաների դասավորության համար պահանջվող ընդհանուր ջանքը:\nՕրինակ: Մուտքի համար [3, 1, 4, 2], ելքը 8 է:",
      "bn": "এলোমেলো উপাদানগুলির একটি তালিকা সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা গণনা করে।\nএই পরিস্থিতিতে, একটি গুদামে নম্বরযুক্ত কন্টেইনারগুলির একটি সিরিজ কল্পনা করুন। প্রতিটি কন্টেইনারকে ক্রমবর্ধমান ক্রমে সাজাতে হবে।\nদুটি কন্টেইনার অদলবদল করার প্রচেষ্টা তাদের মধ্যে দূরত্বের সমানুপাতিক, যা তাদের অবস্থানগত পার্থক্যের দ্বিগুণ হিসাবে পরিমাপ করা হয়।\nInput: একটি পূর্ণসংখ্যার অ্যারে যা অসম্ভব কন্টেইনার নম্বরগুলি উপস্থাপন করে।\nOutput: একটি পূর্ণসংখ্যা প্রদান করে যা কন্টেইনারগুলি সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা উপস্থাপন করে।\nExample: ইনপুট [3, 1, 4, 2] এর জন্য, আউটপুট 8।",
      "bg": "Изчислява общото усилие, необходимо за сортиране на списък от неупорядъчени елементи.  \nВ този сценарий, си представете серия от номерирани контейнери в склад. Всеки контейнер трябва да бъде подреден във възходящ ред.  \nУсилието за размяна на два контейнера е пропорционално на разстоянието между тях, измерено като двойно на тяхната позиционна разлика.  \nВход: Масив от цели числа, представляващи несортираните номера на контейнерите.  \nИзход: Връща цяло число, представляващо общото усилие, необходимо за сортиране на контейнерите.  \nПример: За вход [3, 1, 4, 2], изходът е 8.",
      "zh": "计算对一组无序元素进行排序所需的总努力。\n\n在这种情况下，想象一个仓库中的一系列编号容器。每个容器必须按升序排列。\n\n交换两个容器的努力与它们之间的距离成比例，距离被测量为它们位置差的两倍。\n\n输入：一个整数数组，表示未排序的容器编号。\n\n输出：返回一个整数，表示对容器进行排序所需的总努力。\n\n示例：对于输入 [3, 1, 4, 2]，输出是 8。",
      "fr": "Calcule l'effort total nécessaire pour trier une liste d'éléments désordonnés.  \nDans ce scénario, imaginez une série de conteneurs numérotés dans un entrepôt. Chaque conteneur doit être arrangé dans l'ordre croissant.  \nL'effort pour échanger deux conteneurs est proportionnel à la distance entre eux, mesurée comme le double de leur différence de position.  \nEntrée : Un tableau d'entiers représentant les numéros des conteneurs non triés.  \nSortie : Renvoie un entier représentant l'effort total nécessaire pour trier les conteneurs.  \nExemple : Pour l'entrée [3, 1, 4, 2], la sortie est 8.",
      "de": "Berechnet den gesamten Aufwand, der erforderlich ist, um eine Liste ungeordneter Elemente zu sortieren.\nIn diesem Szenario stellen Sie sich eine Reihe von nummerierten Containern in einem Lagerhaus vor. Jeder Container muss in aufsteigender Reihenfolge angeordnet werden.\nDer Aufwand, zwei Container zu vertauschen, ist proportional zur Entfernung zwischen ihnen, gemessen als das Doppelte ihrer Positionsdifferenz.\nEingabe: Ein Array von ganzen Zahlen, das die unsortierten Container-Nummern darstellt.\nAusgabe: Gibt eine ganze Zahl zurück, die den gesamten Aufwand darstellt, der erforderlich ist, um die Container zu sortieren.\nBeispiel: Für die Eingabe [3, 1, 4, 2] beträgt die Ausgabe 8.",
      "ha": "Lissafa jimillar ƙoƙari da ake buƙata don tsara jerin abubuwa marasa tsari.\nA wannan yanayi, yi tunanin jerin kwantena masu lamba a cikin sito. Dole ne a shirya kowanne kwantena a cikin tsari mai hawa.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Ya dawo da integer wanda ke wakiltar jimlar ƙoƙari da ake buƙata don tsara kwantenan.\nExample: Ga shigarwa [3, 1, 4, 2], fitarwa shine 8.",
      "hi": "अव्यवस्थित तत्वों की सूची को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास की गणना करता है।\nइस परिदृश्य में, एक गोदाम में क्रमांकित कंटेनरों की एक श्रृंखला की कल्पना करें। प्रत्येक कंटेनर को आरोही क्रम में व्यवस्थित किया जाना चाहिए।\nArgs:\n    Input: पूर्णांकों की एक सूची जो अव्यवस्थित कंटेनर संख्याओं का प्रतिनिधित्व करती है।\nReturns:\n    Output: एक पूर्णांक लौटाता है जो कंटेनरों को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास का प्रतिनिधित्व करता है।\nExamples:\n    Example: For input [3, 1, 4, 2], the output is 8.",
      "hu": "Kiszámítja a rendezetlen elemek listájának rendezéséhez szükséges teljes erőfeszítést.\nEbben a helyzetben képzeljünk el egy sorozatot számozott konténerekkel egy raktárban. Minden konténert növekvő sorrendbe kell rendezni.\nKét konténer felcserélésének erőfeszítése arányos a közöttük lévő távolsággal, amelyet a pozícióbeli különbségük kétszereseként mérünk.\nBemenet: Egész számokat tartalmazó tömb, amely a rendezetlen konténerszámokat képviseli.\nKimenet: Egy egész számot ad vissza, amely a konténerek rendezéséhez szükséges teljes erőfeszítést képviseli.\nPélda: A [3, 1, 4, 2] bemenetre a kimenet 8."
    },
    "docstring_bertscore": {
      "sq": "0.9628577077895242",
      "hy": "0.9702848949971807",
      "bn": "0.9722175686046501",
      "bg": "0.9954642752490683",
      "zh": "0.9525722293987756",
      "fr": "0.9796538928098343",
      "de": "0.9909795985060627",
      "ha": "0.9968141673185814",
      "hi": "0.9046266293941932",
      "hu": "0.9691693867772888"
    }
  },
  {
    "task_id": "PHP/20",
    "prompt": {
      "en": "<?php\n/**\n * Determines the ranking of a player at the time of their entry in a competition.\n * \n * In this competition, scores are announced one after another, updating the leaderboard each time.\n * This function calculates the rank of a specific player at the time they were added to the leaderboard.\n * \n * Input: \n * - $scores: An array of integers representing the scores of each player.\n * - $playerIndex: An integer representing the index of the player (1-based index).\n * \n * Output: \n * - Returns an integer, the rank of the player at the time of their entry.\n * \n * Example: \n * For scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "sq": "<?php\n/**\n * Përcakton renditjen e një lojtari në momentin e hyrjes së tij në një garë.\n * \n * Në këtë garë, pikët shpallen njëra pas tjetrës, duke përditësuar tabelën e renditjes çdo herë.\n * Kjo funksion llogarit renditjen e një lojtari specifik në momentin kur ai shtohet në tabelën e renditjes.\n * \n * Hyrja: \n * - $scores: Një varg i numrave të plotë që përfaqësojnë pikët e secilit lojtar.\n * - $playerIndex: Një numër i plotë që përfaqëson indeksin e lojtarit (indeksi që fillon nga 1).\n * \n * Dalja: \n * - Kthen një numër të plotë, renditjen e lojtarit në momentin e hyrjes së tij.\n * \n * Shembull: \n * Për pikët [95, 92, 93, 100, 102, 99] dhe playerIndex 3, funksioni duhet të kthejë 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hy": "<?php\n/**\n * Սահմանում է խաղացողի դասակարգումը մրցույթի մուտքի պահին:\n * \n * Այս մրցույթում միավորները հայտարարվում են մեկը մյուսի հետևից՝ ամեն անգամ թարմացնելով առաջատարների ցուցակը:\n * Այս ֆունկցիան հաշվարկում է կոնկրետ խաղացողի դասակարգումը այն պահին, երբ նրանք ավելացվում են առաջատարների ցուցակում:\n * \n * Մուտք: \n * - $scores: Թվերի զանգված, որը ներկայացնում է յուրաքանչյուր խաղացողի միավորները:\n * - $playerIndex: Թիվ, որը ներկայացնում է խաղացողի ինդեքսը (1-ից սկսվող ինդեքս):\n * \n * Ելք: \n * - Վերադարձնում է թիվ, խաղացողի դասակարգումը մուտքի պահին:\n * \n * Օրինակ: \n * Հաշվի առնելով միավորները [95, 92, 93, 100, 102, 99] և playerIndex 3, ֆունկցիան պետք է վերադարձնի 2:\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "bn": "<?php\n/**\n * প্রতিযোগিতায় একজন খেলোয়াড়ের প্রবেশের সময় তার র‌্যাঙ্ক নির্ধারণ করে।\n * \n * এই প্রতিযোগিতায়, স্কোরগুলি একের পর এক ঘোষণা করা হয়, প্রতিবার লিডারবোর্ড আপডেট হয়।\n * এই ফাংশনটি নির্দিষ্ট খেলোয়াড়ের র‌্যাঙ্ক গণনা করে যখন তারা লিডারবোর্ডে যোগ হয়েছিল।\n * \n * ইনপুট: \n * - $scores: প্রতিটি খেলোয়াড়ের স্কোরগুলির একটি পূর্ণসংখ্যার অ্যারে।\n * - $playerIndex: খেলোয়াড়ের সূচক (১-ভিত্তিক সূচক) নির্দেশ করে এমন একটি পূর্ণসংখ্যা।\n * \n * আউটপুট: \n * - একটি পূর্ণসংখ্যা রিটার্ন করে, খেলোয়াড়ের প্রবেশের সময় তার র‌্যাঙ্ক।\n * \n * উদাহরণ: \n * স্কোর [95, 92, 93, 100, 102, 99] এবং playerIndex 3 এর জন্য, ফাংশনটি 2 রিটার্ন করা উচিত।\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "bg": "<?php\n/**\n * Определя класирането на играч в момента на неговото влизане в състезанието.\n * \n * В това състезание резултатите се обявяват един след друг, като всеки път се актуализира класацията.\n * Тази функция изчислява ранга на конкретен играч в момента, в който е добавен към класацията.\n * \n * Вход: \n * - $scores: Масив от цели числа, представляващи резултатите на всеки играч.\n * - $playerIndex: Цяло число, представляващо индекса на играча (индекс, започващ от 1).\n * \n * Изход: \n * - Връща цяло число, ранга на играча в момента на неговото влизане.\n * \n * Пример: \n * За резултати [95, 92, 93, 100, 102, 99] и playerIndex 3, функцията трябва да върне 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "zh": "<?php\n/**\n * 确定玩家在比赛中进入时的排名。\n * \n * 在这场比赛中，分数一个接一个地公布，每次更新排行榜。\n * 此函数计算特定玩家在被添加到排行榜时的排名。\n * \n * 输入: \n * - $scores: 一个整数数组，表示每个玩家的分数。\n * - $playerIndex: 一个整数，表示玩家的索引（基于1的索引）。\n * \n * 输出: \n * - 返回一个整数，表示玩家进入时的排名。\n * \n * 示例: \n * 对于分数 [95, 92, 93, 100, 102, 99] 和 playerIndex 3，函数应返回 2。\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "fr": "<?php\n/**\n * Détermine le classement d'un joueur au moment de son entrée dans une compétition.\n * \n * Dans cette compétition, les scores sont annoncés un par un, mettant à jour le classement à chaque fois.\n * Cette fonction calcule le rang d'un joueur spécifique au moment où il a été ajouté au classement.\n * \n * Entrée : \n * - $scores : Un tableau d'entiers représentant les scores de chaque joueur.\n * - $playerIndex : Un entier représentant l'indice du joueur (indice basé sur 1).\n * \n * Sortie : \n * - Retourne un entier, le rang du joueur au moment de son entrée.\n * \n * Exemple : \n * Pour les scores [95, 92, 93, 100, 102, 99] et playerIndex 3, la fonction doit retourner 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "de": "<?php\n/**\n * Bestimmt die Platzierung eines Spielers zum Zeitpunkt seines Eintritts in einen Wettbewerb.\n * \n * In diesem Wettbewerb werden die Punktzahlen nacheinander bekannt gegeben, wobei jedes Mal die Rangliste aktualisiert wird.\n * Diese Funktion berechnet die Platzierung eines bestimmten Spielers zum Zeitpunkt, an dem er zur Rangliste hinzugefügt wurde.\n * \n * Eingabe: \n * - $scores: Ein Array von ganzen Zahlen, das die Punktzahlen jedes Spielers darstellt.\n * - $playerIndex: Eine ganze Zahl, die den Index des Spielers darstellt (1-basierter Index).\n * \n * Ausgabe: \n * - Gibt eine ganze Zahl zurück, die die Platzierung des Spielers zum Zeitpunkt seines Eintritts darstellt.\n * \n * Beispiel: \n * Für Punktzahlen [95, 92, 93, 100, 102, 99] und playerIndex 3 sollte die Funktion 2 zurückgeben.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "ha": "<?php\n/**\n * Yana tantance matsayi na ɗan wasa a lokacin shigarsa cikin gasa.\n * \n * A cikin wannan gasa, ana sanar da maki ɗaya bayan ɗaya, suna sabunta jerin shugabanni a kowane lokaci.\n * Wannan aikin yana ƙididdige matsayi na takamaiman ɗan wasa a lokacin da aka ƙara su cikin jerin shugabanni.\n * \n * Shigarwa:\n * - $scores: Jerin lambobi masu wakiltar maki na kowane ɗan wasa.\n * - $playerIndex: Lamba mai wakiltar index na ɗan wasa (index na farko).\n * \n * Fitarwa:\n * - Yana dawowa da lamba, matsayi na ɗan wasa a lokacin shigarsa.\n * \n * Misali:\n * Domin maki [95, 92, 93, 100, 102, 99] da playerIndex 3, aikin ya kamata ya dawo da 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hi": "<?php\n/**\n * एक खिलाड़ी की रैंकिंग का निर्धारण करता है जब वे प्रतियोगिता में प्रवेश करते हैं।\n * \n * इस प्रतियोगिता में, स्कोर एक के बाद एक घोषित किए जाते हैं, प्रत्येक बार लीडरबोर्ड को अपडेट करते हुए।\n * यह फ़ंक्शन एक विशेष खिलाड़ी की रैंक की गणना करता है जब उन्हें लीडरबोर्ड में जोड़ा गया था।\n * \n * इनपुट: \n * - $scores: प्रत्येक खिलाड़ी के स्कोर का प्रतिनिधित्व करने वाली पूर्णांकों की एक सरणी।\n * - $playerIndex: खिलाड़ी का सूचकांक (1-आधारित सूचकांक) का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * \n * आउटपुट: \n * - एक पूर्णांक लौटाता है, खिलाड़ी की रैंक जब वे प्रवेश करते हैं।\n * \n * उदाहरण: \n * स्कोर [95, 92, 93, 100, 102, 99] और playerIndex 3 के लिए, फ़ंक्शन को 2 लौटाना चाहिए।\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hu": "<?php\n/**\n * Meghatározza egy játékos rangsorát a versenybe való belépésük idején.\n * \n * Ebben a versenyben a pontszámokat egymás után jelentik be, minden alkalommal frissítve a ranglistát.\n * Ez a függvény kiszámítja egy adott játékos rangját a ranglistához való hozzáadásuk idején.\n * \n * Bemenet: \n * - $scores: Egész számokat tartalmazó tömb, amely az egyes játékosok pontszámait jelöli.\n * - $playerIndex: Egy egész szám, amely a játékos indexét jelöli (1-alapú index).\n * \n * Kimenet: \n * - Visszaad egy egész számot, a játékos rangját a belépésük idején.\n * \n * Példa: \n * A [95, 92, 93, 100, 102, 99] pontszámok és a 3-as playerIndex esetén a függvénynek 2-t kell visszaadnia.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) "
    },
    "prompt_bertscore": {
      "sq": "0.9777861713369633",
      "hy": "0.9467940716144707",
      "bn": "0.9665782534566887",
      "bg": "0.9618250284385238",
      "zh": "0.9346313374925614",
      "fr": "0.976179450184772",
      "de": "0.9607144859781578",
      "ha": "0.9645550043954673",
      "hi": "0.9730583710075709",
      "hu": "0.9813575455879706"
    },
    "canonical_solution": "{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}",
    "instruction": {
      "en": "Write a PHP function `function getPlayerRankingAtEntry($scores, $playerIndex)` to solve the following problem:\nDetermines the ranking of a player at the time of their entry in a competition.\n\nIn this competition, scores are announced one after another, updating the leaderboard each time.\nThis function calculates the rank of a specific player at the time they were added to the leaderboard.\n\nInput:\n- $scores: An array of integers representing the scores of each player.\n- $playerIndex: An integer representing the index of the player (1-based index).\n\nOutput:\n- Returns an integer, the rank of the player at the time of their entry.\n\nExample:\nFor scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.",
      "sq": "Shkruani një funksion PHP `function getPlayerRankingAtEntry($scores, $playerIndex)` për të zgjidhur problemin e mëposhtëm:\nPërcakton renditjen e një lojtari në momentin e hyrjes së tyre në një garë.\n\nNë këtë garë, pikët shpallen njëra pas tjetrës, duke përditësuar tabelën e renditjes çdo herë.\nKy funksion llogarit renditjen e një lojtari specifik në momentin kur ata shtohen në tabelën e renditjes.\n\nHyrja:\n- $scores: Një varg i numrave të plotë që përfaqësojnë pikët e secilit lojtar.\n- $playerIndex: Një numër i plotë që përfaqëson indeksin e lojtarit (indeksi i bazuar në 1).\n\nDalja:\n- Kthen një numër të plotë, renditjen e lojtarit në momentin e hyrjes së tyre.\n\nShembull:\nPër pikët [95, 92, 93, 100, 102, 99] dhe playerIndex 3, funksioni duhet të kthejë 2.",
      "hy": "Գրեք PHP ֆունկցիա `function getPlayerRankingAtEntry($scores, $playerIndex)` հետևյալ խնդիրը լուծելու համար:\nՍահմանում է խաղացողի վարկանիշը մրցույթին նրանց մուտքագրման պահին:\n\nԱյս մրցույթում միավորները հայտարարվում են մեկը մյուսի հետևից, յուրաքանչյուր անգամ թարմացնելով առաջատարների ցուցակը:\nԱյս ֆունկցիան հաշվարկում է որոշակի խաղացողի վարկանիշը այն պահին, երբ նրանք ավելացվել են առաջատարների ցուցակում:\n\nՄուտք:\n- $scores: Ամբողջ թվերի զանգված, որը ներկայացնում է յուրաքանչյուր խաղացողի միավորները:\n- $playerIndex: Ամբողջ թիվ, որը ներկայացնում է խաղացողի ինդեքսը (1-բազային ինդեքս):\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, խաղացողի վարկանիշը նրանց մուտքագրման պահին:\n\nՕրինակ:\nԵթե միավորները [95, 92, 93, 100, 102, 99] են և playerIndex 3 է, ֆունկցիան պետք է վերադարձնի 2:",
      "bn": "একটি PHP ফাংশন `function getPlayerRankingAtEntry($scores, $playerIndex)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রতিযোগিতায় একজন খেলোয়াড়ের প্রবেশের সময় তার র‌্যাঙ্ক নির্ধারণ করে।\n\nএই প্রতিযোগিতায়, স্কোরগুলি একের পর এক ঘোষণা করা হয়, প্রতিবার লিডারবোর্ড আপডেট করে।\nএই ফাংশনটি নির্দিষ্ট একজন খেলোয়াড়ের র‌্যাঙ্ক গণনা করে যখন তাকে লিডারবোর্ডে যোগ করা হয়।\n\nইনপুট:\n- $scores: একটি পূর্ণসংখ্যার অ্যারে যা প্রতিটি খেলোয়াড়ের স্কোর উপস্থাপন করে।\n- $playerIndex: একটি পূর্ণসংখ্যা যা খেলোয়াড়ের সূচক উপস্থাপন করে (১-ভিত্তিক সূচক)।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা রিটার্ন করে, খেলোয়াড়ের প্রবেশের সময় তার র‌্যাঙ্ক।\n\nউদাহরণ:\nস্কোর [95, 92, 93, 100, 102, 99] এবং playerIndex 3 এর জন্য, ফাংশনটি 2 রিটার্ন করা উচিত।",
      "bg": "Напишете PHP функция `function getPlayerRankingAtEntry($scores, $playerIndex)`, за да решите следния проблем:\nОпределя класирането на играч към момента на неговото влизане в състезанието.\n\nВ това състезание резултатите се обявяват един след друг, като всеки път се актуализира класацията.\nТази функция изчислява ранга на конкретен играч към момента, в който е добавен към класацията.\n\nВход:\n- $scores: Масив от цели числа, представляващи резултатите на всеки играч.\n- $playerIndex: Цяло число, представляващо индекса на играча (индекс, базиран на 1).\n\nИзход:\n- Връща цяло число, ранга на играча към момента на неговото влизане.\n\nПример:\nЗа резултати [95, 92, 93, 100, 102, 99] и playerIndex 3, функцията трябва да върне 2.",
      "zh": "编写一个 PHP 函数 `function getPlayerRankingAtEntry($scores, $playerIndex)` 来解决以下问题：\n确定玩家在比赛中进入时的排名。\n\n在这场比赛中，分数一个接一个地宣布，每次都会更新排行榜。\n此函数计算特定玩家在他们被添加到排行榜时的排名。\n\n输入：\n- $scores: 一个整数数组，表示每个玩家的分数。\n- $playerIndex: 一个整数，表示玩家的索引（基于1的索引）。\n\n输出：\n- 返回一个整数，表示玩家在进入时的排名。\n\n示例：\n对于分数 [95, 92, 93, 100, 102, 99] 和 playerIndex 3，函数应返回 2。",
      "fr": "Écrire une fonction PHP `function getPlayerRankingAtEntry($scores, $playerIndex)` pour résoudre le problème suivant :\nDétermine le classement d'un joueur au moment de son entrée dans une compétition.\n\nDans cette compétition, les scores sont annoncés les uns après les autres, mettant à jour le classement à chaque fois.\nCette fonction calcule le rang d'un joueur spécifique au moment où il a été ajouté au classement.\n\nEntrée :\n- $scores : Un tableau d'entiers représentant les scores de chaque joueur.\n- $playerIndex : Un entier représentant l'indice du joueur (indice basé sur 1).\n\nSortie :\n- Retourne un entier, le rang du joueur au moment de son entrée.\n\nExemple :\nPour les scores [95, 92, 93, 100, 102, 99] et playerIndex 3, la fonction doit retourner 2.",
      "de": "Schreiben Sie eine PHP-Funktion `function getPlayerRankingAtEntry($scores, $playerIndex)`, um das folgende Problem zu lösen:\nBestimmt die Platzierung eines Spielers zum Zeitpunkt seines Eintritts in einen Wettbewerb.\n\nIn diesem Wettbewerb werden die Punktzahlen nacheinander bekannt gegeben und aktualisieren jedes Mal die Rangliste.\nDiese Funktion berechnet den Rang eines bestimmten Spielers zu dem Zeitpunkt, an dem er zur Rangliste hinzugefügt wurde.\n\nEingabe:\n- $scores: Ein Array von ganzen Zahlen, das die Punktzahlen jedes Spielers darstellt.\n- $playerIndex: Eine ganze Zahl, die den Index des Spielers darstellt (1-basierter Index).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, den Rang des Spielers zum Zeitpunkt seines Eintritts.\n\nBeispiel:\nFür die Punktzahlen [95, 92, 93, 100, 102, 99] und playerIndex 3 sollte die Funktion 2 zurückgeben.",
      "ha": "Rubuta aikin PHP `function getPlayerRankingAtEntry($scores, $playerIndex)` don warware matsalar mai zuwa:\nYana tantance matsayin dan wasa a lokacin shigarsa cikin gasa.\n\nA cikin wannan gasa, ana sanar da maki daya bayan daya, suna sabunta jerin shugabanni a kowane lokaci.\nWannan aikin yana lissafin matsayin wani dan wasa a lokacin da aka kara su cikin jerin shugabanni.\n\nShigarwa:\n- $scores: Jeri na lambobi masu nuna maki na kowane dan wasa.\n- $playerIndex: Lamba mai nuna alamar dan wasa (1-based index).\n\nFitarwa:\n- Yana mayar da lamba, matsayin dan wasan a lokacin shigarsa.\n\nMisali:\nDon maki [95, 92, 93, 100, 102, 99] da playerIndex 3, aikin ya kamata ya mayar da 2.",
      "hi": "PHP फ़ंक्शन `function getPlayerRankingAtEntry($scores, $playerIndex)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nप्रतियोगिता में खिलाड़ी के प्रवेश के समय उनकी रैंकिंग निर्धारित करता है।\n\nइस प्रतियोगिता में, स्कोर एक के बाद एक घोषित किए जाते हैं, जिससे हर बार लीडरबोर्ड अपडेट होता है।\nयह फ़ंक्शन एक विशिष्ट खिलाड़ी की रैंक की गणना करता है जब उन्हें लीडरबोर्ड में जोड़ा गया था।\n\nइनपुट:\n- $scores: प्रत्येक खिलाड़ी के स्कोर को दर्शाने वाली पूर्णांकों की एक array।\n- $playerIndex: खिलाड़ी का इंडेक्स दर्शाने वाला पूर्णांक (1-आधारित इंडेक्स)।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है, खिलाड़ी की रैंक उनके प्रवेश के समय।\n\nउदाहरण:\nस्कोर [95, 92, 93, 100, 102, 99] और playerIndex 3 के लिए, फ़ंक्शन को 2 लौटाना चाहिए।",
      "hu": "Írj egy PHP függvényt `function getPlayerRankingAtEntry($scores, $playerIndex)` a következő probléma megoldására:\nMeghatározza egy játékos rangsorát a versenybe való belépésük időpontjában.\n\nEbben a versenyben a pontszámokat egymás után jelentik be, minden alkalommal frissítve a ranglistát.\nEz a függvény kiszámítja egy adott játékos rangját abban az időpontban, amikor hozzáadták a ranglistához.\n\nBemenet:\n- $scores: Egész számokat tartalmazó tömb, amely az egyes játékosok pontszámait reprezentálja.\n- $playerIndex: Egész szám, amely a játékos indexét jelöli (1-alapú index).\n\nKimenet:\n- Visszaad egy egész számot, a játékos rangját a belépésük időpontjában.\n\nPélda:\nA [95, 92, 93, 100, 102, 99] pontszámok és a 3-as playerIndex esetén a függvénynek 2-t kell visszaadnia."
    },
    "instruction_bertscore": {
      "sq": "0.9889772056348499",
      "hy": "0.9671163431589122",
      "bn": "0.970041374150032",
      "bg": "0.966585404150406",
      "zh": "0.9517252694540429",
      "fr": "0.9733171863940593",
      "de": "0.9741699066198422",
      "ha": "0.9476944631317019",
      "hi": "0.9775086846946576",
      "hu": "0.9775033216743696"
    },
    "level": "easy",
    "test": "function main(){\n    assert(getPlayerRankingAtEntry([95, 92, 93, 100, 102, 99], 3) === 2);\n    assert(getPlayerRankingAtEntry([90, 85, 95, 88, 92], 5) === 2);\n    assert(getPlayerRankingAtEntry([100, 105, 95, 110, 90], 1) === 1);\n    assert(getPlayerRankingAtEntry([70, 80, 60, 90, 85], 4) === 1);\n    assert(getPlayerRankingAtEntry([95, 95, 95, 95, 95], 3) === 3);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "getPlayerRankingAtEntry",
    "signature": "function getPlayerRankingAtEntry($scores, $playerIndex)",
    "docstring": {
      "en": "Determines the ranking of a player at the time of their entry in a competition.\n\nIn this competition, scores are announced one after another, updating the leaderboard each time.\nThis function calculates the rank of a specific player at the time they were added to the leaderboard.\n\nInput:\n- $scores: An array of integers representing the scores of each player.\n- $playerIndex: An integer representing the index of the player (1-based index).\n\nOutput:\n- Returns an integer, the rank of the player at the time of their entry.\n\nExample:\nFor scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.",
      "sq": "Përcakton renditjen e një lojtari në momentin e hyrjes së tyre në një garë.\n\nNë këtë garë, pikët shpallen njëra pas tjetrës, duke përditësuar tabelën e renditjes çdo herë.\nKjo funksion llogarit renditjen e një lojtari specifik në momentin kur ata u shtuan në tabelën e renditjes.\n\nInput:\n- $scores: Një varg me numra të plotë që përfaqësojnë pikët e secilit lojtar.\n- $playerIndex: Një numër i plotë që përfaqëson indeksin e lojtarit (indeksi i bazuar në 1).\n\nOutput:\n- Kthen një numër të plotë, renditjen e lojtarit në momentin e hyrjes së tyre.\n\nShembull:\nPër pikët [95, 92, 93, 100, 102, 99] dhe playerIndex 3, funksioni duhet të kthejë 2.",
      "hy": "Որոշում է խաղացողի դասակարգումը մրցույթի մուտքի պահին:\n\nԱյս մրցույթում միավորները հայտարարվում են մեկը մյուսի հետևից՝ ամեն անգամ թարմացնելով առաջատարների ցուցակը:\nԱյս ֆունկցիան հաշվարկում է կոնկրետ խաղացողի դասակարգումը այն պահին, երբ նրանք ավելացվել են առաջատարների ցուցակում:\n\nՄուտք:\n- $scores: Թվերի զանգված, որը ներկայացնում է յուրաքանչյուր խաղացողի միավորները:\n- $playerIndex: Թիվ, որը ներկայացնում է խաղացողի ինդեքսը (1-ից սկսվող ինդեքս):\n\nԵլք:\n- Վերադարձնում է թիվ, խաղացողի դասակարգումը մուտքի պահին:\n\nՕրինակ:\nԵթե միավորները [95, 92, 93, 100, 102, 99] են և playerIndex-ը 3 է, ֆունկցիան պետք է վերադարձնի 2:",
      "bn": "একটি প্রতিযোগিতায় প্রবেশের সময় একজন খেলোয়াড়ের র‌্যাঙ্ক নির্ধারণ করে।\n\nএই প্রতিযোগিতায়, স্কোরগুলি একের পর এক ঘোষণা করা হয়, প্রতিবার লিডারবোর্ড আপডেট করে।\nএই ফাংশনটি নির্দিষ্ট খেলোয়াড়ের র‌্যাঙ্ক গণনা করে যখন তারা লিডারবোর্ডে যোগ করা হয়েছিল।\n\nইনপুট:\n- $scores: একটি পূর্ণসংখ্যার অ্যারে যা প্রতিটি খেলোয়াড়ের স্কোর উপস্থাপন করে।\n- $playerIndex: একটি পূর্ণসংখ্যা যা খেলোয়াড়ের সূচক উপস্থাপন করে (১-ভিত্তিক সূচক)।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা প্রদান করে, খেলোয়াড়ের প্রবেশের সময় তাদের র‌্যাঙ্ক।\n\nউদাহরণ:\nস্কোর [95, 92, 93, 100, 102, 99] এবং playerIndex 3 এর জন্য, ফাংশনটি 2 প্রদান করা উচিত।",
      "bg": "Определя класирането на играч в момента на неговото влизане в състезанието.\n\nВ това състезание резултатите се обявяват един след друг, като всеки път се актуализира класацията.\nТази функция изчислява ранга на конкретен играч в момента, когато той е добавен към класацията.\n\nВход:\n- $scores: Масив от цели числа, представляващи резултатите на всеки играч.\n- $playerIndex: Цяло число, представляващо индекса на играча (индекс, започващ от 1).\n\nИзход:\n- Връща цяло число, ранга на играча в момента на неговото влизане.\n\nПример:\nЗа резултати [95, 92, 93, 100, 102, 99] и playerIndex 3, функцията трябва да върне 2.",
      "zh": "确定玩家在比赛中进入时的排名。\n\n在这场比赛中，分数一个接一个地公布，每次更新排行榜。\n此函数计算特定玩家在他们被添加到排行榜时的排名。\n\n输入：\n- $scores: 一个整数数组，表示每个玩家的分数。\n- $playerIndex: 一个整数，表示玩家的索引（从1开始的索引）。\n\n输出：\n- 返回一个整数，表示玩家进入时的排名。\n\n示例：\n对于分数 [95, 92, 93, 100, 102, 99] 和 playerIndex 3，函数应返回 2。",
      "fr": "Détermine le classement d'un joueur au moment de son entrée dans une compétition.\n\nDans cette compétition, les scores sont annoncés un par un, mettant à jour le tableau de classement à chaque fois. Cette fonction calcule le rang d'un joueur spécifique au moment où il a été ajouté au tableau de classement.\n\nEntrée :\n- $scores : Un tableau d'entiers représentant les scores de chaque joueur.\n- $playerIndex : Un entier représentant l'indice du joueur (indice basé sur 1).\n\nSortie :\n- Retourne un entier, le rang du joueur au moment de son entrée.\n\nExemple :\nPour scores [95, 92, 93, 100, 102, 99] et playerIndex 3, la fonction doit retourner 2.",
      "de": "Bestimmt das Ranking eines Spielers zum Zeitpunkt seines Eintritts in einen Wettbewerb.\n\nIn diesem Wettbewerb werden die Punktzahlen nacheinander bekannt gegeben und aktualisieren jedes Mal die Bestenliste.\nDiese Funktion berechnet den Rang eines bestimmten Spielers zu dem Zeitpunkt, an dem er zur Bestenliste hinzugefügt wurde.\n\nEingabe:\n- $scores: Ein Array von ganzen Zahlen, das die Punktzahlen jedes Spielers darstellt.\n- $playerIndex: Eine ganze Zahl, die den Index des Spielers darstellt (1-basierter Index).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, den Rang des Spielers zum Zeitpunkt seines Eintritts.\n\nBeispiel:\nFür scores [95, 92, 93, 100, 102, 99] und playerIndex 3 sollte die Funktion 2 zurückgeben.",
      "ha": "Yana tantance matsayi na ɗan wasa a lokacin shigar su cikin gasa.\n\nA cikin wannan gasa, ana sanar da maki ɗaya bayan ɗaya, suna sabunta jerin shugabanni a kowane lokaci.\nWannan aikin yana ƙididdige matsayi na takamaiman ɗan wasa a lokacin da aka ƙara su cikin jerin shugabanni.\n\nShigarwa:\n- $scores: Wani tsararren adadi na lambobi masu wakiltar maki na kowane ɗan wasa.\n- $playerIndex: Wani lamba mai wakiltar ma'aunin ɗan wasa (ma'auni na 1).\n\nFitarwa:\n- Yana mayar da lamba, matsayi na ɗan wasa a lokacin shigar su.\n\nMisali:\nGa scores [95, 92, 93, 100, 102, 99] da playerIndex 3, aikin ya kamata ya mayar da 2.",
      "hi": "खिलाड़ी की रैंकिंग को निर्धारित करता है जब वह प्रतियोगिता में प्रवेश करता है।\n\nइस प्रतियोगिता में, स्कोर एक के बाद एक घोषित किए जाते हैं, जिससे हर बार लीडरबोर्ड अपडेट होता है। यह फ़ंक्शन एक विशिष्ट खिलाड़ी की रैंक की गणना करता है जब उसे लीडरबोर्ड में जोड़ा गया था।\n\nइनपुट:\n- $scores: प्रत्येक खिलाड़ी के स्कोर को दर्शाने वाले पूर्णांकों की एक श्रृंखला।\n- $playerIndex: खिलाड़ी का सूचकांक (1-आधारित सूचकांक) दर्शाने वाला एक पूर्णांक।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है, खिलाड़ी की रैंक जब वह प्रवेश करता है।\n\nउदाहरण:\nस्कोर [95, 92, 93, 100, 102, 99] और playerIndex 3 के लिए, फ़ंक्शन को 2 लौटाना चाहिए।",
      "hu": "Meghatározza egy játékos rangsorát a versenybe való belépésük időpontjában.\n\nEbben a versenyben a pontszámokat egymás után jelentik be, és minden alkalommal frissítik a ranglistát.\nEz a függvény kiszámítja egy adott játékos rangját a ranglistára való felvételük időpontjában.\n\nBemenet:\n- $scores: Egész számokat tartalmazó tömb, amely az egyes játékosok pontszámait reprezentálja.\n- $playerIndex: Egész szám, amely a játékos indexét jelöli (1-alapú index).\n\nKimenet:\n- Egy egész számot ad vissza, amely a játékos rangját jelöli a belépésük időpontjában.\n\nPélda:\nA [95, 92, 93, 100, 102, 99] pontszámok és a 3-as playerIndex esetén a függvénynek 2-t kell visszaadnia."
    },
    "docstring_bertscore": {
      "sq": "0.9715459992863712",
      "hy": "0.9351171874045727",
      "bn": "0.9401604127790486",
      "bg": "0.9550495475110428",
      "zh": "0.9479953881589697",
      "fr": "0.9816956144964919",
      "de": "0.9867994221371834",
      "ha": "0.9434626428637536",
      "hi": "0.965076806406446",
      "hu": "0.9623092893074868"
    }
  },
  {
    "task_id": "PHP/21",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Determines if two months in a given year are \"related\".\n * Two months are considered related if the first day of each month falls on the same day of the week.\n * This condition is true if the difference in days between the first day of these months is divisible by 7.\n * Leap years are taken into account, as February has 29 days in a leap year.\n *\n * Input: \n * - $year: An integer representing the year.\n * - $month1: An integer representing the first month.\n * - $month2: An integer representing the second month.\n *\n * Output: \n * - Returns 'YES' if the months are related; 'NO' otherwise.\n *\n * Examples:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "sq": "<?php\n\n\n/**\n * Përcakton nëse dy muaj në një vit të caktuar janë \"të lidhur\".\n * Dy muaj konsiderohen të lidhur nëse dita e parë e secilit muaj bie në të njëjtën ditë të javës.\n * Ky kusht është i vërtetë nëse diferenca në ditë midis ditës së parë të këtyre muajve është e pjesëtueshme me 7.\n * Vitet e brishtë merren parasysh, pasi Shkurti ka 29 ditë në një vit të brishtë.\n *\n * Hyrja: \n * - $year: Një numër i plotë që përfaqëson vitin.\n * - $month1: Një numër i plotë që përfaqëson muajin e parë.\n * - $month2: Një numër i plotë që përfaqëson muajin e dytë.\n *\n * Dalja: \n * - Kthen 'YES' nëse muajt janë të lidhur; 'NO' përndryshe.\n *\n * Shembuj:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hy": "<?php\n\n\n/**\n * Սահմանում է՝ արդյոք տրված տարվա երկու ամիսները «կապակցվա՞ծ» են:\n * Երկու ամիսները համարվում են կապակցված, եթե յուրաքանչյուր ամսվա առաջին օրը շաբաթվա նույն օրն է:\n * Այս պայմանը ճիշտ է, եթե այս ամիսների առաջին օրվա միջև օրերի տարբերությունը բաժանվում է 7-ի:\n * Նահանջ տարիները հաշվի են առնվում, քանի որ փետրվարը նահանջ տարում ունի 29 օր:\n *\n * Մուտքագրված տվյալներ: \n * - $year: Տարին ներկայացնող ամբողջ թիվ:\n * - $month1: Առաջին ամիսը ներկայացնող ամբողջ թիվ:\n * - $month2: Երկրորդ ամիսը ներկայացնող ամբողջ թիվ:\n *\n * Ելքագրված տվյալներ: \n * - Վերադարձնում է 'YES', եթե ամիսները կապակցված են; 'NO'՝ հակառակ դեպքում:\n *\n * Օրինակներ:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "bn": "<?php\n\n\n/**\n * একটি প্রদত্ত বছরের দুটি মাস \"সম্পর্কিত\" কিনা তা নির্ধারণ করে।\n * দুটি মাসকে সম্পর্কিত বিবেচনা করা হয় যদি প্রতিটি মাসের প্রথম দিনটি সপ্তাহের একই দিনে পড়ে।\n * এই শর্তটি সত্য হয় যদি এই মাসগুলির প্রথম দিনের মধ্যে দিনের পার্থক্য 7 দ্বারা বিভাজ্য হয়।\n * অধিবর্ষ বিবেচনায় নেওয়া হয়, কারণ অধিবর্ষে ফেব্রুয়ারি মাসে 29 দিন থাকে।\n *\n * ইনপুট: \n * - $year: বছরকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n * - $month1: প্রথম মাসকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n * - $month2: দ্বিতীয় মাসকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n *\n * আউটপুট: \n * - মাসগুলি সম্পর্কিত হলে 'YES' ফেরত দেয়; অন্যথায় 'NO'।\n *\n * উদাহরণ:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "bg": "<?php\n\n\n/**\n * Определя дали два месеца в дадена година са \"свързани\".\n * Два месеца се считат за свързани, ако първият ден от всеки месец се пада на същия ден от седмицата.\n * Това условие е изпълнено, ако разликата в дните между първия ден на тези месеци е делима на 7.\n * Високосните години се вземат под внимание, тъй като февруари има 29 дни във високосна година.\n *\n * Вход: \n * - $year: Цяло число, представляващо годината.\n * - $month1: Цяло число, представляващо първия месец.\n * - $month2: Цяло число, представляващо втория месец.\n *\n * Изход: \n * - Връща 'YES', ако месеците са свързани; 'NO' в противен случай.\n *\n * Примери:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "zh": "<?php\n\n\n/**\n * 确定给定年份中的两个月是否“相关”。\n * 如果每个月的第一天是同一星期几，则认为这两个月是相关的。\n * 如果这几个月的第一天之间的天数差可以被7整除，则此条件为真。\n * 闰年会被考虑在内，因为在闰年二月有29天。\n *\n * 输入: \n * - $year: 表示年份的整数。\n * - $month1: 表示第一个月份的整数。\n * - $month2: 表示第二个月份的整数。\n *\n * 输出: \n * - 如果月份相关则返回 'YES'；否则返回 'NO'。\n *\n * 示例:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "fr": "<?php\n\n\n/**\n * Détermine si deux mois d'une année donnée sont \"liés\".\n * Deux mois sont considérés comme liés si le premier jour de chaque mois tombe le même jour de la semaine.\n * Cette condition est vraie si la différence en jours entre le premier jour de ces mois est divisible par 7.\n * Les années bissextiles sont prises en compte, car février a 29 jours dans une année bissextile.\n *\n * Entrée : \n * - $year : Un entier représentant l'année.\n * - $month1 : Un entier représentant le premier mois.\n * - $month2 : Un entier représentant le deuxième mois.\n *\n * Sortie : \n * - Retourne 'YES' si les mois sont liés ; 'NO' sinon.\n *\n * Exemples :\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "de": "<?php\n\n\n/**\n * Bestimmt, ob zwei Monate in einem gegebenen Jahr \"verwandt\" sind.\n * Zwei Monate gelten als verwandt, wenn der erste Tag jedes Monats auf denselben Wochentag fällt.\n * Diese Bedingung ist erfüllt, wenn der Unterschied in Tagen zwischen dem ersten Tag dieser Monate durch 7 teilbar ist.\n * Schaltjahre werden berücksichtigt, da der Februar in einem Schaltjahr 29 Tage hat.\n *\n * Eingabe: \n * - $year: Eine ganze Zahl, die das Jahr darstellt.\n * - $month1: Eine ganze Zahl, die den ersten Monat darstellt.\n * - $month2: Eine ganze Zahl, die den zweiten Monat darstellt.\n *\n * Ausgabe: \n * - Gibt 'YES' zurück, wenn die Monate verwandt sind; 'NO' andernfalls.\n *\n * Beispiele:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "ha": "<?php\n\n\n/**\n * Yana tantancewa idan watanni biyu a cikin shekara daya suna da \"dangantaka\".\n * Ana daukar watanni biyu suna da dangantaka idan ranar farko ta kowane wata ta fado a rana daya na mako.\n * Wannan yanayin gaskiya ne idan bambancin kwanaki tsakanin ranar farko ta wadannan watanni ya kasu da 7.\n * Ana la'akari da shekarun tsalle, domin watan Fabrairu yana da kwanaki 29 a shekarar tsalle.\n *\n * Shigarwa: \n * - $year: Lamba mai nuna shekarar.\n * - $month1: Lamba mai nuna wata na farko.\n * - $month2: Lamba mai nuna wata na biyu.\n *\n * Fitarwa: \n * - Yana dawowa 'YES' idan watannin suna da dangantaka; 'NO' in ba haka ba.\n *\n * Misalai:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hi": "<?php\n\n\n/**\n * निर्धारित करता है कि दिए गए वर्ष में दो महीने \"संबंधित\" हैं या नहीं।\n * दो महीने संबंधित माने जाते हैं यदि प्रत्येक महीने का पहला दिन सप्ताह के उसी दिन पर पड़ता है।\n * यह शर्त सही है यदि इन महीनों के पहले दिन के बीच का दिन अंतर 7 से विभाज्य है।\n * लीप वर्षों को ध्यान में रखा जाता है, क्योंकि लीप वर्ष में फरवरी में 29 दिन होते हैं।\n *\n * इनपुट: \n * - $year: वर्ष का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * - $month1: पहले महीने का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * - $month2: दूसरे महीने का प्रतिनिधित्व करने वाला एक पूर्णांक।\n *\n * आउटपुट: \n * - 'YES' लौटाता है यदि महीने संबंधित हैं; अन्यथा 'NO'।\n *\n * उदाहरण:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hu": "<?php\n\n\n/**\n * Meghatározza, hogy két hónap egy adott évben \"kapcsolódik\"-e egymáshoz.\n * Két hónap akkor tekinthető kapcsolódónak, ha mindkét hónap első napja ugyanarra a hét napjára esik.\n * Ez a feltétel igaz, ha a hónapok első napjai közötti napok különbsége osztható 7-tel.\n * A szökőéveket figyelembe vesszük, mivel februárnak 29 napja van szökőévben.\n *\n * Bemenet: \n * - $year: Egy egész szám, amely az évet jelöli.\n * - $month1: Egy egész szám, amely az első hónapot jelöli.\n * - $month2: Egy egész szám, amely a második hónapot jelöli.\n *\n * Kimenet: \n * - 'YES'-t ad vissza, ha a hónapok kapcsolódnak; különben 'NO'-t.\n *\n * Példák:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string "
    },
    "prompt_bertscore": {
      "sq": "1",
      "hy": "0.9889923015438086",
      "bn": "0.9917713392048677",
      "bg": "0.9908580367128693",
      "zh": "0.9845344399022425",
      "fr": "0.998724594323375",
      "de": "0.9799379342547142",
      "ha": "0.995809892112069",
      "hi": "0.9877802589587337",
      "hu": "0.9748116813809659"
    },
    "canonical_solution": "{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}",
    "instruction": {
      "en": "Write a PHP function `function areRelatedMonths($year, $month1, $month2): string` to solve the following problem:\nDetermines if two months in a given year are \"related\".\nTwo months are considered related if the first day of each month falls on the same day of the week.\nThis condition is true if the difference in days between the first day of these months is divisible by 7.\nLeap years are taken into account, as February has 29 days in a leap year.\n\nInput:\n- $year: An integer representing the year.\n- $month1: An integer representing the first month.\n- $month2: An integer representing the second month.\n\nOutput:\n- Returns 'YES' if the months are related; 'NO' otherwise.\n\nExamples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "sq": "Shkruani një funksion PHP `function areRelatedMonths($year, $month1, $month2): string` për të zgjidhur problemin e mëposhtëm:\nPërcakton nëse dy muaj në një vit të caktuar janë \"të lidhur\".\nDy muaj konsiderohen të lidhur nëse dita e parë e secilit muaj bie në të njëjtën ditë të javës.\nKjo kusht është e vërtetë nëse diferenca në ditë midis ditës së parë të këtyre muajve është e pjesëtueshme me 7.\nVitet e brishtë merren parasysh, pasi Shkurti ka 29 ditë në një vit të brishtë.\n\nHyrja:\n- $year: Një numër i plotë që përfaqëson vitin.\n- $month1: Një numër i plotë që përfaqëson muajin e parë.\n- $month2: Një numër i plotë që përfaqëson muajin e dytë.\n\nDalja:\n- Kthen 'YES' nëse muajt janë të lidhur; 'NO' përndryshe.\n\nShembuj:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hy": "Գրեք PHP ֆունկցիա `function areRelatedMonths($year, $month1, $month2): string` հետևյալ խնդիրը լուծելու համար:\nՍահմանում է՝ արդյոք տրված տարվա երկու ամիսները \"կապված\" են:\nԵրկու ամիսները համարվում են կապված, եթե յուրաքանչյուր ամսվա առաջին օրը շաբաթվա նույն օրն է:\nԱյս պայմանը ճիշտ է, եթե այս ամիսների առաջին օրերի միջև օրերի տարբերությունը բաժանվում է 7-ի:\nՆահանջ տարիները հաշվի են առնվում, քանի որ փետրվարը նահանջ տարում ունի 29 օր:\n\nՄուտք:\n- $year: Ամբողջ թիվ, որը ներկայացնում է տարին:\n- $month1: Ամբողջ թիվ, որը ներկայացնում է առաջին ամիսը:\n- $month2: Ամբողջ թիվ, որը ներկայացնում է երկրորդ ամիսը:\n\nԵլք:\n- Վերադարձնում է 'YES', եթե ամիսները կապված են; 'NO' հակառակ դեպքում:\n\nՕրինակներ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bn": "PHP ফাংশন `function areRelatedMonths($year, $month1, $month2): string` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nনির্ধারণ করে একটি প্রদত্ত বছরের দুটি মাস \"সম্পর্কিত\" কিনা।\nদুটি মাসকে সম্পর্কিত বিবেচনা করা হয় যদি প্রতিটি মাসের প্রথম দিনটি সপ্তাহের একই দিনে পড়ে।\nএই শর্তটি সত্য হয় যদি এই মাসগুলির প্রথম দিনের মধ্যে দিনের পার্থক্য ৭ দ্বারা বিভাজ্য হয়।\nঅধিবর্ষ বিবেচনা করা হয়, কারণ অধিবর্ষে ফেব্রুয়ারি মাসে ২৯ দিন থাকে।\n\nইনপুট:\n- $year: একটি পূর্ণসংখ্যা যা বছরকে উপস্থাপন করে।\n- $month1: একটি পূর্ণসংখ্যা যা প্রথম মাসকে উপস্থাপন করে।\n- $month2: একটি পূর্ণসংখ্যা যা দ্বিতীয় মাসকে উপস্থাপন করে।\n\nআউটপুট:\n- মাসগুলি সম্পর্কিত হলে 'YES' ফেরত দেয়; অন্যথায় 'NO'।\n\nউদাহরণ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bg": "Напишете PHP функция `function areRelatedMonths($year, $month1, $month2): string`, за да решите следния проблем:\nОпределя дали два месеца в дадена година са \"свързани\".\nДва месеца се считат за свързани, ако първият ден на всеки месец се пада в същия ден от седмицата.\nТова условие е изпълнено, ако разликата в дните между първия ден на тези месеци е делима на 7.\nВисокосните години се вземат предвид, тъй като февруари има 29 дни във високосна година.\n\nВход:\n- $year: Цяло число, представляващо годината.\n- $month1: Цяло число, представляващо първия месец.\n- $month2: Цяло число, представляващо втория месец.\n\nИзход:\n- Връща 'YES', ако месеците са свързани; 'NO' в противен случай.\n\nПримери:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "zh": "编写一个 PHP 函数 `function areRelatedMonths($year, $month1, $month2): string` 来解决以下问题：\n确定给定年份中的两个月是否“相关”。\n如果每个月的第一天落在同一星期几，则认为这两个月是相关的。\n如果这些月份的第一天之间的天数差可以被 7 整除，则此条件为真。\n考虑闰年，因为闰年二月有 29 天。\n\n输入：\n- $year: 表示年份的整数。\n- $month1: 表示第一个月份的整数。\n- $month2: 表示第二个月份的整数。\n\n输出：\n- 如果月份相关，则返回 'YES'；否则返回 'NO'。\n\n示例：\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "fr": "Écrire une fonction PHP `function areRelatedMonths($year, $month1, $month2): string` pour résoudre le problème suivant :\nDétermine si deux mois d'une année donnée sont \"liés\".\nDeux mois sont considérés comme liés si le premier jour de chaque mois tombe le même jour de la semaine.\nCette condition est vraie si la différence en jours entre le premier jour de ces mois est divisible par 7.\nLes années bissextiles sont prises en compte, car février a 29 jours dans une année bissextile.\n\nEntrée :\n- $year : Un entier représentant l'année.\n- $month1 : Un entier représentant le premier mois.\n- $month2 : Un entier représentant le deuxième mois.\n\nSortie :\n- Retourne 'YES' si les mois sont liés ; 'NO' sinon.\n\nExemples :\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "de": "Schreiben Sie eine PHP-Funktion `function areRelatedMonths($year, $month1, $month2): string`, um das folgende Problem zu lösen:\nBestimmt, ob zwei Monate in einem gegebenen Jahr \"verwandt\" sind.\nZwei Monate gelten als verwandt, wenn der erste Tag jedes Monats auf denselben Wochentag fällt.\nDiese Bedingung ist erfüllt, wenn der Unterschied in Tagen zwischen dem ersten Tag dieser Monate durch 7 teilbar ist.\nSchaltjahre werden berücksichtigt, da der Februar in einem Schaltjahr 29 Tage hat.\n\nEingabe:\n- $year: Eine Ganzzahl, die das Jahr darstellt.\n- $month1: Eine Ganzzahl, die den ersten Monat darstellt.\n- $month2: Eine Ganzzahl, die den zweiten Monat darstellt.\n\nAusgabe:\n- Gibt 'YES' zurück, wenn die Monate verwandt sind; andernfalls 'NO'.\n\nBeispiele:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "ha": "Rubuta aikin PHP `function areRelatedMonths($year, $month1, $month2): string` don warware matsalar mai zuwa:\nYana tantance idan watanni biyu a cikin wani shekara suna da \"alaƙa\".\nAna ɗaukar watanni biyu suna da alaƙa idan ranar farko na kowanne wata ya faɗi a rana ɗaya na mako.\nWannan yanayin yana daidai idan bambancin kwanaki tsakanin ranar farko na waɗannan watanni ana iya rabawa da 7.\nAna la'akari da shekarar tsalle, kamar yadda watan Fabrairu ke da kwanaki 29 a cikin shekarar tsalle.\n\nShigar:\n- $year: Lamba mai nuna shekarar.\n- $month1: Lamba mai nuna wata na farko.\n- $month2: Lamba mai nuna wata na biyu.\n\nFitarwa:\n- Yana dawowa 'YES' idan watannin suna da alaƙa; 'NO' in ba haka ba.\n\nMisalai:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hi": "PHP फ़ंक्शन `function areRelatedMonths($year, $month1, $month2): string` लिखें ताकि निम्नलिखित समस्या का समाधान हो सके:\nनिर्धारित करता है कि दिए गए वर्ष में दो महीने \"संबंधित\" हैं या नहीं।\nदो महीने तब संबंधित माने जाते हैं जब प्रत्येक महीने का पहला दिन सप्ताह के उसी दिन पर पड़ता है।\nयह स्थिति तब सत्य होती है जब इन महीनों के पहले दिन के बीच का दिन अंतर 7 से विभाज्य होता है।\nलीप वर्षों को ध्यान में रखा जाता है, क्योंकि लीप वर्ष में फरवरी में 29 दिन होते हैं।\n\nइनपुट:\n- $year: एक पूर्णांक जो वर्ष का प्रतिनिधित्व करता है।\n- $month1: एक पूर्णांक जो पहले महीने का प्रतिनिधित्व करता है।\n- $month2: एक पूर्णांक जो दूसरे महीने का प्रतिनिधित्व करता है।\n\nआउटपुट:\n- 'YES' लौटाता है यदि महीने संबंधित हैं; अन्यथा 'NO'।\n\nउदाहरण:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hu": "Írj egy PHP függvényt `function areRelatedMonths($year, $month1, $month2): string` a következő probléma megoldására:\nMegállapítja, hogy egy adott év két hónapja \"kapcsolódik\"-e.\nKét hónap akkor tekinthető kapcsolódónak, ha az adott hónapok első napja ugyanarra a hét napjára esik.\nEz a feltétel akkor igaz, ha az adott hónapok első napjai közötti napok különbsége osztható 7-tel.\nA szökőéveket figyelembe kell venni, mivel februárnak 29 napja van szökőévben.\n\nBemenet:\n- $year: Egy egész szám, amely az évet jelöli.\n- $month1: Egy egész szám, amely az első hónapot jelöli.\n- $month2: Egy egész szám, amely a második hónapot jelöli.\n\nKimenet:\n- 'YES'-t ad vissza, ha a hónapok kapcsolódnak; 'NO'-t egyébként.\n\nPéldák:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'"
    },
    "instruction_bertscore": {
      "sq": "0.994597253635851",
      "hy": "0.9920716683409925",
      "bn": "0.9726859390431305",
      "bg": "0.9914582977243567",
      "zh": "0.9700449494968906",
      "fr": "0.9931770464114515",
      "de": "0.9728490145859601",
      "ha": "0.9864969080668673",
      "hi": "0.9778364248233651",
      "hu": "0.9796527010275481"
    },
    "level": "middle",
    "test": "function main(){\n    assert(areRelatedMonths(1994, 10, 9) === 'NO');\n    assert(areRelatedMonths(1935, 12, 1) === 'NO');\n    assert(areRelatedMonths(1957, 1, 9) === 'NO');\n    assert(areRelatedMonths(1917, 9, 12) === 'YES');\n    assert(areRelatedMonths(1948, 1, 4) === 'YES');\n    \n}\n\nmain();\n?>",
    "entry_point": "areRelatedMonths",
    "signature": "function areRelatedMonths($year, $month1, $month2): string",
    "docstring": {
      "en": "Determines if two months in a given year are \"related\".\nTwo months are considered related if the first day of each month falls on the same day of the week.\nThis condition is true if the difference in days between the first day of these months is divisible by 7.\nLeap years are taken into account, as February has 29 days in a leap year.\n\nInput:\n- $year: An integer representing the year.\n- $month1: An integer representing the first month.\n- $month2: An integer representing the second month.\n\nOutput:\n- Returns 'YES' if the months are related; 'NO' otherwise.\n\nExamples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "sq": "Përcakton nëse dy muaj në një vit të caktuar janë \"të lidhur\".\nDy muaj konsiderohen të lidhur nëse dita e parë e secilit muaj bie në të njëjtën ditë të javës.\nKjo kusht është e vërtetë nëse diferenca në ditë midis ditës së parë të këtyre muajve është e pjesëtueshme me 7.\nVitet e brishtë merren parasysh, pasi shkurti ka 29 ditë në një vit të brishtë.\n\nInput:\n- $year: Një numër i plotë që përfaqëson vitin.\n- $month1: Një numër i plotë që përfaqëson muajin e parë.\n- $month2: Një numër i plotë që përfaqëson muajin e dytë.\n\nOutput:\n- Kthen 'YES' nëse muajt janë të lidhur; 'NO' përndryshe.\n\nShembuj:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hy": "Սահմանում է՝ արդյոք տրված տարվա երկու ամիսները \"կապված\" են։\nԵրկու ամիսները համարվում են կապված, եթե յուրաքանչյուր ամսվա առաջին օրը շաբաթվա նույն օրն է։\nԱյս պայմանը ճիշտ է, եթե այդ ամիսների առաջին օրվա միջև օրերի տարբերությունը բաժանվում է 7-ի։\nՆահանջ տարիները հաշվի են առնվում, քանի որ փետրվարը նահանջ տարում ունի 29 օր։\n\nՄուտք:\n- $year: Թիվ, որը ներկայացնում է տարին։\n- $month1: Թիվ, որը ներկայացնում է առաջին ամիսը։\n- $month2: Թիվ, որը ներկայացնում է երկրորդ ամիսը։\n\nԵլք:\n- Վերադարձնում է 'YES', եթե ամիսները կապված են; 'NO' հակառակ դեպքում։\n\nՕրինակներ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bn": "নির্ধারণ করে একটি প্রদত্ত বছরে দুটি মাস \"সম্পর্কিত\" কিনা।\nদুটি মাসকে সম্পর্কিত মনে করা হয় যদি প্রতিটি মাসের প্রথম দিনটি সপ্তাহের একই দিনে পড়ে।\nএই শর্তটি সত্য হয় যদি এই মাসগুলির প্রথম দিনের মধ্যে দিনের পার্থক্য ৭ দ্বারা বিভাজ্য হয়।\nঅধিবর্ষ বিবেচনায় নেওয়া হয়, কারণ অধিবর্ষে ফেব্রুয়ারি মাসে ২৯ দিন থাকে।\n\nইনপুট:\n- $year: একটি পূর্ণসংখ্যা যা বছরকে উপস্থাপন করে।\n- $month1: একটি পূর্ণসংখ্যা যা প্রথম মাসকে উপস্থাপন করে।\n- $month2: একটি পূর্ণসংখ্যা যা দ্বিতীয় মাসকে উপস্থাপন করে।\n\nআউটপুট:\n- মাসগুলি সম্পর্কিত হলে 'YES' ফেরত দেয়; অন্যথায় 'NO'।\n\nউদাহরণ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bg": "Определя дали два месеца в дадена година са \"свързани\".\nДва месеца се считат за свързани, ако първият ден на всеки месец се пада на същия ден от седмицата.\nТова условие е изпълнено, ако разликата в дните между първия ден на тези месеци е делима на 7.\nВисокосните години се вземат предвид, тъй като февруари има 29 дни във високосна година.\n\nВход:\n- $year: Цяло число, представляващо годината.\n- $month1: Цяло число, представляващо първия месец.\n- $month2: Цяло число, представляващо втория месец.\n\nИзход:\n- Връща 'YES', ако месеците са свързани; 'NO' в противен случай.\n\nПримери:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "zh": "确定给定年份中的两个月是否“相关”。\n如果每个月的第一天是同一星期几，则认为这两个月是相关的。\n如果这些月份的第一天之间的天数差可以被7整除，则此条件为真。\n闰年被考虑在内，因为在闰年二月有29天。\n\n输入：\n- $year: 表示年份的整数。\n- $month1: 表示第一个月份的整数。\n- $month2: 表示第二个月份的整数。\n\n输出：\n- 如果月份相关，则返回 'YES'；否则返回 'NO'。\n\n例子：\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "fr": "Détermine si deux mois d'une année donnée sont \"liés\".\nDeux mois sont considérés comme liés si le premier jour de chaque mois tombe le même jour de la semaine.\nCette condition est vraie si la différence en jours entre le premier jour de ces mois est divisible par 7.\nLes années bissextiles sont prises en compte, car février a 29 jours dans une année bissextile.\n\nEntrée:\n- $year: Un entier représentant l'année.\n- $month1: Un entier représentant le premier mois.\n- $month2: Un entier représentant le deuxième mois.\n\nSortie:\n- Renvoie 'YES' si les mois sont liés ; 'NO' sinon.\n\nExemples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "de": "Bestimmt, ob zwei Monate in einem gegebenen Jahr \"verwandt\" sind.  \nZwei Monate gelten als verwandt, wenn der erste Tag jedes Monats auf denselben Wochentag fällt.  \nDiese Bedingung ist erfüllt, wenn der Unterschied in Tagen zwischen dem ersten Tag dieser Monate durch 7 teilbar ist.  \nSchaltjahre werden berücksichtigt, da der Februar in einem Schaltjahr 29 Tage hat.\n\nEingabe:  \n- $year: Eine ganze Zahl, die das Jahr darstellt.  \n- $month1: Eine ganze Zahl, die den ersten Monat darstellt.  \n- $month2: Eine ganze Zahl, die den zweiten Monat darstellt.  \n\nAusgabe:  \n- Gibt 'YES' zurück, wenn die Monate verwandt sind; 'NO' andernfalls.\n\nBeispiele:  \n- areRelatedMonths(1994, 10, 9) -> 'NO'  \n- areRelatedMonths(1948, 1, 4) -> 'YES'  ",
      "ha": "Yana tantancewa idan watanni biyu a cikin shekara daya suna da \"dangantaka\".\nAna ɗaukar watanni biyu a matsayin masu alaƙa idan ranar farko ta kowanne wata ta faɗi a rana ɗaya na mako.  \nWannan yanayin yana daidai idan bambancin kwanaki tsakanin ranar farko ta waɗannan watanni ana iya rabawa da 7.  \nAna la'akari da shekarun ƙabis, saboda watan Fabrairu yana da kwanaki 29 a shekarar ƙabis.\n\nInput:  \n- $year: Lamba mai nuna shekarar.  \n- $month1: Lamba mai nuna wata na farko.  \n- $month2: Lamba mai nuna wata na biyu.  \n\nOutput:  \n- Yana dawowa 'YES' idan watannin suna da alaƙa; 'NO' in ba haka ba.\n\nMisalai:  \n- areRelatedMonths(1994, 10, 9) -> 'NO'  \n- areRelatedMonths(1948, 1, 4) -> 'YES'  ",
      "hi": "यह निर्धारित करता है कि दिए गए वर्ष में दो महीने \"संबंधित\" हैं या नहीं।  \nदो महीने तब संबंधित माने जाते हैं जब प्रत्येक महीने का पहला दिन सप्ताह के एक ही दिन पर पड़ता है।  \nयह स्थिति तब सही होती है जब इन महीनों के पहले दिन के बीच का दिन का अंतर 7 से विभाज्य होता है।  \nलीप वर्षों को ध्यान में रखा जाता है, क्योंकि लीप वर्ष में फरवरी में 29 दिन होते हैं।\n\nइनपुट:\n- $year: वर्ष को दर्शाने वाला एक पूर्णांक।\n- $month1: पहले महीने को दर्शाने वाला एक पूर्णांक।\n- $month2: दूसरे महीने को दर्शाने वाला एक पूर्णांक।\n\nआउटपुट:\n- यदि महीने संबंधित हैं तो 'YES' लौटाता है; अन्यथा 'NO'।\n\nउदाहरण:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hu": "Meghatározza, hogy két hónap egy adott évben \"kapcsolódik\"-e.\nKét hónap akkor tekinthető kapcsolódónak, ha mindkét hónap első napja a hét ugyanazon napjára esik.\nEz a feltétel igaz, ha a hónapok első napja közötti napok különbsége osztható 7-tel.\nA szökőéveket figyelembe vesszük, mivel februárnak 29 napja van szökőévben.\n\nBemenet:\n- $year: Egy egész szám, amely az évet jelöli.\n- $month1: Egy egész szám, amely az első hónapot jelöli.\n- $month2: Egy egész szám, amely a második hónapot jelöli.\n\nKimenet:\n- 'YES'-t ad vissza, ha a hónapok kapcsolódnak; 'NO'-t egyébként.\n\nPéldák:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'"
    },
    "docstring_bertscore": {
      "sq": "0.9943040751934435",
      "hy": "0.9739907420161487",
      "bn": "0.9826208348113524",
      "bg": "0.9921519150149305",
      "zh": "0.9774036092230901",
      "fr": "0.9909972766099747",
      "de": "0.9780849114300397",
      "ha": "0.9926852375880092",
      "hi": "0.9769207387667943",
      "hu": "0.9880654921858998"
    }
  },
  {
    "task_id": "PHP/22",
    "prompt": {
      "en": "<?php\n/**\n    * Converts a number from one base to another.\n    * The function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\n    * The bases can range from 2 to 36.\n    * The number is assumed to be a string to accommodate larger bases and values.\n    * Characters in the number may include 0-9 and A-Z, representing values 0 through 35.\n    * Input: A string representing the number, an integer for the current base, and an integer for the target base.\n    * Output: The number converted to the target base as a string.\n    * Example: convertBase(\"123AB\", 16, 10) returns \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "sq": "<?php\n/**\n    * Konverton një numër nga një bazë në një tjetër.\n    * Funksioni pranon tre parametra: numrin për të konvertuar, bazën në të cilën është aktualisht dhe bazën në të cilën do të konvertohet.\n    * Bazat mund të variojnë nga 2 deri në 36.\n    * Numri supozohet të jetë një varg për të akomoduar baza dhe vlera më të mëdha.\n    * Karakteret në numër mund të përfshijnë 0-9 dhe A-Z, duke përfaqësuar vlerat nga 0 deri në 35.\n    * Hyrja: Një varg që përfaqëson numrin, një numër i plotë për bazën aktuale dhe një numër i plotë për bazën e synuar.\n    * Dalja: Numri i konvertuar në bazën e synuar si një varg.\n    * Shembull: convertBase(\"123AB\", 16, 10) kthen \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hy": "<?php\n/**\n    * Թվին փոխակերպում է մեկ հիմքից մյուսը:\n    * Ֆունկցիան ընդունում է երեք պարամետր՝ փոխակերպվող թիվը, հիմքը, որում այն ներկայումս գտնվում է, և հիմքը, որին այն պետք է փոխակերպվի:\n    * Հիմքերը կարող են տատանվել 2-ից մինչև 36:\n    * Թիվը ենթադրվում է, որ տող է՝ ավելի մեծ հիմքեր և արժեքներ ներառելու համար:\n    * Թվերի մեջ կարող են ներառվել 0-9 և A-Z նիշերը, որոնք ներկայացնում են 0-ից մինչև 35 արժեքները:\n    * Մուտքագրում: Տող, որը ներկայացնում է թիվը, ամբողջ թիվ՝ ընթացիկ հիմքի համար, և ամբողջ թիվ՝ նպատակային հիմքի համար:\n    * Ելք: Թիվը, որը փոխակերպվել է նպատակային հիմքի, որպես տող:\n    * Օրինակ: convertBase(\"123AB\", 16, 10) վերադարձնում է \"74667\":\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "bn": "<?php\n/**\n    * একটি সংখ্যা এক ভিত্তি থেকে অন্য ভিত্তিতে রূপান্তর করে।\n    * ফাংশনটি তিনটি প্যারামিটার গ্রহণ করে: রূপান্তর করতে হবে যে সংখ্যা, সেটি বর্তমানে যে ভিত্তিতে আছে, এবং যে ভিত্তিতে রূপান্তর করতে হবে।\n    * ভিত্তিগুলি 2 থেকে 36 পর্যন্ত হতে পারে।\n    * সংখ্যাটিকে একটি স্ট্রিং হিসেবে ধরা হয় যাতে বড় ভিত্তি এবং মানগুলিকে সামঞ্জস্য করা যায়।\n    * সংখ্যার মধ্যে অক্ষরগুলি 0-9 এবং A-Z অন্তর্ভুক্ত থাকতে পারে, যা 0 থেকে 35 পর্যন্ত মান উপস্থাপন করে।\n    * ইনপুট: সংখ্যাটিকে উপস্থাপনকারী একটি স্ট্রিং, বর্তমান ভিত্তির জন্য একটি পূর্ণসংখ্যা, এবং লক্ষ্য ভিত্তির জন্য একটি পূর্ণসংখ্যা।\n    * আউটপুট: লক্ষ্য ভিত্তিতে রূপান্তরিত সংখ্যা একটি স্ট্রিং হিসেবে।\n    * উদাহরণ: convertBase(\"123AB\", 16, 10) \"74667\" রিটার্ন করে।\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "bg": "<?php\n/**\n    * Преобразува число от една база в друга.\n    * Функцията приема три параметъра: числото за преобразуване, базата, в която се намира в момента, и базата, в която да се преобразува.\n    * Базите могат да варират от 2 до 36.\n    * Предполага се, че числото е низ, за да се приспособят по-големи бази и стойности.\n    * Символите в числото могат да включват 0-9 и A-Z, представляващи стойности от 0 до 35.\n    * Вход: Низ, представляващ числото, цяло число за текущата база и цяло число за целевата база.\n    * Изход: Числото, преобразувано в целевата база като низ.\n    * Пример: convertBase(\"123AB\", 16, 10) връща \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "zh": "<?php\n/**\n    * 将一个数字从一个进制转换为另一个进制。\n    * 该函数接受三个参数：要转换的数字、当前所在的进制以及要转换到的进制。\n    * 进制可以从2到36。\n    * 假设数字是一个字符串以适应更大的进制和数值。\n    * 数字中的字符可以包括0-9和A-Z，表示值0到35。\n    * 输入：一个表示数字的字符串，一个表示当前进制的整数，以及一个表示目标进制的整数。\n    * 输出：转换为目标进制的数字，以字符串形式表示。\n    * 示例: convertBase(\"123AB\", 16, 10) 返回 \"74667\"。\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "fr": "<?php\n/**\n    * Convertit un nombre d'une base à une autre.\n    * La fonction accepte trois paramètres : le nombre à convertir, la base dans laquelle il se trouve actuellement, et la base vers laquelle le convertir.\n    * Les bases peuvent varier de 2 à 36.\n    * Le nombre est supposé être une chaîne de caractères pour accommoder des bases et des valeurs plus grandes.\n    * Les caractères dans le nombre peuvent inclure 0-9 et A-Z, représentant les valeurs de 0 à 35.\n    * Entrée : Une chaîne représentant le nombre, un entier pour la base actuelle, et un entier pour la base cible.\n    * Sortie : Le nombre converti à la base cible sous forme de chaîne.\n    * Exemple : convertBase(\"123AB\", 16, 10) retourne \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "de": "<?php\n/**\n    * Konvertiert eine Zahl von einer Basis in eine andere.\n    * Die Funktion akzeptiert drei Parameter: die zu konvertierende Zahl, die Basis, in der sie sich derzeit befindet, und die Basis, in die sie konvertiert werden soll.\n    * Die Basen können von 2 bis 36 reichen.\n    * Es wird angenommen, dass die Zahl ein String ist, um größere Basen und Werte zu unterstützen.\n    * Zeichen in der Zahl können 0-9 und A-Z umfassen, die Werte von 0 bis 35 darstellen.\n    * Eingabe: Ein String, der die Zahl darstellt, ein Integer für die aktuelle Basis und ein Integer für die Zielbasis.\n    * Ausgabe: Die Zahl, konvertiert in die Zielbasis als String.\n    * Beispiel: convertBase(\"123AB\", 16, 10) gibt \"74667\" zurück.\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "ha": "<?php\n/**\n    * Canza lamba daga wata tushe zuwa wata.\n    * Aiki na karɓar abubuwa uku: lambar da za a canza, tushen da take ciki a halin yanzu, da tushen da za a canza ta zuwa.\n    * Tushen na iya kasancewa daga 2 zuwa 36.\n    * Ana ɗauka lambar a matsayin kirtani don dacewa da manyan tushe da ƙimomi.\n    * Haruffa a cikin lambar na iya haɗawa da 0-9 da A-Z, suna wakiltar ƙimomi 0 zuwa 35.\n    * Shigarwa: Kirtani da ke wakiltar lambar, cikakken lamba don tushen yanzu, da cikakken lamba don tushen da ake nufi.\n    * Fitarwa: Lambar da aka canza zuwa tushen da ake nufi a matsayin kirtani.\n    * Misali: convertBase(\"123AB\", 16, 10) yana dawowa \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hi": "<?php\n/**\n    * एक संख्या को एक आधार से दूसरे आधार में परिवर्तित करता है।\n    * यह फ़ंक्शन तीन पैरामीटर स्वीकार करता है: परिवर्तित करने के लिए संख्या, वह आधार जिसमें यह वर्तमान में है, और वह आधार जिसमें इसे परिवर्तित करना है।\n    * आधार 2 से 36 तक हो सकते हैं।\n    * संख्या को एक स्ट्रिंग माना जाता है ताकि बड़े आधार और मान समायोजित हो सकें।\n    * संख्या में वर्ण 0-9 और A-Z शामिल हो सकते हैं, जो 0 से 35 तक के मान का प्रतिनिधित्व करते हैं।\n    * इनपुट: संख्या का प्रतिनिधित्व करने वाली एक स्ट्रिंग, वर्तमान आधार के लिए एक पूर्णांक, और लक्ष्य आधार के लिए एक पूर्णांक।\n    * आउटपुट: लक्ष्य आधार में परिवर्तित संख्या एक स्ट्रिंग के रूप में।\n    * उदाहरण: convertBase(\"123AB\", 16, 10) \"74667\" लौटाता है।\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hu": "<?php\n/**\n    * Átalakít egy számot egyik számrendszerből a másikba.\n    * A függvény három paramétert fogad el: az átalakítandó számot, a jelenlegi számrendszert, és a cél számrendszert.\n    * A számrendszerek 2-től 36-ig terjedhetnek.\n    * A számot feltételezzük, hogy egy karakterlánc, hogy nagyobb számrendszereket és értékeket is kezelhessen.\n    * A számban szereplő karakterek lehetnek 0-9 és A-Z, amelyek 0-tól 35-ig terjedő értékeket képviselnek.\n    * Bemenet: Egy karakterlánc, amely a számot képviseli, egy egész szám a jelenlegi számrendszerhez, és egy egész szám a cél számrendszerhez.\n    * Kimenet: A szám átalakítva a cél számrendszerbe, mint egy karakterlánc.\n    * Példa: convertBase(\"123AB\", 16, 10) visszaadja \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) "
    },
    "prompt_bertscore": {
      "sq": "0.9806524077352967",
      "hy": "0.9652412723619428",
      "bn": "0.9649822583450733",
      "bg": "0.9819359572575441",
      "zh": "0.9567027481723961",
      "fr": "0.9773036981414296",
      "de": "0.9709147519354424",
      "ha": "0.9892002675527521",
      "hi": "0.9624292620576319",
      "hu": "0.9073699135866661"
    },
    "canonical_solution": "{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}",
    "instruction": {
      "en": "Write a PHP function `function convertBase($number, $fromBase, $toBase)` to solve the following problem:\nConverts a number from one base to another.\nThe function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\nThe bases can range from 2 to 36.\nThe number is assumed to be a string to accommodate larger bases and values.\nCharacters in the number may include 0-9 and A-Z, representing values 0 through 35.\nInput: A string representing the number, an integer for the current base, and an integer for the target base.\nOutput: The number converted to the target base as a string.\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".",
      "sq": "Shkruani një funksion PHP `function convertBase($number, $fromBase, $toBase)` për të zgjidhur problemin e mëposhtëm:\nKonverton një numër nga një bazë në një tjetër.\nFunksioni pranon tre parametra: numrin për të konvertuar, bazën në të cilën është aktualisht dhe bazën në të cilën do të konvertohet.\nBazat mund të variojnë nga 2 deri në 36.\nNumri supozohet të jetë një varg për të akomoduar baza dhe vlera më të mëdha.\nKarakteret në numër mund të përfshijnë 0-9 dhe A-Z, që përfaqësojnë vlerat 0 deri në 35.\nInput: Një varg që përfaqëson numrin, një numër i plotë për bazën aktuale dhe një numër i plotë për bazën e synuar.\nOutput: Numri i konvertuar në bazën e synuar si një varg.\nShembull: convertBase(\"123AB\", 16, 10) kthen \"74667\".",
      "hy": "PHP ֆունկցիա գրեք `function convertBase($number, $fromBase, $toBase)` հետևյալ խնդիրը լուծելու համար:\nԹվերը փոխակերպում է մի հիմքից մյուսը:\nՖունկցիան ընդունում է երեք պարամետրեր՝ փոխակերպվող թիվը, հիմքը, որում այն ներկայումս գտնվում է, և հիմքը, որին պետք է փոխակերպել:\nՀիմքերը կարող են տատանվել 2-ից մինչև 36:\nԹիվը ենթադրվում է, որ տող է՝ ավելի մեծ հիմքեր և արժեքներ տեղավորելու համար:\nԹվերի մեջ կարող են ներառվել 0-9 և A-Z սիմվոլները, որոնք ներկայացնում են արժեքներ 0-ից մինչև 35:\nՄուտք: Թիվը ներկայացնող տող, ամբողջ թիվ ներկա հիմքի համար, և ամբողջ թիվ նպատակային հիմքի համար:\nԵլք: Թիվը, որը փոխակերպվել է նպատակային հիմքի, որպես տող:\nՕրինակ: convertBase(\"123AB\", 16, 10) վերադարձնում է \"74667\":",
      "bn": "PHP ফাংশন `function convertBase($number, $fromBase, $toBase)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি সংখ্যা এক ভিত্তি থেকে অন্য ভিত্তিতে রূপান্তর করে।\nফাংশনটি তিনটি প্যারামিটার গ্রহণ করে: রূপান্তর করার সংখ্যা, এটি বর্তমানে যে ভিত্তিতে আছে, এবং যে ভিত্তিতে রূপান্তর করতে হবে।\nভিত্তিগুলি 2 থেকে 36 পর্যন্ত হতে পারে।\nসংখ্যাটি একটি স্ট্রিং হিসাবে ধরা হয় যাতে বড় ভিত্তি এবং মানগুলিকে সামঞ্জস্য করা যায়।\nসংখ্যার মধ্যে অক্ষরগুলি 0-9 এবং A-Z অন্তর্ভুক্ত থাকতে পারে, যা মান 0 থেকে 35 পর্যন্ত প্রতিনিধিত্ব করে।\nইনপুট: একটি স্ট্রিং যা সংখ্যাটিকে উপস্থাপন করে, বর্তমান ভিত্তির জন্য একটি পূর্ণসংখ্যা, এবং লক্ষ্য ভিত্তির জন্য একটি পূর্ণসংখ্যা।\nআউটপুট: লক্ষ্য ভিত্তিতে রূপান্তরিত সংখ্যাটি একটি স্ট্রিং হিসাবে।\nউদাহরণ: convertBase(\"123AB\", 16, 10) \"74667\" রিটার্ন করে।",
      "bg": "Напишете PHP функция `function convertBase($number, $fromBase, $toBase)`, за да решите следния проблем:\nПреобразува число от една база в друга.\nФункцията приема три параметъра: числото за преобразуване, базата, в която се намира в момента, и базата, в която да се преобразува.\nБазите могат да варират от 2 до 36.\nПредполага се, че числото е низ, за да се приспособят по-големи бази и стойности.\nСимволите в числото могат да включват 0-9 и A-Z, представляващи стойности от 0 до 35.\nВход: Низ, представляващ числото, цяло число за текущата база и цяло число за целевата база.\nИзход: Числото, преобразувано в целевата база като низ.\nПример: convertBase(\"123AB\", 16, 10) връща \"74667\".",
      "zh": "编写一个 PHP 函数 `function convertBase($number, $fromBase, $toBase)` 来解决以下问题：\n将一个数字从一个进制转换为另一个进制。\n该函数接受三个参数：要转换的数字、当前所在的进制以及要转换到的进制。\n进制范围可以是 2 到 36。\n假定数字是一个字符串，以适应更大的进制和数值。\n数字中的字符可以包括 0-9 和 A-Z，表示值 0 到 35。\n输入：一个表示数字的字符串，一个表示当前进制的整数，以及一个表示目标进制的整数。\n输出：转换为目标进制的数字，作为字符串。\n示例：convertBase(\"123AB\", 16, 10) 返回 \"74667\"。",
      "fr": "Écrire une fonction PHP `function convertBase($number, $fromBase, $toBase)` pour résoudre le problème suivant :\nConvertit un nombre d'une base à une autre.\nLa fonction accepte trois paramètres : le nombre à convertir, la base dans laquelle il se trouve actuellement, et la base vers laquelle le convertir.\nLes bases peuvent aller de 2 à 36.\nLe nombre est supposé être une chaîne pour accommoder des bases et des valeurs plus grandes.\nLes caractères dans le nombre peuvent inclure 0-9 et A-Z, représentant les valeurs de 0 à 35.\nEntrée : Une chaîne représentant le nombre, un entier pour la base actuelle, et un entier pour la base cible.\nSortie : Le nombre converti à la base cible sous forme de chaîne.\nExemple : convertBase(\"123AB\", 16, 10) retourne \"74667\".",
      "de": "Schreiben Sie eine PHP-Funktion `function convertBase($number, $fromBase, $toBase)`, um das folgende Problem zu lösen:\nKonvertiert eine Zahl von einer Basis in eine andere.\nDie Funktion akzeptiert drei Parameter: die zu konvertierende Zahl, die Basis, in der sie sich derzeit befindet, und die Basis, in die sie konvertiert werden soll.\nDie Basen können von 2 bis 36 reichen.\nEs wird angenommen, dass die Zahl ein String ist, um größere Basen und Werte zu berücksichtigen.\nZeichen in der Zahl können 0-9 und A-Z umfassen, die Werte von 0 bis 35 darstellen.\nEingabe: Ein String, der die Zahl darstellt, ein Integer für die aktuelle Basis und ein Integer für die Zielbasis.\nAusgabe: Die Zahl, konvertiert in die Zielbasis als String.\nBeispiel: convertBase(\"123AB\", 16, 10) gibt \"74667\" zurück.",
      "ha": "Rubuta aikin PHP `function convertBase($number, $fromBase, $toBase)` don warware matsalar mai zuwa:\nYana canza lamba daga wata tushe zuwa wata.\nAikin yana karɓar sigogi guda uku: lamban da za a canza, tushen da yake ciki a halin yanzu, da tushen da za a canza shi zuwa.\nTushen na iya zama daga 2 zuwa 36.\nAna ɗauka lambar a matsayin jere don dacewa da manyan tushe da ƙimomi.\nHaruffa a cikin lambar na iya haɗawa da 0-9 da A-Z, suna wakiltar ƙimomi 0 zuwa 35.\nShigarwa: Jere da ke wakiltar lambar, cikakken lamba don tushen yanzu, da cikakken lamba don tushen da ake nufi.\nFitarwa: Lambar da aka canza zuwa tushen da ake nufi a matsayin jere.\nMisali: convertBase(\"123AB\", 16, 10) yana dawowa \"74667\".",
      "hi": "PHP फ़ंक्शन `function convertBase($number, $fromBase, $toBase)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक संख्या को एक आधार से दूसरे आधार में परिवर्तित करता है।\nफ़ंक्शन तीन पैरामीटर स्वीकार करता है: परिवर्तित करने के लिए संख्या, वह आधार जिसमें यह वर्तमान में है, और वह आधार जिसमें इसे परिवर्तित करना है।\nआधार 2 से 36 तक हो सकते हैं।\nसंख्या को एक स्ट्रिंग माना जाता है ताकि बड़े आधार और मान accommodated हो सकें।\nसंख्या में वर्ण 0-9 और A-Z शामिल हो सकते हैं, जो 0 से 35 तक के मान का प्रतिनिधित्व करते हैं।\nइनपुट: संख्या का प्रतिनिधित्व करने वाली एक स्ट्रिंग, वर्तमान आधार के लिए एक पूर्णांक, और लक्ष्य आधार के लिए एक पूर्णांक।\nआउटपुट: लक्ष्य आधार में परिवर्तित संख्या एक स्ट्रिंग के रूप में।\nउदाहरण: convertBase(\"123AB\", 16, 10) \"74667\" लौटाता है।",
      "hu": "Írj egy PHP függvényt `function convertBase($number, $fromBase, $toBase)` a következő probléma megoldására:\nEgy szám átalakítása egyik számrendszerből a másikba.\nA függvény három paramétert fogad el: az átalakítandó számot, a szám jelenlegi alapját, és azt az alapot, amelyre át kell alakítani.\nAz alapok 2-től 36-ig terjedhetnek.\nA számot egy karakterláncnak tekintjük, hogy nagyobb alapokat és értékeket is kezelni tudjunk.\nA szám karakterei tartalmazhatják a 0-9 és A-Z karaktereket, amelyek 0-tól 35-ig terjedő értékeket képviselnek.\nBemenet: Egy karakterlánc, amely a számot képviseli, egy egész szám a jelenlegi alaphoz, és egy egész szám a cél alaphoz.\nKimenet: A szám átalakítva a cél alapra, karakterláncként.\nPélda: convertBase(\"123AB\", 16, 10) visszaadja \"74667\"."
    },
    "instruction_bertscore": {
      "sq": "0.9796542900705965",
      "hy": "0.9646475661530296",
      "bn": "0.9699559630861869",
      "bg": "0.9822150329428981",
      "zh": "0.9596458545281901",
      "fr": "0.9792830498884422",
      "de": "0.972204856260264",
      "ha": "0.9915844280163139",
      "hi": "0.9652964916078706",
      "hu": "0.9482210322718253"
    },
    "level": "easy",
    "test": "function main(){\n    assert(convertBase('2345678A123', 18, 18) === '2345678A123');\n    assert(convertBase('23456', 15, 18) === '114E0');\n    assert(convertBase('2345678', 12, 20) === '22B7A4');\n    assert(convertBase('12345678', 16, 23) === '21A976L');\n    assert(convertBase('3456AB', 25, 21) === '7C2136');\n    assert(convertBase('AB1234567', 18, 22) === '22JF0G367');\n    \n}\n\nmain();\n?>",
    "entry_point": "convertBase",
    "signature": "function convertBase($number, $fromBase, $toBase)",
    "docstring": {
      "en": "Converts a number from one base to another.\nThe function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\nThe bases can range from 2 to 36.\nThe number is assumed to be a string to accommodate larger bases and values.\nCharacters in the number may include 0-9 and A-Z, representing values 0 through 35.\nInput: A string representing the number, an integer for the current base, and an integer for the target base.\nOutput: The number converted to the target base as a string.\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".",
      "sq": "Konverton një numër nga një bazë në një tjetër.  \nFunksioni pranon tre parametra: numrin për të konvertuar, bazën në të cilën ndodhet aktualisht dhe bazën në të cilën do të konvertohet.  \nBazat mund të variojnë nga 2 deri në 36.  \nNumri supozohet të jetë një varg për të akomoduar baza dhe vlera më të mëdha.  \nKarakteret në numër mund të përfshijnë 0-9 dhe A-Z, duke përfaqësuar vlerat 0 deri në 35.  \n\nArgs:  \n    numri: Një varg që përfaqëson numrin.  \n    baza_aktuale: Një numër i plotë për bazën aktuale.  \n    baza_objektive: Një numër i plotë për bazën objektive.  \n\nReturns:  \n    Numri i konvertuar në bazën objektive si një varg.  \n\nExample:  \n    convertBase(\"123AB\", 16, 10) kthen \"74667\".",
      "hy": "Վերածում է թիվը մեկ հիմքից մյուսին:  \nՖունկցիան ընդունում է երեք պարամետր՝ փոխարկվող թիվը, հիմքը, որում այն ներկայումս գտնվում է, և հիմքը, որին պետք է փոխարկել:  \nՀիմքերը կարող են տատանվել 2-ից մինչև 36:  \nԹիվը ենթադրվում է, որ տող է՝ ավելի մեծ հիմքեր և արժեքներ տեղավորելու համար:  \nԹվի մեջ գտնվող սիմվոլները կարող են ներառել 0-9 և A-Z, որոնք ներկայացնում են արժեքներ 0-ից մինչև 35:  \nՄուտք: Տող, որը ներկայացնում է թիվը, ամբողջ թիվ՝ ընթացիկ հիմքի համար, և ամբողջ թիվ՝ նպատակային հիմքի համար:  \nԵլք: Թիվը, որը փոխարկված է նպատակային հիմքին որպես տող:  \nՕրինակ: convertBase(\"123AB\", 16, 10) վերադարձնում է \"74667\":",
      "bn": "একটি সংখ্যাকে এক ভিত্তি থেকে অন্য ভিত্তিতে রূপান্তর করে। \nফাংশনটি তিনটি প্যারামিটার গ্রহণ করে: রূপান্তর করার সংখ্যা, এটি বর্তমানে যে ভিত্তিতে আছে, এবং যে ভিত্তিতে এটি রূপান্তর করতে হবে। \nভিত্তিগুলি 2 থেকে 36 পর্যন্ত হতে পারে। \nসংখ্যাটি একটি স্ট্রিং হিসেবে ধরা হয় যাতে বড় ভিত্তি এবং মানগুলিকে সামঞ্জস্য করা যায়। \nসংখ্যার অক্ষরগুলিতে 0-9 এবং A-Z অন্তর্ভুক্ত থাকতে পারে, যা 0 থেকে 35 পর্যন্ত মান উপস্থাপন করে। \nইনপুট: সংখ্যাকে উপস্থাপনকারী একটি স্ট্রিং, বর্তমান ভিত্তির জন্য একটি পূর্ণসংখ্যা, এবং লক্ষ্য ভিত্তির জন্য একটি পূর্ণসংখ্যা। \nআউটপুট: লক্ষ্য ভিত্তিতে রূপান্তরিত সংখ্যা একটি স্ট্রিং হিসেবে। \nউদাহরণ: convertBase(\"123AB\", 16, 10) \"74667\" রিটার্ন করে।",
      "bg": "Преобразува число от една база в друга.  \nФункцията приема три параметъра: числото, което да се преобразува, базата, в която се намира в момента, и базата, в която да се преобразува.  \nБазите могат да варират от 2 до 36.  \nПредполага се, че числото е низ, за да се приспособят по-големи бази и стойности.  \nСимволите в числото могат да включват 0-9 и A-Z, представляващи стойности от 0 до 35.  \nВход: Низ, представляващ числото, цяло число за текущата база и цяло число за целевата база.  \nИзход: Числото, преобразувано в целевата база като низ.  \nПример: convertBase(\"123AB\", 16, 10) връща \"74667\".",
      "zh": "将一个数字从一个进制转换为另一个进制。  \n该函数接受三个参数：要转换的数字、它当前所在的进制以及要转换到的进制。  \n进制可以从2到36。  \n假设数字是一个字符串，以适应更大的进制和数值。  \n数字中的字符可以包括0-9和A-Z，表示值0到35。  \n输入：一个表示数字的字符串，一个表示当前进制的整数，以及一个表示目标进制的整数。  \n输出：转换为目标进制的数字，作为字符串。  \n示例：convertBase(\"123AB\", 16, 10) 返回 \"74667\"。",
      "fr": "Convertit un nombre d'une base à une autre.\nLa fonction accepte trois paramètres : le nombre à convertir, la base dans laquelle il se trouve actuellement, et la base vers laquelle le convertir.\nLes bases peuvent aller de 2 à 36.\nLe nombre est supposé être une chaîne de caractères pour accommoder des bases et des valeurs plus grandes.\nLes caractères dans le nombre peuvent inclure 0-9 et A-Z, représentant les valeurs de 0 à 35.\nEntrée : Une chaîne de caractères représentant le nombre, un entier pour la base actuelle, et un entier pour la base cible.\nSortie : Le nombre converti dans la base cible sous forme de chaîne de caractères.\nExemple : convertBase(\"123AB\", 16, 10) retourne \"74667\".",
      "de": "Konvertiert eine Zahl von einer Basis in eine andere.\nDie Funktion akzeptiert drei Parameter: die zu konvertierende Zahl, die Basis, in der sie sich derzeit befindet, und die Basis, in die sie konvertiert werden soll.\nDie Basen können von 2 bis 36 reichen.\nEs wird angenommen, dass die Zahl ein String ist, um größere Basen und Werte zu berücksichtigen.\nZeichen in der Zahl können 0-9 und A-Z umfassen, die Werte von 0 bis 35 darstellen.\nEingabe: Ein String, der die Zahl darstellt, ein Integer für die aktuelle Basis und ein Integer für die Zielbasis.\nAusgabe: Die Zahl, konvertiert in die Zielbasis als String.\nBeispiel: convertBase(\"123AB\", 16, 10) gibt \"74667\" zurück.",
      "ha": "Canza lamba daga wata tushe zuwa wata.\n\nAikin yana karɓar abubuwa guda uku: lambar da za a canza, tushen da yake ciki a halin yanzu, da tushen da za a canza shi zuwa.\n\nTushen na iya zama daga 2 zuwa 36.\n\nAna ɗaukar lambar a matsayin kirtani don dacewa da manyan tushe da ƙima.\n\nHaruffa a cikin lambar na iya haɗawa da 0-9 da A-Z, suna wakiltar ƙima daga 0 zuwa 35.\n\nInput: Kirtani da ke wakiltar lambar, cikakken lamba don tushen yanzu, da cikakken lamba don tushen da ake nufi.\n\nOutput: Lambar da aka canza zuwa tushen da ake nufi a matsayin kirtani.\n\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".",
      "hi": "एक संख्या को एक आधार से दूसरे आधार में परिवर्तित करता है।\nयह फ़ंक्शन तीन पैरामीटर स्वीकार करता है: परिवर्तित करने के लिए संख्या, वह आधार जिसमें यह वर्तमान में है, और वह आधार जिसमें इसे परिवर्तित करना है।\nआधार 2 से 36 तक हो सकते हैं।\nसंख्या को एक स्ट्रिंग माना जाता है ताकि बड़े आधार और मान समायोजित हो सकें।\nसंख्या में वर्णों में 0-9 और A-Z शामिल हो सकते हैं, जो 0 से 35 तक के मान का प्रतिनिधित्व करते हैं।\nइनपुट: संख्या का प्रतिनिधित्व करने वाली एक स्ट्रिंग, वर्तमान आधार के लिए एक पूर्णांक, और लक्ष्य आधार के लिए एक पूर्णांक।\nआउटपुट: लक्ष्य आधार में परिवर्तित संख्या एक स्ट्रिंग के रूप में।\nउदाहरण: convertBase(\"123AB\", 16, 10) \"74667\" लौटाता है।",
      "hu": "Átalakít egy számot egyik számrendszerből a másikba.\nA függvény három paramétert fogad el: az átalakítandó számot, az alapot, amelyben jelenleg van, és az alapot, amelyre át kell alakítani.\nAz alapok 2-től 36-ig terjedhetnek.\nA számot feltételezhetően karakterláncként adjuk meg, hogy nagyobb alapokat és értékeket is kezelni lehessen.\nA szám karakterei tartalmazhatják a 0-9 és A-Z karaktereket, amelyek a 0-tól 35-ig terjedő értékeket képviselik.\nBemenet: Egy karakterlánc, amely a számot képviseli, egy egész szám a jelenlegi alaphoz, és egy egész szám a cél alaphoz.\nKimenet: A szám átalakítva a cél alapra, karakterláncként.\nPélda: convertBase(\"123AB\", 16, 10) visszaadja \"74667\"."
    },
    "docstring_bertscore": {
      "sq": "0.8958662350690305",
      "hy": "0.9736848512293549",
      "bn": "0.9649018130407542",
      "bg": "0.9705794638522555",
      "zh": "0.9679583373441191",
      "fr": "0.9686430162675463",
      "de": "0.9740781393838039",
      "ha": "0.9719551778713031",
      "hi": "0.9515701391264546",
      "hu": "0.9578941331978433"
    }
  },
  {
    "task_id": "PHP/23",
    "prompt": {
      "en": "<?php\n\n/**\n * Performs division of two large numbers provided as strings.\n * This function handles division of large numbers that may exceed the integer\n * or float limit in PHP. It only returns the integer part of the quotient.\n * \n * Inputs:\n * - $dividend: String representing the dividend (the number to be divided).\n * - $divisor: String representing the divisor (the number by which we divide).\n * \n * Output:\n * - Returns a string representing the integer part of the quotient.\n * \n * Example Cases:\n * - largeNumberDivision(\"2376\", \"24\") returns \"99\"\n * - largeNumberDivision(\"1000\", \"10\") returns \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "sq": "<?php\n\n/**\n * Kryen pjesëtimin e dy numrave të mëdhenj të dhënë si vargje.\n * Kjo funksion trajton pjesëtimin e numrave të mëdhenj që mund të tejkalojnë kufirin e numrave të plotë\n * ose kufirin e numrave me presje dhjetore në PHP. Kthen vetëm pjesën e plotë të kuotientit.\n * \n * Hyrjet:\n * - $dividend: Varg që përfaqëson dividendin (numri që do të pjesëtohet).\n * - $divisor: Varg që përfaqëson pjesëtuesin (numri me të cilin pjesëtojmë).\n * \n * Dalja:\n * - Kthen një varg që përfaqëson pjesën e plotë të kuotientit.\n * \n * Shembuj Rastesh:\n * - largeNumberDivision(\"2376\", \"24\") kthen \"99\"\n * - largeNumberDivision(\"1000\", \"10\") kthen \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hy": "<?php\n\n/**\n * Կատարում է երկու մեծ թվերի բաժանում, որոնք տրված են որպես տողեր:\n * Այս ֆունկցիան կատարում է մեծ թվերի բաժանում, որոնք կարող են գերազանցել PHP-ում ամբողջ կամ լողացող կետի սահմանը:\n * Այն վերադարձնում է միայն քանորդի ամբողջ մասը:\n * \n * Մուտքեր:\n * - $dividend: Տող, որը ներկայացնում է բաժանելի (թիվը, որը պետք է բաժանել):\n * - $divisor: Տող, որը ներկայացնում է բաժանարարը (թիվը, որով մենք բաժանում ենք):\n * \n * Ելք:\n * - Վերադարձնում է տող, որը ներկայացնում է քանորդի ամբողջ մասը:\n * \n * Օրինակային դեպքեր:\n * - largeNumberDivision(\"2376\", \"24\") վերադարձնում է \"99\"\n * - largeNumberDivision(\"1000\", \"10\") վերադարձնում է \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "bn": "<?php\n\n/**\n * দুটি বড় সংখ্যার ভাগফল নির্ণয় করে যা স্ট্রিং হিসেবে প্রদান করা হয়।\n * এই ফাংশনটি এমন বড় সংখ্যার ভাগফল নির্ণয় করে যা PHP তে ইন্টিজার বা ফ্লোট সীমা অতিক্রম করতে পারে। এটি কেবল ভাগফলের পূর্ণসংখ্যা অংশটি ফেরত দেয়।\n * \n * ইনপুট:\n * - $dividend: স্ট্রিং যা ভাজক (যে সংখ্যাটি ভাগ করা হবে) নির্দেশ করে।\n * - $divisor: স্ট্রিং যা ভাগকারী (যে সংখ্যা দ্বারা ভাগ করা হবে) নির্দেশ করে।\n * \n * আউটপুট:\n * - একটি স্ট্রিং যা ভাগফলের পূর্ণসংখ্যা অংশ নির্দেশ করে।\n * \n * উদাহরণ কেস:\n * - largeNumberDivision(\"2376\", \"24\") \"99\" ফেরত দেয়\n * - largeNumberDivision(\"1000\", \"10\") \"100\" ফেরত দেয়\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "bg": "<?php\n\n/**\n * Извършва деление на две големи числа, предоставени като низове.\n * Тази функция обработва деление на големи числа, които могат да надхвърлят\n * лимита за цели числа или числа с плаваща запетая в PHP. Връща само\n * цялата част на частното.\n * \n * Входни данни:\n * - $dividend: Низ, представляващ делимото (числото, което ще бъде разделено).\n * - $divisor: Низ, представляващ делителя (числото, с което делим).\n * \n * Изход:\n * - Връща низ, представляващ цялата част на частното.\n * \n * Примерни случаи:\n * - largeNumberDivision(\"2376\", \"24\") връща \"99\"\n * - largeNumberDivision(\"1000\", \"10\") връща \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "zh": "<?php\n\n/**\n * 执行两个以字符串形式提供的大数的除法。\n * 此函数处理可能超过PHP中整数或浮点数限制的大数除法。它仅返回商的整数部分。\n * \n * 输入:\n * - $dividend: 表示被除数的字符串（要被除的数字）。\n * - $divisor: 表示除数的字符串（我们用来除的数字）。\n * \n * 输出:\n * - 返回一个表示商的整数部分的字符串。\n * \n * 示例案例:\n * - largeNumberDivision(\"2376\", \"24\") 返回 \"99\"\n * - largeNumberDivision(\"1000\", \"10\") 返回 \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "fr": "<?php\n\n/**\n * Effectue la division de deux grands nombres fournis sous forme de chaînes.\n * Cette fonction gère la division de grands nombres qui peuvent dépasser la limite\n * des entiers ou des flottants en PHP. Elle ne retourne que la partie entière du quotient.\n * \n * Entrées :\n * - $dividend : Chaîne représentant le dividende (le nombre à diviser).\n * - $divisor : Chaîne représentant le diviseur (le nombre par lequel nous divisons).\n * \n * Sortie :\n * - Retourne une chaîne représentant la partie entière du quotient.\n * \n * Cas d'exemple :\n * - largeNumberDivision(\"2376\", \"24\") retourne \"99\"\n * - largeNumberDivision(\"1000\", \"10\") retourne \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "de": "<?php\n\n/**\n * Führt die Division von zwei großen Zahlen durch, die als Zeichenketten übergeben werden.\n * Diese Funktion behandelt die Division von großen Zahlen, die das Integer-\n * oder Float-Limit in PHP überschreiten können. Sie gibt nur den ganzzahligen Teil des Quotienten zurück.\n * \n * Eingaben:\n * - $dividend: Zeichenkette, die den Dividend darstellt (die Zahl, die geteilt werden soll).\n * - $divisor: Zeichenkette, die den Divisor darstellt (die Zahl, durch die wir teilen).\n * \n * Ausgabe:\n * - Gibt eine Zeichenkette zurück, die den ganzzahligen Teil des Quotienten darstellt.\n * \n * Beispiel-Fälle:\n * - largeNumberDivision(\"2376\", \"24\") gibt \"99\" zurück\n * - largeNumberDivision(\"1000\", \"10\") gibt \"100\" zurück\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "ha": "<?php\n\n/**\n * Yana yin rabon lambobi masu girma guda biyu da aka bayar a matsayin kirtani.\n * Wannan aikin yana sarrafa rabon lambobi masu girma waɗanda na iya wuce iyakar\n * integer ko float a cikin PHP. Yana dawo da ɓangaren cikakken adadi na kason kawai.\n * \n * Shigarwa:\n * - $dividend: Kirtani mai wakiltar abin da za a raba (lambar da za a raba).\n * - $divisor: Kirtani mai wakiltar abin da za a raba da shi (lambar da za mu raba da ita).\n * \n * Fitarwa:\n * - Yana dawo da kirtani mai wakiltar ɓangaren cikakken adadi na kason.\n * \n * Misalan Lokuta:\n * - largeNumberDivision(\"2376\", \"24\") returns \"99\"\n * - largeNumberDivision(\"1000\", \"10\") returns \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hi": "<?php\n\n/**\n * दो बड़े संख्याओं का विभाजन करता है जो स्ट्रिंग्स के रूप में दी गई हैं।\n * यह फ़ंक्शन बड़े संख्याओं के विभाजन को संभालता है जो PHP में पूर्णांक\n * या फ्लोट सीमा से अधिक हो सकती हैं। यह केवल भागफल के पूर्णांक भाग को लौटाता है।\n * \n * इनपुट्स:\n * - $dividend: स्ट्रिंग जो लाभांश का प्रतिनिधित्व करती है (वह संख्या जिसे विभाजित करना है)।\n * - $divisor: स्ट्रिंग जो भाजक का प्रतिनिधित्व करती है (वह संख्या जिससे हम विभाजित करते हैं)।\n * \n * आउटपुट:\n * - एक स्ट्रिंग लौटाता है जो भागफल के पूर्णांक भाग का प्रतिनिधित्व करती है।\n * \n * उदाहरण मामले:\n * - largeNumberDivision(\"2376\", \"24\") \"99\" लौटाता है\n * - largeNumberDivision(\"1000\", \"10\") \"100\" लौटाता है\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hu": "<?php\n\n/**\n * Két nagy szám osztását végzi el, amelyeket karakterláncként adnak meg.\n * Ez a függvény olyan nagy számok osztását kezeli, amelyek meghaladhatják a PHP\n * egész vagy lebegőpontos határát. Csak az osztási hányados egész részét adja vissza.\n * \n * Bemenetek:\n * - $dividend: Karakterlánc, amely az osztandót (az osztandó számot) képviseli.\n * - $divisor: Karakterlánc, amely az osztót (a szám, amellyel osztunk) képviseli.\n * \n * Kimenet:\n * - Egy karakterláncot ad vissza, amely az osztási hányados egész részét képviseli.\n * \n * Példa esetek:\n * - largeNumberDivision(\"2376\", \"24\") visszaadja \"99\"\n * - largeNumberDivision(\"1000\", \"10\") visszaadja \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) "
    },
    "prompt_bertscore": {
      "sq": "0.9798423930414364",
      "hy": "0.9743151054283786",
      "bn": "0.9510566795914794",
      "bg": "0.9712353413704327",
      "zh": "0.9796517078756429",
      "fr": "0.9829064652992806",
      "de": "0.9890737400000329",
      "ha": "0.9834429659584558",
      "hi": "0.9839917817012552",
      "hu": "0.9656651495950713"
    },
    "canonical_solution": " {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}",
    "instruction": {
      "en": "Write a PHP function `function largeNumberDivision($dividend, $divisor)` to solve the following problem:\nPerforms division of two large numbers provided as strings.\nThis function handles division of large numbers that may exceed the integer\nor float limit in PHP. It only returns the integer part of the quotient.\n\nInputs:\n- $dividend: String representing the dividend (the number to be divided).\n- $divisor: String representing the divisor (the number by which we divide).\n\nOutput:\n- Returns a string representing the integer part of the quotient.\n\nExample Cases:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"",
      "sq": "Shkruani një funksion PHP `function largeNumberDivision($dividend, $divisor)` për të zgjidhur problemin e mëposhtëm:\nKryen pjesëtimin e dy numrave të mëdhenj të dhënë si vargje.\nKy funksion trajton pjesëtimin e numrave të mëdhenj që mund të tejkalojnë kufirin e integer ose float në PHP. Ai kthen vetëm pjesën e plotë të koeficientit.\n\nHyrjet:\n- $dividend: Varg që përfaqëson dividendin (numri që do të pjesëtohet).\n- $divisor: Varg që përfaqëson divisorin (numri me të cilin pjesëtojmë).\n\nDalja:\n- Kthen një varg që përfaqëson pjesën e plotë të koeficientit.\n\nRaste Shembull:\n- largeNumberDivision(\"2376\", \"24\") kthen \"99\"\n- largeNumberDivision(\"1000\", \"10\") kthen \"100\"",
      "hy": "Գրեք PHP ֆունկցիա `function largeNumberDivision($dividend, $divisor)` հետևյալ խնդիրը լուծելու համար:\nԿատարում է երկու մեծ թվերի բաժանում, որոնք տրված են որպես տողեր:\nԱյս ֆունկցիան մշակվում է մեծ թվերի բաժանումը, որոնք կարող են գերազանցել PHP-ի ամբողջ կամ լողացող կետի սահմանաչափը: Այն վերադարձնում է միայն բաժանման ամբողջ մասը:\n\nՄուտքեր:\n- $dividend: Տող, որը ներկայացնում է բաժանարարը (թիվը, որը պետք է բաժանել):\n- $divisor: Տող, որը ներկայացնում է բաժանարար (թիվը, որով բաժանում ենք):\n\nԵլք:\n- Վերադարձնում է տող, որը ներկայացնում է բաժանման ամբողջ մասը:\n\nՕրինակային դեպքեր:\n- largeNumberDivision(\"2376\", \"24\") վերադարձնում է \"99\"\n- largeNumberDivision(\"1000\", \"10\") վերադարձնում է \"100\"",
      "bn": "PHP ফাংশন `function largeNumberDivision($dividend, $divisor)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nদুটি বড় সংখ্যার ভাগফল নির্ণয় করে যা স্ট্রিং হিসেবে প্রদান করা হয়েছে।\nএই ফাংশনটি বড় সংখ্যার ভাগফল নির্ণয় করে যা PHP-তে integer বা float সীমা অতিক্রম করতে পারে। এটি শুধুমাত্র ভাগফলের পূর্ণসংখ্যা অংশটি ফেরত দেয়।\n\nইনপুটসমূহ:\n- $dividend: স্ট্রিং যা ভাজকের প্রতিনিধিত্ব করে (যে সংখ্যাটি ভাগ করা হবে)।\n- $divisor: স্ট্রিং যা ভাগকের প্রতিনিধিত্ব করে (যে সংখ্যা দ্বারা ভাগ করা হবে)।\n\nআউটপুট:\n- একটি স্ট্রিং ফেরত দেয় যা ভাগফলের পূর্ণসংখ্যা অংশের প্রতিনিধিত্ব করে।\n\nউদাহরণ কেসসমূহ:\n- largeNumberDivision(\"2376\", \"24\") \"99\" ফেরত দেয়\n- largeNumberDivision(\"1000\", \"10\") \"100\" ফেরত দেয়",
      "bg": "Напишете PHP функция `function largeNumberDivision($dividend, $divisor)` за решаване на следния проблем:\nИзвършва деление на две големи числа, предоставени като низове.\nТази функция обработва деление на големи числа, които могат да надвишат лимита на integer\nили float в PHP. Тя връща само цялата част от частното.\n\nВходове:\n- $dividend: Низ, представляващ делимото (числото, което ще бъде разделено).\n- $divisor: Низ, представляващ делителя (числото, с което делим).\n\nИзход:\n- Връща низ, представляващ цялата част от частното.\n\nПримерни случаи:\n- largeNumberDivision(\"2376\", \"24\") връща \"99\"\n- largeNumberDivision(\"1000\", \"10\") връща \"100\"",
      "zh": "编写一个 PHP 函数 `function largeNumberDivision($dividend, $divisor)` 来解决以下问题：\n执行以字符串形式提供的两个大数的除法。\n此函数处理可能超过 PHP 中整数或浮点数限制的大数除法。它仅返回商的整数部分。\n\n输入：\n- $dividend: 表示被除数（要被除的数字）的字符串。\n- $divisor: 表示除数（我们用来除的数字）的字符串。\n\n输出：\n- 返回一个表示商的整数部分的字符串。\n\n示例案例：\n- largeNumberDivision(\"2376\", \"24\") 返回 \"99\"\n- largeNumberDivision(\"1000\", \"10\") 返回 \"100\"",
      "fr": "Écrire une fonction PHP `function largeNumberDivision($dividend, $divisor)` pour résoudre le problème suivant :\nEffectue la division de deux grands nombres fournis sous forme de chaînes.\nCette fonction gère la division de grands nombres qui peuvent dépasser la limite des entiers\nou des flottants en PHP. Elle ne renvoie que la partie entière du quotient.\n\nEntrées :\n- $dividend : Chaîne représentant le dividende (le nombre à diviser).\n- $divisor : Chaîne représentant le diviseur (le nombre par lequel nous divisons).\n\nSortie :\n- Renvoie une chaîne représentant la partie entière du quotient.\n\nCas d'exemple :\n- largeNumberDivision(\"2376\", \"24\") renvoie \"99\"\n- largeNumberDivision(\"1000\", \"10\") renvoie \"100\"",
      "de": "Schreiben Sie eine PHP-Funktion `function largeNumberDivision($dividend, $divisor)`, um das folgende Problem zu lösen:\nFührt die Division von zwei großen Zahlen aus, die als Zeichenfolgen angegeben sind.\nDiese Funktion behandelt die Division von großen Zahlen, die das Integer-\noder Float-Limit in PHP überschreiten können. Sie gibt nur den ganzzahligen Teil des Quotienten zurück.\n\nEingaben:\n- $dividend: Zeichenfolge, die den Dividend darstellt (die zu teilende Zahl).\n- $divisor: Zeichenfolge, die den Divisor darstellt (die Zahl, durch die wir teilen).\n\nAusgabe:\n- Gibt eine Zeichenfolge zurück, die den ganzzahligen Teil des Quotienten darstellt.\n\nBeispielfälle:\n- largeNumberDivision(\"2376\", \"24\") gibt \"99\" zurück\n- largeNumberDivision(\"1000\", \"10\") gibt \"100\" zurück",
      "ha": "Rubuta aikin PHP `function largeNumberDivision($dividend, $divisor)` don warware matsalar mai zuwa:\nYana aiwatar da rarrabuwa na manyan lambobi biyu da aka bayar a matsayin kirtani.\nWannan aikin yana sarrafa rarrabuwa na manyan lambobi da ka iya wuce iyakar integer\nko iyakar float a cikin PHP. Yana mayar da ɓangaren cikakken adadi na sakamakon kawai.\n\nShigar:\n- $dividend: Kirtani da ke wakiltar abin da za a raba (lambar da za a raba).\n- $divisor: Kirtani da ke wakiltar abin da za a raba da shi (lambar da muke raba da ita).\n\nFitarwa:\n- Yana mayar da kirtani da ke wakiltar ɓangaren cikakken adadi na sakamakon.\n\nMisalan Lokuta:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"",
      "hi": "PHP फ़ंक्शन `function largeNumberDivision($dividend, $divisor)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदो बड़े संख्याओं का विभाजन करता है जो स्ट्रिंग्स के रूप में दी गई हैं।\nयह फ़ंक्शन उन बड़े संख्याओं के विभाजन को संभालता है जो PHP में पूर्णांक या फ्लोट सीमा को पार कर सकते हैं। यह केवल भागफल के पूर्णांक भाग को लौटाता है।\n\nइनपुट्स:\n- $dividend: स्ट्रिंग जो लाभांश का प्रतिनिधित्व करती है (वह संख्या जिसे विभाजित किया जाना है)।\n- $divisor: स्ट्रिंग जो भाजक का प्रतिनिधित्व करती है (वह संख्या जिससे हम विभाजित करते हैं)।\n\nआउटपुट:\n- एक स्ट्रिंग लौटाता है जो भागफल के पूर्णांक भाग का प्रतिनिधित्व करती है।\n\nउदाहरण मामले:\n- largeNumberDivision(\"2376\", \"24\") \"99\" लौटाता है\n- largeNumberDivision(\"1000\", \"10\") \"100\" लौटाता है",
      "hu": "Írj egy PHP függvényt `function largeNumberDivision($dividend, $divisor)` a következő probléma megoldására:\nKét nagy szám osztását végzi el, amelyeket karakterláncként adnak meg.\nEz a függvény kezeli az olyan nagy számok osztását, amelyek meghaladhatják a PHP-ben az egész vagy lebegőpontos korlátot. Csak az osztási hányados egész részét adja vissza.\n\nBemenetek:\n- $dividend: Karakterlánc, amely az osztandót (a számot, amit osztunk) képviseli.\n- $divisor: Karakterlánc, amely az osztót (a szám, amivel osztunk) képviseli.\n\nKimenet:\n- Egy karakterláncot ad vissza, amely az osztási hányados egész részét képviseli.\n\nPélda esetek:\n- largeNumberDivision(\"2376\", \"24\") visszaadja \"99\"\n- largeNumberDivision(\"1000\", \"10\") visszaadja \"100\""
    },
    "instruction_bertscore": {
      "sq": "0.992302675474136",
      "hy": "0.9672879598081263",
      "bn": "0.9524747018816875",
      "bg": "0.9989424918513703",
      "zh": "0.9693553048139375",
      "fr": "0.9871714568408617",
      "de": "0.9913277975640168",
      "ha": "0.9582713322914286",
      "hi": "0.9744464001102426",
      "hu": "0.9718085886500993"
    },
    "level": "middle",
    "test": "function main(){\n    assert(largeNumberDivision(\"2376\", \"24\") === \"99\");\n    assert(largeNumberDivision(\"1000\", \"10\") === \"100\");\n    assert(largeNumberDivision(\"5000\", \"25\") === \"200\");\n    assert(largeNumberDivision(\"123456789\", \"12345\") === \"10000\");\n    assert(largeNumberDivision(\"102030\", \"5101\") === \"20\");\n    assert(largeNumberDivision(\"1020300000000000000000000000000000000000000000000\", \"10\") === \"102030000000000000000000000000000000000000000000\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "largeNumberDivision",
    "signature": "function largeNumberDivision($dividend, $divisor)",
    "docstring": {
      "en": "Performs division of two large numbers provided as strings.\nThis function handles division of large numbers that may exceed the integer\nor float limit in PHP. It only returns the integer part of the quotient.\n\nInputs:\n- $dividend: String representing the dividend (the number to be divided).\n- $divisor: String representing the divisor (the number by which we divide).\n\nOutput:\n- Returns a string representing the integer part of the quotient.\n\nExample Cases:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"",
      "sq": "Kryen pjesëtimin e dy numrave të mëdhenj të dhënë si vargje.\nKjo funksion trajton pjesëtimin e numrave të mëdhenj që mund të tejkalojnë kufirin e integer ose float në PHP. Ajo kthen vetëm pjesën e plotë të koeficientit.\n\nHyrjet:\n- $dividend: Varg që përfaqëson dividendin (numri që do të pjesëtohet).\n- $divisor: Varg që përfaqëson divisorin (numri me të cilin pjesëtojmë).\n\nDalja:\n- Kthen një varg që përfaqëson pjesën e plotë të koeficientit.\n\nShembuj Rastesh:\n- largeNumberDivision(\"2376\", \"24\") kthen \"99\"\n- largeNumberDivision(\"1000\", \"10\") kthen \"100\"",
      "hy": "Կատարում է երկու մեծ թվերի բաժանում, որոնք տրամադրված են որպես տողեր։  \nԱյս ֆունկցիան կատարում է մեծ թվերի բաժանում, որոնք կարող են գերազանցել PHP-ի ամբողջ թվի կամ լողացող կետի սահմանը։ Այն վերադարձնում է միայն մասնակի ամբողջ թվային մասը։\n\nՄուտքեր՝  \n- $dividend: Տող, որը ներկայացնում է բաժանարարը (թիվը, որը պետք է բաժանել)։  \n- $divisor: Տող, որը ներկայացնում է բաժանարարը (թիվը, որով բաժանում ենք)։\n\nԵլք՝  \n- Վերադարձնում է տող, որը ներկայացնում է մասնակի ամբողջ թվային մասը։\n\nՕրինակային դեպքեր՝  \n- largeNumberDivision(\"2376\", \"24\") վերադարձնում է \"99\"  \n- largeNumberDivision(\"1000\", \"10\") վերադարձնում է \"100\"",
      "bn": "দুটি বড় সংখ্যার ভাগফল প্রদান করে যা স্ট্রিং হিসেবে দেওয়া হয়।\nএই ফাংশনটি বড় সংখ্যার ভাগফল প্রদান করে যা PHP-তে ইন্টিজার বা ফ্লোট সীমা অতিক্রম করতে পারে। এটি কেবল ভাগফলের পূর্ণসংখ্যা অংশটি প্রদান করে।\n\nইনপুট:\n- $dividend: স্ট্রিং যা লভ্যাংশকে উপস্থাপন করে (যে সংখ্যাটি ভাগ করা হবে)।\n- $divisor: স্ট্রিং যা ভাজককে উপস্থাপন করে (যে সংখ্যাটি দ্বারা আমরা ভাগ করি)।\n\nআউটপুট:\n- একটি স্ট্রিং প্রদান করে যা ভাগফলের পূর্ণসংখ্যা অংশকে উপস্থাপন করে।\n\nউদাহরণ কেস:\n- largeNumberDivision(\"2376\", \"24\") প্রদান করে \"99\"\n- largeNumberDivision(\"1000\", \"10\") প্রদান করে \"100\"",
      "bg": "Извършва деление на две големи числа, предоставени като низове.  \nТази функция обработва деление на големи числа, които могат да надхвърлят лимита на цяло число или плаваща запетая в PHP. Тя връща само цялата част на частното.\n\nВходове:  \n- $dividend: Низ, представляващ делимото (числото, което ще бъде разделено).  \n- $divisor: Низ, представляващ делителя (числото, с което делим).\n\nИзход:  \n- Връща низ, представляващ цялата част на частното.\n\nПримерни случаи:  \n- largeNumberDivision(\"2376\", \"24\") връща \"99\"  \n- largeNumberDivision(\"1000\", \"10\") връща \"100\"  ",
      "zh": "执行两个以字符串形式提供的大数的除法。  \n此函数处理可能超过 PHP 中整数或浮点数限制的大数除法。它仅返回商的整数部分。\n\n输入：  \n- $dividend: 表示被除数的字符串（要被除的数字）。  \n- $divisor: 表示除数的字符串（我们用来除的数字）。  \n\n输出：  \n- 返回表示商的整数部分的字符串。\n\n示例案例：  \n- largeNumberDivision(\"2376\", \"24\") 返回 \"99\"  \n- largeNumberDivision(\"1000\", \"10\") 返回 \"100\"  ",
      "fr": "Effectue la division de deux grands nombres fournis sous forme de chaînes.\nCette fonction gère la division de grands nombres qui peuvent dépasser la limite des entiers\nou des flottants en PHP. Elle ne renvoie que la partie entière du quotient.\n\nEntrées :\n- $dividend : Chaîne représentant le dividende (le nombre à diviser).\n- $divisor : Chaîne représentant le diviseur (le nombre par lequel nous divisons).\n\nSortie :\n- Renvoie une chaîne représentant la partie entière du quotient.\n\nCas d'exemple :\n- largeNumberDivision(\"2376\", \"24\") renvoie \"99\"\n- largeNumberDivision(\"1000\", \"10\") renvoie \"100\"",
      "de": "Führt die Division von zwei großen Zahlen durch, die als Zeichenfolgen angegeben sind.  \nDiese Funktion behandelt die Division von großen Zahlen, die das Integer- oder Float-Limit in PHP überschreiten können. Sie gibt nur den ganzzahligen Teil des Quotienten zurück.\n\nEingaben:\n- $dividend: Zeichenfolge, die den Dividenden darstellt (die Zahl, die geteilt werden soll).\n- $divisor: Zeichenfolge, die den Divisor darstellt (die Zahl, durch die wir teilen).\n\nAusgabe:\n- Gibt eine Zeichenfolge zurück, die den ganzzahligen Teil des Quotienten darstellt.\n\nBeispiel-Fälle:\n- largeNumberDivision(\"2376\", \"24\") gibt \"99\" zurück\n- largeNumberDivision(\"1000\", \"10\") gibt \"100\" zurück",
      "ha": "Yana yin rabon lambobi masu girma guda biyu da aka bayar a matsayin igiyoyi.\nWannan aikin yana kula da rabon lambobi masu girma waɗanda na iya wuce iyakar integer\nko iyakar float a cikin PHP. Yana dawo da ɓangaren cikakken lambar kawai na sakamakon rabo.\n\nShigarwa:\n- $dividend: Igiya mai wakiltar abin da za a raba (lambar da za a raba).\n- $divisor: Igiya mai wakiltar abin da za a raba da shi (lambar da za mu raba da ita).\n\nFitarwa:\n- Yana dawo da igiya mai wakiltar ɓangaren cikakken lambar na sakamakon rabo.\n\nMisalan Lokuta:\n- largeNumberDivision(\"2376\", \"24\") yana dawo da \"99\"\n- largeNumberDivision(\"1000\", \"10\") yana dawo da \"100\"",
      "hi": "दो बड़े संख्याओं का विभाजन करता है जो स्ट्रिंग्स के रूप में दी गई हैं।\nयह फ़ंक्शन बड़े संख्याओं के विभाजन को संभालता है जो PHP में पूर्णांक या फ्लोट सीमा को पार कर सकती हैं। यह केवल भाजक के पूर्णांक भाग को लौटाता है।\n\nइनपुट्स:\n- $dividend: स्ट्रिंग जो लाभांश का प्रतिनिधित्व करती है (वह संख्या जिसे विभाजित किया जाना है)।\n- $divisor: स्ट्रिंग जो भाजक का प्रतिनिधित्व करती है (वह संख्या जिससे हम विभाजित करते हैं)।\n\nआउटपुट:\n- एक स्ट्रिंग लौटाता है जो भाजक के पूर्णांक भाग का प्रतिनिधित्व करती है।\n\nउदाहरण मामले:\n- largeNumberDivision(\"2376\", \"24\") \"99\" लौटाता है\n- largeNumberDivision(\"1000\", \"10\") \"100\" लौटाता है",
      "hu": "Elvégzi két nagy szám osztását, amelyeket karakterláncként adnak meg.\nEz a függvény kezeli a nagy számok osztását, amelyek meghaladhatják a PHP-ben az egész vagy lebegőpontos határt. Csak az osztási hányados egész részét adja vissza.\n\nBemenetek:\n- $dividend: Karakterlánc, amely az osztandót (a számot, amelyet osztunk) képviseli.\n- $divisor: Karakterlánc, amely az osztót (a számot, amellyel osztunk) képviseli.\n\nKimenet:\n- Visszaad egy karakterláncot, amely az osztási hányados egész részét képviseli.\n\nPélda esetek:\n- largeNumberDivision(\"2376\", \"24\") visszaadja \"99\"\n- largeNumberDivision(\"1000\", \"10\") visszaadja \"100\""
    },
    "docstring_bertscore": {
      "sq": "0.991175050801001",
      "hy": "0.9844740562664079",
      "bn": "0.9458126389017774",
      "bg": "0.9895689255399528",
      "zh": "0.9583716406338513",
      "fr": "0.9801226605090767",
      "de": "0.9911766398440492",
      "ha": "0.9471126747456506",
      "hi": "0.971242690694531",
      "hu": "0.9726078773033837"
    }
  },
  {
    "task_id": "PHP/24",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\n * This function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n * - The function takes two positive integers 'a' and 'b' as inputs.\n * - It finds the largest integer 'x' that satisfies the conditions mentioned above.\n * \n * Args:\n *      $a (int): The base number, must be greater than 1.\n *      $b (int): The comparison number.\n * \n * Returns:\n *      int: The largest integer x satisfying the conditions.\n * \n * Examples:\n *      - If a = 10000 and b = 1000000000001, then the output should be 3.\n *      - If a = 3 and b = 27, then the output should be 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin më të madh të plotë x të tillë që ax <= b < ax+1 ose x <= logab < x + 1.\n * Kjo funksion ndihmon në kuptimin e marrëdhënies midis dy numrave në terma të logaritmeve dhe eksponentëve.\n * - Funksioni merr dy numra të plotë pozitivë 'a' dhe 'b' si hyrje.\n * - Gjen numrin më të madh të plotë 'x' që plotëson kushtet e përmendura më sipër.\n * \n * Argumentet:\n *      $a (int): Numri bazë, duhet të jetë më i madh se 1.\n *      $b (int): Numri për krahasim.\n * \n * Kthen:\n *      int: Numri më i madh i plotë x që plotëson kushtet.\n * \n * Shembuj:\n *      - Nëse a = 10000 dhe b = 1000000000001, atëherë rezultati duhet të jetë 3.\n *      - Nëse a = 3 dhe b = 27, atëherë rezultati duhet të jetë 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է ամենամեծ ամբողջ թիվը x, այնպես որ ax <= b < ax+1 կամ x <= logab < x + 1:\n * Այս ֆունկցիան օգնում է հասկանալ երկու թվերի միջև կապը լոգարիթմների և աստիճանների տեսանկյունից:\n * - Ֆունկցիան ընդունում է երկու դրական ամբողջ թվեր 'a' և 'b' որպես մուտքային տվյալներ:\n * - Այն գտնում է ամենամեծ ամբողջ թիվը 'x', որը բավարարում է վերը նշված պայմանները:\n * \n * Պարամետրեր:\n *      $a (int): Հիմնական թիվը, պետք է լինի 1-ից մեծ:\n *      $b (int): Համեմատվող թիվը:\n * \n * Վերադարձնում է:\n *      int: Ամենամեծ ամբողջ թիվը x, որը բավարարում է պայմանները:\n * \n * Օրինակներ:\n *      - Եթե a = 10000 և b = 1000000000001, ապա արդյունքը պետք է լինի 3:\n *      - Եթե a = 3 և b = 27, ապա արդյունքը պետք է լինի 3:\n */\n\nfunction calculateLogLimit($a, $b) ",
      "bn": "<?php\n\n\n/**\n * এমন বৃহত্তম পূর্ণসংখ্যা x গণনা করে যা ax <= b < ax+1 বা x <= logab < x + 1।\n * এই ফাংশনটি লগারিদম এবং সূচকের ক্ষেত্রে দুটি সংখ্যার মধ্যে সম্পর্ক বোঝাতে সাহায্য করে।\n * - ফাংশনটি দুটি ধনাত্মক পূর্ণসংখ্যা 'a' এবং 'b' ইনপুট হিসেবে নেয়।\n * - এটি এমন বৃহত্তম পূর্ণসংখ্যা 'x' খুঁজে বের করে যা উপরে উল্লেখিত শর্তগুলি পূরণ করে।\n * \n * Args:\n *      $a (int): ভিত্তি সংখ্যা, যা 1 এর চেয়ে বড় হতে হবে।\n *      $b (int): তুলনা সংখ্যা।\n * \n * Returns:\n *      int: শর্তগুলি পূরণকারী বৃহত্তম পূর্ণসংখ্যা x।\n * \n * উদাহরণ:\n *      - যদি a = 10000 এবং b = 1000000000001 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n *      - যদি a = 3 এবং b = 27 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n */\n\nfunction calculateLogLimit($a, $b) ",
      "bg": "<?php\n\n\n/**\n * Изчислява най-голямото цяло число x, такова че ax <= b < ax+1 или x <= logab < x + 1.\n * Тази функция помага за разбирането на връзката между две числа в термини на логаритми и степени.\n * - Функцията приема две положителни цели числа 'a' и 'b' като вход.\n * - Тя намира най-голямото цяло число 'x', което удовлетворява гореспоменатите условия.\n * \n * Аргументи:\n *      $a (int): Основното число, трябва да бъде по-голямо от 1.\n *      $b (int): Числото за сравнение.\n * \n * Връща:\n *      int: Най-голямото цяло число x, което удовлетворява условията.\n * \n * Примери:\n *      - Ако a = 10000 и b = 1000000000001, тогава изходът трябва да бъде 3.\n *      - Ако a = 3 и b = 27, тогава изходът трябва да бъде 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "zh": "<?php\n\n\n/**\n * 计算最大的整数 x 使得 ax <= b < ax+1 或 x <= logab < x + 1。\n * 此函数有助于理解两个数字在对数和指数方面的关系。\n * - 该函数接受两个正整数 'a' 和 'b' 作为输入。\n * - 它找到满足上述条件的最大整数 'x'。\n * \n * 参数:\n *      $a (int): 基数，必须大于 1。\n *      $b (int): 比较数。\n * \n * 返回:\n *      int: 满足条件的最大整数 x。\n * \n * 示例:\n *      - 如果 a = 10000 且 b = 1000000000001，则输出应为 3。\n *      - 如果 a = 3 且 b = 27，则输出应为 3。\n */\n\nfunction calculateLogLimit($a, $b) ",
      "fr": "<?php\n\n\n/**\n * Calcule le plus grand entier x tel que ax <= b < ax+1 ou x <= logab < x + 1.\n * Cette fonction aide à comprendre la relation entre deux nombres en termes de logarithmes et d'exposants.\n * - La fonction prend deux entiers positifs 'a' et 'b' en entrée.\n * - Elle trouve le plus grand entier 'x' qui satisfait les conditions mentionnées ci-dessus.\n * \n * Args:\n *      $a (int): Le nombre de base, doit être supérieur à 1.\n *      $b (int): Le nombre de comparaison.\n * \n * Returns:\n *      int: Le plus grand entier x satisfaisant les conditions.\n * \n * Examples:\n *      - Si a = 10000 et b = 1000000000001, alors le résultat devrait être 3.\n *      - Si a = 3 et b = 27, alors le résultat devrait être 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "de": "<?php\n\n\n/**\n * Berechnet die größte ganze Zahl x, so dass ax <= b < ax+1 oder x <= logab < x + 1.\n * Diese Funktion hilft, die Beziehung zwischen zwei Zahlen in Bezug auf Logarithmen und Exponenten zu verstehen.\n * - Die Funktion nimmt zwei positive ganze Zahlen 'a' und 'b' als Eingaben.\n * - Sie findet die größte ganze Zahl 'x', die die oben genannten Bedingungen erfüllt.\n * \n * Args:\n *      $a (int): Die Basiszahl, muss größer als 1 sein.\n *      $b (int): Die Vergleichszahl.\n * \n * Returns:\n *      int: Die größte ganze Zahl x, die die Bedingungen erfüllt.\n * \n * Beispiele:\n *      - Wenn a = 10000 und b = 1000000000001, dann sollte die Ausgabe 3 sein.\n *      - Wenn a = 3 und b = 27, dann sollte die Ausgabe 3 sein.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige mafi girman cikakken lamba x wanda ax <= b < ax+1 ko x <= logab < x + 1.\n * Wannan aikin yana taimakawa wajen fahimtar dangantaka tsakanin lambobi biyu dangane da logaritm da kuma masu daraja.\n * - Aikin yana karɓar lambobi biyu masu kyau 'a' da 'b' azaman shigarwa.\n * - Yana nemo mafi girman cikakken lamba 'x' wanda ya cika sharuɗɗan da aka ambata a sama.\n * \n * Args:\n *      $a (int): Lambar tushe, dole ne ta zama mafi girma fiye da 1.\n *      $b (int): Lambar kwatance.\n * \n * Returns:\n *      int: Mafi girman cikakken lamba x da ke cika sharuɗɗan.\n * \n * Misalai:\n *      - Idan a = 10000 kuma b = 1000000000001, to fitarwa ya kamata ya zama 3.\n *      - Idan a = 3 kuma b = 27, to fitarwa ya kamata ya zama 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hi": "<?php\n\n\n/**\n * सबसे बड़ा पूर्णांक x गणना करता है जिससे ax <= b < ax+1 या x <= logab < x + 1.\n * यह फ़ंक्शन लघुगणक और घातांक के संदर्भ में दो संख्याओं के बीच संबंध को समझने में मदद करता है।\n * - यह फ़ंक्शन दो धनात्मक पूर्णांक 'a' और 'b' को इनपुट के रूप में लेता है।\n * - यह सबसे बड़ा पूर्णांक 'x' ढूंढता है जो ऊपर उल्लिखित शर्तों को संतुष्ट करता है।\n * \n * तर्क:\n *      $a (int): आधार संख्या, जो 1 से अधिक होनी चाहिए।\n *      $b (int): तुलना संख्या।\n * \n * वापसी:\n *      int: सबसे बड़ा पूर्णांक x जो शर्तों को संतुष्ट करता है।\n * \n * उदाहरण:\n *      - यदि a = 10000 और b = 1000000000001, तो आउटपुट 3 होना चाहिए।\n *      - यदि a = 3 और b = 27, तो आउटपुट 3 होना चाहिए।\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a legnagyobb x egész számot, amelyre ax <= b < ax+1 vagy x <= logab < x + 1.\n * Ez a függvény segít megérteni a két szám közötti kapcsolatot logaritmusok és hatványok tekintetében.\n * - A függvény két pozitív egész számot, 'a'-t és 'b'-t vesz bemenetként.\n * - Megtalálja a legnagyobb 'x' egész számot, amely kielégíti a fent említett feltételeket.\n * \n * Argumentumok:\n *      $a (int): Az alap szám, nagyobbnak kell lennie, mint 1.\n *      $b (int): Az összehasonlító szám.\n * \n * Visszatér:\n *      int: A legnagyobb x egész szám, amely kielégíti a feltételeket.\n * \n * Példák:\n *      - Ha a = 10000 és b = 1000000000001, akkor a kimenetnek 3-nak kell lennie.\n *      - Ha a = 3 és b = 27, akkor a kimenetnek 3-nak kell lennie.\n */\n\nfunction calculateLogLimit($a, $b) "
    },
    "prompt_bertscore": {
      "sq": "0.9762271214762205",
      "hy": "0.9699176274226472",
      "bn": "0.9816169568656021",
      "bg": "0.9785556654330925",
      "zh": "0.9679251660704863",
      "fr": "0.9916219691583295",
      "de": "0.9931138819502825",
      "ha": "0.985670009790619",
      "hi": "0.9758755457017887",
      "hu": "0.9777363151113235"
    },
    "canonical_solution": "{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}",
    "instruction": {
      "en": "Write a PHP function `function calculateLogLimit($a, $b)` to solve the following problem:\nCalculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\nThis function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n- The function takes two positive integers 'a' and 'b' as inputs.\n- It finds the largest integer 'x' that satisfies the conditions mentioned above.\n\nArgs:\n$a (int): The base number, must be greater than 1.\n$b (int): The comparison number.\n\nReturns:\nint: The largest integer x satisfying the conditions.\n\nExamples:\n- If a = 10000 and b = 1000000000001, then the output should be 3.\n- If a = 3 and b = 27, then the output should be 3.",
      "sq": "Shkruani një funksion PHP `function calculateLogLimit($a, $b)` për të zgjidhur problemin e mëposhtëm:\nLlogarit numrin më të madh të plotë x të tillë që ax <= b < ax+1 ose x <= logab < x + 1.\nKy funksion ndihmon në kuptimin e marrëdhënies midis dy numrave në terma të logaritmeve dhe eksponentëve.\n- Funksioni merr dy numra të plotë pozitivë 'a' dhe 'b' si hyrje.\n- Ai gjen numrin më të madh të plotë 'x' që plotëson kushtet e përmendura më sipër.\n\nArgumentet:\n$a (int): Numri bazë, duhet të jetë më i madh se 1.\n$b (int): Numri krahasues.\n\nKthen:\nint: Numri më i madh i plotë x që plotëson kushtet.\n\nShembuj:\n- Nëse a = 10000 dhe b = 1000000000001, atëherë rezultati duhet të jetë 3.\n- Nëse a = 3 dhe b = 27, atëherë rezultati duhet të jetë 3.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateLogLimit($a, $b)` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է ամենամեծ ամբողջ թիվը x, այնպես, որ ax <= b < ax+1 կամ x <= logab < x + 1:\nԱյս ֆունկցիան օգնում է հասկանալ երկու թվերի միջև կապը լոգարիթմների և աստիճանների տեսանկյունից:\n- Ֆունկցիան ընդունում է երկու դրական ամբողջ թիվ 'a' և 'b' որպես մուտք:\n- Այն գտնում է ամենամեծ ամբողջ թիվը 'x', որը բավարարում է վերոնշյալ պայմանները:\n\nԱրգումենտներ:\n$a (int): Հիմնական թիվը, պետք է լինի 1-ից մեծ:\n$b (int): Համեմատվող թիվը:\n\nՎերադարձնում է:\nint: Ամենամեծ ամբողջ թիվը x, որը բավարարում է պայմանները:\n\nՕրինակներ:\n- Եթե a = 10000 և b = 1000000000001, ապա արդյունքը պետք է լինի 3:\n- Եթե a = 3 և b = 27, ապա արդյունքը պետք է լինի 3:",
      "bn": "একটি PHP ফাংশন `function calculateLogLimit($a, $b)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nসবচেয়ে বড় পূর্ণসংখ্যা x গণনা করে যাতে ax <= b < ax+1 বা x <= logab < x + 1 হয়।\nএই ফাংশন লগারিদম এবং সূচকের দিক থেকে দুটি সংখ্যার মধ্যে সম্পর্ক বোঝাতে সহায়ক।\n- ফাংশনটি দুটি ধনাত্মক পূর্ণসংখ্যা 'a' এবং 'b' ইনপুট হিসেবে গ্রহণ করে।\n- এটি সবচেয়ে বড় পূর্ণসংখ্যা 'x' খুঁজে বের করে যা উপরে উল্লিখিত শর্তগুলি পূরণ করে।\n\nআর্গুমেন্টসমূহ:\n$a (int): ভিত্তি সংখ্যা, 1 এর চেয়ে বড় হতে হবে।\n$b (int): তুলনা সংখ্যা।\n\nফেরত দেয়:\nint: সবচেয়ে বড় পূর্ণসংখ্যা x যা শর্তগুলি পূরণ করে।\n\nউদাহরণসমূহ:\n- যদি a = 10000 এবং b = 1000000000001 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n- যদি a = 3 এবং b = 27 হয়, তাহলে আউটপুট হওয়া উচিত 3।",
      "bg": "Напишете PHP функция `function calculateLogLimit($a, $b)`, за да решите следния проблем:\nИзчислява най-голямото цяло число x, такова че ax <= b < ax+1 или x <= logab < x + 1.\nТази функция помага за разбиране на връзката между две числа по отношение на логаритми и степени.\n- Функцията приема два положителни цели числа 'a' и 'b' като входни данни.\n- Тя намира най-голямото цяло число 'x', което удовлетворява споменатите условия.\n\nАргументи:\n$a (int): Основното число, трябва да бъде по-голямо от 1.\n$b (int): Числото за сравнение.\n\nВръща:\nint: Най-голямото цяло число x, което удовлетворява условията.\n\nПримери:\n- Ако a = 10000 и b = 1000000000001, тогава изходът трябва да бъде 3.\n- Ако a = 3 и b = 27, тогава изходът трябва да бъде 3.",
      "zh": "编写一个 PHP 函数 `function calculateLogLimit($a, $b)` 来解决以下问题：\n计算最大的整数 x，使得 ax <= b < ax+1 或 x <= logab < x + 1。\n此函数有助于理解两个数字在对数和指数方面的关系。\n- 该函数接受两个正整数 'a' 和 'b' 作为输入。\n- 它找到满足上述条件的最大整数 'x'。\n\n参数：\n$a (int): 基数，必须大于 1。\n$b (int): 比较数。\n\n返回：\nint: 满足条件的最大整数 x。\n\n示例：\n- 如果 a = 10000 且 b = 1000000000001，则输出应为 3。\n- 如果 a = 3 且 b = 27，则输出应为 3。",
      "fr": "Écrire une fonction PHP `function calculateLogLimit($a, $b)` pour résoudre le problème suivant :\nCalcule le plus grand entier x tel que ax <= b < ax+1 ou x <= logab < x + 1.\nCette fonction aide à comprendre la relation entre deux nombres en termes de logarithmes et d'exposants.\n- La fonction prend deux entiers positifs 'a' et 'b' en entrée.\n- Elle trouve le plus grand entier 'x' qui satisfait les conditions mentionnées ci-dessus.\n\nArgs:\n$a (int): Le nombre de base, doit être supérieur à 1.\n$b (int): Le nombre de comparaison.\n\nReturns:\nint: Le plus grand entier x satisfaisant les conditions.\n\nExemples :\n- Si a = 10000 et b = 1000000000001, alors le résultat doit être 3.\n- Si a = 3 et b = 27, alors le résultat doit être 3.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateLogLimit($a, $b)`, um das folgende Problem zu lösen:\nBerechnet die größte ganze Zahl x, so dass ax <= b < ax+1 oder x <= logab < x + 1.\nDiese Funktion hilft, die Beziehung zwischen zwei Zahlen in Bezug auf Logarithmen und Exponenten zu verstehen.\n- Die Funktion nimmt zwei positive ganze Zahlen 'a' und 'b' als Eingaben.\n- Sie findet die größte ganze Zahl 'x', die die oben genannten Bedingungen erfüllt.\n\nArgumente:\n$a (int): Die Basiszahl, muss größer als 1 sein.\n$b (int): Die Vergleichszahl.\n\nRückgabewert:\nint: Die größte ganze Zahl x, die die Bedingungen erfüllt.\n\nBeispiele:\n- Wenn a = 10000 und b = 1000000000001, dann sollte die Ausgabe 3 sein.\n- Wenn a = 3 und b = 27, dann sollte die Ausgabe 3 sein.",
      "ha": "Rubuta aikin PHP `function calculateLogLimit($a, $b)` don warware matsalar mai zuwa:\nYana ƙididdige mafi girman cikakken lamba x wanda ax <= b < ax+1 ko x <= logab < x + 1.\nWannan aikin yana taimakawa wajen fahimtar dangantaka tsakanin lambobi biyu dangane da logaritm da ƙididdiga.\n- Aikin yana karɓar lambobi biyu masu kyau 'a' da 'b' azaman shigarwa.\n- Yana nemo mafi girman cikakken lamba 'x' wanda ya cika yanayin da aka ambata a sama.\n\nArgs:\n$a (int): Lambar tushe, dole ne ya fi 1 girma.\n$b (int): Lambar kwatance.\n\nReturns:\nint: Mafi girman cikakken lamba x wanda ya cika yanayin.\n\nMisalai:\n- Idan a = 10000 kuma b = 1000000000001, to fitarwa ya kamata ya zama 3.\n- Idan a = 3 kuma b = 27, to fitarwa ya kamata ya zama 3.",
      "hi": "PHP फ़ंक्शन `function calculateLogLimit($a, $b)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nसबसे बड़ा पूर्णांक x गणना करता है ताकि ax <= b < ax+1 या x <= logab < x + 1।\nयह फ़ंक्शन लघुगणक और घातांक के संदर्भ में दो संख्याओं के बीच संबंध को समझने में मदद करता है।\n- फ़ंक्शन दो धनात्मक पूर्णांक 'a' और 'b' को इनपुट के रूप में लेता है।\n- यह सबसे बड़ा पूर्णांक 'x' ढूंढता है जो ऊपर उल्लिखित शर्तों को संतुष्ट करता है।\n\nआर्ग्स:\n$a (int): आधार संख्या, 1 से अधिक होनी चाहिए।\n$b (int): तुलना संख्या।\n\nवापसी:\nint: सबसे बड़ा पूर्णांक x जो शर्तों को संतुष्ट करता है।\n\nउदाहरण:\n- यदि a = 10000 और b = 1000000000001, तो आउटपुट 3 होना चाहिए।\n- यदि a = 3 और b = 27, तो आउटपुट 3 होना चाहिए।",
      "hu": "Írj egy PHP függvényt `function calculateLogLimit($a, $b)` a következő probléma megoldására:\nKiszámítja a legnagyobb egész számot x, amelyre ax <= b < ax+1 vagy x <= logab < x + 1.\nEz a függvény segít megérteni a két szám közötti kapcsolatot logaritmusok és hatványok tekintetében.\n- A függvény két pozitív egész számot, 'a'-t és 'b'-t vesz bemenetként.\n- Megkeresi a legnagyobb egész számot 'x', amely kielégíti a fent említett feltételeket.\n\nArgok:\n$a (int): Az alap szám, nagyobbnak kell lennie, mint 1.\n$b (int): Az összehasonlító szám.\n\nVisszatér:\nint: A legnagyobb egész szám x, amely kielégíti a feltételeket.\n\nPéldák:\n- Ha a = 10000 és b = 1000000000001, akkor a kimenet 3 kell legyen.\n- Ha a = 3 és b = 27, akkor a kimenet 3 kell legyen."
    },
    "instruction_bertscore": {
      "sq": "0.9833708631301402",
      "hy": "0.9498424520722132",
      "bn": "0.9840678571371916",
      "bg": "0.9726589253113097",
      "zh": "0.9714091429538382",
      "fr": "0.9904989129839582",
      "de": "0.9808544148328092",
      "ha": "0.9814783128596398",
      "hi": "0.9741375298677334",
      "hu": "0.9856306809751741"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateLogLimit(10000, 1000000000001) === 3);\n    assert(calculateLogLimit(3, 27) === 3);\n    assert(calculateLogLimit(2, 32) === 5);\n    assert(calculateLogLimit(5, 3125) === 5);\n   \n    \n}\n\nmain();\n?>",
    "entry_point": "calculateLogLimit",
    "signature": "function calculateLogLimit($a, $b)",
    "docstring": {
      "en": "Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\nThis function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n- The function takes two positive integers 'a' and 'b' as inputs.\n- It finds the largest integer 'x' that satisfies the conditions mentioned above.\n\nArgs:\n$a (int): The base number, must be greater than 1.\n$b (int): The comparison number.\n\nReturns:\nint: The largest integer x satisfying the conditions.\n\nExamples:\n- If a = 10000 and b = 1000000000001, then the output should be 3.\n- If a = 3 and b = 27, then the output should be 3.",
      "sq": "Llogarit numrin më të madh të plotë x të tillë që ax <= b < ax+1 ose x <= logab < x + 1.\nKjo funksion ndihmon në kuptimin e marrëdhënies midis dy numrave në terma të logaritmeve dhe eksponentëve.\n- Funksioni merr dy numra të plotë pozitivë 'a' dhe 'b' si hyrje.\n- Ai gjen numrin më të madh të plotë 'x' që plotëson kushtet e përmendura më sipër.\n\nArgumentet:\n$a (int): Numri bazë, duhet të jetë më i madh se 1.\n$b (int): Numri krahasues.\n\nKthen:\nint: Numri më i madh i plotë x që plotëson kushtet.\n\nShembuj:\n- Nëse a = 10000 dhe b = 1000000000001, atëherë rezultati duhet të jetë 3.\n- Nëse a = 3 dhe b = 27, atëherë rezultati duhet të jetë 3.",
      "hy": "Հաշվում է ամենամեծ ամբողջ թիվը x, այնպես, որ ax <= b < ax+1 կամ x <= logab < x + 1:\nԱյս ֆունկցիան օգնում է հասկանալ երկու թվերի միջև հարաբերությունը լոգարիթմների և աստիճանների առումով։\n- Ֆունկցիան ընդունում է երկու դրական ամբողջ թիվ՝ 'a' և 'b' որպես մուտքային տվյալներ։\n- Այն գտնում է ամենամեծ ամբողջ թիվը 'x', որը բավարարում է վերոնշյալ պայմաններին։\n\nԱրգումենտներ:\n$a (int): Հիմնական թիվը, պետք է լինի 1-ից մեծ։\n$b (int): Համեմատման թիվը։\n\nՎերադարձնում է:\nint: Ամենամեծ ամբողջ թիվը x, որը բավարարում է պայմաններին։\n\nՕրինակներ:\n- Եթե a = 10000 և b = 1000000000001, ապա արդյունքը պետք է լինի 3։\n- Եթե a = 3 և b = 27, ապա արդյունքը պետք է լինի 3։",
      "bn": "এমন বৃহত্তম পূর্ণসংখ্যা x গণনা করে যা ax <= b < ax+1 বা x <= logab < x + 1।\nএই ফাংশনটি লগারিদম এবং সূচকের দিক থেকে দুটি সংখ্যার মধ্যে সম্পর্ক বোঝাতে সাহায্য করে।\n- ফাংশনটি দুটি ধনাত্মক পূর্ণসংখ্যা 'a' এবং 'b' কে ইনপুট হিসেবে নেয়।\n- এটি সবচেয়ে বড় পূর্ণসংখ্যা 'x' খুঁজে বের করে যা উপরে উল্লেখিত শর্তগুলি পূরণ করে।\n\nArgs:\n$a (int): ভিত্তি সংখ্যা, যা 1 এর চেয়ে বড় হতে হবে।\n$b (int): তুলনা সংখ্যা।\n\nReturns:\nint: সবচেয়ে বড় পূর্ণসংখ্যা x যা শর্তগুলি পূরণ করে।\n\nExamples:\n- যদি a = 10000 এবং b = 1000000000001 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n- যদি a = 3 এবং b = 27 হয়, তাহলে আউটপুট হওয়া উচিত 3।",
      "bg": "Изчислява най-голямото цяло число x, такова че ax <= b < ax+1 или x <= logab < x + 1.\nТази функция помага за разбиране на връзката между две числа в термини на логаритми и степени.\n- Функцията приема две положителни цели числа 'a' и 'b' като вход.\n- Тя намира най-голямото цяло число 'x', което удовлетворява гореспоменатите условия.\n\nАргументи:\n$a (int): Основното число, трябва да бъде по-голямо от 1.\n$b (int): Числото за сравнение.\n\nВръща:\nint: Най-голямото цяло число x, което удовлетворява условията.\n\nПримери:\n- Ако a = 10000 и b = 1000000000001, тогава изходът трябва да бъде 3.\n- Ако a = 3 и b = 27, тогава изходът трябва да бъде 3.",
      "zh": "计算最大的整数 x，使得 ax <= b < ax+1 或 x <= logab < x + 1。\n此函数有助于理解两个数字之间在对数和指数方面的关系。  \n- 该函数接受两个正整数 'a' 和 'b' 作为输入。  \n- 它找到满足上述条件的最大整数 'x'。  \n\n参数：  \n$a (int): 基数，必须大于 1。  \n$b (int): 比较数。  \n\n返回：  \nint: 满足条件的最大整数 x。  \n\n示例：  \n- 如果 a = 10000 且 b = 1000000000001，则输出应为 3。  \n- 如果 a = 3 且 b = 27，则输出应为 3。",
      "fr": "Calcule le plus grand entier x tel que ax <= b < ax+1 ou x <= logab < x + 1.\nCette fonction aide à comprendre la relation entre deux nombres en termes de logarithmes et d'exposants.\n- La fonction prend deux entiers positifs 'a' et 'b' en entrée.\n- Elle trouve le plus grand entier 'x' qui satisfait les conditions mentionnées ci-dessus.\n\nArgs:\n$a (int): Le nombre de base, doit être supérieur à 1.\n$b (int): Le nombre de comparaison.\n\nReturns:\nint: Le plus grand entier x satisfaisant les conditions.\n\nExamples:\n- Si a = 10000 et b = 1000000000001, alors le résultat devrait être 3.\n- Si a = 3 et b = 27, alors le résultat devrait être 3.",
      "de": "Berechnet die größte ganze Zahl x, so dass ax <= b < ax+1 oder x <= logab < x + 1.\nDiese Funktion hilft, die Beziehung zwischen zwei Zahlen in Bezug auf Logarithmen und Exponenten zu verstehen.\n- Die Funktion nimmt zwei positive ganze Zahlen 'a' und 'b' als Eingaben.\n- Sie findet die größte ganze Zahl 'x', die die oben genannten Bedingungen erfüllt.\n\nArgumente:\n$a (int): Die Basiszahl, muss größer als 1 sein.\n$b (int): Die Vergleichszahl.\n\nRückgabe:\nint: Die größte ganze Zahl x, die die Bedingungen erfüllt.\n\nBeispiele:\n- Wenn a = 10000 und b = 1000000000001, dann sollte die Ausgabe 3 sein.\n- Wenn a = 3 und b = 27, dann sollte die Ausgabe 3 sein.",
      "ha": "Yana ƙididdige mafi girman cikakken lamba x wanda ax <= b < ax+1 ko x <= logab < x + 1.\nWannan aikin yana taimakawa wajen fahimtar dangantaka tsakanin lambobi biyu ta fuskar logaritm da ƙididdiga.\n- Aikin yana karɓar lambobi guda biyu masu kyau 'a' da 'b' a matsayin shigarwa.\n- Yana nemo mafi girman cikakken lamba 'x' wanda ya cika sharuɗɗan da aka ambata a sama.\n\nArgs:\n$a (int): Lambar tushe, dole ne ta zama mafi girma fiye da 1.\n$b (int): Lambar kwatanci.\n\nReturns:\nint: Mafi girman cikakken lamba x da ke cika sharuɗɗan.\n\nExamples:\n- Idan a = 10000 kuma b = 1000000000001, to sakamakon ya zama 3.\n- Idan a = 3 kuma b = 27, to sakamakon ya zama 3.",
      "hi": "सबसे बड़ा पूर्णांक x गणना करता है जिससे ax <= b < ax+1 या x <= logab < x + 1.\nयह फ़ंक्शन लघुगणक और घातांक के संदर्भ में दो संख्याओं के बीच संबंध को समझने में मदद करता है।\n- फ़ंक्शन दो धनात्मक पूर्णांक 'a' और 'b' को इनपुट के रूप में लेता है।\n- यह सबसे बड़ा पूर्णांक 'x' ढूंढता है जो ऊपर उल्लिखित शर्तों को संतुष्ट करता है।\n\nArgs:\n$a (int): आधार संख्या, 1 से अधिक होनी चाहिए।\n$b (int): तुलना संख्या।\n\nReturns:\nint: सबसे बड़ा पूर्णांक x जो शर्तों को संतुष्ट करता है।\n\nExamples:\n- यदि a = 10000 और b = 1000000000001, तो आउटपुट 3 होना चाहिए।\n- यदि a = 3 और b = 27, तो आउटपुट 3 होना चाहिए।",
      "hu": "Kiszámítja a legnagyobb x egész számot úgy, hogy ax <= b < ax+1 vagy x <= logab < x + 1.\nEz a függvény segít megérteni két szám közötti kapcsolatot logaritmusok és hatványok szempontjából.\n- A függvény két pozitív egész számot, 'a'-t és 'b'-t vesz bemenetként.\n- Megtalálja a legnagyobb 'x' egész számot, amely kielégíti a fent említett feltételeket.\n\nArgs:\n$a (int): Az alap szám, nagyobbnak kell lennie, mint 1.\n$b (int): Az összehasonlító szám.\n\nReturns:\nint: A legnagyobb x egész szám, amely kielégíti a feltételeket.\n\nExamples:\n- Ha a = 10000 és b = 1000000000001, akkor a kimenet 3 kell legyen.\n- Ha a = 3 és b = 27, akkor a kimenet 3 kell legyen."
    },
    "docstring_bertscore": {
      "sq": "0.9797398997648225",
      "hy": "0.9591850320441891",
      "bn": "0.9877814507410199",
      "bg": "0.9707006283846867",
      "zh": "0.963864167930228",
      "fr": "0.9875057517721435",
      "de": "0.9843957958962802",
      "ha": "0.9627663378142481",
      "hi": "0.9757619291238367",
      "hu": "0.9808256134275591"
    }
  },
  {
    "task_id": "PHP/25",
    "prompt": {
      "en": "<?php\n\n/**\n   * Distribute candy to five children sitting around a round table.\n   *Each child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\n   * Input: An array of five integers representing the number of candies each child has.\n   * Output: An array of five integers representing the number of candies each child has after playing the game.\n   */\n\n function distributeCandies(array $candies): array",
      "sq": "<?php\n\n/**\n   * Shpërndaj karamele pesë fëmijëve që janë ulur rreth një tavoline të rrumbullakët.\n   * Çdo fëmijë fillimisht ka një numër të caktuar karamelesh. Ata luajnë një lojë ku, duke filluar me një fëmijë dhe duke shkuar në drejtim të akrepave të orës, çdo fëmijë ndan karamelet e tij në tre pjesë të barabarta, dhe nëse ka karamele shtesë që nuk mund të ndahen në mënyrë të barabartë, fëmija i ha ato. Çdo fëmijë mban një kopje dhe u jep dy kopjet e tjera fqinjëve të tyre. Pesë fëmijët përfunduan operacionet e mësipërme me radhë.\n   * Hyrja: Një varg me pesë numra të plotë që përfaqëson numrin e karameleve që ka secili fëmijë.\n   * Dalja: Një varg me pesë numra të plotë që përfaqëson numrin e karameleve që ka secili fëmijë pas lojës.\n   */\n\n function distributeCandies(array $candies): array",
      "hy": "<?php\n\n/**\n   * Բաշխել կոնֆետները հինգ երեխաներին, որոնք նստած են կլոր սեղանի շուրջ:\n   *Յուրաքանչյուր երեխա սկզբում ունի որոշակի քանակությամբ կոնֆետներ: Նրանք խաղում են խաղ, որտեղ, սկսելով մեկ երեխայից և շարժվելով ժամացույցի սլաքի ուղղությամբ, յուրաքանչյուր երեխա բաժանում է իր կոնֆետները երեք հավասար մասերի, և եթե կան ավելորդ կոնֆետներ, որոնք հնարավոր չէ հավասարապես բաժանել, երեխան ուտում է դրանք: Յուրաքանչյուր երեխա պահում է մեկ օրինակ և տալիս է մյուս երկու օրինակները իր հարևաններին: Հինգ երեխաները հերթով կատարեցին վերը նշված գործողությունները:\n   * Մուտք: Հինգ ամբողջ թվերի զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը:\n   * Ելք: Հինգ ամբողջ թվերի զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը խաղից հետո:\n   */\n\n function distributeCandies(array $candies): array",
      "bn": "<?php\n\n/**\n   * পাঁচটি শিশুকে একটি গোল টেবিলের চারপাশে ক্যান্ডি বিতরণ করুন।\n   *প্রতিটি শিশুর প্রাথমিকভাবে নির্দিষ্ট সংখ্যক ক্যান্ডি থাকে। তারা একটি খেলা খেলে যেখানে, একটি শিশুর সাথে শুরু করে, এবং ঘড়ির কাঁটার দিকে, প্রতিটি শিশু তাদের ক্যান্ডি তিনটি সমান ভাগে ভাগ করে, এবং যদি অতিরিক্ত ক্যান্ডি থাকে যা সমানভাবে ভাগ করা যায় না, শিশু সেগুলি খেয়ে ফেলে। প্রতিটি শিশু একটি কপি রাখে এবং অন্য দুটি কপি তাদের প্রতিবেশীদের দেয়। পাঁচটি শিশু পালাক্রমে উপরের অপারেশনগুলি সম্পন্ন করে।\n   * ইনপুট: একটি অ্যারের পাঁচটি পূর্ণসংখ্যা যা প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।\n   * আউটপুট: একটি অ্যারের পাঁচটি পূর্ণসংখ্যা যা খেলা খেলার পরে প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।\n   */\n\n function distributeCandies(array $candies): array",
      "bg": "<?php\n\n/**\n   * Разпределете бонбони на пет деца, седящи около кръгла маса.\n   * Всяко дете първоначално има определен брой бонбони. Те играят игра, в която, започвайки с едно дете и движейки се по часовниковата стрелка, всяко дете разделя своите бонбони на три равни части и ако има допълнителни бонбони, които не могат да бъдат разделени равномерно, детето ги изяжда. Всяко дете запазва едно копие и дава другите две копия на своите съседи. Петте деца завършват гореописаните операции последователно.\n   * Вход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има.\n   * Изход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има след играта.\n   */\n\n function distributeCandies(array $candies): array",
      "zh": "<?php\n\n/**\n   * 将糖果分发给围坐在圆桌旁的五个孩子。\n   * 每个孩子最初都有一定数量的糖果。他们玩一个游戏，从一个孩子开始，顺时针方向，每个孩子将他们的糖果分成三等份，如果有多余的糖果不能被平分，孩子就吃掉它们。每个孩子保留一份，并将另外两份给他们的邻居。五个孩子依次完成上述操作。\n   * 输入：一个包含五个整数的数组，表示每个孩子拥有的糖果数量。\n   * 输出：一个包含五个整数的数组，表示游戏结束后每个孩子拥有的糖果数量。\n   */\n\n function distributeCandies(array $candies): array",
      "fr": "<?php\n\n/**\n   * Distribuer des bonbons à cinq enfants assis autour d'une table ronde.\n   * Chaque enfant a initialement un certain nombre de bonbons. Ils jouent à un jeu où, en commençant par un enfant et en allant dans le sens des aiguilles d'une montre, chaque enfant divise ses bonbons en trois parts égales, et s'il y a des bonbons supplémentaires qui ne peuvent pas être divisés également, l'enfant les mange. Chaque enfant garde une copie et donne les deux autres copies à ses voisins. Les cinq enfants ont complété les opérations ci-dessus à tour de rôle.\n   * Entrée : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a.\n   * Sortie : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a après avoir joué au jeu.\n   */\n\n function distributeCandies(array $candies): array",
      "de": "<?php\n\n/**\n   * Verteilen Sie Süßigkeiten an fünf Kinder, die um einen runden Tisch sitzen.\n   * Jedes Kind hat anfangs eine bestimmte Anzahl von Süßigkeiten. Sie spielen ein Spiel, bei dem jedes Kind, beginnend mit einem Kind und im Uhrzeigersinn, seine Süßigkeiten in drei gleiche Teile aufteilt, und wenn es zusätzliche Süßigkeiten gibt, die nicht gleichmäßig aufgeteilt werden können, isst das Kind sie. Jedes Kind behält eine Kopie und gibt die anderen beiden Kopien an seine Nachbarn weiter. Die fünf Kinder haben die oben genannten Operationen der Reihe nach abgeschlossen.\n   * Eingabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind hat.\n   * Ausgabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind nach dem Spiel hat.\n   */\n\n function distributeCandies(array $candies): array",
      "ha": "<?php\n\n/**\n   * Raba alewa ga yara biyar da ke zaune a kusa da tebur mai zagaye.\n   * Kowane yaro yana da wasu alewa a farko. Suna wasa inda, farawa da yaro daya, kuma suna tafiya a agogo, kowane yaro yana raba alewarsa zuwa kashi uku daidai, kuma idan akwai karin alewa da ba za a iya raba su daidai ba, yaron yana cin su. Kowane yaro yana ajiye kwafi daya kuma yana ba makwabtansa sauran kwafi biyu. Yara biyar sun kammala ayyukan da ke sama a jere.\n   * Shigarwa: Jeri na lambobi biyar da ke wakiltar yawan alewa da kowane yaro ke da shi.\n   * Fitarwa: Jeri na lambobi biyar da ke wakiltar yawan alewa da kowane yaro ke da shi bayan sun buga wasan.\n   */\n\n function distributeCandies(array $candies): array",
      "hi": "<?php\n\n/**\n   * पाँच बच्चों को गोल मेज के चारों ओर बैठाकर कैंडी वितरित करें।\n   *प्रत्येक बच्चे के पास प्रारंभ में एक निश्चित संख्या में कैंडी होती है। वे एक खेल खेलते हैं जहाँ, एक बच्चे से शुरू होकर, और घड़ी की दिशा में चलते हुए, प्रत्येक बच्चा अपनी कैंडी को तीन समान भागों में विभाजित करता है, और यदि कोई अतिरिक्त कैंडी होती है जो समान रूप से विभाजित नहीं की जा सकती, तो बच्चा उन्हें खा लेता है। प्रत्येक बच्चा एक प्रति अपने पास रखता है और अन्य दो प्रतियाँ अपने पड़ोसियों को देता है। पाँच बच्चों ने बारी-बारी से उपरोक्त संचालन पूरा किया।\n   * इनपुट: पाँच पूर्णांकों की एक सरणी जो प्रत्येक बच्चे के पास कैंडी की संख्या का प्रतिनिधित्व करती है।\n   * आउटपुट: पाँच पूर्णांकों की एक सरणी जो खेल खेलने के बाद प्रत्येक बच्चे के पास कैंडी की संख्या का प्रतिनिधित्व करती है।\n   */\n\n function distributeCandies(array $candies): array",
      "hu": "<?php\n\n/**\n   * Osszunk szét cukorkát öt gyerek között, akik egy kerek asztal körül ülnek.\n   * Minden gyerek kezdetben egy bizonyos számú cukorkával rendelkezik. Egy játékot játszanak, ahol az egyik gyerektől kezdve, az óramutató járásával megegyező irányban, minden gyerek három egyenlő részre osztja a cukorkáit, és ha vannak extra cukorkák, amelyeket nem lehet egyenlően elosztani, a gyerek megeszi azokat. Minden gyerek megtart egy példányt, és a másik két példányt odaadja a szomszédainak. Az öt gyerek sorban elvégzi a fenti műveleteket.\n   * Bemenet: Egy öt egész számot tartalmazó tömb, amely azt jelzi, hogy hány cukorkája van kezdetben minden gyereknek.\n   * Kimenet: Egy öt egész számot tartalmazó tömb, amely azt jelzi, hogy hány cukorkája van minden gyereknek a játék után.\n   */\n\n function distributeCandies(array $candies): array"
    },
    "prompt_bertscore": {
      "sq": "0.9769002798375477",
      "hy": "0.9624139675182922",
      "bn": "0.9671568637566433",
      "bg": "0.9696727161628312",
      "zh": "0.9403369951877886",
      "fr": "0.9753330861311824",
      "de": "0.9673968092569335",
      "ha": "0.9452364121663951",
      "hi": "0.9644247028655084",
      "hu": "0.9452401861436348"
    },
    "canonical_solution": " {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}",
    "instruction": {
      "en": "Write a PHP function `function distributeCandies(array $candies): array` to solve the following problem:\nDistribute candy to five children sitting around a round table.\nEach child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\nInput: An array of five integers representing the number of candies each child has.\nOutput: An array of five integers representing the number of candies each child has after playing the game.",
      "sq": "Shkruani një funksion PHP `function distributeCandies(array $candies): array` për të zgjidhur problemin e mëposhtëm:\nShpërndani karamele për pesë fëmijë që janë ulur rreth një tryeze të rrumbullakët.\nSecili fëmijë fillimisht ka një numër të caktuar karamelesh. Ata luajnë një lojë ku, duke filluar me një fëmijë dhe duke shkuar në drejtim të akrepave të orës, secili fëmijë ndan karamelet e tij në tre pjesë të barabarta, dhe nëse ka karamele shtesë që nuk mund të ndahen në mënyrë të barabartë, fëmija i ha ato. Secili fëmijë mban një kopje dhe i jep dy kopjet e tjera fqinjëve të tij. Pesë fëmijët përfunduan operacionet e mësipërme me radhë.\nHyrja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë.\nDalja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë pasi të kenë luajtur lojën.",
      "hy": "Գրեք PHP ֆունկցիա `function distributeCandies(array $candies): array` հետևյալ խնդիրը լուծելու համար:\nԿոնֆետները բաշխեք հինգ երեխաներին, որոնք նստած են կլոր սեղանի շուրջ:\nՅուրաքանչյուր երեխա սկզբում ունի որոշակի քանակությամբ կոնֆետներ։ Նրանք խաղում են խաղ, որտեղ, սկսելով մեկ երեխայից և շարժվելով ժամացույցի սլաքի ուղղությամբ, յուրաքանչյուր երեխա իր կոնֆետները բաժանում է երեք հավասար մասի, և եթե կան ավելորդ կոնֆետներ, որոնք հնարավոր չէ հավասարապես բաժանել, երեխան դրանք ուտում է։ Յուրաքանչյուր երեխա պահում է մեկ օրինակ և տալիս է մյուս երկու օրինակները իր հարևաններին։ Հինգ երեխաները հերթով ավարտեցին վերը նշված գործողությունները։\nՄուտք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը։\nԵլք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը խաղը խաղալուց հետո։",
      "bn": "PHP ফাংশন `function distributeCandies(array $candies): array` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nক্যান্ডি পাঁচটি শিশুর মধ্যে বিতরণ করুন যারা একটি গোল টেবিলের চারপাশে বসে আছে।\nপ্রত্যেক শিশুর শুরুতে নির্দিষ্ট সংখ্যক ক্যান্ডি থাকে। তারা একটি খেলা খেলে যেখানে, একটি শিশুর সাথে শুরু করে, এবং ঘড়ির কাঁটার দিকে চলতে থাকে, প্রতিটি শিশু তাদের ক্যান্ডি তিনটি সমান অংশে ভাগ করে, এবং যদি অতিরিক্ত ক্যান্ডি থাকে যা সমানভাবে ভাগ করা যায় না, শিশু সেগুলি খেয়ে ফেলে। প্রতিটি শিশু একটি কপি রাখে এবং অন্য দুটি কপি তাদের প্রতিবেশীদের দেয়। পাঁচটি শিশু উপরোক্ত ক্রিয়াকলাপগুলি পালাক্রমে সম্পন্ন করে।\nইনপুট: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।\nআউটপুট: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা খেলা খেলার পরে প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।",
      "bg": "Напишете PHP функция `function distributeCandies(array $candies): array`, за да решите следния проблем:\nРазпределете бонбони на пет деца, седящи около кръгла маса.\nВсяко дете първоначално има определен брой бонбони. Те играят игра, в която, започвайки с едно дете и вървейки по часовниковата стрелка, всяко дете разделя своите бонбони на три равни части и ако има допълнителни бонбони, които не могат да бъдат разделени равномерно, детето ги изяжда. Всяко дете запазва едно копие и дава другите две копия на съседите си. Петте деца завършват гореописаните операции последователно.\nВход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има.\nИзход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има след като са играли играта.",
      "zh": "编写一个 PHP 函数 `function distributeCandies(array $candies): array` 来解决以下问题：  \n将糖果分给围坐在圆桌旁的五个孩子。  \n每个孩子最初都有一定数量的糖果。他们玩一个游戏，从一个孩子开始，顺时针方向，每个孩子将他们的糖果分成三等份，如果有多余的糖果不能平均分配，孩子就吃掉它们。每个孩子保留一份，并将另外两份给他们的邻居。五个孩子依次完成上述操作。  \n输入：一个包含五个整数的数组，表示每个孩子拥有的糖果数量。  \n输出：一个包含五个整数的数组，表示游戏结束后每个孩子拥有的糖果数量。",
      "fr": "Écrire une fonction PHP `function distributeCandies(array $candies): array` pour résoudre le problème suivant :\nDistribuer des bonbons à cinq enfants assis autour d'une table ronde.\nChaque enfant a initialement un certain nombre de bonbons. Ils jouent à un jeu où, en commençant par un enfant et en allant dans le sens des aiguilles d'une montre, chaque enfant divise ses bonbons en trois parts égales, et s'il reste des bonbons qui ne peuvent pas être divisés également, l'enfant les mange. Chaque enfant garde une copie et donne les deux autres copies à ses voisins. Les cinq enfants ont complété les opérations ci-dessus à tour de rôle.\nEntrée : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a.\nSortie : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a après avoir joué au jeu.",
      "de": "Schreiben Sie eine PHP-Funktion `function distributeCandies(array $candies): array`, um das folgende Problem zu lösen:\nVerteilen Sie Süßigkeiten an fünf Kinder, die um einen runden Tisch sitzen.\nJedes Kind hat anfangs eine bestimmte Anzahl von Süßigkeiten. Sie spielen ein Spiel, bei dem jedes Kind, beginnend mit einem Kind und im Uhrzeigersinn gehend, seine Süßigkeiten in drei gleiche Teile aufteilt, und wenn es zusätzliche Süßigkeiten gibt, die nicht gleichmäßig aufgeteilt werden können, isst das Kind sie. Jedes Kind behält eine Kopie und gibt die anderen zwei Kopien an seine Nachbarn. Die fünf Kinder führen die obigen Operationen der Reihe nach durch.\nEingabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind hat.\nAusgabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind nach dem Spielen des Spiels hat.",
      "ha": "Rubuta aikin PHP `function distributeCandies(array $candies): array` don warware matsalar mai zuwa:\nRarraba alawa ga yara biyar da ke zaune a kusa da tebur mai zagaye.\nKowane yaro yana da adadin alawa a farko. Suna wasa inda, farawa da yaro daya, kuma suna tafiya a agogo, kowane yaro yana raba alawarsa zuwa kashi uku daidai, kuma idan akwai karin alawa da ba za a iya raba su daidai ba, yaron yana cin su. Kowane yaro yana riƙe da kwafin daya kuma yana ba da sauran kwafin biyu ga makwabtansa. Yara biyar sun kammala ayyukan da ke sama a jere.\nShigarwa: Jeri na lambobi guda biyar da ke wakiltar adadin alawa da kowane yaro ke da shi.\nFitarwa: Jeri na lambobi guda biyar da ke wakiltar adadin alawa da kowane yaro ke da shi bayan sun yi wasan.",
      "hi": "PHP फ़ंक्शन `function distributeCandies(array $candies): array` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nगोल मेज के चारों ओर बैठे पाँच बच्चों को कैंडी वितरित करें।\nप्रत्येक बच्चे के पास शुरू में कुछ निश्चित संख्या में कैंडी होती है। वे एक खेल खेलते हैं जहाँ, एक बच्चे से शुरू होकर और घड़ी की दिशा में चलते हुए, प्रत्येक बच्चा अपनी कैंडी को तीन समान भागों में विभाजित करता है, और यदि ऐसी अतिरिक्त कैंडी हैं जिन्हें समान रूप से विभाजित नहीं किया जा सकता है, तो बच्चा उन्हें खा लेता है। प्रत्येक बच्चा एक प्रति अपने पास रखता है और अन्य दो प्रतियाँ अपने पड़ोसियों को दे देता है। पाँच बच्चों ने बारी-बारी से उपरोक्त संचालन पूरे किए।\nइनपुट: पाँच पूर्णांकों का एक सरणी जो दर्शाता है कि प्रत्येक बच्चे के पास कितनी कैंडी है।\nआउटपुट: पाँच पूर्णांकों का एक सरणी जो दर्शाता है कि खेल खेलने के बाद प्रत्येक बच्चे के पास कितनी कैंडी है।",
      "hu": "Írj egy PHP függvényt `function distributeCandies(array $candies): array` a következő probléma megoldására:\nOssz szét cukorkát öt gyerek között, akik egy kerek asztal körül ülnek.\nMindegyik gyerek kezdetben egy bizonyos számú cukorkával rendelkezik. Egy játékot játszanak, ahol az egyik gyerektől kezdve, az óramutató járásával megegyező irányban haladva, minden gyerek három egyenlő részre osztja a cukorkáit, és ha vannak extra cukorkák, amelyeket nem lehet egyenlően elosztani, a gyerek megeszi azokat. Minden gyerek megtart egy példányt, és a másik két példányt odaadja a szomszédainak. Az öt gyerek egymás után hajtja végre a fenti műveleteket.\nBemenet: Egy öt egész számot tartalmazó tömb, amely a gyerekek által birtokolt cukorkák számát jelenti.\nKimenet: Egy öt egész számot tartalmazó tömb, amely a gyerekek által birtokolt cukorkák számát jelenti a játék után."
    },
    "instruction_bertscore": {
      "sq": "0.9781595964533089",
      "hy": "0.9654935329458572",
      "bn": "0.9635368250622824",
      "bg": "0.974015769444159",
      "zh": "0.9408152971453205",
      "fr": "0.9777748494052443",
      "de": "0.9708519847350353",
      "ha": "0.9538065185865264",
      "hi": "0.9545859442017073",
      "hu": "0.9432626220700514"
    },
    "level": "middle",
    "test": "function main(){\n    $candies = distributeCandies([8, 9, 10, 11, 12]);\n    assert($candies === [11, 7, 9, 11, 6]);\n    \n    \n}\n\nmain();\n?>",
    "entry_point": "distributeCandies",
    "signature": "function distributeCandies(array $candies): array",
    "docstring": {
      "en": "Distribute candy to five children sitting around a round table.\nEach child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\nInput: An array of five integers representing the number of candies each child has.\nOutput: An array of five integers representing the number of candies each child has after playing the game.",
      "sq": "Shpërndani karamele për pesë fëmijë të ulur rreth një tavoline të rrumbullakët. \nÇdo fëmijë fillimisht ka një numër të caktuar karamelesh. Ata luajnë një lojë ku, duke filluar me një fëmijë, dhe duke shkuar në drejtim të akrepave të orës, çdo fëmijë ndan karamelet e tij në tre pjesë të barabarta, dhe nëse ka karamele shtesë që nuk mund të ndahen në mënyrë të barabartë, fëmija i ha ato. Çdo fëmijë mban një kopje dhe i jep dy kopjet e tjera fqinjëve të tij. Pesë fëmijët përfunduan operacionet e mësipërme me radhë.\nInput: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë.\nOutput: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë pas lojës.",
      "hy": "Կոնֆետներ բաժանել հինգ երեխաներին, ովքեր նստած են կլոր սեղանի շուրջ։  \nՅուրաքանչյուր երեխա սկզբում ունի որոշակի քանակությամբ կոնֆետներ։ Նրանք խաղ են խաղում, որտեղ, սկսելով մեկ երեխայից և շարժվելով ժամացույցի սլաքի ուղղությամբ, յուրաքանչյուր երեխա բաժանում է իր կոնֆետները երեք հավասար մասի, և եթե կան ավելորդ կոնֆետներ, որոնք հնարավոր չէ հավասարապես բաժանել, երեխան ուտում է դրանք։ Յուրաքանչյուր երեխա պահում է մեկ օրինակ և տալիս է մյուս երկու օրինակները իր հարևաններին։ Հինգ երեխաները հերթով ավարտեցին վերը նշված գործողությունները։  \nՄուտք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը։  \nԵլք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը խաղը խաղալուց հետո։",
      "bn": "পাঁচটি শিশুর মধ্যে ক্যান্ডি বিতরণ করুন যারা একটি গোল টেবিলের চারপাশে বসে আছে।  \nপ্রত্যেক শিশুর প্রাথমিকভাবে নির্দিষ্ট সংখ্যক ক্যান্ডি থাকে। তারা একটি খেলা খেলে যেখানে, এক শিশুর থেকে শুরু করে, এবং ঘড়ির কাঁটার দিকে, প্রত্যেক শিশু তাদের ক্যান্ডি তিনটি সমান ভাগে ভাগ করে, এবং যদি অতিরিক্ত ক্যান্ডি থাকে যা সমানভাবে ভাগ করা যায় না, সেই অতিরিক্ত ক্যান্ডি শিশু খেয়ে ফেলে। প্রত্যেক শিশু একটি কপি রাখে এবং অন্য দুটি কপি তাদের প্রতিবেশীদের দেয়। পাঁচটি শিশু পালাক্রমে উপরের কাজগুলি সম্পন্ন করে।  \nInput: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।  \nOutput: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা খেলা খেলার পর প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।",
      "bg": "Раздайте бонбони на пет деца, седящи около кръгла маса.  \nВсяко дете първоначално има определен брой бонбони. Те играят игра, в която, започвайки с едно дете и вървейки по часовниковата стрелка, всяко дете разделя своите бонбони на три равни части, и ако има допълнителни бонбони, които не могат да бъдат разделени равномерно, детето ги изяжда. Всяко дете запазва едно копие и дава другите две копия на своите съседи. Петте деца завършват гореописаните операции последователно.  \nВход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има.  \nИзход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има след като са изиграли играта.",
      "zh": "将糖果分给围坐在圆桌旁的五个孩子。  \n每个孩子最初都有一定数量的糖果。他们玩一个游戏，从一个孩子开始，顺时针方向，每个孩子将他们的糖果分成三等份，如果有不能均分的糖果，孩子就吃掉它们。每个孩子保留一份，并将另外两份给他们的邻居。五个孩子依次完成上述操作。  \n输入：一个包含五个整数的数组，表示每个孩子拥有的糖果数量。  \n输出：一个包含五个整数的数组，表示游戏结束后每个孩子拥有的糖果数量。",
      "fr": "Distribuer des bonbons à cinq enfants assis autour d'une table ronde.  \nChaque enfant a initialement un certain nombre de bonbons. Ils jouent à un jeu où, en commençant par un enfant et en allant dans le sens des aiguilles d'une montre, chaque enfant divise ses bonbons en trois parts égales, et s'il y a des bonbons supplémentaires qui ne peuvent pas être divisés également, l'enfant les mange. Chaque enfant garde une copie et donne les deux autres copies à ses voisins. Les cinq enfants ont complété les opérations ci-dessus à tour de rôle.  \nEntrée : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a.  \nSortie : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a après avoir joué au jeu.",
      "de": "Verteile Süßigkeiten an fünf Kinder, die um einen runden Tisch sitzen. Jedes Kind hat anfangs eine bestimmte Anzahl von Süßigkeiten. Sie spielen ein Spiel, bei dem jedes Kind, beginnend mit einem Kind und im Uhrzeigersinn, seine Süßigkeiten in drei gleiche Teile teilt, und wenn es zusätzliche Süßigkeiten gibt, die nicht gleichmäßig geteilt werden können, isst das Kind sie. Jedes Kind behält eine Kopie und gibt die anderen zwei Kopien an seine Nachbarn. Die fünf Kinder führten die oben genannten Operationen der Reihe nach durch.\nEingabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind hat.\nAusgabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind nach dem Spiel hat.",
      "ha": "Rarraba alewa ga yara biyar da ke zaune a kusa da tebur mai zagaye. Kowane yaro yana da wani adadin alewa a farko. Suna yin wasa inda, farawa da yaro daya, kuma suna tafiya a agogo, kowane yaro yana raba alewarsa zuwa kashi uku daidai, kuma idan akwai karin alewa da ba za a iya raba su daidai ba, yaron yana cin su. Kowane yaro yana riƙe da kwafin daya kuma yana ba da sauran kwafin biyu ga makwabtansa. Yara biyar sun kammala ayyukan da ke sama a jere. \n\nShigar: Jerin lambobi guda biyar da ke wakiltar adadin alewar da kowane yaro ke da shi. \n\nFitarwa: Jerin lambobi guda biyar da ke wakiltar adadin alewar da kowane yaro ke da shi bayan sun yi wasan.",
      "hi": "पाँच बच्चों को गोल मेज के चारों ओर बैठाकर टॉफी वितरित करें।  \nप्रत्येक बच्चे के पास शुरू में एक निश्चित संख्या में टॉफियाँ होती हैं। वे एक खेल खेलते हैं जहाँ, एक बच्चे से शुरू करके, और घड़ी की दिशा में चलते हुए, प्रत्येक बच्चा अपनी टॉफियों को तीन समान भागों में बाँटता है, और यदि कुछ अतिरिक्त टॉफियाँ होती हैं जिन्हें समान रूप से नहीं बाँटा जा सकता, तो बच्चा उन्हें खा लेता है। प्रत्येक बच्चा एक प्रति अपने पास रखता है और अन्य दो प्रतियाँ अपने पड़ोसियों को दे देता है। पाँचों बच्चों ने बारी-बारी से उपरोक्त क्रियाएँ पूरी कीं।  \nइनपुट: पाँच पूर्णांकों की एक सरणी जो प्रत्येक बच्चे के पास टॉफियों की संख्या को दर्शाती है।  \nआउटपुट: पाँच पूर्णांकों की एक सरणी जो खेल खेलने के बाद प्रत्येक बच्चे के पास टॉफियों की संख्या को दर्शाती है।",
      "hu": "Osszunk szét cukorkát öt gyerek között, akik egy kerek asztal körül ülnek.\nMinden gyerek kezdetben egy bizonyos számú cukorkával rendelkezik. Egy játékot játszanak, ahol az egyik gyerektől kezdve, az óramutató járásával megegyező irányban, minden gyerek három egyenlő részre osztja a cukorkáit, és ha vannak extra cukorkák, amelyeket nem lehet egyenlően elosztani, a gyerek megeszi azokat. Minden gyerek megtart egy példányt, és a másik két példányt odaadja a szomszédainak. Az öt gyerek sorban végrehajtotta a fenti műveleteket.\nBemenet: Egy öt egész számot tartalmazó tömb, amely azt jelenti, hogy hány cukorkája van minden gyereknek.\nKimenet: Egy öt egész számot tartalmazó tömb, amely azt jelenti, hogy hány cukorkája van minden gyereknek a játék után."
    },
    "docstring_bertscore": {
      "sq": "0.9768383071586648",
      "hy": "0.9641138463191888",
      "bn": "0.9489357043827888",
      "bg": "0.9615171513479197",
      "zh": "0.9337861652212579",
      "fr": "0.9873057309784413",
      "de": "0.9722074384552174",
      "ha": "0.9543599028280896",
      "hi": "0.954038121610813",
      "hu": "0.9425733746478604"
    }
  },
  {
    "task_id": "PHP/26",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\n * There are three types of pens available at prices of 6, 5, and 4 units respectively.\n * The objective is to buy as many pens as possible without any remaining class fund.\n * \n * Input: An integer representing the total class fund available.\n * Output: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n * \n * Example:\n * findPenPurchasePlan(10)\n * Output: [1, 0, 1] (One pen of 6 units and one pen of 4 units)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "sq": "<?php\n\n/**\n * Përcakton një plan blerjeje lapsash për të maksimizuar numrin e lapsave të blerë me një shumë të dhënë fondi klase.\n * Ka tre lloje lapsash të disponueshme me çmime prej 6, 5 dhe 4 njësi respektivisht.\n * Qëllimi është të blihen sa më shumë lapsa të jetë e mundur pa mbetur asnjë fond klase.\n * \n * Hyrja: Një numër i plotë që përfaqëson totalin e fondit të klasës në dispozicion.\n * Dalja: Një varg me tre numra të plotë që përfaqësojnë numrin e lapsave të blerë me 6 njësi, 5 njësi dhe 4 njësi, në atë rend.\n * \n * Shembull:\n * findPenPurchasePlan(10)\n * Dalja: [1, 0, 1] (Një laps prej 6 njësive dhe një laps prej 4 njësive)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hy": "<?php\n\n/**\n * Որոշում է գրիչների գնումների պլանը՝ առավելագույն թվով գրիչներ գնելու համար տրված դասարանի ֆոնդով:\n * Կան երեք տեսակի գրիչներ, որոնց գները համապատասխանաբար 6, 5 և 4 միավոր են:\n * Նպատակն է գնել հնարավորինս շատ գրիչներ՝ առանց մնացորդային դասարանի ֆոնդի:\n * \n * Մուտք: Ամբողջ թիվ, որը ներկայացնում է հասանելի դասարանի ընդհանուր ֆոնդը:\n * Ելք: Զանգված երեք ամբողջ թվերով, որոնք ներկայացնում են գնված գրիչների քանակը՝ 6 միավոր, 5 միավոր և 4 միավոր, այդ կարգով:\n * \n * Օրինակ:\n * findPenPurchasePlan(10)\n * Ելք: [1, 0, 1] (Մեկ գրիչ 6 միավորով և մեկ գրիչ 4 միավորով)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "bn": "<?php\n\n/**\n * একটি কলম ক্রয় পরিকল্পনা নির্ধারণ করে যাতে প্রদত্ত ক্লাস ফান্ডের পরিমাণ দিয়ে সর্বাধিক সংখ্যক কলম কেনা যায়।\n * এখানে তিন ধরনের কলম পাওয়া যায় যাদের দাম যথাক্রমে 6, 5, এবং 4 ইউনিট।\n * লক্ষ্য হল যত বেশি সম্ভব কলম কেনা যাতে কোনো ক্লাস ফান্ড অবশিষ্ট না থাকে।\n * \n * ইনপুট: একটি পূর্ণসংখ্যা যা উপলব্ধ মোট ক্লাস ফান্ডকে প্রতিনিধিত্ব করে।\n * আউটপুট: একটি অ্যারে যা তিনটি পূর্ণসংখ্যা নিয়ে গঠিত যা 6 ইউনিট, 5 ইউনিট, এবং 4 ইউনিটের কলমের ক্রয় সংখ্যা প্রতিনিধিত্ব করে, সেই ক্রমে।\n * \n * উদাহরণ:\n * findPenPurchasePlan(10)\n * আউটপুট: [1, 0, 1] (একটি 6 ইউনিটের কলম এবং একটি 4 ইউনিটের কলম)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "bg": "<?php\n\n/**\n * Определя план за покупка на химикалки, за да се максимизира броят на купените химикалки с дадена сума от класния фонд.\n * Има три вида химикалки, налични на цени съответно от 6, 5 и 4 единици.\n * Целта е да се купят възможно най-много химикалки без да остава остатък от класния фонд.\n * \n * Вход: Цяло число, представляващо общия наличен класен фонд.\n * Изход: Масив с три цели числа, представляващи броя на купените химикалки на 6 единици, 5 единици и 4 единици, в този ред.\n * \n * Пример:\n * findPenPurchasePlan(10)\n * Изход: [1, 0, 1] (Една химикалка от 6 единици и една химикалка от 4 единици)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "zh": "<?php\n\n/**\n * 确定一个购买钢笔的计划，以最大化用给定的班级资金购买的钢笔数量。\n * 有三种类型的钢笔，价格分别为6、5和4单位。\n * 目标是在不剩余任何班级资金的情况下购买尽可能多的钢笔。\n * \n * 输入：一个整数，表示可用的总班级资金。\n * 输出：一个包含三个整数的数组，分别表示以6单位、5单位和4单位购买的钢笔数量，按此顺序排列。\n * \n * 示例:\n * findPenPurchasePlan(10)\n * 输出: [1, 0, 1] (一个6单位的钢笔和一个4单位的钢笔)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "fr": "<?php\n\n/**\n * Détermine un plan d'achat de stylos pour maximiser le nombre de stylos achetés avec un montant donné du fonds de classe.\n * Il y a trois types de stylos disponibles aux prix de 6, 5 et 4 unités respectivement.\n * L'objectif est d'acheter autant de stylos que possible sans aucun reste du fonds de classe.\n * \n * Entrée : Un entier représentant le fonds total de la classe disponible.\n * Sortie : Un tableau avec trois entiers représentant le nombre de stylos achetés à 6 unités, 5 unités et 4 unités, dans cet ordre.\n * \n * Exemple :\n * findPenPurchasePlan(10)\n * Sortie : [1, 0, 1] (Un stylo de 6 unités et un stylo de 4 unités)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "de": "<?php\n\n/**\n * Bestimmt einen Kaufplan für Stifte, um die maximale Anzahl von Stiften mit einem gegebenen Betrag aus der Klassenkasse zu kaufen.\n * Es gibt drei Arten von Stiften, die zu Preisen von 6, 5 und 4 Einheiten erhältlich sind.\n * Das Ziel ist es, so viele Stifte wie möglich zu kaufen, ohne dass ein Restbetrag in der Klassenkasse verbleibt.\n * \n * Eingabe: Eine ganze Zahl, die den verfügbaren Gesamtbetrag der Klassenkasse darstellt.\n * Ausgabe: Ein Array mit drei ganzen Zahlen, das die Anzahl der gekauften Stifte zu 6 Einheiten, 5 Einheiten und 4 Einheiten in dieser Reihenfolge darstellt.\n * \n * Beispiel:\n * findPenPurchasePlan(10)\n * Ausgabe: [1, 0, 1] (Ein Stift zu 6 Einheiten und ein Stift zu 4 Einheiten)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "ha": "<?php\n\n/**\n * Yana ƙayyade shirin siyan alƙalami don haɓaka yawan alƙaluman da aka saya tare da adadin kuɗin aji da aka bayar.\n * Akwai nau'ikan alƙaluma guda uku da ake da su a farashin raka'a 6, 5, da 4 bi da bi.\n * Manufar ita ce a sayi alƙaluma da yawa gwargwadon iko ba tare da saura kuɗin aji ba.\n * \n * Shigarwa: Lamba ɗaya da ke wakiltar jimlar kuɗin aji da ake da shi.\n * Fitarwa: Jeri tare da lambobi guda uku da ke wakiltar adadin alƙaluman da aka saya a raka'a 6, 5, da 4, a wannan tsari.\n * \n * Misali:\n * findPenPurchasePlan(10)\n * Fitarwa: [1, 0, 1] (Alƙalami ɗaya na raka'a 6 da alƙalami ɗaya na raka'a 4)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hi": "<?php\n\n/**\n * यह निर्धारित करता है कि दिए गए कक्षा के फंड से अधिकतम पेन खरीदने की योजना कैसे बनाई जाए।\n * तीन प्रकार के पेन उपलब्ध हैं जिनकी कीमत क्रमशः 6, 5, और 4 यूनिट है।\n * उद्देश्य यह है कि जितना संभव हो उतने पेन खरीदे जाएं बिना किसी शेष कक्षा फंड के।\n * \n * इनपुट: उपलब्ध कुल कक्षा फंड का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * आउटपुट: तीन पूर्णांकों की एक array जो क्रमशः 6 यूनिट, 5 यूनिट, और 4 यूनिट पर खरीदे गए पेन की संख्या का प्रतिनिधित्व करती है।\n * \n * उदाहरण:\n * findPenPurchasePlan(10)\n * आउटपुट: [1, 0, 1] (एक पेन 6 यूनिट का और एक पेन 4 यूनिट का)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hu": "<?php\n\n/**\n * Meghatározza a tollvásárlási tervet, hogy a lehető legtöbb tollat vásároljuk meg az adott osztálypénzből.\n * Háromféle toll kapható, amelyek ára rendre 6, 5 és 4 egység.\n * A cél az, hogy a lehető legtöbb tollat vásároljuk meg úgy, hogy ne maradjon meg osztálypénz.\n * \n * Bemenet: Egy egész szám, amely az elérhető teljes osztálypénzt jelöli.\n * Kimenet: Egy tömb három egész számmal, amelyek a 6 egység, 5 egység és 4 egység árú tollak vásárolt mennyiségét jelölik, ebben a sorrendben.\n * \n * Példa:\n * findPenPurchasePlan(10)\n * Kimenet: [1, 0, 1] (Egy darab 6 egységes toll és egy darab 4 egységes toll)\n */\nfunction findPenPurchasePlan(int $totalFund): array "
    },
    "prompt_bertscore": {
      "sq": "0.9847910703545396",
      "hy": "0.9642630177353461",
      "bn": "0.9600411289864494",
      "bg": "0.9713938484144985",
      "zh": "0.9539912448408888",
      "fr": "0.9791384469710488",
      "de": "0.9483064433356704",
      "ha": "0.924619969027641",
      "hi": "0.9500680961850688",
      "hu": "0.949926869984153"
    },
    "canonical_solution": "{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}",
    "instruction": {
      "en": "Write a PHP function `function findPenPurchasePlan(int $totalFund): array` to solve the following problem:\nDetermines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\nThere are three types of pens available at prices of 6, 5, and 4 units respectively.\nThe objective is to buy as many pens as possible without any remaining class fund.\n\nInput: An integer representing the total class fund available.\nOutput: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n\nExample:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (One pen of 6 units and one pen of 4 units)",
      "sq": "Shkruani një funksion PHP `function findPenPurchasePlan(int $totalFund): array` për të zgjidhur problemin e mëposhtëm:\nPërcakton një plan blerjeje për stilolapsa për të maksimizuar numrin e stilolapsave të blerë me një shumë të caktuar fondi klase.\nKa tre lloje stilolapsash të disponueshëm me çmime përkatësisht 6, 5, dhe 4 njësi.\nObjektivi është të blihen sa më shumë stilolapsa të jetë e mundur pa mbetur asnjë fond klase.\n\nHyrja: Një numër i plotë që përfaqëson fondin total të klasës të disponueshëm.\nDalja: Një varg me tre numra të plotë që përfaqësojnë numrin e stilolapsave të blerë me 6 njësi, 5 njësi, dhe 4 njësi, në atë rend.\n\nShembull:\nfindPenPurchasePlan(10)\nDalja: [1, 0, 1] (Një stilolaps prej 6 njësish dhe një stilolaps prej 4 njësish)",
      "hy": "Գրեք PHP ֆունկցիա `function findPenPurchasePlan(int $totalFund): array` հետևյալ խնդիրը լուծելու համար:\nՍահմանում է գրիչների գնումների պլան՝ առավելագույն գրիչների քանակը գնելու համար տրված դասարանի գումարով:\nԿան երեք տեսակի գրիչներ, որոնց գները համապատասխանաբար 6, 5 և 4 միավոր են:\nՆպատակն է գնել որքան հնարավոր է շատ գրիչներ՝ առանց որևէ մնացորդային դասարանի գումարի:\n\nՄուտք: Ընդհանուր դասարանի հասանելի գումարը ներկայացնող ամբողջ թիվ:\nԵլք: Զանգված երեք ամբողջ թվերով, որոնք ներկայացնում են 6, 5 և 4 միավորների գնով գնված գրիչների քանակը, այդ կարգով:\n\nՕրինակ:\nfindPenPurchasePlan(10)\nԵլք: [1, 0, 1] (Մեկ գրիչ 6 միավորով և մեկ գրիչ 4 միավորով)",
      "bn": "PHP ফাংশন `function findPenPurchasePlan(int $totalFund): array` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি কলা ফান্ডের নির্দিষ্ট পরিমাণ দিয়ে যত বেশি সম্ভব কলম কেনার পরিকল্পনা নির্ধারণ করে।\nতিন ধরনের কলম পাওয়া যায় যাদের দাম যথাক্রমে 6, 5, এবং 4 ইউনিট।\nউদ্দেশ্য হল যত বেশি সম্ভব কলম কেনা যাতে কোনো ক্লাস ফান্ড অবশিষ্ট না থাকে।\n\nইনপুট: একটি পূর্ণসংখ্যা যা উপলব্ধ মোট ক্লাস ফান্ডকে উপস্থাপন করে।\nআউটপুট: একটি অ্যারে যাতে তিনটি পূর্ণসংখ্যা থাকবে যা 6 ইউনিট, 5 ইউনিট, এবং 4 ইউনিটের কলমের ক্রয়ের সংখ্যা উপস্থাপন করবে, সেই ক্রমে।\n\nউদাহরণ:\nfindPenPurchasePlan(10)\nআউটপুট: [1, 0, 1] (একটি 6 ইউনিটের কলম এবং একটি 4 ইউনিটের কলম)",
      "bg": "Напишете PHP функция `function findPenPurchasePlan(int $totalFund): array`, за да решите следния проблем:  \nОпределя план за покупка на химикалки, за да се максимизира броят на закупените химикалки с дадена сума от класния фонд.  \nИма три вида химикалки на цени съответно 6, 5 и 4 единици.  \nЦелта е да се купят възможно най-много химикалки без да остава остатък от класния фонд.\n\nВход: Цяло число, представляващо наличния класен фонд.  \nИзход: Масив с три цели числа, представляващи броя на закупените химикалки на 6 единици, 5 единици и 4 единици, в този ред.\n\nПример:  \nfindPenPurchasePlan(10)  \nИзход: [1, 0, 1] (Една химикалка от 6 единици и една химикалка от 4 единици)",
      "zh": "编写一个 PHP 函数 `function findPenPurchasePlan(int $totalFund): array` 来解决以下问题：\n确定一个购买钢笔的计划，以最大化使用给定班级资金购买的钢笔数量。\n有三种类型的钢笔，价格分别为 6、5 和 4 单位。\n目标是在没有剩余班级资金的情况下尽可能多地购买钢笔。\n\n输入：一个整数，表示可用的班级资金总额。\n输出：一个包含三个整数的数组，分别表示以 6 单位、5 单位和 4 单位购买的钢笔数量，按此顺序排列。\n\n示例：\nfindPenPurchasePlan(10)\n输出: [1, 0, 1] (一支 6 单位的钢笔和一支 4 单位的钢笔)",
      "fr": "Écrire une fonction PHP `function findPenPurchasePlan(int $totalFund): array` pour résoudre le problème suivant :\nDétermine un plan d'achat de stylos pour maximiser le nombre de stylos achetés avec un montant donné du fonds de la classe.\nIl y a trois types de stylos disponibles aux prix de 6, 5 et 4 unités respectivement.\nL'objectif est d'acheter autant de stylos que possible sans aucun reste du fonds de la classe.\n\nEntrée : Un entier représentant le fonds total de la classe disponible.\nSortie : Un tableau avec trois entiers représentant le nombre de stylos achetés à 6 unités, 5 unités et 4 unités, dans cet ordre.\n\nExemple :\nfindPenPurchasePlan(10)\nSortie : [1, 0, 1] (Un stylo de 6 unités et un stylo de 4 unités)",
      "de": "Schreiben Sie eine PHP-Funktion `function findPenPurchasePlan(int $totalFund): array`, um das folgende Problem zu lösen:\nBestimmt einen Kaufplan für Stifte, um die Anzahl der gekauften Stifte mit einem gegebenen Klassengeldbetrag zu maximieren.\nEs gibt drei Arten von Stiften zu Preisen von jeweils 6, 5 und 4 Einheiten.\nDas Ziel ist es, so viele Stifte wie möglich zu kaufen, ohne dass Klassengeld übrig bleibt.\n\nEingabe: Eine ganze Zahl, die das verfügbare Klassengeld darstellt.\nAusgabe: Ein Array mit drei ganzen Zahlen, die die Anzahl der gekauften Stifte zu 6 Einheiten, 5 Einheiten und 4 Einheiten in dieser Reihenfolge darstellen.\n\nBeispiel:\nfindPenPurchasePlan(10)\nAusgabe: [1, 0, 1] (Ein Stift zu 6 Einheiten und ein Stift zu 4 Einheiten)",
      "ha": "Rubuta aikin PHP `function findPenPurchasePlan(int $totalFund): array` don warware matsalar mai zuwa:\nYana tantance shirin siyan alƙalami don haɓaka yawan alƙaluma da aka saya tare da adadin kuɗin aji da aka bayar.\nAkwai nau'ikan alƙaluma guda uku da ake da su a farashin raka'a 6, 5, da 4 bi da bi.\nManufar ita ce a sayi alƙaluma da yawa gwargwadon iko ba tare da wani kuɗin aji da ya rage ba.\n\nShigarwa: Lamba mai nuna jimlar kuɗin aji da ake da shi.\nFitarwa: Jeri tare da lambobi uku da ke nuna adadin alƙaluman da aka saya a farashin raka'a 6, 5, da 4, a wannan tsari.\n\nMisali:\nfindPenPurchasePlan(10)\nFitarwa: [1, 0, 1] (Alƙalami ɗaya na raka'a 6 da alƙalami ɗaya na raka'a 4)",
      "hi": "PHP फ़ंक्शन `function findPenPurchasePlan(int $totalFund): array` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nकक्षा के फंड की एक दी गई राशि के साथ खरीदे गए पेन की संख्या को अधिकतम करने के लिए एक पेन खरीद योजना निर्धारित करता है।\nतीन प्रकार के पेन उपलब्ध हैं जिनकी कीमत क्रमशः 6, 5, और 4 यूनिट है।\nउद्देश्य यह है कि बिना किसी शेष कक्षा फंड के जितना संभव हो उतने पेन खरीदे जाएं।\n\nइनपुट: एक पूर्णांक जो उपलब्ध कुल कक्षा फंड का प्रतिनिधित्व करता है।\nआउटपुट: एक सरणी जिसमें तीन पूर्णांक होते हैं जो क्रमशः 6 यूनिट, 5 यूनिट, और 4 यूनिट पर खरीदे गए पेन की गिनती का प्रतिनिधित्व करते हैं।\n\nउदाहरण:\nfindPenPurchasePlan(10)\nआउटपुट: [1, 0, 1] (6 यूनिट का एक पेन और 4 यूनिट का एक पेन)",
      "hu": "Írj egy PHP függvényt `function findPenPurchasePlan(int $totalFund): array` a következő probléma megoldására:\nMeghatározza a tollvásárlási tervet, hogy a lehető legtöbb tollat vásárolják meg az adott osztálypénzből.\nHáromféle toll kapható, amelyek ára rendre 6, 5 és 4 egység.\nA cél, hogy a lehető legtöbb tollat vásárolják meg úgy, hogy ne maradjon meg osztálypénz.\n\nBemenet: Egy egész szám, amely az elérhető teljes osztálypénzt jelenti.\nKimenet: Egy tömb három egész számmal, amelyek rendre a 6 egység, 5 egység és 4 egység áron vásárolt tollak számát jelölik.\n\nPélda:\nfindPenPurchasePlan(10)\nKimenet: [1, 0, 1] (Egy toll 6 egységért és egy toll 4 egységért)"
    },
    "instruction_bertscore": {
      "sq": "0.9790216523070003",
      "hy": "0.9586286683469104",
      "bn": "0.9400080632767948",
      "bg": "0.9634263865704271",
      "zh": "0.9524286196332874",
      "fr": "0.9825131771448316",
      "de": "0.9561036789431949",
      "ha": "0.9307683738421949",
      "hi": "0.9521314685832591",
      "hu": "0.9338185419733667"
    },
    "level": "hard",
    "test": "function main(){\n    assert(findPenPurchasePlan(10) === [1, 0, 1]);\n    assert(findPenPurchasePlan(14) === [1, 0, 2]);\n    assert(findPenPurchasePlan(24) === [0, 0, 6]);\n    \n}\n\nmain();\n?>",
    "entry_point": "findPenPurchasePlan",
    "signature": "function findPenPurchasePlan(int $totalFund): array",
    "docstring": {
      "en": "Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\nThere are three types of pens available at prices of 6, 5, and 4 units respectively.\nThe objective is to buy as many pens as possible without any remaining class fund.\n\nInput: An integer representing the total class fund available.\nOutput: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n\nExample:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (One pen of 6 units and one pen of 4 units)",
      "sq": "Përcakton një plan blerjeje stilolapsash për të maksimizuar numrin e stilolapsave të blerë me një shumë të caktuar fondi klase.\nKa tre lloje stilolapsash të disponueshëm me çmime përkatësisht 6, 5, dhe 4 njësi.\nObjektivi është të blihen sa më shumë stilolapsa të jetë e mundur pa mbetur asnjë fond klase.\n\nInput: Një numër i plotë që përfaqëson totalin e fondit të klasës të disponueshëm.\nOutput: Një varg me tre numra të plotë që përfaqësojnë numrin e stilolapsave të blerë me 6 njësi, 5 njësi, dhe 4 njësi, në atë rend.\n\nShembull:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (Një stilolaps me 6 njësi dhe një stilolaps me 4 njësi)",
      "hy": "Հաստատում է գրիչների գնման պլան՝ առավելագույն գրիչների քանակը գնելու համար տրված դասարանի ֆոնդի գումարով:\nԱռկա են երեք տեսակի գրիչներ՝ համապատասխանաբար 6, 5 և 4 միավորի գներով:\nՆպատակն է գնել որքան հնարավոր է շատ գրիչներ՝ առանց որևէ մնացորդային դասարանի ֆոնդի:\n\nՄուտք: Ամբողջ թիվ, որը ներկայացնում է հասանելի դասարանի ֆոնդի ընդհանուր գումարը:\nԵլք: Զանգված երեք ամբողջ թվերով, որոնք ներկայացնում են գնված գրիչների քանակը՝ 6 միավորով, 5 միավորով և 4 միավորով, այդ կարգով:\n\nՕրինակ:\nfindPenPurchasePlan(10)\nԵլք: [1, 0, 1] (Մեկ գրիչ 6 միավորով և մեկ գրիչ 4 միավորով)",
      "bn": "ক্লাস ফান্ডের একটি নির্দিষ্ট পরিমাণ দিয়ে যত বেশি সম্ভব কলম কেনার জন্য একটি কলম ক্রয় পরিকল্পনা নির্ধারণ করে। \n৬, ৫, এবং ৪ ইউনিট মূল্যের তিন ধরনের কলম পাওয়া যায়। \nলক্ষ্য হল কোনো অবশিষ্ট ক্লাস ফান্ড ছাড়াই যত বেশি সম্ভব কলম কেনা।\n\nইনপুট: উপলব্ধ মোট ক্লাস ফান্ডের প্রতিনিধিত্বকারী একটি পূর্ণসংখ্যা।\nআউটপুট: একটি অ্যারে যাতে তিনটি পূর্ণসংখ্যা থাকবে যা ৬ ইউনিট, ৫ ইউনিট, এবং ৪ ইউনিট মূল্যের কলমের ক্রয় সংখ্যা যথাক্রমে নির্দেশ করবে।\n\nউদাহরণ:\nfindPenPurchasePlan(10)\nআউটপুট: [1, 0, 1] (একটি ৬ ইউনিটের কলম এবং একটি ৪ ইউনিটের কলম)",
      "bg": "Определя план за покупка на химикалки, за да се максимизира броят на купените химикалки с дадена сума от класния фонд. Има три вида химикалки, налични на цени от съответно 6, 5 и 4 единици. Целта е да се купят възможно най-много химикалки, без да остава остатък от класния фонд.\n\nВход: Цяло число, представляващо общия наличен класен фонд.\nИзход: Масив с три цели числа, представляващи броя на купените химикалки на 6 единици, 5 единици и 4 единици, в този ред.\n\nПример:\nfindPenPurchasePlan(10)\nИзход: [1, 0, 1] (Една химикалка от 6 единици и една химикалка от 4 единици)",
      "zh": "确定购买钢笔的计划，以最大化用给定的班级资金购买的钢笔数量。\n有三种类型的钢笔，价格分别为6、5和4个单位。\n目标是在没有剩余班级资金的情况下购买尽可能多的钢笔。\n\n输入：一个整数，表示可用的总班级资金。\n输出：一个包含三个整数的数组，分别表示以6个单位、5个单位和4个单位购买的钢笔数量。\n\n示例：\nfindPenPurchasePlan(10)\n输出: [1, 0, 1] (一支6单位的钢笔和一支4单位的钢笔)",
      "fr": "Détermine un plan d'achat de stylos pour maximiser le nombre de stylos achetés avec un montant donné de fonds de classe.\nIl y a trois types de stylos disponibles aux prix de 6, 5 et 4 unités respectivement.\nL'objectif est d'acheter autant de stylos que possible sans aucun reste de fonds de classe.\n\nEntrée : Un entier représentant le total des fonds de classe disponibles.\nSortie : Un tableau avec trois entiers représentant le nombre de stylos achetés à 6 unités, 5 unités et 4 unités, dans cet ordre.\n\nExemple :\nfindPenPurchasePlan(10)\nSortie : [1, 0, 1] (Un stylo de 6 unités et un stylo de 4 unités)",
      "de": "Bestimmt einen Kaufplan für Stifte, um die maximale Anzahl an Stiften mit einem gegebenen Betrag aus der Klassenkasse zu kaufen.\nEs gibt drei Arten von Stiften, die zu Preisen von 6, 5 und 4 Einheiten erhältlich sind.\nDas Ziel ist es, so viele Stifte wie möglich zu kaufen, ohne dass Geld aus der Klassenkasse übrig bleibt.\n\nEingabe: Eine ganze Zahl, die den verfügbaren Gesamtbetrag der Klassenkasse darstellt.\nAusgabe: Ein Array mit drei ganzen Zahlen, die die Anzahl der gekauften Stifte zu 6 Einheiten, 5 Einheiten und 4 Einheiten in dieser Reihenfolge darstellen.\n\nBeispiel:\nfindPenPurchasePlan(10)\nAusgabe: [1, 0, 1] (Ein Stift zu 6 Einheiten und ein Stift zu 4 Einheiten)",
      "ha": "Yana tantance shirin sayen alƙalami don haɓaka yawan alƙaluman da aka saya tare da adadin kuɗin aji da aka bayar.\nAkwai nau'ikan alƙaluma guda uku da ake dasu akan farashin raka'a 6, 5, da 4 bi da bi.\nManufar ita ce a sayi alƙaluma da yawa gwargwadon yiwuwa ba tare da saura kuɗin aji ba.\n\nShigarwa: Wani cikakken lamba da ke wakiltar jimillar kuɗin aji da ake da shi.\nFita: Wani tsari tare da lambobi uku da ke wakiltar adadin alƙaluman da aka saya akan raka'a 6, 5, da 4, a wannan tsari.\n\nMisali:\nfindPenPurchasePlan(10)\nFita: [1, 0, 1] (Ɗaya daga cikin alƙalami na raka'a 6 da ɗaya daga cikin alƙalami na raka'a 4)",
      "hi": "कक्षा निधि की एक निर्धारित राशि के साथ खरीदे गए पेन की संख्या को अधिकतम करने के लिए एक पेन खरीद योजना निर्धारित करता है।\nतीन प्रकार के पेन उपलब्ध हैं जिनकी कीमत क्रमशः 6, 5, और 4 इकाइयाँ हैं।\nउद्देश्य यह है कि बिना किसी शेष कक्षा निधि के जितना संभव हो सके उतने पेन खरीदे जाएं।\n\nइनपुट: उपलब्ध कुल कक्षा निधि का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: तीन पूर्णांकों की एक श्रृंखला जो क्रमशः 6 इकाइयों, 5 इकाइयों, और 4 इकाइयों पर खरीदे गए पेन की गिनती का प्रतिनिधित्व करती है।\n\nउदाहरण:\nfindPenPurchasePlan(10)\nआउटपुट: [1, 0, 1] (एक पेन 6 इकाइयों का और एक पेन 4 इकाइयों का)",
      "hu": "Meghatározza a tollvásárlási tervet, hogy a lehető legtöbb tollat vásároljuk meg a rendelkezésre álló osztálypénzből.\nHáromféle toll kapható, amelyek ára rendre 6, 5 és 4 egység.\nA cél az, hogy a lehető legtöbb tollat vásároljuk meg úgy, hogy ne maradjon meg osztálypénz.\n\nBemenet: Egy egész szám, amely a rendelkezésre álló teljes osztálypénzt jelenti.\nKimenet: Egy tömb három egész számmal, amelyek az egyes tollak számát jelzik, amelyeket 6, 5 és 4 egységért vásároltak, ebben a sorrendben.\n\nPélda:\nfindPenPurchasePlan(10)\nKimenet: [1, 0, 1] (Egy toll 6 egységért és egy toll 4 egységért)"
    },
    "docstring_bertscore": {
      "sq": "0.9677287206236428",
      "hy": "0.9375615328735881",
      "bn": "0.9277148289945456",
      "bg": "0.9600242454040615",
      "zh": "0.9313708197878737",
      "fr": "0.9764458135257399",
      "de": "0.9367948196027934",
      "ha": "0.899301944769791",
      "hi": "0.9469776060865469",
      "hu": "0.9128592627969463"
    }
  },
  {
    "task_id": "PHP/27",
    "prompt": {
      "en": "<?php\n\n/**\n    * Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\n    * This problem involves finding the minimum value of x (where x > 1) such that when x divides each of the \n    * three integers a, b, and c, the remainders are the same.\n    * Input: Three positive integers a, b, and c, each not exceeding 1,000,000.\n    * Output: Returns the smallest integer value of x that satisfies the condition.\n    * Example: For a = 300, b = 262, c = 205, the function returns 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "sq": "<?php\n\n/**\n    * Gjen pjesëtuesin më të vogël të plotë më të madh se 1 që jep të njëjtin mbetje kur ndan tre numra të dhënë.\n    * Ky problem përfshin gjetjen e vlerës minimale të x (ku x > 1) të tillë që kur x ndan secilin nga \n    * tre numrat e plotë a, b, dhe c, mbetjet janë të njëjta.\n    * Hyrja: Tre numra të plotë pozitivë a, b, dhe c, secili që nuk tejkalon 1,000,000.\n    * Dalja: Kthen vlerën më të vogël të plotë të x që plotëson kushtin.\n    * Shembull: Për a = 300, b = 262, c = 205, funksioni kthen 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hy": "<?php\n\n/**\n    * Գտնում է ամենափոքր ամբողջ թիվ բաժանարարը, որը մեծ է 1-ից և տալիս է նույն մնացորդը, երբ բաժանվում են երեք տրված թվերը:\n    * Այս խնդիրը ներառում է x-ի նվազագույն արժեքի գտնումը (որտեղ x > 1), այնպես, որ երբ x-ը բաժանում է \n    * երեք ամբողջ թվերը՝ a, b և c, մնացորդները նույնն են:\n    * Մուտք: Երեք դրական ամբողջ թվեր՝ a, b և c, յուրաքանչյուրը չի գերազանցում 1,000,000-ը:\n    * Ելք: Վերադարձնում է x-ի ամենափոքր ամբողջ արժեքը, որը բավարարում է պայմանը:\n    * Օրինակ: a = 300, b = 262, c = 205 համար, ֆունկցիան վերադարձնում է 19:\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "bn": "<?php\n\n/**\n    * এমন ক্ষুদ্রতম পূর্ণসংখ্যা বিভাজক খুঁজে বের করে যা 1 এর চেয়ে বড় এবং তিনটি প্রদত্ত সংখ্যাকে ভাগ করার সময় একই অবশিষ্টাংশ দেয়।\n    * এই সমস্যাটি এমন একটি x এর ন্যূনতম মান খুঁজে বের করার সাথে জড়িত (যেখানে x > 1) যাতে x যখন তিনটি পূর্ণসংখ্যা a, b, এবং c কে ভাগ করে, \n    * তখন অবশিষ্টাংশ একই হয়।\n    * ইনপুট: তিনটি ধনাত্মক পূর্ণসংখ্যা a, b, এবং c, প্রতিটি 1,000,000 এর বেশি নয়।\n    * আউটপুট: x এর ক্ষুদ্রতম পূর্ণসংখ্যার মান ফেরত দেয় যা শর্তটি পূরণ করে।\n    * উদাহরণ: a = 300, b = 262, c = 205 এর জন্য, ফাংশনটি 19 ফেরত দেয়।\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "bg": "<?php\n\n/**\n    * Намира най-малкия делител, по-голям от 1, който дава същия остатък при деление на три дадени числа.\n    * Този проблем включва намиране на минималната стойност на x (където x > 1), така че когато x дели всяко от \n    * трите цели числа a, b и c, остатъците са еднакви.\n    * Вход: Три положителни цели числа a, b и c, всяко не надвишаващо 1,000,000.\n    * Изход: Връща най-малката целочислена стойност на x, която удовлетворява условието.\n    * Пример: За a = 300, b = 262, c = 205, функцията връща 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "zh": "<?php\n\n/**\n    * 找到大于1的最小整数除数，使其在除以三个给定数字时产生相同的余数。\n    * 这个问题涉及找到x的最小值（其中x > 1），使得当x分别除以\n    * 三个整数a、b和c时，余数相同。\n    * 输入：三个正整数a、b和c，每个不超过1,000,000。\n    * 输出：返回满足条件的最小整数值x。\n    * 示例：对于a = 300, b = 262, c = 205，函数返回19。\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "fr": "<?php\n\n/**\n    * Trouve le plus petit diviseur entier supérieur à 1 qui donne le même reste lors de la division de trois nombres donnés.\n    * Ce problème consiste à trouver la valeur minimale de x (où x > 1) telle que lorsque x divise chacun des \n    * trois entiers a, b et c, les restes sont les mêmes.\n    * Entrée : Trois entiers positifs a, b et c, chacun ne dépassant pas 1 000 000.\n    * Sortie : Retourne la plus petite valeur entière de x qui satisfait la condition.\n    * Exemple : Pour a = 300, b = 262, c = 205, la fonction retourne 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "de": "<?php\n\n/**\n    * Findet den kleinsten ganzzahligen Teiler größer als 1, der beim Teilen von drei gegebenen Zahlen denselben Rest ergibt.\n    * Dieses Problem beinhaltet das Finden des minimalen Wertes von x (wobei x > 1), so dass, wenn x jede der \n    * drei ganzen Zahlen a, b und c teilt, die Reste gleich sind.\n    * Eingabe: Drei positive ganze Zahlen a, b und c, die jeweils 1.000.000 nicht überschreiten.\n    * Ausgabe: Gibt den kleinsten ganzzahligen Wert von x zurück, der die Bedingung erfüllt.\n    * Beispiel: Für a = 300, b = 262, c = 205 gibt die Funktion 19 zurück.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "ha": "<?php\n\n/**\n    * Nemi mafi ƙarancin mai raba lamba mai girma fiye da 1 wanda ke bayar da saura iri ɗaya lokacin da aka raba lambobi guda uku da aka bayar.\n    * Wannan matsalar tana da alaƙa da nemo mafi ƙarancin ƙima na x (inda x > 1) ta yadda lokacin da x ya raba kowanne daga cikin \n    * lambobi uku a, b, da c, saura iri ɗaya ne.\n    * Shigarwa: Lambobi uku masu kyau a, b, da c, kowanne ba ya wuce 1,000,000.\n    * Fitarwa: Yana dawowa da mafi ƙarancin ƙimar x wanda ke cika yanayin.\n    * Misali: Don a = 300, b = 262, c = 205, aikin yana dawowa 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hi": "<?php\n\n/**\n    * तीन दिए गए संख्याओं को विभाजित करते समय समान शेषफल देने वाला 1 से बड़ा सबसे छोटा पूर्णांक भाजक खोजता है।\n    * इस समस्या में x का न्यूनतम मान खोजना शामिल है (जहाँ x > 1) ताकि जब x तीन पूर्णांकों a, b, और c में से \n    * प्रत्येक को विभाजित करता है, तो शेषफल समान होते हैं।\n    * इनपुट: तीन धनात्मक पूर्णांक a, b, और c, प्रत्येक 1,000,000 से अधिक नहीं।\n    * आउटपुट: x के सबसे छोटे पूर्णांक मान को लौटाता है जो शर्त को संतुष्ट करता है।\n    * उदाहरण: a = 300, b = 262, c = 205 के लिए, फ़ंक्शन 19 लौटाता है।\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hu": "<?php\n\n/**\n    * Megkeresi a legkisebb 1-nél nagyobb egész osztót, amely ugyanazt a maradékot adja, amikor három adott számot osztunk vele.\n    * Ez a probléma annak a minimális x értéknek a megtalálását jelenti (ahol x > 1), amelynél, ha x osztja az \n    * a, b és c három egész számot, a maradékok megegyeznek.\n    * Bemenet: Három pozitív egész szám, a, b és c, amelyek mindegyike nem haladja meg az 1 000 000-at.\n    * Kimenet: Visszaadja azt a legkisebb egész x értéket, amely kielégíti a feltételt.\n    * Példa: Ha a = 300, b = 262, c = 205, a függvény 19-et ad vissza.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)"
    },
    "prompt_bertscore": {
      "sq": "0.9965231738103654",
      "hy": "0.9891678908006434",
      "bn": "0.9681335293401918",
      "bg": "0.9929869571368012",
      "zh": "0.9657877045401698",
      "fr": "0.9980411071822339",
      "de": "0.9873361214267397",
      "ha": "0.963870126841659",
      "hi": "0.9907094611878552",
      "hu": "0.9721808219841588"
    },
    "canonical_solution": " {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}",
    "instruction": {
      "en": "Write a PHP function `function findMinimumDivisor($a, $b, $c)` to solve the following problem:\nFinds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nThis problem involves finding the minimum value of x (where x > 1) such that when x divides each of the\nthree integers a, b, and c, the remainders are the same.\nInput: Three positive integers a, b, and c, each not exceeding 1,000,000.\nOutput: Returns the smallest integer value of x that satisfies the condition.\nExample: For a = 300, b = 262, c = 205, the function returns 19.",
      "sq": "Shkruani një funksion PHP `function findMinimumDivisor($a, $b, $c)` për të zgjidhur problemin e mëposhtëm:\nGjen pjesëtuesin më të vogël të plotë më të madh se 1 që jep të njëjtin mbetje kur ndan tre numra të dhënë.\nKy problem përfshin gjetjen e vlerës minimale të x (ku x > 1) të tillë që kur x ndan secilin nga\ntre numrat e plotë a, b, dhe c, mbetjet janë të njëjta.\nHyrja: Tre numra të plotë pozitivë a, b, dhe c, secili që nuk e kalon 1,000,000.\nDalja: Kthen vlerën më të vogël të plotë të x që plotëson kushtin.\nShembull: Për a = 300, b = 262, c = 205, funksioni kthen 19.",
      "hy": "Գրեք PHP ֆունկցիա `function findMinimumDivisor($a, $b, $c)` հետևյալ խնդիրը լուծելու համար:\nԳտնում է ամենափոքր ամբողջ թվային բաժանարարը, որը մեծ է 1-ից և տալիս է նույն մնացորդը, երբ բաժանում ենք երեք տրված թվերը:\nԱյս խնդիրը ներառում է x-ի նվազագույն արժեքի գտնումը (որտեղ x > 1), այնպես, որ երբ x-ը բաժանում է\nերեք ամբողջ թվերը a, b և c, մնացորդները նույնն են:\nՄուտք: Երեք դրական ամբողջ թվեր a, b և c, որոնցից յուրաքանչյուրը չի գերազանցում 1,000,000-ը:\nԵլք: Վերադարձնում է x-ի ամենափոքր ամբողջ թվային արժեքը, որը բավարարում է պայմանը:\nՕրինակ: a = 300, b = 262, c = 205 համար, ֆունկցիան վերադարձնում է 19:",
      "bn": "PHP ফাংশন `function findMinimumDivisor($a, $b, $c)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nতিনটি প্রদত্ত সংখ্যাকে ভাগ করার সময় একই অবশিষ্টাংশ দেয় এমন 1 এর চেয়ে বড় ক্ষুদ্রতম পূর্ণসংখ্যা বিভাজক খুঁজে বের করে।\nএই সমস্যাটি x এর সর্বনিম্ন মান খুঁজে বের করার সাথে সম্পর্কিত (যেখানে x > 1) যাতে x যখন তিনটি পূর্ণসংখ্যা a, b, এবং c কে ভাগ করে, তখন অবশিষ্টাংশ একই হয়।\nইনপুট: তিনটি ধনাত্মক পূর্ণসংখ্যা a, b, এবং c, প্রতিটি 1,000,000 এর বেশি নয়।\nআউটপুট: x এর ক্ষুদ্রতম পূর্ণসংখ্যার মান প্রদান করে যা শর্তটি পূরণ করে।\nউদাহরণ: a = 300, b = 262, c = 205 এর জন্য, ফাংশনটি 19 প্রদান করে।",
      "bg": "Напишете PHP функция `function findMinimumDivisor($a, $b, $c)` за решаване на следния проблем:\nНамира най-малкия цял делител, по-голям от 1, който дава същия остатък при деление на три дадени числа.\nТози проблем включва намирането на минималната стойност на x (където x > 1), така че когато x дели всяко от\nтрите цели числа a, b и c, остатъците са еднакви.\nВход: Три положителни цели числа a, b и c, всяко от които не надвишава 1,000,000.\nИзход: Връща най-малката цяла стойност на x, която удовлетворява условието.\nПример: За a = 300, b = 262, c = 205, функцията връща 19.",
      "zh": "编写一个 PHP 函数 `function findMinimumDivisor($a, $b, $c)` 来解决以下问题：\n找到一个最小的整数除数（大于1），使得当三个给定的数字相除时，得到的余数相同。\n这个问题涉及找到最小的 x 值（其中 x > 1），使得当 x 分别除以三个整数 a, b 和 c 时，余数相同。\n输入：三个正整数 a, b 和 c，每个不超过 1,000,000。\n输出：返回满足条件的最小整数 x 值。\n示例：对于 a = 300, b = 262, c = 205，函数返回 19。",
      "fr": "Écrire une fonction PHP `function findMinimumDivisor($a, $b, $c)` pour résoudre le problème suivant :\nTrouve le plus petit diviseur entier supérieur à 1 qui donne le même reste lors de la division de trois nombres donnés.\nCe problème consiste à trouver la valeur minimale de x (où x > 1) telle que lorsque x divise chacun des\ntrois entiers a, b et c, les restes sont les mêmes.\nEntrée : Trois entiers positifs a, b et c, chacun ne dépassant pas 1 000 000.\nSortie : Retourne la plus petite valeur entière de x qui satisfait la condition.\nExemple : Pour a = 300, b = 262, c = 205, la fonction retourne 19.",
      "de": "Schreiben Sie eine PHP-Funktion `function findMinimumDivisor($a, $b, $c)`, um das folgende Problem zu lösen:\nFindet den kleinsten ganzzahligen Teiler größer als 1, der beim Teilen von drei gegebenen Zahlen denselben Rest ergibt.\nDieses Problem beinhaltet das Finden des minimalen Wertes von x (wobei x > 1), so dass, wenn x jede der\ndrei ganzen Zahlen a, b und c teilt, die Reste gleich sind.\nEingabe: Drei positive ganze Zahlen a, b und c, die jeweils 1.000.000 nicht überschreiten.\nAusgabe: Gibt den kleinsten ganzzahligen Wert von x zurück, der die Bedingung erfüllt.\nBeispiel: Für a = 300, b = 262, c = 205 gibt die Funktion 19 zurück.",
      "ha": "Rubuta aikin PHP `function findMinimumDivisor($a, $b, $c)` don warware matsalar mai zuwa:\nNemo mafi ƙanƙanta mai raba lamba wanda ya fi 1 wanda ke bayar da saura iri ɗaya lokacin da aka raba lambobi uku da aka bayar.\nWannan matsalar tana da alaƙa da neman mafi ƙarancin ƙimar x (inda x > 1) ta yadda lokacin da x ya raba kowanne daga cikin lambobi uku a, b, da c, saura suna iri ɗaya.\nShigarwa: Lambobi guda uku masu kyau a, b, da c, kowanne ba ya wuce 1,000,000.\nFitarwa: Ya dawo da mafi ƙanƙanta ƙimar x wanda ya cika yanayin.\nMisali: Don a = 300, b = 262, c = 205, aikin yana dawowa 19.",
      "hi": "PHP फ़ंक्शन `function findMinimumDivisor($a, $b, $c)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nतीन दिए गए संख्याओं को विभाजित करते समय समान शेषफल देने वाला सबसे छोटा पूर्णांक भाजक खोजें जो 1 से बड़ा हो।\nयह समस्या x के न्यूनतम मान को खोजने से संबंधित है (जहाँ x > 1) ताकि जब x तीन पूर्णांक a, b, और c में से प्रत्येक को विभाजित करता है, तो शेषफल समान होते हैं।\nइनपुट: तीन धनात्मक पूर्णांक a, b, और c, प्रत्येक 1,000,000 से अधिक नहीं।\nआउटपुट: x के सबसे छोटे पूर्णांक मान को लौटाता है जो शर्त को पूरा करता है।\nउदाहरण: a = 300, b = 262, c = 205 के लिए, फ़ंक्शन 19 लौटाता है।",
      "hu": "Írj egy PHP függvényt `function findMinimumDivisor($a, $b, $c)` a következő probléma megoldására:\nMegtalálja a legkisebb 1-nél nagyobb egész osztót, amely ugyanazt a maradékot adja, amikor három adott számot elosztunk vele.\nEz a probléma azt jelenti, hogy meg kell találni az x minimális értékét (ahol x > 1) úgy, hogy amikor x osztja az a, b és c három egész számot, a maradékok azonosak.\nBemenet: Három pozitív egész szám, a, b és c, amelyek mindegyike nem haladja meg az 1 000 000-t.\nKimenet: Visszaadja az x legkisebb egész értékét, amely kielégíti a feltételt.\nPélda: Ha a = 300, b = 262, c = 205, a függvény 19-et ad vissza."
    },
    "instruction_bertscore": {
      "sq": "0.9825765402363816",
      "hy": "0.9878489850705717",
      "bn": "0.9562115352400968",
      "bg": "0.9980943401243513",
      "zh": "0.9511756591897194",
      "fr": "0.9926949704766799",
      "de": "0.9858183866852521",
      "ha": "0.9672712748561194",
      "hi": "0.9774411503651057",
      "hu": "0.9679990565722313"
    },
    "level": "easy",
    "test": "function main(){\n    assert(findMinimumDivisor(300, 262, 205) === 19);\n    assert(findMinimumDivisor(100, 200, 300) === 2);\n    assert(findMinimumDivisor(15, 25, 35) === 2);\n    assert(findMinimumDivisor(7, 14, 21) === 7);\n    assert(findMinimumDivisor(9, 18, 27) === 3);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMinimumDivisor",
    "signature": "function findMinimumDivisor($a, $b, $c)",
    "docstring": {
      "en": "Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nThis problem involves finding the minimum value of x (where x > 1) such that when x divides each of the\nthree integers a, b, and c, the remainders are the same.\nInput: Three positive integers a, b, and c, each not exceeding 1,000,000.\nOutput: Returns the smallest integer value of x that satisfies the condition.\nExample: For a = 300, b = 262, c = 205, the function returns 19.",
      "sq": "Gjen pjesëtuesin më të vogël të plotë më të madh se 1 që jep të njëjtin mbetje kur ndan tre numra të dhënë.\nKy problem përfshin gjetjen e vlerës minimale të x (ku x > 1) të tillë që kur x ndan secilin nga\ntre numrat e plotë a, b, dhe c, mbetjet janë të njëjta.\nInput: Tre numra të plotë pozitivë a, b, dhe c, secili jo më i madh se 1,000,000.\nOutput: Kthen vlerën më të vogël të plotë të x që plotëson kushtin.\nShembull: Për a = 300, b = 262, c = 205, funksioni kthen 19.",
      "hy": "Գտնում է ամենափոքր ամբողջ թիվ բաժանարարը, որը մեծ է 1-ից և տալիս է նույն մնացորդը երեք տրված թվերը բաժանելիս:\nԱյս խնդիրը ներառում է x-ի նվազագույն արժեքի գտնումը (որտեղ x > 1), այնպես, որ երբ x-ը բաժանում է երեք ամբողջ թվերը՝ a, b և c, մնացորդները նույնն են:\nՄուտք: Երեք դրական ամբողջ թվեր՝ a, b և c, որոնցից յուրաքանչյուրը չի գերազանցում 1,000,000-ը:\nԵլք: Վերադարձնում է x-ի ամենափոքր ամբողջ արժեքը, որը բավարարում է պայմանը:\nՕրինակ: a = 300, b = 262, c = 205 համար, ֆունկցիան վերադարձնում է 19:",
      "bn": "তিনটি প্রদত্ত সংখ্যাকে ভাগ করার সময় একই ভাগশেষ প্রদান করে এমন 1 এর চেয়ে বড় ক্ষুদ্রতম পূর্ণসংখ্যা বিভাজক খুঁজে বের করে।\nএই সমস্যাটি x এর সর্বনিম্ন মান খুঁজে বের করার সাথে সম্পর্কিত (যেখানে x > 1) যাতে x যখন প্রতিটি\nতিনটি পূর্ণসংখ্যা a, b, এবং c কে ভাগ করে, ভাগশেষগুলি একই হয়।\nইনপুট: তিনটি ধনাত্মক পূর্ণসংখ্যা a, b, এবং c, প্রতিটি 1,000,000 এর বেশি নয়।\nআউটপুট: শর্তটি পূরণ করে এমন x এর ক্ষুদ্রতম পূর্ণসংখ্যার মান প্রদান করে।\nউদাহরণ: a = 300, b = 262, c = 205 এর জন্য, ফাংশনটি 19 প্রদান করে।",
      "bg": "Намира най-малкия делител, по-голям от 1, който дава същия остатък при деление на три дадени числа.\nТози проблем включва намирането на минималната стойност на x (където x > 1), така че когато x дели всяко от\nтрите цели числа a, b и c, остатъците да са еднакви.\nВход: Три положителни цели числа a, b и c, всяко от които не надвишава 1,000,000.\nИзход: Връща най-малката целочислена стойност на x, която удовлетворява условието.\nПример: За a = 300, b = 262, c = 205, функцията връща 19.",
      "zh": "找到大于1的最小整数除数，该除数在除以三个给定数字时产生相同的余数。\n这个问题涉及寻找最小的x值（其中x > 1），使得当x分别除以三个整数a、b和c时，余数相同。\n输入：三个正整数a、b和c，每个不超过1,000,000。\n输出：返回满足条件的最小整数x值。\n例子：对于a = 300, b = 262, c = 205，函数返回19。",
      "fr": "Trouve le plus petit diviseur entier supérieur à 1 qui donne le même reste lors de la division de trois nombres donnés.\nCe problème consiste à trouver la valeur minimale de x (où x > 1) telle que lorsque x divise chacun des\ntrois entiers a, b et c, les restes soient identiques.\nEntrée : Trois entiers positifs a, b et c, chacun ne dépassant pas 1 000 000.\nSortie : Retourne la plus petite valeur entière de x qui satisfait la condition.\nExemple : Pour a = 300, b = 262, c = 205, la fonction retourne 19.",
      "de": "Findet den kleinsten ganzzahligen Teiler größer als 1, der beim Teilen von drei gegebenen Zahlen denselben Rest ergibt.  \nDieses Problem beinhaltet das Finden des minimalen Wertes von x (wobei x > 1), sodass, wenn x jeden der drei Ganzzahlen a, b und c teilt, die Reste gleich sind.  \nEingabe: Drei positive Ganzzahlen a, b und c, die jeweils 1.000.000 nicht überschreiten.  \nAusgabe: Gibt den kleinsten ganzzahligen Wert von x zurück, der die Bedingung erfüllt.  \nBeispiel: Für a = 300, b = 262, c = 205 gibt die Funktion 19 zurück.",
      "ha": "Yana nemo mafi ƙarancin mai raba cikakken lamba wanda ya fi 1 wanda ke bayar da saura iri ɗaya lokacin da aka raba lambobi guda uku da aka bayar. \n\nWannan matsalar tana da alaƙa da nemo mafi ƙarancin ƙimar x (inda x > 1) ta yadda lokacin da x ya raba kowanne daga cikin lambobi uku a, b, da c, saura iri ɗaya ne.\n\nShigarwa: Lambobi uku masu kyau a, b, da c, kowanne ba ya wuce 1,000,000.\n\nFitarwa: Yana mayar da mafi ƙarancin ƙimar x wanda ya cika yanayin.\n\nMisali: Don a = 300, b = 262, c = 205, aikin yana mayar da 19.",
      "hi": "तीन दिए गए संख्याओं को विभाजित करते समय समान शेषफल देने वाला 1 से बड़ा सबसे छोटा पूर्णांक भाजक खोजता है।\nयह समस्या x का न्यूनतम मान खोजने से संबंधित है (जहां x > 1) ताकि जब x तीन पूर्णांकों a, b, और c में से प्रत्येक को विभाजित करता है, तो शेषफल समान होते हैं।\nइनपुट: तीन धनात्मक पूर्णांक a, b, और c, प्रत्येक 1,000,000 से अधिक नहीं।\nआउटपुट: वह सबसे छोटा पूर्णांक मान x लौटाता है जो शर्त को संतुष्ट करता है।\nउदाहरण: a = 300, b = 262, c = 205 के लिए, फ़ंक्शन 19 लौटाता है।",
      "hu": "Megtalálja a legkisebb 1-nél nagyobb egész osztót, amely ugyanazt a maradékot adja, amikor három adott számot osztunk vele.\nEz a probléma azt jelenti, hogy meg kell találni az x minimális értékét (ahol x > 1), úgy, hogy amikor x osztja az a, b és c három egész számot, a maradékok azonosak.\nBemenet: Három pozitív egész szám: a, b és c, amelyek mindegyike nem haladja meg az 1 000 000-t.\nKimenet: Visszaadja az x legkisebb egész értékét, amely kielégíti a feltételt.\nPélda: Ha a = 300, b = 262, c = 205, a függvény 19-et ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9876751834871662",
      "hy": "0.98855114346753",
      "bn": "1",
      "bg": "0.9948107812954635",
      "zh": "0.9665989110163163",
      "fr": "0.9866468740045486",
      "de": "0.9893824116121611",
      "ha": "0.9589192645943644",
      "hi": "0.8838026175072576",
      "hu": "0.9777897466838219"
    }
  },
  {
    "task_id": "PHP/28",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the minimum number of apples required to be distributed among children.\n * Each child should receive a different number of apples and every child must receive at least one apple.\n * The total count of children is a positive integer not greater than 1000.\n * Input: An integer representing the number of children.\n * Output: An integer representing the minimum number of apples required.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin minimal të mollëve që duhet të shpërndahen ndërmjet fëmijëve.\n * Çdo fëmijë duhet të marrë një numër të ndryshëm mollësh dhe çdo fëmijë duhet të marrë të paktën një mollë.\n * Numri total i fëmijëve është një numër i plotë pozitiv jo më i madh se 1000.\n * Hyrja: Një numër i plotë që përfaqëson numrin e fëmijëve.\n * Dalja: Një numër i plotë që përfaqëson numrin minimal të mollëve të kërkuara.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է երեխաների միջև բաշխվող խնձորների նվազագույն քանակը:\n * Յուրաքանչյուր երեխան պետք է ստանա տարբեր քանակի խնձորներ և յուրաքանչյուր երեխան պետք է ստանա առնվազն մեկ խնձոր:\n * Երեխաների ընդհանուր քանակը դրական ամբողջ թիվ է, որը չի գերազանցում 1000-ը:\n * Մուտք: Ամբողջ թիվ, որը ներկայացնում է երեխաների քանակը:\n * Ելք: Ամբողջ թիվ, որը ներկայացնում է անհրաժեշտ խնձորների նվազագույն քանակը:\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "bn": "<?php\n\n\n/**\n * শিশুদের মধ্যে বিতরণের জন্য প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা গণনা করে।\n * প্রতিটি শিশুকে ভিন্ন সংখ্যক আপেল পেতে হবে এবং প্রতিটি শিশুকে অন্তত একটি আপেল পেতে হবে।\n * শিশুদের মোট সংখ্যা একটি ধনাত্মক পূর্ণসংখ্যা যা ১০০০ এর বেশি নয়।\n * ইনপুট: শিশুদের সংখ্যা নির্দেশকারী একটি পূর্ণসংখ্যা।\n * আউটপুট: প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা নির্দেশকারী একটি পূর্ণসংখ্যা।\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява минималния брой ябълки, които трябва да бъдат разпределени между децата.\n * Всяко дете трябва да получи различен брой ябълки и всяко дете трябва да получи поне една ябълка.\n * Общият брой на децата е положително цяло число, което не е по-голямо от 1000.\n * Вход: Цяло число, представляващо броя на децата.\n * Изход: Цяло число, представляващо минималния брой ябълки, които са необходими.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "zh": "<?php\n\n\n/**\n * 计算分配给孩子们所需的最少苹果数量。\n * 每个孩子应该收到不同数量的苹果，并且每个孩子至少要收到一个苹果。\n * 孩子的总数是一个不大于1000的正整数。\n * 输入：一个表示孩子数量的整数。\n * 输出：一个表示所需最少苹果数量的整数。\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre minimum de pommes à distribuer parmi les enfants.\n * Chaque enfant doit recevoir un nombre différent de pommes et chaque enfant doit recevoir au moins une pomme.\n * Le nombre total d'enfants est un entier positif ne dépassant pas 1000.\n * Entrée : Un entier représentant le nombre d'enfants.\n * Sortie : Un entier représentant le nombre minimum de pommes requis.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die minimale Anzahl an Äpfeln, die unter Kindern verteilt werden müssen.\n * Jedes Kind sollte eine unterschiedliche Anzahl von Äpfeln erhalten und jedes Kind muss mindestens einen Apfel erhalten.\n * Die Gesamtanzahl der Kinder ist eine positive ganze Zahl, die nicht größer als 1000 ist.\n * Eingabe: Eine ganze Zahl, die die Anzahl der Kinder darstellt.\n * Ausgabe: Eine ganze Zahl, die die minimale Anzahl an benötigten Äpfeln darstellt.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "ha": "<?php\n\n\n/**\n * Lissafi mafi ƙarancin adadin tuffa da ake buƙata don rarraba tsakanin yara.\n * Kowanne yaro ya kamata ya sami adadin tuffa daban-daban kuma kowanne yaro dole ne ya sami aƙalla tuffa ɗaya.\n * Jimillar adadin yara lamba ce mai kyau ba fiye da 1000 ba.\n * Shigarwa: Lamba ce da ke wakiltar adadin yara.\n * Fitarwa: Lamba ce da ke wakiltar mafi ƙarancin adadin tuffa da ake buƙata.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hi": "<?php\n\n\n/**\n * बच्चों के बीच वितरित करने के लिए आवश्यक न्यूनतम सेबों की गणना करता है।\n * प्रत्येक बच्चे को अलग-अलग संख्या में सेब मिलने चाहिए और हर बच्चे को कम से कम एक सेब अवश्य मिलना चाहिए।\n * बच्चों की कुल संख्या एक धनात्मक पूर्णांक है जो 1000 से अधिक नहीं है।\n * इनपुट: बच्चों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * आउटपुट: आवश्यक न्यूनतम सेबों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a minimálisan szükséges almák számát, amelyeket szét kell osztani a gyerekek között.\n * Minden gyereknek különböző számú almát kell kapnia, és minden gyereknek legalább egy almát kell kapnia.\n * A gyerekek teljes száma egy pozitív egész szám, amely nem nagyobb, mint 1000.\n * Bemenet: Egy egész szám, amely a gyerekek számát jelenti.\n * Kimenet: Egy egész szám, amely a minimálisan szükséges almák számát jelenti.\n */\n\n function minimumApplesForChildren(int $childrenCount): int "
    },
    "prompt_bertscore": {
      "sq": "0.9792554402654784",
      "hy": "0.9804404691187325",
      "bn": "0.9742803451116975",
      "bg": "0.9738876528483915",
      "zh": "0.9720966027025999",
      "fr": "0.9762241420205049",
      "de": "0.9754653739649517",
      "ha": "0.9586010587239465",
      "hi": "0.9833853631479558",
      "hu": "0.9721847945917794"
    },
    "canonical_solution": "{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}",
    "instruction": {
      "en": "Write a PHP function `function minimumApplesForChildren(int $childrenCount): int` to solve the following problem:\nCalculates the minimum number of apples required to be distributed among children.\nEach child should receive a different number of apples and every child must receive at least one apple.\nThe total count of children is a positive integer not greater than 1000.\nInput: An integer representing the number of children.\nOutput: An integer representing the minimum number of apples required.",
      "sq": "Shkruani një funksion PHP `function minimumApplesForChildren(int $childrenCount): int` për të zgjidhur problemin e mëposhtëm:\nLlogarit numrin minimal të mollëve që duhet të shpërndahen midis fëmijëve.\nÇdo fëmijë duhet të marrë një numër të ndryshëm mollësh dhe çdo fëmijë duhet të marrë të paktën një mollë.\nNumri total i fëmijëve është një numër i plotë pozitiv jo më i madh se 1000.\nInput: Një numër i plotë që përfaqëson numrin e fëmijëve.\nOutput: Një numër i plotë që përfaqëson numrin minimal të mollëve të kërkuara.",
      "hy": "Գրեք PHP ֆունկցիա `function minimumApplesForChildren(int $childrenCount): int` լուծելու համար հետևյալ խնդիրը:\nՀաշվում է երեխաների միջև բաշխվելիք խնձորների նվազագույն քանակը:\nՅուրաքանչյուր երեխա պետք է ստանա տարբեր քանակի խնձորներ և յուրաքանչյուր երեխա պետք է ստանա առնվազն մեկ խնձոր:\nԵրեխաների ընդհանուր քանակը դրական ամբողջ թիվ է, որը չի գերազանցում 1000-ը:\nՄուտք: Ամբողջ թիվ, որը ներկայացնում է երեխաների քանակը:\nԵլք: Ամբողջ թիվ, որը ներկայացնում է պահանջվող խնձորների նվազագույն քանակը:",
      "bn": "একটি PHP ফাংশন `function minimumApplesForChildren(int $childrenCount): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nশিশুদের মধ্যে বিতরণ করার জন্য প্রয়োজনীয় সর্বনিম্ন আপেলের সংখ্যা গণনা করে।\nপ্রত্যেক শিশুকে ভিন্ন সংখ্যক আপেল পেতে হবে এবং প্রতিটি শিশুকে কমপক্ষে একটি আপেল পেতে হবে।\nশিশুদের মোট সংখ্যা একটি ধনাত্মক পূর্ণসংখ্যা যা ১০০০-এর বেশি নয়।\nইনপুট: শিশুদের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।\nআউটপুট: প্রয়োজনীয় সর্বনিম্ন আপেলের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।",
      "bg": "Напишете PHP функция `function minimumApplesForChildren(int $childrenCount): int`, за да решите следния проблем:\nИзчислява минималния брой ябълки, които трябва да бъдат разпределени между децата.\nВсяко дете трябва да получи различен брой ябълки и всяко дете трябва да получи поне една ябълка.\nОбщият брой на децата е положително цяло число, не по-голямо от 1000.\nВход: Цяло число, представляващо броя на децата.\nИзход: Цяло число, представляващо минималния брой необходими ябълки.",
      "zh": "编写一个 PHP 函数 `function minimumApplesForChildren(int $childrenCount): int` 来解决以下问题：\n计算分配给孩子们所需的最少苹果数量。\n每个孩子应该收到不同数量的苹果，并且每个孩子至少要收到一个苹果。\n孩子的总数是一个不大于 1000 的正整数。\n输入：一个整数，表示孩子的数量。\n输出：一个整数，表示所需的最少苹果数量。",
      "fr": "Écrire une fonction PHP `function minimumApplesForChildren(int $childrenCount): int` pour résoudre le problème suivant :\nCalcule le nombre minimum de pommes à distribuer parmi les enfants.\nChaque enfant doit recevoir un nombre différent de pommes et chaque enfant doit recevoir au moins une pomme.\nLe nombre total d'enfants est un entier positif ne dépassant pas 1000.\nEntrée : Un entier représentant le nombre d'enfants.\nSortie : Un entier représentant le nombre minimum de pommes requis.",
      "de": "Schreiben Sie eine PHP-Funktion `function minimumApplesForChildren(int $childrenCount): int`, um das folgende Problem zu lösen:\nBerechnet die minimale Anzahl an Äpfeln, die unter Kindern verteilt werden muss.\nJedes Kind sollte eine unterschiedliche Anzahl von Äpfeln erhalten und jedes Kind muss mindestens einen Apfel bekommen.\nDie Gesamtzahl der Kinder ist eine positive ganze Zahl, die nicht größer als 1000 ist.\nEingabe: Eine ganze Zahl, die die Anzahl der Kinder darstellt.\nAusgabe: Eine ganze Zahl, die die minimale Anzahl der benötigten Äpfel darstellt.",
      "ha": "Rubuta aikin PHP `function minimumApplesForChildren(int $childrenCount): int` don warware matsalar mai zuwa:\nLissafa mafi ƙarancin adadin tuffa da ake buƙata don rabawa tsakanin yara.\nKowane yaro ya kamata ya sami adadin tuffa daban-daban kuma dole ne kowane yaro ya sami aƙalla tuffa ɗaya.\nJimillar adadin yara lamba ce mai kyau ba mai girma fiye da 1000 ba.\nShigarwa: Lamba mai nuni ga adadin yara.\nFitarwa: Lamba mai nuni ga mafi ƙarancin adadin tuffa da ake buƙata.",
      "hi": "PHP फ़ंक्शन `function minimumApplesForChildren(int $childrenCount): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nबच्चों के बीच वितरित किए जाने वाले सेबों की न्यूनतम संख्या की गणना करता है।\nप्रत्येक बच्चे को अलग-अलग संख्या में सेब मिलने चाहिए और हर बच्चे को कम से कम एक सेब अवश्य मिलना चाहिए।\nबच्चों की कुल संख्या एक धनात्मक पूर्णांक है जो 1000 से अधिक नहीं है।\nइनपुट: बच्चों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: आवश्यक सेबों की न्यूनतम संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।",
      "hu": "Írj egy PHP függvényt `function minimumApplesForChildren(int $childrenCount): int` a következő probléma megoldására:\nKiszámítja a minimálisan szükséges almák számát, amelyeket szét kell osztani a gyerekek között.\nMinden gyereknek különböző számú almát kell kapnia, és minden gyereknek legalább egy almát kell kapnia.\nA gyerekek teljes száma egy pozitív egész szám, amely nem nagyobb, mint 1000.\nBemenet: Egy egész szám, amely a gyerekek számát jelöli.\nKimenet: Egy egész szám, amely a szükséges minimális almák számát jelöli."
    },
    "instruction_bertscore": {
      "sq": "0.9793718376687648",
      "hy": "0.9777643219950495",
      "bn": "0.9782465965602022",
      "bg": "0.9757543811693574",
      "zh": "0.9748569691078418",
      "fr": "0.9759132854741853",
      "de": "0.9805334281370568",
      "ha": "0.9556704660821578",
      "hi": "0.9696109421143293",
      "hu": "0.979350385587613"
    },
    "level": "easy",
    "test": "function main(){\n    assert(minimumApplesForChildren(1) === 1);\n    assert(minimumApplesForChildren(2) === 3);\n    assert(minimumApplesForChildren(3) === 6);\n    assert(minimumApplesForChildren(8) === 36);\n    assert(minimumApplesForChildren(10) === 55);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "minimumApplesForChildren",
    "signature": "function minimumApplesForChildren(int $childrenCount): int",
    "docstring": {
      "en": "Calculates the minimum number of apples required to be distributed among children.\nEach child should receive a different number of apples and every child must receive at least one apple.\nThe total count of children is a positive integer not greater than 1000.\nInput: An integer representing the number of children.\nOutput: An integer representing the minimum number of apples required.",
      "sq": "Llogarit numrin minimal të mollëve që duhen shpërndarë midis fëmijëve.\nÇdo fëmijë duhet të marrë një numër të ndryshëm mollësh dhe çdo fëmijë duhet të marrë të paktën një mollë.  \nNumri total i fëmijëve është një numër i plotë pozitiv jo më i madh se 1000.  \nInput: Një numër i plotë që përfaqëson numrin e fëmijëve.  \nOutput: Një numër i plotë që përfaqëson numrin minimal të mollëve të kërkuara.",
      "hy": "Հաշվում է երեխաների միջև բաժանվող խնձորների նվազագույն քանակը:\nՅուրաքանչյուր երեխա պետք է ստանա տարբեր քանակությամբ խնձորներ, և յուրաքանչյուր երեխա պետք է ստանա առնվազն մեկ խնձոր:  \nԵրեխաների ընդհանուր քանակը դրական ամբողջ թիվ է, որը չի գերազանցում 1000-ը:  \nՄուտք: Ամբողջ թիվ, որը ներկայացնում է երեխաների քանակը:  \nԵլք: Ամբողջ թիվ, որը ներկայացնում է անհրաժեշտ խնձորների նվազագույն քանակը:  ",
      "bn": "শিশুদের মধ্যে বিতরণের জন্য প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা গণনা করে।\nপ্রতিটি শিশুকে ভিন্ন সংখ্যক আপেল পেতে হবে এবং প্রতিটি শিশুকে অন্তত একটি আপেল পেতে হবে।  \nThe total count of children is a positive integer not greater than 1000.  \nশিশুদের মোট সংখ্যা একটি ধনাত্মক পূর্ণসংখ্যা যা ১০০০ এর বেশি নয়।  \nInput: An integer representing the number of children.  \nইনপুট: শিশুদের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।  \nOutput: An integer representing the minimum number of apples required.  \nআউটপুট: প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।  ",
      "bg": "Изчислява минималния брой ябълки, които трябва да бъдат разпределени между децата.\nВсяко дете трябва да получи различен брой ябълки и всяко дете трябва да получи поне една ябълка.  \nОбщият брой на децата е положително цяло число, което не е по-голямо от 1000.  \nВход: Цяло число, представляващо броя на децата.  \nИзход: Цяло число, представляващо минималния брой необходими ябълки.",
      "zh": "计算分配给儿童的最少苹果数量。\n每个孩子应收到不同数量的苹果，并且每个孩子必须至少收到一个苹果。\n儿童的总数是一个不大于1000的正整数。  \n输入：表示儿童数量的整数。  \n输出：表示所需最少苹果数量的整数。",
      "fr": "Calcule le nombre minimum de pommes à distribuer parmi les enfants.\nChaque enfant doit recevoir un nombre différent de pommes et chaque enfant doit recevoir au moins une pomme.  \nLe nombre total d'enfants est un entier positif ne dépassant pas 1000.  \nEntrée : Un entier représentant le nombre d'enfants.  \nSortie : Un entier représentant le nombre minimum de pommes requis.",
      "de": "Berechnet die minimale Anzahl an Äpfeln, die unter Kindern verteilt werden muss.\nJedes Kind sollte eine unterschiedliche Anzahl von Äpfeln erhalten und jedes Kind muss mindestens einen Apfel bekommen.\nDie Gesamtanzahl der Kinder ist eine positive ganze Zahl, die nicht größer als 1000 ist.\nEingabe: Eine ganze Zahl, die die Anzahl der Kinder darstellt.\nAusgabe: Eine ganze Zahl, die die minimale Anzahl an benötigten Äpfeln darstellt.",
      "ha": "Lissafi mafi ƙarancin adadin tuffa da ake buƙata don rarraba tsakanin yara.\nKowane yaro ya kamata ya sami adadin tuffa daban-daban kuma kowane yaro dole ne ya sami a kalla tuffa daya.  \nJimillar adadin yara lamba ce mai kyau ba fiye da 1000 ba.  \nInput: Lamba ce mai nuna adadin yara.  \nOutput: Lamba ce mai nuna adadin tuffa mafi karanci da ake bukata.",
      "hi": "बच्चों के बीच वितरित करने के लिए आवश्यक न्यूनतम सेबों की गणना करता है।\nप्रत्येक बच्चे को अलग-अलग संख्या में सेब मिलने चाहिए और हर बच्चे को कम से कम एक सेब अवश्य मिलना चाहिए।  \nबच्चों की कुल संख्या एक धनात्मक पूर्णांक है जो 1000 से अधिक नहीं है।  \nInput: बच्चों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।  \nOutput: आवश्यक न्यूनतम सेबों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।  ",
      "hu": "Kiszámítja a minimálisan szükséges almák számát, amelyeket szét kell osztani a gyerekek között.\nMinden gyereknek különböző számú almát kell kapnia, és minden gyereknek legalább egy almát kell kapnia.\nA gyerekek teljes száma egy pozitív egész szám, amely nem nagyobb, mint 1000.\nBemenet: Egy egész szám, amely a gyerekek számát jelenti.\nKimenet: Egy egész szám, amely a minimálisan szükséges almák számát jelenti."
    },
    "docstring_bertscore": {
      "sq": "0.9630885162922868",
      "hy": "0.9580772704091576",
      "bn": "0.9921183464805357",
      "bg": "0.9634033454462271",
      "zh": "0.9678345906167344",
      "fr": "0.9607003832211043",
      "de": "0.9806565789732985",
      "ha": "0.9435061429172003",
      "hi": "0.9736363854163824",
      "hu": "0.9564737273430629"
    }
  },
  {
    "task_id": "PHP/29",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\n * The function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\n * Conditions: 0 < a < b < 100, 1 <= n <= 10000.\n * The function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n * \n * Example:\n * Input: a = 1, b = 2, n = 1\n * Output: 5 (since 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "sq": "<?php\n\n\n/**\n * Gjen shifrën e n-të pas pikës dhjetore në paraqitjen dhjetore të thyesës a/b.\n * Funksioni merr tre numra të plotë si hyrje: a (numëruesi), b (emëruesi), dhe n (pozicioni i shifrës pas pikës dhjetore).\n * Kushtet: 0 < a < b < 100, 1 <= n <= 10000.\n * Funksioni llogarit paraqitjen dhjetore të a/b dhe kthen shifrën e n-të pas pikës dhjetore.\n * \n * Shembull:\n * Hyrja: a = 1, b = 2, n = 1\n * Dalja: 5 (pasi 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hy": "<?php\n\n\n/**\n * Գտնում է տասնորդական կետի հետո n-րդ թվանշանը կոտորակի a/b տասնորդական ներկայացման մեջ:\n * Ֆունկցիան ընդունում է երեք ամբողջ թիվ՝ a (թվիչ), b (հատարար) և n (թվանշանի դիրքը տասնորդական կետի հետո):\n * Պայմաններ՝ 0 < a < b < 100, 1 <= n <= 10000:\n * Ֆունկցիան հաշվարկում է a/b-ի տասնորդական ներկայացումը և վերադարձնում է տասնորդական կետի հետո n-րդ թվանշանը:\n * \n * Օրինակ:\n * Մուտք: a = 1, b = 2, n = 1\n * Ելք: 5 (քանի որ 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "bn": "<?php\n\n\n/**\n * ভগ্নাংশ a/b এর দশমিক প্রতিনিধিত্বে দশমিক বিন্দুর পরে nth অঙ্ক খুঁজে বের করে।\n * ফাংশনটি তিনটি পূর্ণসংখ্যা ইনপুট হিসাবে গ্রহণ করে: a (লব), b (হর), এবং n (দশমিক বিন্দুর পরে অঙ্কের অবস্থান)।\n * শর্তাবলী: 0 < a < b < 100, 1 <= n <= 10000।\n * ফাংশনটি a/b এর দশমিক প্রতিনিধিত্ব গণনা করে এবং দশমিক বিন্দুর পরে nth অঙ্কটি প্রদান করে।\n * \n * উদাহরণ:\n * ইনপুট: a = 1, b = 2, n = 1\n * আউটপুট: 5 (কারণ 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "bg": "<?php\n\n\n/**\n * Намира n-тата цифра след десетичната запетая в десетичното представяне на дробта a/b.\n * Функцията приема три цели числа като вход: a (числител), b (знаменател) и n (позиция на цифрата след десетичната запетая).\n * Условия: 0 < a < b < 100, 1 <= n <= 10000.\n * Функцията изчислява десетичното представяне на a/b и връща n-тата цифра след десетичната запетая.\n * \n * Пример:\n * Вход: a = 1, b = 2, n = 1\n * Изход: 5 (тъй като 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "zh": "<?php\n\n\n/**\n * 查找分数 a/b 的小数表示中小数点后的第 n 位数字。\n * 该函数接受三个整数作为输入：a（分子）、b（分母）和 n（小数点后的位置）。\n * 条件：0 < a < b < 100, 1 <= n <= 10000。\n * 该函数计算 a/b 的小数表示并返回小数点后的第 n 位数字。\n * \n * 示例：\n * 输入: a = 1, b = 2, n = 1\n * 输出: 5 (因为 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "fr": "<?php\n\n\n/**\n * Trouve le nième chiffre après la virgule dans la représentation décimale de la fraction a/b.\n * La fonction prend trois entiers en entrée : a (numérateur), b (dénominateur), et n (position du chiffre après la virgule).\n * Conditions : 0 < a < b < 100, 1 <= n <= 10000.\n * La fonction calcule la représentation décimale de a/b et renvoie le nième chiffre après la virgule.\n * \n * Exemple :\n * Entrée : a = 1, b = 2, n = 1\n * Sortie : 5 (puisque 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "de": "<?php\n\n\n/**\n * Findet die n-te Ziffer nach dem Dezimalpunkt in der Dezimaldarstellung des Bruchs a/b.\n * Die Funktion nimmt drei ganze Zahlen als Eingabe: a (Zähler), b (Nenner) und n (Position der Ziffer nach dem Dezimalpunkt).\n * Bedingungen: 0 < a < b < 100, 1 <= n <= 10000.\n * Die Funktion berechnet die Dezimaldarstellung von a/b und gibt die n-te Ziffer nach dem Dezimalpunkt zurück.\n * \n * Beispiel:\n * Eingabe: a = 1, b = 2, n = 1\n * Ausgabe: 5 (da 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "ha": "<?php\n\n\n/**\n * Nemi adadi na n bayan alamar kashi a wakilcin kason a/b.\n * Aikin yana karɓar lambobi guda uku a matsayin shigarwa: a (lambar sama), b (lambar ƙasa), da n (matsayi na adadi bayan alamar kashi).\n * Sharuɗɗa: 0 < a < b < 100, 1 <= n <= 10000.\n * Aikin yana lissafin wakilcin kason a/b kuma yana dawo da adadi na n bayan alamar kashi.\n * \n * Misali:\n * Shigarwa: a = 1, b = 2, n = 1\n * Fitarwa: 5 (saboda 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hi": "<?php\n\n\n/**\n * भिन्न a/b के दशमलव प्रतिनिधित्व में दशमलव बिंदु के बाद का nth अंक ढूंढता है।\n * यह फ़ंक्शन तीन पूर्णांक इनपुट के रूप में लेता है: a (अंश), b (हर), और n (दशमलव बिंदु के बाद अंक की स्थिति)।\n * शर्तें: 0 < a < b < 100, 1 <= n <= 10000।\n * फ़ंक्शन a/b के दशमलव प्रतिनिधित्व की गणना करता है और दशमलव बिंदु के बाद nth अंक लौटाता है।\n * \n * उदाहरण:\n * इनपुट: a = 1, b = 2, n = 1\n * आउटपुट: 5 (क्योंकि 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hu": "<?php\n\n\n/**\n * Megkeresi az a/b tört tizedesjegy utáni n-edik számjegyét a tizedesjegyű ábrázolásban.\n * A függvény három egész számot vesz be bemenetként: a (számláló), b (nevező), és n (a tizedesjegy utáni számjegy pozíciója).\n * Feltételek: 0 < a < b < 100, 1 <= n <= 10000.\n * A függvény kiszámítja az a/b tizedesjegyű ábrázolását, és visszaadja a tizedesjegy utáni n-edik számjegyet.\n * \n * Példa:\n * Bemenet: a = 1, b = 2, n = 1\n * Kimenet: 5 (mivel 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int"
    },
    "prompt_bertscore": {
      "sq": "0.990730913269007",
      "hy": "0.9829446023324393",
      "bn": "0.9856940440667242",
      "bg": "0.990730913269007",
      "zh": "0.9777154589213148",
      "fr": "0.999999801369619",
      "de": "0.990730913269007",
      "ha": "0.9775305340365714",
      "hi": "0.9892854799862161",
      "hu": "0.9856598796411863"
    },
    "canonical_solution": "  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}",
    "instruction": {
      "en": "Write a PHP function `function getDecimalDigit($a, $b, $n): int` to solve the following problem:\nFinds the nth digit after the decimal point in the decimal representation of the fraction a/b.\nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\nConditions: 0 < a < b < 100, 1 <= n <= 10000.\nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n\nExample:\nInput: a = 1, b = 2, n = 1\nOutput: 5 (since 1/2 = 0.5)",
      "sq": "Shkruani një funksion PHP `function getDecimalDigit($a, $b, $n): int` për të zgjidhur problemin e mëposhtëm:\nGjen shifrën e n-të pas pikës dhjetore në përfaqësimin dhjetor të thyesës a/b.\nFunksioni merr tre numra të plotë si hyrje: a (numëruesi), b (emëruesi), dhe n (pozicioni i shifrës pas pikës dhjetore).\nKushtet: 0 < a < b < 100, 1 <= n <= 10000.\nFunksioni llogarit përfaqësimin dhjetor të a/b dhe kthen shifrën e n-të pas pikës dhjetore.\n\nShembull:\nHyrja: a = 1, b = 2, n = 1\nDalja: 5 (pasi 1/2 = 0.5)",
      "hy": "PHP ֆունկցիա գրեք `function getDecimalDigit($a, $b, $n): int` հետևյալ խնդիրը լուծելու համար:\nԳտնում է n-րդ թվանշանը տասնորդական կետից հետո a/b կոտորակի տասնորդական ներկայացման մեջ:\nՖունկցիան ընդունում է երեք ամբողջ թիվ որպես մուտք՝ a (թվարար), b (համարար) և n (թվանշանի դիրքը տասնորդական կետից հետո):\nՊայմանները՝ 0 < a < b < 100, 1 <= n <= 10000:\nՖունկցիան հաշվարկում է a/b-ի տասնորդական ներկայացումը և վերադարձնում է n-րդ թվանշանը տասնորդական կետից հետո:\n\nՕրինակ:\nՄուտք: a = 1, b = 2, n = 1\nԵլք: 5 (քանի որ 1/2 = 0.5)",
      "bn": "PHP ফাংশন `function getDecimalDigit($a, $b, $n): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nভগ্নাংশ a/b এর দশমিক রূপে দশমিক বিন্দুর পরে nth অঙ্কটি খুঁজে বের করুন।\nফাংশনটি তিনটি পূর্ণসংখ্যা ইনপুট হিসেবে গ্রহণ করে: a (উপপাদ্য), b (ভাজক), এবং n (দশমিক বিন্দুর পরে অঙ্কের অবস্থান)।\nশর্তাবলী: 0 < a < b < 100, 1 <= n <= 10000।\nফাংশনটি a/b এর দশমিক রূপ গণনা করে এবং দশমিক বিন্দুর পরে nth অঙ্কটি ফেরত দেয়।\n\nউদাহরণ:\nইনপুট: a = 1, b = 2, n = 1\nআউটপুট: 5 (কারণ 1/2 = 0.5)",
      "bg": "Напишете PHP функция `function getDecimalDigit($a, $b, $n): int`, за да решите следния проблем:\nНамира n-тата цифра след десетичната запетая в десетичното представяне на дробта a/b.\nФункцията приема три цели числа като вход: a (числител), b (знаменател) и n (позиция на цифрата след десетичната запетая).\nУсловия: 0 < a < b < 100, 1 <= n <= 10000.\nФункцията изчислява десетичното представяне на a/b и връща n-тата цифра след десетичната запетая.\n\nПример:\nВход: a = 1, b = 2, n = 1\nИзход: 5 (тъй като 1/2 = 0.5)",
      "zh": "编写一个 PHP 函数 `function getDecimalDigit($a, $b, $n): int` 来解决以下问题：\n找到分数 a/b 的小数表示中小数点后的第 n 位数字。\n该函数接收三个整数作为输入：a（分子）、b（分母）和 n（小数点后的位置）。\n条件：0 < a < b < 100, 1 <= n <= 10000。\n该函数计算 a/b 的小数表示并返回小数点后的第 n 位数字。\n\n示例：\n输入: a = 1, b = 2, n = 1\n输出: 5 (因为 1/2 = 0.5)",
      "fr": "Écrire une fonction PHP `function getDecimalDigit($a, $b, $n): int` pour résoudre le problème suivant :\nTrouver le nième chiffre après la virgule dans la représentation décimale de la fraction a/b.\nLa fonction prend trois entiers en entrée : a (numérateur), b (dénominateur), et n (position du chiffre après la virgule).\nConditions : 0 < a < b < 100, 1 <= n <= 10000.\nLa fonction calcule la représentation décimale de a/b et renvoie le nième chiffre après la virgule.\n\nExemple :\nEntrée : a = 1, b = 2, n = 1\nSortie : 5 (puisque 1/2 = 0.5)",
      "de": "Schreiben Sie eine PHP-Funktion `function getDecimalDigit($a, $b, $n): int`, um das folgende Problem zu lösen:\nFindet die n-te Stelle nach dem Dezimalpunkt in der Dezimaldarstellung des Bruchs a/b.\nDie Funktion nimmt drei ganze Zahlen als Eingabe: a (Zähler), b (Nenner) und n (Position der Stelle nach dem Dezimalpunkt).\nBedingungen: 0 < a < b < 100, 1 <= n <= 10000.\nDie Funktion berechnet die Dezimaldarstellung von a/b und gibt die n-te Stelle nach dem Dezimalpunkt zurück.\n\nBeispiel:\nEingabe: a = 1, b = 2, n = 1\nAusgabe: 5 (da 1/2 = 0.5)",
      "ha": "Rubuta aikin PHP `function getDecimalDigit($a, $b, $n): int` don warware matsalar mai zuwa:\nNemo lambar n ta bayan alamar kashi a cikin wakilcin kason a/b.\nAikin yana karɓar lambobi guda uku a matsayin shigarwa: a (mabiyi), b (mafi ƙasa), da n (matsayin lambar bayan alamar kashi).\nYanayi: 0 < a < b < 100, 1 <= n <= 10000.\nAikin yana ƙididdige wakilcin kason a/b kuma yana mayar da lambar n ta bayan alamar kashi.\n\nMisali:\nShigarwa: a = 1, b = 2, n = 1\nFitarwa: 5 (tun da 1/2 = 0.5)",
      "hi": "PHP फ़ंक्शन `function getDecimalDigit($a, $b, $n): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nभिन्न a/b के दशमलव रूप में दशमलव बिंदु के बाद का nth अंक खोजें।\nयह फ़ंक्शन तीन पूर्णांक इनपुट के रूप में लेता है: a (अंश), b (हर), और n (दशमलव बिंदु के बाद के अंक की स्थिति)।\nशर्तें: 0 < a < b < 100, 1 <= n <= 10000।\nफ़ंक्शन a/b के दशमलव रूप की गणना करता है और दशमलव बिंदु के बाद का nth अंक लौटाता है।\n\nउदाहरण:\nइनपुट: a = 1, b = 2, n = 1\nआउटपुट: 5 (क्योंकि 1/2 = 0.5)",
      "hu": "Írj egy PHP függvényt `function getDecimalDigit($a, $b, $n): int` a következő probléma megoldására:\nMegtalálja az n-edik számjegyet a tizedesvessző után az a/b tört tizedes ábrázolásában.\nA függvény három egész számot vesz be bemenetként: a (számláló), b (nevező), és n (a számjegy pozíciója a tizedesvessző után).\nFeltételek: 0 < a < b < 100, 1 <= n <= 10000.\nA függvény kiszámítja az a/b tizedes ábrázolását és visszaadja az n-edik számjegyet a tizedesvessző után.\n\nPélda:\nBemenet: a = 1, b = 2, n = 1\nKimenet: 5 (mivel 1/2 = 0.5)"
    },
    "instruction_bertscore": {
      "sq": "0.9918100721291695",
      "hy": "0.9848490704258018",
      "bn": "0.993782670443227",
      "bg": "0.9918100721291695",
      "zh": "0.9783731241129213",
      "fr": "0.9961894747702267",
      "de": "0.9920208189634475",
      "ha": "0.9801407358737508",
      "hi": "0.9615167540871576",
      "hu": "0.9897325969739256"
    },
    "level": "middle",
    "test": "function main(){\n    assert(getDecimalDigit(1, 2, 1) === 5);\n    assert(getDecimalDigit(1, 3, 1) === 3);\n    assert(getDecimalDigit(1, 4, 2) === 5);\n    assert(getDecimalDigit(3, 7, 3) === 8);\n    assert(getDecimalDigit(50, 99, 4) === 0);   \n}\n\n\nmain();\n?>",
    "entry_point": "getDecimalDigit",
    "signature": "function getDecimalDigit($a, $b, $n): int",
    "docstring": {
      "en": "Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\nConditions: 0 < a < b < 100, 1 <= n <= 10000.\nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n\nExample:\nInput: a = 1, b = 2, n = 1\nOutput: 5 (since 1/2 = 0.5)",
      "sq": "Gjen shifrën e n-të pas pikës dhjetore në paraqitjen dhjetore të thyesës a/b.  \nFunksioni merr tre numra të plotë si hyrje: a (numëruesi), b (emëruesi), dhe n (pozicioni i shifrës pas pikës dhjetore).  \nKushtet: 0 < a < b < 100, 1 <= n <= 10000.  \nFunksioni llogarit paraqitjen dhjetore të a/b dhe kthen shifrën e n-të pas pikës dhjetore.\n\nShembull:  \nHyrja: a = 1, b = 2, n = 1  \nDalja: 5 (pasi 1/2 = 0.5)",
      "hy": "Գտնում է a/b կոտորակի տասնորդական ներկայացման մեջ տասնորդական կետի n-րդ թվանշանը:\nՖունկցիան ընդունում է երեք ամբողջ թիվ՝ a (թվիչ), b (հատարար) և n (թվանշանի դիրքը տասնորդական կետից հետո):\nՊայմաններ: 0 < a < b < 100, 1 <= n <= 10000:\nՖունկցիան հաշվարկում է a/b-ի տասնորդական ներկայացումը և վերադարձնում է տասնորդական կետի n-րդ թվանշանը:\n\nՕրինակ:\nՄուտք: a = 1, b = 2, n = 1\nԵլք: 5 (քանի որ 1/2 = 0.5)",
      "bn": "ভগ্নাংশ a/b এর দশমিক প্রতিনিধিত্বে দশমিক বিন্দুর পরে nth অঙ্ক খুঁজে বের করে।  \nভগ্নাংশ a/b এর দশমিক রূপে দশমিক বিন্দুর পরে nth অঙ্কটি খুঁজে বের করে।  \nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).  \nফাংশনটি তিনটি পূর্ণসংখ্যা ইনপুট হিসেবে গ্রহণ করে: a (উপপাদ্য), b (ভাজক), এবং n (দশমিক বিন্দুর পরে অঙ্কের অবস্থান)।  \nConditions: 0 < a < b < 100, 1 <= n <= 10000.  \nশর্তাবলী: 0 < a < b < 100, 1 <= n <= 10000।  \nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.  \nফাংশনটি a/b এর দশমিক রূপ গণনা করে এবং দশমিক বিন্দুর পরে nth অঙ্কটি ফেরত দেয়।  \n\nExample:  \nউদাহরণ:  \nInput: a = 1, b = 2, n = 1  \nইনপুট: a = 1, b = 2, n = 1  \nOutput: 5 (since 1/2 = 0.5)  \nআউটপুট: 5 (কারণ 1/2 = 0.5)",
      "bg": "Намира n-тата цифра след десетичната запетая в десетичното представяне на дробта a/b. \nФункцията приема три цели числа като вход: a (числител), b (знаменател) и n (позиция на цифрата след десетичната запетая). \nУсловия: 0 < a < b < 100, 1 <= n <= 10000. \nФункцията изчислява десетичното представяне на a/b и връща n-тата цифра след десетичната запетая.\n\nПример:\nВход: a = 1, b = 2, n = 1\nИзход: 5 (тъй като 1/2 = 0.5)",
      "zh": "找到分数 a/b 的小数表示中小数点后的第 n 位数字。\n该函数接受三个整数作为输入：a（分子）、b（分母）和 n（小数点后的数字位置）。\n条件：0 < a < b < 100, 1 <= n <= 10000。\n该函数计算 a/b 的小数表示并返回小数点后的第 n 位数字。\n\n示例：\n输入: a = 1, b = 2, n = 1\n输出: 5 (因为 1/2 = 0.5)",
      "fr": "Trouve le nième chiffre après la virgule dans la représentation décimale de la fraction a/b.  \nLa fonction prend trois entiers en entrée : a (numérateur), b (dénominateur), et n (position du chiffre après la virgule).  \nConditions : 0 < a < b < 100, 1 <= n <= 10000.  \nLa fonction calcule la représentation décimale de a/b et renvoie le nième chiffre après la virgule.\n\nExemple :  \nEntrée : a = 1, b = 2, n = 1  \nSortie : 5 (puisque 1/2 = 0.5)",
      "de": "Findet die n-te Ziffer nach dem Dezimalpunkt in der Dezimaldarstellung des Bruchs a/b.\nDie Funktion nimmt drei ganze Zahlen als Eingabe: a (Zähler), b (Nenner) und n (Position der Ziffer nach dem Dezimalpunkt).\nBedingungen: 0 < a < b < 100, 1 <= n <= 10000.\nDie Funktion berechnet die Dezimaldarstellung von a/b und gibt die n-te Ziffer nach dem Dezimalpunkt zurück.\n\nBeispiel:\nEingabe: a = 1, b = 2, n = 1\nAusgabe: 5 (da 1/2 = 0.5)",
      "ha": "Nemi adadi na n bayan alamar kashi a wakilcin kason a/b.\nFungar zai karɓi lambobi guda uku a matsayin shigarwa: a (lambar sama), b (lambar ƙasa), da n (matsayin lambar bayan alamar aya).  \nYanayi: 0 < a < b < 100, 1 <= n <= 10000.  \nFungar zai ƙididdige wakilcin a/b a cikin tsarin lamba kuma ya mayar da lambar n bayan alamar aya.  \n\nMisali:  \nShigarwa: a = 1, b = 2, n = 1  \nFitarwa: 5 (tun da 1/2 = 0.5)",
      "hi": "भिन्न a/b के दशमलव प्रतिनिधित्व में दशमलव बिंदु के बाद का nth अंक ढूंढता है।\nयह फ़ंक्शन तीन पूर्णांक इनपुट के रूप में लेता है: a (अंश), b (हर), और n (दशमलव बिंदु के बाद अंक की स्थिति)।  \nशर्तें: 0 < a < b < 100, 1 <= n <= 10000।  \nयह फ़ंक्शन a/b का दशमलव प्रतिनिधित्व गणना करता है और दशमलव बिंदु के बाद nth अंक लौटाता है।  \n\nउदाहरण:  \nइनपुट: a = 1, b = 2, n = 1  \nआउटपुट: 5 (क्योंकि 1/2 = 0.5)",
      "hu": "Megkeresi az a/b tört tizedes ábrázolásában az n-edik számjegyet a tizedesvessző után.\nA függvény három egész számot vesz be bemenetként: a (számláló), b (nevező), és n (a számjegy pozíciója a tizedesvessző után).\nFeltételek: 0 < a < b < 100, 1 <= n <= 10000.\nA függvény kiszámítja az a/b tizedes ábrázolását, és visszaadja az n-edik számjegyet a tizedesvessző után.\n\nPélda:\nBemenet: a = 1, b = 2, n = 1\nKimenet: 5 (mivel 1/2 = 0.5)"
    },
    "docstring_bertscore": {
      "sq": "0.9863262845695583",
      "hy": "0.9851495981923076",
      "bn": "1",
      "bg": "0.9892707813380195",
      "zh": "0.9887799656664823",
      "fr": "0.9920821957511873",
      "de": "0.9892707813380195",
      "ha": "0.9760698062144408",
      "hi": "0.9865304766012621",
      "hu": "0.9850038034926281"
    }
  },
  {
    "task_id": "PHP/30",
    "prompt": {
      "en": "<?php\n/**\n * Solves the Josephus Problem.\n * In this problem, N people are arranged in a circle and eliminated in every Mth position\n * until only one person remains. The function simulates this process and returns the order\n * in which people are eliminated.\n * \n * For example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Input: Two integers, N (number of people in the circle) and M (the elimination step).\n * Output: Returns an array representing the order in which people are eliminated.\n */\n\nfunction josephusProblem($n, $m) ",
      "sq": "<?php\n/**\n * Zgjidh Problemin e Josephus.\n * Në këtë problem, N njerëz janë të rregulluar në një rreth dhe eliminohen në çdo pozicion të M-të\n * derisa të mbetet vetëm një person. Funksioni simulon këtë proces dhe kthen rendin\n * në të cilin njerëzit eliminohen.\n * \n * Për shembull, me N = 8 dhe M = 5, rendi i eliminimit është 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Hyrja: Dy numra të plotë, N (numri i njerëzve në rreth) dhe M (hapi i eliminimit).\n * Dalja: Kthen një varg që përfaqëson rendin në të cilin njerëzit eliminohen.\n */\n\nfunction josephusProblem($n, $m) ",
      "hy": "<?php\n/**\n * Լուծում է Ջոզեֆուսի խնդիրը:\n * Այս խնդրում, N մարդիկ դասավորված են շրջանաձև և վերացվում են յուրաքանչյուր M-րդ դիրքում,\n * մինչև միայն մեկ մարդ մնա: Ֆունկցիան սիմուլացնում է այս գործընթացը և վերադարձնում է այն հերթականությունը,\n * որով մարդիկ վերացվում են:\n * \n * Օրինակ, N = 8 և M = 5 դեպքում, վերացման հերթականությունը 5, 2, 8, 7, 1, 4, 6, 3 է:\n * \n * Մուտք: Երկու ամբողջ թիվ, N (մարդկանց քանակը շրջանաձև) և M (վերացման քայլը):\n * Ելք: Վերադարձնում է զանգված, որը ներկայացնում է այն հերթականությունը, որով մարդիկ վերացվում են:\n */\n\nfunction josephusProblem($n, $m) ",
      "bn": "<?php\n/**\n * জোসেফাস সমস্যা সমাধান করে।\n * এই সমস্যায়, N জন মানুষ একটি বৃত্তে সাজানো হয় এবং প্রতি M তম অবস্থানে বাদ দেওয়া হয়\n * যতক্ষণ না শুধুমাত্র একজন ব্যক্তি অবশিষ্ট থাকে। ফাংশনটি এই প্রক্রিয়াটি অনুকরণ করে এবং যে ক্রমে\n * মানুষ বাদ পড়ে তা ফেরত দেয়।\n * \n * উদাহরণস্বরূপ, N = 8 এবং M = 5 হলে, বাদ দেওয়ার ক্রম হল 5, 2, 8, 7, 1, 4, 6, 3।\n * \n * ইনপুট: দুটি পূর্ণসংখ্যা, N (বৃত্তে মানুষের সংখ্যা) এবং M (বাদ দেওয়ার ধাপ)।\n * আউটপুট: একটি অ্যারে ফেরত দেয় যা মানুষ যে ক্রমে বাদ পড়ে তা উপস্থাপন করে।\n */\n\nfunction josephusProblem($n, $m) ",
      "bg": "<?php\n/**\n * Решава проблема на Йосиф Флавий.\n * В този проблем N души са подредени в кръг и се елиминират на всяка M-та позиция\n * докато остане само един човек. Функцията симулира този процес и връща реда\n * в който хората са елиминирани.\n * \n * Например, с N = 8 и M = 5, редът на елиминиране е 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Вход: Две цели числа, N (брой хора в кръга) и M (стъпка на елиминиране).\n * Изход: Връща масив, представляващ реда, в който хората са елиминирани.\n */\n\nfunction josephusProblem($n, $m) ",
      "zh": "<?php\n/**\n * 解决约瑟夫问题。\n * 在这个问题中，N个人被安排成一个圆圈，并且每隔M个位置淘汰一个人\n * 直到只剩下一个人为止。该函数模拟此过程并返回人被淘汰的顺序。\n * \n * 例如，对于N = 8和M = 5，淘汰顺序是5, 2, 8, 7, 1, 4, 6, 3。\n * \n * 输入：两个整数，N（圆圈中的人数）和M（淘汰步长）。\n * 输出：返回一个数组，表示人被淘汰的顺序。\n */\n\nfunction josephusProblem($n, $m) ",
      "fr": "<?php\n/**\n * Résout le problème de Josephus.\n * Dans ce problème, N personnes sont disposées en cercle et éliminées à chaque Mème position\n * jusqu'à ce qu'il ne reste qu'une seule personne. La fonction simule ce processus et renvoie l'ordre\n * dans lequel les personnes sont éliminées.\n * \n * Par exemple, avec N = 8 et M = 5, l'ordre d'élimination est 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Entrée : Deux entiers, N (nombre de personnes dans le cercle) et M (le pas d'élimination).\n * Sortie : Renvoie un tableau représentant l'ordre dans lequel les personnes sont éliminées.\n */\n\nfunction josephusProblem($n, $m) ",
      "de": "<?php\n/**\n * Löst das Josephus-Problem.\n * In diesem Problem sind N Personen in einem Kreis angeordnet und werden in jeder M-ten Position eliminiert,\n * bis nur noch eine Person übrig bleibt. Die Funktion simuliert diesen Prozess und gibt die Reihenfolge zurück,\n * in der die Personen eliminiert werden.\n * \n * Zum Beispiel, mit N = 8 und M = 5, ist die Eliminierungsreihenfolge 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Eingabe: Zwei ganze Zahlen, N (Anzahl der Personen im Kreis) und M (der Eliminierungsschritt).\n * Ausgabe: Gibt ein Array zurück, das die Reihenfolge darstellt, in der die Personen eliminiert werden.\n */\n\nfunction josephusProblem($n, $m) ",
      "ha": "<?php\n/**\n * Yana warware Matsalar Josephus.\n * A cikin wannan matsalar, mutane N suna cikin kewaye kuma ana kawar da su a kowane matsayi na M\n * har sai mutum guda ya rage. Aikin yana kwaikwayon wannan tsari kuma yana dawo da tsarin\n * inda mutane suke kawarwa.\n * \n * Alal misali, tare da N = 8 da M = 5, tsarin kawarwa shine 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Shigarwa: Lambobi biyu, N (yawan mutanen da ke cikin kewaye) da M (matakin kawarwa).\n * Fitarwa: Yana dawo da jerin da ke wakiltar tsarin inda mutane suke kawarwa.\n */\n\nfunction josephusProblem($n, $m) ",
      "hi": "<?php\n/**\n * जोसेफस समस्या को हल करता है।\n * इस समस्या में, N लोग एक वृत्त में व्यवस्थित होते हैं और हर Mवें स्थान पर समाप्त कर दिए जाते हैं\n * जब तक केवल एक व्यक्ति बचता है। यह फ़ंक्शन इस प्रक्रिया का अनुकरण करता है और उस क्रम को लौटाता है\n * जिसमें लोग समाप्त होते हैं।\n * \n * उदाहरण के लिए, N = 8 और M = 5 के साथ, समाप्ति क्रम 5, 2, 8, 7, 1, 4, 6, 3 है।\n * \n * इनपुट: दो पूर्णांक, N (वृत्त में लोगों की संख्या) और M (समाप्ति चरण)।\n * आउटपुट: एक array लौटाता है जो उस क्रम का प्रतिनिधित्व करता है जिसमें लोग समाप्त होते हैं।\n */\n\nfunction josephusProblem($n, $m) ",
      "hu": "<?php\n/**\n * Megoldja a Josephus problémát.\n * Ebben a problémában N ember van körben elrendezve, és minden M-edik pozícióban\n * eliminálódnak, amíg csak egy ember marad. A függvény szimulálja ezt a folyamatot, és visszaadja\n * az emberek eliminálásának sorrendjét.\n * \n * Például, ha N = 8 és M = 5, az eliminálási sorrend 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Bemenet: Két egész szám, N (az emberek száma a körben) és M (az eliminálási lépés).\n * Kimenet: Visszaad egy tömböt, amely az emberek eliminálásának sorrendjét reprezentálja.\n */\n\nfunction josephusProblem($n, $m) "
    },
    "prompt_bertscore": {
      "sq": "0.9852352078865336",
      "hy": "0.9724855209886663",
      "bn": "0.9787606519863205",
      "bg": "0.9764346902244019",
      "zh": "0.9511685084960021",
      "fr": "0.9980379290961374",
      "de": "0.9767809029785457",
      "ha": "0.969791099869928",
      "hi": "0.9866282027487313",
      "hu": "0.9629222626633606"
    },
    "canonical_solution": "{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}",
    "instruction": {
      "en": "Write a PHP function `function josephusProblem($n, $m)` to solve the following problem:\nSolves the Josephus Problem.\nIn this problem, N people are arranged in a circle and eliminated in every Mth position\nuntil only one person remains. The function simulates this process and returns the order\nin which people are eliminated.\n\nFor example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Two integers, N (number of people in the circle) and M (the elimination step).\nOutput: Returns an array representing the order in which people are eliminated.",
      "sq": "Shkruani një funksion PHP `function josephusProblem($n, $m)` për të zgjidhur problemin në vijim:\nZgjidh Problemin e Josephus.\nNë këtë problem, N njerëz janë të rregulluar në një rreth dhe eliminohen në çdo pozicion të M-të\nderisa të mbetet vetëm një person. Funksioni simulon këtë proces dhe kthen rendin\nnë të cilin njerëzit eliminohen.\n\nPër shembull, me N = 8 dhe M = 5, rendi i eliminimit është 5, 2, 8, 7, 1, 4, 6, 3.\n\nHyrja: Dy numra të plotë, N (numri i njerëzve në rreth) dhe M (hapi i eliminimit).\nDalja: Kthen një varg që përfaqëson rendin në të cilin njerëzit eliminohen.",
      "hy": "Գրեք PHP ֆունկցիա `function josephusProblem($n, $m)` հետևյալ խնդիրը լուծելու համար:\nԼուծում է Josephus խնդիրը։\nԱյս խնդրում, N մարդիկ դասավորված են շրջանաձև և վերացվում են ամեն M-րդ դիրքում\nմինչև միայն մեկ մարդ մնա։ Ֆունկցիան սիմուլացնում է այս գործընթացը և վերադարձնում է այն կարգը,\nորով մարդիկ վերացվում են։\n\nՕրինակ, N = 8 և M = 5 դեպքում, վերացման կարգը 5, 2, 8, 7, 1, 4, 6, 3 է։\n\nՄուտք: Երկու ամբողջ թիվ, N (մարդկանց քանակը շրջանի մեջ) և M (վերացման քայլը)։\nԵլք: Վերադարձնում է զանգված, որը ներկայացնում է այն կարգը, որով մարդիկ վերացվում են։",
      "bn": "একটি PHP ফাংশন `function josephusProblem($n, $m)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nজোসেফাস সমস্যা সমাধান করে।\nএই সমস্যায়, N জন মানুষ একটি বৃত্তে সাজানো থাকে এবং প্রতি M তম অবস্থানে বাদ দেওয়া হয় যতক্ষণ না শুধুমাত্র একজন ব্যক্তি অবশিষ্ট থাকে। ফাংশনটি এই প্রক্রিয়াটি অনুকরণ করে এবং কোন ক্রমে মানুষ বাদ পড়ে তা ফেরত দেয়।\n\nউদাহরণস্বরূপ, N = 8 এবং M = 5 হলে, বাদ দেওয়ার ক্রম হল 5, 2, 8, 7, 1, 4, 6, 3।\n\nইনপুট: দুটি পূর্ণসংখ্যা, N (বৃত্তে মানুষের সংখ্যা) এবং M (বাদ দেওয়ার ধাপ)।\nআউটপুট: একটি অ্যারে ফেরত দেয় যা কোন ক্রমে মানুষ বাদ পড়ে তা উপস্থাপন করে।",
      "bg": "Напишете PHP функция `function josephusProblem($n, $m)` за решаване на следния проблем:\nРешава проблема на Йосиф. \nВ този проблем, N души са подредени в кръг и се елиминират на всяка M-та позиция, \nдокато остане само един човек. Функцията симулира този процес и връща реда, \nв който хората са елиминирани.\n\nНапример, с N = 8 и M = 5, редът на елиминиране е 5, 2, 8, 7, 1, 4, 6, 3.\n\nВход: Две цели числа, N (брой хора в кръга) и M (стъпка на елиминиране).\nИзход: Връща масив, представляващ реда, в който хората са елиминирани.",
      "zh": "编写一个 PHP 函数 `function josephusProblem($n, $m)` 来解决以下问题：\n解决约瑟夫问题。\n在这个问题中，N 个人围成一圈，每隔 M 个位置淘汰一个人，直到只剩下一个人为止。该函数模拟此过程并返回人们被淘汰的顺序。\n\n例如，对于 N = 8 和 M = 5，淘汰顺序是 5, 2, 8, 7, 1, 4, 6, 3。\n\n输入：两个整数，N（圆圈中的人数）和 M（淘汰步长）。\n输出：返回一个数组，表示人们被淘汰的顺序。",
      "fr": "Écrire une fonction PHP `function josephusProblem($n, $m)` pour résoudre le problème suivant :\nRésout le problème de Josephus.\nDans ce problème, N personnes sont disposées en cercle et éliminées à chaque Mème position\njusqu'à ce qu'il ne reste qu'une seule personne. La fonction simule ce processus et renvoie l'ordre\ndans lequel les personnes sont éliminées.\n\nPar exemple, avec N = 8 et M = 5, l'ordre d'élimination est 5, 2, 8, 7, 1, 4, 6, 3.\n\nEntrée : Deux entiers, N (nombre de personnes dans le cercle) et M (le pas d'élimination).\nSortie : Renvoie un tableau représentant l'ordre dans lequel les personnes sont éliminées.",
      "de": "Schreiben Sie eine PHP-Funktion `function josephusProblem($n, $m)`, um das folgende Problem zu lösen:\nLöst das Josephus-Problem.\nIn diesem Problem sind N Personen in einem Kreis angeordnet und werden an jeder M-ten Position eliminiert, bis nur noch eine Person übrig bleibt. Die Funktion simuliert diesen Prozess und gibt die Reihenfolge zurück, in der die Personen eliminiert werden.\n\nZum Beispiel, mit N = 8 und M = 5, ist die Eliminierungsreihenfolge 5, 2, 8, 7, 1, 4, 6, 3.\n\nEingabe: Zwei ganze Zahlen, N (Anzahl der Personen im Kreis) und M (der Eliminierungsschritt).\nAusgabe: Gibt ein Array zurück, das die Reihenfolge darstellt, in der die Personen eliminiert werden.",
      "ha": "Rubuta aikin PHP `function josephusProblem($n, $m)` don warware matsalar mai zuwa:\nYana warware Matsalar Josephus.\nA cikin wannan matsalar, mutane N suna cikin kewaye kuma ana kawar da su a kowane matsayi na M har sai mutum daya ya rage. Aikin yana kwaikwayon wannan tsari kuma yana dawo da tsarin da ake kawar da mutane.\n\nAlal misali, tare da N = 8 da M = 5, tsarin kawarwa shine 5, 2, 8, 7, 1, 4, 6, 3.\n\nShigarwa: Lamba biyu, N (yawan mutane a cikin kewaye) da M (matakin kawarwa).\nFitarwa: Yana dawo da jerin da ke wakiltar tsarin da ake kawar da mutane.",
      "hi": "PHP फ़ंक्शन `function josephusProblem($n, $m)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nजोसेफस समस्या का समाधान करता है।\nइस समस्या में, N लोग एक वृत्त में व्यवस्थित होते हैं और प्रत्येक Mवें स्थान पर समाप्त कर दिए जाते हैं\nजब तक केवल एक व्यक्ति शेष न रह जाए। फ़ंक्शन इस प्रक्रिया का अनुकरण करता है और उस क्रम को लौटाता है\nजिसमें लोग समाप्त होते हैं।\n\nउदाहरण के लिए, N = 8 और M = 5 के साथ, समाप्ति क्रम 5, 2, 8, 7, 1, 4, 6, 3 है।\n\nइनपुट: दो पूर्णांक, N (वृत्त में लोगों की संख्या) और M (समाप्ति चरण)।\nआउटपुट: एक ऐरे लौटाता है जो उस क्रम का प्रतिनिधित्व करता है जिसमें लोग समाप्त होते हैं।",
      "hu": "Írj egy PHP függvényt `function josephusProblem($n, $m)` a következő probléma megoldására:\nMegoldja a Josephus problémát.\nEbben a problémában N ember van körben elrendezve, és minden M-edik pozícióban eliminálódnak,\namíg csak egy ember marad. A függvény szimulálja ezt a folyamatot, és visszaadja azt a sorrendet,\namelyben az emberek eliminálódnak.\n\nPéldául, ha N = 8 és M = 5, az eliminációs sorrend: 5, 2, 8, 7, 1, 4, 6, 3.\n\nBemenet: Két egész szám, N (az emberek száma a körben) és M (az eliminációs lépés).\nKimenet: Visszaad egy tömböt, amely az emberek eliminálásának sorrendjét reprezentálja."
    },
    "instruction_bertscore": {
      "sq": "0.9816684021342902",
      "hy": "0.9710696836326496",
      "bn": "0.9808258120579402",
      "bg": "0.9764223751407778",
      "zh": "0.9700763330970941",
      "fr": "0.9977711684944075",
      "de": "0.9822172178770896",
      "ha": "0.9669725347630429",
      "hi": "0.970497230874507",
      "hu": "0.9702785388249876"
    },
    "level": "easy",
    "test": "function main(){\n    assert(josephusProblem(8, 5) === [5, 2, 8, 7, 1, 4, 6, 3]);\n    assert(josephusProblem(4, 2) === [2, 4, 3, 1]);\n    assert(josephusProblem(6, 3) === [3, 6, 4, 2, 5, 1]);    \n}\n\n\nmain();\n?>",
    "entry_point": "josephusProblem",
    "signature": "function josephusProblem($n, $m)",
    "docstring": {
      "en": "Solves the Josephus Problem.\nIn this problem, N people are arranged in a circle and eliminated in every Mth position\nuntil only one person remains. The function simulates this process and returns the order\nin which people are eliminated.\n\nFor example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Two integers, N (number of people in the circle) and M (the elimination step).\nOutput: Returns an array representing the order in which people are eliminated.",
      "sq": "Zgjidh Problemin e Josephus.\nNë këtë problem, N persona janë të rregulluar në një rreth dhe eliminohen në çdo pozicion të M-të\nderisa të mbetet vetëm një person. Funksioni simulon këtë proces dhe kthen rendin\nnë të cilin njerëzit eliminohen.\n\nPër shembull, me N = 8 dhe M = 5, rendi i eliminimit është 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Dy numra të plotë, N (numri i njerëzve në rreth) dhe M (hapi i eliminimit).\nOutput: Kthen një varg që përfaqëson rendin në të cilin njerëzit eliminohen.",
      "hy": "Լուծում է Ջոզեֆուսի խնդիրը։\nԱյս խնդրում, N մարդիկ դասավորված են շրջանաձև և վերացվում են յուրաքանչյուր M-րդ դիրքում,\nմինչև միայն մեկ մարդ մնա։ Ֆունկցիան մոդելավորում է այս գործընթացը և վերադարձնում է այն կարգը,\nորով մարդիկ վերացվում են։\n\nՕրինակ, երբ N = 8 և M = 5, վերացման կարգը 5, 2, 8, 7, 1, 4, 6, 3 է։\n\nՄուտք: Երկու ամբողջ թիվ, N (մարդկանց քանակը շրջանի մեջ) և M (վերացման քայլը)։\nԵլք: Վերադարձնում է զանգված, որը ներկայացնում է այն կարգը, որով մարդիկ վերացվում են։",
      "bn": "জোসেফাস সমস্যার সমাধান করে।  \nএই সমস্যায়, N জন মানুষ একটি বৃত্তে সাজানো থাকে এবং প্রতিটি M তম অবস্থানে তাদের বাদ দেওয়া হয় যতক্ষণ না শুধুমাত্র একজন ব্যক্তি অবশিষ্ট থাকে। ফাংশনটি এই প্রক্রিয়াটি অনুকরণ করে এবং মানুষদের বাদ দেওয়ার ক্রমটি ফেরত দেয়।\n\nউদাহরণস্বরূপ, N = 8 এবং M = 5 হলে, বাদ দেওয়ার ক্রম হল 5, 2, 8, 7, 1, 4, 6, 3।\n\nইনপুট: দুটি পূর্ণসংখ্যা, N (বৃত্তে মানুষের সংখ্যা) এবং M (বাদ দেওয়ার ধাপ)।  \nআউটপুট: একটি অ্যারে ফেরত দেয় যা মানুষদের বাদ দেওয়ার ক্রমকে উপস্থাপন করে।",
      "bg": "Решава проблема на Йосиф.  \nВ този проблем N души са подредени в кръг и се елиминират на всяка M-та позиция, докато остане само един човек. Функцията симулира този процес и връща реда, в който хората са елиминирани.\n\nНапример, при N = 8 и M = 5, редът на елиминиране е 5, 2, 8, 7, 1, 4, 6, 3.\n\nВход: Две цели числа, N (брой на хората в кръга) и M (стъпка на елиминиране).  \nИзход: Връща масив, представляващ реда, в който хората са елиминирани.",
      "zh": "解决约瑟夫问题。  \n在这个问题中，N个人被安排成一个圆圈，并且每隔M个位置就会被淘汰一个人，直到只剩下一个人为止。该函数模拟这个过程并返回人被淘汰的顺序。\n\n例如，对于N = 8和M = 5，淘汰顺序是5, 2, 8, 7, 1, 4, 6, 3。\n\n输入：两个整数，N（圆圈中的人数）和M（淘汰的步长）。  \n输出：返回一个数组，表示人被淘汰的顺序。",
      "fr": "Résout le problème de Josephus.  \nDans ce problème, N personnes sont disposées en cercle et éliminées à chaque Mème position jusqu'à ce qu'il ne reste qu'une seule personne. La fonction simule ce processus et renvoie l'ordre dans lequel les personnes sont éliminées.\n\nPar exemple, avec N = 8 et M = 5, l'ordre d'élimination est 5, 2, 8, 7, 1, 4, 6, 3.\n\nEntrée : Deux entiers, N (nombre de personnes dans le cercle) et M (le pas d'élimination).  \nSortie : Renvoie un tableau représentant l'ordre dans lequel les personnes sont éliminées.",
      "de": "Löst das Josephus-Problem.\nIn diesem Problem sind N Personen in einem Kreis angeordnet und werden an jeder M-ten Position eliminiert,\nbis nur noch eine Person übrig bleibt. Die Funktion simuliert diesen Prozess und gibt die Reihenfolge zurück,\nin der die Personen eliminiert werden.\n\nZum Beispiel, mit N = 8 und M = 5, ist die Eliminierungsreihenfolge 5, 2, 8, 7, 1, 4, 6, 3.\n\nEingabe: Zwei ganze Zahlen, N (Anzahl der Personen im Kreis) und M (der Eliminierungsschritt).\nAusgabe: Gibt ein Array zurück, das die Reihenfolge darstellt, in der die Personen eliminiert werden.",
      "ha": "Yana warware Matsalar Josephus.  \nA cikin wannan matsalar, mutane N suna cikin jerin madauwari kuma ana kawar da su a kowane matsayi na M har sai mutum guda ya rage. Aiki yana kwaikwayon wannan tsari kuma yana mayar da oda inda mutane suke kawar da su.\n\nMisali, tare da N = 8 da M = 5, jerin kawarwa shine 5, 2, 8, 7, 1, 4, 6, 3.\n\nShigarwa: Lambobi guda biyu, N (yawan mutanen a cikin madauwari) da M (matakin kawarwa).  \nFitarwa: Yana mayar da jerin da ke wakiltar oda inda mutane suke kawar da su.",
      "hi": "Josephus समस्या को हल करता है।  \nइस समस्या में, N लोग एक वृत्त में व्यवस्थित होते हैं और हर Mवें स्थान पर समाप्त कर दिए जाते हैं जब तक कि केवल एक व्यक्ति बचा रहता है। यह फ़ंक्शन इस प्रक्रिया का अनुकरण करता है और उस क्रम को लौटाता है जिसमें लोग समाप्त होते हैं।\n\nउदाहरण के लिए, N = 8 और M = 5 के साथ, समाप्ति क्रम 5, 2, 8, 7, 1, 4, 6, 3 है।\n\nइनपुट: दो पूर्णांक, N (वृत्त में लोगों की संख्या) और M (समाप्ति चरण)।  \nआउटपुट: एक सरणी लौटाता है जो उस क्रम का प्रतिनिधित्व करता है जिसमें लोग समाप्त होते हैं।",
      "hu": "Megoldja a Josephus problémát. Ebben a problémában N ember van körbe rendezve, és minden M-edik pozícióban eliminálódnak, amíg csak egy ember marad. A függvény szimulálja ezt a folyamatot, és visszaadja az eliminálás sorrendjét.\n\nPéldául, ha N = 8 és M = 5, az eliminálás sorrendje 5, 2, 8, 7, 1, 4, 6, 3.\n\nBemenet: Két egész szám, N (az emberek száma a körben) és M (az eliminálási lépés).\nKimenet: Visszaad egy tömböt, amely az eliminálás sorrendjét reprezentálja."
    },
    "docstring_bertscore": {
      "sq": "0.9806390994997674",
      "hy": "0.9724032880109178",
      "bn": "0.9433909372961999",
      "bg": "0.9817740734970007",
      "zh": "0.9701351276898804",
      "fr": "0.9976990656660919",
      "de": "0.9778656234893772",
      "ha": "0.9633356124862942",
      "hi": "0.9692242087624544",
      "hu": "0.954493382444145"
    }
  },
  {
    "task_id": "PHP/31",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the positions of the k-th largest number in an array.\n * This function takes an array of integers and an integer k, \n * and returns the positions of the k-th largest number in the array. \n * If there are duplicates of the k-th largest number, it returns all positions.\n * If k is greater than the array's length or the array is empty, it returns an empty array.\n *\n * Example:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "sq": "<?php\n\n\n/**\n * Gjen pozicionet e numrit të k-të më të madh në një varg.\n * Kjo funksion merr një varg me numra të plotë dhe një numër të plotë k,\n * dhe kthen pozicionet e numrit të k-të më të madh në varg.\n * Nëse ka dublikata të numrit të k-të më të madh, kthen të gjitha pozicionet.\n * Nëse k është më i madh se gjatësia e vargut ose vargu është bosh, kthen një varg bosh.\n *\n * Shembull:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hy": "<?php\n\n\n/**\n * Գտնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը:\n * Այս ֆունկցիան ընդունում է ամբողջ թվերի զանգված և ամբողջ թիվ k,\n * և վերադարձնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը:\n * Եթե k-րդ ամենամեծ թիվը կրկնվում է, վերադարձնում է բոլոր դիրքերը:\n * Եթե k-ն մեծ է զանգվածի երկարությունից կամ զանգվածը դատարկ է, վերադարձնում է դատարկ զանգված:\n *\n * Օրինակ:\n * Մուտք: numbers = [67, 43, 90, 78, 32], k = 1\n * Ելք: [3]\n * \n * Մուտք: numbers = [1, 2, 3, 4, 5], k = 3\n * Ելք: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "bn": "<?php\n\n\n/**\n * একটি অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থান খুঁজে বের করে।\n * এই ফাংশনটি একটি পূর্ণসংখ্যার অ্যারে এবং একটি পূর্ণসংখ্যা k গ্রহণ করে,\n * এবং অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি ফেরত দেয়।\n * যদি k-তম বৃহত্তম সংখ্যার ডুপ্লিকেট থাকে, এটি সমস্ত অবস্থান ফেরত দেয়।\n * যদি k অ্যারের দৈর্ঘ্যের চেয়ে বড় হয় বা অ্যারেটি খালি হয়, এটি একটি খালি অ্যারে ফেরত দেয়।\n *\n * উদাহরণ:\n * ইনপুট: numbers = [67, 43, 90, 78, 32], k = 1\n * আউটপুট: [3]\n * \n * ইনপুট: numbers = [1, 2, 3, 4, 5], k = 3\n * আউটপুট: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "bg": "<?php\n\n\n/**\n * Намира позициите на k-тото най-голямо число в масив.\n * Тази функция приема масив от цели числа и цяло число k,\n * и връща позициите на k-тото най-голямо число в масива.\n * Ако има дубликати на k-тото най-голямо число, връща всички позиции.\n * Ако k е по-голямо от дължината на масива или масивът е празен, връща празен масив.\n *\n * Пример:\n * Вход: numbers = [67, 43, 90, 78, 32], k = 1\n * Изход: [3]\n * \n * Вход: numbers = [1, 2, 3, 4, 5], k = 3\n * Изход: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "zh": "<?php\n\n\n/**\n * 找到数组中第k大的数的位置。\n * 此函数接受一个整数数组和一个整数k，并返回数组中第k大的数的位置。\n * 如果第k大的数有重复，它会返回所有位置。\n * 如果k大于数组的长度或数组为空，它会返回一个空数组。\n *\n * 示例:\n * 输入: numbers = [67, 43, 90, 78, 32], k = 1\n * 输出: [3]\n * \n * 输入: numbers = [1, 2, 3, 4, 5], k = 3\n * 输出: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "fr": "<?php\n\n\n/**\n * Trouve les positions du k-ième plus grand nombre dans un tableau.\n * Cette fonction prend un tableau d'entiers et un entier k,\n * et renvoie les positions du k-ième plus grand nombre dans le tableau.\n * S'il y a des doublons du k-ième plus grand nombre, elle renvoie toutes les positions.\n * Si k est supérieur à la longueur du tableau ou si le tableau est vide, elle renvoie un tableau vide.\n *\n * Exemple :\n * Entrée : numbers = [67, 43, 90, 78, 32], k = 1\n * Sortie : [3]\n * \n * Entrée : numbers = [1, 2, 3, 4, 5], k = 3\n * Sortie : [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "de": "<?php\n\n\n/**\n * Findet die Positionen der k-t größten Zahl in einem Array.\n * Diese Funktion nimmt ein Array von ganzen Zahlen und eine ganze Zahl k,\n * und gibt die Positionen der k-t größten Zahl im Array zurück.\n * Wenn es Duplikate der k-t größten Zahl gibt, werden alle Positionen zurückgegeben.\n * Wenn k größer als die Länge des Arrays ist oder das Array leer ist, wird ein leeres Array zurückgegeben.\n *\n * Beispiel:\n * Eingabe: numbers = [67, 43, 90, 78, 32], k = 1\n * Ausgabe: [3]\n * \n * Eingabe: numbers = [1, 2, 3, 4, 5], k = 3\n * Ausgabe: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "ha": "<?php\n\n\n/**\n * Yana nemo wuraren lamba ta k mafi girma a cikin jerin lambobi.\n * Wannan aikin yana karɓar jerin lambobi na integers da wani integer k,\n * kuma yana dawo da wuraren lamba ta k mafi girma a cikin jerin. \n * Idan akwai maimaitawa na lamba ta k mafi girma, yana dawo da duk wuraren.\n * Idan k ya fi tsawon jerin ko jerin babu komai, yana dawo da jerin babu komai.\n *\n * Misali:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hi": "<?php\n\n\n/**\n * एक array में k-वें सबसे बड़े संख्या के स्थानों को खोजता है।\n * यह function पूर्णांकों की एक array और एक पूर्णांक k लेता है,\n * और array में k-वें सबसे बड़े संख्या के स्थानों को लौटाता है।\n * यदि k-वें सबसे बड़े संख्या के डुप्लिकेट हैं, तो यह सभी स्थानों को लौटाता है।\n * यदि k array की लंबाई से अधिक है या array खाली है, तो यह एक खाली array लौटाता है।\n *\n * उदाहरण:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hu": "<?php\n\n\n/**\n * Megkeresi a k-adik legnagyobb szám pozícióit egy tömbben.\n * Ez a függvény egy egész számokat tartalmazó tömböt és egy egész számot (k) vesz át,\n * és visszaadja a k-adik legnagyobb szám pozícióit a tömbben.\n * Ha a k-adik legnagyobb számból több példány is van, akkor visszaadja az összes pozíciót.\n * Ha k nagyobb, mint a tömb hossza, vagy a tömb üres, akkor üres tömböt ad vissza.\n *\n * Példa:\n * Bemenet: numbers = [67, 43, 90, 78, 32], k = 1\n * Kimenet: [3]\n * \n * Bemenet: numbers = [1, 2, 3, 4, 5], k = 3\n * Kimenet: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array "
    },
    "prompt_bertscore": {
      "sq": "0.9955751110016858",
      "hy": "0.9802686538391373",
      "bn": "0.9889422466877877",
      "bg": "0.9955751110016858",
      "zh": "0.9717905132854252",
      "fr": "0.9910415711849455",
      "de": "0.9896859188343824",
      "ha": "0.9685405229909323",
      "hi": "0.9955751110016858",
      "hu": "0.9756600317383658"
    },
    "canonical_solution": " {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}",
    "instruction": {
      "en": "Write a PHP function `function findKthLargestPositions(array $numbers, int $k): array` to solve the following problem:\nFinds the positions of the k-th largest number in an array.\nThis function takes an array of integers and an integer k,\nand returns the positions of the k-th largest number in the array.\nIf there are duplicates of the k-th largest number, it returns all positions.\nIf k is greater than the array's length or the array is empty, it returns an empty array.\n\nExample:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "sq": "Shkruani një funksion PHP `function findKthLargestPositions(array $numbers, int $k): array` për të zgjidhur problemin në vijim:\nGjen pozicionet e numrit të k-të më të madh në një varg.\nKy funksion merr një varg të numrave të plotë dhe një numër të plotë k,\ndhe kthen pozicionet e numrit të k-të më të madh në varg.\nNëse ka dublikatë të numrit të k-të më të madh, kthen të gjitha pozicionet.\nNëse k është më i madh se gjatësia e vargut ose vargu është bosh, kthen një varg bosh.\n\nShembull:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "hy": "Գրեք PHP ֆունկցիա `function findKthLargestPositions(array $numbers, int $k): array` հետևյալ խնդիրը լուծելու համար:\nԳտնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԱյս ֆունկցիան ընդունում է ամբողջ թվերի զանգված և ամբողջ թիվ k,\nև վերադարձնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԵթե k-րդ ամենամեծ թվից կան կրկնօրինակներ, այն վերադարձնում է բոլոր դիրքերը։\nԵթե k-ն մեծ է զանգվածի երկարությունից կամ զանգվածը դատարկ է, այն վերադարձնում է դատարկ զանգված։\n\nՕրինակ:\nՄուտք: numbers = [67, 43, 90, 78, 32], k = 1\nԵլք: [3]\n\nՄուտք: numbers = [1, 2, 3, 4, 5], k = 3\nԵլք: [3]",
      "bn": "PHP ফাংশন `function findKthLargestPositions(array $numbers, int $k): array` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি খুঁজে বের করে।\nএই ফাংশনটি একটি পূর্ণসংখ্যার অ্যারে এবং একটি পূর্ণসংখ্যা k গ্রহণ করে,\nএবং অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি ফেরত দেয়।\nযদি k-তম বৃহত্তম সংখ্যার পুনরাবৃত্তি থাকে, তবে এটি সমস্ত অবস্থান ফেরত দেয়।\nযদি k অ্যারের দৈর্ঘ্যের চেয়ে বড় হয় বা অ্যারে খালি হয়, তবে এটি একটি খালি অ্যারে ফেরত দেয়।\n\nউদাহরণ:\nইনপুট: numbers = [67, 43, 90, 78, 32], k = 1\nআউটপুট: [3]\n\nইনপুট: numbers = [1, 2, 3, 4, 5], k = 3\nআউটপুট: [3]",
      "bg": "Напишете PHP функция `function findKthLargestPositions(array $numbers, int $k): array`, за да решите следния проблем:\nНамира позициите на k-тото по големина число в масив.\nТази функция приема масив от цели числа и цяло число k,\nи връща позициите на k-тото по големина число в масива.\nАко има дубликати на k-тото по големина число, връща всички позиции.\nАко k е по-голямо от дължината на масива или масивът е празен, връща празен масив.\n\nПример:\nВход: numbers = [67, 43, 90, 78, 32], k = 1\nИзход: [3]\n\nВход: numbers = [1, 2, 3, 4, 5], k = 3\nИзход: [3]",
      "zh": "编写一个PHP函数 `function findKthLargestPositions(array $numbers, int $k): array` 来解决以下问题：\n查找数组中第k大的数字的位置。\n此函数接受一个整数数组和一个整数k，\n并返回数组中第k大的数字的位置。\n如果第k大的数字有重复，它将返回所有位置。\n如果k大于数组的长度或数组为空，它将返回一个空数组。\n\n示例：\n输入: numbers = [67, 43, 90, 78, 32], k = 1\n输出: [3]\n\n输入: numbers = [1, 2, 3, 4, 5], k = 3\n输出: [3]",
      "fr": "Écrire une fonction PHP `function findKthLargestPositions(array $numbers, int $k): array` pour résoudre le problème suivant :\nTrouve les positions du k-ième plus grand nombre dans un tableau.\nCette fonction prend un tableau d'entiers et un entier k,\net retourne les positions du k-ième plus grand nombre dans le tableau.\nS'il y a des doublons du k-ième plus grand nombre, elle retourne toutes les positions.\nSi k est supérieur à la longueur du tableau ou si le tableau est vide, elle retourne un tableau vide.\n\nExemple :\nEntrée : numbers = [67, 43, 90, 78, 32], k = 1\nSortie : [3]\n\nEntrée : numbers = [1, 2, 3, 4, 5], k = 3\nSortie : [3]",
      "de": "Schreiben Sie eine PHP-Funktion `function findKthLargestPositions(array $numbers, int $k): array`, um das folgende Problem zu lösen:\nFindet die Positionen der k-größten Zahl in einem Array.\nDiese Funktion nimmt ein Array von ganzen Zahlen und eine ganze Zahl k,\nund gibt die Positionen der k-größten Zahl im Array zurück.\nWenn es Duplikate der k-größten Zahl gibt, gibt sie alle Positionen zurück.\nWenn k größer als die Länge des Arrays ist oder das Array leer ist, gibt sie ein leeres Array zurück.\n\nBeispiel:\nEingabe: numbers = [67, 43, 90, 78, 32], k = 1\nAusgabe: [3]\n\nEingabe: numbers = [1, 2, 3, 4, 5], k = 3\nAusgabe: [3]",
      "ha": "Rubuta aikin PHP `function findKthLargestPositions(array $numbers, int $k): array` don warware matsalar mai zuwa:\nNemo matsayi na lamba ta k- mafi girma a cikin jerin.\nWannan aikin yana daukar jerin lambobi da kuma lamba k,\nkuma yana mayar da matsayi na lamba ta k- mafi girma a cikin jerin.\nIdan akwai maimaitawa na lamba ta k- mafi girma, yana mayar da dukkan matsayi.\nIdan k ya fi tsawon jerin ko kuma jerin babu komai, yana mayar da jerin babu komai.\n\nMisali:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "hi": "PHP फ़ंक्शन `function findKthLargestPositions(array $numbers, int $k): array` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक array में k-वें सबसे बड़े संख्या की स्थिति खोजें।\nयह फ़ंक्शन पूर्णांकों की एक array और एक पूर्णांक k लेता है,\nऔर array में k-वें सबसे बड़े संख्या की स्थिति लौटाता है।\nयदि k-वें सबसे बड़े संख्या की प्रतिलिपियाँ हैं, तो यह सभी स्थितियाँ लौटाता है।\nयदि k array की लंबाई से अधिक है या array खाली है, तो यह एक खाली array लौटाता है।\n\nउदाहरण:\nइनपुट: numbers = [67, 43, 90, 78, 32], k = 1\nआउटपुट: [3]\n\nइनपुट: numbers = [1, 2, 3, 4, 5], k = 3\nआउटपुट: [3]",
      "hu": "Írj egy PHP függvényt `function findKthLargestPositions(array $numbers, int $k): array` a következő probléma megoldására:\nMegtalálja a k-adik legnagyobb szám pozícióit egy tömbben.\nEz a függvény egy egész számokat tartalmazó tömböt és egy egész számot (k) vesz át,\nés visszaadja a k-adik legnagyobb szám pozícióit a tömbben.\nHa a k-adik legnagyobb számból több példány is van, akkor visszaadja az összes pozíciót.\nHa k nagyobb, mint a tömb hossza, vagy a tömb üres, akkor üres tömböt ad vissza.\n\nPélda:\nBemenet: numbers = [67, 43, 90, 78, 32], k = 1\nKimenet: [3]\n\nBemenet: numbers = [1, 2, 3, 4, 5], k = 3\nKimenet: [3]"
    },
    "instruction_bertscore": {
      "sq": "0.9965585300181895",
      "hy": "0.9942971231301073",
      "bn": "0.9642000519045579",
      "bg": "0.9965585300181895",
      "zh": "0.9824059167390727",
      "fr": "0.9914134072582428",
      "de": "0.9843089944197679",
      "ha": "0.9699214013998869",
      "hi": "0.9776056163206026",
      "hu": "0.9792923855163508"
    },
    "level": "easy",
    "test": "function main(){\n    // Test case 1: k-th largest is unique\n    assert(findKthLargestPositions([67, 43, 90, 78, 32], 1) === [3]);\n\n    // Test case 2: k-th largest has duplicates\n    assert(findKthLargestPositions([20, 50, 20, 40], 3) === [1, 3]);\n\n    // Test case 3: k is larger than the array length\n    assert(findKthLargestPositions([10, 20, 30], 4) === []);\n\n    // Test case 4: Array is empty\n    assert(findKthLargestPositions([], 1) === []);\n\n    // Test case 5: k-th largest in the middle\n    assert(findKthLargestPositions([1, 2, 3, 4, 5], 3) === [3]);\n}\n\n\nmain();\n?>",
    "entry_point": "findKthLargestPositions",
    "signature": "function findKthLargestPositions(array $numbers, int $k): array",
    "docstring": {
      "en": "Finds the positions of the k-th largest number in an array.\nThis function takes an array of integers and an integer k,\nand returns the positions of the k-th largest number in the array.\nIf there are duplicates of the k-th largest number, it returns all positions.\nIf k is greater than the array's length or the array is empty, it returns an empty array.\n\nExample:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "sq": "Gjen pozicionet e numrit të k-të më të madh në një varg.\nKjo funksion merr një varg të numrave të plotë dhe një numër të plotë k,\ndhe kthen pozicionet e numrit të k-të më të madh në varg.\nNëse ka dublikatë të numrit të k-të më të madh, kthen të gjitha pozicionet.\nNëse k është më i madh se gjatësia e vargut ose vargu është bosh, kthen një varg bosh.\n\nShembull:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "hy": "Գտնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԱյս ֆունկցիան ընդունում է ամբողջ թվերի զանգված և ամբողջ թիվ k,\nև վերադարձնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԵթե k-րդ ամենամեծ թիվը կրկնվում է, վերադարձնում է բոլոր դիրքերը։\nԵթե k-ն մեծ է զանգվածի երկարությունից կամ զանգվածը դատարկ է, վերադարձնում է դատարկ զանգված։\n\nՕրինակ:\nՄուտք: numbers = [67, 43, 90, 78, 32], k = 1\nԵլք: [3]\n\nՄուտք: numbers = [1, 2, 3, 4, 5], k = 3\nԵլք: [3]",
      "bn": "k-তম বৃহত্তম সংখ্যার অবস্থানগুলি খুঁজে বের করে একটি অ্যারেতে।\nএই ফাংশনটি একটি পূর্ণসংখ্যার অ্যারে এবং একটি পূর্ণসংখ্যা k গ্রহণ করে,\nএবং অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি ফেরত দেয়।\nযদি k-তম বৃহত্তম সংখ্যার পুনরাবৃত্তি থাকে, এটি সমস্ত অবস্থান ফেরত দেয়।\nযদি k অ্যারের দৈর্ঘ্যের চেয়ে বড় হয় বা অ্যারে খালি হয়, এটি একটি খালি অ্যারে ফেরত দেয়।\n\nউদাহরণ:\nইনপুট: numbers = [67, 43, 90, 78, 32], k = 1\nআউটপুট: [3]\n\nইনপুট: numbers = [1, 2, 3, 4, 5], k = 3\nআউটপুট: [3]",
      "bg": "Намира позициите на k-тото по големина число в масив.\nТази функция приема масив от цели числа и цяло число k,  \nи връща позициите на k-тото по големина число в масива.  \nАко има дубликати на k-тото по големина число, връща всички позиции.  \nАко k е по-голямо от дължината на масива или масивът е празен, връща празен масив.  \n\nПример:  \nВход: numbers = [67, 43, 90, 78, 32], k = 1  \nИзход: [3]  \n\nВход: numbers = [1, 2, 3, 4, 5], k = 3  \nИзход: [3]",
      "zh": "找到数组中第k大的数的位置。\n此函数接收一个整数数组和一个整数k，并返回数组中第k大的数的位置。\n如果第k大的数有重复，它将返回所有位置。\n如果k大于数组的长度或数组为空，则返回一个空数组。\n\n示例：\n输入: numbers = [67, 43, 90, 78, 32], k = 1\n输出: [3]\n\n输入: numbers = [1, 2, 3, 4, 5], k = 3\n输出: [3]",
      "fr": "Trouve les positions du k-ième plus grand nombre dans un tableau.\nCette fonction prend un tableau d'entiers et un entier k,\net renvoie les positions du k-ième plus grand nombre dans le tableau.\nS'il y a des doublons du k-ième plus grand nombre, elle renvoie toutes les positions.\nSi k est supérieur à la longueur du tableau ou si le tableau est vide, elle renvoie un tableau vide.\n\nExemple:\nEntrée: numbers = [67, 43, 90, 78, 32], k = 1\nSortie: [3]\n\nEntrée: numbers = [1, 2, 3, 4, 5], k = 3\nSortie: [3]",
      "de": "Findet die Positionen der k-größten Zahl in einem Array.\nDiese Funktion nimmt ein Array von ganzen Zahlen und eine ganze Zahl k,  \nund gibt die Positionen der k-größten Zahl im Array zurück.  \nWenn es Duplikate der k-größten Zahl gibt, gibt sie alle Positionen zurück.  \nWenn k größer als die Länge des Arrays ist oder das Array leer ist, gibt sie ein leeres Array zurück.  \n\nBeispiel:  \nEingabe: numbers = [67, 43, 90, 78, 32], k = 1  \nAusgabe: [3]  \n\nEingabe: numbers = [1, 2, 3, 4, 5], k = 3  \nAusgabe: [3]  ",
      "ha": "Yana nemo matsayi na lamba mafi girma ta k a cikin jerin.\nWannan aikin yana karɓar jerin lambobi da lamba k, kuma yana dawowa da matsayi na lamba mafi girma ta k a cikin jerin. Idan akwai maimaitawa na lamba mafi girma ta k, yana dawowa da dukkan matsayi. Idan k ya fi tsayin jerin ko jerin babu komai, yana dawowa da jerin babu komai.\n\nMisali:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "hi": "एक array में k-वें सबसे बड़े संख्या के स्थानों को खोजता है।\nयह फ़ंक्शन पूर्णांकों की एक array और एक पूर्णांक k लेता है,  \nऔर array में k-वें सबसे बड़े संख्या की स्थितियों को लौटाता है।  \nयदि k-वें सबसे बड़े संख्या के डुप्लिकेट हैं, तो यह सभी स्थितियों को लौटाता है।  \nयदि k array की लंबाई से अधिक है या array खाली है, तो यह एक खाली array लौटाता है।  \n\nउदाहरण:  \nइनपुट: numbers = [67, 43, 90, 78, 32], k = 1  \nआउटपुट: [3]  \n\nइनपुट: numbers = [1, 2, 3, 4, 5], k = 3  \nआउटपुट: [3]",
      "hu": "Megkeresi a tömb k-adik legnagyobb számának pozícióit.\nEz a függvény egy egész számokat tartalmazó tömböt és egy egész számot, k-t vesz át,\nés visszaadja a tömb k-adik legnagyobb számának pozícióit.\nHa a k-adik legnagyobb szám többször is előfordul, akkor az összes pozíciót visszaadja.\nHa k nagyobb, mint a tömb hossza, vagy a tömb üres, akkor üres tömböt ad vissza.\n\nPélda:\nBemenet: numbers = [67, 43, 90, 78, 32], k = 1\nKimenet: [3]\n\nBemenet: numbers = [1, 2, 3, 4, 5], k = 3\nKimenet: [3]"
    },
    "docstring_bertscore": {
      "sq": "0.9919177297956904",
      "hy": "0.9766333206054368",
      "bn": "0.9532356548714321",
      "bg": "0.9952684256933679",
      "zh": "0.9662358146797845",
      "fr": "0.9888403493023169",
      "de": "0.982100025952279",
      "ha": "0.9565005424445026",
      "hi": "0.9952684256933679",
      "hu": "0.9759573814187751"
    }
  },
  {
    "task_id": "PHP/32",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the k-th term of the Pell sequence modulo 32767.\n    * The Pell sequence is defined as follows:\n    *   a[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\n    * This function computes the k-th term of this sequence modulo 32767.\n    * Input: An integer $k (1 ≤ $k < 1000000), representing the position in the sequence.\n    * Output: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\n    * Example:\n    *   For $k = 1, the function returns 1.\n    *   For $k = 8, the function returns 408.\n    */\n\n    function getPellNumberModulo($k)",
      "sq": "<?php\n\n/**\n    * Llogarit termin e k-të të sekuencës Pell modulo 32767.\n    * Sekuenca Pell është e përcaktuar si më poshtë:\n    *   a[1] = 1, a[2] = 2, dhe a[n] = 2*a[n-1] + a[n-2] për n > 2.\n    * Kjo funksion llogarit termin e k-të të kësaj sekuence modulo 32767.\n    * Hyrja: Një numër i plotë $k (1 ≤ $k < 1000000), që përfaqëson pozicionin në sekuencë.\n    * Dalja: Kthen termin e k-të të sekuencës Pell modulo 32767 si një numër i plotë.\n    * Shembull:\n    *   Për $k = 1, funksioni kthen 1.\n    *   Për $k = 8, funksioni kthen 408.\n    */\n\n    function getPellNumberModulo($k)",
      "hy": "<?php\n\n/**\n    * Հաշվարկում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով։\n    * Պելլի հաջորդականությունը սահմանվում է հետևյալ կերպ․\n    *   a[1] = 1, a[2] = 2, և a[n] = 2*a[n-1] + a[n-2] երբ n > 2։\n    * Այս ֆունկցիան հաշվում է այս հաջորդականության k-րդ անդամը 32767 մոդուլով։\n    * Մուտք․ Անկյունային $k (1 ≤ $k < 1000000), որը ներկայացնում է հաջորդականության դիրքը։\n    * Ելք․ Վերադարձնում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով որպես ամբողջ թիվ։\n    * Օրինակ․\n    *   Երբ $k = 1, ֆունկցիան վերադարձնում է 1։\n    *   Երբ $k = 8, ֆունկցիան վերադարձնում է 408։\n    */\n\n    function getPellNumberModulo($k)",
      "bn": "<?php\n\n/**\n    * Pell অনুক্রমের k-তম পদ 32767 মডুলোর সাথে গণনা করে।\n    * Pell অনুক্রম নিম্নরূপ সংজ্ঞায়িত:\n    *   a[1] = 1, a[2] = 2, এবং a[n] = 2*a[n-1] + a[n-2] n > 2 এর জন্য।\n    * এই ফাংশনটি এই অনুক্রমের k-তম পদ 32767 মডুলোর সাথে গণনা করে।\n    * ইনপুট: একটি পূর্ণসংখ্যা $k (1 ≤ $k < 1000000), যা অনুক্রমে অবস্থান উপস্থাপন করে।\n    * আউটপুট: Pell অনুক্রমের k-তম পদ 32767 মডুলোর সাথে একটি পূর্ণসংখ্যা হিসাবে ফেরত দেয়।\n    * উদাহরণ:\n    *   $k = 1 এর জন্য, ফাংশনটি 1 ফেরত দেয়।\n    *   $k = 8 এর জন্য, ফাংশনটি 408 ফেরত দেয়।\n    */\n\n    function getPellNumberModulo($k)",
      "bg": "<?php\n\n/**\n    * Изчислява k-тия член на последователността на Пел по модул 32767.\n    * Последователността на Пел е дефинирана по следния начин:\n    *   a[1] = 1, a[2] = 2, и a[n] = 2*a[n-1] + a[n-2] за n > 2.\n    * Тази функция изчислява k-тия член на тази последователност по модул 32767.\n    * Вход: Цяло число $k (1 ≤ $k < 1000000), представляващо позицията в последователността.\n    * Изход: Връща k-тия член на последователността на Пел по модул 32767 като цяло число.\n    * Пример:\n    *   За $k = 1, функцията връща 1.\n    *   За $k = 8, функцията връща 408.\n    */\n\n    function getPellNumberModulo($k)",
      "zh": "<?php\n\n/**\n    * 计算 Pell 序列的第 k 项模 32767。\n    * Pell 序列定义如下：\n    *   a[1] = 1, a[2] = 2, 且 a[n] = 2*a[n-1] + a[n-2] 对于 n > 2。\n    * 此函数计算该序列的第 k 项模 32767。\n    * 输入: 一个整数 $k (1 ≤ $k < 1000000)，表示序列中的位置。\n    * 输出: 返回 Pell 序列的第 k 项模 32767 作为一个整数。\n    * 示例:\n    *   对于 $k = 1，函数返回 1。\n    *   对于 $k = 8，函数返回 408。\n    */\n\n    function getPellNumberModulo($k)",
      "fr": "<?php\n\n/**\n    * Calcule le k-ième terme de la suite de Pell modulo 32767.\n    * La suite de Pell est définie comme suit :\n    *   a[1] = 1, a[2] = 2, et a[n] = 2*a[n-1] + a[n-2] pour n > 2.\n    * Cette fonction calcule le k-ième terme de cette suite modulo 32767.\n    * Entrée : Un entier $k (1 ≤ $k < 1000000), représentant la position dans la suite.\n    * Sortie : Renvoie le k-ième terme de la suite de Pell modulo 32767 en tant qu'entier.\n    * Exemple :\n    *   Pour $k = 1, la fonction renvoie 1.\n    *   Pour $k = 8, la fonction renvoie 408.\n    */\n\n    function getPellNumberModulo($k)",
      "de": "<?php\n\n/**\n    * Berechnet das k-te Glied der Pell-Folge modulo 32767.\n    * Die Pell-Folge ist wie folgt definiert:\n    *   a[1] = 1, a[2] = 2, und a[n] = 2*a[n-1] + a[n-2] für n > 2.\n    * Diese Funktion berechnet das k-te Glied dieser Folge modulo 32767.\n    * Eingabe: Ein ganzzahliger Wert $k (1 ≤ $k < 1000000), der die Position in der Folge darstellt.\n    * Ausgabe: Gibt das k-te Glied der Pell-Folge modulo 32767 als Ganzzahl zurück.\n    * Beispiel:\n    *   Für $k = 1, gibt die Funktion 1 zurück.\n    *   Für $k = 8, gibt die Funktion 408 zurück.\n    */\n\n    function getPellNumberModulo($k)",
      "ha": "<?php\n\n/**\n    * Lissafi na k-th kalma na jerin Pell modulo 32767.\n    * An ayyana jerin Pell kamar haka:\n    *   a[1] = 1, a[2] = 2, kuma a[n] = 2*a[n-1] + a[n-2] don n > 2.\n    * Wannan aikin yana lissafi na k-th kalma na wannan jerin modulo 32767.\n    * Shigarwa: Lamba $k (1 ≤ $k < 1000000), yana wakiltar matsayi a cikin jerin.\n    * Fitarwa: Yana mayar da k-th kalma na jerin Pell modulo 32767 azaman lamba.\n    * Misali:\n    *   Don $k = 1, aikin yana mayar da 1.\n    *   Don $k = 8, aikin yana mayar da 408.\n    */\n\n    function getPellNumberModulo($k)",
      "hi": "<?php\n\n/**\n    * Pell अनुक्रम का k-वां पद 32767 के मापांक में गणना करता है।\n    * Pell अनुक्रम को निम्नलिखित रूप में परिभाषित किया गया है:\n    *   a[1] = 1, a[2] = 2, और a[n] = 2*a[n-1] + a[n-2] जहाँ n > 2.\n    * यह फ़ंक्शन इस अनुक्रम के k-वां पद 32767 के मापांक में गणना करता है।\n    * इनपुट: एक पूर्णांक $k (1 ≤ $k < 1000000), जो अनुक्रम में स्थिति का प्रतिनिधित्व करता है।\n    * आउटपुट: Pell अनुक्रम का k-वां पद 32767 के मापांक में एक पूर्णांक के रूप में लौटाता है।\n    * उदाहरण:\n    *   $k = 1 के लिए, फ़ंक्शन 1 लौटाता है।\n    *   $k = 8 के लिए, फ़ंक्शन 408 लौटाता है।\n    */\n\n    function getPellNumberModulo($k)",
      "hu": "<?php\n\n/**\n    * Kiszámítja a Pell-sorozat k-adik elemét 32767 maradékkal.\n    * A Pell-sorozat a következőképpen van definiálva:\n    *   a[1] = 1, a[2] = 2, és a[n] = 2*a[n-1] + a[n-2] ha n > 2.\n    * Ez a függvény kiszámítja a sorozat k-adik elemét 32767 maradékkal.\n    * Bemenet: Egy egész szám $k (1 ≤ $k < 1000000), amely a sorozatban elfoglalt pozíciót jelenti.\n    * Kimenet: Visszaadja a Pell-sorozat k-adik elemét 32767 maradékkal egész számként.\n    * Példa:\n    *   Ha $k = 1, a függvény 1-et ad vissza.\n    *   Ha $k = 8, a függvény 408-at ad vissza.\n    */\n\n    function getPellNumberModulo($k)"
    },
    "prompt_bertscore": {
      "sq": "0.9951510351381763",
      "hy": "0.9707721353218594",
      "bn": "0.9925563264707176",
      "bg": "0.9958802072669554",
      "zh": "0.9990942454624809",
      "fr": "0.9958802072669554",
      "de": "0.9952704119971783",
      "ha": "0.9844551863802097",
      "hi": "0.9892121853756142",
      "hu": "0.9392498911123847"
    },
    "canonical_solution": "{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }",
    "instruction": {
      "en": "Write a PHP function `function getPellNumberModulo($k)` to solve the following problem:\nCalculates the k-th term of the Pell sequence modulo 32767.\nThe Pell sequence is defined as follows:\na[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\nThis function computes the k-th term of this sequence modulo 32767.\nInput: An integer $k (1 ≤ $k < 1000000), representing the position in the sequence.\nOutput: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\nExample:\nFor $k = 1, the function returns 1.\nFor $k = 8, the function returns 408.",
      "sq": "Shkruani një funksion PHP `function getPellNumberModulo($k)` për të zgjidhur problemin e mëposhtëm:\nLlogarit termin e k-të të sekuencës Pell modulo 32767.\nSekuenca Pell është e përcaktuar si më poshtë:\na[1] = 1, a[2] = 2, dhe a[n] = 2*a[n-1] + a[n-2] për n > 2.\nKy funksion llogarit termin e k-të të kësaj sekuence modulo 32767.\nHyrja: Një numër i plotë $k (1 ≤ $k < 1000000), që përfaqëson pozicionin në sekuencë.\nDalja: Kthen termin e k-të të sekuencës Pell modulo 32767 si një numër i plotë.\nShembull:\nPër $k = 1, funksioni kthen 1.\nPër $k = 8, funksioni kthen 408.",
      "hy": "Գրեք PHP ֆունկցիա `function getPellNumberModulo($k)` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով:\nՊելլի հաջորդականությունը սահմանվում է հետևյալ կերպ.\na[1] = 1, a[2] = 2, և a[n] = 2*a[n-1] + a[n-2] համար n > 2:\nԱյս ֆունկցիան հաշվում է այս հաջորդականության k-րդ անդամը 32767 մոդուլով:\nՄուտք: Ամբողջ թիվ $k (1 ≤ $k < 1000000), որը ներկայացնում է հաջորդականության դիրքը:\nԵլք: Վերադարձնում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով որպես ամբողջ թիվ:\nՕրինակ:\n$k = 1-ի համար, ֆունկցիան վերադարձնում է 1:\n$k = 8-ի համար, ֆունկցիան վերադարձնում է 408:",
      "bn": "PHP ফাংশন `function getPellNumberModulo($k)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nপেল সিকোয়েন্সের k-তম পদ 32767 দ্বারা মডুলো গণনা করে।\nপেল সিকোয়েন্স নিম্নরূপ সংজ্ঞায়িত করা হয়েছে:\na[1] = 1, a[2] = 2, এবং a[n] = 2*a[n-1] + a[n-2] যেখানে n > 2।\nএই ফাংশনটি এই সিকোয়েন্সের k-তম পদ 32767 দ্বারা মডুলো গণনা করে।\nইনপুট: একটি পূর্ণসংখ্যা $k (1 ≤ $k < 1000000), যা সিকোয়েন্সে অবস্থান নির্দেশ করে।\nআউটপুট: পেল সিকোয়েন্সের k-তম পদ 32767 দ্বারা মডুলো হিসাবে একটি পূর্ণসংখ্যা রিটার্ন করে।\nউদাহরণ:\nযদি $k = 1 হয়, ফাংশনটি 1 রিটার্ন করে।\nযদি $k = 8 হয়, ফাংশনটি 408 রিটার্ন করে।",
      "bg": "Напишете PHP функция `function getPellNumberModulo($k)`, за да решите следния проблем:\nИзчислява k-тия член на последователността на Пел модуло 32767.\nПоследователността на Пел е дефинирана по следния начин:\na[1] = 1, a[2] = 2, и a[n] = 2*a[n-1] + a[n-2] за n > 2.\nТази функция изчислява k-тия член на тази последователност модуло 32767.\nВход: Цяло число $k (1 ≤ $k < 1000000), представляващо позицията в последователността.\nИзход: Връща k-тия член на последователността на Пел модуло 32767 като цяло число.\nПример:\nЗа $k = 1, функцията връща 1.\nЗа $k = 8, функцията връща 408.",
      "zh": "编写一个 PHP 函数 `function getPellNumberModulo($k)` 来解决以下问题：\n计算 Pell 序列的第 k 项对 32767 取模。\nPell 序列定义如下：\na[1] = 1, a[2] = 2, 且 a[n] = 2*a[n-1] + a[n-2] 对于 n > 2。\n此函数计算该序列的第 k 项对 32767 取模。\n输入：一个整数 $k (1 ≤ $k < 1000000)，表示序列中的位置。\n输出：返回 Pell 序列的第 k 项对 32767 取模后的整数。\n示例：\n对于 $k = 1，函数返回 1。\n对于 $k = 8，函数返回 408。",
      "fr": "Écrire une fonction PHP `function getPellNumberModulo($k)` pour résoudre le problème suivant :\nCalcule le k-ième terme de la suite de Pell modulo 32767.\nLa suite de Pell est définie comme suit :\na[1] = 1, a[2] = 2, et a[n] = 2*a[n-1] + a[n-2] pour n > 2.\nCette fonction calcule le k-ième terme de cette suite modulo 32767.\nEntrée : Un entier $k (1 ≤ $k < 1000000), représentant la position dans la suite.\nSortie : Retourne le k-ième terme de la suite de Pell modulo 32767 en tant qu'entier.\nExemple :\nPour $k = 1, la fonction retourne 1.\nPour $k = 8, la fonction retourne 408.",
      "de": "Schreiben Sie eine PHP-Funktion `function getPellNumberModulo($k)`, um das folgende Problem zu lösen:\nBerechnet das k-te Glied der Pell-Folge modulo 32767.\nDie Pell-Folge ist wie folgt definiert:\na[1] = 1, a[2] = 2, und a[n] = 2*a[n-1] + a[n-2] für n > 2.\nDiese Funktion berechnet das k-te Glied dieser Folge modulo 32767.\nEingabe: Ein ganzzahliger Wert $k (1 ≤ $k < 1000000), der die Position in der Folge darstellt.\nAusgabe: Gibt das k-te Glied der Pell-Folge modulo 32767 als Ganzzahl zurück.\nBeispiel:\nFür $k = 1 gibt die Funktion 1 zurück.\nFür $k = 8 gibt die Funktion 408 zurück.",
      "ha": "Rubuta aikin PHP `function getPellNumberModulo($k)` don warware matsalar mai zuwa:\nLissafin kalma ta k a cikin jerin Pell modulo 32767.\nAna ayyana jerin Pell kamar haka:\na[1] = 1, a[2] = 2, kuma a[n] = 2*a[n-1] + a[n-2] don n > 2.\nWannan aikin yana lissafin kalma ta k na wannan jerin modulo 32767.\nShigarwa: Lamba $k (1 ≤ $k < 1000000), wanda ke wakiltar matsayi a cikin jerin.\nFitarwa: Yana dawo da kalma ta k na jerin Pell modulo 32767 azaman lamba.\nMisali:\nDon $k = 1, aikin yana dawo da 1.\nDon $k = 8, aikin yana dawo da 408.",
      "hi": "PHP फ़ंक्शन `function getPellNumberModulo($k)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nPell अनुक्रम का k-वाँ पद 32767 के मापांक के साथ गणना करता है।\nPell अनुक्रम निम्नलिखित रूप से परिभाषित है:\na[1] = 1, a[2] = 2, और a[n] = 2*a[n-1] + a[n-2] जहाँ n > 2।\nयह फ़ंक्शन इस अनुक्रम के k-वाँ पद को 32767 के मापांक के साथ गणना करता है।\nइनपुट: एक पूर्णांक $k (1 ≤ $k < 1000000), जो अनुक्रम में स्थिति का प्रतिनिधित्व करता है।\nआउटपुट: Pell अनुक्रम का k-वाँ पद 32767 के मापांक के साथ एक पूर्णांक के रूप में लौटाता है।\nउदाहरण:\nयदि $k = 1 है, तो फ़ंक्शन 1 लौटाता है।\nयदि $k = 8 है, तो फ़ंक्शन 408 लौटाता है।",
      "hu": "Írj egy PHP függvényt `function getPellNumberModulo($k)` a következő probléma megoldására:\nKiszámítja a Pell-sorozat k-adik elemét modulo 32767.\nA Pell-sorozat a következőképpen van definiálva:\na[1] = 1, a[2] = 2, és a[n] = 2*a[n-1] + a[n-2] ha n > 2.\nEz a függvény kiszámítja ennek a sorozatnak a k-adik elemét modulo 32767.\nBemenet: Egy egész szám $k (1 ≤ $k < 1000000), amely a sorozatbeli pozíciót jelöli.\nKimenet: Visszaadja a Pell-sorozat k-adik elemét modulo 32767 egész számként.\nPélda:\nHa $k = 1, a függvény visszaadja az 1-et.\nHa $k = 8, a függvény visszaadja a 408-at."
    },
    "instruction_bertscore": {
      "sq": "0.9959256936242123",
      "hy": "0.9757490181490694",
      "bn": "0.9678137344267257",
      "bg": "0.9957036248582154",
      "zh": "0.9883254993546744",
      "fr": "0.9959256936242123",
      "de": "0.9933570055366692",
      "ha": "0.9778405960613669",
      "hi": "0.9487867315970127",
      "hu": "0.9746577428356638"
    },
    "level": "easy",
    "test": "function main(){\n    assert(getPellNumberModulo(1) === 1);\n    assert(getPellNumberModulo(8) === 408);\n    assert(getPellNumberModulo(3) === 5);\n    assert(getPellNumberModulo(5) === 29);\n    assert(getPellNumberModulo(10) === 2378);\n    assert(getPellNumberModulo(100000) === 27550);\n    assert(getPellNumberModulo(999999) === 21600);\n    \n}",
    "entry_point": "getPellNumberModulo",
    "signature": "function getPellNumberModulo($k)",
    "docstring": {
      "en": "Calculates the k-th term of the Pell sequence modulo 32767.\nThe Pell sequence is defined as follows:\na[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\nThis function computes the k-th term of this sequence modulo 32767.\nInput: An integer $k (1 ≤ $k < 1000000), representing the position in the sequence.\nOutput: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\nExample:\nFor $k = 1, the function returns 1.\nFor $k = 8, the function returns 408.",
      "sq": "Llogarit termin e k-të të vargut Pell modulo 32767.  \nVargu Pell përcaktohet si më poshtë:  \na[1] = 1, a[2] = 2, dhe a[n] = 2*a[n-1] + a[n-2] për n > 2.  \nKjo funksion llogarit termin e k-të të këtij vargu modulo 32767.  \nHyrja: Një numër i plotë $k (1 ≤ $k < 1000000), që përfaqëson pozicionin në varg.  \nDalja: Kthen termin e k-të të vargut Pell modulo 32767 si një numër i plotë.  \nShembull:  \nPër $k = 1, funksioni kthen 1.  \nPër $k = 8, funksioni kthen 408.",
      "hy": "Հաշվում է Պելլի հաջորդականության k-րդ անդամը մոդուլո 32767-ով։\nՊելլի հաջորդականությունը սահմանվում է հետևյալ կերպ․\na[1] = 1, a[2] = 2, և a[n] = 2*a[n-1] + a[n-2] n > 2-ի համար։\nԱյս ֆունկցիան հաշվում է այս հաջորդականության k-րդ անդամը մոդուլո 32767-ով։\nՄուտք: Ամբողջ թիվ $k (1 ≤ $k < 1000000), որը ներկայացնում է հաջորդականության դիրքը։\nԵլք: Վերադարձնում է Պելլի հաջորդականության k-րդ անդամը մոդուլո 32767 որպես ամբողջ թիվ։\nՕրինակ:\n$k = 1-ի համար, ֆունկցիան վերադարձնում է 1։\n$k = 8-ի համար, ֆունկցիան վերադարձնում է 408։",
      "bn": "Pell ধারা মডুলো 32767 এর k-তম পদ গণনা করে।  \nPell ধারা নিম্নরূপ সংজ্ঞায়িত করা হয়:  \na[1] = 1, a[2] = 2, এবং a[n] = 2*a[n-1] + a[n-2] n > 2 এর জন্য।  \nএই ফাংশনটি এই ধারার k-তম পদ মডুলো 32767 গণনা করে।  \nইনপুট: একটি পূর্ণসংখ্যা $k (1 ≤ $k < 1000000), যা ধারার অবস্থানকে উপস্থাপন করে।  \nআউটপুট: Pell ধারার k-তম পদ মডুলো 32767 একটি পূর্ণসংখ্যা হিসাবে ফেরত দেয়।  \nউদাহরণ:  \n$k = 1 এর জন্য, ফাংশনটি 1 ফেরত দেয়।  \n$k = 8 এর জন্য, ফাংশনটি 408 ফেরত দেয়।  ",
      "bg": "Изчислява k-тия член на Пеловата последователност по модул 32767.  \nПеловата последователност е дефинирана по следния начин:  \na[1] = 1, a[2] = 2, и a[n] = 2*a[n-1] + a[n-2] за n > 2.  \nТази функция изчислява k-тия член на тази последователност по модул 32767.  \nВход: Цяло число $k (1 ≤ $k < 1000000), представляващо позицията в последователността.  \nИзход: Връща k-тия член на Пеловата последователност по модул 32767 като цяло число.  \nПример:  \nЗа $k = 1, функцията връща 1.  \nЗа $k = 8, функцията връща 408.",
      "zh": "计算 Pell 序列的第 k 项模 32767。\nPell 序列定义如下：\na[1] = 1, a[2] = 2, 且 a[n] = 2*a[n-1] + a[n-2] 对于 n > 2。\n此函数计算该序列的第 k 项模 32767。\n输入：一个整数 $k (1 ≤ $k < 1000000)，表示序列中的位置。\n输出：返回 Pell 序列的第 k 项模 32767 作为整数。\n示例：\n对于 $k = 1，函数返回 1。\n对于 $k = 8，函数返回 408。",
      "fr": "Calcule le k-ième terme de la séquence de Pell modulo 32767.  \nLa séquence de Pell est définie comme suit :  \na[1] = 1, a[2] = 2, et a[n] = 2*a[n-1] + a[n-2] pour n > 2.  \nCette fonction calcule le k-ième terme de cette séquence modulo 32767.  \nEntrée : Un entier $k (1 ≤ $k < 1000000), représentant la position dans la séquence.  \nSortie : Renvoie le k-ième terme de la séquence de Pell modulo 32767 en tant qu'entier.  \nExemple :  \nPour $k = 1, la fonction renvoie 1.  \nPour $k = 8, la fonction renvoie 408.  ",
      "de": "Berechnet das k-te Glied der Pell-Folge modulo 32767.\nDie Pell-Folge ist wie folgt definiert:\na[1] = 1, a[2] = 2, und a[n] = 2*a[n-1] + a[n-2] für n > 2.\nDiese Funktion berechnet das k-te Glied dieser Folge modulo 32767.\nEingabe: Eine ganze Zahl $k (1 ≤ $k < 1000000), die die Position in der Folge darstellt.\nAusgabe: Gibt das k-te Glied der Pell-Folge modulo 32767 als ganze Zahl zurück.\nBeispiel:\nFür $k = 1 gibt die Funktion 1 zurück.\nFür $k = 8 gibt die Funktion 408 zurück.",
      "ha": "Lissafi na k-th kalma na jerin Pell modulo 32767.\nAna ayyana jerin Pell kamar haka:  \na[1] = 1, a[2] = 2, kuma a[n] = 2*a[n-1] + a[n-2] don n > 2.  \nWannan aikin yana lissafin k-th na wannan jerin modulo 32767.  \nInput: Lamba ɗaya $k (1 ≤ $k < 1000000), yana wakiltar matsayi a cikin jerin.  \nOutput: Yana mayar da k-th na jerin Pell modulo 32767 a matsayin lamba.  \nExample:  \nFor $k = 1, the function returns 1.  \nFor $k = 8, the function returns 408.",
      "hi": "कैल्कुलेट्स द k-थ टर्म ऑफ़ द पेल अनुक्रम मोड्यूलो 32767।  \nपेल अनुक्रम को निम्नलिखित रूप से परिभाषित किया गया है:  \na[1] = 1, a[2] = 2, और a[n] = 2*a[n-1] + a[n-2] जब n > 2।  \nयह फ़ंक्शन इस अनुक्रम के k-थ टर्म को मोड्यूलो 32767 के साथ गणना करता है।  \nइनपुट: एक पूर्णांक $k (1 ≤ $k < 1000000), जो अनुक्रम में स्थिति का प्रतिनिधित्व करता है।  \nआउटपुट: पेल अनुक्रम का k-थ टर्म मोड्यूलो 32767 एक पूर्णांक के रूप में लौटाता है।  \nउदाहरण:  \nयदि $k = 1, तो फ़ंक्शन 1 लौटाता है।  \nयदि $k = 8, तो फ़ंक्शन 408 लौटाता है।",
      "hu": "Kiszámítja a Pell-sorozat k-adik tagját modulo 32767.\nA Pell-sorozat a következőképpen van definiálva:\na[1] = 1, a[2] = 2, és a[n] = 2*a[n-1] + a[n-2] ha n > 2.\nEz a függvény a sorozat k-adik tagját számítja ki modulo 32767.\nBemenet: Egy egész szám $k (1 ≤ $k < 1000000), amely a sorozatbeli pozíciót jelöli.\nKimenet: Visszaadja a Pell-sorozat k-adik tagját modulo 32767 egész számként.\nPélda:\nHa $k = 1, a függvény 1-et ad vissza.\nHa $k = 8, a függvény 408-at ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9880503962769411",
      "hy": "0.9731892684286728",
      "bn": "0.9711978002284171",
      "bg": "0.9909384820171884",
      "zh": "0.9880503962769411",
      "fr": "0.9880503962769411",
      "de": "0.990753557132445",
      "ha": "0.9904434951076495",
      "hi": "0.9855039547920739",
      "hu": "0.9844784261347908"
    }
  },
  {
    "task_id": "PHP/33",
    "prompt": {
      "en": "<?php\n\n/**\n    * Counts the number of flu infections in a dormitory grid after a certain number of days.\n    * The dormitory is represented as an n*n grid where each cell can have:\n    * - '.' representing a healthy person\n    * - '#' representing an empty room\n    * - '@' representing a person infected with the flu\n    * Each day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\n    * The function calculates the total number of infected individuals after 'm' days.\n    * Input: \n    *   - $dormitory: A 2D array representing the n*n dormitory grid.\n    *   - $days: An integer representing the number of days.\n    * Output: Returns the total number of flu infections after 'm' days.\n    * Example:\n    *   Input: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Output: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "sq": "<?php\n\n/**\n    * Numëron numrin e infeksioneve të gripit në një rrjet konvikti pas një numri të caktuar ditësh.\n    * Konvikti përfaqësohet si një rrjet n*n ku çdo qelizë mund të ketë:\n    * - '.' që përfaqëson një person të shëndetshëm\n    * - '#' që përfaqëson një dhomë bosh\n    * - '@' që përfaqëson një person të infektuar me grip\n    * Çdo ditë, individët e infektuar përhapin gripin te individët e shëndetshëm ngjitur (lart, poshtë, majtas, djathtas).\n    * Funksioni llogarit numrin total të individëve të infektuar pas 'm' ditësh.\n    * Hyrja: \n    *   - $dormitory: Një varg 2D që përfaqëson rrjetin n*n të konviktit.\n    *   - $days: Një numër i plotë që përfaqëson numrin e ditëve.\n    * Dalja: Kthen numrin total të infeksioneve të gripit pas 'm' ditësh.\n    * Shembull:\n    *   Hyrja: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Dalja: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է գրիպի վարակների քանակը հանրակացարանի ցանցում որոշակի օրերի քանակից հետո:\n    * Հանրակացարանը ներկայացված է որպես n*n ցանց, որտեղ յուրաքանչյուր բջիջ կարող է ունենալ.\n    * - '.' ներկայացնում է առողջ մարդ\n    * - '#' ներկայացնում է դատարկ սենյակ\n    * - '@' ներկայացնում է գրիպով վարակված մարդ\n    * Ամեն օր վարակված անձինք տարածում են գրիպը հարակից (վերև, ներքև, ձախ, աջ) առողջ անձանց:\n    * Ֆունկցիան հաշվարկում է վարակված անձանց ընդհանուր քանակը 'm' օրից հետո:\n    * Մուտք: \n    *   - $dormitory: 2D զանգված, որը ներկայացնում է n*n հանրակացարանի ցանցը:\n    *   - $days: ամբողջ թիվ, որը ներկայացնում է օրերի քանակը:\n    * Ելք: Վերադարձնում է գրիպի վարակների ընդհանուր քանակը 'm' օրից հետո:\n    * Օրինակ:\n    *   Մուտք: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Ելք: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "bn": "<?php\n\n/**\n    * একটি ডরমিটরি গ্রিডে নির্দিষ্ট সংখ্যক দিনের পর ফ্লু সংক্রমণের সংখ্যা গণনা করে।\n    * ডরমিটরি একটি n*n গ্রিড হিসাবে উপস্থাপিত হয় যেখানে প্রতিটি সেলে থাকতে পারে:\n    * - '.' একটি সুস্থ ব্যক্তিকে উপস্থাপন করে\n    * - '#' একটি খালি কক্ষকে উপস্থাপন করে\n    * - '@' ফ্লুতে আক্রান্ত একজন ব্যক্তিকে উপস্থাপন করে\n    * প্রতিদিন, আক্রান্ত ব্যক্তিরা সংলগ্ন (উপরে, নিচে, বামে, ডানে) সুস্থ ব্যক্তিদের মধ্যে ফ্লু ছড়ায়।\n    * ফাংশনটি 'm' দিনের পর মোট আক্রান্ত ব্যক্তির সংখ্যা গণনা করে।\n    * ইনপুট: \n    *   - $dormitory: একটি 2D অ্যারে যা n*n ডরমিটরি গ্রিড উপস্থাপন করে।\n    *   - $days: একটি পূর্ণসংখ্যা যা দিনের সংখ্যা উপস্থাপন করে।\n    * আউটপুট: 'm' দিনের পর মোট ফ্লু সংক্রমণের সংখ্যা প্রদান করে।\n    * উদাহরণ:\n    *   ইনপুট: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   আউটপুট: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "bg": "<?php\n\n/**\n    * Брои броя на грипните инфекции в общежитие след определен брой дни.\n    * Общежитието е представено като n*n мрежа, където всяка клетка може да има:\n    * - '.' представлява здрав човек\n    * - '#' представлява празна стая\n    * - '@' представлява човек, заразен с грип\n    * Всеки ден заразените индивиди разпространяват грипа към съседни (нагоре, надолу, наляво, надясно) здрави индивиди.\n    * Функцията изчислява общия брой на заразените индивиди след 'm' дни.\n    * Вход: \n    *   - $dormitory: Двуизмерен масив, представляващ n*n мрежа на общежитието.\n    *   - $days: Цяло число, представляващо броя на дните.\n    * Изход: Връща общия брой на грипните инфекции след 'm' дни.\n    * Пример:\n    *   Вход: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Изход: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "zh": "<?php\n\n/**\n    * 计算在经过若干天后宿舍网格中的流感感染人数。\n    * 宿舍用一个 n*n 的网格表示，其中每个单元格可以是：\n    * - '.' 表示一个健康的人\n    * - '#' 表示一个空房间\n    * - '@' 表示一个感染流感的人\n    * 每天，感染者会将流感传播给相邻（上、下、左、右）的健康人。\n    * 该函数计算经过 'm' 天后感染的总人数。\n    * 输入: \n    *   - $dormitory: 一个表示 n*n 宿舍网格的二维数组。\n    *   - $days: 一个表示天数的整数。\n    * 输出: 返回经过 'm' 天后的流感感染总人数。\n    * 示例:\n    *   输入: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   输出: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "fr": "<?php\n\n/**\n    * Compte le nombre d'infections grippales dans une grille de dortoir après un certain nombre de jours.\n    * Le dortoir est représenté comme une grille n*n où chaque cellule peut avoir :\n    * - '.' représentant une personne en bonne santé\n    * - '#' représentant une chambre vide\n    * - '@' représentant une personne infectée par la grippe\n    * Chaque jour, les individus infectés propagent la grippe aux individus sains adjacents (haut, bas, gauche, droite).\n    * La fonction calcule le nombre total d'individus infectés après 'm' jours.\n    * Entrée : \n    *   - $dormitory : Un tableau 2D représentant la grille du dortoir n*n.\n    *   - $days : Un entier représentant le nombre de jours.\n    * Sortie : Retourne le nombre total d'infections grippales après 'm' jours.\n    * Exemple :\n    *   Entrée : [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Sortie : 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "de": "<?php\n\n/**\n    * Zählt die Anzahl der Grippeinfektionen in einem Wohnheimraster nach einer bestimmten Anzahl von Tagen.\n    * Das Wohnheim wird als ein n*n Raster dargestellt, wobei jede Zelle folgendes darstellen kann:\n    * - '.' steht für eine gesunde Person\n    * - '#' steht für ein leeres Zimmer\n    * - '@' steht für eine Person, die mit der Grippe infiziert ist\n    * Jeden Tag verbreiten infizierte Personen die Grippe auf benachbarte (oben, unten, links, rechts) gesunde Personen.\n    * Die Funktion berechnet die Gesamtzahl der infizierten Personen nach 'm' Tagen.\n    * Eingabe: \n    *   - $dormitory: Ein 2D-Array, das das n*n Wohnheimraster darstellt.\n    *   - $days: Eine ganze Zahl, die die Anzahl der Tage darstellt.\n    * Ausgabe: Gibt die Gesamtzahl der Grippeinfektionen nach 'm' Tagen zurück.\n    * Beispiel:\n    *   Eingabe: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Ausgabe: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "ha": "<?php\n\n/**\n    * Yana ƙidaya adadin kamuwa da mura a cikin grid ɗin ɗakin kwanan dalibai bayan wasu kwanaki.\n    * Ana wakilta ɗakin kwanan dalibai a matsayin grid n*n inda kowace cell na iya kasancewa da:\n    * - '.' wakiltar mutum lafiyayye\n    * - '#' wakiltar ɗaki babu kowa\n    * - '@' wakiltar mutum da ya kamu da mura\n    * Kowace rana, mutanen da suka kamu suna yada mura ga mutanen da ke kusa da su (sama, ƙasa, hagu, dama) da ke lafiya.\n    * Aikin yana ƙididdige jimillar mutanen da suka kamu bayan kwanaki 'm'.\n    * Shigarwa: \n    *   - $dormitory: Tsarin array 2D da ke wakiltar grid ɗin ɗakin kwanan dalibai n*n.\n    *   - $days: Lamba mai nuna adadin kwanaki.\n    * Fitarwa: Yana dawowa da jimillar adadin kamuwa da mura bayan kwanaki 'm'.\n    * Misali:\n    *   Shigarwa: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Fitarwa: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hi": "<?php\n\n/**\n    * कुछ दिनों के बाद एक छात्रावास ग्रिड में फ्लू संक्रमणों की संख्या गिनता है।\n    * छात्रावास को एक n*n ग्रिड के रूप में दर्शाया गया है जहाँ प्रत्येक सेल में हो सकता है:\n    * - '.' एक स्वस्थ व्यक्ति को दर्शाता है\n    * - '#' एक खाली कमरे को दर्शाता है\n    * - '@' एक व्यक्ति को दर्शाता है जो फ्लू से संक्रमित है\n    * प्रत्येक दिन, संक्रमित व्यक्ति आस-पास के (ऊपर, नीचे, बाएँ, दाएँ) स्वस्थ व्यक्तियों में फ्लू फैलाते हैं।\n    * यह फ़ंक्शन 'm' दिनों के बाद कुल संक्रमित व्यक्तियों की संख्या की गणना करता है।\n    * इनपुट: \n    *   - $dormitory: एक 2D ऐरे जो n*n छात्रावास ग्रिड का प्रतिनिधित्व करता है।\n    *   - $days: एक पूर्णांक जो दिनों की संख्या का प्रतिनिधित्व करता है।\n    * आउटपुट: 'm' दिनों के बाद फ्लू संक्रमणों की कुल संख्या लौटाता है।\n    * उदाहरण:\n    *   इनपुट: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   आउटपुट: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hu": "<?php\n\n/**\n    * Megszámolja az influenza fertőzések számát egy kollégiumi rácsban egy bizonyos napok száma után.\n    * A kollégiumot egy n*n rács képviseli, ahol minden cella lehet:\n    * - '.' ami egy egészséges személyt jelöl\n    * - '#' ami egy üres szobát jelöl\n    * - '@' ami egy influenzával fertőzött személyt jelöl\n    * Minden nap a fertőzött egyének az influenzát a szomszédos (fel, le, balra, jobbra) egészséges egyénekre terjesztik.\n    * A függvény kiszámítja a fertőzött egyének teljes számát 'm' nap után.\n    * Bemenet: \n    *   - $dormitory: Egy 2D tömb, amely az n*n kollégiumi rácsot képviseli.\n    *   - $days: Egy egész szám, amely a napok számát jelöli.\n    * Kimenet: Visszaadja az influenza fertőzések teljes számát 'm' nap után.\n    * Példa:\n    *   Bemenet: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Kimenet: 16\n*/\nfunction countFluInfections($dormitory, $days) "
    },
    "prompt_bertscore": {
      "sq": "0.9906921803447052",
      "hy": "0.9653950122768639",
      "bn": "0.9850931871640937",
      "bg": "0.9731453711144642",
      "zh": "0.9708313271754077",
      "fr": "0.9937367868252079",
      "de": "0.9610670549044946",
      "ha": "0.9818878887053337",
      "hi": "0.9788629466325534",
      "hu": "0.9777307534606545"
    },
    "canonical_solution": "{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}",
    "instruction": {
      "en": "Write a PHP function `function countFluInfections($dormitory, $days)` to solve the following problem:\nCounts the number of flu infections in a dormitory grid after a certain number of days.\nThe dormitory is represented as an n*n grid where each cell can have:\n- '.' representing a healthy person\n- '#' representing an empty room\n- '@' representing a person infected with the flu\nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\nThe function calculates the total number of infected individuals after 'm' days.\nInput:\n- $dormitory: A 2D array representing the n*n dormitory grid.\n- $days: An integer representing the number of days.\nOutput: Returns the total number of flu infections after 'm' days.\nExample:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16",
      "sq": "Shkruani një funksion PHP `function countFluInfections($dormitory, $days)` për të zgjidhur problemin e mëposhtëm:\nNumëron numrin e infeksioneve të gripit në një rrjet konvikti pas një numri të caktuar ditësh.\nKonvikti përfaqësohet si një rrjet n*n ku çdo qelizë mund të ketë:\n- '.' që përfaqëson një person të shëndetshëm\n- '#' që përfaqëson një dhomë bosh\n- '@' që përfaqëson një person të infektuar me grip\nÇdo ditë, individët e infektuar përhapin gripin te individët e shëndetshëm fqinjë (lart, poshtë, majtas, djathtas).\nFunksioni llogarit numrin total të individëve të infektuar pas 'm' ditësh.\nHyrja:\n- $dormitory: Një varg 2D që përfaqëson rrjetin n*n të konviktit.\n- $days: Një numër i plotë që përfaqëson numrin e ditëve.\nDalja: Kthen numrin total të infeksioneve të gripit pas 'm' ditësh.\nShembull:\nHyrja: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nDalja: 16",
      "hy": "Գրեք PHP ֆունկցիա `function countFluInfections($dormitory, $days)` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է գրիպի վարակների քանակը հանրակացարանի ցանցում որոշակի օրերի քանակից հետո:\nՀանրակացարանը ներկայացված է որպես n*n ցանց, որտեղ յուրաքանչյուր բջիջ կարող է ունենալ.\n- '.' ներկայացնում է առողջ մարդ\n- '#' ներկայացնում է դատարկ սենյակ\n- '@' ներկայացնում է գրիպով վարակված մարդ\nԱմեն օր վարակված անձինք տարածում են գրիպը հարակից (վերև, ներքև, ձախ, աջ) առողջ անձանց վրա:\nՖունկցիան հաշվարկում է վարակված անձանց ընդհանուր քանակը 'm' օրերից հետո:\nՄուտք:\n- $dormitory: 2D զանգված, որը ներկայացնում է n*n հանրակացարանի ցանցը:\n- $days: ամբողջ թիվ, որը ներկայացնում է օրերի քանակը:\nԵլք: Վերադարձնում է գրիպի վարակների ընդհանուր քանակը 'm' օրերից հետո:\nՕրինակ:\nՄուտք: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nԵլք: 16",
      "bn": "PHP ফাংশন `function countFluInfections($dormitory, $days)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি নির্দিষ্ট সংখ্যক দিনের পরে একটি ডরমিটরি গ্রিডে ফ্লু সংক্রমণের সংখ্যা গণনা করে।\nডরমিটরি একটি n*n গ্রিড হিসেবে উপস্থাপিত হয় যেখানে প্রতিটি সেলে থাকতে পারে:\n- '.' একটি সুস্থ ব্যক্তিকে উপস্থাপন করে\n- '#' একটি খালি ঘর উপস্থাপন করে\n- '@' ফ্লু দ্বারা সংক্রামিত একজন ব্যক্তিকে উপস্থাপন করে\nপ্রতিদিন, সংক্রামিত ব্যক্তিরা সংলগ্ন (উপরে, নিচে, বাম, ডান) সুস্থ ব্যক্তিদের মধ্যে ফ্লু ছড়ায়।\nফাংশনটি 'm' দিনের পরে মোট সংক্রামিত ব্যক্তির সংখ্যা গণনা করে।\nইনপুট:\n- $dormitory: একটি 2D অ্যারে যা n*n ডরমিটরি গ্রিড উপস্থাপন করে।\n- $days: একটি পূর্ণসংখ্যা যা দিনের সংখ্যা উপস্থাপন করে।\nআউটপুট: 'm' দিনের পরে মোট ফ্লু সংক্রমণের সংখ্যা ফেরত দেয়।\nউদাহরণ:\nইনপুট: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nআউটপুট: 16",
      "bg": "Напишете PHP функция `function countFluInfections($dormitory, $days)`, за да решите следния проблем:  \nБрои броя на заразените с грип в общежитие след определен брой дни.  \nОбщежитието е представено като n*n решетка, където всяка клетка може да има:  \n- '.' представлява здрав човек  \n- '#' представлява празна стая  \n- '@' представлява човек, заразен с грип  \nВсеки ден заразените индивиди разпространяват грипа към съседни (нагоре, надолу, наляво, надясно) здрави индивиди.  \nФункцията изчислява общия брой на заразените индивиди след 'm' дни.  \nВход:  \n- $dormitory: Двуизмерен масив, представляващ n*n решетката на общежитието.  \n- $days: Цяло число, представляващо броя на дните.  \nИзход: Връща общия брой на заразените с грип след 'm' дни.  \nПример:  \nВход: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nИзход: 16",
      "zh": "编写一个 PHP 函数 `function countFluInfections($dormitory, $days)` 来解决以下问题：\n计算在经过一定天数后宿舍网格中流感感染的数量。\n宿舍表示为一个 n*n 的网格，其中每个单元格可以是：\n- '.' 表示一个健康的人\n- '#' 表示一个空房间\n- '@' 表示一个感染流感的人\n每天，感染者会将流感传播给相邻（上、下、左、右）的健康人。\n该函数计算经过 'm' 天后感染者的总数。\n输入：\n- $dormitory: 一个表示 n*n 宿舍网格的二维数组。\n- $days: 一个表示天数的整数。\n输出：返回经过 'm' 天后的流感感染总数。\n示例：\n输入: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\n输出: 16",
      "fr": "Écrire une fonction PHP `function countFluInfections($dormitory, $days)` pour résoudre le problème suivant :\nCompte le nombre d'infections grippales dans une grille de dortoir après un certain nombre de jours.\nLe dortoir est représenté comme une grille n*n où chaque cellule peut avoir :\n- '.' représentant une personne en bonne santé\n- '#' représentant une chambre vide\n- '@' représentant une personne infectée par la grippe\nChaque jour, les individus infectés propagent la grippe aux individus en bonne santé adjacents (haut, bas, gauche, droite).\nLa fonction calcule le nombre total d'individus infectés après 'm' jours.\nEntrée :\n- $dormitory : Un tableau 2D représentant la grille du dortoir n*n.\n- $days : Un entier représentant le nombre de jours.\nSortie : Retourne le nombre total d'infections grippales après 'm' jours.\nExemple :\nEntrée : [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nSortie : 16",
      "de": "Schreiben Sie eine PHP-Funktion `function countFluInfections($dormitory, $days)`, um das folgende Problem zu lösen:\nZählt die Anzahl der Grippeinfektionen in einem Wohnheimraster nach einer bestimmten Anzahl von Tagen.\nDas Wohnheim wird als ein n*n Raster dargestellt, wobei jede Zelle folgendes haben kann:\n- '.' steht für eine gesunde Person\n- '#' steht für ein leeres Zimmer\n- '@' steht für eine mit der Grippe infizierte Person\nJeden Tag verbreiten infizierte Personen die Grippe an benachbarte (oben, unten, links, rechts) gesunde Personen.\nDie Funktion berechnet die Gesamtzahl der infizierten Personen nach 'm' Tagen.\nEingabe:\n- $dormitory: Ein 2D-Array, das das n*n Wohnheimraster darstellt.\n- $days: Ein Integer, der die Anzahl der Tage darstellt.\nAusgabe: Gibt die Gesamtzahl der Grippeinfektionen nach 'm' Tagen zurück.\nBeispiel:\nEingabe: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nAusgabe: 16",
      "ha": "Rubuta aikin PHP `function countFluInfections($dormitory, $days)` don warware matsalar mai zuwa:\nYana ƙididdige yawan kamuwa da mura a cikin grid ɗin ɗakin kwana bayan wasu kwanaki.\nAna wakiltar ɗakin kwana a matsayin grid n*n inda kowane cell zai iya samun:\n- '.' yana wakiltar mutum mai lafiya\n- '#' yana wakiltar ɗaki mara kowa\n- '@' yana wakiltar mutum da ya kamu da mura\nKowace rana, waɗanda suka kamu suna yada mura ga waɗanda ke kusa da su (sama, ƙasa, hagu, dama) waɗanda suke da lafiya.\nAikin yana ƙididdige adadin mutanen da suka kamu bayan kwanaki 'm'.\nShigarwa:\n- $dormitory: Tsarin 2D wanda ke wakiltar grid ɗin ɗakin kwana n*n.\n- $days: Lamba mai nuna yawan kwanaki.\nFitarwa: Yana dawo da jimlar yawan kamuwa da mura bayan kwanaki 'm'.\nMisali:\nShigarwa: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nFitarwa: 16",
      "hi": "PHP फ़ंक्शन `function countFluInfections($dormitory, $days)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nकिसी छात्रावास ग्रिड में निश्चित संख्या में दिनों के बाद फ्लू संक्रमणों की संख्या की गणना करता है।\nछात्रावास को n*n ग्रिड के रूप में दर्शाया गया है जहाँ प्रत्येक सेल में हो सकता है:\n- '.' एक स्वस्थ व्यक्ति का प्रतिनिधित्व करता है\n- '#' एक खाली कमरे का प्रतिनिधित्व करता है\n- '@' फ्लू से संक्रमित व्यक्ति का प्रतिनिधित्व करता है\nप्रत्येक दिन, संक्रमित व्यक्ति आस-पास के (ऊपर, नीचे, बाएँ, दाएँ) स्वस्थ व्यक्तियों में फ्लू फैलाते हैं।\nफ़ंक्शन 'm' दिनों के बाद कुल संक्रमित व्यक्तियों की संख्या की गणना करता है।\nइनपुट:\n- $dormitory: n*n छात्रावास ग्रिड का प्रतिनिधित्व करने वाला एक 2D ऐरे।\n- $days: दिनों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: 'm' दिनों के बाद फ्लू संक्रमणों की कुल संख्या लौटाता है।\nउदाहरण:\nइनपुट: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nआउटपुट: 16",
      "hu": "Írj egy PHP függvényt `function countFluInfections($dormitory, $days)` a következő probléma megoldására:\nMegszámolja az influenzás fertőzések számát egy kollégiumi rácsban bizonyos napok után.\nA kollégiumot egy n*n-es rács reprezentálja, ahol minden cella tartalmazhat:\n- '.' egy egészséges személyt jelöl\n- '#' egy üres szobát jelöl\n- '@' egy influenzával fertőzött személyt jelöl\nMinden nap a fertőzött egyének az influenzát a szomszédos (fel, le, balra, jobbra) egészséges egyénekre terjesztik.\nA függvény kiszámítja a fertőzött egyének teljes számát 'm' nap után.\nBemenet:\n- $dormitory: Egy 2D tömb, amely az n*n-es kollégiumi rácsot reprezentálja.\n- $days: Egy egész szám, amely a napok számát jelenti.\nKimenet: Visszaadja az influenzás fertőzések teljes számát 'm' nap után.\nPélda:\nBemenet: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nKimenet: 16"
    },
    "instruction_bertscore": {
      "sq": "0.991010187584742",
      "hy": "0.9856674275956656",
      "bn": "0.9830085613151326",
      "bg": "0.9672204254785745",
      "zh": "0.9815212170219433",
      "fr": "0.9887974451400133",
      "de": "0.9643359150851858",
      "ha": "0.9774717394437851",
      "hi": "0.9747091881043518",
      "hu": "0.9872058198967808"
    },
    "level": "hard",
    "test": "function main(){\n    assert(countFluInfections([\n        ['.','.','.','.','#'], \n        ['.','#','.','@','.'], \n        ['.','#','@','.','.'], \n        ['#','.','.','.','.'], \n        ['#','.','.','.','.']], 4) === 16);\n    \n\n    assert(countFluInfections([\n            ['.','.','.','.','#'], \n            ['.','#','.','@','.'], \n            ['.','#','@','.','.'], \n            ['#','.','.','.','.'], \n            ['#','.','.','.','.']], 1) === 2);\n    \n\n    assert(countFluInfections([\n                ['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 2) === 7);\n\n    assert(countFluInfections([\n                    ['.','.','.','.','#'], \n                    ['.','#','.','#','.'], \n                    ['.','#','#','.','.'], \n                    ['#','.','.','.','.'], \n                    ['#','.','.','.','.']], 100) === 0);\n}\n\n\nmain();\n?>",
    "entry_point": "countFluInfections",
    "signature": "function countFluInfections($dormitory, $days)",
    "docstring": {
      "en": "Counts the number of flu infections in a dormitory grid after a certain number of days.\nThe dormitory is represented as an n*n grid where each cell can have:\n- '.' representing a healthy person\n- '#' representing an empty room\n- '@' representing a person infected with the flu\nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\nThe function calculates the total number of infected individuals after 'm' days.\nInput:\n- $dormitory: A 2D array representing the n*n dormitory grid.\n- $days: An integer representing the number of days.\nOutput: Returns the total number of flu infections after 'm' days.\nExample:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16",
      "sq": "Numëron numrin e infeksioneve të gripit në një rrjet konvikti pas një numri të caktuar ditësh. Konvikti përfaqësohet si një rrjet n*n ku çdo qelizë mund të ketë:\n- '.' që përfaqëson një person të shëndetshëm\n- '#' që përfaqëson një dhomë bosh\n- '@' që përfaqëson një person të infektuar me grip\nÇdo ditë, individët e infektuar përhapin gripin te individët e shëndetshëm ngjitur (lart, poshtë, majtas, djathtas).\nFunksioni llogarit numrin total të individëve të infektuar pas 'm' ditësh.\nInput:\n- $dormitory: Një varg 2D që përfaqëson rrjetin n*n të konviktit.\n- $days: Një numër i plotë që përfaqëson numrin e ditëve.\nOutput: Kthen numrin total të infeksioneve të gripit pas 'm' ditësh.\nShembull:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16",
      "hy": "Հաշվում է գրիպի վարակների քանակը հանրակացարանի ցանցում որոշակի օրերի ընթացքում:\nՀանրակացարանը ներկայացված է որպես n*n ցանց, որտեղ յուրաքանչյուր բջիջ կարող է ունենալ.\n- '.' ներկայացնում է առողջ մարդ\n- '#' ներկայացնում է դատարկ սենյակ\n- '@' ներկայացնում է գրիպով վարակված մարդ\nԱմեն օր վարակված անձինք տարածում են գրիպը հարակից (վերև, ներքև, ձախ, աջ) առողջ անձանց:\nՖունկցիան հաշվում է վարակված անձանց ընդհանուր քանակը 'm' օրից հետո:\nՄուտք:\n- $dormitory: 2D զանգված, որը ներկայացնում է n*n հանրակացարանի ցանցը:\n- $days: Ամբողջ թիվ, որը ներկայացնում է օրերի քանակը:\nԵլք: Վերադարձնում է գրիպի վարակների ընդհանուր քանակը 'm' օրից հետո:\nՕրինակ:\nՄուտք: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nԵլք: 16",
      "bn": "একটি ডরমিটরি গ্রিডে নির্দিষ্ট সংখ্যক দিনের পর ফ্লু সংক্রমণের সংখ্যা গণনা করে।\nডরমিটরির গ্রিডে নির্দিষ্ট সংখ্যক দিনের পর ফ্লু সংক্রমণের সংখ্যা গণনা করে।  \nThe dormitory is represented as an n*n grid where each cell can have:  \nডরমিটরিটি একটি n*n গ্রিড হিসেবে উপস্থাপিত হয় যেখানে প্রতিটি সেলে থাকতে পারে:  \n- '.' representing a healthy person  \n  - '.' একটি সুস্থ ব্যক্তিকে উপস্থাপন করে  \n- '#' representing an empty room  \n  - '#' একটি খালি ঘরকে উপস্থাপন করে  \n- '@' representing a person infected with the flu  \n  - '@' ফ্লু দ্বারা সংক্রমিত একজন ব্যক্তিকে উপস্থাপন করে  \nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.  \nপ্রতিদিন, সংক্রমিত ব্যক্তিরা সংলগ্ন (উপরে, নিচে, বামে, ডানে) সুস্থ ব্যক্তিদের মধ্যে ফ্লু ছড়ায়।  \nThe function calculates the total number of infected individuals after 'm' days.  \nফাংশনটি 'm' দিনের পর মোট সংক্রমিত ব্যক্তির সংখ্যা গণনা করে।  \nInput:  \nইনপুট:  \n- $dormitory: A 2D array representing the n*n dormitory grid.  \n  - $dormitory: একটি 2D অ্যারে যা n*n ডরমিটরি গ্রিড উপস্থাপন করে।  \n- $days: An integer representing the number of days.  \n  - $days: একটি পূর্ণসংখ্যা যা দিনের সংখ্যা উপস্থাপন করে।  \nOutput: Returns the total number of flu infections after 'm' days.  \nআউটপুট: 'm' দিনের পর মোট ফ্লু সংক্রমণের সংখ্যা প্রদান করে।  \nExample:  \nউদাহরণ:  \nInput: [['.','.','.','.','#'],  \nইনপুট: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nOutput: 16  \nআউটপুট: 16  ",
      "bg": "Брои броя на заразените с грип в мрежа на общежитие след определен брой дни.\nОбщежитието е представено като n*n мрежа, където всяка клетка може да има:\n- '.' представлява здрав човек\n- '#' представлява празна стая\n- '@' представлява човек, заразен с грип\nВсеки ден заразените индивиди разпространяват грипа към съседни (нагоре, надолу, наляво, надясно) здрави индивиди.\nФункцията изчислява общия брой на заразените индивиди след 'm' дни.\nВход:\n- $dormitory: 2D масив, представляващ n*n мрежа на общежитието.\n- $days: Цяло число, представляващо броя на дните.\nИзход: Връща общия брой на заразените с грип след 'm' дни.\nПример:\nВход: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nИзход: 16",
      "zh": "计算宿舍网格中经过若干天后的流感感染人数。\n宿舍被表示为一个 n*n 的网格，其中每个单元格可以是：\n- '.' 表示健康的人\n- '#' 表示空房间\n- '@' 表示感染流感的人\n每天，感染者会将流感传播给相邻（上、下、左、右）的健康人。\n该函数计算经过 'm' 天后感染者的总人数。\n输入：\n- $dormitory: 一个表示 n*n 宿舍网格的二维数组。\n- $days: 一个表示天数的整数。\n输出：返回经过 'm' 天后的流感感染总人数。\n示例：\n输入: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\n输出: 16",
      "fr": "Compte le nombre d'infections grippales dans une grille de dortoir après un certain nombre de jours.  \nLe dortoir est représenté comme une grille n*n où chaque cellule peut contenir :  \n- '.' représentant une personne en bonne santé  \n- '#' représentant une chambre vide  \n- '@' représentant une personne infectée par la grippe  \nChaque jour, les individus infectés propagent la grippe aux individus en bonne santé adjacents (haut, bas, gauche, droite).  \nLa fonction calcule le nombre total d'individus infectés après 'm' jours.  \nEntrée :  \n- $dormitory : Un tableau 2D représentant la grille du dortoir n*n.  \n- $days : Un entier représentant le nombre de jours.  \nSortie : Renvoie le nombre total d'infections grippales après 'm' jours.  \nExemple :  \nEntrée : [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nSortie : 16  ",
      "de": "Zählt die Anzahl der Grippeinfektionen in einem Wohnheimraster nach einer bestimmten Anzahl von Tagen.  \nDas Wohnheim wird als ein n*n Raster dargestellt, wobei jede Zelle enthalten kann:  \n- '.' steht für eine gesunde Person  \n- '#' steht für ein leeres Zimmer  \n- '@' steht für eine mit der Grippe infizierte Person  \nJeden Tag verbreiten infizierte Personen die Grippe an benachbarte (oben, unten, links, rechts) gesunde Personen.  \nDie Funktion berechnet die Gesamtzahl der infizierten Personen nach 'm' Tagen.  \nEingabe:  \n- $dormitory: Ein 2D-Array, das das n*n Wohnheimraster darstellt.  \n- $days: Eine ganze Zahl, die die Anzahl der Tage darstellt.  \nAusgabe: Gibt die Gesamtzahl der Grippeinfektionen nach 'm' Tagen zurück.  \nBeispiel:  \nEingabe: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nAusgabe: 16  ",
      "ha": "Yana ƙidaya adadin kamuwa da mura a cikin grid ɗin ɗakin kwanan dalibai bayan wasu kwanaki.\n\nAna wakilta ɗakin kwanan dalibai a matsayin grid n*n inda kowace cell na iya samun:\n\n- '.' yana wakiltar mutum lafiyayye\n- '#' yana wakiltar daki mara kowa\n- '@' yana wakiltar mutum da ya kamu da mura\n\nKowace rana, mutanen da suka kamu suna yada mura ga mutanen da ke kusa (sama, ƙasa, hagu, dama) da ba su kamu ba.\n\nAikin yana ƙididdige jimillar mutanen da suka kamu bayan kwanaki 'm'.\n\nShigarwa:\n\n- $dormitory: Wani tsari na 2D da ke wakiltar grid ɗin ɗakin kwanan dalibai n*n.\n- $days: Wani lamba mai nuna adadin kwanaki.\n\nFitarwa: Yana mayar da jimillar adadin kamuwa da mura bayan kwanaki 'm'.\n\nMisali:\n\nShigarwa: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\n\nFitarwa: 16",
      "hi": "किसी छात्रावास ग्रिड में निश्चित संख्या में दिनों के बाद फ्लू संक्रमणों की संख्या की गणना करता है।\nहॉस्टल को n*n ग्रिड के रूप में दर्शाया गया है जहाँ प्रत्येक सेल में हो सकता है:\n- '.' एक स्वस्थ व्यक्ति को दर्शाता है\n- '#' एक खाली कमरे को दर्शाता है\n- '@' एक फ्लू संक्रमित व्यक्ति को दर्शाता है\nप्रत्येक दिन, संक्रमित व्यक्ति फ्लू को आस-पास (ऊपर, नीचे, बाएँ, दाएँ) के स्वस्थ व्यक्तियों में फैलाते हैं।\nयह फ़ंक्शन 'm' दिनों के बाद कुल संक्रमित व्यक्तियों की संख्या की गणना करता है।\nइनपुट:\n- $dormitory: एक 2D ऐरे जो n*n हॉस्टल ग्रिड का प्रतिनिधित्व करता है।\n- $days: एक पूर्णांक जो दिनों की संख्या का प्रतिनिधित्व करता है।\nआउटपुट: 'm' दिनों के बाद फ्लू संक्रमणों की कुल संख्या लौटाता है।\nउदाहरण:\nइनपुट: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nआउटपुट: 16",
      "hu": "Számolja meg az influenza fertőzések számát egy kollégiumi rácsban bizonyos napok elteltével.  \nA kollégiumot egy n*n rács képviseli, ahol minden cella lehet:  \n- '.' egy egészséges személyt képvisel  \n- '#' egy üres szobát képvisel  \n- '@' egy influenzával fertőzött személyt képvisel  \nMinden nap a fertőzött egyének az influenzát a szomszédos (fel, le, balra, jobbra) egészséges egyénekre terjesztik.  \nA függvény kiszámítja a fertőzött egyének teljes számát 'm' nap elteltével.  \nBemenet:  \n- $dormitory: Egy 2D tömb, amely az n*n kollégiumi rácsot képviseli.  \n- $days: Egy egész szám, amely a napok számát képviseli.  \nKimenet: Visszaadja az influenza fertőzések teljes számát 'm' nap elteltével.  \nPélda:  \nBemenet: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nKimenet: 16  "
    },
    "docstring_bertscore": {
      "sq": "0.990048022019009",
      "hy": "0.9797790299498863",
      "bn": "1",
      "bg": "0.9616516241158803",
      "zh": "0.9695626749317379",
      "fr": "0.9911261877272664",
      "de": "0.9656566084886868",
      "ha": "0.9746980648030139",
      "hi": "0.9343256453361487",
      "hu": "0.9884867872240748"
    }
  },
  {
    "task_id": "PHP/34",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\n * The grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n * - For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n * - For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\n * Input: Two integers, m and n, representing the number of rows and columns of the grid.\n * Output: Returns the count of unique paths from (1,1) to (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e shtigjeve unike që një milingonë mund të ndjekë për të lëvizur nga këndi i poshtëm-majtë në këndin e sipërm-djathtë të një rrjeti.\n * Rrjeti përcaktohet nga m rreshta dhe n kolona. Milingona fillon në (1,1) dhe mund të lëvizë vetëm djathtas ose lart për shkak të një dëmtimi.\n * - Për një rrjet 1x1 (m = 1, n = 1), ka vetëm 1 shteg.\n * - Për një rrjet 2x3 (m = 2, n = 3), ka 3 shtigje të mundshme.\n * Hyrja: Dy numra të plotë, m dhe n, që përfaqësojnë numrin e rreshtave dhe kolonave të rrjetit.\n * Dalja: Kthen numrin e shtigjeve unike nga (1,1) në (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է եզակի ուղիների քանակը, որոնք մրջյունը կարող է անցնել ցանցի ներքևի ձախից դեպի վերևի աջ անկյուն:\n * Ցանցը սահմանվում է m տողերով և n սյունակներով: Մրջյունը սկսում է (1,1) կետից և կարող է շարժվել միայն աջ կամ վերև վնասվածքի պատճառով:\n * - 1x1 ցանցի համար (m = 1, n = 1), կա միայն 1 ուղի:\n * - 2x3 ցանցի համար (m = 2, n = 3), կա 3 հնարավոր ուղի:\n * Մուտք: Երկու ամբողջ թիվ, m և n, որոնք ներկայացնում են ցանցի տողերի և սյունակների քանակը:\n * Ելք: Վերադարձնում է եզակի ուղիների քանակը (1,1)-ից (m,n) կետ:\n */\n\n function countAntPaths($m, $n): int ",
      "bn": "<?php\n\n\n/**\n * একটি পিপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে যা একটি গ্রিডের নিচের-বাম দিক থেকে উপরের-ডান কোণে যেতে পারে।\n * গ্রিডটি m সারি এবং n কলাম দ্বারা সংজ্ঞায়িত। পিপড়ে (1,1) থেকে শুরু করে এবং শুধুমাত্র ডান বা উপরে যেতে পারে একটি আঘাতের কারণে।\n * - একটি 1x1 গ্রিডের জন্য (m = 1, n = 1), শুধুমাত্র 1টি পথ রয়েছে।\n * - একটি 2x3 গ্রিডের জন্য (m = 2, n = 3), 3টি সম্ভাব্য পথ রয়েছে।\n * ইনপুট: দুটি পূর্ণসংখ্যা, m এবং n, যা গ্রিডের সারি এবং কলামের সংখ্যা উপস্থাপন করে।\n * আউটপুট: (1,1) থেকে (m,n) পর্যন্ত অনন্য পথের সংখ্যা ফেরত দেয়।\n */\n\n function countAntPaths($m, $n): int ",
      "bg": "<?php\n\n\n/**\n * Брои броя на уникалните пътища, които мравка може да поеме, за да се премести от долния ляв до горния десен ъгъл на мрежа.\n * Мрежата е дефинирана от m реда и n колони. Мравката започва от (1,1) и може да се движи само надясно или нагоре поради нараняване.\n * - За мрежа 1x1 (m = 1, n = 1), има само 1 път.\n * - За мрежа 2x3 (m = 2, n = 3), има 3 възможни пътища.\n * Вход: Две цели числа, m и n, представляващи броя на редовете и колоните на мрежата.\n * Изход: Връща броя на уникалните пътища от (1,1) до (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "zh": "<?php\n\n\n/**\n * 计算蚂蚁从网格的左下角移动到右上角的唯一路径数量。\n * 网格由 m 行和 n 列定义。蚂蚁从 (1,1) 开始，由于受伤只能向右或向上移动。\n * - 对于 1x1 网格 (m = 1, n = 1)，只有 1 条路径。\n * - 对于 2x3 网格 (m = 2, n = 3)，有 3 条可能的路径。\n * 输入：两个整数 m 和 n，表示网格的行数和列数。\n * 输出：返回从 (1,1) 到 (m,n) 的唯一路径数量。\n */\n\n function countAntPaths($m, $n): int ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre de chemins uniques qu'une fourmi peut emprunter pour se déplacer du coin inférieur gauche au coin supérieur droit d'une grille.\n * La grille est définie par m lignes et n colonnes. La fourmi commence à (1,1) et ne peut se déplacer que vers la droite ou vers le haut en raison d'une blessure.\n * - Pour une grille 1x1 (m = 1, n = 1), il n'y a qu'un seul chemin.\n * - Pour une grille 2x3 (m = 2, n = 3), il y a 3 chemins possibles.\n * Entrée : Deux entiers, m et n, représentant le nombre de lignes et de colonnes de la grille.\n * Sortie : Retourne le nombre de chemins uniques de (1,1) à (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der einzigartigen Wege, die eine Ameise nehmen kann, um sich von der unteren linken zur oberen rechten Ecke eines Gitters zu bewegen.\n * Das Gitter wird durch m Zeilen und n Spalten definiert. Die Ameise startet bei (1,1) und kann aufgrund einer Verletzung nur nach rechts oder oben bewegen.\n * - Für ein 1x1 Gitter (m = 1, n = 1) gibt es nur 1 Weg.\n * - Für ein 2x3 Gitter (m = 2, n = 3) gibt es 3 mögliche Wege.\n * Eingabe: Zwei ganze Zahlen, m und n, die die Anzahl der Zeilen und Spalten des Gitters darstellen.\n * Ausgabe: Gibt die Anzahl der einzigartigen Wege von (1,1) nach (m,n) zurück.\n */\n\n function countAntPaths($m, $n): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige adadin hanyoyin musamman da tururuwa za ta iya bi don motsawa daga ƙasan hagu zuwa saman dama na grid.\n * Ana ayyana grid ta hanyar m layuka da n ginshikai. Tururuwa tana farawa a (1,1) kuma tana iya motsawa dama ko sama kawai saboda rauni.\n * - Don grid 1x1 (m = 1, n = 1), akwai hanya 1 kawai.\n * - Don grid 2x3 (m = 2, n = 3), akwai hanyoyi 3 masu yiwuwa.\n * Shigarwa: Lambobi biyu, m da n, suna wakiltar adadin layuka da ginshikan grid.\n * Fitarwa: Yana dawo da ƙididdigar hanyoyin musamman daga (1,1) zuwa (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "hi": "<?php\n\n\n/**\n * गणना करता है कि कितने अद्वितीय पथ हैं जिनसे एक चींटी ग्रिड के नीचे-बाएँ से ऊपर-दाएँ कोने तक जा सकती है।\n * ग्रिड m पंक्तियों और n स्तंभों द्वारा परिभाषित है। चींटी (1,1) से शुरू होती है और केवल दाएँ या ऊपर की ओर जा सकती है चोट के कारण।\n * - 1x1 ग्रिड के लिए (m = 1, n = 1), केवल 1 पथ है।\n * - 2x3 ग्रिड के लिए (m = 2, n = 3), 3 संभावित पथ हैं।\n * इनपुट: दो पूर्णांक, m और n, जो ग्रिड की पंक्तियों और स्तंभों की संख्या का प्रतिनिधित्व करते हैं।\n * आउटपुट: (1,1) से (m,n) तक अद्वितीय पथों की गणना लौटाता है।\n */\n\n function countAntPaths($m, $n): int ",
      "hu": "<?php\n\n\n/**\n * Megszámolja az egyedi utak számát, amelyeket egy hangya megtehet, hogy a rács bal alsó sarkából a jobb felső sarokba jusson.\n * A rácsot m sor és n oszlop határozza meg. A hangya a (1,1) pontból indul, és csak jobbra vagy felfelé mozoghat egy sérülés miatt.\n * - Egy 1x1-es rács esetén (m = 1, n = 1) csak 1 út van.\n * - Egy 2x3-as rács esetén (m = 2, n = 3) 3 lehetséges út van.\n * Bemenet: Két egész szám, m és n, amelyek a rács sorainak és oszlopainak számát jelölik.\n * Kimenet: Visszaadja az egyedi utak számát a (1,1) és (m,n) pontok között.\n */\n\n function countAntPaths($m, $n): int "
    },
    "prompt_bertscore": {
      "sq": "0.9879514783471858",
      "hy": "0.9772955542958071",
      "bn": "0.988226382794538",
      "bg": "0.9897546449462205",
      "zh": "0.9781077539238587",
      "fr": "0.9892946169837437",
      "de": "0.991608065031657",
      "ha": "0.9711811152764102",
      "hi": "0.9855740713165791",
      "hu": "0.965817101836563"
    },
    "canonical_solution": " {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}",
    "instruction": {
      "en": "Write a PHP function `function countAntPaths($m, $n): int` to solve the following problem:\nCounts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nOutput: Returns the count of unique paths from (1,1) to (m,n).",
      "sq": "Shkruani një funksion PHP `function countAntPaths($m, $n): int` për të zgjidhur problemin e mëposhtëm:\nNumëron numrin e shtigjeve unike që një milingonë mund të ndjekë për të lëvizur nga këndi i poshtëm-majtë në këndin e sipërm-djathtë të një rrjeti.\nRrjeti përcaktohet nga m rreshta dhe n kolona. Milingona fillon në (1,1) dhe mund të lëvizë vetëm djathtas ose lart për shkak të një dëmtimi.\n- Për një rrjet 1x1 (m = 1, n = 1), ekziston vetëm 1 shteg.\n- Për një rrjet 2x3 (m = 2, n = 3), ka 3 shtigje të mundshme.\nHyrja: Dy numra të plotë, m dhe n, që përfaqësojnë numrin e rreshtave dhe kolonave të rrjetit.\nDalja: Kthen numrin e shtigjeve unike nga (1,1) në (m,n).",
      "hy": "Գրեք PHP ֆունկցիա `function countAntPaths($m, $n): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է եզակի ուղիների քանակը, որոնք մրջյունը կարող է անցնել ցանցի ներքևի ձախ անկյունից դեպի վերևի աջ անկյուն:\nՑանցը սահմանվում է m տողերով և n սյունակներով: Մրջյունը սկսում է (1,1) կետից և կարող է շարժվել միայն աջ կամ վերև վնասվածքի պատճառով:\n- 1x1 ցանցի համար (m = 1, n = 1), կա միայն 1 ուղի:\n- 2x3 ցանցի համար (m = 2, n = 3), կա 3 հնարավոր ուղի:\nՄուտք: Երկու ամբողջ թիվ՝ m և n, որոնք ներկայացնում են ցանցի տողերի և սյունակների քանակը:\nԵլք: Վերադարձնում է եզակի ուղիների քանակը (1,1) կետից (m,n) կետ:",
      "bn": "PHP ফাংশন `function countAntPaths($m, $n): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি গ্রিডের নিচের-বাম থেকে উপরের-ডান কোণে যাওয়ার জন্য একটি পিঁপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে।\nগ্রিডটি m সারি এবং n কলাম দ্বারা সংজ্ঞায়িত। পিঁপড়ে (1,1) এ শুরু করে এবং শুধুমাত্র ডান বা উপরে যেতে পারে একটি আঘাতের কারণে।\n- একটি 1x1 গ্রিডের জন্য (m = 1, n = 1), শুধুমাত্র 1টি পথ রয়েছে।\n- একটি 2x3 গ্রিডের জন্য (m = 2, n = 3), 3টি সম্ভাব্য পথ রয়েছে।\nইনপুট: দুটি পূর্ণসংখ্যা, m এবং n, যা গ্রিডের সারি এবং কলামের সংখ্যা উপস্থাপন করে।\nআউটপুট: (1,1) থেকে (m,n) পর্যন্ত অনন্য পথের সংখ্যা ফেরত দেয়।",
      "bg": "Напишете PHP функция `function countAntPaths($m, $n): int`, за да решите следния проблем:\nБрои броя на уникалните пътища, които мравка може да поеме, за да се премести от долния ляв до горния десен ъгъл на мрежа.\nМрежата е дефинирана от m реда и n колони. Мравката започва от (1,1) и може да се движи само надясно или нагоре поради нараняване.\n- За мрежа 1x1 (m = 1, n = 1), има само 1 път.\n- За мрежа 2x3 (m = 2, n = 3), има 3 възможни пътища.\nВход: Две цели числа, m и n, представляващи броя на редовете и колоните на мрежата.\nИзход: Връща броя на уникалните пътища от (1,1) до (m,n).",
      "zh": "编写一个 PHP 函数 `function countAntPaths($m, $n): int` 来解决以下问题：\n计算蚂蚁从网格的左下角移动到右上角的唯一路径的数量。\n网格由 m 行和 n 列定义。蚂蚁从 (1,1) 开始，由于受伤只能向右或向上移动。\n- 对于 1x1 网格 (m = 1, n = 1)，只有 1 条路径。\n- 对于 2x3 网格 (m = 2, n = 3)，有 3 条可能的路径。\n输入：两个整数，m 和 n，表示网格的行数和列数。\n输出：返回从 (1,1) 到 (m,n) 的唯一路径的数量。",
      "fr": "Écrire une fonction PHP `function countAntPaths($m, $n): int` pour résoudre le problème suivant :\nCompte le nombre de chemins uniques qu'une fourmi peut emprunter pour se déplacer du coin inférieur gauche au coin supérieur droit d'une grille.\nLa grille est définie par m lignes et n colonnes. La fourmi commence à (1,1) et ne peut se déplacer que vers la droite ou vers le haut en raison d'une blessure.\n- Pour une grille 1x1 (m = 1, n = 1), il n'y a qu'un seul chemin.\n- Pour une grille 2x3 (m = 2, n = 3), il y a 3 chemins possibles.\nEntrée : Deux entiers, m et n, représentant le nombre de lignes et de colonnes de la grille.\nSortie : Renvoie le nombre de chemins uniques de (1,1) à (m,n).",
      "de": "Schreiben Sie eine PHP-Funktion `function countAntPaths($m, $n): int`, um das folgende Problem zu lösen:\nZählt die Anzahl der einzigartigen Wege, die eine Ameise nehmen kann, um sich von der unteren linken zur oberen rechten Ecke eines Gitters zu bewegen.\nDas Gitter wird durch m Zeilen und n Spalten definiert. Die Ameise startet bei (1,1) und kann aufgrund einer Verletzung nur nach rechts oder oben gehen.\n- Für ein 1x1 Gitter (m = 1, n = 1) gibt es nur 1 Weg.\n- Für ein 2x3 Gitter (m = 2, n = 3) gibt es 3 mögliche Wege.\nEingabe: Zwei ganze Zahlen, m und n, die die Anzahl der Zeilen und Spalten des Gitters darstellen.\nAusgabe: Gibt die Anzahl der einzigartigen Wege von (1,1) nach (m,n) zurück.",
      "ha": "Rubuta aikin PHP `function countAntPaths($m, $n): int` don warware matsalar mai zuwa:\nYana ƙidaya adadin hanyoyin musamman da tururuwa za ta iya ɗauka don motsawa daga ƙasan-hagu zuwa saman-dama na grid.\nGrid ɗin an ayyana shi da m layuka da n ginshiƙai. Tururuwa tana farawa a (1,1) kuma tana iya motsawa dama ko sama kawai saboda rauni.\n- Don grid 1x1 (m = 1, n = 1), akwai hanya 1 kawai.\n- Don grid 2x3 (m = 2, n = 3), akwai hanyoyi 3 masu yiwuwa.\nShigar: Lambobi guda biyu, m da n, suna wakiltar adadin layuka da ginshiƙai na grid.\nFitarwa: Yana mayar da ƙididdigar hanyoyin musamman daga (1,1) zuwa (m,n).",
      "hi": "PHP फ़ंक्शन `function countAntPaths($m, $n): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nगिनती करें कि एक चींटी कितने अनोखे रास्ते ले सकती है ताकि वह ग्रिड के नीचे-बाएँ कोने से ऊपर-दाएँ कोने तक जा सके।\nग्रिड को m पंक्तियों और n स्तंभों द्वारा परिभाषित किया गया है। चींटी (1,1) पर शुरू होती है और केवल दाएँ या ऊपर की ओर जा सकती है चोट के कारण।\n- 1x1 ग्रिड (m = 1, n = 1) के लिए, केवल 1 रास्ता है।\n- 2x3 ग्रिड (m = 2, n = 3) के लिए, 3 संभावित रास्ते हैं।\nइनपुट: दो पूर्णांक, m और n, जो ग्रिड की पंक्तियों और स्तंभों की संख्या का प्रतिनिधित्व करते हैं।\nआउटपुट: (1,1) से (m,n) तक अनोखे रास्तों की गिनती लौटाता है।",
      "hu": "Írj egy PHP függvényt `function countAntPaths($m, $n): int` a következő probléma megoldására:\nMegszámolja, hogy hány egyedi útvonalat tehet meg egy hangya, hogy eljusson a rács bal alsó sarkából a jobb felső sarkába.\nA rácsot m sor és n oszlop határozza meg. A hangya a (1,1) pontból indul, és csak jobbra vagy felfelé mozoghat egy sérülés miatt.\n- Egy 1x1-es rács esetén (m = 1, n = 1) csak 1 útvonal van.\n- Egy 2x3-as rács esetén (m = 2, n = 3) 3 lehetséges útvonal van.\nBemenet: Két egész szám, m és n, amelyek a rács sorainak és oszlopainak számát jelölik.\nKimenet: Visszaadja az egyedi útvonalak számát (1,1)-től (m,n)-ig."
    },
    "instruction_bertscore": {
      "sq": "0.9891456441979675",
      "hy": "0.9705306007785209",
      "bn": "0.9744253452898529",
      "bg": "0.9891055208609985",
      "zh": "0.9819595942728874",
      "fr": "0.9881131634773481",
      "de": "0.9889392672320723",
      "ha": "0.9780660415438415",
      "hi": "0.9731751656716194",
      "hu": "0.9813400661144395"
    },
    "level": "middle",
    "test": "function main(){\n    assert(countAntPaths(1, 1) === 1); // One path in a 1x1 grid\n    assert(countAntPaths(2, 3) === 3); // Three paths in a 2x3 grid\n    assert(countAntPaths(3, 3) === 6); // Six paths in a 3x3 grid    \n    assert(countAntPaths(7, 13) === 18564);    \n}\n\n\nmain();\n?>",
    "entry_point": "countAntPaths",
    "signature": "function countAntPaths($m, $n): int",
    "docstring": {
      "en": "Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nOutput: Returns the count of unique paths from (1,1) to (m,n).",
      "sq": "Numëron numrin e shtigjeve unike që një milingonë mund të ndjekë për të lëvizur nga këndi i poshtëm-majtë në këndin e sipërm-djathtë të një rrjeti.\nRrjeti përcaktohet nga m rreshta dhe n kolona. Milingona fillon në (1,1) dhe mund të lëvizë vetëm djathtas ose lart për shkak të një dëmtimi.\n- Për një rrjet 1x1 (m = 1, n = 1), ekziston vetëm 1 shteg.\n- Për një rrjet 2x3 (m = 2, n = 3), ka 3 shtigje të mundshme.\nInput: Dy numra të plotë, m dhe n, që përfaqësojnë numrin e rreshtave dhe kolonave të rrjetit.\nOutput: Kthen numrin e shtigjeve unike nga (1,1) në (m,n).",
      "hy": "Հաշվում է այն եզակի ուղիների քանակը, որոնցով մրջյունը կարող է շարժվել ցանցի ներքևի ձախ անկյունից դեպի վերևի աջ անկյուն:\nՑանցը սահմանվում է m տողերով և n սյունակներով: Մրջյունը սկսում է (1,1) կետից և կարող է շարժվել միայն աջ կամ վերև վնասվածքի պատճառով:\n- 1x1 ցանցի համար (m = 1, n = 1), կա միայն 1 ուղի:\n- 2x3 ցանցի համար (m = 2, n = 3), կան 3 հնարավոր ուղիներ:\nՄուտք: Երկու ամբողջ թիվ, m և n, որոնք ներկայացնում են ցանցի տողերի և սյունակների քանակը:\nԵլք: Վերադարձնում է եզակի ուղիների քանակը (1,1)-ից (m,n):",
      "bn": "একটি পিপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে যা একটি গ্রিডের নিচের-বাম দিক থেকে উপরের-ডান কোণে যেতে পারে।\nগ্রিডের নিচের-বাম কোণ থেকে উপরের-ডান কোণে যাওয়ার জন্য একটি পিঁপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে।\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\nগ্রিডটি m সারি এবং n কলাম দ্বারা সংজ্ঞায়িত করা হয়। পিঁপড়ে (1,1) থেকে শুরু করে এবং শুধুমাত্র ডান বা উপরে যেতে পারে একটি আঘাতের কারণে।\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- একটি 1x1 গ্রিডের জন্য (m = 1, n = 1), শুধুমাত্র 1টি পথ রয়েছে।\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\n- একটি 2x3 গ্রিডের জন্য (m = 2, n = 3), 3টি সম্ভাব্য পথ রয়েছে।\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nইনপুট: দুটি পূর্ণসংখ্যা, m এবং n, যা গ্রিডের সারি এবং কলামের সংখ্যা উপস্থাপন করে।\nOutput: Returns the count of unique paths from (1,1) to (m,n).\nআউটপুট: (1,1) থেকে (m,n) পর্যন্ত অনন্য পথের সংখ্যা ফেরত দেয়।",
      "bg": "Преброява броя на уникалните пътища, които една мравка може да измине, за да се премести от долния ляв до горния десен ъгъл на мрежа. \nМрежата е дефинирана от m реда и n колони. Мравката започва от (1,1) и може да се движи само надясно или нагоре поради нараняване.\n- За мрежа 1x1 (m = 1, n = 1), има само 1 път.\n- За мрежа 2x3 (m = 2, n = 3), има 3 възможни пътища.\nВход: Две цели числа, m и n, представляващи броя на редовете и колоните на мрежата.\nИзход: Връща броя на уникалните пътища от (1,1) до (m,n).",
      "zh": "计算蚂蚁从网格的左下角移动到右上角的唯一路径数量。\n网格由 m 行和 n 列定义。蚂蚁从 (1,1) 开始，由于受伤只能向右或向上移动。  \n- 对于 1x1 网格 (m = 1, n = 1)，只有 1 条路径。  \n- 对于 2x3 网格 (m = 2, n = 3)，有 3 条可能的路径。  \n输入：两个整数，m 和 n，表示网格的行数和列数。  \n输出：返回从 (1,1) 到 (m,n) 的唯一路径数量。",
      "fr": "Compte le nombre de chemins uniques qu'une fourmi peut emprunter pour se déplacer du coin inférieur gauche au coin supérieur droit d'une grille.\nLa grille est définie par m lignes et n colonnes. La fourmi commence à (1,1) et ne peut se déplacer que vers la droite ou vers le haut en raison d'une blessure.\n- Pour une grille de 1x1 (m = 1, n = 1), il n'y a qu'un seul chemin.\n- Pour une grille de 2x3 (m = 2, n = 3), il y a 3 chemins possibles.\nEntrée : Deux entiers, m et n, représentant le nombre de lignes et de colonnes de la grille.\nSortie : Retourne le nombre de chemins uniques de (1,1) à (m,n).",
      "de": "Zählt die Anzahl der einzigartigen Pfade, die eine Ameise nehmen kann, um sich von der unteren linken zur oberen rechten Ecke eines Gitters zu bewegen. Das Gitter wird durch m Zeilen und n Spalten definiert. Die Ameise startet bei (1,1) und kann aufgrund einer Verletzung nur nach rechts oder oben gehen.\n- Für ein 1x1 Gitter (m = 1, n = 1) gibt es nur 1 Pfad.\n- Für ein 2x3 Gitter (m = 2, n = 3) gibt es 3 mögliche Pfade.\nEingabe: Zwei ganze Zahlen, m und n, die die Anzahl der Zeilen und Spalten des Gitters darstellen.\nAusgabe: Gibt die Anzahl der einzigartigen Pfade von (1,1) zu (m,n) zurück.",
      "ha": "Yana ƙididdige adadin hanyoyin musamman da tururuwa za ta iya bi don motsawa daga ƙasan hagu zuwa saman dama na grid.\nGrid ɗin an ayyana shi da m layuka da n ginshiƙai. Tururuwa tana farawa a (1,1) kuma tana iya motsawa dama ko sama kawai saboda rauni.\n- Don grid 1x1 (m = 1, n = 1), akwai hanya 1 kawai.\n- Don grid 2x3 (m = 2, n = 3), akwai hanyoyi 3 masu yiwuwa.\nShigarwa: Lambobi biyu, m da n, suna wakiltar adadin layuka da ginshiƙai na grid.\nFitarwa: Yana dawo da ƙididdigar hanyoyin musamman daga (1,1) zuwa (m,n).",
      "hi": "नीचे-बाएँ से ऊपर-दाएँ कोने तक एक चींटी कितने अनोखे रास्ते ले सकती है, इसकी गिनती करता है।\nग्रिड m पंक्तियों और n स्तंभों द्वारा परिभाषित है। चींटी (1,1) से शुरू होती है और चोट के कारण केवल दाएँ या ऊपर की ओर बढ़ सकती है।\n- 1x1 ग्रिड (m = 1, n = 1) के लिए, केवल 1 रास्ता है।\n- 2x3 ग्रिड (m = 2, n = 3) के लिए, 3 संभावित रास्ते हैं।\nइनपुट: दो पूर्णांक, m और n, जो ग्रिड की पंक्तियों और स्तंभों की संख्या का प्रतिनिधित्व करते हैं।\nआउटपुट: (1,1) से (m,n) तक अनोखे रास्तों की गिनती लौटाता है।",
      "hu": "Számolja meg, hány egyedi útvonalat tehet meg egy hangya, hogy eljusson a rács bal alsó sarkából a jobb felső sarkába.\nA rácsot m sor és n oszlop határozza meg. A hangya az (1,1) pontból indul, és csak jobbra vagy felfelé mozoghat egy sérülés miatt.\n- Egy 1x1-es rács esetén (m = 1, n = 1) csak 1 útvonal létezik.\n- Egy 2x3-as rács esetén (m = 2, n = 3) 3 lehetséges útvonal van.\nBemenet: Két egész szám, m és n, amelyek a rács sorainak és oszlopainak számát jelölik.\nKimenet: Visszaadja az egyedi útvonalak számát az (1,1) és (m,n) között."
    },
    "docstring_bertscore": {
      "sq": "0.9872969912416758",
      "hy": "0.9789269056152466",
      "bn": "1",
      "bg": "0.9890661920455536",
      "zh": "0.9741508381032628",
      "fr": "0.9927027170615402",
      "de": "0.992302874104517",
      "ha": "0.9647460868220229",
      "hi": "0.9797164613798603",
      "hu": "0.9705741008319675"
    }
  },
  {
    "task_id": "PHP/35",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines if there exists at least one permutation of adding '+' or '-' \n * before each number in a sequence such that the sum of the sequence is \n * divisible by a given number k.\n * \n * The function takes two arguments: \n * - $numbers: An array of positive integers representing the sequence.\n * - $k: An integer representing the divisor.\n * \n * The function returns \"YES\" if at least one permutation of the sequence \n * can be divided by $k, otherwise returns \"NO\".\n * \n * Example:\n * Given $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\n * Given $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "sq": "<?php\n\n/**\n * Përcakton nëse ekziston të paktën një permutacion i shtimit të '+' ose '-' \n * para çdo numri në një sekuencë në mënyrë që shuma e sekuencës të jetë \n * e pjesëtueshme me një numër të dhënë k.\n * \n * Funksioni merr dy argumente: \n * - $numbers: Një varg i numrave të plotë pozitivë që përfaqëson sekuencën.\n * - $k: Një numër i plotë që përfaqëson pjesëtuesin.\n * \n * Funksioni kthen \"YES\" nëse të paktën një permutacion i sekuencës \n * mund të pjesëtohet me $k, përndryshe kthen \"NO\".\n * \n * Shembull:\n * Dhënë $numbers = [1, 2, 4] dhe $k = 2, funksioni do të kthejë \"NO\".\n * Dhënë $numbers = [1, 2, 4] dhe $k = 3, funksioni do të kthejë \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hy": "<?php\n\n/**\n * Սահմանում է, արդյոք գոյություն ունի գոնե մեկ փոփոխություն '+' կամ '-' \n * ավելացնելու յուրաքանչյուր թվի առջև հաջորդականության մեջ, այնպես որ \n * հաջորդականության գումարը բաժանվի տրված k թվով։\n * \n * Ֆունկցիան ընդունում է երկու արգումենտ՝ \n * - $numbers: Դրական ամբողջ թվերի զանգված, որը ներկայացնում է հաջորդականությունը։\n * - $k: Ամբողջ թիվ, որը ներկայացնում է բաժանարարը։\n * \n * Ֆունկցիան վերադարձնում է \"YES\", եթե գոնե մեկ փոփոխություն հաջորդականության \n * կարող է բաժանվել $k-ով, հակառակ դեպքում վերադարձնում է \"NO\"։\n * \n * Օրինակ:\n * Տրված $numbers = [1, 2, 4] և $k = 2, ֆունկցիան կվերադարձնի \"NO\"։\n * Տրված $numbers = [1, 2, 4] և $k = 3, ֆունկցիան կվերադարձնի \"YES\"։\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "bn": "<?php\n\n/**\n * একটি ক্রমের প্রতিটি সংখ্যার আগে '+' বা '-' যোগ করার অন্তত একটি বিন্যাস \n * বিদ্যমান কিনা তা নির্ধারণ করে যাতে ক্রমের যোগফল একটি প্রদত্ত সংখ্যা k দ্বারা \n * বিভাজ্য হয়।\n * \n * ফাংশনটি দুটি আর্গুমেন্ট নেয়: \n * - $numbers: একটি ধনাত্মক পূর্ণসংখ্যার অ্যারে যা ক্রমকে উপস্থাপন করে।\n * - $k: একটি পূর্ণসংখ্যা যা বিভাজককে উপস্থাপন করে।\n * \n * ফাংশনটি \"YES\" ফেরত দেয় যদি ক্রমের অন্তত একটি বিন্যাস $k দ্বারা বিভাজ্য \n * হতে পারে, অন্যথায় \"NO\" ফেরত দেয়।\n * \n * উদাহরণ:\n * $numbers = [1, 2, 4] এবং $k = 2 দেওয়া হলে, ফাংশনটি \"NO\" ফেরত দেবে।\n * $numbers = [1, 2, 4] এবং $k = 3 দেওয়া হলে, ফাংশনটি \"YES\" ফেরত দেবে।\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "bg": "<?php\n\n/**\n * Определя дали съществува поне една пермутация на добавяне на '+' или '-' \n * преди всяко число в последователност така, че сумата на последователността \n * да е делима на дадено число k.\n * \n * Функцията приема два аргумента: \n * - $numbers: Масив от положителни цели числа, представляващи последователността.\n * - $k: Цяло число, представляващо делителя.\n * \n * Функцията връща \"YES\", ако поне една пермутация на последователността \n * може да бъде разделена на $k, в противен случай връща \"NO\".\n * \n * Пример:\n * Дадено $numbers = [1, 2, 4] и $k = 2, функцията ще върне \"NO\".\n * Дадено $numbers = [1, 2, 4] и $k = 3, функцията ще върне \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "zh": "<?php\n\n/**\n * 确定是否存在至少一种排列方式，在序列中的每个数字前添加 '+' 或 '-'，\n * 使得序列的和可以被给定的数字 k 整除。\n * \n * 该函数接受两个参数：\n * - $numbers: 一个正整数数组，表示序列。\n * - $k: 一个整数，表示除数。\n * \n * 如果序列的至少一种排列可以被 $k 整除，函数返回 \"YES\"，否则返回 \"NO\"。\n * \n * 示例：\n * 给定 $numbers = [1, 2, 4] 和 $k = 2，函数将返回 \"NO\"。\n * 给定 $numbers = [1, 2, 4] 和 $k = 3，函数将返回 \"YES\"。\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "fr": "<?php\n\n/**\n * Détermine s'il existe au moins une permutation d'ajout de '+' ou '-' \n * devant chaque nombre dans une séquence telle que la somme de la séquence \n * soit divisible par un nombre donné k.\n * \n * La fonction prend deux arguments : \n * - $numbers : Un tableau d'entiers positifs représentant la séquence.\n * - $k : Un entier représentant le diviseur.\n * \n * La fonction retourne \"YES\" si au moins une permutation de la séquence \n * peut être divisée par $k, sinon retourne \"NO\".\n * \n * Exemple :\n * Étant donné $numbers = [1, 2, 4] et $k = 2, la fonction retournera \"NO\".\n * Étant donné $numbers = [1, 2, 4] et $k = 3, la fonction retournera \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "de": "<?php\n\n/**\n * Bestimmt, ob es mindestens eine Permutation gibt, bei der '+' oder '-' \n * vor jeder Zahl in einer Sequenz hinzugefügt wird, sodass die Summe der \n * Sequenz durch eine gegebene Zahl k teilbar ist.\n * \n * Die Funktion nimmt zwei Argumente:\n * - $numbers: Ein Array von positiven ganzen Zahlen, das die Sequenz darstellt.\n * - $k: Eine ganze Zahl, die den Divisor darstellt.\n * \n * Die Funktion gibt \"YES\" zurück, wenn mindestens eine Permutation der Sequenz \n * durch $k geteilt werden kann, andernfalls gibt sie \"NO\" zurück.\n * \n * Beispiel:\n * Gegeben $numbers = [1, 2, 4] und $k = 2, wird die Funktion \"NO\" zurückgeben.\n * Gegeben $numbers = [1, 2, 4] und $k = 3, wird die Funktion \"YES\" zurückgeben.\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "ha": "<?php\n\n/**\n * Yana tantance ko akwai aƙalla ɗaya permutation na ƙara '+' ko '-' \n * kafin kowace lamba a jerin lambobi domin jimillar jerin ta rabu \n * da wani lamba k.\n * \n * Aiki yana ɗaukar hujjoji guda biyu: \n * - $numbers: Wani tsari na lambobi masu kyau da ke wakiltar jerin.\n * - $k: Wani lamba da ke wakiltar mai raba.\n * \n * Aiki yana dawowa \"YES\" idan aƙalla ɗaya permutation na jerin \n * za a iya raba shi da $k, in ba haka ba yana dawowa \"NO\".\n * \n * Misali:\n * Idan aka ba $numbers = [1, 2, 4] da $k = 2, aikin zai dawo \"NO\".\n * Idan aka ba $numbers = [1, 2, 4] da $k = 3, aikin zai dawo \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hi": "<?php\n\n/**\n * यह निर्धारित करता है कि क्या अनुक्रम में प्रत्येक संख्या से पहले '+' या '-' जोड़ने के कम से कम एक क्रमपरिवर्तन मौजूद है \n * ताकि अनुक्रम का योग एक दिए गए संख्या k से विभाज्य हो।\n * \n * यह फ़ंक्शन दो तर्क लेता है: \n * - $numbers: अनुक्रम का प्रतिनिधित्व करने वाले धनात्मक पूर्णांकों की एक सरणी।\n * - $k: भाजक का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * \n * यदि अनुक्रम का कम से कम एक क्रमपरिवर्तन $k से विभाजित किया जा सकता है, तो फ़ंक्शन \"YES\" लौटाता है, अन्यथा \"NO\" लौटाता है।\n * \n * उदाहरण:\n * दिए गए $numbers = [1, 2, 4] और $k = 2, तो फ़ंक्शन \"NO\" लौटाएगा।\n * दिए गए $numbers = [1, 2, 4] और $k = 3, तो फ़ंक्शन \"YES\" लौटाएगा।\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hu": "<?php\n\n/**\n * Meghatározza, hogy létezik-e legalább egy olyan permutáció, ahol '+' vagy '-' \n * jelet adunk minden szám elé egy sorozatban úgy, hogy a sorozat összege \n * osztható legyen egy adott k számmal.\n * \n * A függvény két argumentumot vesz fel: \n * - $numbers: Egy pozitív egész számokat tartalmazó tömb, amely a sorozatot képviseli.\n * - $k: Egy egész szám, amely az osztót képviseli.\n * \n * A függvény \"YES\"-t ad vissza, ha a sorozat legalább egy permutációja \n * osztható $k-val, különben \"NO\"-t ad vissza.\n * \n * Példa:\n * Ha $numbers = [1, 2, 4] és $k = 2, a függvény \"NO\"-t ad vissza.\n * Ha $numbers = [1, 2, 4] és $k = 3, a függvény \"YES\"-t ad vissza.\n */\n\n function canBeDivided(array $numbers, int $k): string "
    },
    "prompt_bertscore": {
      "sq": "0.9961066459013351",
      "hy": "0.9780662401742225",
      "bn": "0.9837154868412358",
      "bg": "0.994677103049027",
      "zh": "0.9466560234996515",
      "fr": "0.992507463396983",
      "de": "0.9865622574622277",
      "ha": "0.9732518369986989",
      "hi": "0.9830161092696119",
      "hu": "0.9623758304851335"
    },
    "canonical_solution": " {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}",
    "instruction": {
      "en": "Write a PHP function `function canBeDivided(array $numbers, int $k): string` to solve the following problem:\nDetermines if there exists at least one permutation of adding '+' or '-'\nbefore each number in a sequence such that the sum of the sequence is\ndivisible by a given number k.\n\nThe function takes two arguments:\n- $numbers: An array of positive integers representing the sequence.\n- $k: An integer representing the divisor.\n\nThe function returns \"YES\" if at least one permutation of the sequence\ncan be divided by $k, otherwise returns \"NO\".\n\nExample:\nGiven $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\nGiven $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".",
      "sq": "Shkruani një funksion PHP `function canBeDivided(array $numbers, int $k): string` për të zgjidhur problemin e mëposhtëm:\nPërcakton nëse ekziston të paktën një permutacion i shtimit të '+' ose '-'\npara çdo numri në një sekuencë të tillë që shuma e sekuencës është\ne pjestueshme me një numër të dhënë k.\n\nFunksioni merr dy argumente:\n- $numbers: Një varg me numra të plotë pozitivë që përfaqëson sekuencën.\n- $k: Një numër i plotë që përfaqëson pjestuesin.\n\nFunksioni kthen \"YES\" nëse të paktën një permutacion i sekuencës\nmund të pjestohen me $k, përndryshe kthen \"NO\".\n\nShembull:\nDuke pasur $numbers = [1, 2, 4] dhe $k = 2, funksioni do të kthejë \"NO\".\nDuke pasur $numbers = [1, 2, 4] dhe $k = 3, funksioni do të kthejë \"YES\".",
      "hy": "Գրեք PHP ֆունկցիա `function canBeDivided(array $numbers, int $k): string`՝ հետևյալ խնդիրը լուծելու համար:\nՈրոշում է, արդյոք գոյություն ունի '+' կամ '-' նշանների ավելացման գոնե մեկ փոխարկում\nհերթականության յուրաքանչյուր թվից առաջ, այնպես, որ հաջորդականության գումարը\nբաժանվի տրված k թվով:\n\nՖունկցիան ընդունում է երկու արգումենտ.\n- $numbers: Դրական ամբողջ թվերի զանգված, որը ներկայացնում է հաջորդականությունը:\n- $k: Ամբողջ թիվ, որը ներկայացնում է բաժանարարը:\n\nՖունկցիան վերադարձնում է \"YES\", եթե հաջորդականության գոնե մեկ փոխարկում\nկարող է բաժանվել $k-ով, հակառակ դեպքում վերադարձնում է \"NO\":\n\nՕրինակ:\nԵթե տրված է $numbers = [1, 2, 4] և $k = 2, ֆունկցիան կվերադարձնի \"NO\":\nԵթե տրված է $numbers = [1, 2, 4] և $k = 3, ֆունկցիան կվերադարձնի \"YES\":",
      "bn": "PHP ফাংশন `function canBeDivided(array $numbers, int $k): string` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি ক্রমের প্রতিটি সংখ্যার আগে '+' বা '-' যোগ করার অন্তত একটি বিন্যাস আছে কিনা তা নির্ধারণ করে যাতে ক্রমের যোগফল একটি প্রদত্ত সংখ্যা k দ্বারা বিভাজ্য হয়।\n\nফাংশনটি দুটি আর্গুমেন্ট নেয়:\n- $numbers: একটি ধনাত্মক পূর্ণসংখ্যার অ্যারে যা ক্রমকে উপস্থাপন করে।\n- $k: একটি পূর্ণসংখ্যা যা বিভাজককে উপস্থাপন করে।\n\nফাংশনটি \"YES\" ফেরত দেয় যদি ক্রমের অন্তত একটি বিন্যাস $k দ্বারা বিভাজ্য হতে পারে, অন্যথায় \"NO\" ফেরত দেয়।\n\nউদাহরণ:\nযদি $numbers = [1, 2, 4] এবং $k = 2 হয়, ফাংশনটি \"NO\" ফেরত দেবে।\nযদি $numbers = [1, 2, 4] এবং $k = 3 হয়, ফাংশনটি \"YES\" ফেরত দেবে।",
      "bg": "Напишете PHP функция `function canBeDivided(array $numbers, int $k): string`, за да решите следния проблем:\nОпределя дали съществува поне една пермутация на добавяне на '+' или '-'\nпреди всяко число в последователността, така че сумата на последователността да е\nделима на дадено число k.\n\nФункцията приема два аргумента:\n- $numbers: Масив от положителни цели числа, представляващи последователността.\n- $k: Цяло число, представляващо делителя.\n\nФункцията връща \"YES\", ако поне една пермутация на последователността\nможе да бъде разделена на $k, в противен случай връща \"NO\".\n\nПример:\nДадено $numbers = [1, 2, 4] и $k = 2, функцията ще върне \"NO\".\nДадено $numbers = [1, 2, 4] и $k = 3, функцията ще върне \"YES\".",
      "zh": "编写一个 PHP 函数 `function canBeDivided(array $numbers, int $k): string` 来解决以下问题：\n确定是否存在至少一种排列方式，在序列中的每个数字前加上 '+' 或 '-'，使得序列的和可以被给定的数字 k 整除。\n\n该函数接受两个参数：\n- $numbers: 一个正整数数组，表示序列。\n- $k: 一个整数，表示除数。\n\n如果序列的至少一种排列方式可以被 $k 整除，函数返回 \"YES\"，否则返回 \"NO\"。\n\n示例：\n给定 $numbers = [1, 2, 4] 和 $k = 2，函数将返回 \"NO\"。\n给定 $numbers = [1, 2, 4] 和 $k = 3，函数将返回 \"YES\"。",
      "fr": "Écrire une fonction PHP `function canBeDivided(array $numbers, int $k): string` pour résoudre le problème suivant :\nDétermine s'il existe au moins une permutation d'ajout de '+' ou '-'\navant chaque nombre dans une séquence telle que la somme de la séquence soit\ndivisible par un nombre donné k.\n\nLa fonction prend deux arguments :\n- $numbers : Un tableau d'entiers positifs représentant la séquence.\n- $k : Un entier représentant le diviseur.\n\nLa fonction retourne \"YES\" si au moins une permutation de la séquence\npeut être divisée par $k, sinon retourne \"NO\".\n\nExemple :\nÉtant donné $numbers = [1, 2, 4] et $k = 2, la fonction retournera \"NO\".\nÉtant donné $numbers = [1, 2, 4] et $k = 3, la fonction retournera \"YES\".",
      "de": "Schreiben Sie eine PHP-Funktion `function canBeDivided(array $numbers, int $k): string`, um das folgende Problem zu lösen:\nBestimmt, ob es mindestens eine Permutation gibt, bei der '+' oder '-' vor jeder Zahl in einer Sequenz hinzugefügt wird, sodass die Summe der Sequenz durch eine gegebene Zahl k teilbar ist.\n\nDie Funktion nimmt zwei Argumente:\n- $numbers: Ein Array von positiven ganzen Zahlen, das die Sequenz darstellt.\n- $k: Eine ganze Zahl, die den Divisor darstellt.\n\nDie Funktion gibt \"YES\" zurück, wenn mindestens eine Permutation der Sequenz durch $k teilbar ist, andernfalls gibt sie \"NO\" zurück.\n\nBeispiel:\nGegeben $numbers = [1, 2, 4] und $k = 2, wird die Funktion \"NO\" zurückgeben.\nGegeben $numbers = [1, 2, 4] und $k = 3, wird die Funktion \"YES\" zurückgeben.",
      "ha": "Rubuta aikin PHP `function canBeDivided(array $numbers, int $k): string` don warware matsalar mai zuwa:\nYana tantance idan akwai aƙalla wata permutation na ƙara '+' ko '-'\nkafin kowanne lamba a cikin jerin don haka adadin jerin\nyana iya rabuwa da wata lamba k.\n\nAikin yana ɗaukar hujjoji guda biyu:\n- $numbers: Wani tsararren lambobi masu kyau da ke wakiltar jerin.\n- $k: Wata lamba da ke wakiltar mai raba.\n\nAikin yana dawowa \"YES\" idan aƙalla wata permutation na jerin\nza a iya raba shi da $k, in ba haka ba yana dawowa \"NO\".\n\nMisali:\nAn ba da $numbers = [1, 2, 4] da $k = 2, aikin zai dawo \"NO\".\nAn ba da $numbers = [1, 2, 4] da $k = 3, aikin zai dawo \"YES\".",
      "hi": "PHP फ़ंक्शन `function canBeDivided(array $numbers, int $k): string` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nयह निर्धारित करता है कि क्या अनुक्रम में प्रत्येक संख्या से पहले '+' या '-' जोड़ने के कम से कम एक क्रमचय का अस्तित्व है ताकि अनुक्रम का योग\nदिए गए संख्या k से विभाज्य हो।\n\nफ़ंक्शन दो तर्क लेता है:\n- $numbers: अनुक्रम का प्रतिनिधित्व करने वाले धनात्मक पूर्णांकों की एक सरणी।\n- $k: भाजक का प्रतिनिधित्व करने वाला एक पूर्णांक।\n\nयदि अनुक्रम का कम से कम एक क्रमचय $k से विभाजित किया जा सकता है, तो फ़ंक्शन \"YES\" लौटाता है, अन्यथा \"NO\" लौटाता है।\n\nउदाहरण:\nयदि $numbers = [1, 2, 4] और $k = 2, तो फ़ंक्शन \"NO\" लौटाएगा।\nयदि $numbers = [1, 2, 4] और $k = 3, तो फ़ंक्शन \"YES\" लौटाएगा।",
      "hu": "Írj egy PHP függvényt `function canBeDivided(array $numbers, int $k): string` a következő probléma megoldására:\nMegállapítja, hogy létezik-e legalább egy permutáció, amelyben '+' vagy '-'\njelet adunk minden szám elé a sorozatban úgy, hogy a sorozat összege\nosztható legyen egy adott k számmal.\n\nA függvény két argumentumot fogad:\n- $numbers: Pozitív egész számokat tartalmazó tömb, amely a sorozatot képviseli.\n- $k: Egy egész szám, amely az osztót képviseli.\n\nA függvény \"YES\"-t ad vissza, ha a sorozat legalább egy permutációja\nosztható k-val, különben \"NO\"-t ad vissza.\n\nPélda:\nAdott $numbers = [1, 2, 4] és $k = 2, a függvény \"NO\"-t ad vissza.\nAdott $numbers = [1, 2, 4] és $k = 3, a függvény \"YES\"-t ad vissza."
    },
    "instruction_bertscore": {
      "sq": "0.9914819347396998",
      "hy": "0.9642358053731442",
      "bn": "0.9620590150273829",
      "bg": "0.9907120433828086",
      "zh": "0.9447958499812598",
      "fr": "0.9920301545913561",
      "de": "0.9787131793252531",
      "ha": "0.9589135043133145",
      "hi": "0.9651240804371323",
      "hu": "0.9599863070012838"
    },
    "level": "middle",
    "test": "function main(){\n    assert(canBeDivided([1, 2, 4], 2) === \"NO\");\n    assert(canBeDivided([1, 2, 4], 3) === \"YES\");\n    assert(canBeDivided([1, 2, 3], 6) === \"YES\");\n    assert(canBeDivided([5, 10, 15], 7) === \"YES\");\n    assert(canBeDivided([10, 20, 30], 10) === \"YES\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "canBeDivided",
    "signature": "function canBeDivided(array $numbers, int $k): string",
    "docstring": {
      "en": "Determines if there exists at least one permutation of adding '+' or '-'\nbefore each number in a sequence such that the sum of the sequence is\ndivisible by a given number k.\n\nThe function takes two arguments:\n- $numbers: An array of positive integers representing the sequence.\n- $k: An integer representing the divisor.\n\nThe function returns \"YES\" if at least one permutation of the sequence\ncan be divided by $k, otherwise returns \"NO\".\n\nExample:\nGiven $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\nGiven $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".",
      "sq": "Përcakton nëse ekziston të paktën një permutacion i shtimit të '+' ose '-'\npara çdo numri në një sekuencë të tillë që shuma e sekuencës të jetë\ne pjesëtueshme nga një numër i dhënë k.\n\nFunksioni merr dy argumente:\n- $numbers: Një varg i numrave të plotë pozitivë që përfaqësojnë sekuencën.\n- $k: Një numër i plotë që përfaqëson pjesëtuesin.\n\nFunksioni kthen \"YES\" nëse të paktën një permutacion i sekuencës\nmund të pjesëtohet nga $k, përndryshe kthen \"NO\".\n\nShembull:\nDuke pasur $numbers = [1, 2, 4] dhe $k = 2, funksioni do të kthejë \"NO\".\nDuke pasur $numbers = [1, 2, 4] dhe $k = 3, funksioni do të kthejë \"YES\".",
      "hy": "Որոշում է, արդյոք գոյություն ունի գոնե մեկ փոխարկում, երբ '+' կամ '-' նշան է ավելացվում հաջորդականության յուրաքանչյուր թվի առջև, այնպես, որ հաջորդականության գումարը բաժանվի տրված k թվի վրա։\n\nՖունկցիան ընդունում է երկու արգումենտ.\n- $numbers: Դրական ամբողջ թվերի զանգված, որը ներկայացնում է հաջորդականությունը։\n- $k: Ամբողջ թիվ, որը ներկայացնում է բաժանարարը։\n\nՖունկցիան վերադարձնում է \"YES\", եթե հաջորդականության գոնե մեկ փոխարկում կարող է բաժանվել $k-ի վրա, հակառակ դեպքում վերադարձնում է \"NO\"։\n\nՕրինակ:\nԵթե տրված է $numbers = [1, 2, 4] և $k = 2, ապա ֆունկցիան կվերադարձնի \"NO\"։\nԵթե տրված է $numbers = [1, 2, 4] և $k = 3, ապա ֆունկցիան կվերադարձնի \"YES\"։",
      "bn": "নির্ধারণ করে যে একটি ক্রমের প্রতিটি সংখ্যার আগে '+' বা '-' যোগ করার অন্তত একটি বিন্যাস আছে কিনা যাতে ক্রমের যোগফল একটি প্রদত্ত সংখ্যা k দ্বারা বিভাজ্য হয়।\n\nফাংশনটি দুটি আর্গুমেন্ট গ্রহণ করে:\n- $numbers: একটি ধনাত্মক পূর্ণসংখ্যার অ্যারে যা ক্রমকে উপস্থাপন করে।\n- $k: একটি পূর্ণসংখ্যা যা বিভাজককে উপস্থাপন করে।\n\nফাংশনটি \"YES\" ফেরত দেয় যদি ক্রমের অন্তত একটি বিন্যাস $k দ্বারা বিভাজ্য হতে পারে, অন্যথায় \"NO\" ফেরত দেয়।\n\nউদাহরণ:\nযদি $numbers = [1, 2, 4] এবং $k = 2 হয়, তাহলে ফাংশনটি \"NO\" ফেরত দেবে।\nযদি $numbers = [1, 2, 4] এবং $k = 3 হয়, তাহলে ফাংশনটি \"YES\" ফেরত দেবে।",
      "bg": "Определя дали съществува поне една пермутация на добавяне на '+' или '-'\nпреди всяко число в последователността така, че сумата на последователността да е\nделима на дадено число k.\n\nФункцията приема два аргумента:\n- $numbers: Масив от положителни цели числа, представляващи последователността.\n- $k: Цяло число, представляващо делителя.\n\nФункцията връща \"YES\", ако поне една пермутация на последователността\nможе да бъде разделена на $k, в противен случай връща \"NO\".\n\nПример:\nДадено $numbers = [1, 2, 4] и $k = 2, функцията ще върне \"NO\".\nДадено $numbers = [1, 2, 4] и $k = 3, функцията ще върне \"YES\".",
      "zh": "确定是否存在至少一种排列方式，在序列中的每个数字前添加 '+' 或 '-'，使得序列的和可以被给定的数字 k 整除。\n\nArgs:\n- $numbers: 一个正整数数组，表示序列。\n- $k: 一个整数，表示除数。\n\nReturns:\n如果序列的至少一种排列可以被 $k 整除，则返回 \"YES\"，否则返回 \"NO\"。\n\nExamples:\n给定 $numbers = [1, 2, 4] 和 $k = 2，函数将返回 \"NO\"。\n给定 $numbers = [1, 2, 4] 和 $k = 3，函数将返回 \"YES\"。",
      "fr": "Détermine s'il existe au moins une permutation d'ajout de '+' ou '-'\ndevant chaque nombre dans une séquence telle que la somme de la séquence soit\ndivisible par un nombre donné k.\n\nLa fonction prend deux arguments :\n- $numbers : Un tableau d'entiers positifs représentant la séquence.\n- $k : Un entier représentant le diviseur.\n\nLa fonction retourne \"YES\" si au moins une permutation de la séquence\npeut être divisée par $k, sinon retourne \"NO\".\n\nExemple :\nÉtant donné $numbers = [1, 2, 4] et $k = 2, la fonction retournera \"NO\".\nÉtant donné $numbers = [1, 2, 4] et $k = 3, la fonction retournera \"YES\".",
      "de": "Bestimmt, ob es mindestens eine Permutation gibt, bei der vor jeder Zahl in einer Sequenz ein '+' oder '-' hinzugefügt wird, sodass die Summe der Sequenz durch eine gegebene Zahl k teilbar ist.\n\nDie Funktion nimmt zwei Argumente:\n- $numbers: Ein Array von positiven ganzen Zahlen, das die Sequenz darstellt.\n- $k: Ein ganzzahliger Wert, der den Divisor darstellt.\n\nDie Funktion gibt \"YES\" zurück, wenn mindestens eine Permutation der Sequenz durch $k teilbar ist, andernfalls gibt sie \"NO\" zurück.\n\nBeispiel:\nGegeben $numbers = [1, 2, 4] und $k = 2, wird die Funktion \"NO\" zurückgeben.\nGegeben $numbers = [1, 2, 4] und $k = 3, wird die Funktion \"YES\" zurückgeben.",
      "ha": "Determines idan akwai aƙalla ɗaya permutation na ƙara '+' ko '-'\nkafin kowace lamba a cikin jerin lambobi ta yadda jimillar jerin za ta\nkasance mai rarrabewa da wata lamba k da aka bayar.\n\nAikin yana ɗaukar hujjoji biyu:\n- $numbers: Wani tsararren lambobi masu kyau da ke wakiltar jerin.\n- $k: Wata lamba da ke wakiltar mai raba.\n\nAikin yana dawowa \"YES\" idan aƙalla ɗaya permutation na jerin\nza a iya raba shi da $k, in ba haka ba yana dawowa \"NO\".\n\nMisali:\nIdan aka ba $numbers = [1, 2, 4] da $k = 2, aikin zai dawo \"NO\".\nIdan aka ba $numbers = [1, 2, 4] da $k = 3, aikin zai dawo \"YES\".",
      "hi": "यह निर्धारित करता है कि क्या किसी अनुक्रम में प्रत्येक संख्या से पहले '+' या '-' जोड़ने के कम से कम एक क्रमविन्यास का अस्तित्व है ताकि अनुक्रम का योग एक दिए गए संख्या k से विभाज्य हो।\n\nयह फ़ंक्शन दो तर्क लेता है:\n- $numbers: सकारात्मक पूर्णांकों की एक श्रृंखला जो अनुक्रम का प्रतिनिधित्व करती है।\n- $k: एक पूर्णांक जो भाजक का प्रतिनिधित्व करता है।\n\nयदि अनुक्रम के कम से कम एक क्रमविन्यास को $k से विभाजित किया जा सकता है, तो फ़ंक्शन \"YES\" लौटाता है, अन्यथा \"NO\" लौटाता है।\n\nउदाहरण:\nयदि $numbers = [1, 2, 4] और $k = 2, तो फ़ंक्शन \"NO\" लौटाएगा।\nयदि $numbers = [1, 2, 4] और $k = 3, तो फ़ंक्शन \"YES\" लौटाएगा।",
      "hu": "Meghatározza, hogy létezik-e legalább egy olyan permutáció, amely '+' vagy '-' jelet ad minden szám elé egy sorozatban úgy, hogy a sorozat összege osztható legyen egy adott k számmal.\n\nA függvény két argumentumot vesz fel:\n- $numbers: Pozitív egész számokat tartalmazó tömb, amely a sorozatot képviseli.\n- $k: Egy egész szám, amely az osztót képviseli.\n\nA függvény \"YES\"-t ad vissza, ha a sorozatnak legalább egy permutációja osztható $k-val, különben \"NO\"-t ad vissza.\n\nPélda:\nHa $numbers = [1, 2, 4] és $k = 2, a függvény \"NO\"-t ad vissza.\nHa $numbers = [1, 2, 4] és $k = 3, a függvény \"YES\"-t ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9957514947800448",
      "hy": "0.9508501039952031",
      "bn": "0.9776201163384182",
      "bg": "0.9928514912169354",
      "zh": "0.9268770060473404",
      "fr": "0.9893295759308058",
      "de": "0.9733882960704698",
      "ha": "0.9596829984094436",
      "hi": "0.9703222375088153",
      "hu": "0.951811276409031"
    }
  },
  {
    "task_id": "PHP/36",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Evaluate a Polish expression and return the result.\n * In Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\n * Supported operators are +, -, *, and /.\n * Input: A string containing a valid Polish expression separated by spaces.\n * Output: A float representing the result of evaluating the expression.\n * \n * Example:\n * - For the input \"+ 11.0 12.0\", the function should return 23.0.\n * - For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "sq": "<?php\n\n\n/**\n * Vlerësoni një shprehje polake dhe ktheni rezultatin.\n * Në notacionin polak, operatorët paraprijnë operandët e tyre. Për shembull, shprehja \"+ 11.0 12.0\" është ekuivalente me \"11.0 + 12.0\".\n * Operatorët e mbështetur janë +, -, *, dhe /.\n * Hyrja: Një varg që përmban një shprehje të vlefshme polake të ndarë me hapësira.\n * Dalja: Një numër me presje lëvizëse që përfaqëson rezultatin e vlerësimit të shprehjes.\n * \n * Shembull:\n * - Për hyrjen \"+ 11.0 12.0\", funksioni duhet të kthejë 23.0.\n * - Për hyrjen \"* + 2.0 3.0 4.0\", funksioni duhet të kthejë 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hy": "<?php\n\n\n/**\n * Գնահատել լեհական արտահայտությունը և վերադարձնել արդյունքը:\n * Լեհական նշանագրությունում օպերատորները նախորդում են իրենց օպերանդներին: Օրինակ, արտահայտությունը \"+ 11.0 12.0\" համարժեք է \"11.0 + 12.0\" արտահայտությանը:\n * Աջակցվող օպերատորներն են +, -, *, և /:\n * Մուտք: Տող, որը պարունակում է վավեր լեհական արտահայտություն, որը բաժանված է բացատներով:\n * Ելք: Թվային արժեք, որը ներկայացնում է արտահայտության գնահատման արդյունքը:\n * \n * Օրինակ:\n * - Մուտք \"+ 11.0 12.0\" համար, ֆունկցիան պետք է վերադարձնի 23.0:\n * - Մուտք \"* + 2.0 3.0 4.0\" համար, ֆունկցիան պետք է վերադարձնի 20.0:\n */\n\n\n function evaluatePolishExpression($expression) ",
      "bn": "<?php\n\n\n/**\n * একটি পোলিশ অভিব্যক্তি মূল্যায়ন করুন এবং ফলাফল ফেরত দিন।\n * পোলিশ নোটেশনে, অপারেটরগুলি তাদের অপারেন্ডগুলির আগে থাকে। উদাহরণস্বরূপ, \"+ 11.0 12.0\" অভিব্যক্তিটি \"11.0 + 12.0\" এর সমতুল্য।\n * সমর্থিত অপারেটরগুলি হল +, -, *, এবং /।\n * ইনপুট: স্পেস দ্বারা পৃথক একটি বৈধ পোলিশ অভিব্যক্তি ধারণকারী একটি স্ট্রিং।\n * আউটপুট: অভিব্যক্তি মূল্যায়নের ফলাফল উপস্থাপনকারী একটি ফ্লোট।\n * \n * উদাহরণ:\n * - ইনপুট \"+ 11.0 12.0\" এর জন্য, ফাংশনটি 23.0 ফেরত দেওয়া উচিত।\n * - ইনপুট \"* + 2.0 3.0 4.0\" এর জন্য, ফাংশনটি 20.0 ফেরত দেওয়া উচিত।\n */\n\n\n function evaluatePolishExpression($expression) ",
      "bg": "<?php\n\n\n/**\n * Оценете полско изразяване и върнете резултата.\n * В полската нотация операторите предхождат техните операнди. Например, изразът \"+ 11.0 12.0\" е еквивалентен на \"11.0 + 12.0\".\n * Поддържаните оператори са +, -, *, и /.\n * Вход: Низ, съдържащ валидно полско изразяване, разделено с интервали.\n * Изход: Число с плаваща запетая, представляващо резултата от оценката на израза.\n * \n * Пример:\n * - За входа \"+ 11.0 12.0\", функцията трябва да върне 23.0.\n * - За входа \"* + 2.0 3.0 4.0\", функцията трябва да върне 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "zh": "<?php\n\n\n/**\n * 计算一个波兰表达式并返回结果。\n * 在波兰表示法中，运算符在操作数之前。例如，表达式 \"+ 11.0 12.0\" 等价于 \"11.0 + 12.0\"。\n * 支持的运算符有 +, -, *, 和 /。\n * 输入：一个包含有效波兰表达式的字符串，操作数和运算符之间用空格分隔。\n * 输出：一个浮点数，表示计算表达式的结果。\n * \n * 示例：\n * - 对于输入 \"+ 11.0 12.0\"，函数应返回 23.0。\n * - 对于输入 \"* + 2.0 3.0 4.0\"，函数应返回 20.0。\n */\n\n\n function evaluatePolishExpression($expression) ",
      "fr": "<?php\n\n\n/**\n * Évaluer une expression polonaise et retourner le résultat.\n * En notation polonaise, les opérateurs précèdent leurs opérandes. Par exemple, l'expression \"+ 11.0 12.0\" est équivalente à \"11.0 + 12.0\".\n * Les opérateurs pris en charge sont +, -, * et /.\n * Entrée : Une chaîne contenant une expression polonaise valide séparée par des espaces.\n * Sortie : Un flottant représentant le résultat de l'évaluation de l'expression.\n * \n * Exemple :\n * - Pour l'entrée \"+ 11.0 12.0\", la fonction doit retourner 23.0.\n * - Pour l'entrée \"* + 2.0 3.0 4.0\", la fonction doit retourner 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "de": "<?php\n\n\n/**\n * Evaluieren Sie einen polnischen Ausdruck und geben Sie das Ergebnis zurück.\n * In der polnischen Notation stehen die Operatoren vor ihren Operanden. Zum Beispiel ist der Ausdruck \"+ 11.0 12.0\" gleichbedeutend mit \"11.0 + 12.0\".\n * Unterstützte Operatoren sind +, -, *, und /.\n * Eingabe: Ein String, der einen gültigen polnischen Ausdruck enthält, getrennt durch Leerzeichen.\n * Ausgabe: Ein Float, der das Ergebnis der Auswertung des Ausdrucks darstellt.\n * \n * Beispiel:\n * - Für die Eingabe \"+ 11.0 12.0\" sollte die Funktion 23.0 zurückgeben.\n * - Für die Eingabe \"* + 2.0 3.0 4.0\" sollte die Funktion 20.0 zurückgeben.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "ha": "<?php\n\n\n/**\n * Kimanta wata magana ta Polish kuma dawo da sakamakon.\n * A cikin tsarin Polish, masu aiki suna gabatar da abubuwan da suke aiki akai. Alal misali, magana \"+ 11.0 12.0\" tana daidai da \"11.0 + 12.0\".\n * Masu aiki da aka goyi bayan su ne +, -, *, da /.\n * Shigarwa: Wani igiyar rubutu da ke dauke da sahihin magana ta Polish da aka raba ta sarari.\n * Fitarwa: Wani lamba mai iyo da ke wakiltar sakamakon kimanta maganar.\n * \n * Misali:\n * - Don shigarwa \"+ 11.0 12.0\", aikin ya kamata ya dawo da 23.0.\n * - Don shigarwa \"* + 2.0 3.0 4.0\", aikin ya kamata ya dawo da 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hi": "<?php\n\n\n/**\n * एक पोलिश अभिव्यक्ति का मूल्यांकन करें और परिणाम लौटाएं।\n * पोलिश संकेतन में, ऑपरेटर अपने ऑपरेन्ड से पहले आते हैं। उदाहरण के लिए, अभिव्यक्ति \"+ 11.0 12.0\" \"11.0 + 12.0\" के बराबर है।\n * समर्थित ऑपरेटर +, -, *, और / हैं।\n * इनपुट: एक स्ट्रिंग जिसमें एक मान्य पोलिश अभिव्यक्ति होती है जो स्थानों द्वारा अलग होती है।\n * आउटपुट: एक फ्लोट जो अभिव्यक्ति का मूल्यांकन करने के परिणाम का प्रतिनिधित्व करता है।\n * \n * उदाहरण:\n * - इनपुट \"+ 11.0 12.0\" के लिए, फ़ंक्शन को 23.0 लौटाना चाहिए।\n * - इनपुट \"* + 2.0 3.0 4.0\" के लिए, फ़ंक्शन को 20.0 लौटाना चाहिए।\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hu": "<?php\n\n\n/**\n * Értékelj ki egy lengyel kifejezést, és add vissza az eredményt.\n * A lengyel jelölésben az operátorok megelőzik az operandusaikat. Például a \"+ 11.0 12.0\" kifejezés egyenértékű a \"11.0 + 12.0\" kifejezéssel.\n * Támogatott operátorok: +, -, *, és /.\n * Bemenet: Egy karakterlánc, amely egy érvényes lengyel kifejezést tartalmaz, szóközökkel elválasztva.\n * Kimenet: Egy lebegőpontos szám, amely a kifejezés kiértékelésének eredményét képviseli.\n * \n * Példa:\n * - A \"+ 11.0 12.0\" bemenet esetén a függvénynek 23.0-t kell visszaadnia.\n * - A \"* + 2.0 3.0 4.0\" bemenet esetén a függvénynek 20.0-t kell visszaadnia.\n */\n\n\n function evaluatePolishExpression($expression) "
    },
    "prompt_bertscore": {
      "sq": "0.984320316351487",
      "hy": "0.9763689435682793",
      "bn": "0.9903370292234147",
      "bg": "0.9815851760046366",
      "zh": "0.9647784635741316",
      "fr": "0.9944566233260783",
      "de": "0.989068774240507",
      "ha": "0.9786817957250495",
      "hi": "0.9902279811442266",
      "hu": "0.9730998847572072"
    },
    "canonical_solution": " {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n",
    "instruction": {
      "en": "Write a PHP function `function evaluatePolishExpression($expression)` to solve the following problem:\nEvaluate a Polish expression and return the result.\nIn Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\nSupported operators are +, -, *, and /.\nInput: A string containing a valid Polish expression separated by spaces.\nOutput: A float representing the result of evaluating the expression.\n\nExample:\n- For the input \"+ 11.0 12.0\", the function should return 23.0.\n- For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.",
      "sq": "Shkruani një funksion PHP `function evaluatePolishExpression($expression)` për të zgjidhur problemin e mëposhtëm:\nVlerësoni një shprehje polake dhe ktheni rezultatin.\nNë notacionin polak, operatorët paraprijnë operandët e tyre. Për shembull, shprehja \"+ 11.0 12.0\" është ekuivalente me \"11.0 + 12.0\".\nOperatorët e mbështetur janë +, -, *, dhe /.\nInput: Një varg që përmban një shprehje të vlefshme polake të ndarë me hapësira.\nOutput: Një numër me presje dhjetore që përfaqëson rezultatin e vlerësimit të shprehjes.\n\nShembull:\n- Për inputin \"+ 11.0 12.0\", funksioni duhet të kthejë 23.0.\n- Për inputin \"* + 2.0 3.0 4.0\", funksioni duhet të kthejë 20.0.",
      "hy": "PHP ֆունկցիա գրեք `function evaluatePolishExpression($expression)` հետևյալ խնդիրը լուծելու համար:\nԳնահատել Polish արտահայտությունը և վերադարձնել արդյունքը։\nPolish նշման մեջ օպերատորները նախորդում են իրենց օպերանդներին։ Օրինակ, արտահայտությունը \"+ 11.0 12.0\" համարժեք է \"11.0 + 12.0\" արտահայտությանը։\nԱջակցվող օպերատորներն են +, -, *, և /։\nՄուտք: Տող, որը պարունակում է վավեր Polish արտահայտություն, բաժանված բացատներով։\nԵլք: Թվային արժեք, որը ներկայացնում է արտահայտության գնահատման արդյունքը։\n\nՕրինակ:\n- \"+ 11.0 12.0\" մուտքի համար, ֆունկցիան պետք է վերադարձնի 23.0։\n- \"* + 2.0 3.0 4.0\" մուտքի համար, ֆունկցիան պետք է վերադարձնի 20.0։",
      "bn": "একটি PHP ফাংশন `function evaluatePolishExpression($expression)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি পোলিশ এক্সপ্রেশন মূল্যায়ন করুন এবং ফলাফল ফেরত দিন।\nপোলিশ নোটেশনে, অপারেটরগুলি তাদের অপারেন্ডের আগে থাকে। উদাহরণস্বরূপ, এক্সপ্রেশন \"+ 11.0 12.0\" \"11.0 + 12.0\" এর সমতুল্য।\nসমর্থিত অপারেটরগুলি হল +, -, *, এবং /।\nইনপুট: একটি স্ট্রিং যা স্পেস দ্বারা পৃথক একটি বৈধ পোলিশ এক্সপ্রেশন ধারণ করে।\nআউটপুট: একটি ফ্লোট যা এক্সপ্রেশন মূল্যায়নের ফলাফল উপস্থাপন করে।\n\nউদাহরণ:\n- ইনপুট \"+ 11.0 12.0\" এর জন্য, ফাংশনটি 23.0 ফেরত দেওয়া উচিত।\n- ইনপুট \"* + 2.0 3.0 4.0\" এর জন্য, ফাংশনটি 20.0 ফেরত দেওয়া উচিত।",
      "bg": "Напишете PHP функция `function evaluatePolishExpression($expression)`, за да решите следния проблем:\nОценете полска нотация и върнете резултата.\nВ полската нотация операторите предхождат техните операнди. Например, изразът \"+ 11.0 12.0\" е еквивалентен на \"11.0 + 12.0\".\nПоддържаните оператори са +, -, * и /.\nВход: Низ, съдържащ валидна полска нотация, разделена с интервали.\nИзход: Число с плаваща запетая, представляващо резултата от оценката на израза.\n\nПример:\n- За входа \"+ 11.0 12.0\", функцията трябва да върне 23.0.\n- За входа \"* + 2.0 3.0 4.0\", функцията трябва да върне 20.0.",
      "zh": "编写一个 PHP 函数 `function evaluatePolishExpression($expression)` 来解决以下问题：\n计算一个波兰表达式并返回结果。\n在波兰表示法中，运算符在操作数之前。例如，表达式 \"+ 11.0 12.0\" 等价于 \"11.0 + 12.0\"。\n支持的运算符有 +, -, *, 和 /。\n输入：一个包含用空格分隔的有效波兰表达式的字符串。\n输出：一个浮点数，表示计算表达式的结果。\n\n示例：\n- 对于输入 \"+ 11.0 12.0\"，函数应返回 23.0。\n- 对于输入 \"* + 2.0 3.0 4.0\"，函数应返回 20.0。",
      "fr": "Écrire une fonction PHP `function evaluatePolishExpression($expression)` pour résoudre le problème suivant :  \nÉvaluer une expression polonaise et retourner le résultat.  \nEn notation polonaise, les opérateurs précèdent leurs opérandes. Par exemple, l'expression \"+ 11.0 12.0\" est équivalente à \"11.0 + 12.0\".  \nLes opérateurs pris en charge sont +, -, *, et /.  \nEntrée : Une chaîne contenant une expression polonaise valide séparée par des espaces.  \nSortie : Un flottant représentant le résultat de l'évaluation de l'expression.\n\nExemple :  \n- Pour l'entrée \"+ 11.0 12.0\", la fonction doit retourner 23.0.  \n- Pour l'entrée \"* + 2.0 3.0 4.0\", la fonction doit retourner 20.0.",
      "de": "Schreiben Sie eine PHP-Funktion `function evaluatePolishExpression($expression)`, um das folgende Problem zu lösen:\nBewerten Sie einen polnischen Ausdruck und geben Sie das Ergebnis zurück.\nIn der polnischen Notation stehen die Operatoren vor ihren Operanden. Zum Beispiel entspricht der Ausdruck \"+ 11.0 12.0\" \"11.0 + 12.0\".\nUnterstützte Operatoren sind +, -, *, und /.\nEingabe: Ein String, der einen gültigen polnischen Ausdruck enthält, getrennt durch Leerzeichen.\nAusgabe: Ein Float, der das Ergebnis der Auswertung des Ausdrucks darstellt.\n\nBeispiel:\n- Für die Eingabe \"+ 11.0 12.0\" sollte die Funktion 23.0 zurückgeben.\n- Für die Eingabe \"* + 2.0 3.0 4.0\" sollte die Funktion 20.0 zurückgeben.",
      "ha": "Rubuta aikin PHP `function evaluatePolishExpression($expression)` don warware matsalar mai zuwa:\nKimanta wani bayani na Polish kuma dawo da sakamakon.\nA cikin tsarin Polish, masu aiki suna gabatar da abubuwan da suke aiki a kansu. Alal misali, bayanin \"+ 11.0 12.0\" yayi daidai da \"11.0 + 12.0\".\nMasu aiki da ake tallafawa sune +, -, *, da /.\nShigarwa: Wani igiyar rubutu mai dauke da ingantaccen bayani na Polish da aka raba ta wurin sarari.\nFitarwa: Wani lamba mai iyo da ke wakiltar sakamakon kimanta bayanin.\n\nMisali:\n- Don shigarwar \"+ 11.0 12.0\", aikin ya kamata ya dawo da 23.0.\n- Don shigarwar \"* + 2.0 3.0 4.0\", aikin ya kamata ya dawo da 20.0.",
      "hi": "PHP फ़ंक्शन `function evaluatePolishExpression($expression)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक Polish अभिव्यक्ति का मूल्यांकन करें और परिणाम लौटाएं।\nPolish संकेतन में, ऑपरेटर अपने ऑपरेन्ड से पहले आते हैं। उदाहरण के लिए, अभिव्यक्ति \"+ 11.0 12.0\" \"11.0 + 12.0\" के समकक्ष है।\nसमर्थित ऑपरेटर हैं +, -, *, और /।\nइनपुट: एक स्ट्रिंग जिसमें स्पेस द्वारा अलग की गई एक मान्य Polish अभिव्यक्ति होती है।\nआउटपुट: एक फ्लोट जो अभिव्यक्ति का मूल्यांकन करने के परिणाम का प्रतिनिधित्व करता है।\n\nउदाहरण:\n- इनपुट \"+ 11.0 12.0\" के लिए, फ़ंक्शन को 23.0 लौटाना चाहिए।\n- इनपुट \"* + 2.0 3.0 4.0\" के लिए, फ़ंक्शन को 20.0 लौटाना चाहिए।",
      "hu": "Írj egy PHP függvényt `function evaluatePolishExpression($expression)` a következő probléma megoldására:\nÉrtékelj egy lengyel kifejezést és add vissza az eredményt.\nA lengyel jelölésben az operátorok megelőzik az operandusaikat. Például a \"+ 11.0 12.0\" kifejezés egyenértékű a \"11.0 + 12.0\" kifejezéssel.\nTámogatott operátorok: +, -, *, és /.\nBemenet: Egy karakterlánc, amely egy érvényes lengyel kifejezést tartalmaz, szóközökkel elválasztva.\nKimenet: Egy lebegőpontos szám, amely a kifejezés kiértékelésének eredményét képviseli.\n\nPélda:\n- A \"+ 11.0 12.0\" bemenetre a függvénynek 23.0-t kell visszaadnia.\n- A \"* + 2.0 3.0 4.0\" bemenetre a függvénynek 20.0-t kell visszaadnia."
    },
    "instruction_bertscore": {
      "sq": "0.9837788499327859",
      "hy": "0.9718542736377374",
      "bn": "0.9883419856763004",
      "bg": "0.9677005151095358",
      "zh": "0.969688407962933",
      "fr": "0.9939358144670049",
      "de": "0.9881078004570603",
      "ha": "0.9776600410450061",
      "hi": "0.9766084918078074",
      "hu": "0.9764203888369674"
    },
    "level": "hard",
    "test": "function main(){\n    assert(evaluatePolishExpression(\"* + 11.0 12.0 + 24.0 35.0\") === 1357.0);\n    assert(evaluatePolishExpression(\"+ 2.0 2.0\") === 4.0);\n    assert(evaluatePolishExpression(\"- 10.0 5.0\") === 5.0);\n    // Testcase 1\n    $expression1 = \"+ 11.0 12.0\";\n    $result1 = evaluatePolishExpression($expression1);\n    assert($result1 === 23.0);\n\n    // Testcase 2\n    $expression2 = \"* + 2.0 3.0 4.0\";\n    $result2 = evaluatePolishExpression($expression2);\n    assert($result2 === 20.0);\n\n\n\n}\n\nmain();\n?>",
    "entry_point": "evaluatePolishExpression",
    "signature": "function evaluatePolishExpression($expression)",
    "docstring": {
      "en": "Evaluate a Polish expression and return the result.\nIn Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\nSupported operators are +, -, *, and /.\nInput: A string containing a valid Polish expression separated by spaces.\nOutput: A float representing the result of evaluating the expression.\n\nExample:\n- For the input \"+ 11.0 12.0\", the function should return 23.0.\n- For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.",
      "sq": "Vlerësoni një shprehje polake dhe ktheni rezultatin.\nNë notacionin polak, operatorët i paraprijnë operandëve të tyre. Për shembull, shprehja \"+ 11.0 12.0\" është ekuivalente me \"11.0 + 12.0\".\nOperatorët e mbështetur janë +, -, *, dhe /.\nHyrja: Një varg që përmban një shprehje të vlefshme polake të ndarë me hapësira.\nDalja: Një numër me presje dhjetore që përfaqëson rezultatin e vlerësimit të shprehjes.\n\nShembull:\n- Për hyrjen \"+ 11.0 12.0\", funksioni duhet të kthejë 23.0.\n- Për hyrjen \"* + 2.0 3.0 4.0\", funksioni duhet të kthejë 20.0.",
      "hy": "Պոլական արտահայտությունը գնահատել և վերադարձնել արդյունքը։\nՊոլական նշման մեջ օպերատորները նախորդում են իրենց օպերանդներին։ Օրինակ, արտահայտությունը \"+ 11.0 12.0\" համարժեք է \"11.0 + 12.0\"։  \nԱջակցվող օպերատորներն են +, -, *, և /։  \nՄուտք՝ Տող, որը պարունակում է վավեր Պոլական արտահայտություն՝ բաժանված բացատներով։  \nԵլք՝ Թվային արժեք, որը ներկայացնում է արտահայտության գնահատման արդյունքը։  \n\nՕրինակ՝  \n- \"+ 11.0 12.0\" մուտքի համար ֆունկցիան պետք է վերադարձնի 23.0։  \n- \"* + 2.0 3.0 4.0\" մուտքի համար ֆունկցիան պետք է վերադարձնի 20.0։",
      "bn": "পোলিশ অভিব্যক্তি মূল্যায়ন করুন এবং ফলাফল ফেরত দিন।  \nপোলিশ নোটেশনে, অপারেটরগুলি তাদের অপারেন্ডগুলির আগে থাকে। উদাহরণস্বরূপ, \"+ 11.0 12.0\" অভিব্যক্তিটি \"11.0 + 12.0\" এর সমতুল্য।  \nসমর্থিত অপারেটরগুলি হল +, -, *, এবং /।  \nইনপুট: একটি স্ট্রিং যা স্পেস দ্বারা পৃথক একটি বৈধ পোলিশ অভিব্যক্তি ধারণ করে।  \nআউটপুট: একটি ফ্লোট যা অভিব্যক্তি মূল্যায়নের ফলাফল উপস্থাপন করে।  \n\nউদাহরণ:  \n- ইনপুট \"+ 11.0 12.0\" এর জন্য, ফাংশনটি 23.0 ফেরত দেওয়া উচিত।  \n- ইনপুট \"* + 2.0 3.0 4.0\" এর জন্য, ফাংশনটি 20.0 ফেরত দেওয়া উচিত।  ",
      "bg": "Оценете полска нотация и върнете резултата.\nВ полската нотация операторите предхождат техните операнди. Например, изразът \"+ 11.0 12.0\" е еквивалентен на \"11.0 + 12.0\".  \nПоддържаните оператори са +, -, *, и /.  \nВход: Низ, съдържащ валиден израз в полска нотация, разделен с интервали.  \nИзход: Число с плаваща запетая, представляващо резултата от оценката на израза.  \n\nПример:  \n- За входа \"+ 11.0 12.0\", функцията трябва да върне 23.0.  \n- За входа \"* + 2.0 3.0 4.0\", функцията трябва да върне 20.0.",
      "zh": "计算一个波兰表达式并返回结果。\n在波兰表示法中，运算符在操作数之前。例如，表达式 \"+ 11.0 12.0\" 等价于 \"11.0 + 12.0\"。  \n支持的运算符有 +, -, *, 和 /。  \n输入：一个包含有效波兰表达式的字符串，操作数和运算符之间用空格分隔。  \n输出：一个浮点数，表示计算表达式的结果。  \n\n示例：  \n- 对于输入 \"+ 11.0 12.0\"，函数应返回 23.0。  \n- 对于输入 \"* + 2.0 3.0 4.0\"，函数应返回 20.0。",
      "fr": "Évaluer une expression polonaise et retourner le résultat.\nEn notation polonaise, les opérateurs précèdent leurs opérandes. Par exemple, l'expression \"+ 11.0 12.0\" est équivalente à \"11.0 + 12.0\".  \nLes opérateurs pris en charge sont +, -, *, et /.  \nEntrée : Une chaîne contenant une expression polonaise valide séparée par des espaces.  \nSortie : Un flottant représentant le résultat de l'évaluation de l'expression.\n\nExemple :  \n- Pour l'entrée \"+ 11.0 12.0\", la fonction doit retourner 23.0.  \n- Pour l'entrée \"* + 2.0 3.0 4.0\", la fonction doit retourner 20.0.",
      "de": "Eine polnische Ausdruck auswerten und das Ergebnis zurückgeben.\nIn der polnischen Notation stehen die Operatoren vor ihren Operanden. Zum Beispiel ist der Ausdruck \"+ 11.0 12.0\" gleichbedeutend mit \"11.0 + 12.0\".  \nUnterstützte Operatoren sind +, -, * und /.  \nEingabe: Ein String, der einen gültigen polnischen Ausdruck enthält, getrennt durch Leerzeichen.  \nAusgabe: Ein Float, der das Ergebnis der Auswertung des Ausdrucks darstellt.\n\nBeispiel:  \n- Für die Eingabe \"+ 11.0 12.0\" sollte die Funktion 23.0 zurückgeben.  \n- Für die Eingabe \"* + 2.0 3.0 4.0\" sollte die Funktion 20.0 zurückgeben.  ",
      "ha": "Kimanta wata magana ta Polish kuma dawo da sakamakon.\nA cikin tsarin Polish, masu aiki suna gabatar da abubuwan da suke aiki akansu. Alal misali, magana \"+ 11.0 12.0\" tana daidai da \"11.0 + 12.0\".  \nAna goyan bayan masu aiki +, -, *, da /.  \nInput: Wani kirtani da ke dauke da sahihin magana ta Polish da aka raba ta wurin sarari.  \nOutput: Wani adadi mai lamba mai iyo da ke wakiltar sakamakon tantance maganar.  \n\nExample:  \n- Domin shigarwa \"+ 11.0 12.0\", aikin ya kamata ya dawo da 23.0.  \n- Domin shigarwa \"* + 2.0 3.0 4.0\", aikin ya kamata ya dawo da 20.0.  ",
      "hi": "पोलिश अभिव्यक्ति का मूल्यांकन करें और परिणाम लौटाएं।\nपोलिश संकेतन में, ऑपरेटर उनके ऑपरेन्ड से पहले आते हैं। उदाहरण के लिए, अभिव्यक्ति \"+ 11.0 12.0\" \"11.0 + 12.0\" के बराबर है।  \nसमर्थित ऑपरेटर हैं +, -, *, और /।  \nइनपुट: एक स्ट्रिंग जिसमें स्पेस द्वारा अलग की गई एक मान्य पोलिश अभिव्यक्ति होती है।  \nआउटपुट: एक फ्लोट जो अभिव्यक्ति के मूल्यांकन का परिणाम दर्शाता है।  \n\nउदाहरण:  \n- इनपुट \"+ 11.0 12.0\" के लिए, फ़ंक्शन को 23.0 लौटाना चाहिए।  \n- इनपुट \"* + 2.0 3.0 4.0\" के लिए, फ़ंक्शन को 20.0 लौटाना चाहिए।  ",
      "hu": "Értékeljen ki egy lengyel kifejezést, és adja vissza az eredményt.  \nA lengyel jelölésben az operátorok megelőzik az operandusaikat. Például a \"+ 11.0 12.0\" kifejezés egyenértékű a \"11.0 + 12.0\" kifejezéssel.  \nTámogatott operátorok: +, -, * és /.  \nBemenet: Egy karakterlánc, amely egy érvényes lengyel kifejezést tartalmaz, szóközökkel elválasztva.  \nKimenet: Egy lebegőpontos szám, amely a kifejezés kiértékelésének eredményét képviseli.  \n\nPélda:  \n- A \"+ 11.0 12.0\" bemenetre a függvénynek 23.0-t kell visszaadnia.  \n- A \"* + 2.0 3.0 4.0\" bemenetre a függvénynek 20.0-t kell visszaadnia.  "
    },
    "docstring_bertscore": {
      "sq": "0.9776373971815682",
      "hy": "0.9772802597564674",
      "bn": "0.9843916246582785",
      "bg": "0.9664741711370264",
      "zh": "0.9508932067878877",
      "fr": "0.9924023879254156",
      "de": "0.9954626862060201",
      "ha": "0.9691169483566956",
      "hi": "0.989444185660663",
      "hu": "0.9712647386668258"
    }
  },
  {
    "task_id": "PHP/37",
    "prompt": {
      "en": "<?php\n/**\n * Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n    $permutations = generatePermutations(\"abc\");\n    $permutations should contain the following array:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "sq": "<?php\n/**\n * Përshkrimi i Pyetjes:\nJu jepet një varg që përbëhet nga shkronja të vogla të dallueshme. Detyra juaj është të shkruani një funksion generatePermutations që gjeneron të gjitha permutacionet e mundshme të vargut hyrës dhe i kthen ato në rend leksikografik.\n\nHyrja:\nNjë varg që përbëhet nga shkronja të vogla të dallueshme, ku gjatësia e vargut është maksimumi 6.\n\nDalja:\nNjë array që përmban të gjitha permutacionet e vargut hyrës, të renditura në rend leksikografik.\n\nShembull:\n    $permutations = generatePermutations(\"abc\");\n    $permutations duhet të përmbajë array-n e mëposhtëm:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hy": "<?php\n/**\n * Հարցի նկարագրություն:\nՁեզ տրված է փոքրատառ տարբերանշաններից կազմված տող։ Ձեր խնդիրն է գրել generatePermutations ֆունկցիան, որը կգեներացնի մուտքային տողի բոլոր հնարավոր փոխատեղումները և կվերադարձնի դրանք բառարանային կարգով։\n\nՄուտք:\nՓոքրատառ տարբերանշաններից կազմված տող, որի երկարությունը առավելագույնը 6 է։\n\nԵլք:\nԶանգված, որը պարունակում է մուտքային տողի բոլոր փոխատեղումները, դասավորված բառարանային կարգով։\n\nՕրինակ:\n    $permutations = generatePermutations(\"abc\");\n    $permutations պետք է պարունակի հետևյալ զանգվածը:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "bn": "<?php\n/**\n * প্রশ্নের বিবরণ:\nতোমাকে একটি স্ট্রিং দেওয়া হয়েছে যা স্বতন্ত্র ছোট হাতের অক্ষর নিয়ে গঠিত। তোমার কাজ একটি ফাংশন generatePermutations লেখা যা ইনপুট স্ট্রিং এর সব সম্ভাব্য বিন্যাস তৈরি করে এবং সেগুলোকে বর্ণানুক্রমিক ক্রমে ফেরত দেয়।\n\nইনপুট:\nস্বতন্ত্র ছোট হাতের অক্ষর নিয়ে গঠিত একটি স্ট্রিং, যেখানে স্ট্রিং এর দৈর্ঘ্য সর্বাধিক ৬।\n\nআউটপুট:\nইনপুট স্ট্রিং এর সব বিন্যাসের একটি অ্যারে, যা বর্ণানুক্রমিক ক্রমে সাজানো।\n\nউদাহরণ:\n    $permutations = generatePermutations(\"abc\");\n    $permutations এর মধ্যে নিম্নলিখিত অ্যারে থাকতে হবে:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "bg": "<?php\n/**\n * Описание на задачата:\nДаден е низ, състоящ се от различни малки букви. Вашата задача е да напишете функция generatePermutations, която генерира всички възможни пермутации на входния низ и ги връща в лексикографски ред.\n\nВход:\nНиз, състоящ се от различни малки букви, където дължината на низа е най-много 6.\n\nИзход:\nМасив, съдържащ всички пермутации на входния низ, сортирани в лексикографски ред.\n\nПример:\n    $permutations = generatePermutations(\"abc\");\n    $permutations трябва да съдържа следния масив:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "zh": "<?php\n/**\n * 问题描述：\n你有一个由不同的小写字母组成的字符串。你的任务是编写一个函数 generatePermutations，该函数生成输入字符串的所有可能排列，并按字典顺序返回它们。\n\n输入：\n一个由不同小写字母组成的字符串，字符串的长度最多为6。\n\n输出：\n一个包含输入字符串所有排列的数组，按字典顺序排序。\n\n示例：\n    $permutations = generatePermutations(\"abc\");\n    $permutations 应该包含以下数组：\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "fr": "<?php\n/**\n * Description de la question :\nVous avez une chaîne de caractères composée de lettres minuscules distinctes. Votre tâche est d'écrire une fonction generatePermutations qui génère toutes les permutations possibles de la chaîne d'entrée et les renvoie dans l'ordre lexicographique.\n\nEntrée :\nUne chaîne de caractères composée de lettres minuscules distinctes, où la longueur de la chaîne est d'au plus 6.\n\nSortie :\nUn tableau contenant toutes les permutations de la chaîne d'entrée, triées dans l'ordre lexicographique.\n\nExemple :\n    $permutations = generatePermutations(\"abc\");\n    $permutations devrait contenir le tableau suivant :\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "de": "<?php\n/**\n * Fragebeschreibung:\nSie erhalten einen String, der aus verschiedenen Kleinbuchstaben besteht. Ihre Aufgabe ist es, eine Funktion generatePermutations zu schreiben, die alle möglichen Permutationen des Eingabestrings generiert und diese in lexikographischer Reihenfolge zurückgibt.\n\nEingabe:\nEin String, der aus verschiedenen Kleinbuchstaben besteht, wobei die Länge des Strings höchstens 6 beträgt.\n\nAusgabe:\nEin Array, das alle Permutationen des Eingabestrings enthält, sortiert in lexikographischer Reihenfolge.\n\nBeispiel:\n    $permutations = generatePermutations(\"abc\");\n    $permutations sollte das folgende Array enthalten:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "ha": "<?php\n/**\n * Bayanin Tambaya:\nAn ba ka wata ƙirtani da ke ƙunshe da ƙananan haruffa daban-daban. Aikin ka shi ne ka rubuta wata aiki generatePermutations wanda ke samar da dukkan yiwuwar permutations na shigar da ƙirtani kuma ya dawo da su a cikin tsari na lexicographical.\n\nShigar:\nWata ƙirtani da ke ƙunshe da ƙananan haruffa daban-daban, inda tsawon ƙirtani ya kai akalla 6.\n\nFita:\nWani tsari da ke ƙunshe da duk permutations na shigar da ƙirtani, an jera su a cikin tsari na lexicographical.\n\nMisali:\n    $permutations = generatePermutations(\"abc\");\n    $permutations ya kamata ya ƙunshi wannan tsari:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hi": "<?php\n/**\n * प्रश्न विवरण:\nआपको छोटे अक्षरों से बनी एक स्ट्रिंग दी गई है जिसमें सभी अक्षर भिन्न हैं। आपका कार्य एक फ़ंक्शन generatePermutations लिखना है जो इनपुट स्ट्रिंग की सभी संभावित क्रमचयों को उत्पन्न करता है और उन्हें शब्दकोशीय क्रम में लौटाता है।\n\nइनपुट:\nछोटे अक्षरों से बनी एक स्ट्रिंग, जिसमें सभी अक्षर भिन्न हैं और स्ट्रिंग की लंबाई अधिकतम 6 है।\n\nआउटपुट:\nइनपुट स्ट्रिंग की सभी क्रमचयों को एक एरे में लौटाएं, जो शब्दकोशीय क्रम में सॉर्टेड हो।\n\nउदाहरण:\n    $permutations = generatePermutations(\"abc\");\n    $permutations में निम्नलिखित एरे होना चाहिए:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hu": "<?php\n/**\n * Kérdés leírása:\nAdott egy karakterlánc, amely különböző kisbetűkből áll. Az Ön feladata, hogy írjon egy generatePermutations függvényt, amely az input karakterlánc összes lehetséges permutációját generálja, és azokat lexikografikus sorrendben adja vissza.\n\nBemenet:\nEgy karakterlánc, amely különböző kisbetűkből áll, ahol a karakterlánc hossza legfeljebb 6.\n\nKimenet:\nEgy tömb, amely az input karakterlánc összes permutációját tartalmazza, lexikografikus sorrendben rendezve.\n\nPélda:\n    $permutations = generatePermutations(\"abc\");\n    $permutations a következő tömböt kell, hogy tartalmazza:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) "
    },
    "prompt_bertscore": {
      "sq": "0.990144556384192",
      "hy": "0.9635332497154239",
      "bn": "0.9792907964733025",
      "bg": "0.9803969690652858",
      "zh": "0.9631999479360474",
      "fr": "0.9853045298895148",
      "de": "0.9845773440645461",
      "ha": "0.9796958038202327",
      "hi": "0.9557038359861717",
      "hu": "0.9834795139485663"
    },
    "canonical_solution": " {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}",
    "instruction": {
      "en": "Write a PHP function `function generatePermutations($str)` to solve the following problem:\nQuestion Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations should contain the following array:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "sq": "Shkruani një funksion PHP `function generatePermutations($str)` për të zgjidhur problemin e mëposhtëm:\nPërshkrimi i Pyetjes:\nJu jepet një varg që përbëhet nga shkronja të vogla të dallueshme. Detyra juaj është të shkruani një funksion generatePermutations që gjeneron të gjitha permutacionet e mundshme të vargut hyrës dhe i kthen ato në rend leksikografik.\n\nHyrja:\nNjë varg që përbëhet nga shkronja të vogla të dallueshme, ku gjatësia e vargut është maksimumi 6.\n\nDalja:\nNjë varg që përmban të gjitha permutacionet e vargut hyrës, të renditura në rend leksikografik.\n\nShembull:\n$permutations = generatePermutations(\"abc\");\n$permutations duhet të përmbajë vargun e mëposhtëm:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hy": "Գրեք PHP ֆունկցիա `function generatePermutations($str)` հետևյալ խնդիրը լուծելու համար:\nՀարցի նկարագրություն:\nՁեզ տրված է տող, որը բաղկացած է տարբեր փոքրատառ տառերից։ Ձեր խնդիրն է գրել generatePermutations ֆունկցիա, որը գեներացնում է մուտքային տողի բոլոր հնարավոր փոխատեղումները և վերադարձնում դրանք բառարանային կարգով։\n\nՄուտք:\nՏող, որը բաղկացած է տարբեր փոքրատառ տառերից, որտեղ տողի երկարությունը առավելագույնը 6 է։\n\nԵլք:\nԶանգված, որը պարունակում է մուտքային տողի բոլոր փոխատեղումները, դասավորված բառարանային կարգով։\n\nՕրինակ:\n$permutations = generatePermutations(\"abc\");\n$permutations պետք է պարունակի հետևյալ զանգվածը:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bn": "একটি PHP ফাংশন `function generatePermutations($str)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nপ্রশ্নের বিবরণ:\nআপনাকে ভিন্ন ছোট হাতের অক্ষর নিয়ে গঠিত একটি স্ট্রিং দেওয়া হয়েছে। আপনার কাজ হল একটি ফাংশন generatePermutations লেখা যা ইনপুট স্ট্রিংয়ের সকল সম্ভাব্য বিন্যাস তৈরি করে এবং সেগুলি বর্ণানুক্রমিক ক্রমে ফেরত দেয়।\n\nইনপুট:\nভিন্ন ছোট হাতের অক্ষর নিয়ে গঠিত একটি স্ট্রিং, যেখানে স্ট্রিংয়ের দৈর্ঘ্য সর্বাধিক ৬।\n\nআউটপুট:\nইনপুট স্ট্রিংয়ের সকল বিন্যাস ধারণকারী একটি অ্যারে, যা বর্ণানুক্রমিক ক্রমে সাজানো।\n\nউদাহরণ:\n$permutations = generatePermutations(\"abc\");\n$permutations এর মধ্যে নিম্নলিখিত অ্যারে থাকা উচিত:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bg": "Напишете PHP функция `function generatePermutations($str)` за решаване на следния проблем:\nОписание на въпроса:\nДаден ви е низ, състоящ се от различни малки букви. Вашата задача е да напишете функция generatePermutations, която генерира всички възможни пермутации на входния низ и ги връща в лексикографски ред.\n\nВход:\nНиз, състоящ се от различни малки букви, където дължината на низа е най-много 6.\n\nИзход:\nМасив, съдържащ всички пермутации на входния низ, сортирани в лексикографски ред.\n\nПример:\n$permutations = generatePermutations(\"abc\");\n$permutations трябва да съдържа следния масив:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "zh": "编写一个 PHP 函数 `function generatePermutations($str)` 来解决以下问题：\n\n问题描述：\n给定一个由不同小写字母组成的字符串。你的任务是编写一个函数 generatePermutations，该函数生成输入字符串的所有可能排列，并按字典顺序返回它们。\n\n输入：\n一个由不同小写字母组成的字符串，字符串的长度最多为 6。\n\n输出：\n一个包含输入字符串所有排列的数组，按字典顺序排序。\n\n示例：\n$permutations = generatePermutations(\"abc\");\n$permutations 应该包含以下数组：\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "fr": "Écrire une fonction PHP `function generatePermutations($str)` pour résoudre le problème suivant :  \nDescription de la question :  \nOn vous donne une chaîne de caractères composée de lettres minuscules distinctes. Votre tâche est d'écrire une fonction generatePermutations qui génère toutes les permutations possibles de la chaîne d'entrée et les retourne dans l'ordre lexicographique.\n\nEntrée :  \nUne chaîne de caractères composée de lettres minuscules distinctes, où la longueur de la chaîne est d'au plus 6.\n\nSortie :  \nUn tableau contenant toutes les permutations de la chaîne d'entrée, triées dans l'ordre lexicographique.\n\nExemple :  \n$permutations = generatePermutations(\"abc\");  \n$permutations devrait contenir le tableau suivant :  \n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "de": "Schreiben Sie eine PHP-Funktion `function generatePermutations($str)`, um das folgende Problem zu lösen:\nFragebeschreibung:\nSie erhalten einen String, der aus verschiedenen Kleinbuchstaben besteht. Ihre Aufgabe ist es, eine Funktion generatePermutations zu schreiben, die alle möglichen Permutationen des Eingabestrings generiert und diese in lexikographischer Reihenfolge zurückgibt.\n\nEingabe:\nEin String, der aus verschiedenen Kleinbuchstaben besteht, wobei die Länge des Strings höchstens 6 beträgt.\n\nAusgabe:\nEin Array, das alle Permutationen des Eingabestrings enthält, sortiert in lexikographischer Reihenfolge.\n\nBeispiel:\n$permutations = generatePermutations(\"abc\");\n$permutations sollte das folgende Array enthalten:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "ha": "Rubuta aikin PHP `function generatePermutations($str)` don warware matsalar mai zuwa:\n\nBayanin Tambaya:\nAn ba ku wani kirtani da ya ƙunshi ƙananan haruffa daban-daban. Aikin ku shine rubuta aikin generatePermutations wanda ke samar da dukkan yiwuwar permutations na kirtanin shigarwa kuma ya mayar da su cikin tsari na lexicographical.\n\nShigarwa:\nWani kirtani da ya ƙunshi ƙananan haruffa daban-daban, inda tsawon kirtanin bai wuce 6 ba.\n\nFitarwa:\nWani tsararren tsari da ke ƙunshe da duk permutations na kirtanin shigarwa, an jera su cikin tsari na lexicographical.\n\nMisali:\n$permutations = generatePermutations(\"abc\");\n$permutations ya kamata ya ƙunshi tsari mai zuwa:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hi": "PHP फ़ंक्शन `function generatePermutations($str)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nप्रश्न विवरण:\nआपको छोटे अक्षरों से बनी एक स्ट्रिंग दी गई है जिसमें सभी अक्षर भिन्न हैं। आपका कार्य एक फ़ंक्शन generatePermutations लिखना है जो इनपुट स्ट्रिंग की सभी संभावित क्रमचयों को उत्पन्न करता है और उन्हें शब्दकोशीय क्रम में लौटाता है।\n\nइनपुट:\nछोटे अक्षरों से बनी एक स्ट्रिंग, जिसमें सभी अक्षर भिन्न हैं और स्ट्रिंग की लंबाई अधिकतम 6 है।\n\nआउटपुट:\nएक ऐरे जिसमें इनपुट स्ट्रिंग की सभी क्रमचय शामिल हैं, शब्दकोशीय क्रम में सॉर्ट की गई।\n\nउदाहरण:\n$permutations = generatePermutations(\"abc\");\n$permutations में निम्नलिखित ऐरे शामिल होना चाहिए:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hu": "Írj egy PHP függvényt `function generatePermutations($str)` a következő probléma megoldására:\nKérdés leírása:\nAdott egy karakterlánc, amely különböző kisbetűkből áll. A feladatod az, hogy írj egy generatePermutations függvényt, amely az input karakterlánc összes lehetséges permutációját generálja, és azokat lexikografikus sorrendben adja vissza.\n\nBemenet:\nEgy karakterlánc, amely különböző kisbetűkből áll, ahol a karakterlánc hossza legfeljebb 6 lehet.\n\nKimenet:\nEgy tömb, amely az input karakterlánc összes permutációját tartalmazza, lexikografikus sorrendben rendezve.\n\nPélda:\n$permutations = generatePermutations(\"abc\");\n$permutations a következő tömböt kell, hogy tartalmazza:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]"
    },
    "instruction_bertscore": {
      "sq": "0.988642314812425",
      "hy": "0.9927041074742076",
      "bn": "0.9838618774320584",
      "bg": "0.9872151555246894",
      "zh": "0.9626483513679134",
      "fr": "0.9945366713696354",
      "de": "0.9870991553821651",
      "ha": "0.9774844517881713",
      "hi": "0.95288209279319",
      "hu": "0.9854558862398635"
    },
    "level": "hard",
    "test": "function main(){\n    $permutations = generatePermutations(\"abc\");\n    assert($permutations === [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]);\n    $permutations = generatePermutations(\"abcd\");\n    assert($permutations === [\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"]);\n\n}\n\n\nmain();\n?>",
    "entry_point": "generatePermutations",
    "signature": "function generatePermutations($str)",
    "docstring": {
      "en": "Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations should contain the following array:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "sq": "Përshkrimi i Pyetjes:\nJu jepet një varg që përbëhet nga shkronja të vogla të dallueshme. Detyra juaj është të shkruani një funksion generatePermutations që gjeneron të gjitha permutacionet e mundshme të vargut hyrës dhe i kthen ato në rend leksikografik.\n\nHyrja:\nNjë varg që përbëhet nga shkronja të vogla të dallueshme, ku gjatësia e vargut është maksimumi 6.\n\nDalja:\nNjë varg që përmban të gjitha permutacionet e vargut hyrës, të renditura në rend leksikografik.\n\nShembull:\n$permutations = generatePermutations(\"abc\");\n$permutations duhet të përmbajë vargun e mëposhtëm:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hy": "Հարցի Նկարագրություն:  \nՁեզ տրված է փոքրատառ տարբերանշաններից բաղկացած տող: Ձեր խնդիրն է գրել generatePermutations ֆունկցիան, որը կգեներացնի մուտքային տողի բոլոր հնարավոր փոխատեղումները և կվերադարձնի դրանք բառարանային կարգով:\n\nՄուտք:  \nՓոքրատառ տարբերանշաններից բաղկացած տող, որի երկարությունը առավելագույնը 6 է:\n\nԵլք:  \nԶանգված, որը պարունակում է մուտքային տողի բոլոր փոխատեղումները, դասավորված բառարանային կարգով:\n\nՕրինակ:  \n$permutations = generatePermutations(\"abc\");  \n$permutations-ը պետք է պարունակի հետևյալ զանգվածը:  \n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bn": "প্রশ্নের বিবরণ:\nআপনাকে একটি স্ট্রিং দেওয়া হয়েছে যা পৃথক ছোট হাতের অক্ষর নিয়ে গঠিত। আপনার কাজ হল একটি ফাংশন generatePermutations লেখা যা ইনপুট স্ট্রিংয়ের সমস্ত সম্ভাব্য বিন্যাস তৈরি করে এবং সেগুলিকে বর্ণানুক্রমিক ক্রমে ফেরত দেয়।\n\nইনপুট:\nএকটি স্ট্রিং যা পৃথক ছোট হাতের অক্ষর নিয়ে গঠিত, যেখানে স্ট্রিংয়ের দৈর্ঘ্য সর্বাধিক ৬।\n\nআউটপুট:\nএকটি অ্যারে যা ইনপুট স্ট্রিংয়ের সমস্ত বিন্যাস ধারণ করে, বর্ণানুক্রমিক ক্রমে সাজানো।\n\nউদাহরণ:\n$permutations = generatePermutations(\"abc\");\n$permutations নিম্নলিখিত অ্যারে ধারণ করা উচিত:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bg": "Описание на задачата:\nДаден е низ, състоящ се от различни малки букви. Вашата задача е да напишете функция generatePermutations, която генерира всички възможни пермутации на входния низ и ги връща в лексикографски ред.\n\nВход:\nНиз, състоящ се от различни малки букви, където дължината на низа е най-много 6.\n\nИзход:\nМасив, съдържащ всички пермутации на входния низ, сортирани в лексикографски ред.\n\nПример:\n$permutations = generatePermutations(\"abc\");\n$permutations трябва да съдържа следния масив:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "zh": "问题描述：\n给定一个由不同小写字母组成的字符串。你的任务是编写一个函数 generatePermutations，生成输入字符串的所有可能排列，并按字典顺序返回它们。\n\n输入：\n一个由不同小写字母组成的字符串，字符串的长度最多为6。\n\n输出：\n一个包含输入字符串所有排列的数组，按字典顺序排序。\n\n示例：\n$permutations = generatePermutations(\"abc\");\n$permutations 应该包含以下数组：\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "fr": "Description de la question :\nOn vous donne une chaîne de caractères composée de lettres minuscules distinctes. Votre tâche est d'écrire une fonction generatePermutations qui génère toutes les permutations possibles de la chaîne d'entrée et les renvoie dans l'ordre lexicographique.\n\nEntrée :\nUne chaîne de caractères composée de lettres minuscules distinctes, dont la longueur est au plus de 6.\n\nSortie :\nUn tableau contenant toutes les permutations de la chaîne d'entrée, triées dans l'ordre lexicographique.\n\nExemple :\n$permutations = generatePermutations(\"abc\");\n$permutations devrait contenir le tableau suivant :\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "de": "Fragebeschreibung:\nSie erhalten einen String, der aus verschiedenen Kleinbuchstaben besteht. Ihre Aufgabe ist es, eine Funktion generatePermutations zu schreiben, die alle möglichen Permutationen des Eingabestrings generiert und diese in lexikographischer Reihenfolge zurückgibt.\n\nEingabe:\nEin String, der aus verschiedenen Kleinbuchstaben besteht, wobei die Länge des Strings höchstens 6 beträgt.\n\nAusgabe:\nEin Array, das alle Permutationen des Eingabestrings enthält, sortiert in lexikographischer Reihenfolge.\n\nBeispiel:\n$permutations = generatePermutations(\"abc\");\n$permutations sollte das folgende Array enthalten:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "ha": "Bayanin Tambaya:\nAn ba ku wani kirtani da ya ƙunshi haruffa ƙanana na musamman. Ayyukanku shine rubuta wata aikin generatePermutations wanda ke samar da duk yuwuwar permutations na kirtani mai shigowa kuma ya mayar da su a cikin tsari na haruffa.\n\nShigar:\nWani kirtani da ya ƙunshi haruffa ƙanana na musamman, inda tsawon kirtani bai fi 6 ba.\n\nFitarwa:\nWani jerin da ke ƙunshe da duk permutations na kirtani mai shigowa, an jera su a cikin tsari na haruffa.\n\nMisali:\n$permutations = generatePermutations(\"abc\");\n$permutations ya kamata ya ƙunshi jerin mai zuwa:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hi": "प्रश्न विवरण:\nआपको छोटे अक्षरों से बनी एक स्ट्रिंग दी गई है जिसमें सभी अक्षर भिन्न हैं। आपका कार्य एक फ़ंक्शन generatePermutations लिखना है जो इनपुट स्ट्रिंग की सभी संभावित क्रमचयों को उत्पन्न करता है और उन्हें शब्दकोश क्रम में लौटाता है।\n\nInput:\nएक स्ट्रिंग जिसमें भिन्न छोटे अक्षर होते हैं, जहाँ स्ट्रिंग की लंबाई अधिकतम 6 है।\n\nOutput:\nएक ऐरे जिसमें इनपुट स्ट्रिंग के सभी क्रमचय होते हैं, जो शब्दकोश क्रम में क्रमित होते हैं।\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations में निम्नलिखित ऐरे होना चाहिए:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hu": "Kérdés leírása:\nAdott egy karakterlánc, amely különböző kisbetűkből áll. Az Ön feladata, hogy írjon egy generatePermutations függvényt, amely az input karakterlánc összes lehetséges permutációját generálja, és azokat lexikografikus sorrendben adja vissza.\n\nBemenet:\nEgy karakterlánc, amely különböző kisbetűkből áll, ahol a karakterlánc hossza legfeljebb 6.\n\nKimenet:\nEgy tömb, amely az input karakterlánc összes permutációját tartalmazza, lexikografikus sorrendben rendezve.\n\nPélda:\n$permutations = generatePermutations(\"abc\");\nA $permutations tömbnek a következő elemeket kell tartalmaznia:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]"
    },
    "docstring_bertscore": {
      "sq": "0.9716500816060335",
      "hy": "0.9553556369282175",
      "bn": "0.9900647069710159",
      "bg": "0.976133963827515",
      "zh": "0.9690486195056196",
      "fr": "0.9715493760028489",
      "de": "0.9937155333744372",
      "ha": "0.8998986304344199",
      "hi": "0.9623865565257095",
      "hu": "0.9764029093634363"
    }
  },
  {
    "task_id": "PHP/38",
    "prompt": {
      "en": "<?php\n\n/**\n * Question:\n * You have M identical apples that need to be placed into N identical plates. You are allowed\n * to have some plates empty. How many different ways are there to distribute the apples into the plates?\n * 5,1,1 and 1,5,1 are the same division method.\n *\n * Example:\n * - Input: M = 7, N = 3\n * - Output: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "sq": "<?php\n\n/**\n * Pyetje:\n * Ju keni M mollë identike që duhet të vendosen në N pjata identike. Ju lejohet\n * të keni disa pjata bosh. Sa mënyra të ndryshme ka për të shpërndarë mollët në pjata?\n * 5,1,1 dhe 1,5,1 janë e njëjta metodë ndarjeje.\n *\n * Shembull:\n * - Hyrja: M = 7, N = 3\n * - Dalja: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "hy": "<?php\n\n/**\n * Հարց:\n * Դուք ունեք M նույնական խնձորներ, որոնք պետք է տեղադրվեն N նույնական ափսեների մեջ: Դուք կարող եք\n * ունենալ որոշ ափսեներ դատարկ: Քանի՞ տարբեր եղանակներ կան խնձորները ափսեների մեջ բաշխելու համար:\n * 5,1,1 և 1,5,1 նույն բաժանման մեթոդն են:\n *\n * Օրինակ:\n * - Մուտք: M = 7, N = 3\n * - Ելք: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "bn": "<?php\n\n/**\n * প্রশ্ন:\n * আপনার কাছে M সংখ্যক অভিন্ন আপেল রয়েছে যা N সংখ্যক অভিন্ন প্লেটে রাখতে হবে। \n * কিছু প্লেট খালি রাখতে পারবেন। আপেলগুলো প্লেটে বিতরণ করার কতগুলো ভিন্ন উপায় আছে?\n * 5,1,1 এবং 1,5,1 একই বিভাজন পদ্ধতি।\n *\n * উদাহরণ:\n * - ইনপুট: M = 7, N = 3\n * - আউটপুট: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "bg": "<?php\n\n/**\n * Въпрос:\n * Имате M еднакви ябълки, които трябва да бъдат поставени в N еднакви чинии. Позволено е\n * някои чинии да останат празни. Колко различни начина има за разпределяне на ябълките в чиниите?\n * 5,1,1 и 1,5,1 са един и същ метод на разделяне.\n *\n * Пример:\n * - Вход: M = 7, N = 3\n * - Изход: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "zh": "<?php\n\n/**\n * 问题：\n * 你有 M 个相同的苹果需要放入 N 个相同的盘子中。允许有些盘子是空的。有多少种不同的方法可以将苹果分配到盘子中？\n * 5,1,1 和 1,5,1 是相同的分配方法。\n *\n * 示例：\n * - 输入: M = 7, N = 3\n * - 输出: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "fr": "<?php\n\n/**\n * Question :\n * Vous avez M pommes identiques qui doivent être placées dans N assiettes identiques. Vous êtes autorisé\n * à laisser certaines assiettes vides. Combien de façons différentes existe-t-il de distribuer les pommes dans les assiettes ?\n * 5,1,1 et 1,5,1 sont la même méthode de division.\n *\n * Exemple :\n * - Entrée : M = 7, N = 3\n * - Sortie : 8\n *\n */\n\n function countDistributionMethods($M, $N) ",
      "de": "<?php\n\n/**\n * Frage:\n * Sie haben M identische Äpfel, die auf N identische Teller verteilt werden müssen. Es ist erlaubt,\n * einige Teller leer zu lassen. Wie viele verschiedene Möglichkeiten gibt es, die Äpfel auf die Teller zu verteilen?\n * 5,1,1 und 1,5,1 sind die gleiche Verteilungsmethode.\n *\n * Beispiel:\n * - Eingabe: M = 7, N = 3\n * - Ausgabe: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "ha": "<?php\n\n/**\n * Tambaya:\n * Kana da M na tuffa iri ɗaya waɗanda za a sanya su cikin N faranti iri ɗaya. An yarda\n * ka bar wasu faranti babu komai. Waɗanne hanyoyi daban-daban ne ake da su don rarraba tuffa cikin faranti?\n * 5,1,1 da 1,5,1 iri ɗaya ne hanyar rarrabawa.\n *\n * Misali:\n * - Shigarwa: M = 7, N = 3\n * - Fitarwa: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "hi": "<?php\n\n/**\n * प्रश्न:\n * आपके पास M समान सेब हैं जिन्हें N समान प्लेटों में रखा जाना है। आपको कुछ प्लेटों को खाली रखने की अनुमति है। \n * सेबों को प्लेटों में वितरित करने के कितने विभिन्न तरीके हैं?\n * 5,1,1 और 1,5,1 को एक ही विभाजन विधि माना जाता है।\n *\n * उदाहरण:\n * - इनपुट: M = 7, N = 3\n * - आउटपुट: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "hu": "<?php\n\n/**\n * Kérdés:\n * Van M azonos almád, amelyeket N azonos tányérba kell elhelyezni. Megengedett,\n * hogy néhány tányér üres maradjon. Hány különböző módon lehet az almákat elosztani a tányérokba?\n * Az 5,1,1 és az 1,5,1 ugyanaz az elosztási módszer.\n *\n * Példa:\n * - Bemenet: M = 7, N = 3\n * - Kimenet: 8\n\n */\n\n function countDistributionMethods($M, $N) "
    },
    "prompt_bertscore": {
      "sq": "0.9898074806275757",
      "hy": "0.9786947066998168",
      "bn": "0.9575177286257822",
      "bg": "0.9806392981301484",
      "zh": "0.9580506539380989",
      "fr": "0.9836245141267217",
      "de": "0.9684221392838356",
      "ha": "0.9686767834323222",
      "hi": "0.9668750072459548",
      "hu": "0.9618073503346117"
    },
    "canonical_solution": " {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n",
    "instruction": {
      "en": "Write a PHP function `function countDistributionMethods($M, $N)` to solve the following problem:\nQuestion:\nYou have M identical apples that need to be placed into N identical plates. You are allowed\nto have some plates empty. How many different ways are there to distribute the apples into the plates?\n5,1,1 and 1,5,1 are the same division method.\n\nExample:\n- Input: M = 7, N = 3\n- Output: 8",
      "sq": "Shkruani një funksion PHP `function countDistributionMethods($M, $N)` për të zgjidhur problemin e mëposhtëm:\nPyetje:\nJu keni M mollë identike që duhet të vendosen në N pjata identike. Ju lejohet\ntë keni disa pjata bosh. Sa mënyra të ndryshme ka për të shpërndarë mollët në pjata?\n5,1,1 dhe 1,5,1 janë e njëjta metodë ndarjeje.\n\nShembull:\n- Hyrja: M = 7, N = 3\n- Dalja: 8",
      "hy": "Գրեք PHP ֆունկցիա `function countDistributionMethods($M, $N)`՝ հետևյալ խնդիրը լուծելու համար:\nՀարց:\nԴուք ունեք M նույնական խնձորներ, որոնք պետք է տեղադրվեն N նույնական ափսեների մեջ։ Դուք կարող եք ունենալ որոշ ափսեներ դատարկ։ Քանի՞ տարբեր եղանակ կա խնձորները ափսեների մեջ բաշխելու համար։\n5,1,1 և 1,5,1 նույն բաժանման մեթոդն են։\n\nՕրինակ:\n- Մուտք: M = 7, N = 3\n- Ելք: 8",
      "bn": "PHP ফাংশন `function countDistributionMethods($M, $N)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nপ্রশ্ন:\nআপনার কাছে M টি অভিন্ন আপেল রয়েছে যা N টি অভিন্ন প্লেটে রাখতে হবে। কিছু প্লেট খালি রাখা যেতে পারে। আপেলগুলো প্লেটে বিতরণের কতগুলো ভিন্ন উপায় আছে?\n5,1,1 এবং 1,5,1 একই বিভাজন পদ্ধতি।\n\nউদাহরণ:\n- ইনপুট: M = 7, N = 3\n- আউটপুট: 8",
      "bg": "Напишете PHP функция `function countDistributionMethods($M, $N)`, за да решите следния проблем:\nВъпрос:\nИмате M еднакви ябълки, които трябва да бъдат поставени в N еднакви чинии. Позволено е\nнякои чинии да останат празни. Колко различни начина има за разпределяне на ябълките в чиниите?\n5,1,1 и 1,5,1 са един и същ метод на разпределение.\n\nПример:\n- Вход: M = 7, N = 3\n- Изход: 8",
      "zh": "编写一个 PHP 函数 `function countDistributionMethods($M, $N)` 来解决以下问题：\n\n问题：\n你有 M 个相同的苹果，需要放入 N 个相同的盘子中。允许有些盘子为空。将苹果分配到盘子中的不同方法有多少种？\n5,1,1 和 1,5,1 被视为相同的分配方法。\n\n示例：\n- 输入: M = 7, N = 3\n- 输出: 8",
      "fr": "Écrire une fonction PHP `function countDistributionMethods($M, $N)` pour résoudre le problème suivant :  \nQuestion :  \nVous avez M pommes identiques qui doivent être placées dans N assiettes identiques. Vous êtes autorisé à avoir certaines assiettes vides. Combien y a-t-il de façons différentes de distribuer les pommes dans les assiettes ?  \n5,1,1 et 1,5,1 sont la même méthode de division.\n\nExemple :  \n- Entrée : M = 7, N = 3  \n- Sortie : 8",
      "de": "Schreiben Sie eine PHP-Funktion `function countDistributionMethods($M, $N)`, um das folgende Problem zu lösen:\nFrage:\nSie haben M identische Äpfel, die auf N identische Teller verteilt werden müssen. Es ist erlaubt, einige Teller leer zu lassen. Wie viele verschiedene Möglichkeiten gibt es, die Äpfel auf die Teller zu verteilen?\n5,1,1 und 1,5,1 sind die gleiche Verteilungsmethode.\n\nBeispiel:\n- Eingabe: M = 7, N = 3\n- Ausgabe: 8",
      "ha": "Rubuta aikin PHP `function countDistributionMethods($M, $N)` don warware matsalar mai zuwa:\nTambaya:\nKana da M na tuffa iri daya da ake bukatar a sanya su cikin N faranti iri daya. Ana yarda\na bar wasu faranti babu komai. Ta yaya hanyoyi daban-daban suke don rarraba tuffa cikin faranti?\n5,1,1 da 1,5,1 iri daya ne na hanyar rarrabawa.\n\nMisali:\n- Shigarwa: M = 7, N = 3\n- Fitarwa: 8",
      "hi": "PHP फ़ंक्शन `function countDistributionMethods($M, $N)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nप्रश्न:\nआपके पास M समान सेब हैं जिन्हें N समान प्लेटों में रखा जाना है। आपको कुछ प्लेटों को खाली रखने की अनुमति है। सेबों को प्लेटों में वितरित करने के कितने अलग-अलग तरीके हैं?\n5,1,1 और 1,5,1 समान विभाजन विधि हैं।\n\nउदाहरण:\n- इनपुट: M = 7, N = 3\n- आउटपुट: 8",
      "hu": "Írj egy PHP függvényt `function countDistributionMethods($M, $N)` a következő probléma megoldására:\nKérdés:\nVan M darab azonos almád, amelyeket N darab azonos tányérba kell helyezni. Megengedett, hogy néhány tányér üres maradjon. Hány különböző módon lehet elosztani az almákat a tányérokba?\nAz 5,1,1 és az 1,5,1 ugyanaz az elosztási módszer.\n\nPélda:\n- Bemenet: M = 7, N = 3\n- Kimenet: 8"
    },
    "instruction_bertscore": {
      "sq": "0.9865797369357588",
      "hy": "0.9828846159573668",
      "bn": "0.9559010759545393",
      "bg": "0.978091863493376",
      "zh": "0.9758475388180627",
      "fr": "0.989660692775991",
      "de": "0.9678204878596809",
      "ha": "0.9712130947677567",
      "hi": "0.9718107735842907",
      "hu": "0.9582486884279906"
    },
    "level": "hard",
    "test": "function main(){\n    // Test cases\n    assert(countDistributionMethods(7, 3) === 8);\n    assert(countDistributionMethods(5, 2) === 3);\n    assert(countDistributionMethods(10, 5) === 30);\n\n}\n\n\nmain();\n?>",
    "entry_point": "countDistributionMethods",
    "signature": "function countDistributionMethods($M, $N)",
    "docstring": {
      "en": "Question:\nYou have M identical apples that need to be placed into N identical plates. You are allowed\nto have some plates empty. How many different ways are there to distribute the apples into the plates?\n5,1,1 and 1,5,1 are the same division method.\n\nExample:\n- Input: M = 7, N = 3\n- Output: 8",
      "sq": "Pyetje:\nJu keni M mollë identike që duhet të vendosen në N pjata identike. Ju lejohet\ntë keni disa pjata bosh. Sa mënyra të ndryshme ka për të shpërndarë mollët në pjata?\n5,1,1 dhe 1,5,1 janë e njëjta metodë ndarjeje.\n\nShembull:\n- Hyrja: M = 7, N = 3\n- Dalja: 8",
      "hy": "Հարց:\nԴուք ունեք M նույնական խնձորներ, որոնք պետք է տեղադրվեն N նույնական ափսեների մեջ։ Դուք կարող եք ունենալ որոշ ափսեներ դատարկ։ Քանի՞ տարբեր եղանակ կա խնձորները ափսեների մեջ բաշխելու համար։ 5,1,1 և 1,5,1 նույն բաժանման մեթոդն են։\n\nՕրինակ:\n- Մուտքագրում: M = 7, N = 3\n- Ելք: 8",
      "bn": "প্রশ্ন:\nআপনার কাছে M সংখ্যক অভিন্ন আপেল আছে যা N সংখ্যক অভিন্ন প্লেটে রাখতে হবে। আপনি কিছু প্লেট খালি রাখতে পারেন। আপেলগুলোকে প্লেটে বিতরণ করার কতগুলো ভিন্ন উপায় আছে?\n5,1,1 এবং 1,5,1 একই বিভাজন পদ্ধতি।\n\nউদাহরণ:\n- ইনপুট: M = 7, N = 3\n- আউটপুট: 8",
      "bg": "Въпрос:\nИмате M еднакви ябълки, които трябва да бъдат поставени в N еднакви чинии. Позволено е да има някои празни чинии. Колко различни начина има за разпределяне на ябълките в чиниите?  \n5,1,1 и 1,5,1 са един и същ метод на разпределение.\n\nПример:  \n- Вход: M = 7, N = 3  \n- Изход: 8",
      "zh": "问题：\n你有M个相同的苹果需要放入N个相同的盘子中。允许有些盘子为空。将苹果分配到盘子中的不同方法有多少种？5,1,1 和 1,5,1 被视为相同的分配方法。\n\n示例：  \n- 输入: M = 7, N = 3  \n- 输出: 8",
      "fr": "Question :\nVous avez M pommes identiques qui doivent être placées dans N assiettes identiques. Vous êtes autorisé à avoir certaines assiettes vides. Combien y a-t-il de façons différentes de distribuer les pommes dans les assiettes ?\n5,1,1 et 1,5,1 sont la même méthode de division.\n\nExemple :\n- Input : M = 7, N = 3\n- Output : 8",
      "de": "Frage:\nSie haben M identische Äpfel, die auf N identische Teller verteilt werden müssen. Es ist erlaubt,\neinige Teller leer zu lassen. Wie viele verschiedene Möglichkeiten gibt es, die Äpfel auf die Teller zu verteilen?\n5,1,1 und 1,5,1 sind die gleiche Verteilungsmethode.\n\nBeispiel:\n- Eingabe: M = 7, N = 3\n- Ausgabe: 8",
      "ha": "Tambaya:\nKana da M na tuffa masu kama da juna waɗanda ake buƙatar sanya su cikin N na faranti masu kama da juna. Ana yarda da samun wasu faranti babu komai. Ta yaya hanyoyi daban-daban suke don rarraba tuffa cikin faranti?\n5,1,1 da 1,5,1 suna daidai da hanyar rarrabawa iri ɗaya.\n\nMisali:\n- Shigarwa: M = 7, N = 3\n- Fitarwa: 8",
      "hi": "प्रश्न:\nआपके पास M समान सेब हैं जिन्हें N समान प्लेटों में रखा जाना है। आपको कुछ प्लेटों को खाली रखने की अनुमति है। सेबों को प्लेटों में वितरित करने के कितने विभिन्न तरीके हैं?\n5,1,1 और 1,5,1 एक ही विभाजन विधि हैं।\n\nउदाहरण:\n- इनपुट: M = 7, N = 3\n- आउटपुट: 8",
      "hu": "Kérdés:\nVan M azonos almád, amelyeket N azonos tányérba kell helyezni. Megengedett, hogy néhány tányér üres maradjon. Hány különböző módon lehet az almákat elosztani a tányérok között?\nAz 5,1,1 és az 1,5,1 ugyanaz az elosztási módszer.\n\nPélda:\n- Bemenet: M = 7, N = 3\n- Kimenet: 8"
    },
    "docstring_bertscore": {
      "sq": "0.9837677266314478",
      "hy": "0.9759023608032285",
      "bn": "0.9748539896521262",
      "bg": "0.9728059117932756",
      "zh": "0.9528368050663141",
      "fr": "0.9766519918612541",
      "de": "0.9567396934232686",
      "ha": "0.9737680773590085",
      "hi": "0.9787018573935341",
      "hu": "0.9553874177891831"
    }
  },
  {
    "task_id": "PHP/39",
    "prompt": {
      "en": "<?php\n\n/**\n * Generates all possible ways to express a natural number as the sum of smaller natural numbers.\n * For example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\n * This function returns all these expressions in lexicographical (dictionary) order.\n * below is output when n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n The input natural number (greater than 1).\n * @return array An array of strings representing all possible expressions.\n */\n\n function generateNumberExpressions($n) ",
      "sq": "<?php\n\n/**\n * Gjeneron të gjitha mënyrat e mundshme për të shprehur një numër natyror si shumën e numrave natyrorë më të vegjël.\n * Për shembull, kur n=7, ka 14 mënyra të ndryshme për ta shprehur atë si shumën e numrave natyrorë më të vegjël.\n * Kjo funksion kthen të gjitha këto shprehje në rend leksikografik (rend fjalori).\n * më poshtë është dalja kur n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Numri natyror i dhënë (më i madh se 1).\n * @return array Një varg me vargje që përfaqësojnë të gjitha shprehjet e mundshme.\n */\n\n function generateNumberExpressions($n) ",
      "hy": "<?php\n\n/**\n * Գեներացնում է բոլոր հնարավոր եղանակները բնական թիվը ավելի փոքր բնական թվերի գումարով արտահայտելու համար:\n * Օրինակ, երբ n=7, կա 14 տարբեր եղանակներ այն ավելի փոքր բնական թվերի գումարով արտահայտելու համար:\n * Այս ֆունկցիան վերադարձնում է բոլոր այս արտահայտությունները բառարանի կարգով:\n * ստորև բերված է արդյունքը, երբ n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Մուտքային բնական թիվը (ավելի մեծ քան 1):\n * @return array Տողերի զանգված, որը ներկայացնում է բոլոր հնարավոր արտահայտությունները:\n */\n\n function generateNumberExpressions($n) ",
      "bn": "<?php\n\n/**\n * একটি প্রাকৃতিক সংখ্যা ছোট প্রাকৃতিক সংখ্যাগুলোর যোগফল হিসেবে প্রকাশ করার সমস্ত সম্ভাব্য উপায় তৈরি করে।\n * উদাহরণস্বরূপ, যখন n=7, তখন এটি ছোট প্রাকৃতিক সংখ্যাগুলোর যোগফল হিসেবে প্রকাশ করার 14টি ভিন্ন উপায় আছে।\n * এই ফাংশনটি সমস্ত এই প্রকাশগুলি অভিধানিক (ডিকশনারি) ক্রমে ফেরত দেয়।\n * নিচে n = 7 হলে আউটপুট দেখানো হয়েছে\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n ইনপুট প্রাকৃতিক সংখ্যা (১ এর চেয়ে বড়)।\n * @return array সমস্ত সম্ভাব্য প্রকাশের স্ট্রিংগুলির একটি অ্যারে।\n */\n\n function generateNumberExpressions($n) ",
      "bg": "<?php\n\n/**\n * Генерира всички възможни начини за изразяване на естествено число като сума от по-малки естествени числа.\n * Например, когато n=7, има 14 различни начина да се изрази като сума от по-малки естествени числа.\n * Тази функция връща всички тези изрази в лексикографски (речников) ред.\n * по-долу е изходът, когато n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Входното естествено число (по-голямо от 1).\n * @return array Масив от низове, представляващи всички възможни изрази.\n */\n\n function generateNumberExpressions($n) ",
      "zh": "<?php\n\n/**\n * 生成将一个自然数表示为较小自然数之和的所有可能方式。\n * 例如，当 n=7 时，有 14 种不同的方式将其表示为较小自然数之和。\n * 此函数按字典顺序返回所有这些表达式。\n * 以下是 n = 7 时的输出\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n 输入的自然数（大于1）。\n * @return array 一个字符串数组，表示所有可能的表达式。\n */\n\n function generateNumberExpressions($n) ",
      "fr": "<?php\n\n/**\n * Génère toutes les façons possibles d'exprimer un nombre naturel comme la somme de nombres naturels plus petits.\n * Par exemple, lorsque n=7, il y a 14 façons différentes de l'exprimer comme la somme de nombres naturels plus petits.\n * Cette fonction renvoie toutes ces expressions dans l'ordre lexicographique (ordre du dictionnaire).\n * ci-dessous est la sortie lorsque n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Le nombre naturel d'entrée (supérieur à 1).\n * @return array Un tableau de chaînes représentant toutes les expressions possibles.\n */\n\n function generateNumberExpressions($n) ",
      "de": "<?php\n\n/**\n * Generiert alle möglichen Arten, eine natürliche Zahl als Summe kleinerer natürlicher Zahlen auszudrücken.\n * Zum Beispiel gibt es, wenn n=7 ist, 14 verschiedene Möglichkeiten, sie als Summe kleinerer natürlicher Zahlen auszudrücken.\n * Diese Funktion gibt all diese Ausdrücke in lexikographischer (Wörterbuch-) Reihenfolge zurück.\n * unten ist die Ausgabe, wenn n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Die Eingabe natürliche Zahl (größer als 1).\n * @return array Ein Array von Strings, das alle möglichen Ausdrücke darstellt.\n */\n\n function generateNumberExpressions($n) ",
      "ha": "<?php\n\n/**\n * Yana samar da duk hanyoyin da za a iya bayyana lamba ta dabi'a a matsayin jumlar ƙananan lambobi na dabi'a.\n * Alal misali, idan n=7, akwai hanyoyi 14 daban-daban don bayyana shi a matsayin jumlar ƙananan lambobi na dabi'a.\n * Wannan aikin yana dawo da duk waɗannan bayanan a cikin tsari na haruffa (kamus).\n * ƙasa akwai fitarwa lokacin da n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Lambar shigarwa ta dabi'a (fiye da 1).\n * @return array Jeri na kirtani da ke wakiltar duk yiwuwar bayanai.\n */\n\n function generateNumberExpressions($n) ",
      "hi": "<?php\n\n/**\n * एक प्राकृतिक संख्या को छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के सभी संभावित तरीकों को उत्पन्न करता है।\n * उदाहरण के लिए, जब n=7 होता है, तो इसे छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के 14 अलग-अलग तरीके होते हैं।\n * यह फ़ंक्शन इन सभी अभिव्यक्तियों को शब्दकोश क्रम में लौटाता है।\n * नीचे दिया गया है जब n = 7 का आउटपुट\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n इनपुट प्राकृतिक संख्या (1 से अधिक)।\n * @return array सभी संभावित अभिव्यक्तियों का एक स्ट्रिंग्स का ऐरे।\n */\n\n function generateNumberExpressions($n) ",
      "hu": "<?php\n\n/**\n * Minden lehetséges módot generál egy természetes szám kifejezésére kisebb természetes számok összegével.\n * Például, amikor n=7, 14 különböző mód van arra, hogy kifejezzük kisebb természetes számok összegével.\n * Ez a függvény visszaadja ezeket a kifejezéseket lexikografikus (szótári) sorrendben.\n * alább látható a kimenet, amikor n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n A bemeneti természetes szám (nagyobb, mint 1).\n * @return array Egy karakterláncokat tartalmazó tömb, amely az összes lehetséges kifejezést reprezentálja.\n */\n\n function generateNumberExpressions($n) "
    },
    "prompt_bertscore": {
      "sq": "0.9879055947291667",
      "hy": "0.9463227217202749",
      "bn": "0.9880788004214291",
      "bg": "0.9863640243419549",
      "zh": "0.969016640014273",
      "fr": "0.990491960920622",
      "de": "0.9921620451643633",
      "ha": "0.966243561264645",
      "hi": "0.968948509793578",
      "hu": "0.9920508121509838"
    },
    "canonical_solution": " {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n",
    "instruction": {
      "en": "Write a PHP function `function generateNumberExpressions($n)` to solve the following problem:\nGenerates all possible ways to express a natural number as the sum of smaller natural numbers.\nFor example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\nThis function returns all these expressions in lexicographical (dictionary) order.\nbelow is output when n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n The input natural number (greater than 1).\n@return array An array of strings representing all possible expressions.",
      "sq": "Shkruani një funksion PHP `function generateNumberExpressions($n)` për të zgjidhur problemin e mëposhtëm:\nGjeneron të gjitha mënyrat e mundshme për të shprehur një numër natyror si shumën e numrave natyrorë më të vegjël.\nPër shembull, kur n=7, ka 14 mënyra të ndryshme për ta shprehur atë si shumën e numrave natyrorë më të vegjël.\nKy funksion kthen të gjitha këto shprehje në rend leksikografik (rend fjalori).\nmë poshtë është rezultati kur n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Numri natyror i dhënë (më i madh se 1).\n@return array Një varg i vargjeve që përfaqësojnë të gjitha shprehjet e mundshme.",
      "hy": "Գրեք PHP ֆունկցիա `function generateNumberExpressions($n)` հետևյալ խնդիրը լուծելու համար:\nԳեներացնում է բոլոր հնարավոր եղանակները բնական թիվը փոքր բնական թվերի գումարով արտահայտելու համար:\nՕրինակ, երբ n=7, կա 14 տարբեր եղանակ այն արտահայտելու որպես փոքր բնական թվերի գումար:\nԱյս ֆունկցիան վերադարձնում է բոլոր այդ արտահայտությունները բառարանի կարգով:\nստորև բերված է արդյունքը, երբ n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Մուտքային բնական թիվ (ավելի մեծ քան 1):\n@return array Տողերի զանգված, որը ներկայացնում է բոլոր հնարավոր արտահայտությունները:",
      "bn": "PHP ফাংশন `function generateNumberExpressions($n)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি প্রাকৃতিক সংখ্যা ছোট প্রাকৃতিক সংখ্যার যোগফল হিসাবে প্রকাশ করার সমস্ত সম্ভাব্য উপায় তৈরি করে।\nউদাহরণস্বরূপ, যখন n=7, তখন এটি ছোট প্রাকৃতিক সংখ্যার যোগফল হিসাবে প্রকাশ করার 14টি ভিন্ন উপায় রয়েছে।\nএই ফাংশনটি সমস্ত এই প্রকাশগুলি অভিধানগত (শব্দকোষ) ক্রমে ফেরত দেয়।\nনিচে n = 7 এর আউটপুট দেওয়া হল\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n ইনপুট প্রাকৃতিক সংখ্যা (১ এর চেয়ে বড়)।\n@return array একটি স্ট্রিং এর অ্যারে যা সমস্ত সম্ভাব্য প্রকাশ উপস্থাপন করে।",
      "bg": "Напишете PHP функция `function generateNumberExpressions($n)`, за да решите следния проблем:\nГенерира всички възможни начини за изразяване на естествено число като сума от по-малки естествени числа.\nНапример, когато n=7, има 14 различни начина да се изрази като сума от по-малки естествени числа.\nТази функция връща всички тези изрази в лексикографски (речников) ред.\nпо-долу е изходът, когато n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Входното естествено число (по-голямо от 1).\n@return array Масив от низове, представляващи всички възможни изрази.",
      "zh": "编写一个 PHP 函数 `function generateNumberExpressions($n)` 来解决以下问题：\n生成所有可能的方法，将一个自然数表示为较小自然数的和。\n例如，当 n=7 时，有 14 种不同的方法将其表示为较小自然数的和。\n此函数按字典顺序返回所有这些表达式。\n以下是 n = 7 时的输出\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n 输入的自然数（大于1）。\n@return array 一个字符串数组，表示所有可能的表达式。",
      "fr": "Écrire une fonction PHP `function generateNumberExpressions($n)` pour résoudre le problème suivant :\nGénère toutes les façons possibles d'exprimer un nombre naturel comme la somme de nombres naturels plus petits.\nPar exemple, lorsque n=7, il y a 14 façons différentes de l'exprimer comme la somme de nombres naturels plus petits.\nCette fonction renvoie toutes ces expressions dans l'ordre lexicographique (ordre du dictionnaire).\nci-dessous est la sortie lorsque n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Le nombre naturel d'entrée (supérieur à 1).\n@return array Un tableau de chaînes représentant toutes les expressions possibles.",
      "de": "Schreiben Sie eine PHP-Funktion `function generateNumberExpressions($n)`, um das folgende Problem zu lösen:\nGeneriert alle möglichen Arten, eine natürliche Zahl als Summe kleinerer natürlicher Zahlen auszudrücken.\nZum Beispiel gibt es, wenn n=7, 14 verschiedene Möglichkeiten, es als Summe kleinerer natürlicher Zahlen auszudrücken.\nDiese Funktion gibt all diese Ausdrücke in lexikographischer (Wörterbuch-) Reihenfolge zurück.\nunten ist die Ausgabe, wenn n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Die Eingabe der natürlichen Zahl (größer als 1).\n@return array Ein Array von Zeichenfolgen, das alle möglichen Ausdrücke darstellt.",
      "ha": "Rubuta aikin PHP `function generateNumberExpressions($n)` don warware matsalar mai zuwa:\nƘirƙirar duk hanyoyin da za a iya yi don bayyana lamba ta dabi'a a matsayin tarin ƙananan lambobi na dabi'a.\nMisali, idan n=7, akwai hanyoyi 14 daban-daban don bayyana shi a matsayin tarin ƙananan lambobi na dabi'a.\nWannan aikin yana mayar da duk waɗannan bayanan a cikin tsari na haruffa (kamus).\na ƙasa akwai fitarwa lokacin da n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Lambar shigarwa ta dabi'a (fiye da 1).\n@return array Jerin kirtani na duk yiwuwar bayanai.",
      "hi": "PHP फ़ंक्शन `function generateNumberExpressions($n)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक प्राकृतिक संख्या को छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के सभी संभावित तरीकों को उत्पन्न करता है।\nउदाहरण के लिए, जब n=7 होता है, तो इसे छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के 14 विभिन्न तरीके होते हैं।\nयह फ़ंक्शन इन सभी अभिव्यक्तियों को शब्दकोश क्रम में लौटाता है।\nनीचे n = 7 के लिए आउटपुट है\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n इनपुट प्राकृतिक संख्या (1 से अधिक)।\n@return array एक स्ट्रिंग्स की array जो सभी संभावित अभिव्यक्तियों का प्रतिनिधित्व करती है।",
      "hu": "Írj egy PHP függvényt `function generateNumberExpressions($n)` a következő probléma megoldására:\nGenerálja az összes lehetséges módot egy természetes szám kifejezésére kisebb természetes számok összegével.\nPéldául, amikor n=7, 14 különböző mód van annak kifejezésére kisebb természetes számok összegével.\nEz a függvény az összes ilyen kifejezést lexikografikus (szótári) sorrendben adja vissza.\nalább látható a kimenet, amikor n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n A bemeneti természetes szám (nagyobb mint 1).\n@return array Egy tömb, amely az összes lehetséges kifejezést tartalmazza sztringként."
    },
    "instruction_bertscore": {
      "sq": "0.9868921825251267",
      "hy": "0.9527925104913433",
      "bn": "0.9834080070113937",
      "bg": "0.9925692374454849",
      "zh": "0.9769610607341443",
      "fr": "0.9903719881704769",
      "de": "0.9906818515648913",
      "ha": "0.9731453711144642",
      "hi": "0.9554313151033917",
      "hu": "0.9876330738463869"
    },
    "level": "hard",
    "test": "function main(){\n    $result = generateNumberExpressions(7);\n    assert($result===[\"7=1+1+1+1+1+1+1\",\"7=1+1+1+1+1+2\",\"7=1+1+1+1+3\",\"7=1+1+1+2+2\",\"7=1+1+1+4\",\"7=1+1+2+3\",\"7=1+1+5\",\"7=1+2+2+2\",\"7=1+2+4\",\"7=1+3+3\",\"7=1+6\",\"7=2+2+3\",\"7=2+5\",\"7=3+4\"]);\n    $result = generateNumberExpressions(6);\n    assert($result===[  \"6=1+1+1+1+1+1\",\"6=1+1+1+1+2\",\"6=1+1+1+3\",\"6=1+1+2+2\",\"6=1+1+4\",\"6=1+2+3\",\"6=1+5\",\"6=2+2+2\",\"6=2+4\",\"6=3+3\"]);\n  \n  \n}\n\n\nmain();\n?>",
    "entry_point": "generateNumberExpressions",
    "signature": "function generateNumberExpressions($n)",
    "docstring": {
      "en": "Generates all possible ways to express a natural number as the sum of smaller natural numbers.\nFor example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\nThis function returns all these expressions in lexicographical (dictionary) order.\nbelow is output when n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n The input natural number (greater than 1).\n@return array An array of strings representing all possible expressions.",
      "sq": "Gjeneron të gjitha mënyrat e mundshme për të shprehur një numër natyror si shumën e numrave natyrorë më të vegjël. Për shembull, kur n=7, ka 14 mënyra të ndryshme për ta shprehur atë si shumën e numrave natyrorë më të vegjël. Kjo funksion kthen të gjitha këto shprehje në rend leksikografik (rend fjalori). më poshtë është rezultati kur n = 7 7=1+1+1+1+1+1+1 7=1+1+1+1+1+2 7=1+1+1+1+3 7=1+1+1+2+2 7=1+1+1+4 7=1+1+2+3 7=1+1+5 7=1+2+2+2 7=1+2+4 7=1+3+3 7=1+6 7=2+2+3 7=2+5 7=3+4\n@param int $n Numri natyror hyrës (më i madh se 1).\n@return array Një varg me vargje që përfaqësojnë të gjitha shprehjet e mundshme.",
      "hy": "Ստեղծում է բոլոր հնարավոր եղանակները բնական թիվը փոքր բնական թվերի գումարով արտահայտելու համար։  \nՕրինակ, երբ n=7, կա 14 տարբեր եղանակ այն արտահայտելու որպես փոքր բնական թվերի գումար։  \nԱյս ֆունկցիան վերադարձնում է բոլոր այդ արտահայտությունները բառարանային (բառարանային) կարգով։  \nստորև ներկայացված է արդյունքը, երբ n = 7  \n7=1+1+1+1+1+1+1  \n7=1+1+1+1+1+2  \n7=1+1+1+1+3  \n7=1+1+1+2+2  \n7=1+1+1+4  \n7=1+1+2+3  \n7=1+1+5  \n7=1+2+2+2  \n7=1+2+4  \n7=1+3+3  \n7=1+6  \n7=2+2+3  \n7=2+5  \n7=3+4  \n@param int $n Մուտքային բնական թիվը (ավելի մեծ քան 1)։  \n@return array Տողերի զանգված, որը ներկայացնում է բոլոր հնարավոր արտահայտությունները։",
      "bn": "প্রাকৃতিক সংখ্যাকে ছোট ছোট প্রাকৃতিক সংখ্যার যোগফল হিসেবে প্রকাশ করার সমস্ত সম্ভাব্য উপায় তৈরি করে। উদাহরণস্বরূপ, যখন n=7, তখন এটি ছোট প্রাকৃতিক সংখ্যার যোগফল হিসেবে প্রকাশ করার ১৪টি ভিন্ন উপায় রয়েছে। এই ফাংশনটি সমস্ত এই প্রকাশগুলি অভিধানগত (অ্যালফাবেটিক) ক্রমে ফেরত দেয়। নিচে n = 7 হলে আউটপুট দেওয়া হলো\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n ইনপুট প্রাকৃতিক সংখ্যা (১ এর চেয়ে বড়)।\n@return array একটি অ্যারে যা সমস্ত সম্ভাব্য প্রকাশের স্ট্রিং উপস্থাপন করে।",
      "bg": "Генерира всички възможни начини за изразяване на естествено число като сума от по-малки естествени числа. Например, когато n=7, има 14 различни начина да се изрази като сума от по-малки естествени числа. Тази функция връща всички тези изрази в лексикографски (речников) ред. по-долу е изходът, когато n = 7 7=1+1+1+1+1+1+1 7=1+1+1+1+1+2 7=1+1+1+1+3 7=1+1+1+2+2 7=1+1+1+4 7=1+1+2+3 7=1+1+5 7=1+2+2+2 7=1+2+4 7=1+3+3 7=1+6 7=2+2+3 7=2+5 7=3+4\n@param int $n Входното естествено число (по-голямо от 1).\n@return array Масив от низове, представляващи всички възможни изрази.",
      "zh": "生成将一个自然数表示为较小自然数之和的所有可能方式。\n例如，当 n=7 时，有 14 种不同的方式将其表示为较小自然数之和。\n此函数按字典顺序返回所有这些表达式。\n以下是 n = 7 时的输出\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n 输入的自然数（大于1）。\n@return array 一个字符串数组，表示所有可能的表达式。",
      "fr": "Génère toutes les façons possibles d'exprimer un nombre naturel comme la somme de nombres naturels plus petits.  \nPar exemple, lorsque n=7, il y a 14 façons différentes de l'exprimer comme la somme de nombres naturels plus petits.  \nCette fonction renvoie toutes ces expressions dans l'ordre lexicographique (dictionnaire).  \nci-dessous est la sortie lorsque n = 7  \n7=1+1+1+1+1+1+1  \n7=1+1+1+1+1+2  \n7=1+1+1+1+3  \n7=1+1+1+2+2  \n7=1+1+1+4  \n7=1+1+2+3  \n7=1+1+5  \n7=1+2+2+2  \n7=1+2+4  \n7=1+3+3  \n7=1+6  \n7=2+2+3  \n7=2+5  \n7=3+4  \n@param int $n Le nombre naturel d'entrée (supérieur à 1).  \n@return array Un tableau de chaînes représentant toutes les expressions possibles.  ",
      "de": "Erzeugt alle möglichen Arten, eine natürliche Zahl als Summe kleinerer natürlicher Zahlen darzustellen.\nZum Beispiel gibt es, wenn n=7, 14 verschiedene Möglichkeiten, es als Summe kleinerer natürlicher Zahlen darzustellen.\nDiese Funktion gibt all diese Ausdrücke in lexikographischer (Wörterbuch-)Reihenfolge zurück.\nunten ist die Ausgabe, wenn n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Die Eingabe-Natürliche Zahl (größer als 1).\n@return array Ein Array von Zeichenketten, das alle möglichen Ausdrücke darstellt.",
      "ha": "Yana haifar da duk hanyoyin da za a iya bayyana lambar halitta a matsayin jumlar ƙananan lambobin halitta.\nAlal misali, lokacin da n=7, akwai hanyoyi 14 daban-daban don bayyana shi a matsayin jumlar ƙananan lambobin halitta.\nWannan aikin yana dawo da duk waɗannan bayanan a cikin tsari na lexicographical (kamus).\na ƙasa akwai fitarwa lokacin da n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Lambar halitta da aka shigar (fiye da 1).\n@return array Jerin kirtani wanda ke wakiltar duk yiwuwar bayanai.",
      "hi": "प्राकृतिक संख्या को छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के सभी संभावित तरीकों को उत्पन्न करता है। उदाहरण के लिए, जब n=7 होता है, तो इसे छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के 14 विभिन्न तरीके होते हैं। यह फ़ंक्शन इन सभी अभिव्यक्तियों को शब्दकोश क्रम में लौटाता है। नीचे दिया गया आउटपुट तब होता है जब n = 7 होता है\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n इनपुट प्राकृतिक संख्या (1 से अधिक)।\n@return array एक स्ट्रिंग्स का ऐरे जो सभी संभावित अभिव्यक्तियों का प्रतिनिधित्व करता है।",
      "hu": "Generálja az összes lehetséges módot, ahogyan egy természetes szám kifejezhető kisebb természetes számok összegeként.\nPéldául, amikor n=7, 14 különböző mód van arra, hogy kifejezzük kisebb természetes számok összegeként.\nEz a függvény visszaadja ezeket a kifejezéseket lexikografikus (szótári) sorrendben.\nalább látható a kimenet, amikor n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n A bemeneti természetes szám (nagyobb mint 1).\n@return array Egy tömb, amely az összes lehetséges kifejezést tartalmazza sztringként."
    },
    "docstring_bertscore": {
      "sq": "0.9871321280254168",
      "hy": "0.9848882006108657",
      "bn": "0.9751739831959735",
      "bg": "0.9913615647287927",
      "zh": "0.9637579006763743",
      "fr": "0.9933955398305899",
      "de": "0.9887622875625701",
      "ha": "0.9901320426701867",
      "hi": "0.9664831095041729",
      "hu": "0.9651993613515445"
    }
  },
  {
    "task_id": "PHP/40",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the maximum number of distinct letters one can pass through in a letter matrix.\n * Starting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\n * This function finds the maximum number of distinct letters that can be traversed in the matrix.\n * \n * Inputs:\n * - $rows (int): The number of rows in the matrix.\n * - $cols (int): The number of columns in the matrix.\n * - $matrix (array): A 2D array representing the letter matrix.\n *\n * Output:\n * - Returns an integer representing the maximum number of distinct letters that can be traversed.\n *\n * Example:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin maksimal të shkronjave të ndryshme që mund të kalohen në një matricë shkronjash.\n * Duke filluar nga këndi i sipërm i majtë, mund të lëvizni lart, poshtë, majtas, ose djathtas, por nuk mund të vizitoni një qelizë më shumë se një herë.\n * Kjo funksion gjen numrin maksimal të shkronjave të ndryshme që mund të kalohen në matricë.\n * \n * Hyrjet:\n * - $rows (int): Numri i rreshtave në matricë.\n * - $cols (int): Numri i kolonave në matricë.\n * - $matrix (array): Një varg 2D që përfaqëson matricën e shkronjave.\n *\n * Dalja:\n * - Kthen një numër të plotë që përfaqëson numrin maksimal të shkronjave të ndryshme që mund të kalohen.\n *\n * Shembull:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) duhet të kthejë 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է առավելագույն տարբեր տառերի քանակը, որը կարելի է անցնել տառերի մատրիցայում:\n * Սկսելով վերևի ձախ անկյունից, դուք կարող եք շարժվել վեր, վար, ձախ կամ աջ, բայց չեք կարող այցելել նույն բջիջը մեկից ավելի անգամ:\n * Այս ֆունկցիան գտնում է առավելագույն տարբեր տառերի քանակը, որը կարելի է անցնել մատրիցայում:\n * \n * Մուտքեր:\n * - $rows (int): Մատրիցայի տողերի քանակը:\n * - $cols (int): Մատրիցայի սյուների քանակը:\n * - $matrix (array): 2D զանգված, որը ներկայացնում է տառերի մատրիցան:\n *\n * Ելք:\n * - Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է առավելագույն տարբեր տառերի քանակը, որը կարելի է անցնել:\n *\n * Օրինակ:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) պետք է վերադարձնի 9:\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "bn": "<?php\n\n\n/**\n * একটি অক্ষর ম্যাট্রিক্সের মধ্যে দিয়ে যতটা সম্ভব ভিন্ন অক্ষর পাড়ি দেওয়া যায় তা গণনা করে।\n * উপরের-বাম কোণ থেকে শুরু করে, আপনি উপরে, নিচে, বাম বা ডানে যেতে পারেন, কিন্তু একটি সেল একাধিকবার পরিদর্শন করতে পারবেন না।\n * এই ফাংশনটি ম্যাট্রিক্সে যতটা সম্ভব ভিন্ন অক্ষর পাড়ি দেওয়া যায় তা খুঁজে বের করে।\n * \n * ইনপুটসমূহ:\n * - $rows (int): ম্যাট্রিক্সের সারির সংখ্যা।\n * - $cols (int): ম্যাট্রিক্সের কলামের সংখ্যা।\n * - $matrix (array): একটি 2D অ্যারে যা অক্ষর ম্যাট্রিক্সকে উপস্থাপন করে।\n *\n * আউটপুট:\n * - একটি পূর্ণসংখ্যা প্রদান করে যা ম্যাট্রিক্সে পাড়ি দেওয়া সম্ভব ভিন্ন অক্ষরের সর্বাধিক সংখ্যা উপস্থাপন করে।\n *\n * উদাহরণ:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9 প্রদান করা উচিত।\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "bg": "<?php\n\n\n/**\n * Изчислява максималния брой различни букви, през които може да се премине в матрица от букви.\n * Започвайки от горния ляв ъгъл, можете да се движите нагоре, надолу, наляво или надясно, но не можете да посетите една клетка повече от веднъж.\n * Тази функция намира максималния брой различни букви, които могат да бъдат обходени в матрицата.\n * \n * Входове:\n * - $rows (int): Броят на редовете в матрицата.\n * - $cols (int): Броят на колоните в матрицата.\n * - $matrix (array): Двуизмерен масив, представляващ матрицата от букви.\n *\n * Изход:\n * - Връща цяло число, представляващо максималния брой различни букви, които могат да бъдат обходени.\n *\n * Пример:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) трябва да върне 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "zh": "<?php\n\n\n/**\n * 计算在字母矩阵中可以经过的最大不同字母数。\n * 从左上角开始，你可以向上、向下、向左或向右移动，但不能多次访问同一个单元格。\n * 此函数找到可以在矩阵中遍历的最大不同字母数。\n * \n * 输入:\n * - $rows (int): 矩阵的行数。\n * - $cols (int): 矩阵的列数。\n * - $matrix (array): 表示字母矩阵的二维数组。\n *\n * 输出:\n * - 返回一个整数，表示可以遍历的最大不同字母数。\n *\n * 示例:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 应返回 9。\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre maximum de lettres distinctes que l'on peut traverser dans une matrice de lettres.\n * En partant du coin supérieur gauche, vous pouvez vous déplacer vers le haut, le bas, la gauche ou la droite, mais vous ne pouvez pas visiter une cellule plus d'une fois.\n * Cette fonction trouve le nombre maximum de lettres distinctes qui peuvent être traversées dans la matrice.\n * \n * Entrées:\n * - $rows (int): Le nombre de lignes dans la matrice.\n * - $cols (int): Le nombre de colonnes dans la matrice.\n * - $matrix (array): Un tableau 2D représentant la matrice de lettres.\n *\n * Sortie:\n * - Retourne un entier représentant le nombre maximum de lettres distinctes qui peuvent être traversées.\n *\n * Exemple:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) devrait retourner 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "de": "<?php\n\n\n/**\n * Berechnet die maximale Anzahl an unterschiedlichen Buchstaben, die man in einer Buchstabenmatrix durchqueren kann.\n * Beginnend in der oberen linken Ecke kann man sich nach oben, unten, links oder rechts bewegen, aber man darf kein Feld mehr als einmal besuchen.\n * Diese Funktion findet die maximale Anzahl an unterschiedlichen Buchstaben, die in der Matrix durchquert werden können.\n * \n * Eingaben:\n * - $rows (int): Die Anzahl der Zeilen in der Matrix.\n * - $cols (int): Die Anzahl der Spalten in der Matrix.\n * - $matrix (array): Ein 2D-Array, das die Buchstabenmatrix darstellt.\n *\n * Ausgabe:\n * - Gibt eine ganze Zahl zurück, die die maximale Anzahl an unterschiedlichen Buchstaben darstellt, die durchquert werden können.\n *\n * Beispiel:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) sollte 9 zurückgeben.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "ha": "<?php\n\n\n/**\n * Yana lissafin yawan haruffa daban-daban da za a iya wucewa ta cikin matrix na haruffa.\n * Fara daga saman-kusurwar hagu, za ka iya motsawa sama, ƙasa, hagu, ko dama, amma ba za ka iya ziyartar kwaya fiye da sau ɗaya ba.\n * Wannan aikin yana nemo yawan haruffa daban-daban da za a iya wucewa a cikin matrix.\n * \n * Shigarwa:\n * - $rows (int): Yawan layuka a cikin matrix.\n * - $cols (int): Yawan ginshikai a cikin matrix.\n * - $matrix (array): Matrix mai girma biyu da ke wakiltar matrix na haruffa.\n *\n * Fitarwa:\n * - Yana mayar da lamba mai wakiltar yawan haruffa daban-daban da za a iya wucewa.\n *\n * Misali:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) ya kamata ya dawo da 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hi": "<?php\n\n\n/**\n * यह गणना करता है कि अक्षर मैट्रिक्स में अधिकतम कितने भिन्न अक्षरों को पार किया जा सकता है।\n * शीर्ष-बाएँ कोने से शुरू करके, आप ऊपर, नीचे, बाएँ या दाएँ जा सकते हैं, लेकिन किसी सेल पर एक से अधिक बार नहीं जा सकते।\n * यह फ़ंक्शन मैट्रिक्स में पार किए जा सकने वाले अधिकतम भिन्न अक्षरों की संख्या खोजता है।\n * \n * इनपुट:\n * - $rows (int): मैट्रिक्स में पंक्तियों की संख्या।\n * - $cols (int): मैट्रिक्स में स्तंभों की संख्या।\n * - $matrix (array): अक्षर मैट्रिक्स का एक 2D ऐरे।\n *\n * आउटपुट:\n * - एक पूर्णांक लौटाता है जो पार किए जा सकने वाले अधिकतम भिन्न अक्षरों का प्रतिनिधित्व करता है।\n *\n * उदाहरण:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) को 9 लौटाना चाहिए।\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a maximális különböző betűk számát, amelyeken át lehet haladni egy betűmátrixban.\n * A bal felső sarokból indulva felfelé, lefelé, balra vagy jobbra lehet mozogni, de egy cellát nem lehet többször meglátogatni.\n * Ez a függvény megkeresi a mátrixban bejárható maximális különböző betűk számát.\n * \n * Bemenetek:\n * - $rows (int): A mátrix sorainak száma.\n * - $cols (int): A mátrix oszlopainak száma.\n * - $matrix (array): Egy 2D tömb, amely a betűmátrixot ábrázolja.\n *\n * Kimenet:\n * - Egy egész számot ad vissza, amely a bejárható maximális különböző betűk számát jelenti.\n *\n * Példa:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9-et kell visszaadjon.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) "
    },
    "prompt_bertscore": {
      "sq": "0.9794677761428047",
      "hy": "0.9766053137217109",
      "bn": "0.9817067377978299",
      "bg": "0.9708684710566612",
      "zh": "0.9748690855610849",
      "fr": "0.9811454083410253",
      "de": "0.9794139473095442",
      "ha": "0.971174560473836",
      "hi": "0.9809928602083905",
      "hu": "0.9870469155919529"
    },
    "canonical_solution": "{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}",
    "instruction": {
      "en": "Write a PHP function `function maxDistinctLetters($rows, $cols, $matrix)` to solve the following problem:\nCalculates the maximum number of distinct letters one can pass through in a letter matrix.\nStarting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\nThis function finds the maximum number of distinct letters that can be traversed in the matrix.\n\nInputs:\n- $rows (int): The number of rows in the matrix.\n- $cols (int): The number of columns in the matrix.\n- $matrix (array): A 2D array representing the letter matrix.\n\nOutput:\n- Returns an integer representing the maximum number of distinct letters that can be traversed.\n\nExample:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.",
      "sq": "Shkruani një funksion PHP `function maxDistinctLetters($rows, $cols, $matrix)` për të zgjidhur problemin e mëposhtëm:\nLlogarit numrin maksimal të shkronjave të ndryshme që mund të kalohen në një matricë shkronjash.\nDuke filluar nga këndi i sipërm i majtë, mund të lëvizni lart, poshtë, majtas ose djathtas, por nuk mund të vizitoni një qelizë më shumë se një herë.\nKy funksion gjen numrin maksimal të shkronjave të ndryshme që mund të kalohen në matricë.\n\nHyrjet:\n- $rows (int): Numri i rreshtave në matricë.\n- $cols (int): Numri i kolonave në matricë.\n- $matrix (array): Një varg 2D që përfaqëson matricën e shkronjave.\n\nDalja:\n- Kthen një numër të plotë që përfaqëson numrin maksimal të shkronjave të ndryshme që mund të kalohen.\n\nShembull:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) duhet të kthejë 9.",
      "hy": "Գրեք PHP ֆունկցիա `function maxDistinctLetters($rows, $cols, $matrix)` հետևյալ խնդիրը լուծելու համար:\nՀաշվարկում է առավելագույն տարբերակիչ տառերի քանակը, որոնցով կարելի է անցնել տառերի մատրիցում:\nՍկսելով վերևի ձախ անկյունից, դուք կարող եք շարժվել վեր, վար, ձախ կամ աջ, բայց չեք կարող այցելել մի բջիջ ավելի քան մեկ անգամ:\nԱյս ֆունկցիան գտնում է առավելագույն տարբերակիչ տառերի քանակը, որոնք կարելի է անցնել մատրիցում:\n\nՄուտքեր:\n- $rows (int): Մատրիցի տողերի քանակը:\n- $cols (int): Մատրիցի սյուների քանակը:\n- $matrix (array): 2D զանգված, որը ներկայացնում է տառերի մատրիցը:\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է առավելագույն տարբերակիչ տառերի քանակը, որոնք կարելի է անցնել:\n\nՕրինակ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) պետք է վերադարձնի 9:",
      "bn": "PHP ফাংশন `function maxDistinctLetters($rows, $cols, $matrix)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি অক্ষর ম্যাট্রিক্সে যতগুলি ভিন্ন অক্ষরের মধ্য দিয়ে যাওয়া যায় তার সর্বাধিক সংখ্যা গণনা করে।\nউপরের-বাম কোণ থেকে শুরু করে, আপনি উপরে, নিচে, বাম বা ডানে যেতে পারেন, কিন্তু একটি সেল একাধিকবার পরিদর্শন করতে পারবেন না।\nএই ফাংশনটি ম্যাট্রিক্সে যতগুলি ভিন্ন অক্ষর অতিক্রম করা যায় তার সর্বাধিক সংখ্যা খুঁজে বের করে।\n\nইনপুটসমূহ:\n- $rows (int): ম্যাট্রিক্সের সারির সংখ্যা।\n- $cols (int): ম্যাট্রিক্সের কলামের সংখ্যা।\n- $matrix (array): অক্ষর ম্যাট্রিক্সকে উপস্থাপনকারী একটি 2D অ্যারে।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা রিটার্ন করে যা ম্যাট্রিক্সে অতিক্রম করা যায় এমন ভিন্ন অক্ষরের সর্বাধিক সংখ্যা উপস্থাপন করে।\n\nউদাহরণ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9 রিটার্ন করা উচিত।",
      "bg": "Напишете PHP функция `function maxDistinctLetters($rows, $cols, $matrix)` за решаване на следния проблем:\nИзчислява максималния брой различни букви, през които може да се премине в матрица от букви.\nЗапочвайки от горния ляв ъгъл, можете да се движите нагоре, надолу, наляво или надясно, но не можете да посетите една клетка повече от веднъж.\nТази функция намира максималния брой различни букви, които могат да бъдат преминати в матрицата.\n\nВходове:\n- $rows (int): Броят на редовете в матрицата.\n- $cols (int): Броят на колоните в матрицата.\n- $matrix (array): 2D масив, представляващ матрицата от букви.\n\nИзход:\n- Връща цяло число, представляващо максималния брой различни букви, които могат да бъдат преминати.\n\nПример:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) трябва да върне 9.",
      "zh": "编写一个 PHP 函数 `function maxDistinctLetters($rows, $cols, $matrix)` 来解决以下问题：\n计算在字母矩阵中可以经过的最大不同字母数量。\n从左上角开始，你可以向上、向下、向左或向右移动，但不能重复访问一个单元格。\n此函数找到在矩阵中可以遍历的最大不同字母数量。\n\n输入：\n- $rows (int): 矩阵的行数。\n- $cols (int): 矩阵的列数。\n- $matrix (array): 表示字母矩阵的二维数组。\n\n输出：\n- 返回一个整数，表示可以遍历的最大不同字母数量。\n\n示例：\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 应返回 9。",
      "fr": "Écrire une fonction PHP `function maxDistinctLetters($rows, $cols, $matrix)` pour résoudre le problème suivant :  \nCalcule le nombre maximum de lettres distinctes que l'on peut traverser dans une matrice de lettres.  \nEn partant du coin supérieur gauche, vous pouvez vous déplacer vers le haut, le bas, la gauche ou la droite, mais vous ne pouvez pas visiter une cellule plus d'une fois.  \nCette fonction trouve le nombre maximum de lettres distinctes qui peuvent être parcourues dans la matrice.\n\nEntrées :  \n- $rows (int) : Le nombre de lignes dans la matrice.  \n- $cols (int) : Le nombre de colonnes dans la matrice.  \n- $matrix (array) : Un tableau 2D représentant la matrice de lettres.\n\nSortie :  \n- Retourne un entier représentant le nombre maximum de lettres distinctes qui peuvent être parcourues.\n\nExemple :  \nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) devrait retourner 9.",
      "de": "Schreiben Sie eine PHP-Funktion `function maxDistinctLetters($rows, $cols, $matrix)`, um das folgende Problem zu lösen:\nBerechnet die maximale Anzahl an verschiedenen Buchstaben, die man in einer Buchstabenmatrix durchqueren kann.\nBeginnend in der oberen linken Ecke können Sie sich nach oben, unten, links oder rechts bewegen, aber Sie dürfen eine Zelle nicht mehr als einmal besuchen.\nDiese Funktion findet die maximale Anzahl an verschiedenen Buchstaben, die in der Matrix durchquert werden können.\n\nEingaben:\n- $rows (int): Die Anzahl der Zeilen in der Matrix.\n- $cols (int): Die Anzahl der Spalten in der Matrix.\n- $matrix (array): Ein 2D-Array, das die Buchstabenmatrix darstellt.\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die maximale Anzahl an verschiedenen Buchstaben darstellt, die durchquert werden können.\n\nBeispiel:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) sollte 9 zurückgeben.",
      "ha": "Rubuta aikin PHP `function maxDistinctLetters($rows, $cols, $matrix)` don warware matsalar mai zuwa:\nYana ƙididdige yawan haruffa daban-daban da za a iya bi ta cikin matrix na haruffa.\nFara daga saman-hagu, za ka iya motsawa sama, ƙasa, hagu, ko dama, amma ba za ka iya ziyartar wata cell fiye da sau ɗaya ba.\nWannan aikin yana nemo yawan haruffa daban-daban da za a iya bi ta cikin matrix.\n\nShigarwa:\n- $rows (int): Yawan layuka a cikin matrix.\n- $cols (int): Yawan ginshikai a cikin matrix.\n- $matrix (array): Matrix mai 2D da ke wakiltar matrix na haruffa.\n\nFitarwa:\n- Yana dawowa da lamba mai wakiltar yawan haruffa daban-daban da za a iya bi ta.\n\nMisali:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) ya kamata ya dawo da 9.",
      "hi": "PHP फ़ंक्शन `function maxDistinctLetters($rows, $cols, $matrix)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक अक्षर मैट्रिक्स में अधिकतम भिन्न अक्षरों की संख्या की गणना करता है जिनसे आप गुजर सकते हैं।\nऊपरी-बाएँ कोने से शुरू करते हुए, आप ऊपर, नीचे, बाएँ या दाएँ जा सकते हैं, लेकिन किसी सेल को एक से अधिक बार नहीं देख सकते।\nयह फ़ंक्शन मैट्रिक्स में यात्रा किए जा सकने वाले अधिकतम भिन्न अक्षरों की संख्या का पता लगाता है।\n\nइनपुट:\n- $rows (int): मैट्रिक्स में पंक्तियों की संख्या।\n- $cols (int): मैट्रिक्स में स्तंभों की संख्या।\n- $matrix (array): अक्षर मैट्रिक्स का प्रतिनिधित्व करने वाली 2D array।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है जो यात्रा किए जा सकने वाले अधिकतम भिन्न अक्षरों का प्रतिनिधित्व करता है।\n\nउदाहरण:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) को 9 लौटाना चाहिए।",
      "hu": "Írj egy PHP függvényt `function maxDistinctLetters($rows, $cols, $matrix)` a következő probléma megoldására:\nKiszámítja a maximális különböző betűk számát, amelyeken át lehet haladni egy betű mátrixban.\nA bal felső sarokból indulva fel, le, balra vagy jobbra lehet mozogni, de egy cellát nem lehet többször meglátogatni.\nEz a függvény megkeresi a mátrixban bejárható különböző betűk maximális számát.\n\nBemenetek:\n- $rows (int): A mátrix sorainak száma.\n- $cols (int): A mátrix oszlopainak száma.\n- $matrix (array): Egy 2D tömb, amely a betű mátrixot ábrázolja.\n\nKimenet:\n- Visszaad egy egész számot, amely a bejárható különböző betűk maximális számát jelenti.\n\nPélda:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) vissza kell adnia 9."
    },
    "instruction_bertscore": {
      "sq": "0.9797752559726467",
      "hy": "0.9816177513871263",
      "bn": "0.97344013859992",
      "bg": "0.9801868181221509",
      "zh": "0.9712824167707379",
      "fr": "0.9797752559726467",
      "de": "0.9830572257584861",
      "ha": "0.9622572481476557",
      "hi": "0.9646060524033933",
      "hu": "0.9897077681762962"
    },
    "level": "hard",
    "test": "function main(){\n    $matrix = [\n        ['H', 'F', 'D', 'F', 'F', 'B'],\n        ['A', 'J', 'H', 'G', 'D', 'H'],\n        ['D', 'G', 'A', 'G', 'E', 'H']\n    ];\n    assert(maxDistinctLetters(3, 6, $matrix) === 6);\n  \n    $matrix = [\n        ['H', 'F', 'Y' ],\n        ['A', 'J', 'Z' ],\n        ['D', 'G', 'A']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 8);\n\n    $matrix = [\n        ['A', 'D', 'G' ],\n        ['B', 'E', 'H' ],\n        ['C', 'F', 'I']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 9);\n\n}\n\n\nmain();\n?>",
    "entry_point": "maxDistinctLetters",
    "signature": "function maxDistinctLetters($rows, $cols, $matrix)",
    "docstring": {
      "en": "Calculates the maximum number of distinct letters one can pass through in a letter matrix.\nStarting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\nThis function finds the maximum number of distinct letters that can be traversed in the matrix.\n\nInputs:\n- $rows (int): The number of rows in the matrix.\n- $cols (int): The number of columns in the matrix.\n- $matrix (array): A 2D array representing the letter matrix.\n\nOutput:\n- Returns an integer representing the maximum number of distinct letters that can be traversed.\n\nExample:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.",
      "sq": "Llogarit numrin maksimal të shkronjave të ndryshme që mund të kalohen në një matricë shkronjash. Duke filluar nga këndi i sipërm i majtë, mund të lëvizësh lart, poshtë, majtas ose djathtas, por nuk mund të vizitosh një qelizë më shumë se një herë. Kjo funksion gjen numrin maksimal të shkronjave të ndryshme që mund të kalohen në matricë.\n\nHyrjet:\n- $rows (int): Numri i rreshtave në matricë.\n- $cols (int): Numri i kolonave në matricë.\n- $matrix (array): Një varg 2D që përfaqëson matricën e shkronjave.\n\nDalja:\n- Kthen një numër të plotë që përfaqëson numrin maksimal të shkronjave të ndryshme që mund të kalohen.\n\nShembull:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) duhet të kthejë 9.",
      "hy": "Հաշվում է առավելագույն տարբերակիչ տառերի քանակը, որոնցով կարելի է անցնել տառերի մատրիցում:\nՍկսած վերևի ձախ անկյունից, դուք կարող եք շարժվել վեր, վար, ձախ կամ աջ, բայց չեք կարող այցելել նույն բջիջը մեկից ավելի անգամ:\nԱյս ֆունկցիան գտնում է մատրիցում անցնելու հնարավոր առավելագույն տարբերակիչ տառերի քանակը:\n\nՄուտքեր:\n- $rows (int): Մատրիցի տողերի քանակը:\n- $cols (int): Մատրիցի սյուների քանակը:\n- $matrix (array): 2D զանգված, որը ներկայացնում է տառերի մատրիցը:\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է մատրիցում անցնելու հնարավոր առավելագույն տարբերակիչ տառերի քանակը:\n\nՕրինակ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) պետք է վերադարձնի 9:",
      "bn": "বর্ণ ম্যাট্রিক্সের মধ্য দিয়ে সর্বাধিক সংখ্যক ভিন্ন বর্ণ অতিক্রম করার ক্ষমতা গণনা করে। উপরের-বাম কোণ থেকে শুরু করে, আপনি উপরে, নিচে, বামে বা ডানে যেতে পারেন, কিন্তু একটি কোষের মধ্যে একাধিকবার যেতে পারবেন না। এই ফাংশনটি ম্যাট্রিক্সে অতিক্রম করা যেতে পারে এমন সর্বাধিক সংখ্যক ভিন্ন বর্ণ খুঁজে বের করে।\n\nইনপুট:\n- $rows (int): ম্যাট্রিক্সের সারির সংখ্যা।\n- $cols (int): ম্যাট্রিক্সের কলামের সংখ্যা।\n- $matrix (array): বর্ণ ম্যাট্রিক্সকে উপস্থাপনকারী একটি 2D অ্যারে।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা ফেরত দেয় যা অতিক্রম করা যেতে পারে এমন সর্বাধিক সংখ্যক ভিন্ন বর্ণ উপস্থাপন করে।\n\nউদাহরণ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9 ফেরত দেওয়া উচিত।",
      "bg": "Изчислява максималния брой различни букви, през които може да се премине в матрица от букви. Започвайки от горния ляв ъгъл, можете да се движите нагоре, надолу, наляво или надясно, но не можете да посетите една клетка повече от веднъж. Тази функция намира максималния брой различни букви, които могат да бъдат обходени в матрицата.\n\nВходове:\n- $rows (int): Броят на редовете в матрицата.\n- $cols (int): Броят на колоните в матрицата.\n- $matrix (array): Двуизмерен масив, представляващ матрицата от букви.\n\nИзход:\n- Връща цяло число, представляващо максималния брой различни букви, които могат да бъдат обходени.\n\nПример:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) трябва да върне 9.",
      "zh": "计算在字母矩阵中可以经过的最大不同字母数。\n从左上角开始，你可以向上、向下、向左或向右移动，但不能多次访问同一个单元格。\n此函数查找可以在矩阵中遍历的最大不同字母数。\n\n输入:\n- $rows (int): 矩阵的行数。\n- $cols (int): 矩阵的列数。\n- $matrix (array): 表示字母矩阵的二维数组。\n\n输出:\n- 返回一个整数，表示可以遍历的最大不同字母数。\n\n示例:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 应返回 9。",
      "fr": "Calcule le nombre maximum de lettres distinctes que l'on peut traverser dans une matrice de lettres.  \nEn partant du coin supérieur gauche, vous pouvez vous déplacer vers le haut, le bas, la gauche ou la droite, mais vous ne pouvez pas visiter une cellule plus d'une fois.  \nCette fonction trouve le nombre maximum de lettres distinctes qui peuvent être traversées dans la matrice.\n\nEntrées :  \n- $rows (int) : Le nombre de lignes dans la matrice.  \n- $cols (int) : Le nombre de colonnes dans la matrice.  \n- $matrix (array) : Un tableau 2D représentant la matrice de lettres.\n\nSortie :  \n- Renvoie un entier représentant le nombre maximum de lettres distinctes qui peuvent être traversées.\n\nExemple :  \nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) devrait renvoyer 9.",
      "de": "Berechnet die maximale Anzahl von verschiedenen Buchstaben, die man in einer Buchstabenmatrix durchqueren kann.\nAusgehend von der oberen linken Ecke kann man sich nach oben, unten, links oder rechts bewegen, aber keine Zelle mehr als einmal besuchen.\nDiese Funktion findet die maximale Anzahl von verschiedenen Buchstaben, die in der Matrix durchquert werden können.\n\nEingaben:\n- $rows (int): Die Anzahl der Zeilen in der Matrix.\n- $cols (int): Die Anzahl der Spalten in der Matrix.\n- $matrix (array): Ein 2D-Array, das die Buchstabenmatrix darstellt.\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die maximale Anzahl von verschiedenen Buchstaben darstellt, die durchquert werden können.\n\nBeispiel:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) sollte 9 zurückgeben.",
      "ha": "Yana lissafin yawan haruffa daban-daban da za a iya wucewa ta cikin matrix na haruffa.\nFara daga kusurwar sama-hagu, za ka iya motsawa sama, ƙasa, hagu, ko dama, amma ba za ka iya ziyartar wata cell fiye da sau ɗaya ba.  \nWannan aikin yana gano yawan haruffa daban-daban da za a iya bi ta cikin matrix.\n\nInputs:  \n- $rows (int): Yawan layuka a cikin matrix.  \n- $cols (int): Yawan ginshikai a cikin matrix.  \n- $matrix (array): Tsarin 2D da ke wakiltar matrix na haruffa.\n\nOutput:  \n- Yana dawowa da lamba wadda ke wakiltar yawan haruffa daban-daban da za a iya bi ta.\n\nExample:  \nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) ya kamata ya dawo da 9.",
      "hi": "अधिकतम संख्या की गणना करता है कि कोई पत्र मैट्रिक्स में कितने भिन्न अक्षरों को पार कर सकता है।\nऊपरी-बाएँ कोने से शुरू करते हुए, आप ऊपर, नीचे, बाएँ या दाएँ जा सकते हैं, लेकिन किसी सेल पर एक से अधिक बार नहीं जा सकते।\nयह फ़ंक्शन मैट्रिक्स में पार किए जा सकने वाले अधिकतम भिन्न अक्षरों की संख्या का पता लगाता है।\n\nइनपुट्स:\n- $rows (int): मैट्रिक्स में पंक्तियों की संख्या।\n- $cols (int): मैट्रिक्स में स्तंभों की संख्या।\n- $matrix (array): पत्र मैट्रिक्स का प्रतिनिधित्व करने वाला एक 2D ऐरे।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है जो पार किए जा सकने वाले अधिकतम भिन्न अक्षरों का प्रतिनिधित्व करता है।\n\nउदाहरण:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) को 9 लौटाना चाहिए।",
      "hu": "Kiszámítja a maximális számú különböző betűt, amelyen át lehet haladni egy betűmátrixban.\nA bal felső sarokból indulva felfelé, lefelé, balra vagy jobbra lehet mozogni, de egy cellát nem lehet többször meglátogatni.\nEz a függvény megkeresi a mátrixban bejárható különböző betűk maximális számát.\n\nBemenetek:\n- $rows (int): A mátrix sorainak száma.\n- $cols (int): A mátrix oszlopainak száma.\n- $matrix (array): Egy 2D tömb, amely a betűmátrixot ábrázolja.\n\nKimenet:\n- Egy egész számot ad vissza, amely a bejárható különböző betűk maximális számát jelenti.\n\nPélda:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9-et kell visszaadjon."
    },
    "docstring_bertscore": {
      "sq": "0.981172422072846",
      "hy": "0.9666777672775871",
      "bn": "0.9535163195998344",
      "bg": "0.9673874736290248",
      "zh": "0.9746396674709896",
      "fr": "0.9763596079403707",
      "de": "0.9828645542888823",
      "ha": "0.9856624618361397",
      "hi": "0.9801367632661302",
      "hu": "0.9789924536409882"
    }
  },
  {
    "task_id": "PHP/41",
    "prompt": {
      "en": "<?php\n\n/**\n * Counts the number of evenly matched pairs of students based on their exam scores.\n * Two students are considered evenly matched if the difference in each subject's score\n * is not greater than 5 and the total score difference is not greater than 10.\n * Input: An integer N representing the number of students followed by N lines of three integers each\n *         representing the scores of each student in Chinese, Mathematics, and English respectively.\n * Output: An integer representing the number of evenly matched pairs of students.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "sq": "<?php\n\n/**\n * Numëron numrin e çifteve të studentëve të përputhur në mënyrë të barabartë bazuar në notat e tyre të provimeve.\n * Dy studentë konsiderohen të përputhur në mënyrë të barabartë nëse diferenca në notat e çdo lënde\n * nuk është më e madhe se 5 dhe diferenca totale e notave nuk është më e madhe se 10.\n * Hyrja: Një numër i plotë N që përfaqëson numrin e studentëve, i ndjekur nga N rreshta me nga tre numra të plotë secili\n *         që përfaqësojnë notat e secilit student në Kinezisht, Matematikë dhe Anglisht përkatësisht.\n * Dalja: Një numër i plotë që përfaqëson numrin e çifteve të studentëve të përputhur në mënyrë të barabartë.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hy": "<?php\n\n/**\n * Հաշվում է ուսանողների զույգերի քանակը, որոնք հավասարապես համընկնում են իրենց քննությունների գնահատականներով։\n * Երկու ուսանող համարվում են հավասարապես համընկնող, եթե յուրաքանչյուր առարկայի գնահատականի տարբերությունը\n * չի գերազանցում 5-ը, և ընդհանուր գնահատականի տարբերությունը չի գերազանցում 10-ը։\n * Մուտք: Ամբողջ թիվ N, որը ներկայացնում է ուսանողների քանակը, որին հաջորդում է N տող, որոնցից յուրաքանչյուրը\n *         ներկայացնում է յուրաքանչյուր ուսանողի գնահատականները չինարենից, մաթեմատիկայից և անգլերենից համապատասխանաբար։\n * Ելք: Ամբողջ թիվ, որը ներկայացնում է հավասարապես համընկնող ուսանողների զույգերի քանակը։\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "bn": "<?php\n\n/**\n * ছাত্রদের পরীক্ষার স্কোরের ভিত্তিতে সমানভাবে মেলানো জোড়ার সংখ্যা গণনা করে।\n * দুটি ছাত্রকে সমানভাবে মেলানো বিবেচনা করা হয় যদি প্রতিটি বিষয়ের স্কোরের পার্থক্য\n * ৫ এর বেশি না হয় এবং মোট স্কোরের পার্থক্য ১০ এর বেশি না হয়।\n * ইনপুট: একটি পূর্ণসংখ্যা N যা ছাত্রদের সংখ্যা উপস্থাপন করে, এর পরে N লাইন থাকে যেখানে প্রতিটি লাইনে তিনটি পূর্ণসংখ্যা থাকে\n *         যা প্রতিটি ছাত্রের চীনা, গণিত এবং ইংরেজি বিষয়ের স্কোর উপস্থাপন করে।\n * আউটপুট: একটি পূর্ণসংখ্যা যা সমানভাবে মেলানো ছাত্রদের জোড়ার সংখ্যা উপস্থাপন করে।\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "bg": "<?php\n\n/**\n * Брои броя на равностойните двойки ученици въз основа на техните резултати от изпитите.\n * Двама ученици се считат за равностойни, ако разликата в резултатите по всеки предмет\n * не е по-голяма от 5 и общата разлика в резултатите не е по-голяма от 10.\n * Вход: Цяло число N, представляващо броя на учениците, последвано от N реда с по три цели числа\n *         представляващи резултатите на всеки ученик по китайски, математика и английски съответно.\n * Изход: Цяло число, представляващо броя на равностойните двойки ученици.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "zh": "<?php\n\n/**\n * 计算基于考试成绩的学生之间的均衡匹配对数。\n * 如果每个科目的分数差不大于5，并且总分差不大于10，则认为两名学生均衡匹配。\n * 输入：一个整数N，表示学生人数，接下来是N行，每行三个整数，\n *       分别代表每个学生的语文、数学和英语成绩。\n * 输出：一个整数，表示均衡匹配的学生对数。\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "fr": "<?php\n\n/**\n * Compte le nombre de paires d'étudiants bien assorties en fonction de leurs scores d'examen.\n * Deux étudiants sont considérés comme bien assortis si la différence de score dans chaque matière\n * n'est pas supérieure à 5 et si la différence totale de score n'est pas supérieure à 10.\n * Entrée : Un entier N représentant le nombre d'étudiants suivi de N lignes de trois entiers chacun\n *          représentant les scores de chaque étudiant en chinois, mathématiques et anglais respectivement.\n * Sortie : Un entier représentant le nombre de paires d'étudiants bien assorties.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "de": "<?php\n\n/**\n * Zählt die Anzahl der gleichmäßig abgestimmten Paare von Schülern basierend auf ihren Prüfungsergebnissen.\n * Zwei Schüler gelten als gleichmäßig abgestimmt, wenn der Unterschied in den Ergebnissen jedes Fachs\n * nicht größer als 5 ist und der Gesamtergebnisunterschied nicht größer als 10 ist.\n * Eingabe: Eine ganze Zahl N, die die Anzahl der Schüler darstellt, gefolgt von N Zeilen mit jeweils drei ganzen Zahlen,\n *          die die Ergebnisse jedes Schülers in Chinesisch, Mathematik und Englisch darstellen.\n * Ausgabe: Eine ganze Zahl, die die Anzahl der gleichmäßig abgestimmten Paare von Schülern darstellt.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "ha": "<?php\n\n/**\n * Yana ƙididdige adadin ma'aurata da suka dace da juna na ɗalibai bisa ga maki na jarrabawarsu.\n * Ana ɗaukar ɗalibai biyu sun dace da juna idan bambancin maki a kowace darasi\n * bai fi 5 ba kuma bambancin jimillar maki bai fi 10 ba.\n * Shigarwa: Lamba N da ke wakiltar adadin ɗalibai sannan N layuka na lambobi uku kowanne\n *         suna wakiltar maki na kowanne ɗalibi a cikin Sinanci, Lissafi, da Turanci bi da bi.\n * Fitarwa: Lamba da ke wakiltar adadin ma'aurata da suka dace da juna na ɗalibai.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hi": "<?php\n\n/**\n * छात्रों के परीक्षा अंकों के आधार पर समान रूप से मेल खाने वाले जोड़ों की संख्या गिनता है।\n * दो छात्रों को समान रूप से मेल खाने वाला माना जाता है यदि प्रत्येक विषय के अंक का अंतर 5 से अधिक नहीं है\n * और कुल अंक का अंतर 10 से अधिक नहीं है।\n * इनपुट: एक पूर्णांक N जो छात्रों की संख्या को दर्शाता है, इसके बाद N पंक्तियाँ जिनमें प्रत्येक में तीन पूर्णांक होते हैं\n *         जो क्रमशः चीनी, गणित और अंग्रेजी में प्रत्येक छात्र के अंक दर्शाते हैं।\n * आउटपुट: एक पूर्णांक जो समान रूप से मेल खाने वाले छात्रों के जोड़ों की संख्या को दर्शाता है।\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hu": "<?php\n\n/**\n * Megszámolja a diákok között az egyenlően párosított párok számát a vizsgaeredményeik alapján.\n * Két diák akkor tekinthető egyenlően párosítottnak, ha az egyes tantárgyak eredményeinek különbsége\n * nem nagyobb, mint 5, és az összesített eredménykülönbség nem nagyobb, mint 10.\n * Bemenet: Egy egész szám N, amely a diákok számát jelöli, majd N sor, amelyek mindegyike három egész számot tartalmaz,\n *         amelyek a diákok kínai, matematika és angol eredményeit képviselik.\n * Kimenet: Egy egész szám, amely az egyenlően párosított diákpárok számát jelöli.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) "
    },
    "prompt_bertscore": {
      "sq": "0.9568878716875207",
      "hy": "0.9470421609603833",
      "bn": "0.9689189138668038",
      "bg": "0.9796697832403172",
      "zh": "0.9500557811014446",
      "fr": "0.9667576166907632",
      "de": "0.9748059210999158",
      "ha": "0.9370639637690957",
      "hi": "0.9705266281709002",
      "hu": "0.9592505800699306"
    },
    "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "instruction": {
      "en": "Write a PHP function `function countEvenlyMatchedPairs($N, $students)` to solve the following problem:\nCounts the number of evenly matched pairs of students based on their exam scores.\n  Two students are considered evenly matched if the difference in each subject's score\n  is not greater than 5 and the total score difference is not greater than 10.\n  Input: An integer N representing the number of students followed by N lines of three integers each\n          representing the scores of each student in Chinese, Mathematics, and English respectively.\n  Output: An integer representing the number of evenly matched pairs of students.",
      "sq": "Shkruani një funksion PHP `function countEvenlyMatchedPairs($N, $students)` për të zgjidhur problemin në vijim:\nNumëron çiftet e studentëve që janë të përputhur në mënyrë të barabartë bazuar në rezultatet e tyre të provimeve.\n  Dy studentë konsiderohen të përputhur në mënyrë të barabartë nëse diferenca në secilin rezultat të lëndës\n  nuk është më e madhe se 5 dhe diferenca totale e rezultateve nuk është më e madhe se 10.\n  Hyrja: Një numër i plotë N që përfaqëson numrin e studentëve, i ndjekur nga N rreshta me nga tre numra të plotë secili\n          që përfaqësojnë rezultatet e secilit student në Kinezisht, Matematikë dhe Anglisht respektivisht.\n  Dalja: Një numër i plotë që përfaqëson numrin e çifteve të studentëve të përputhur në mënyrë të barabartë.",
      "hy": "Գրեք PHP ֆունկցիա `function countEvenlyMatchedPairs($N, $students)`՝ լուծելու համար հետևյալ խնդիրը:\nՀաշվում է ուսանողների հավասար զույգերի քանակը՝ հիմնված նրանց քննության գնահատականների վրա:\n  Երկու ուսանող համարվում են հավասար, եթե յուրաքանչյուր առարկայի գնահատականի տարբերությունը\n  չի գերազանցում 5-ը, և ընդհանուր գնահատականների տարբերությունը չի գերազանցում 10-ը:\n  Մուտք: Մեկ ամբողջ թիվ N, որը ներկայացնում է ուսանողների քանակը, որին հաջորդում է N տող՝ երեք ամբողջ թվերով, \n          որոնք ներկայացնում են յուրաքանչյուր ուսանողի գնահատականները չինարենում, մաթեմատիկայում և անգլերենում համապատասխանաբար:\n  Ելք: Մեկ ամբողջ թիվ, որը ներկայացնում է ուսանողների հավասար զույգերի քանակը:",
      "bn": "একটি PHP ফাংশন `function countEvenlyMatchedPairs($N, $students)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nশিক্ষার্থীদের পরীক্ষার স্কোরের ভিত্তিতে সমানভাবে মেলানো জোড়ার সংখ্যা গণনা করে।\n  দুটি শিক্ষার্থীকে সমানভাবে মেলানো বিবেচনা করা হয় যদি প্রতিটি বিষয়ের স্কোরের পার্থক্য\n  ৫ এর বেশি না হয় এবং মোট স্কোর পার্থক্য ১০ এর বেশি না হয়।\n  ইনপুট: একটি পূর্ণসংখ্যা N যা শিক্ষার্থীদের সংখ্যা নির্দেশ করে এবং তারপরে N লাইনে তিনটি পূর্ণসংখ্যা\n          যা প্রতিটি শিক্ষার্থীর চীনা, গণিত এবং ইংরেজিতে স্কোর প্রতিনিধিত্ব করে।\n  আউটপুট: একটি পূর্ণসংখ্যা যা সমানভাবে মেলানো শিক্ষার্থীদের জোড়ার সংখ্যা প্রতিনিধিত্ব করে।",
      "bg": "Напишете PHP функция `function countEvenlyMatchedPairs($N, $students)` за решаване на следния проблем:\nБрои броя на равномерно съвпадащите двойки студенти въз основа на техните резултати от изпити.\n  Двама студенти се считат за равномерно съвпадащи, ако разликата в резултатите по всеки предмет\n  не е по-голяма от 5 и общата разлика в резултатите не е по-голяма от 10.\n  Вход: Цяло число N, представляващо броя на студентите, последвано от N реда с по три цели числа\n          представляващи резултатите на всеки студент по китайски, математика и английски съответно.\n  Изход: Цяло число, представляващо броя на равномерно съвпадащите двойки студенти.",
      "zh": "编写一个PHP函数 `function countEvenlyMatchedPairs($N, $students)` 来解决以下问题：\n统计基于考试成绩的学生之间的均匀匹配对的数量。\n  如果每个科目的分数差不大于5，并且总分差不大于10，则两个学生被认为是均匀匹配的。\n  输入：一个整数N表示学生人数，接着是N行，每行三个整数分别代表每个学生的语文、数学和英语成绩。\n  输出：一个整数，表示均匀匹配的学生对的数量。",
      "fr": "Écrire une fonction PHP `function countEvenlyMatchedPairs($N, $students)` pour résoudre le problème suivant :\nCompte le nombre de paires de étudiants équitablement appariées en fonction de leurs scores d'examen.\n  Deux étudiants sont considérés comme équitablement appariés si la différence de score dans chaque matière\n  n'est pas supérieure à 5 et si la différence totale de score n'est pas supérieure à 10.\n  Entrée : Un entier N représentant le nombre d'étudiants suivi de N lignes de trois entiers chacun\n          représentant les scores de chaque étudiant en Chinois, Mathématiques et Anglais respectivement.\n  Sortie : Un entier représentant le nombre de paires de étudiants équitablement appariées.",
      "de": "Schreiben Sie eine PHP-Funktion `function countEvenlyMatchedPairs($N, $students)`, um das folgende Problem zu lösen:\nZählt die Anzahl der gleichmäßig abgestimmten Paare von Schülern basierend auf ihren Prüfungsergebnissen.\n  Zwei Schüler gelten als gleichmäßig abgestimmt, wenn der Unterschied in den Ergebnissen jedes Fachs\n  nicht größer als 5 ist und der Gesamtergebnisunterschied nicht größer als 10 ist.\n  Eingabe: Eine ganze Zahl N, die die Anzahl der Schüler darstellt, gefolgt von N Zeilen mit jeweils drei ganzen Zahlen,\n          die die Ergebnisse jedes Schülers in Chinesisch, Mathematik und Englisch darstellen.\n  Ausgabe: Eine ganze Zahl, die die Anzahl der gleichmäßig abgestimmten Paare von Schülern darstellt.",
      "ha": "Rubuta aikin PHP `function countEvenlyMatchedPairs($N, $students)` don warware matsalar mai zuwa:\nYana ƙididdige adadin ma'aurata da suka dace na ɗalibai bisa ga maki na jarrabawa.\n  Ana ɗaukar ɗalibai biyu sun dace idan bambancin maki a kowace darasi\n  bai fi 5 ba kuma bambancin jimlar maki bai fi 10 ba.\n  Shigarwa: Lamba ɗaya N mai wakiltar adadin ɗalibai sannan N layuka na lambobi uku kowanne\n          yana wakiltar maki na kowane ɗalibi a cikin Sinanci, Lissafi, da Turanci bi da bi.\n  Fitarwa: Lamba ɗaya mai wakiltar adadin ma'aurata da suka dace na ɗalibai.",
      "hi": "PHP फ़ंक्शन `function countEvenlyMatchedPairs($N, $students)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nछात्रों के परीक्षा अंकों के आधार पर समान रूप से मेल खाने वाले जोड़ों की संख्या गिनता है।\n  दो छात्र समान रूप से मेल खाते माने जाते हैं यदि प्रत्येक विषय के अंक का अंतर 5 से अधिक नहीं है\n  और कुल अंक का अंतर 10 से अधिक नहीं है।\n  इनपुट: एक पूर्णांक N जो छात्रों की संख्या को दर्शाता है, इसके बाद N पंक्तियाँ जिनमें प्रत्येक में तीन पूर्णांक होते हैं\n          जो क्रमशः चीनी, गणित और अंग्रेजी में प्रत्येक छात्र के अंक दर्शाते हैं।\n  आउटपुट: छात्रों के समान रूप से मेल खाने वाले जोड़ों की संख्या दर्शाने वाला एक पूर्णांक।",
      "hu": "Írj egy PHP függvényt `function countEvenlyMatchedPairs($N, $students)` a következő probléma megoldására:\nSzámolja meg az egyenletesen párosított diákok számát a vizsgaeredményeik alapján.\n  Két diák akkor tekinthető egyenletesen párosítottnak, ha az egyes tantárgyak pontszámának különbsége\n  nem nagyobb, mint 5, és a teljes pontszámkülönbség nem nagyobb, mint 10.\n  Bemenet: Egy egész szám N, amely a diákok számát jelöli, majd N sor, amelyek mindegyike három egész számot tartalmaz,\n          amelyek a diákok pontszámait jelölik kínai, matematika és angol tantárgyakból.\n  Kimenet: Egy egész szám, amely az egyenletesen párosított diákok számát jelöli."
    },
    "instruction_bertscore": {
      "sq": "0.9639690447714144",
      "hy": "0.9628406255767552",
      "bn": "0.957310954399125",
      "bg": "0.9767511084213905",
      "zh": "0.9640963668456578",
      "fr": "0.9865489492266984",
      "de": "0.9775559587253438",
      "ha": "0.9487920946173006",
      "hi": "0.9625885636232219",
      "hu": "0.948987546912239"
    },
    "level": "easy",
    "test": "function main(){\n    assert(countEvenlyMatchedPairs(3, [[90, 90, 90], [85, 95, 90], [80, 100, 91]]) === 2);\n    assert(countEvenlyMatchedPairs(3, [[100, 100, 100], [85, 95, 90], [80, 100, 91]]) === 1);\n    assert(countEvenlyMatchedPairs(4, [[100, 100, 100],[100, 100, 100],[100, 100, 100],[100, 100, 100]]) === 6);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countEvenlyMatchedPairs",
    "signature": "function countEvenlyMatchedPairs($N, $students)",
    "docstring": {
      "en": "Counts the number of evenly matched pairs of students based on their exam scores.\n  Two students are considered evenly matched if the difference in each subject's score\n  is not greater than 5 and the total score difference is not greater than 10.\n  Input: An integer N representing the number of students followed by N lines of three integers each\n          representing the scores of each student in Chinese, Mathematics, and English respectively.\n  Output: An integer representing the number of evenly matched pairs of students.",
      "sq": "Llogarit numrin e çifteve të studentëve të përputhur në mënyrë të barabartë bazuar në rezultatet e tyre të provimeve.\n  Dy studentë konsiderohen të përputhur në mënyrë të barabartë nëse diferenca në rezultatin e secilit lëndë\n  nuk është më e madhe se 5 dhe diferenca totale e rezultateve nuk është më e madhe se 10.\n  Hyrja: Një numër i plotë N që përfaqëson numrin e studentëve i ndjekur nga N rreshta me nga tre numra të plotë secili\n          që përfaqësojnë rezultatet e secilit student në Kinezisht, Matematikë dhe Anglisht përkatësisht.\n  Dalja: Një numër i plotë që përfaqëson numrin e çifteve të studentëve të përputhur në mënyrë të barabartë.",
      "hy": "Հաշվում է ուսանողների զույգերի քանակը, որոնք հավասարաչափ համընկնում են իրենց քննությունների գնահատականների հիման վրա։\n  Երկու ուսանողներ համարվում են հավասարաչափ համընկնող, եթե յուրաքանչյուր առարկայի գնահատականների տարբերությունը\n  չի գերազանցում 5-ը և ընդհանուր գնահատականների տարբերությունը չի գերազանցում 10-ը։\n  Մուտք: Ամբողջ թիվ N, որը ներկայացնում է ուսանողների քանակը, որին հաջորդում է N տող, որոնցից յուրաքանչյուրը պարունակում է երեք ամբողջ թիվ՝\n          ներկայացնելով յուրաքանչյուր ուսանողի գնահատականները չինարենում, մաթեմատիկայում և անգլերենում համապատասխանաբար։\n  Ելք: Ամբողջ թիվ, որը ներկայացնում է հավասարաչափ համընկնող ուսանողների զույգերի քանակը։",
      "bn": "ছাত্রদের পরীক্ষার স্কোরের ভিত্তিতে সমানভাবে মেলানো জোড়ার সংখ্যা গণনা করে।\n  দুইজন ছাত্রকে সমানভাবে মিলিত বলে বিবেচনা করা হয় যদি প্রতিটি বিষয়ের স্কোরের পার্থক্য 5 এর বেশি না হয় এবং মোট স্কোরের পার্থক্য 10 এর বেশি না হয়।\n  Input: একটি পূর্ণসংখ্যা N যা ছাত্রদের সংখ্যা নির্দেশ করে, এর পরে N লাইন থাকে যেখানে প্রতিটি লাইনে তিনটি পূর্ণসংখ্যা থাকে যা প্রতিটি ছাত্রের চীনা, গণিত এবং ইংরেজি বিষয়ে স্কোর নির্দেশ করে।\n  Output: একটি পূর্ণসংখ্যা যা সমানভাবে মিলিত ছাত্রদের জোড়ার সংখ্যা নির্দেশ করে।",
      "bg": "Брои броя на равномерно съвпадащите двойки ученици въз основа на техните резултати от изпитите.\n  Двама ученици се считат за равномерно съвпадащи, ако разликата в резултатите по всеки предмет\n  не е по-голяма от 5 и разликата в общия резултат не е по-голяма от 10.\n  Вход: Цяло число N, представляващо броя на учениците, последвано от N реда с по три цели числа,\n          представляващи резултатите на всеки ученик по китайски, математика и английски съответно.\n  Изход: Цяло число, представляващо броя на равномерно съвпадащите двойки ученици.",
      "zh": "计算根据考试成绩匹配的学生对数。\n  如果每个科目的分数差不大于5，并且总分差不大于10，则认为两名学生匹配。\n  输入：一个整数N，表示学生人数，接下来是N行，每行有三个整数，分别代表每个学生的语文、数学和英语成绩。\n  输出：一个整数，表示匹配的学生对数。",
      "fr": "Compte le nombre de paires d'étudiants équitablement assorties en fonction de leurs scores d'examen.\n  Deux étudiants sont considérés comme équitablement assortis si la différence de score dans chaque matière\n  n'est pas supérieure à 5 et si la différence de score totale n'est pas supérieure à 10.\n  Entrée : Un entier N représentant le nombre d'étudiants suivi de N lignes de trois entiers chacun\n          représentant les scores de chaque étudiant en Chinois, Mathématiques et Anglais respectivement.\n  Sortie : Un entier représentant le nombre de paires d'étudiants équitablement assorties.",
      "de": "Zählt die Anzahl der gleichmäßig abgestimmten Paare von Schülern basierend auf ihren Prüfungsergebnissen. \nZwei Schüler gelten als gleichmäßig abgestimmt, wenn der Unterschied in jedem Fach nicht größer als 5 ist und der Gesamtnotenunterschied nicht größer als 10 ist. \nEingabe: Eine ganze Zahl N, die die Anzahl der Schüler darstellt, gefolgt von N Zeilen mit jeweils drei ganzen Zahlen, die die Noten jedes Schülers in Chinesisch, Mathematik und Englisch darstellen. \nAusgabe: Eine ganze Zahl, die die Anzahl der gleichmäßig abgestimmten Paare von Schülern darstellt.",
      "ha": "Yana ƙididdige adadin ma'aurata da suka dace da juna na ɗalibai bisa ga maki na jarrabawarsu.\n  Ana ɗaukar dalibai biyu a matsayin waɗanda suka yi daidai idan bambancin maki a kowace darasi\n  ba ya fi 5 ba kuma bambancin jimillar maki ba ya fi 10 ba.\n  Input: Wani lamba N da ke wakiltar adadin dalibai tare da N layuka na lambobi uku kowanne\n          suna wakiltar maki na kowanne dalibi a cikin Sinanci, Lissafi, da Turanci bi da bi.\n  Output: Wani lamba da ke wakiltar adadin ma'aurata na dalibai waɗanda suka yi daidai.",
      "hi": "छात्रों के परीक्षा अंकों के आधार पर समान रूप से मेल खाने वाले जोड़ों की संख्या गिनता है।\n  दो छात्रों को समान रूप से मेल खाता हुआ माना जाता है यदि प्रत्येक विषय के स्कोर में अंतर 5 से अधिक नहीं है और कुल स्कोर अंतर 10 से अधिक नहीं है।\n  Input: एक पूर्णांक N जो छात्रों की संख्या का प्रतिनिधित्व करता है, इसके बाद N पंक्तियाँ जिनमें प्रत्येक में तीन पूर्णांक होते हैं जो क्रमशः चीनी, गणित, और अंग्रेजी में प्रत्येक छात्र के स्कोर का प्रतिनिधित्व करते हैं।\n  Output: एक पूर्णांक जो समान रूप से मेल खाने वाले छात्रों की जोड़ी की संख्या का प्रतिनिधित्व करता है।",
      "hu": "Számolja meg a diákok között az egyenlően illeszkedő párok számát a vizsgaeredményeik alapján.\n  Két diák akkor tekinthető egyenlően illeszkedőnek, ha az egyes tantárgyak eredményeinek különbsége nem nagyobb, mint 5, és a teljes pontszám különbsége nem nagyobb, mint 10.\n  Bemenet: Egy egész szám N, amely a diákok számát jelöli, majd N sor, amelyek mindegyike három egész számot tartalmaz, amelyek a diákok kínai, matematika és angol eredményeit képviselik.\n  Kimenet: Egy egész szám, amely az egyenlően illeszkedő diákpárok számát jelöli."
    },
    "docstring_bertscore": {
      "sq": "0.9504494665166557",
      "hy": "0.9410834481597177",
      "bn": "0.9440559518119048",
      "bg": "0.9653713752615207",
      "zh": "0.9067694539447977",
      "fr": "0.9568308647681636",
      "de": "0.95472081423043",
      "ha": "0.9285381519239352",
      "hi": "0.9681138649324694",
      "hu": "0.8819333069913383"
    }
  },
  {
    "task_id": "PHP/42",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the total number of cigarettes Peter can smoke.\n * Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n * This process repeats until he can no longer exchange butts for new cigarettes.\n *\n * Parameters:\n * - $initialCigarettes (int): The initial number of cigarettes Peter has.\n * - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n *\n * Returns:\n * int: The total number of cigarettes Peter can smoke.\n *\n * Example:\n * - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n * - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin total të cigareve që Peter mund të pijë.\n * Peter fillon me një numër të caktuar cigareve dhe mund të shkëmbejë një numër të caktuar bishtash cigaresh për një cigare të re.\n * Ky proces përsëritet derisa ai të mos mund të shkëmbejë më bishta për cigare të reja.\n *\n * Parametrat:\n * - $initialCigarettes (int): Numri fillestar i cigareve që Peter ka.\n * - $buttsRequiredForNew (int): Numri i bishtave të cigareve të nevojshëm për të shkëmbyer për një cigare të re.\n *\n * Kthen:\n * int: Numri total i cigareve që Peter mund të pijë.\n *\n * Shembull:\n * - Me 4 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë gjithsej 5 cigare.\n * - Me 10 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë gjithsej 14 cigare.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է ընդհանուր ծխախոտների քանակը, որ Պետրոսը կարող է ծխել:\n * Պետրոսը սկսում է որոշակի քանակությամբ ծխախոտներով և կարող է որոշակի քանակությամբ ծխախոտի մնացորդները փոխանակել նոր ծխախոտի հետ:\n * Այս գործընթացը կրկնվում է, մինչև նա այլևս չի կարող փոխանակել մնացորդները նոր ծխախոտների հետ:\n *\n * Պարամետրեր:\n * - $initialCigarettes (int): Սկզբնական ծխախոտների քանակը, որ Պետրոսը ունի:\n * - $buttsRequiredForNew (int): Ծխախոտի մնացորդների քանակը, որը պահանջվում է նոր ծխախոտի փոխանակման համար:\n *\n * Վերադարձնում է:\n * int: Ընդհանուր ծխախոտների քանակը, որ Պետրոսը կարող է ծխել:\n *\n * Օրինակ:\n * - 4 սկզբնական ծխախոտներով և 3 մնացորդներով նոր ծխախոտի համար, Պետրոսը կարող է ծխել 5 ծխախոտ ընդհանուր:\n * - 10 սկզբնական ծխախոտներով և 3 մնացորդներով նոր ծխախոտի համար, Պետրոսը կարող է ծխել 14 ծխախոտ ընդհանուր:\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "bn": "<?php\n\n\n/**\n * পিটার মোট কতগুলো সিগারেট খেতে পারে তা গণনা করে।\n * পিটার একটি নির্দিষ্ট সংখ্যক সিগারেট দিয়ে শুরু করে এবং একটি নতুন সিগারেটের জন্য নির্দিষ্ট সংখ্যক সিগারেটের অবশিষ্টাংশ বিনিময় করতে পারে।\n * এই প্রক্রিয়াটি পুনরাবৃত্তি হয় যতক্ষণ না সে আর নতুন সিগারেটের জন্য অবশিষ্টাংশ বিনিময় করতে পারে।\n *\n * প্যারামিটার:\n * - $initialCigarettes (int): পিটারের কাছে প্রাথমিকভাবে থাকা সিগারেটের সংখ্যা।\n * - $buttsRequiredForNew (int): একটি নতুন সিগারেটের জন্য বিনিময় করতে প্রয়োজনীয় সিগারেটের অবশিষ্টাংশের সংখ্যা।\n *\n * রিটার্ন করে:\n * int: পিটার মোট কতগুলো সিগারেট খেতে পারে।\n *\n * উদাহরণ:\n * - 4 টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3 টি অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট 5 টি সিগারেট খেতে পারে।\n * - 10 টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3 টি অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট 14 টি সিগারেট খেতে পারে।\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява общия брой цигари, които Петър може да изпуши.\n * Петър започва с определен брой цигари и може да размени определен брой фасове за нова цигара.\n * Този процес се повтаря, докато той вече не може да размени фасове за нови цигари.\n *\n * Параметри:\n * - $initialCigarettes (int): Първоначалният брой цигари, които Петър има.\n * - $buttsRequiredForNew (int): Броят на фасовете, необходими за размяна за нова цигара.\n *\n * Връща:\n * int: Общият брой цигари, които Петър може да изпуши.\n *\n * Пример:\n * - С 4 първоначални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 5 цигари.\n * - С 10 първоначални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 14 цигари.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "zh": "<?php\n\n\n/**\n * 计算彼得可以抽的香烟总数。\n * 彼得开始时有一定数量的香烟，并且可以用一定数量的烟蒂换取一支新香烟。\n * 这个过程重复进行，直到他不能再用烟蒂换取新香烟为止。\n *\n * 参数:\n * - $initialCigarettes (int): 彼得最初拥有的香烟数量。\n * - $buttsRequiredForNew (int): 需要多少个烟蒂才能换取一支新香烟。\n *\n * 返回:\n * int: 彼得可以抽的香烟总数。\n *\n * 示例:\n * - 如果最初有4支香烟，并且需要3个烟蒂换取一支新香烟，彼得总共可以抽5支香烟。\n * - 如果最初有10支香烟，并且需要3个烟蒂换取一支新香烟，彼得总共可以抽14支香烟。\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre total de cigarettes que Peter peut fumer.\n * Peter commence avec un certain nombre de cigarettes et peut échanger un nombre spécifique de mégots de cigarettes contre une nouvelle cigarette.\n * Ce processus se répète jusqu'à ce qu'il ne puisse plus échanger de mégots contre de nouvelles cigarettes.\n *\n * Paramètres:\n * - $initialCigarettes (int): Le nombre initial de cigarettes que Peter a.\n * - $buttsRequiredForNew (int): Le nombre de mégots de cigarettes requis pour échanger contre une nouvelle cigarette.\n *\n * Renvoie:\n * int: Le nombre total de cigarettes que Peter peut fumer.\n *\n * Exemple:\n * - Avec 4 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 5 cigarettes au total.\n * - Avec 10 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 14 cigarettes au total.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n * Peter beginnt mit einer bestimmten Anzahl von Zigaretten und kann eine bestimmte Anzahl von Zigarettenstummeln gegen eine neue Zigarette eintauschen.\n * Dieser Vorgang wiederholt sich, bis er keine Stummel mehr gegen neue Zigaretten eintauschen kann.\n *\n * Parameter:\n * - $initialCigarettes (int): Die anfängliche Anzahl der Zigaretten, die Peter hat.\n * - $buttsRequiredForNew (int): Die Anzahl der Zigarettenstummel, die für den Austausch gegen eine neue Zigarette erforderlich sind.\n *\n * Rückgabewert:\n * int: Die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n *\n * Beispiel:\n * - Mit 4 anfänglichen Zigaretten und 3 erforderlichen Stummeln für eine neue kann Peter insgesamt 5 Zigaretten rauchen.\n * - Mit 10 anfänglichen Zigaretten und 3 erforderlichen Stummeln für eine neue kann Peter insgesamt 14 Zigaretten rauchen.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "ha": "<?php\n\n\n/**\n * Lissafa jimillar adadin sigari da Peter zai iya sha.\n * Peter yana fara da wani adadin sigari kuma zai iya musanya wani adadin bututun sigari don sabon sigari.\n * Wannan tsari yana maimaitawa har sai ba zai iya musanya bututun don sabbin sigari ba.\n *\n * Sigogi:\n * - $initialCigarettes (int): Adadin sigari na farko da Peter ke da shi.\n * - $buttsRequiredForNew (int): Adadin bututun sigari da ake bukata don musanya don sabon sigari.\n *\n * Komawa:\n * int: Jimillar adadin sigari da Peter zai iya sha.\n *\n * Misali:\n * - Tare da sigari 4 na farko da bututun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 5 a jimla.\n * - Tare da sigari 10 na farko da bututun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 14 a jimla.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hi": "<?php\n\n\n/**\n * पीटर कितनी कुल सिगरेट पी सकता है, इसकी गणना करता है।\n * पीटर एक निश्चित संख्या में सिगरेट के साथ शुरू करता है और एक नई सिगरेट के लिए एक विशिष्ट संख्या में सिगरेट के टुकड़े बदल सकता है।\n * यह प्रक्रिया तब तक दोहराई जाती है जब तक वह नए सिगरेट के लिए टुकड़े नहीं बदल सकता।\n *\n * पैरामीटर्स:\n * - $initialCigarettes (int): पीटर के पास प्रारंभिक सिगरेट की संख्या।\n * - $buttsRequiredForNew (int): एक नई सिगरेट के लिए बदलने के लिए आवश्यक सिगरेट टुकड़ों की संख्या।\n *\n * रिटर्न करता है:\n * int: पीटर कितनी कुल सिगरेट पी सकता है।\n *\n * उदाहरण:\n * - 4 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़े आवश्यक होने पर, पीटर कुल 5 सिगरेट पी सकता है।\n * - 10 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़े आवश्यक होने पर, पीटर कुल 14 सिगरेट पी सकता है।\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a cigaretták teljes számát, amit Péter elszívhat.\n * Péter egy bizonyos számú cigarettával kezd, és egy meghatározott számú cigarettacsikket cserélhet új cigarettára.\n * Ez a folyamat addig ismétlődik, amíg nem tud több csikket új cigarettára cserélni.\n *\n * Paraméterek:\n * - $initialCigarettes (int): A kezdeti cigaretták száma, amivel Péter rendelkezik.\n * - $buttsRequiredForNew (int): Az új cigarettára cserélendő cigarettacsikkek száma.\n *\n * Visszatérési érték:\n * int: A cigaretták teljes száma, amit Péter elszívhat.\n *\n * Példa:\n * - 4 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 5 cigarettát szívhat el.\n * - 10 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 14 cigarettát szívhat el.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int "
    },
    "prompt_bertscore": {
      "sq": "0.9822360877632879",
      "hy": "0.9527327227466518",
      "bn": "0.9864371203221758",
      "bg": "0.9856590851196622",
      "zh": "0.9603811841987812",
      "fr": "0.9918045104785005",
      "de": "0.9865994013434812",
      "ha": "0.9907495845248242",
      "hi": "0.9901963989136421",
      "hu": "0.983609020957001"
    },
    "canonical_solution": "{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}",
    "instruction": {
      "en": "Write a PHP function `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` to solve the following problem:\nCalculates the total number of cigarettes Peter can smoke.\n  Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n  This process repeats until he can no longer exchange butts for new cigarettes.\n \n  Parameters:\n  - $initialCigarettes (int): The initial number of cigarettes Peter has.\n  - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n \n  Returns:\n  int: The total number of cigarettes Peter can smoke.\n \n  Example:\n  - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n  - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.",
      "sq": "Shkruani një funksion PHP `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` për të zgjidhur problemin e mëposhtëm:\nLlogarit numrin total të cigareve që Pjetri mund të pijë.\n  Pjetri fillon me një numër të caktuar cigaresh dhe mund të shkëmbejë një numër specifik bishtash cigaresh për një cigare të re.\n  Ky proces përsëritet derisa ai të mos mund të shkëmbejë më bishta për cigare të reja.\n \n  Parametrat:\n  - $initialCigarettes (int): Numri fillestar i cigareve që ka Pjetri.\n  - $buttsRequiredForNew (int): Numri i bishtave të cigareve të nevojshëm për të shkëmbyer për një cigare të re.\n \n  Kthen:\n  int: Numri total i cigareve që Pjetri mund të pijë.\n \n  Shembull:\n  - Me 4 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Pjetri mund të pijë gjithsej 5 cigare.\n  - Me 10 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Pjetri mund të pijë gjithsej 14 cigare.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվարկում է ընդհանուր սիգարետների քանակը, որը կարող է ծխել Պետերը։\n  Պետերը սկսում է որոշակի քանակությամբ սիգարետներով և կարող է որոշակի քանակությամբ սիգարետի մնացորդներ փոխանակել նոր սիգարետի հետ։\n  Այս գործընթացը կրկնվում է, մինչև նա այլևս չի կարող փոխանակել մնացորդները նոր սիգարետների հետ։\n \n  Պարամետրեր:\n  - $initialCigarettes (int): Սկզբնական սիգարետների քանակը, որը ունի Պետերը։\n  - $buttsRequiredForNew (int): Սիգարետի մնացորդների քանակը, որը պահանջվում է նոր սիգարետ փոխանակելու համար։\n \n  Վերադարձնում է:\n  int: Սիգարետների ընդհանուր քանակը, որը կարող է ծխել Պետերը։\n \n  Օրինակ:\n  - 4 սկզբնական սիգարետներով և 3 մնացորդներով նոր սիգարետ ստանալու համար, Պետերը կարող է ծխել 5 սիգարետ ընդհանուր։\n  - 10 սկզբնական սիգարետներով և 3 մնացորդներով նոր սիգարետ ստանալու համար, Պետերը կարող է ծխել 14 սիգարետ ընդհանուր։",
      "bn": "PHP ফাংশন `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nপিটার মোট কতটি সিগারেট খেতে পারে তা গণনা করে।\n  পিটার একটি নির্দিষ্ট সংখ্যক সিগারেট দিয়ে শুরু করে এবং একটি নতুন সিগারেটের জন্য নির্দিষ্ট সংখ্যক সিগারেটের অবশিষ্টাংশ বিনিময় করতে পারে।\n  এই প্রক্রিয়াটি পুনরাবৃত্তি হয় যতক্ষণ না সে আর অবশিষ্টাংশ বিনিময় করে নতুন সিগারেট পেতে পারে না।\n\n  প্যারামিটার:\n  - $initialCigarettes (int): পিটারের কাছে থাকা প্রাথমিক সিগারেটের সংখ্যা।\n  - $buttsRequiredForNew (int): একটি নতুন সিগারেটের জন্য বিনিময় করতে প্রয়োজনীয় সিগারেটের অবশিষ্টাংশের সংখ্যা।\n\n  রিটার্ন:\n  int: পিটার মোট কতটি সিগারেট খেতে পারে।\n\n  উদাহরণ:\n  - ৪টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য ৩টি অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট ৫টি সিগারেট খেতে পারে।\n  - ১০টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য ৩টি অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট ১৪টি সিগারেট খেতে পারে।",
      "bg": "Напишете PHP функция `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int`, за да решите следния проблем:\nИзчислява общия брой цигари, които Петър може да изпуши.\n  Петър започва с определен брой цигари и може да обменя определен брой фасове за нова цигара.\n  Този процес се повтаря, докато той не може повече да обменя фасове за нови цигари.\n \n  Параметри:\n  - $initialCigarettes (int): Началният брой цигари, които Петър има.\n  - $buttsRequiredForNew (int): Броят на фасовете, необходими за обмен за нова цигара.\n \n  Връща:\n  int: Общият брой цигари, които Петър може да изпуши.\n \n  Пример:\n  - С 4 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 5 цигари.\n  - С 10 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 14 цигари.",
      "zh": "编写一个 PHP 函数 `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` 来解决以下问题：\n计算彼得可以抽的香烟总数。\n彼得从一定数量的香烟开始，并且可以用一定数量的烟头换取一支新香烟。\n这个过程重复进行，直到他不能再用烟头换取新香烟为止。\n\n参数：\n- $initialCigarettes (int): 彼得拥有的初始香烟数量。\n- $buttsRequiredForNew (int): 换取一支新香烟所需的烟头数量。\n\n返回：\nint: 彼得可以抽的香烟总数。\n\n示例：\n- 如果有 4 支初始香烟，并且需要 3 个烟头换取一支新香烟，彼得总共可以抽 5 支香烟。\n- 如果有 10 支初始香烟，并且需要 3 个烟头换取一支新香烟，彼得总共可以抽 14 支香烟。",
      "fr": "Écrire une fonction PHP `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` pour résoudre le problème suivant :\nCalcule le nombre total de cigarettes que Peter peut fumer.\n  Peter commence avec un certain nombre de cigarettes et peut échanger un nombre spécifique de mégots de cigarettes contre une nouvelle cigarette.\n  Ce processus se répète jusqu'à ce qu'il ne puisse plus échanger de mégots contre de nouvelles cigarettes.\n \n  Paramètres :\n  - $initialCigarettes (int) : Le nombre initial de cigarettes que Peter a.\n  - $buttsRequiredForNew (int) : Le nombre de mégots de cigarettes requis pour échanger contre une nouvelle cigarette.\n \n  Renvoie :\n  int : Le nombre total de cigarettes que Peter peut fumer.\n \n  Exemple :\n  - Avec 4 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 5 cigarettes au total.\n  - Avec 10 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 14 cigarettes au total.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int`, um das folgende Problem zu lösen:\nBerechnet die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n  Peter beginnt mit einer bestimmten Anzahl von Zigaretten und kann eine bestimmte Anzahl von Zigarettenstummeln gegen eine neue Zigarette eintauschen.\n  Dieser Vorgang wiederholt sich, bis er keine Stummel mehr gegen neue Zigaretten eintauschen kann.\n \n  Parameter:\n  - $initialCigarettes (int): Die anfängliche Anzahl der Zigaretten, die Peter hat.\n  - $buttsRequiredForNew (int): Die Anzahl der Zigarettenstummel, die für den Tausch gegen eine neue Zigarette erforderlich sind.\n \n  Rückgabewert:\n  int: Die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n \n  Beispiel:\n  - Mit 4 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 5 Zigaretten rauchen.\n  - Mit 10 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 14 Zigaretten rauchen.",
      "ha": "Rubuta aikin PHP `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` don warware matsalar mai zuwa:\n  Lissafa jimillar adadin sigari da Peter zai iya sha.\n  Peter yana farawa da wani adadin sigari kuma zai iya musanya wani adadin bututun sigari don sabon sigari.\n  Wannan tsari yana maimaitawa har sai ba zai iya musanya bututun sigari don sabbin sigari ba.\n\n  Sigogi:\n  - $initialCigarettes (int): Adadin sigari na farko da Peter ke da shi.\n  - $buttsRequiredForNew (int): Adadin bututun sigari da ake bukata don musanya da sabon sigari.\n\n  Komawa:\n  int: Jimillar adadin sigari da Peter zai iya sha.\n\n  Misali:\n  - Tare da sigari 4 na farko da bututun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 5 a jimla.\n  - Tare da sigari 10 na farko da bututun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 14 a jimla.",
      "hi": "PHP फ़ंक्शन `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nकुल सिगरेटों की संख्या की गणना करता है जो पीटर पी सकता है।\n  पीटर कुछ निश्चित संख्या में सिगरेटों के साथ शुरू करता है और एक नई सिगरेट के लिए एक निश्चित संख्या में सिगरेट के टुकड़े बदल सकता है।\n  यह प्रक्रिया तब तक दोहराई जाती है जब तक वह टुकड़ों को नई सिगरेटों के लिए नहीं बदल सकता।\n \n  पैरामीटर:\n  - $initialCigarettes (int): प्रारंभिक सिगरेटों की संख्या जो पीटर के पास है।\n  - $buttsRequiredForNew (int): एक नई सिगरेट के लिए बदलने के लिए आवश्यक सिगरेट के टुकड़ों की संख्या।\n \n  रिटर्न:\n  int: कुल सिगरेटों की संख्या जो पीटर पी सकता है।\n \n  उदाहरण:\n  - 4 प्रारंभिक सिगरेटों और एक नई सिगरेट के लिए 3 टुकड़े आवश्यक होने पर, पीटर कुल 5 सिगरेट पी सकता है।\n  - 10 प्रारंभिक सिगरेटों और एक नई सिगरेट के लिए 3 टुकड़े आवश्यक होने पर, पीटर कुल 14 सिगरेट पी सकता है।",
      "hu": "Írj egy PHP függvényt `function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int` a következő probléma megoldására:\nKiszámítja, hogy Péter összesen hány cigarettát tud elszívni.\n  Péter egy bizonyos számú cigarettával kezd, és egy meghatározott számú cigarettacsikket cserélhet be egy új cigarettára.\n  Ez a folyamat addig ismétlődik, amíg nem tud több csikket új cigarettára cserélni.\n \n  Paraméterek:\n  - $initialCigarettes (int): Az a kezdeti cigarettaszám, amivel Péter rendelkezik.\n  - $buttsRequiredForNew (int): Az a cigarettacsikk szám, amely szükséges egy új cigaretta cseréjéhez.\n \n  Visszatérési érték:\n  int: Az összes cigarettaszám, amelyet Péter el tud szívni.\n \n  Példa:\n  - 4 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 5 cigarettát tud elszívni.\n  - 10 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 14 cigarettát tud elszívni."
    },
    "instruction_bertscore": {
      "sq": "0.9848951526742019",
      "hy": "0.9761937515722066",
      "bn": "0.9695803530356499",
      "bg": "0.9857500578341761",
      "zh": "0.9651097790496977",
      "fr": "0.9896630763405634",
      "de": "0.980369756703084",
      "ha": "0.9878495809617148",
      "hi": "0.9839075624196965",
      "hu": "0.9862807982123013"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateTotalCigarettes(4, 3) === 5, 'Test Case 1 Failed');\n    assert(calculateTotalCigarettes(10, 3) === 14, 'Test Case 2 Failed');\n    assert(calculateTotalCigarettes(1, 2) === 1, 'Test Case 3 Failed');\n    assert(calculateTotalCigarettes(20, 5) === 24, 'Test Case 4 Failed');\n    assert(calculateTotalCigarettes(0, 3) === 0, 'Test Case 5 Failed');\n}\n\n\nmain();\n?>",
    "entry_point": "calculateTotalCigarettes",
    "signature": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int",
    "docstring": {
      "en": "Calculates the total number of cigarettes Peter can smoke.\n  Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n  This process repeats until he can no longer exchange butts for new cigarettes.\n \n  Parameters:\n  - $initialCigarettes (int): The initial number of cigarettes Peter has.\n  - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n \n  Returns:\n  int: The total number of cigarettes Peter can smoke.\n \n  Example:\n  - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n  - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.",
      "sq": "Llogarit numrin total të cigareve që Peter mund të pijë.  \nPeter fillon me një numër të caktuar cigareve dhe mund të shkëmbejë një numër të caktuar bishtash cigareje për një cigare të re.  \nKy proces përsëritet derisa ai të mos mund të shkëmbejë më bishta për cigare të reja.\n\nParametrat:  \n- $initialCigarettes (int): Numri fillestar i cigareve që Peter ka.  \n- $buttsRequiredForNew (int): Numri i bishtave të cigareve të nevojshëm për të shkëmbyer për një cigare të re.\n\nKthen:  \nint: Numri total i cigareve që Peter mund të pijë.\n\nShembull:  \n- Me 4 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë 5 cigare gjithsej.  \n- Me 10 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë 14 cigare gjithsej.",
      "hy": "Հաշվում է ընդհանուր ծխախոտների քանակը, որոնք Պետրոսը կարող է ծխել։  \nՊետրոսը սկսում է որոշակի քանակի ծխախոտներով և կարող է փոխանակել որոշակի քանակի ծխախոտի մնացորդներ նոր ծխախոտի համար։  \nԱյս գործընթացը կրկնվում է, մինչև նա այլևս չի կարող փոխանակել մնացորդները նոր ծխախոտների համար։\n\nՊարամետրեր:  \n- $initialCigarettes (int): Սկզբնական ծխախոտների քանակը, որ Պետրոսը ունի։  \n- $buttsRequiredForNew (int): Ծխախոտի մնացորդների քանակը, որը պահանջվում է նոր ծխախոտի փոխանակման համար։\n\nՎերադարձնում է:  \nint: Ընդհանուր ծխախոտների քանակը, որոնք Պետրոսը կարող է ծխել։\n\nՕրինակ:  \n- 4 սկզբնական ծխախոտներով և 3 մնացորդներով, որոնք պահանջվում են նորի համար, Պետրոսը կարող է ծխել 5 ծխախոտ ընդհանուր։  \n- 10 սկզբնական ծխախոտներով և 3 մնացորդներով, որոնք պահանջվում են նորի համար, Պետրոսը կարող է ծխել 14 ծխախոտ ընդհանուր։",
      "bn": "পিটার মোট কতগুলো সিগারেট খেতে পারে তা গণনা করে।\n  পিটার একটি নির্দিষ্ট সংখ্যক সিগারেট দিয়ে শুরু করে এবং একটি নতুন সিগারেটের জন্য একটি নির্দিষ্ট সংখ্যক সিগারেটের ফিল্টার বিনিময় করতে পারে।\n  এই প্রক্রিয়াটি পুনরাবৃত্তি হয় যতক্ষণ না সে নতুন সিগারেটের জন্য ফিল্টার বিনিময় করতে পারে না।\n\n  Parameters:\n  - $initialCigarettes (int): পিটারের কাছে প্রাথমিক সিগারেটের সংখ্যা।\n  - $buttsRequiredForNew (int): একটি নতুন সিগারেটের জন্য বিনিময় করতে প্রয়োজনীয় সিগারেট ফিল্টারের সংখ্যা।\n\n  Returns:\n  int: পিটার মোট কতগুলো সিগারেট খেতে পারে।\n\n  Example:\n  - 4টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3টি ফিল্টার প্রয়োজন হলে, পিটার মোট 5টি সিগারেট খেতে পারে।\n  - 10টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3টি ফিল্টার প্রয়োজন হলে, পিটার মোট 14টি সিগারেট খেতে পারে।",
      "bg": "Изчислява общия брой цигари, които Петър може да изпуши. Петър започва с определен брой цигари и може да обменя определен брой фасове за нова цигара. Този процес се повтаря, докато той вече не може да обменя фасове за нови цигари.\n\nПараметри:\n- $initialCigarettes (int): Началният брой цигари, които Петър има.\n- $buttsRequiredForNew (int): Броят на фасовете, необходими за обмен за нова цигара.\n\nВръща:\nint: Общият брой цигари, които Петър може да изпуши.\n\nПример:\n- С 4 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 5 цигари.\n- С 10 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 14 цигари.",
      "zh": "计算彼得可以抽的香烟总数。\n彼得从一定数量的香烟开始，并且可以用一定数量的烟头换取一支新香烟。\n这个过程重复进行，直到他无法再用烟头换取新香烟为止。\n\n参数：\n- $initialCigarettes (int): 彼得最初拥有的香烟数量。\n- $buttsRequiredForNew (int): 需要多少个烟头才能换取一支新香烟。\n\n返回：\nint: 彼得可以抽的香烟总数。\n\n示例：\n- 如果最初有4支香烟，并且需要3个烟头换取一支新香烟，彼得总共可以抽5支香烟。\n- 如果最初有10支香烟，并且需要3个烟头换取一支新香烟，彼得总共可以抽14支香烟。",
      "fr": "Calcule le nombre total de cigarettes que Peter peut fumer.  \nPeter commence avec un certain nombre de cigarettes et peut échanger un nombre spécifique de mégots de cigarettes contre une nouvelle cigarette.  \nCe processus se répète jusqu'à ce qu'il ne puisse plus échanger de mégots contre de nouvelles cigarettes.  \n\nParamètres:  \n- $initialCigarettes (int): Le nombre initial de cigarettes que Peter a.  \n- $buttsRequiredForNew (int): Le nombre de mégots de cigarettes requis pour échanger contre une nouvelle cigarette.  \n\nRenvoie:  \nint: Le nombre total de cigarettes que Peter peut fumer.  \n\nExemple:  \n- Avec 4 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 5 cigarettes au total.  \n- Avec 10 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 14 cigarettes au total.  ",
      "de": "Berechnet die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n  Peter beginnt mit einer bestimmten Anzahl von Zigaretten und kann eine bestimmte Anzahl von Zigarettenstummeln gegen eine neue Zigarette eintauschen.\n  Dieser Vorgang wiederholt sich, bis er keine Stummel mehr gegen neue Zigaretten eintauschen kann.\n \n  Parameter:\n  - $initialCigarettes (int): Die anfängliche Anzahl der Zigaretten, die Peter hat.\n  - $buttsRequiredForNew (int): Die Anzahl der Zigarettenstummel, die benötigt werden, um sie gegen eine neue Zigarette einzutauschen.\n \n  Rückgabewert:\n  int: Die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n \n  Beispiel:\n  - Mit 4 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 5 Zigaretten rauchen.\n  - Mit 10 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 14 Zigaretten rauchen.",
      "ha": "Lissafa jimillar adadin sigari da Peter zai iya sha.\nPeter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.  \nWannan tsari yana maimaitawa har sai ba zai iya musanya butts don sabbin sigari ba.  \n\nParameters:  \n- $initialCigarettes (int): Adadin sigari na farko da Peter ke da shi.  \n- $buttsRequiredForNew (int): Yawan butts na sigari da ake bukata don musanya da sabon sigari.  \n\nReturns:  \nint: Jimillar adadin sigari da Peter zai iya sha.  \n\nExample:  \n- Tare da sigari 4 na farko da butts 3 da ake bukata don sabon daya, Peter zai iya sha sigari 5 a jimla.  \n- Tare da sigari 10 na farko da butts 3 da ake bukata don sabon daya, Peter zai iya sha sigari 14 a jimla.  ",
      "hi": "पीटर कितनी कुल सिगरेट पी सकता है, इसकी गणना करता है।\nपीटर कितनी कुल सिगरेट पी सकता है, यह गणना करता है।  \nPeter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.  \nपीटर एक निश्चित संख्या में सिगरेट से शुरू करता है और एक नई सिगरेट के लिए एक विशिष्ट संख्या में सिगरेट के टुकड़े बदल सकता है।  \nThis process repeats until he can no longer exchange butts for new cigarettes.  \nयह प्रक्रिया तब तक दोहराई जाती है जब तक वह टुकड़ों को नई सिगरेट के लिए बदल नहीं सकता।  \n\nParameters:  \n- $initialCigarettes (int): The initial number of cigarettes Peter has.  \n  - $initialCigarettes (int): प्रारंभिक सिगरेट की संख्या जो पीटर के पास है।  \n- $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.  \n  - $buttsRequiredForNew (int): एक नई सिगरेट के लिए बदलने के लिए आवश्यक सिगरेट टुकड़ों की संख्या।  \n\nReturns:  \nint: The total number of cigarettes Peter can smoke.  \nint: कुल सिगरेट की संख्या जो पीटर पी सकता है।  \n\nExample:  \n- With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.  \n  - 4 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़ों की आवश्यकता के साथ, पीटर कुल 5 सिगरेट पी सकता है।  \n- With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.  \n  - 10 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़ों की आवश्यकता के साथ, पीटर कुल 14 सिगरेट पी सकता है।  ",
      "hu": "Kiszámítja, hogy összesen hány cigarettát tud elszívni Péter.\n  Péter egy bizonyos számú cigarettával kezd, és egy új cigarettáért egy meghatározott számú cigarettacsikket tud cserélni.\n  Ez a folyamat addig ismétlődik, amíg már nem tud több csikket új cigarettára cserélni.\n\n  Paraméterek:\n  - $initialCigarettes (int): Az a kezdeti cigarettaszám, amivel Péter rendelkezik.\n  - $buttsRequiredForNew (int): Az új cigarettáért cserélendő cigarettacsikkek száma.\n\n  Visszatérési érték:\n  int: Az összes cigarettaszám, amit Péter el tud szívni.\n\n  Példa:\n  - 4 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 5 cigarettát tud elszívni.\n  - 10 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 14 cigarettát tud elszívni."
    },
    "docstring_bertscore": {
      "sq": "0.993839875992965",
      "hy": "0.9593671761035981",
      "bn": "0.9274069519039415",
      "bg": "0.9818640530596096",
      "zh": "0.9523734003873597",
      "fr": "0.9896142132668287",
      "de": "0.9828401227520149",
      "ha": "0.9931581765252533",
      "hi": "0.999999801369619",
      "hu": "0.9807900585893539"
    }
  },
  {
    "task_id": "PHP/43",
    "prompt": {
      "en": "<?php\n\n/**\n * Finds the length of the longest sequence of consecutive numbers in an array.\n * Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n * For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n * Input: An array of integers.\n * Output: The length of the longest sequence of consecutive numbers found in the array.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "sq": "<?php\n\n/**\n * Gjen gjatësinë e sekuencës më të gjatë të numrave radhazi në një varg.\n * Numrat radhazi janë numra që vijnë njëri pas tjetrit në rend pa ndonjë ndërprerje.\n * Për shembull, në vargun [1, 3, 5, 4, 2, 6], sekuenca më e gjatë e numrave radhazi është [1, 2, 3, 4, 5, 6], e cila ka një gjatësi prej 6.\n * Hyrja: Një varg me numra të plotë.\n * Dalja: Gjatësia e sekuencës më të gjatë të numrave radhazi të gjetur në varg.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hy": "<?php\n\n/**\n * Գտնում է ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը զանգվածում:\n * Հաջորդական թվերը այն թվերն են, որոնք գալիս են մեկը մյուսի հետևից առանց բացերի:\n * Օրինակ, [1, 3, 5, 4, 2, 6] զանգվածում ամենաերկար հաջորդական թվերի հաջորդականությունը [1, 2, 3, 4, 5, 6] է, որը ունի 6 երկարություն:\n * Մուտք: Թվերի զանգված:\n * Ելք: Ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը, որը գտնվել է զանգվածում:\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "bn": "<?php\n\n/**\n * একটি অ্যারের মধ্যে ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য খুঁজে বের করে।\n * ধারাবাহিক সংখ্যা হল সংখ্যা যা কোন ফাঁক ছাড়াই ক্রমে একের পর এক আসে।\n * উদাহরণস্বরূপ, অ্যারে [1, 3, 5, 4, 2, 6] এ, ধারাবাহিক সংখ্যার দীর্ঘতম ক্রম হল [1, 2, 3, 4, 5, 6], যার দৈর্ঘ্য 6।\n * ইনপুট: পূর্ণসংখ্যার একটি অ্যারে।\n * আউটপুট: অ্যারেতে পাওয়া ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য।\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "bg": "<?php\n\n/**\n * Намира дължината на най-дългата последователност от последователни числа в масив.\n * Последователни числа са числа, които идват едно след друго в ред без пропуски.\n * Например, в масива [1, 3, 5, 4, 2, 6], най-дългата последователност от последователни числа е [1, 2, 3, 4, 5, 6], която има дължина 6.\n * Вход: Масив от цели числа.\n * Изход: Дължината на най-дългата последователност от последователни числа, намерена в масива.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "zh": "<?php\n\n/**\n * 查找数组中最长连续数字序列的长度。\n * 连续数字是指在序列中一个接一个出现且没有间隔的数字。\n * 例如，在数组 [1, 3, 5, 4, 2, 6] 中，最长的连续数字序列是 [1, 2, 3, 4, 5, 6]，其长度为 6。\n * 输入：一个整数数组。\n * 输出：在数组中找到的最长连续数字序列的长度。\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "fr": "<?php\n\n/**\n * Trouve la longueur de la plus longue séquence de nombres consécutifs dans un tableau.\n * Les nombres consécutifs sont des nombres qui se suivent dans l'ordre sans aucun écart.\n * Par exemple, dans le tableau [1, 3, 5, 4, 2, 6], la plus longue séquence de nombres consécutifs est [1, 2, 3, 4, 5, 6], qui a une longueur de 6.\n * Entrée : Un tableau d'entiers.\n * Sortie : La longueur de la plus longue séquence de nombres consécutifs trouvée dans le tableau.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "de": "<?php\n\n/**\n * Findet die Länge der längsten Sequenz aufeinanderfolgender Zahlen in einem Array.\n * Aufeinanderfolgende Zahlen sind Zahlen, die ohne Lücken nacheinander in einer Sequenz erscheinen.\n * Zum Beispiel, im Array [1, 3, 5, 4, 2, 6], ist die längste Sequenz aufeinanderfolgender Zahlen [1, 2, 3, 4, 5, 6], die eine Länge von 6 hat.\n * Eingabe: Ein Array von ganzen Zahlen.\n * Ausgabe: Die Länge der längsten Sequenz aufeinanderfolgender Zahlen, die im Array gefunden wird.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "ha": "<?php\n\n/**\n * Nemo tsawon jerin lambobi masu jere mafi tsawo a cikin wani tsari.\n * Lambobi masu jere su ne lambobi waɗanda ke zuwa ɗaya bayan ɗaya a jere ba tare da wani tazara ba.\n * Alal misali, a cikin jerin [1, 3, 5, 4, 2, 6], jerin lambobi masu jere mafi tsawo shi ne [1, 2, 3, 4, 5, 6], wanda ke da tsawon 6.\n * Shigarwa: Wani tsari na lambobi masu cikakken lamba.\n * Fitarwa: Tsawon jerin lambobi masu jere mafi tsawo da aka samu a cikin jerin.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hi": "<?php\n\n/**\n * एक array में लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई खोजता है।\n * लगातार संख्याएँ वे संख्याएँ होती हैं जो बिना किसी अंतराल के क्रम में एक के बाद एक आती हैं।\n * उदाहरण के लिए, array [1, 3, 5, 4, 2, 6] में, लगातार संख्याओं का सबसे लंबा अनुक्रम [1, 2, 3, 4, 5, 6] है, जिसकी लंबाई 6 है।\n * इनपुट: पूर्णांकों का एक array।\n * आउटपुट: array में पाए गए लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई।\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hu": "<?php\n\n/**\n * Megkeresi a leghosszabb egymást követő számok sorozatának hosszát egy tömbben.\n * Az egymást követő számok olyan számok, amelyek egymás után jönnek a sorozatban megszakítás nélkül.\n * Például a [1, 3, 5, 4, 2, 6] tömbben a leghosszabb egymást követő számok sorozata [1, 2, 3, 4, 5, 6], amelynek hossza 6.\n * Bemenet: Egész számokat tartalmazó tömb.\n * Kimenet: A tömbben található leghosszabb egymást követő számok sorozatának hossza.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int "
    },
    "prompt_bertscore": {
      "sq": "0.987736957535668",
      "hy": "0.9671731514478882",
      "bn": "0.9920289628090699",
      "bg": "0.9859608046684541",
      "zh": "0.9541201559581804",
      "fr": "0.9784996516656406",
      "de": "0.9698447300728075",
      "ha": "0.9692275854789321",
      "hi": "0.9896461927581754",
      "hu": "0.9754016136126394"
    },
    "canonical_solution": "{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}",
    "instruction": {
      "en": "Write a PHP function `function findLongestConsecutiveSequence(array $numbers): int` to solve the following problem:\nFinds the length of the longest sequence of consecutive numbers in an array.\n  Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n  For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n  Input: An array of integers.\n  Output: The length of the longest sequence of consecutive numbers found in the array.",
      "sq": "Shkruani një funksion PHP `function findLongestConsecutiveSequence(array $numbers): int` për të zgjidhur problemin në vijim:\nGjen gjatësinë e sekuencës më të gjatë të numrave radhazi në një varg.\n  Numrat radhazi janë numra që vijnë njëri pas tjetrit në sekuencë pa ndonjë hendek.\n  Për shembull, në vargun [1, 3, 5, 4, 2, 6], sekuenca më e gjatë e numrave radhazi është [1, 2, 3, 4, 5, 6], e cila ka një gjatësi prej 6.\n  Hyrja: Një varg me numra të plotë.\n  Dalja: Gjatësia e sekuencës më të gjatë të numrave radhazi të gjetur në varg.",
      "hy": "Գրեք PHP ֆունկցիա `function findLongestConsecutiveSequence(array $numbers): int` հետևյալ խնդիրը լուծելու համար:\nԳտնում է ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը զանգվածում:\n  Հաջորդական թվերը այն թվերն են, որոնք գալիս են մեկը մյուսի հետևից առանց բացերի:\n  Օրինակ, [1, 3, 5, 4, 2, 6] զանգվածում ամենաերկար հաջորդական թվերի հաջորդականությունը [1, 2, 3, 4, 5, 6] է, որը ունի 6 երկարություն:\n  Մուտք: Բոլոր թվերի զանգված:\n  Ելք: Ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը, որը գտնվել է զանգվածում:",
      "bn": "একটি PHP ফাংশন `function findLongestConsecutiveSequence(array $numbers): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি অ্যারেতে পরপর সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য খুঁজে বের করে।\n  পরপর সংখ্যা হল সংখ্যা যা কোনো ফাঁক ছাড়াই ক্রমে একের পর এক আসে।\n  উদাহরণস্বরূপ, অ্যারে [1, 3, 5, 4, 2, 6]-এ, পরপর সংখ্যার দীর্ঘতম ক্রম হল [1, 2, 3, 4, 5, 6], যার দৈর্ঘ্য 6।\n  ইনপুট: পূর্ণসংখ্যার একটি অ্যারে।\n  আউটপুট: অ্যারেতে পাওয়া পরপর সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য।",
      "bg": "Напишете PHP функция `function findLongestConsecutiveSequence(array $numbers): int`, за да решите следния проблем:\nНамира дължината на най-дългата последователност от последователни числа в масив.\n  Последователни числа са числа, които идват едно след друго в последователност без пропуски.\n  Например, в масива [1, 3, 5, 4, 2, 6], най-дългата последователност от последователни числа е [1, 2, 3, 4, 5, 6], която има дължина 6.\n  Вход: Масив от цели числа.\n  Изход: Дължината на най-дългата последователност от последователни числа, намерена в масива.",
      "zh": "编写一个 PHP 函数 `function findLongestConsecutiveSequence(array $numbers): int` 来解决以下问题：\n找到数组中最长的连续数字序列的长度。\n  连续数字是指在序列中没有间隔地一个接一个出现的数字。\n  例如，在数组 [1, 3, 5, 4, 2, 6] 中，最长的连续数字序列是 [1, 2, 3, 4, 5, 6]，其长度为 6。\n  输入：一个整数数组。\n  输出：数组中找到的最长连续数字序列的长度。",
      "fr": "Écrire une fonction PHP `function findLongestConsecutiveSequence(array $numbers): int` pour résoudre le problème suivant :\nTrouver la longueur de la plus longue séquence de nombres consécutifs dans un tableau.\n  Les nombres consécutifs sont des nombres qui se suivent dans l'ordre sans aucun écart.\n  Par exemple, dans le tableau [1, 3, 5, 4, 2, 6], la plus longue séquence de nombres consécutifs est [1, 2, 3, 4, 5, 6], qui a une longueur de 6.\n  Entrée : Un tableau d'entiers.\n  Sortie : La longueur de la plus longue séquence de nombres consécutifs trouvée dans le tableau.",
      "de": "Schreiben Sie eine PHP-Funktion `function findLongestConsecutiveSequence(array $numbers): int`, um das folgende Problem zu lösen:\nFindet die Länge der längsten Sequenz von aufeinanderfolgenden Zahlen in einem Array.\n  Aufeinanderfolgende Zahlen sind Zahlen, die ohne Lücken nacheinander in der Sequenz kommen.\n  Zum Beispiel, im Array [1, 3, 5, 4, 2, 6], ist die längste Sequenz von aufeinanderfolgenden Zahlen [1, 2, 3, 4, 5, 6], die eine Länge von 6 hat.\n  Eingabe: Ein Array von ganzen Zahlen.\n  Ausgabe: Die Länge der längsten Sequenz von aufeinanderfolgenden Zahlen, die im Array gefunden wurde.",
      "ha": "Rubuta aikin PHP `function findLongestConsecutiveSequence(array $numbers): int` don warware matsalar mai zuwa:\nNemo tsawon jerin lambobi masu jere mafi tsawo a cikin jerin.\n  Lambobi masu jere su ne lambobi waɗanda ke zuwa ɗaya bayan ɗaya a jere ba tare da wata tazara ba.\n  Misali, a cikin jerin [1, 3, 5, 4, 2, 6], jerin lambobi masu jere mafi tsawo shi ne [1, 2, 3, 4, 5, 6], wanda ke da tsawon 6.\n  Shigarwa: Jerin lambobi na integers.\n  Fitarwa: Tsawon jerin lambobi masu jere mafi tsawo da aka samu a cikin jerin.",
      "hi": "PHP फ़ंक्शन `function findLongestConsecutiveSequence(array $numbers): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक array में लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई खोजें।\n  लगातार संख्याएँ वे होती हैं जो बिना किसी अंतराल के अनुक्रम में एक के बाद एक आती हैं।\n  उदाहरण के लिए, array [1, 3, 5, 4, 2, 6] में, लगातार संख्याओं का सबसे लंबा अनुक्रम [1, 2, 3, 4, 5, 6] है, जिसकी लंबाई 6 है।\n  इनपुट: पूर्णांकों का एक array।\n  आउटपुट: array में पाई गई लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई।",
      "hu": "Írj egy PHP függvényt `function findLongestConsecutiveSequence(array $numbers): int` a következő probléma megoldására:\nMegtalálja a leghosszabb egymást követő számok sorozatának hosszát egy tömbben.\n  Az egymást követő számok olyan számok, amelyek egymás után következnek a sorozatban megszakítás nélkül.\n  Például a [1, 3, 5, 4, 2, 6] tömbben a leghosszabb egymást követő számok sorozata [1, 2, 3, 4, 5, 6], amelynek hossza 6.\n  Bemenet: Egész számok tömbje.\n  Kimenet: A tömbben található leghosszabb egymást követő számok sorozatának hossza."
    },
    "instruction_bertscore": {
      "sq": "0.9899024259497105",
      "hy": "0.9745864345288723",
      "bn": "0.9715271294001729",
      "bg": "0.9917965652632591",
      "zh": "0.9538339295791092",
      "fr": "0.9717698557257975",
      "de": "0.985385173824215",
      "ha": "0.951674618706879",
      "hi": "0.9747167360588311",
      "hu": "0.9710841836504651"
    },
    "level": "easy",
    "test": "function main(){\n    assert(findLongestConsecutiveSequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9]) === 6);\n    assert(findLongestConsecutiveSequence([10, 4, 20, 1, 3, 2]) === 4);\n    assert(findLongestConsecutiveSequence([1, 2, 2, 3]) === 3);\n    assert(findLongestConsecutiveSequence([]) === 0);\n    assert(findLongestConsecutiveSequence([7]) === 1);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findLongestConsecutiveSequence",
    "signature": "function findLongestConsecutiveSequence(array $numbers): int",
    "docstring": {
      "en": "Finds the length of the longest sequence of consecutive numbers in an array.\n  Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n  For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n  Input: An array of integers.\n  Output: The length of the longest sequence of consecutive numbers found in the array.",
      "sq": "Gjen gjatësinë e sekuencës më të gjatë të numrave radhazi në një varg.\nNumrat radhazi janë numra që vijnë njëri pas tjetrit në sekuencë pa ndonjë ndërprerje.\nPër shembull, në vargun [1, 3, 5, 4, 2, 6], sekuenca më e gjatë e numrave radhazi është [1, 2, 3, 4, 5, 6], e cila ka një gjatësi prej 6.\nInput: Një varg i numrave të plotë.\nOutput: Gjatësia e sekuencës më të gjatë të numrave radhazi të gjetur në varg.",
      "hy": "Գտնում է ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը զանգվածում։  \nՀաջորդական թվերը այն թվերն են, որոնք հաջորդում են միմյանց առանց բացերի։  \nՕրինակ, [1, 3, 5, 4, 2, 6] զանգվածում ամենաերկար հաջորդական թվերի հաջորդականությունը [1, 2, 3, 4, 5, 6] է, որը ունի 6 երկարություն։  \nՄուտք: Թվերի զանգված։  \nԵլք: Ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը, որը գտնվել է զանգվածում։",
      "bn": "একটি অ্যারের মধ্যে ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য খুঁজে বের করে।\n  ধারাবাহিক সংখ্যাগুলি হল এমন সংখ্যা যা কোন ফাঁক ছাড়াই ধারাবাহিকভাবে একটির পর একটি আসে।\n  উদাহরণস্বরূপ, [1, 3, 5, 4, 2, 6] অ্যারেতে, ধারাবাহিক সংখ্যার দীর্ঘতম ক্রম হল [1, 2, 3, 4, 5, 6], যার দৈর্ঘ্য 6।\n  Input: পূর্ণসংখ্যার একটি অ্যারে।\n  Output: অ্যারেতে পাওয়া ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য।",
      "bg": "Намира дължината на най-дългата последователност от последователни числа в масив.\n  Последователни числа са числа, които идват едно след друго в последователност без пропуски.\n  Например, в масива [1, 3, 5, 4, 2, 6], най-дългата последователност от последователни числа е [1, 2, 3, 4, 5, 6], която има дължина 6.\n  Вход: Масив от цели числа.\n  Изход: Дължината на най-дългата последователност от последователни числа, намерена в масива.",
      "zh": "找到数组中最长的连续数字序列的长度。\n  连续数字是指在序列中一个接一个出现且没有间隔的数字。\n  例如，在数组 [1, 3, 5, 4, 2, 6] 中，最长的连续数字序列是 [1, 2, 3, 4, 5, 6]，其长度为 6。\n  输入：一个整数数组。\n  输出：在数组中找到的最长连续数字序列的长度。",
      "fr": "Trouve la longueur de la plus longue séquence de nombres consécutifs dans un tableau.\n  Les nombres consécutifs sont des nombres qui se suivent dans l'ordre sans aucun écart.\n  Par exemple, dans le tableau [1, 3, 5, 4, 2, 6], la plus longue séquence de nombres consécutifs est [1, 2, 3, 4, 5, 6], qui a une longueur de 6.\n  Entrée : Un tableau d'entiers.\n  Sortie : La longueur de la plus longue séquence de nombres consécutifs trouvée dans le tableau.",
      "de": "Findet die Länge der längsten Sequenz aufeinanderfolgender Zahlen in einem Array.\n  Aufeinanderfolgende Zahlen sind Zahlen, die ohne Lücken nacheinander in der Sequenz kommen.\n  Zum Beispiel ist in dem Array [1, 3, 5, 4, 2, 6] die längste Sequenz aufeinanderfolgender Zahlen [1, 2, 3, 4, 5, 6], die eine Länge von 6 hat.\n  Eingabe: Ein Array von ganzen Zahlen.\n  Ausgabe: Die Länge der längsten Sequenz aufeinanderfolgender Zahlen, die im Array gefunden wurde.",
      "ha": "Yana gano tsawon jerin lambobi masu jere mafi tsawo a cikin wani tsararraki.\n  Lambobi masu jere su ne lambobi da ke zuwa daya bayan daya a jere ba tare da wani tazara ba.\n  Alal misali, a cikin tsararraki [1, 3, 5, 4, 2, 6], jerin lambobi masu jere mafi tsawo shi ne [1, 2, 3, 4, 5, 6], wanda ke da tsawon 6.\n  Shigarwa: Wani tsararraki na lambobi masu cikakken lamba.\n  Fitarwa: Tsawon jerin lambobi masu jere mafi tsawo da aka samu a cikin tsararrakin.",
      "hi": "एक array में लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई खोजता है।\n  लगातार संख्याएँ वे संख्याएँ होती हैं जो बिना किसी अंतराल के क्रम में एक के बाद एक आती हैं।\n  उदाहरण के लिए, सरणी [1, 3, 5, 4, 2, 6] में, लगातार संख्याओं का सबसे लंबा अनुक्रम [1, 2, 3, 4, 5, 6] है, जिसकी लंबाई 6 है।\n  Input: पूर्णांकों की एक सरणी।\n  Output: सरणी में पाई गई लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई।",
      "hu": "Megkeresi a leghosszabb egymást követő számok sorozatának hosszát egy tömbben.\n  Az egymást követő számok olyan számok, amelyek szünet nélkül követik egymást a sorozatban.\n  Például a [1, 3, 5, 4, 2, 6] tömbben a leghosszabb egymást követő számok sorozata [1, 2, 3, 4, 5, 6], amelynek hossza 6.\n  Bemenet: Egész számokat tartalmazó tömb.\n  Kimenet: A tömbben található leghosszabb egymást követő számok sorozatának hossza."
    },
    "docstring_bertscore": {
      "sq": "0.9799276054749004",
      "hy": "0.9451347134113053",
      "bn": "0.9761214501135099",
      "bg": "0.9901536933817195",
      "zh": "0.9431587383807701",
      "fr": "0.9680479196459658",
      "de": "0.9881713621789914",
      "ha": "0.9854243040092788",
      "hi": "0.9894312746858956",
      "hu": "0.9622169261803056"
    }
  },
  {
    "task_id": "PHP/44",
    "prompt": {
      "en": "<?php\n\n/**\n * Compares the area of a square and a rectangle to determine which is larger.\n * The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n * Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n * Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.\n */\nfunction compareArea($a, $b, $c): string ",
      "sq": "<?php\n\n/**\n * Krahason sipërfaqen e një katrori dhe një drejtkëndëshi për të përcaktuar cili është më i madh.\n * Gjatësia e brinjës së katrorit përfaqësohet nga $a, ndërsa dimensionet e drejtkëndëshit përfaqësohen nga $b dhe $c.\n * Hyrja: Tre numra të plotë $a, $b, dhe $c, ku $a është gjatësia e brinjës së katrorit, dhe $b dhe $c janë gjerësia dhe lartësia e drejtkëndëshit, përkatësisht.\n * Dalja: Kthen një varg \"Alice\" nëse sipërfaqja e katrorit është më e madhe, \"Bob\" nëse sipërfaqja e drejtkëndëshit është më e madhe, ose \"Equal\" nëse të dyja sipërfaqet janë të njëjta.\n */\nfunction compareArea($a, $b, $c): string ",
      "hy": "<?php\n\n/**\n * Համեմատում է քառակուսու և ուղղանկյան մակերեսները՝ որոշելու, թե որն է ավելի մեծ։\n * Քառակուսու կողի երկարությունը ներկայացված է $a-ով, իսկ ուղղանկյան չափերը ներկայացված են $b և $c-ով։\n * Մուտք: Երեք ամբողջ թիվ $a, $b և $c, որտեղ $a-ն քառակուսու կողի երկարությունն է, իսկ $b և $c-ն ուղղանկյան լայնությունն ու բարձրությունն են, համապատասխանաբար։\n * Ելք: Վերադարձնում է \"Alice\" տողը, եթե քառակուսու մակերեսը մեծ է, \"Bob\" եթե ուղղանկյան մակերեսը մեծ է, կամ \"Equal\" եթե երկու մակերեսներն էլ նույնն են։\n */\nfunction compareArea($a, $b, $c): string ",
      "bn": "<?php\n\n/**\n * একটি বর্গক্ষেত্র এবং একটি আয়তক্ষেত্রের ক্ষেত্রফল তুলনা করে নির্ধারণ করে কোনটি বড়।\n * বর্গক্ষেত্রের বাহুর দৈর্ঘ্য $a দ্বারা উপস্থাপিত হয়, যখন আয়তক্ষেত্রের মাত্রা $b এবং $c দ্বারা উপস্থাপিত হয়।\n * ইনপুট: তিনটি পূর্ণসংখ্যা $a, $b, এবং $c, যেখানে $a বর্গক্ষেত্রের বাহুর দৈর্ঘ্য, এবং $b এবং $c আয়তক্ষেত্রের প্রস্থ এবং উচ্চতা, যথাক্রমে।\n * আউটপুট: একটি স্ট্রিং \"Alice\" ফেরত দেয় যদি বর্গক্ষেত্রের ক্ষেত্রফল বড় হয়, \"Bob\" যদি আয়তক্ষেত্রের ক্ষেত্রফল বড় হয়, অথবা \"Equal\" যদি উভয় ক্ষেত্রফল একই হয়।\n */\nfunction compareArea($a, $b, $c): string ",
      "bg": "<?php\n\n/**\n * Сравнява площта на квадрат и правоъгълник, за да определи кой е по-голям.\n * Страната на квадрата е представена от $a, докато размерите на правоъгълника са представени от $b и $c.\n * Вход: Три цели числа $a, $b и $c, където $a е дължината на страната на квадрата, а $b и $c са ширината и височината на правоъгълника, съответно.\n * Изход: Връща низ \"Alice\", ако площта на квадрата е по-голяма, \"Bob\", ако площта на правоъгълника е по-голяма, или \"Equal\", ако и двете площи са еднакви.\n */\nfunction compareArea($a, $b, $c): string ",
      "zh": "<?php\n\n/**\n * 比较正方形和矩形的面积以确定哪个更大。\n * 正方形的边长由 $a 表示，而矩形的尺寸由 $b 和 $c 表示。\n * 输入：三个整数 $a, $b 和 $c，其中 $a 是正方形的边长，$b 和 $c 分别是矩形的宽度和高度。\n * 输出：如果正方形的面积更大，返回字符串 \"Alice\"；如果矩形的面积更大，返回 \"Bob\"；如果两个面积相同，返回 \"Equal\"。\n */\nfunction compareArea($a, $b, $c): string ",
      "fr": "<?php\n\n/**\n * Compare la surface d'un carré et d'un rectangle pour déterminer lequel est plus grand.\n * La longueur du côté du carré est représentée par $a, tandis que les dimensions du rectangle sont représentées par $b et $c.\n * Entrée : Trois entiers $a, $b, et $c, où $a est la longueur du côté du carré, et $b et $c sont la largeur et la hauteur du rectangle, respectivement.\n * Sortie : Retourne une chaîne \"Alice\" si la surface du carré est plus grande, \"Bob\" si la surface du rectangle est plus grande, ou \"Equal\" si les deux surfaces sont identiques.\n */\nfunction compareArea($a, $b, $c): string ",
      "de": "<?php\n\n/**\n * Vergleicht die Fläche eines Quadrats und eines Rechtecks, um festzustellen, welche größer ist.\n * Die Seitenlänge des Quadrats wird durch $a dargestellt, während die Abmessungen des Rechtecks durch $b und $c dargestellt werden.\n * Eingabe: Drei ganze Zahlen $a, $b und $c, wobei $a die Seitenlänge des Quadrats ist und $b und $c die Breite und Höhe des Rechtecks sind.\n * Ausgabe: Gibt einen String \"Alice\" zurück, wenn die Fläche des Quadrats größer ist, \"Bob\", wenn die Fläche des Rechtecks größer ist, oder \"Equal\", wenn beide Flächen gleich sind.\n */\nfunction compareArea($a, $b, $c): string ",
      "ha": "<?php\n\n/**\n * Kwatanta yanki na murabba'i da na rectangle don tantance wanda yafi girma.\n * Tsawon gefen murabba'i ana wakilta shi da $a, yayin da aka wakilci girman rectangle da $b da $c.\n * Shigarwa: Lambobi guda uku $a, $b, da $c, inda $a shine tsawon gefen murabba'i, kuma $b da $c sune fadi da tsayin rectangle, bi da bi.\n * Fitarwa: Yana dawo da rubutu \"Alice\" idan yankin murabba'i yafi girma, \"Bob\" idan yankin rectangle yafi girma, ko \"Equal\" idan duk yankunan suna daidai.\n */\nfunction compareArea($a, $b, $c): string ",
      "hi": "<?php\n\n/**\n * एक वर्ग और एक आयत के क्षेत्रफल की तुलना करता है यह निर्धारित करने के लिए कि कौन सा बड़ा है।\n * वर्ग की भुजा की लंबाई $a द्वारा दर्शाई जाती है, जबकि आयत के आयाम $b और $c द्वारा दर्शाए जाते हैं।\n * इनपुट: तीन पूर्णांक $a, $b, और $c, जहाँ $a वर्ग की भुजा की लंबाई है, और $b और $c क्रमशः आयत की चौड़ाई और ऊँचाई हैं।\n * आउटपुट: एक स्ट्रिंग \"Alice\" लौटाता है यदि वर्ग का क्षेत्रफल बड़ा है, \"Bob\" यदि आयत का क्षेत्रफल बड़ा है, या \"Equal\" यदि दोनों क्षेत्रफल समान हैं।\n */\nfunction compareArea($a, $b, $c): string ",
      "hu": "<?php\n\n/**\n * Összehasonlítja egy négyzet és egy téglalap területét annak meghatározására, hogy melyik a nagyobb.\n * A négyzet oldalhosszát az $a, míg a téglalap méreteit a $b és $c jelöli.\n * Bemenet: Három egész szám $a, $b és $c, ahol $a a négyzet oldalhossza, $b és $c pedig a téglalap szélessége és magassága.\n * Kimenet: Visszaad egy \"Alice\" sztringet, ha a négyzet területe nagyobb, \"Bob\"-ot, ha a téglalap területe nagyobb, vagy \"Equal\"-t, ha mindkét terület azonos.\n */\nfunction compareArea($a, $b, $c): string "
    },
    "prompt_bertscore": {
      "sq": "0.9776884451894942",
      "hy": "0.9745089686802687",
      "bn": "0.9776884451894942",
      "bg": "0.9712119029854706",
      "zh": "0.9475897849208965",
      "fr": "0.9762775735930033",
      "de": "0.9727818775171703",
      "ha": "0.963483194859403",
      "hi": "0.9873637310497035",
      "hu": "0.9620180971688898"
    },
    "canonical_solution": "{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}",
    "instruction": {
      "en": "Write a PHP function `function compareArea($a, $b, $c): string` to solve the following problem:\nCompares the area of a square and a rectangle to determine which is larger.\n  The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n  Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n  Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.",
      "sq": "Shkruani një funksion PHP `function compareArea($a, $b, $c): string` për të zgjidhur problemin në vijim:\nKrahason sipërfaqen e një katrori dhe një drejtkëndëshi për të përcaktuar cili është më i madh.\n  Gjatësia e anës së katrorit përfaqësohet nga $a, ndërsa dimensionet e drejtkëndëshit përfaqësohen nga $b dhe $c.\n  Hyrja: Tre numra të plotë $a, $b, dhe $c, ku $a është gjatësia e anës së katrorit, dhe $b dhe $c janë gjerësia dhe lartësia e drejtkëndëshit, përkatësisht.\n  Dalja: Kthen një varg \"Alice\" nëse sipërfaqja e katrorit është më e madhe, \"Bob\" nëse sipërfaqja e drejtkëndëshit është më e madhe, ose \"Equal\" nëse të dyja sipërfaqet janë të njëjta.",
      "hy": "PHP ֆունկցիա գրեք `function compareArea($a, $b, $c): string` հետևյալ խնդիրը լուծելու համար:\nՀամեմատում է քառակուսու և ուղղանկյան մակերեսները՝ որոշելու համար, թե որն է ավելի մեծ:\n  Քառակուսու կողմի երկարությունը ներկայացված է $a-ով, իսկ ուղղանկյան չափերը ներկայացված են $b և $c-ով:\n  Մուտք: Երեք ամբողջ թիվ $a, $b, և $c, որտեղ $a-ն քառակուսու կողմի երկարությունն է, իսկ $b և $c-ն ուղղանկյան լայնությունն ու բարձրությունը համապատասխանաբար:\n  Ելք: Վերադարձնում է \"Alice\" տողը, եթե քառակուսու մակերեսը մեծ է, \"Bob\" եթե ուղղանկյան մակերեսը մեծ է, կամ \"Equal\" եթե երկու մակերեսներն էլ նույնն են:",
      "bn": "PHP ফাংশন `function compareArea($a, $b, $c): string` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি বর্গক্ষেত্র এবং একটি আয়তক্ষেত্রের ক্ষেত্রফল তুলনা করে নির্ধারণ করুন কোনটি বড়।\n  বর্গক্ষেত্রের বাহুর দৈর্ঘ্য $a দ্বারা প্রকাশ করা হয়, যখন আয়তক্ষেত্রের মাত্রাগুলি $b এবং $c দ্বারা প্রকাশ করা হয়।\n  ইনপুট: তিনটি পূর্ণসংখ্যা $a, $b, এবং $c, যেখানে $a বর্গক্ষেত্রের বাহুর দৈর্ঘ্য, এবং $b এবং $c আয়তক্ষেত্রের প্রস্থ এবং উচ্চতা, যথাক্রমে।\n  আউটপুট: একটি স্ট্রিং রিটার্ন করে \"Alice\" যদি বর্গক্ষেত্রের ক্ষেত্রফল বড় হয়, \"Bob\" যদি আয়তক্ষেত্রের ক্ষেত্রফল বড় হয়, অথবা \"Equal\" যদি উভয় ক্ষেত্রফল সমান হয়।",
      "bg": "Напишете PHP функция `function compareArea($a, $b, $c): string`, за да решите следния проблем:\nСравнява площта на квадрат и правоъгълник, за да определи кой е по-голям.\n  Страната на квадрата е представена от $a, докато размерите на правоъгълника са представени от $b и $c.\n  Вход: Три цели числа $a, $b и $c, където $a е дължината на страната на квадрата, а $b и $c са ширината и височината на правоъгълника, съответно.\n  Изход: Връща низ \"Alice\", ако площта на квадрата е по-голяма, \"Bob\", ако площта на правоъгълника е по-голяма, или \"Equal\", ако и двете площи са еднакви.",
      "zh": "编写一个 PHP 函数 `function compareArea($a, $b, $c): string` 来解决以下问题：\n比较正方形和矩形的面积以确定哪个更大。\n正方形的边长由 $a 表示，而矩形的尺寸由 $b 和 $c 表示。\n输入：三个整数 $a, $b 和 $c，其中 $a 是正方形的边长，$b 和 $c 分别是矩形的宽度和高度。\n输出：如果正方形的面积更大，则返回字符串 \"Alice\"；如果矩形的面积更大，则返回 \"Bob\"；如果两个面积相同，则返回 \"Equal\"。",
      "fr": "Écrire une fonction PHP `function compareArea($a, $b, $c): string` pour résoudre le problème suivant :\nCompare l'aire d'un carré et d'un rectangle pour déterminer lequel est plus grand.\n  La longueur du côté du carré est représentée par $a, tandis que les dimensions du rectangle sont représentées par $b et $c.\n  Entrée : Trois entiers $a, $b, et $c, où $a est la longueur du côté du carré, et $b et $c sont la largeur et la hauteur du rectangle, respectivement.\n  Sortie : Retourne une chaîne \"Alice\" si l'aire du carré est plus grande, \"Bob\" si l'aire du rectangle est plus grande, ou \"Equal\" si les deux aires sont identiques.",
      "de": "Schreiben Sie eine PHP-Funktion `function compareArea($a, $b, $c): string`, um das folgende Problem zu lösen:\nVergleicht die Fläche eines Quadrats und eines Rechtecks, um festzustellen, welches größer ist.\n  Die Seitenlänge des Quadrats wird durch $a dargestellt, während die Abmessungen des Rechtecks durch $b und $c dargestellt werden.\n  Eingabe: Drei ganze Zahlen $a, $b und $c, wobei $a die Seitenlänge des Quadrats ist und $b und $c die Breite und Höhe des Rechtecks sind.\n  Ausgabe: Gibt einen String \"Alice\" zurück, wenn die Fläche des Quadrats größer ist, \"Bob\", wenn die Fläche des Rechtecks größer ist, oder \"Equal\", wenn beide Flächen gleich sind.",
      "ha": "Rubuta aikin PHP `function compareArea($a, $b, $c): string` don warware matsalar mai zuwa:\nKwatanta yanki na murabba'i da na rectangle don tantance wanda ya fi girma.\n  Tsawon gefen murabba'i ana wakilta shi da $a, yayin da girman rectangle ana wakilta su da $b da $c.\n  Shigarwa: Lamba uku $a, $b, da $c, inda $a shine tsawon gefen murabba'i, kuma $b da $c sune fadi da tsayin rectangle, bi da bi.\n  Fitarwa: Ya dawo da rubutu \"Alice\" idan yankin murabba'i ya fi girma, \"Bob\" idan yankin rectangle ya fi girma, ko \"Equal\" idan dukkan yankunan suna daidai.",
      "hi": "PHP फ़ंक्शन `function compareArea($a, $b, $c): string` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nएक वर्ग और एक आयत के क्षेत्रफल की तुलना करता है ताकि यह निर्धारित किया जा सके कि कौन सा बड़ा है।\n  वर्ग की भुजा की लंबाई $a द्वारा दर्शाई जाती है, जबकि आयत के आयाम $b और $c द्वारा दर्शाए जाते हैं।\n  इनपुट: तीन पूर्णांक $a, $b, और $c, जहाँ $a वर्ग की भुजा की लंबाई है, और $b और $c क्रमशः आयत की चौड़ाई और ऊँचाई हैं।\n  आउटपुट: एक स्ट्रिंग \"Alice\" लौटाता है यदि वर्ग का क्षेत्रफल अधिक है, \"Bob\" यदि आयत का क्षेत्रफल अधिक है, या \"Equal\" यदि दोनों क्षेत्रफल समान हैं।",
      "hu": "Írj egy PHP függvényt `function compareArea($a, $b, $c): string` a következő probléma megoldására:\nÖsszehasonlítja egy négyzet és egy téglalap területét annak meghatározására, hogy melyik a nagyobb.\n  A négyzet oldalhosszát az $a jelöli, míg a téglalap méreteit a $b és $c jelöli.\n  Bemenet: Három egész szám $a, $b és $c, ahol $a a négyzet oldalhossza, $b és $c pedig a téglalap szélessége és magassága.\n  Kimenet: Egy \"Alice\" sztringet ad vissza, ha a négyzet területe nagyobb, \"Bob\"-ot, ha a téglalap területe nagyobb, vagy \"Equal\"-t, ha mindkét terület azonos."
    },
    "instruction_bertscore": {
      "sq": "0.9821947726440327",
      "hy": "0.9703567991951153",
      "bn": "0.9704982240264122",
      "bg": "0.9728931105305498",
      "zh": "0.9492882733091258",
      "fr": "0.974414023358134",
      "de": "0.9783075760871799",
      "ha": "0.9686132217103911",
      "hi": "0.9709707657028942",
      "hu": "0.9667556303869528"
    },
    "level": "easy",
    "test": "function main(){\n    // Test cases\n    assert(compareArea(5, 4, 6) === \"Alice\"); \n    assert(compareArea(7, 5, 10) === \"Bob\"); \n    assert(compareArea(6, 3, 12) === \"Equal\"); \n\n}\n\n\nmain();\n?>",
    "entry_point": "compareArea",
    "signature": "function compareArea($a, $b, $c): string",
    "docstring": {
      "en": "Compares the area of a square and a rectangle to determine which is larger.\n  The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n  Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n  Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.",
      "sq": "Krahason sipërfaqen e një katrori dhe një drejtkëndëshi për të përcaktuar cili është më i madh.\n  Gjatësia e brinjës së katrorit përfaqësohet nga $a, ndërsa dimensionet e drejtkëndëshit përfaqësohen nga $b dhe $c.\n  Input: Tre numra të plotë $a, $b, dhe $c, ku $a është gjatësia e brinjës së katrorit, dhe $b dhe $c janë gjerësia dhe lartësia e drejtkëndëshit, përkatësisht.\n  Output: Kthen një varg \"Alice\" nëse sipërfaqja e katrorit është më e madhe, \"Bob\" nëse sipërfaqja e drejtkëndëshit është më e madhe, ose \"Equal\" nëse të dyja sipërfaqet janë të njëjta.",
      "hy": "Համեմատում է քառակուսու և ուղղանկյունի մակերեսները՝ որոշելու, թե որը մեծ է:\n  Քառակուսու կողի երկարությունը ներկայացված է $a-ով, մինչդեռ ուղղանկյունի չափերը ներկայացված են $b և $c-ով:\n  Մուտք: Երեք ամբողջ թիվ $a, $b և $c, որտեղ $a-ն քառակուսու կողի երկարությունն է, իսկ $b և $c-ն ուղղանկյունի լայնությունն ու բարձրությունն են, համապատասխանաբար:\n  Ելք: Վերադարձնում է \"Alice\" տողը, եթե քառակուսու մակերեսը մեծ է, \"Bob\" եթե ուղղանկյունի մակերեսը մեծ է, կամ \"Equal\" եթե երկու մակերեսներն էլ նույնն են:",
      "bn": "বর্গক্ষেত্র এবং আয়তক্ষেত্রের ক্ষেত্রফল তুলনা করে কোনটি বড় তা নির্ধারণ করে।\n  বর্গক্ষেত্রের বাহুর দৈর্ঘ্য $a দ্বারা এবং আয়তক্ষেত্রের মাত্রা $b এবং $c দ্বারা উপস্থাপিত হয়।\n  ইনপুট: তিনটি পূর্ণসংখ্যা $a, $b, এবং $c, যেখানে $a বর্গক্ষেত্রের বাহুর দৈর্ঘ্য, এবং $b এবং $c আয়তক্ষেত্রের প্রস্থ এবং উচ্চতা যথাক্রমে।\n  আউটপুট: একটি স্ট্রিং \"Alice\" ফেরত দেয় যদি বর্গক্ষেত্রের ক্ষেত্রফল বড় হয়, \"Bob\" যদি আয়তক্ষেত্রের ক্ষেত্রফল বড় হয়, অথবা \"Equal\" যদি উভয়ের ক্ষেত্রফল সমান হয়।",
      "bg": "Сравнява площта на квадрат и правоъгълник, за да определи кой е по-голям.\n  Дължината на страната на квадрата е представена от $a, докато размерите на правоъгълника са представени от $b и $c.\n  Вход: Три цели числа $a, $b и $c, където $a е дължината на страната на квадрата, а $b и $c са съответно ширината и височината на правоъгълника.\n  Изход: Връща низ \"Alice\", ако площта на квадрата е по-голяма, \"Bob\", ако площта на правоъгълника е по-голяма, или \"Equal\", ако и двете площи са еднакви.",
      "zh": "比较正方形和矩形的面积以确定哪个更大。\n  正方形的边长由 $a 表示，而矩形的尺寸由 $b 和 $c 表示。\n  输入：三个整数 $a, $b 和 $c，其中 $a 是正方形的边长，$b 和 $c 分别是矩形的宽度和高度。\n  输出：如果正方形的面积更大，返回字符串 \"Alice\"；如果矩形的面积更大，返回 \"Bob\"；如果两个面积相同，返回 \"Equal\"。",
      "fr": "Compare la surface d'un carré et d'un rectangle pour déterminer lequel est plus grand.\n  La longueur du côté du carré est représentée par $a, tandis que les dimensions du rectangle sont représentées par $b et $c.\n  Entrée : Trois entiers $a, $b, et $c, où $a est la longueur du côté du carré, et $b et $c sont la largeur et la hauteur du rectangle, respectivement.\n  Sortie : Renvoie une chaîne \"Alice\" si la surface du carré est plus grande, \"Bob\" si la surface du rectangle est plus grande, ou \"Equal\" si les deux surfaces sont identiques.",
      "de": "Vergleicht die Fläche eines Quadrats und eines Rechtecks, um festzustellen, welches größer ist.\n  Die Seitenlänge des Quadrats wird durch $a dargestellt, während die Abmessungen des Rechtecks durch $b und $c dargestellt werden.\n  Eingabe: Drei ganze Zahlen $a, $b und $c, wobei $a die Seitenlänge des Quadrats ist und $b und $c die Breite und Höhe des Rechtecks sind.\n  Ausgabe: Gibt einen String \"Alice\" zurück, wenn die Fläche des Quadrats größer ist, \"Bob\", wenn die Fläche des Rechtecks größer ist, oder \"Equal\", wenn beide Flächen gleich sind.",
      "ha": "Kwatanta yanki na murabba'i da na rectangle don tantance wanda yafi girma.\nFadin gefen murabba'i yana wakilta ta $a, yayin da girman murabba'in yana wakilta ta $b da $c.\n  Input: Lambobi guda uku $a, $b, da $c, inda $a shi ne fadin gefen murabba'i, kuma $b da $c su ne nisa da tsayin murabba'in, bi da bi.\n  Output: Yana dawowa da igiyar rubutu \"Alice\" idan yankin murabba'i ya fi girma, \"Bob\" idan yankin murabba'in ya fi girma, ko \"Equal\" idan duka yankunan suna daidai.",
      "hi": "एक वर्ग और एक आयत के क्षेत्रफल की तुलना करता है यह निर्धारित करने के लिए कि कौन सा बड़ा है।\nवर्ग के क्षेत्रफल और आयत के क्षेत्रफल की तुलना करता है यह निर्धारित करने के लिए कि कौन सा बड़ा है। The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c. वर्ग की भुजा की लंबाई $a द्वारा दर्शाई जाती है, जबकि आयत के आयाम $b और $c द्वारा दर्शाए जाते हैं। Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively. इनपुट: तीन पूर्णांक $a, $b, और $c, जहाँ $a वर्ग की भुजा की लंबाई है, और $b और $c क्रमशः आयत की चौड़ाई और ऊँचाई हैं। Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same. आउटपुट: एक स्ट्रिंग \"Alice\" लौटाता है यदि वर्ग का क्षेत्रफल बड़ा है, \"Bob\" यदि आयत का क्षेत्रफल बड़ा है, या \"Equal\" यदि दोनों क्षेत्रफल समान हैं।",
      "hu": "Összehasonlítja egy négyzet és egy téglalap területét annak meghatározására, hogy melyik a nagyobb.\n  A négyzet oldalhosszát $a jelöli, míg a téglalap méreteit $b és $c jelölik.\n  Bemenet: Három egész szám $a, $b és $c, ahol $a a négyzet oldalhossza, $b és $c pedig a téglalap szélessége és magassága.\n  Kimenet: Visszaad egy \"Alice\" sztringet, ha a négyzet területe nagyobb, \"Bob\" sztringet, ha a téglalap területe nagyobb, vagy \"Equal\" sztringet, ha mindkét terület azonos."
    },
    "docstring_bertscore": {
      "sq": "0.9770017799622565",
      "hy": "0.9732728918190886",
      "bn": "0.9550525269667582",
      "bg": "0.9751008872157526",
      "zh": "0.9670676787155587",
      "fr": "0.9568852894925671",
      "de": "0.9682002691482195",
      "ha": "0.968578660024091",
      "hi": "0.999999801369619",
      "hu": "0.9479999566577335"
    }
  },
  {
    "task_id": "PHP/45",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds M positive integers whose sum is N and whose product is as large as possible.\n * Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n * The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n * \n * Input: Two integers, $N representing the total sum and $M representing the number of parts.\n * Output: An array of integers representing the distribution that maximizes the product.\n * Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "sq": "<?php\n\n\n/**\n * Gjen M numra të plotë pozitivë, shuma e të cilëve është N dhe produkti i të cilëve është sa më i madh të jetë e mundur.\n * Jep kombinimin me rendin më të vogël leksikografik nëse ka mundësi të shumta.\n * Funksioni synon të shpërndajë shumën totale N në M pjesë në mënyrë që produkti i këtyre pjesëve të maksimizohet.\n * \n * Hyrja: Dy numra të plotë, $N që përfaqëson shumën totale dhe $M që përfaqëson numrin e pjesëve.\n * Dalja: Një varg numrash të plotë që përfaqëson shpërndarjen që maksimizon produktin.\n * Shembull: Duke pasur N = 6 dhe M = 3, funksioni kthen [2, 2, 2] pasi ndarja e 6 në tre pjesë nga 2 secila maksimizon produktin 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hy": "<?php\n\n\n/**\n * Գտնում է M դրական ամբողջ թվեր, որոնց գումարը N է և որոնց արտադրյալը հնարավորինս մեծ է:\n * Եթե կան բազմաթիվ հնարավորություններ, արտածում է ամենափոքր բառարանային կարգով համակցությունը:\n * Ֆունկցիան նպատակ ունի բաշխել ընդհանուր գումարը N M մասերի, այնպես, որ այդ մասերի արտադրյալը առավելագույն լինի:\n * \n * Մուտք: Երկու ամբողջ թիվ, $N ներկայացնում է ընդհանուր գումարը և $M ներկայացնում է մասերի քանակը:\n * Ելք: Ամբողջ թվերի զանգված, որը ներկայացնում է բաշխումը, որը առավելագույնացնում է արտադրյալը:\n * Օրինակ: Տրված N = 6 և M = 3, ֆունկցիան վերադարձնում է [2, 2, 2], քանի որ 6-ը բաժանելով երեք մասերի, որոնցից յուրաքանչյուրը 2 է, առավելագույնացնում է արտադրյալը 2*2*2 = 8:\n */\n\nfunction maxProductDistribution($N, $M) ",
      "bn": "<?php\n\n\n/**\n * এমন M ধনাত্মক পূর্ণসংখ্যা খুঁজে বের করে যাদের যোগফল N এবং যাদের গুণফল যতটা সম্ভব বড়।\n * যদি একাধিক সম্ভাবনা থাকে তবে ক্ষুদ্রতম বর্ণানুক্রমিক ক্রম সহ সংমিশ্রণ আউটপুট করে।\n * ফাংশনটি মোট যোগফল N কে M অংশে বিতরণ করার লক্ষ্য রাখে যাতে এই অংশগুলির গুণফল সর্বাধিক হয়।\n * \n * ইনপুট: দুটি পূর্ণসংখ্যা, $N মোট যোগফল উপস্থাপন করে এবং $M অংশের সংখ্যা উপস্থাপন করে।\n * আউটপুট: একটি পূর্ণসংখ্যার অ্যারে যা গুণফল সর্বাধিক করে এমন বিতরণ উপস্থাপন করে।\n * উদাহরণ: প্রদত্ত N = 6 এবং M = 3, ফাংশনটি [2, 2, 2] প্রদান করে কারণ 6 কে তিনটি 2 অংশে ভাগ করলে গুণফল 2*2*2 = 8 সর্বাধিক হয়।\n */\n\nfunction maxProductDistribution($N, $M) ",
      "bg": "<?php\n\n\n/**\n * Намира M положителни цели числа, чиято сума е N и чийто произведение е възможно най-голямо.\n * Извежда комбинацията с най-малък лексикографски ред, ако има множество възможности.\n * Функцията цели да разпредели общата сума N на M части така, че произведението на тези части да е максимално.\n * \n * Вход: Две цели числа, $N представляващо общата сума и $M представляващо броя на частите.\n * Изход: Масив от цели числа, представляващ разпределението, което максимизира произведението.\n * Пример: Дадено N = 6 и M = 3, функцията връща [2, 2, 2], тъй като разделянето на 6 на три части от по 2 максимизира произведението 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "zh": "<?php\n\n\n/**\n * 找到 M 个正整数，它们的和为 N，并且它们的乘积尽可能大。\n * 如果有多种可能性，输出字典序最小的组合。\n * 该函数旨在将总和 N 分配为 M 部分，使这些部分的乘积最大化。\n * \n * 输入：两个整数，$N 表示总和，$M 表示部分的数量。\n * 输出：一个整数数组，表示使乘积最大化的分配。\n * 示例：给定 N = 6 和 M = 3，函数返回 [2, 2, 2]，因为将 6 分成三个部分，每部分为 2，可以最大化乘积 2*2*2 = 8。\n */\n\nfunction maxProductDistribution($N, $M) ",
      "fr": "<?php\n\n\n/**\n * Trouve M entiers positifs dont la somme est N et dont le produit est le plus grand possible.\n * Renvoie la combinaison avec le plus petit ordre lexicographique s'il y a plusieurs possibilités.\n * La fonction vise à répartir la somme totale N en M parties de manière à maximiser le produit de ces parties.\n * \n * Entrée : Deux entiers, $N représentant la somme totale et $M représentant le nombre de parties.\n * Sortie : Un tableau d'entiers représentant la répartition qui maximise le produit.\n * Exemple : Étant donné N = 6 et M = 3, la fonction renvoie [2, 2, 2] car diviser 6 en trois parties de 2 chacune maximise le produit 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "de": "<?php\n\n\n/**\n * Findet M positive ganze Zahlen, deren Summe N ist und deren Produkt so groß wie möglich ist.\n * Gibt die Kombination mit der kleinsten lexikographischen Ordnung aus, wenn es mehrere Möglichkeiten gibt.\n * Die Funktion zielt darauf ab, die Gesamtsumme N in M Teile zu verteilen, sodass das Produkt dieser Teile maximiert wird.\n * \n * Eingabe: Zwei ganze Zahlen, $N, die die Gesamtsumme darstellt, und $M, die die Anzahl der Teile darstellt.\n * Ausgabe: Ein Array von ganzen Zahlen, das die Verteilung darstellt, die das Produkt maximiert.\n * Beispiel: Gegeben N = 6 und M = 3, gibt die Funktion [2, 2, 2] zurück, da die Aufteilung von 6 in drei Teile von jeweils 2 das Produkt 2*2*2 = 8 maximiert.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "ha": "<?php\n\n\n/**\n * Nemo lambobi M masu kyau waɗanda jimlarsu ita ce N kuma samfurin su ya fi girma gwargwadon yiwuwa.\n * Fitar da haɗin tare da mafi ƙarancin tsari na haruffa idan akwai yuwuwar da yawa.\n * Aikin yana nufin rarraba jimlar N zuwa sassa M ta yadda samfurin waɗannan sassan zai zama mafi girma.\n * \n * Shigarwa: Lambobi biyu, $N wanda ke wakiltar jimlar kuma $M wanda ke wakiltar adadin sassa.\n * Fitarwa: Wani tsari na lambobi wanda ke wakiltar rarrabawa da ke ƙara samfurin.\n * Misali: An ba da N = 6 da M = 3, aikin yana dawo da [2, 2, 2] saboda raba 6 zuwa sassa uku na 2 kowanne yana ƙara samfurin 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hi": "<?php\n\n\n/**\n * ऐसे M धनात्मक पूर्णांक खोजें जिनका योग N है और जिनका गुणनफल यथासंभव बड़ा है।\n * यदि कई संभावनाएँ हैं, तो सबसे छोटे शब्दकोशीय क्रम वाले संयोजन को आउटपुट करता है।\n * यह फ़ंक्शन कुल योग N को M भागों में वितरित करने का लक्ष्य रखता है ताकि इन भागों का गुणनफल अधिकतम हो।\n * \n * इनपुट: दो पूर्णांक, $N जो कुल योग का प्रतिनिधित्व करता है और $M जो भागों की संख्या का प्रतिनिधित्व करता है।\n * आउटपुट: पूर्णांकों की एक सरणी जो वितरण को दर्शाती है जो गुणनफल को अधिकतम करता है।\n * उदाहरण: दिए गए N = 6 और M = 3 के लिए, फ़ंक्शन [2, 2, 2] लौटाता है क्योंकि 6 को तीन भागों में 2-2 में विभाजित करने से गुणनफल 2*2*2 = 8 अधिकतम होता है।\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hu": "<?php\n\n\n/**\n * Megkeresi azt az M pozitív egész számot, amelyek összege N és amelyek szorzata a lehető legnagyobb.\n * Kiírja a legkisebb lexikografikus sorrendű kombinációt, ha több lehetőség van.\n * A függvény célja, hogy az összeg N-t M részre ossza úgy, hogy ezeknek a részeknek a szorzata maximális legyen.\n * \n * Bemenet: Két egész szám, $N, amely az összeg, és $M, amely a részek száma.\n * Kimenet: Egy egész számokat tartalmazó tömb, amely a szorzatot maximalizáló eloszlást képviseli.\n * Példa: Ha N = 6 és M = 3, akkor a függvény [2, 2, 2] értéket ad vissza, mivel a 6 három részre osztása, mindegyik 2, maximalizálja a szorzatot 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) "
    },
    "prompt_bertscore": {
      "sq": "0.9816686007646712",
      "hy": "0.9724024934893937",
      "bn": "0.964593141428626",
      "bg": "0.9923354494870068",
      "zh": "0.9349682146187965",
      "fr": "0.9746615168129035",
      "de": "0.9823030262016966",
      "ha": "0.9470507020667678",
      "hi": "0.9597737724935765",
      "hu": "0.9387610617446578"
    },
    "canonical_solution": "{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}",
    "instruction": {
      "en": "Write a PHP function `function maxProductDistribution($N, $M)` to solve the following problem:\nFinds M positive integers whose sum is N and whose product is as large as possible.\n  Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n  The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n  \n  Input: Two integers, $N representing the total sum and $M representing the number of parts.\n  Output: An array of integers representing the distribution that maximizes the product.\n  Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 222 = 8.",
      "sq": "Shkruani një funksion PHP `function maxProductDistribution($N, $M)` për të zgjidhur problemin e mëposhtëm:\nGjen M numra të plotë pozitivë, shuma e të cilëve është N dhe produkti i të cilëve është sa më i madh të jetë e mundur.\n  Jep kombinimin me rendin më të vogël leksikografik nëse ka mundësi të shumta.\n  Funksioni synon të shpërndajë shumën totale N në M pjesë të tilla që produkti i këtyre pjesëve të maksimizohet.\n  \n  Hyrja: Dy numra të plotë, $N që përfaqëson shumën totale dhe $M që përfaqëson numrin e pjesëve.\n  Dalja: Një varg numrash të plotë që përfaqësojnë shpërndarjen që maksimizon produktin.\n  Shembull: Duke dhënë N = 6 dhe M = 3, funksioni kthen [2, 2, 2] pasi ndarja e 6 në tre pjesë nga 2 secila maksimizon produktin 222 = 8.",
      "hy": "PHP ֆունկցիա գրեք `function maxProductDistribution($N, $M)` հետևյալ խնդիրը լուծելու համար:\nԳտնում է M դրական ամբողջ թվեր, որոնց գումարը N է և որոնց արտադրյալը հնարավորինս մեծ է:\n  Եթե կան բազմաթիվ հնարավորություններ, արդյունք է տալիս ամենափոքր բառարանային կարգով կոմբինացիան:\n  Ֆունկցիան նպատակ ունի բաշխել ընդհանուր գումար N-ը M մասերի այնպես, որ այդ մասերի արտադրյալը առավելագույն լինի:\n  \n  Մուտք: Երկու ամբողջ թիվ, $N, որը ներկայացնում է ընդհանուր գումարը և $M, որը ներկայացնում է մասերի քանակը:\n  Ելք: Ամբողջ թվերի զանգված, որը ներկայացնում է բաշխումը, որը առավելագույնացնում է արտադրյալը:\n  Օրինակ: Տրված է N = 6 և M = 3, ֆունկցիան վերադարձնում է [2, 2, 2], քանի որ 6-ը բաժանելով երեք մասի՝ յուրաքանչյուրը 2, առավելագույնացնում է արտադրյալը 222 = 8:",
      "bn": "PHP ফাংশন `function maxProductDistribution($N, $M)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএমটি ধনাত্মক পূর্ণসংখ্যা খুঁজে বের করুন যাদের যোগফল এন এবং যাদের গুণফল যতটা সম্ভব বড়।\n  যদি একাধিক সম্ভাবনা থাকে তবে ক্ষুদ্রতম শব্দকোষিক ক্রমের সাথে সমন্বয় আউটপুট করে।\n  ফাংশনটির লক্ষ্য হল মোট যোগফল এনকে এম অংশে বিতরণ করা যাতে এই অংশগুলির গুণফল সর্বাধিক হয়।\n  \n  ইনপুট: দুটি পূর্ণসংখ্যা, $N মোট যোগফল উপস্থাপন করে এবং $M অংশের সংখ্যা উপস্থাপন করে।\n  আউটপুট: একটি পূর্ণসংখ্যার অ্যারে যা গুণফল সর্বাধিক করে এমন বিতরণ উপস্থাপন করে।\n  উদাহরণ: দেওয়া হয়েছে N = 6 এবং M = 3, ফাংশনটি [2, 2, 2] ফেরত দেয় কারণ 6 কে তিনটি 2 অংশে ভাগ করা গুণফল সর্বাধিক করে 222 = 8।",
      "bg": "Напишете PHP функция `function maxProductDistribution($N, $M)`, за да решите следния проблем:\nНамира M положителни цели числа, чиято сума е N и чийто произведение е възможно най-голямо.\n  Извежда комбинацията с най-малък лексикографски ред, ако има множество възможности.\n  Функцията има за цел да разпредели общата сума N на M части така, че произведението на тези части да е максимално.\n  \n  Вход: Две цели числа, $N представляващо общата сума и $M представляващо броя на частите.\n  Изход: Масив от цели числа, представляващ разпределението, което максимизира произведението.\n  Пример: Дадено N = 6 и M = 3, функцията връща [2, 2, 2], тъй като разделянето на 6 на три части от по 2 максимизира произведението 222 = 8.",
      "zh": "编写一个 PHP 函数 `function maxProductDistribution($N, $M)` 来解决以下问题：\n找到 M 个正整数，它们的和为 N，并且它们的乘积尽可能大。\n如果有多个可能性，则输出字典序最小的组合。\n该函数旨在将总和 N 分配为 M 部分，使这些部分的乘积最大化。\n\n输入：两个整数，$N 表示总和，$M 表示部分的数量。\n输出：一个整数数组，表示使乘积最大化的分配。\n示例：给定 N = 6 和 M = 3，函数返回 [2, 2, 2]，因为将 6 分成三个部分，每部分为 2 可以最大化乘积 222 = 8。",
      "fr": "Écrire une fonction PHP `function maxProductDistribution($N, $M)` pour résoudre le problème suivant :\nTrouver M entiers positifs dont la somme est N et dont le produit est aussi grand que possible.\n  Renvoie la combinaison avec le plus petit ordre lexicographique s'il y a plusieurs possibilités.\n  La fonction vise à distribuer la somme totale N en M parties de sorte que le produit de ces parties soit maximisé.\n  \n  Entrée : Deux entiers, $N représentant la somme totale et $M représentant le nombre de parties.\n  Sortie : Un tableau d'entiers représentant la distribution qui maximise le produit.\n  Exemple : Étant donné N = 6 et M = 3, la fonction renvoie [2, 2, 2] car diviser 6 en trois parties de 2 chacune maximise le produit 222 = 8.",
      "de": "Schreiben Sie eine PHP-Funktion `function maxProductDistribution($N, $M)`, um das folgende Problem zu lösen:\nFindet M positive ganze Zahlen, deren Summe N ist und deren Produkt so groß wie möglich ist.\nGibt die Kombination mit der kleinsten lexikographischen Ordnung aus, wenn es mehrere Möglichkeiten gibt.\nDie Funktion zielt darauf ab, die Gesamtsumme N in M Teile zu verteilen, sodass das Produkt dieser Teile maximiert wird.\n\nEingabe: Zwei ganze Zahlen, $N, die die Gesamtsumme darstellt, und $M, die die Anzahl der Teile darstellt.\nAusgabe: Ein Array von ganzen Zahlen, das die Verteilung darstellt, die das Produkt maximiert.\nBeispiel: Gegeben N = 6 und M = 3, gibt die Funktion [2, 2, 2] zurück, da die Aufteilung von 6 in drei Teile von jeweils 2 das Produkt 222 = 8 maximiert.",
      "ha": "Rubuta aikin PHP `function maxProductDistribution($N, $M)` don warware matsalar mai zuwa:\nNemo lambobi M masu kyau da tarayyar su N kuma da samfurin su ya fi girma yadda zai yiwu.\n  Fitar da haɗin da ke da mafi ƙarancin tsari na haruffa idan akwai yuwuwar da yawa.\n  Aikin yana nufin rarraba jimlar N zuwa sassa M ta yadda samfurin waɗannan sassan zai kasance mafi girma.\n  \n  Shigarwa: Lambobi guda biyu, $N wanda ke wakiltar jimlar kuma $M wanda ke wakiltar adadin sassa.\n  Fitarwa: Jerin lambobi da ke wakiltar rarraba da ke haɓaka samfurin.\n  Misali: Idan aka ba N = 6 da M = 3, aikin yana dawowa [2, 2, 2] domin raba 6 zuwa sassa uku na 2 kowanne yana haɓaka samfurin 222 = 8.",
      "hi": "PHP फ़ंक्शन `function maxProductDistribution($N, $M)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nM धनात्मक पूर्णांक खोजें जिनका योग N है और जिनका गुणनफल यथासंभव बड़ा है।\n  यदि कई संभावनाएँ हैं, तो सबसे छोटे शब्दकोश क्रम के साथ संयोजन आउटपुट करें।\n  फ़ंक्शन का उद्देश्य कुल योग N को M भागों में वितरित करना है ताकि इन भागों का गुणनफल अधिकतम हो सके।\n\n  इनपुट: दो पूर्णांक, $N जो कुल योग का प्रतिनिधित्व करता है और $M जो भागों की संख्या का प्रतिनिधित्व करता है।\n  आउटपुट: पूर्णांकों की एक सरणी जो वितरण का प्रतिनिधित्व करती है जो गुणनफल को अधिकतम करता है।\n  उदाहरण: दिए गए N = 6 और M = 3 के लिए, फ़ंक्शन [2, 2, 2] लौटाता है क्योंकि 6 को तीन भागों में विभाजित करना जिनमें से प्रत्येक 2 है, गुणनफल को अधिकतम करता है 222 = 8।",
      "hu": "Írj egy PHP függvényt `function maxProductDistribution($N, $M)` a következő probléma megoldására:\nKeressen M pozitív egész számot, amelyek összege N, és amelyek szorzata a lehető legnagyobb.\n  Ha több lehetőség is van, akkor a lexikografikusan legkisebb kombinációt adja vissza.\n  A függvény célja, hogy az összeg N-t M részre ossza fel úgy, hogy ezeknek a részeknek a szorzata maximális legyen.\n  \n  Bemenet: Két egész szám, $N, amely az összeg, és $M, amely a részek száma.\n  Kimenet: Egy egész számokból álló tömb, amely a szorzatot maximalizáló elosztást képviseli.\n  Példa: Ha N = 6 és M = 3, a függvény [2, 2, 2]-t ad vissza, mivel a 6 három részre osztása, ahol mindegyik rész 2, maximalizálja a szorzatot 222 = 8."
    },
    "instruction_bertscore": {
      "sq": "0.9818145940947318",
      "hy": "0.9556796030796854",
      "bn": "0.9607244174972095",
      "bg": "0.9849195842110692",
      "zh": "0.9403419609473145",
      "fr": "0.9853200230592356",
      "de": "0.9825115881017833",
      "ha": "0.9645454701371776",
      "hi": "0.9543827453219086",
      "hu": "0.9302084347980576"
    },
    "level": "easy",
    "test": "function main(){\n    // Test Case 1: Simple distribution\n    assert(maxProductDistribution(6, 3) === [2, 2, 2]);\n\n    // Test Case 2: When distribution is not perfectly even\n    assert(maxProductDistribution(7, 3) === [2, 2, 3]);\n\n    // Test Case 3: Larger numbers with an even distribution\n    assert(maxProductDistribution(10, 2) === [5, 5]);\n\n    // Test Case 4: Larger numbers with a remainder\n    assert(maxProductDistribution(9, 4) === [2, 2, 2, 3]);\n    assert(maxProductDistribution(9, 3) === [3,3, 3]);\n\n    // Test Case 5: Single part (edge case)\n    assert(maxProductDistribution(5, 1) === [5]);\n\n}\n\n\nmain();\n?>",
    "entry_point": "maxProductDistribution",
    "signature": "function maxProductDistribution($N, $M)",
    "docstring": {
      "en": "Finds M positive integers whose sum is N and whose product is as large as possible.\n  Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n  The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n  \n  Input: Two integers, $N representing the total sum and $M representing the number of parts.\n  Output: An array of integers representing the distribution that maximizes the product.\n  Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 222 = 8.",
      "sq": "Gjen M numra të plotë pozitivë, shuma e të cilëve është N dhe prodhimi i të cilëve është sa më i madh të jetë e mundur.\n  Jep kombinimin me rendin më të vogël leksikografik nëse ka mundësi të shumta.\n  Funksioni synon të shpërndajë shumën totale N në M pjesë të tilla që prodhimi i këtyre pjesëve të maksimizohet.\n  \n  Hyrja: Dy numra të plotë, $N që përfaqëson shumën totale dhe $M që përfaqëson numrin e pjesëve.\n  Dalja: Një varg numrash të plotë që përfaqëson shpërndarjen që maksimizon prodhimin.\n  Shembull: Duke pasur parasysh N = 6 dhe M = 3, funksioni kthen [2, 2, 2] pasi ndarja e 6 në tre pjesë nga 2 secila maksimizon prodhimin 222 = 8.",
      "hy": "Գտնում է M դրական ամբողջ թվեր, որոնց գումարը N է և որոնց արտադրյալը հնարավորինս մեծ է:\n  Եթե կան բազմաթիվ հնարավորություններ, արդյունք է տալիս ամենափոքր բառարանային կարգով համակցությունը:\n  Ֆունկցիան նպատակ ունի բաշխել ընդհանուր գումարը N M մասերի այնպես, որ այդ մասերի արտադրյալը առավելագույն լինի:\n  \n  Մուտք: Երկու ամբողջ թվեր՝ $N, որը ներկայացնում է ընդհանուր գումարը, և $M, որը ներկայացնում է մասերի քանակը:\n  Ելք: Ամբողջ թվերի զանգված, որը ներկայացնում է բաշխումը, որը առավելագույնացնում է արտադրյալը:\n  Օրինակ: Տրված N = 6 և M = 3, ֆունկցիան վերադարձնում է [2, 2, 2], քանի որ 6-ը բաժանելով երեք մասերի՝ յուրաքանչյուրը 2, արտադրյալը առավելագույն է՝ 222 = 8:",
      "bn": "Mটি ধনাত্মক পূর্ণসংখ্যা খুঁজে বের করে যাদের যোগফল N এবং যাদের গুণফল যতটা সম্ভব বড় হয়। \nযদি একাধিক সম্ভাবনা থাকে তবে ক্ষুদ্রতম অভিধানিক ক্রম সহ সমন্বয় আউটপুট করে। \nফাংশনটি মোট যোগফল N কে M অংশে বিতরণ করার লক্ষ্য রাখে যাতে এই অংশগুলির গুণফল সর্বাধিক হয়।\n\nInput: দুটি পূর্ণসংখ্যা, $N যা মোট যোগফলকে প্রতিনিধিত্ব করে এবং $M যা অংশের সংখ্যা প্রতিনিধিত্ব করে।\nOutput: পূর্ণসংখ্যার একটি অ্যারে যা গুণফল সর্বাধিক করে এমন বিতরণকে প্রতিনিধিত্ব করে।\nExample: N = 6 এবং M = 3 দেওয়া হলে, ফাংশনটি [2, 2, 2] ফেরত দেয় কারণ 6 কে তিনটি 2 অংশে ভাগ করলে গুণফল সর্বাধিক হয় 222 = 8।",
      "bg": "Намира M положителни цели числа, чиято сума е N и чийто произведение е възможно най-голямо.\n  Извежда комбинацията с най-малък лексикографски ред, ако има множество възможности.\n  Функцията цели да разпредели общата сума N на M части така, че произведението на тези части да бъде максимизирано.\n  \n  Вход: Две цели числа, $N представляващо общата сума и $M представляващо броя на частите.\n  Изход: Масив от цели числа, представляващ разпределението, което максимизира произведението.\n  Пример: Дадено N = 6 и M = 3, функцията връща [2, 2, 2], тъй като разделянето на 6 на три части по 2 всяка максимизира произведението 222 = 8.",
      "zh": "找到 M 个正整数，它们的和为 N，并且它们的乘积尽可能大。\n  如果有多个可能性，则输出字典序最小的组合。\n  该函数旨在将总和 N 分配为 M 部分，使这些部分的乘积最大化。\n  \n  输入：两个整数，$N 表示总和，$M 表示部分的数量。\n  输出：一个整数数组，表示使乘积最大化的分配。\n  示例：给定 N = 6 和 M = 3，函数返回 [2, 2, 2]，因为将 6 分成三个部分，每部分为 2 时，乘积 222 = 8 达到最大。",
      "fr": "Trouve M entiers positifs dont la somme est N et dont le produit est aussi grand que possible.\n  Produit la combinaison avec le plus petit ordre lexicographique s'il y a plusieurs possibilités.\n  La fonction vise à distribuer la somme totale N en M parties de manière à maximiser le produit de ces parties.\n  \n  Entrée : Deux entiers, $N représentant la somme totale et $M représentant le nombre de parties.\n  Sortie : Un tableau d'entiers représentant la distribution qui maximise le produit.\n  Exemple : Étant donné N = 6 et M = 3, la fonction retourne [2, 2, 2] car diviser 6 en trois parties de 2 chacune maximise le produit 222 = 8.",
      "de": "Findet M positive ganze Zahlen, deren Summe N ist und deren Produkt so groß wie möglich ist.\nGibt die Kombination mit der kleinsten lexikographischen Ordnung aus, wenn es mehrere Möglichkeiten gibt.\nDie Funktion zielt darauf ab, die Gesamtsumme N in M Teile zu verteilen, sodass das Produkt dieser Teile maximiert wird.\n\nEingabe: Zwei ganze Zahlen, $N, die die Gesamtsumme darstellt, und $M, die die Anzahl der Teile darstellt.\nAusgabe: Ein Array von ganzen Zahlen, das die Verteilung darstellt, die das Produkt maximiert.\nBeispiel: Gegeben N = 6 und M = 3, gibt die Funktion [2, 2, 2] zurück, da die Aufteilung von 6 in drei Teile von jeweils 2 das Produkt 222 = 8 maximiert.",
      "ha": "Nemo lambobi M masu kyau waɗanda jimlarsu ita ce N kuma samfurin su ya fi girma gwargwadon yiwuwa.\n  Yana fitar da haɗin da ke da ƙaramin tsari na lexicographical idan akwai yuwuwar da yawa.\n  Aikin yana nufin rarraba jimlar adadin N zuwa sassa M ta yadda samfurin waɗannan sassan zai zama mafi girma.\n\n  Input: Lambobi guda biyu, $N yana wakiltar jimlar adadin kuma $M yana wakiltar yawan sassa.\n  Output: Jerin lambobi da ke wakiltar rabon da ke ƙara samfurin.\n  Misali: An ba da N = 6 da M = 3, aikin yana dawowa [2, 2, 2] saboda raba 6 zuwa sassa uku na 2 kowanne yana ƙara samfurin 222 = 8.",
      "hi": "M धनात्मक पूर्णांकों को खोजता है जिनका योग N है और जिनका गुणनफल यथासंभव बड़ा है।\n  यदि कई संभावनाएँ हैं, तो सबसे छोटे शब्दकोश क्रम के संयोजन को आउटपुट करता है।\n  यह फ़ंक्शन कुल योग N को M भागों में वितरित करने का लक्ष्य रखता है ताकि इन भागों का गुणनफल अधिकतम हो सके।\n  \n  इनपुट: दो पूर्णांक, $N जो कुल योग का प्रतिनिधित्व करता है और $M जो भागों की संख्या का प्रतिनिधित्व करता है।\n  आउटपुट: पूर्णांकों की एक सरणी जो गुणनफल को अधिकतम करने वाले वितरण का प्रतिनिधित्व करती है।\n  उदाहरण: दिए गए N = 6 और M = 3 के लिए, फ़ंक्शन [2, 2, 2] लौटाता है क्योंकि 6 को प्रत्येक के तीन भागों में विभाजित करने से गुणनफल 222 = 8 अधिकतम होता है।",
      "hu": "Megtalálja azt az M pozitív egész számot, amelynek összege N, és amelynek szorzata a lehető legnagyobb.\n  Több lehetőség esetén a lexikográfiailag legkisebb kombinációt adja meg.\n  A függvény célja, hogy az összeg N-t M részre ossza fel úgy, hogy ezeknek a részeknek a szorzata maximális legyen.\n  \n  Bemenet: Két egész szám, $N az összeg, és $M a részek száma.\n  Kimenet: Egy egész számokat tartalmazó tömb, amely a szorzatot maximalizáló eloszlást képviseli.\n  Példa: Ha N = 6 és M = 3, a függvény [2, 2, 2] értéket ad vissza, mivel a 6 három részre osztása, mindegyik 2, maximalizálja a szorzatot 222 = 8."
    },
    "docstring_bertscore": {
      "sq": "0.980119283792599",
      "hy": "0.9499407741108254",
      "bn": "0.9721649315536759",
      "bg": "0.9879135399444081",
      "zh": "0.8998394385808715",
      "fr": "0.9721345411053776",
      "de": "0.9755897165834795",
      "ha": "0.9557999730905925",
      "hi": "0.9290591594133897",
      "hu": "0.9117747409164958"
    }
  },
  {
    "task_id": "PHP/46",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin e karaktereve në titullin e një kompozimi.\n * Titulli mund të përmbajë shkronja të mëdha dhe të vogla të anglishtes, shifra, hapësira dhe karaktere të reja rreshti.\n * Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n * \n * Shembull përdorimi:\n * - Për një titull \"234\", funksioni kthen 3.\n * - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n * \n * @param string $title Titulli i kompozimit.\n * @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n */",
      "hy": "<?php\n\n\n/**\n * Հաշվում է կոմպոզիցիայի վերնագրի մեջ գտնվող սիմվոլների քանակը։\n * Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ։\n * Ֆունկցիան հաշվում է սիմվոլները բացատներն ու նոր տողի սիմվոլները չհաշված։\n * \n * Օգտագործման օրինակ:\n * - \"234\" վերնագրի դեպքում ֆունկցիան վերադարձնում է 3։\n * - \"Ca 45\\n\" վերնագրի դեպքում, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4։\n * \n * @param string $title Կոմպոզիցիայի վերնագիրը։\n * @return int Վերնագրի սիմվոլների քանակը, բացատներն ու նոր տողի սիմվոլները չհաշված։\n */\n\nfunction countTitleCharacters(string $title): int ",
      "bn": "<?php\n\n\n/**\n * একটি রচনার শিরোনামে অক্ষরের সংখ্যা গণনা করে।\n * শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n * ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে অক্ষরগুলি গণনা করে।\n * \n * উদাহরণ ব্যবহার:\n * - শিরোনাম \"234\" এর জন্য, ফাংশনটি 3 ফেরত দেয়।\n * - শিরোনাম \"Ca 45\\n\", একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 ফেরত দেয়।\n * \n * @param string $title রচনার শিরোনাম।\n * @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে।\n */\n\nfunction countTitleCharacters(string $title): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява броя на символите в заглавието на композицията.\n * Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n * Функцията брои символите, изключвайки интервалите и символите за нов ред.\n * \n * Пример за използване:\n * - За заглавие \"234\", функцията връща 3.\n * - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n * \n * @param string $title Заглавието на композицията.\n * @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "zh": "<?php\n\n\n/**\n * 计算作品标题中的字符数量。\n * 标题可以包含大写和小写的英文字母、数字、空格和换行符。\n * 该函数计算字符数量，不包括空格和换行符。\n * \n * 示例用法：\n * - 对于标题 \"234\"，函数返回 3。\n * - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n * \n * @param string $title 作品的标题。\n * @return int 标题中的字符数量，不包括空格和换行符。\n */\n\nfunction countTitleCharacters(string $title): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre de caractères dans le titre d'une composition.\n * Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n * La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n * \n * Exemple d'utilisation :\n * - Pour un titre \"234\", la fonction renvoie 3.\n * - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n * \n * @param string $title Le titre de la composition.\n * @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n * Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n * Die Funktion zählt die Zeichen, ausgenommen Leerzeichen und Zeilenumbrüche.\n * \n * Beispielverwendung:\n * - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n * - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n * \n * @param string $title Der Titel der Komposition.\n * @return int Die Anzahl der Zeichen im Titel, ausgenommen Leerzeichen und Zeilenumbrüche.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige yawan haruffa a cikin taken rubutu.\n * Taken na iya ƙunsar manyan da ƙananan haruffan Turanci, lambobi, sarari, da haruffan sabon layi.\n * Aikin yana ƙididdige haruffa ba tare da haɗa sarari da haruffan sabon layi ba.\n * \n * Misalin amfani:\n * - Don take \"234\", aikin yana dawowa 3.\n * - Don take \"Ca 45\\n\", tare da haɗa harafin sabon layi, aikin yana dawowa 4.\n * \n * @param string $title Taken rubutun.\n * @return int Yawan haruffa a cikin taken, ba tare da haɗa sarari da haruffan sabon layi ba.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "hi": "<?php\n\n\n/**\n * किसी रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n * शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान, और नई पंक्ति के वर्ण हो सकते हैं।\n * यह फ़ंक्शन रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n * \n * उदाहरण उपयोग:\n * - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n * - शीर्षक \"Ca 45\\n\" के लिए, जिसमें एक नई पंक्ति का वर्ण शामिल है, फ़ंक्शन 4 लौटाता है।\n * \n * @param string $title रचना का शीर्षक।\n * @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर।\n */\n\nfunction countTitleCharacters(string $title): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a karakterek számát egy kompozíció címében.\n * A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és új sor karaktereket.\n * A függvény megszámolja a karaktereket a szóközök és új sor karakterek kivételével.\n * \n * Példa használat:\n * - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n * - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy új sor karaktert, a függvény 4-et ad vissza.\n * \n * @param string $title A kompozíció címe.\n * @return int A karakterek száma a címben, a szóközök és új sor karakterek kivételével.\n */\n\nfunction countTitleCharacters(string $title): int "
    },
    "prompt_bertscore": {
      "sq": "0.9549073281582218",
      "hy": "0.9510010630847896",
      "bn": "0.9726458157061614",
      "bg": "0.9904885842041444",
      "zh": "0.9628714132858156",
      "fr": "0.9834489248698869",
      "de": "0.9484176763490498",
      "ha": "0.9605383008301798",
      "hi": "0.9824452455545176",
      "hu": "0.9912926399865736"
    },
    "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "instruction": {
      "en": "Write a PHP function `function countTitleCharacters(string $title): int` to solve the following problem:\n* Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.  Calculates the number of characters in a composition's title.\n  The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n  The function counts the characters excluding spaces and newline characters.\n  \n  Example usage:\n  - For a title \"234\", the function returns 3.\n  - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n  \n  @param string $title The title of the composition.\n  @return int The number of characters in the title, excluding spaces and newline characters.",
      "sq": "Shkruani një funksion PHP `function countTitleCharacters(string $title): int` për të zgjidhur problemin vijues:\n* Llogarit numrin e karaktereve në titullin e një kompozimi.\n * Titulli mund të përmbajë shkronja të mëdha dhe të vogla angleze, shifra, hapësira dhe karaktere të reja rreshti.\n * Funksioni llogarit karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n * \n * Shembull përdorimi:\n * - Për një titull \"234\", funksioni kthen 3.\n * - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n * \n * @param string $title Titulli i kompozimit.\n * @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti. Llogarit numrin e karaktereve në titullin e një kompozimi.\n  Titulli mund të përmbajë shkronja të mëdha dhe të vogla angleze, shifra, hapësira dhe karaktere të reja rreshti.\n  Funksioni llogarit karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n  \n  Shembull përdorimi:\n  - Për një titull \"234\", funksioni kthen 3.\n  - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n  \n  @param string $title Titulli i kompozimit.\n  @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti.",
      "hy": "Գրեք PHP ֆունկցիա `function countTitleCharacters(string $title): int` հետևյալ խնդիրը լուծելու համար:\n* Հաշվում է կոմպոզիցիայի վերնագրի մեջ գտնվող սիմվոլների քանակը։\n * Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ։\n * Ֆունկցիան հաշվում է սիմվոլները բացատները և նոր տողի սիմվոլները բացառելով։\n * \n * Օրինակ օգտագործում:\n * - \"234\" վերնագրի համար ֆունկցիան վերադարձնում է 3։\n * - \"Ca 45\\n\" վերնագրի համար, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4։\n * \n * @param string $title Կոմպոզիցիայի վերնագիրը։\n * @return int Վերնագրի սիմվոլների քանակը, բացատները և նոր տողի սիմվոլները բացառելով։  Հաշվում է կոմպոզիցիայի վերնագրի մեջ գտնվող սիմվոլների քանակը։\n  Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ։\n  Ֆունկցիան հաշվում է սիմվոլները բացատները և նոր տողի սիմվոլները բացառելով։\n  \n  Օրինակ օգտագործում:\n  - \"234\" վերնագրի համար ֆունկցիան վերադարձնում է 3։\n  - \"Ca 45\\n\" վերնագրի համար, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4։\n  \n  @param string $title Կոմպոզիցիայի վերնագիրը։\n  @return int Վերնագրի սիմվոլների քանակը, բացատները և նոր տողի սիմվոլները բացառելով։",
      "bn": "PHP ফাংশন `function countTitleCharacters(string $title): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\n* একটি রচনার শিরোনামের অক্ষরের সংখ্যা গণনা করে।\n * শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n * ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদে অক্ষরগুলি গণনা করে।\n * \n * উদাহরণ ব্যবহার:\n * - \"234\" শিরোনামের জন্য, ফাংশনটি 3 প্রদান করে।\n * - \"Ca 45\\n\" শিরোনামের জন্য, যেখানে একটি নতুন লাইন অক্ষর অন্তর্ভুক্ত আছে, ফাংশনটি 4 প্রদান করে।\n * \n * @param string $title রচনার শিরোনাম।\n * @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদে।  একটি রচনার শিরোনামের অক্ষরের সংখ্যা গণনা করে।\n  শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n  ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদে অক্ষরগুলি গণনা করে।\n  \n  উদাহরণ ব্যবহার:\n  - \"234\" শিরোনামের জন্য, ফাংশনটি 3 প্রদান করে।\n  - \"Ca 45\\n\" শিরোনামের জন্য, যেখানে একটি নতুন লাইন অক্ষর অন্তর্ভুক্ত আছে, ফাংশনটি 4 প্রদান করে।\n  \n  @param string $title রচনার শিরোনাম।\n  @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদে।",
      "bg": "Напишете PHP функция `function countTitleCharacters(string $title): int`, за да решите следния проблем:\n* Изчислява броя на символите в заглавието на композицията.\n * Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n * Функцията брои символите, като изключва интервалите и символите за нов ред.\n * \n * Пример за използване:\n * - За заглавие \"234\", функцията връща 3.\n * - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n * \n * @param string $title Заглавието на композицията.\n * @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.  Изчислява броя на символите в заглавието на композицията.\n  Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n  Функцията брои символите, като изключва интервалите и символите за нов ред.\n  \n  Пример за използване:\n  - За заглавие \"234\", функцията връща 3.\n  - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n  \n  @param string $title Заглавието на композицията.\n  @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.",
      "zh": "编写一个 PHP 函数 `function countTitleCharacters(string $title): int` 来解决以下问题：\n* 计算作品标题中的字符数。\n* 标题可以包含大写和小写的英文字母、数字、空格和换行符。\n* 该函数计算字符数时不包括空格和换行符。\n* \n* 示例用法：\n* - 对于标题 \"234\"，函数返回 3。\n* - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n* \n* @param string $title 作品的标题。\n* @return int 标题中的字符数，不包括空格和换行符。 计算作品标题中的字符数。\n  标题可以包含大写和小写的英文字母、数字、空格和换行符。\n  该函数计算字符数时不包括空格和换行符。\n  \n  示例用法：\n  - 对于标题 \"234\"，函数返回 3。\n  - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n  \n  @param string $title 作品的标题。\n  @return int 标题中的字符数，不包括空格和换行符。",
      "fr": "Écrire une fonction PHP `function countTitleCharacters(string $title): int` pour résoudre le problème suivant :\n* Calcule le nombre de caractères dans le titre d'une composition.\n * Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n * La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n * \n * Exemple d'utilisation :\n * - Pour un titre \"234\", la fonction renvoie 3.\n * - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n * \n * @param string $title Le titre de la composition.\n * @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.  Calcule le nombre de caractères dans le titre d'une composition.\n  Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n  La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n  \n  Exemple d'utilisation :\n  - Pour un titre \"234\", la fonction renvoie 3.\n  - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n  \n  @param string $title Le titre de la composition.\n  @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.",
      "de": "Schreiben Sie eine PHP-Funktion `function countTitleCharacters(string $title): int`, um das folgende Problem zu lösen:\n* Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n * Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n * Die Funktion zählt die Zeichen mit Ausnahme von Leerzeichen und Zeilenumbrüchen.\n * \n * Beispielverwendung:\n * - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n * - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n * \n * @param string $title Der Titel der Komposition.\n * @return int Die Anzahl der Zeichen im Titel, ohne Leerzeichen und Zeilenumbrüche.  Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n  Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n  Die Funktion zählt die Zeichen mit Ausnahme von Leerzeichen und Zeilenumbrüchen.\n  \n  Beispielverwendung:\n  - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n  - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n  \n  @param string $title Der Titel der Komposition.\n  @return int Die Anzahl der Zeichen im Titel, ohne Leerzeichen und Zeilenumbrüche.",
      "ha": "Rubuta aikin PHP `function countTitleCharacters(string $title): int` don warware matsalar mai zuwa:\n* Lissafa adadin haruffa a cikin taken rubutu.\n * Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n * Aikin yana lissafa haruffa banda sarari da haruffan sabon layi.\n * \n * Misalin amfani:\n * - Don take \"234\", aikin yana dawowa 3.\n * - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n * \n * @param string $title Taken rubutun.\n * @return int Adadin haruffa a cikin taken, banda sarari da haruffan sabon layi.  Lissafa adadin haruffa a cikin taken rubutu.\n  Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n  Aikin yana lissafa haruffa banda sarari da haruffan sabon layi.\n  \n  Misalin amfani:\n  - Don take \"234\", aikin yana dawowa 3.\n  - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n  \n  @param string $title Taken rubutun.\n  @return int Adadin haruffa a cikin taken, banda sarari da haruffan sabon layi.",
      "hi": "PHP फ़ंक्शन `function countTitleCharacters(string $title): int` लिखें ताकि निम्नलिखित समस्या का समाधान हो सके:\n* किसी रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n* शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान, और नई पंक्ति के वर्ण हो सकते हैं।\n* फ़ंक्शन रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n* \n* उदाहरण उपयोग:\n* - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n* - शीर्षक \"Ca 45\\n\", जिसमें एक नई पंक्ति का वर्ण शामिल है, के लिए फ़ंक्शन 4 लौटाता है।\n* \n* @param string $title रचना का शीर्षक।\n* @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर। किसी रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n  शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान, और नई पंक्ति के वर्ण हो सकते हैं।\n  फ़ंक्शन रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n  \n  उदाहरण उपयोग:\n  - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n  - शीर्षक \"Ca 45\\n\", जिसमें एक नई पंक्ति का वर्ण शामिल है, के लिए फ़ंक्शन 4 लौटाता है।\n  \n  @param string $title रचना का शीर्षक।\n  @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर।",
      "hu": "Írj egy PHP függvényt `function countTitleCharacters(string $title): int` a következő probléma megoldására:\n* Kiszámítja a karakterek számát egy kompozíció címében.\n * A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és új sor karaktereket.\n * A függvény a karaktereket a szóközök és új sor karakterek kivételével számolja.\n * \n * Példa használat:\n * - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n * - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy új sor karaktert, a függvény 4-et ad vissza.\n * \n * @param string $title A kompozíció címe.\n * @return int A karakterek száma a címben, a szóközök és új sor karakterek kivételével.  Kiszámítja a karakterek számát egy kompozíció címében.\n  A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és új sor karaktereket.\n  A függvény a karaktereket a szóközök és új sor karakterek kivételével számolja.\n  \n  Példa használat:\n  - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n  - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy új sor karaktert, a függvény 4-et ad vissza.\n  \n  @param string $title A kompozíció címe.\n  @return int A karakterek száma a címben, a szóközök és új sor karakterek kivételével."
    },
    "instruction_bertscore": {
      "sq": "0.9846250153559944",
      "hy": "0.9748672978876556",
      "bn": "0.9748760376244211",
      "bg": "0.9869986484093614",
      "zh": "0.9422333194355287",
      "fr": "0.9775996574091715",
      "de": "0.9378678209211438",
      "ha": "0.950114972954993",
      "hi": "0.9796076119310532",
      "hu": "0.9841598230036108"
    },
    "level": "easy",
    "test": "function main(){\n    assert(countTitleCharacters(\"234\") === 3, 'Testcase 1 failed');\n    assert(countTitleCharacters(\"Ca 45\") === 4, 'Testcase 2 failed');\n    assert(countTitleCharacters(\" \\nCa 45\\n \") === 4, 'Testcase 3 failed');\n    assert(countTitleCharacters(\"\") === 0, 'Testcase 5 failed');\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countTitleCharacters",
    "signature": "function countTitleCharacters(string $title): int",
    "docstring": {
      "en": "* Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.  Calculates the number of characters in a composition's title.\n  The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n  The function counts the characters excluding spaces and newline characters.\n  \n  Example usage:\n  - For a title \"234\", the function returns 3.\n  - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n  \n  @param string $title The title of the composition.\n  @return int The number of characters in the title, excluding spaces and newline characters.",
      "sq": "* Llogarit numrin e karaktereve në titullin e një kompozimi.\n * Titulli mund të përmbajë shkronja të mëdha dhe të vogla të anglishtes, shifra, hapësira dhe karaktere të reja rreshti.\n * Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n * \n * Shembull përdorimi:\n * - Për një titull \"234\", funksioni kthen 3.\n * - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n * \n * @param string $title Titulli i kompozimit.\n * @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti. Llogarit numrin e karaktereve në titullin e një kompozimi.\n  Titulli mund të përmbajë shkronja të mëdha dhe të vogla të anglishtes, shifra, hapësira dhe karaktere të reja rreshti.\n  Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n  \n  Shembull përdorimi:\n  - Për një titull \"234\", funksioni kthen 3.\n  - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n  \n  @param string $title Titulli i kompozimit.\n  @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti.",
      "hy": "* Հաշվում է կոմպոզիցիայի վերնագրի մեջ գտնվող սիմվոլների քանակը։\n * Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ։\n * Ֆունկցիան հաշվում է սիմվոլները՝ բացի բացատներից և նոր տողի սիմվոլներից։\n * \n * Օգտագործման օրինակ:\n * - \"234\" վերնագրի համար ֆունկցիան վերադարձնում է 3։\n * - \"Ca 45\\n\" վերնագրի համար, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4։\n * \n * @param string $title Կոմպոզիցիայի վերնագիրը։\n * @return int Վերնագրի սիմվոլների քանակը՝ բացի բացատներից և նոր տողի սիմվոլներից։ Հաշվում է կոմպոզիցիայի վերնագրի մեջ գտնվող սիմվոլների քանակը։\n  Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ։\n  Ֆունկցիան հաշվում է սիմվոլները՝ բացի բացատներից և նոր տողի սիմվոլներից։\n  \n  Օգտագործման օրինակ:\n  - \"234\" վերնագրի համար ֆունկցիան վերադարձնում է 3։\n  - \"Ca 45\\n\" վերնագրի համար, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4։\n  \n  @param string $title Կոմպոզիցիայի վերնագիրը։\n  @return int Վերնագրի սիմվոլների քանակը՝ բացի բացատներից և նոր տողի սիմվոլներից։",
      "bn": "* একটি রচনার শিরোনামে অক্ষরের সংখ্যা গণনা করে।\n * শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n * ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদে অক্ষরগুলি গণনা করে।\n * \n * উদাহরণ ব্যবহার:\n * - শিরোনামের জন্য \"234\", ফাংশনটি 3 প্রদান করে।\n * - শিরোনামের জন্য \"Ca 45\\n\", একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 প্রদান করে।\n * \n * @param string $title রচনার শিরোনাম।\n * @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদে। একটি রচনার শিরোনামে অক্ষরের সংখ্যা গণনা করে।\n  শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n  ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদে অক্ষরগুলি গণনা করে।\n  \n  উদাহরণ ব্যবহার:\n  - শিরোনামের জন্য \"234\", ফাংশনটি 3 প্রদান করে।\n  - শিরোনামের জন্য \"Ca 45\\n\", একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 প্রদান করে।\n  \n  @param string $title রচনার শিরোনাম।\n  @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদে।",
      "bg": "* Изчислява броя на символите в заглавието на композиция.\n * Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n * Функцията брои символите, изключвайки интервалите и символите за нов ред.\n * \n * Пример за използване:\n * - За заглавие \"234\", функцията връща 3.\n * - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n * \n * @param string $title Заглавието на композицията.\n * @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред. Изчислява броя на символите в заглавието на композиция.\n  Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n  Функцията брои символите, изключвайки интервалите и символите за нов ред.\n  \n  Пример за използване:\n  - За заглавие \"234\", функцията връща 3.\n  - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n  \n  @param string $title Заглавието на композицията.\n  @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.",
      "zh": "* 计算作品标题中的字符数。\n * 标题可能包含大写和小写的英文字母、数字、空格和换行符。\n * 该函数计算字符数时不包括空格和换行符。\n * \n * 示例用法：\n * - 对于标题 \"234\"，函数返回 3。\n * - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n * \n * @param string $title 作品的标题。\n * @return int 标题中的字符数，不包括空格和换行符。 计算作品标题中的字符数。\n  标题可能包含大写和小写的英文字母、数字、空格和换行符。\n  该函数计算字符数时不包括空格和换行符。\n  \n  示例用法：\n  - 对于标题 \"234\"，函数返回 3。\n  - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n  \n  @param string $title 作品的标题。\n  @return int 标题中的字符数，不包括空格和换行符。",
      "fr": "* Calcule le nombre de caractères dans le titre d'une composition.\n * Le titre peut contenir des lettres anglaises majuscules et minuscules, des chiffres, des espaces et des caractères de nouvelle ligne.\n * La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n * \n * Exemple d'utilisation :\n * - Pour un titre \"234\", la fonction renvoie 3.\n * - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n * \n * @param string $title Le titre de la composition.\n * @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.  Calcule le nombre de caractères dans le titre d'une composition.\n  Le titre peut contenir des lettres anglaises majuscules et minuscules, des chiffres, des espaces et des caractères de nouvelle ligne.\n  La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n  \n  Exemple d'utilisation :\n  - Pour un titre \"234\", la fonction renvoie 3.\n  - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n  \n  @param string $title Le titre de la composition.\n  @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.",
      "de": "* Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n * Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n * Die Funktion zählt die Zeichen, ausgenommen Leerzeichen und Zeilenumbrüche.\n * \n * Beispielverwendung:\n * - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n * - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n * \n * @param string $title Der Titel der Komposition.\n * @return int Die Anzahl der Zeichen im Titel, ausgenommen Leerzeichen und Zeilenumbrüche. Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n  Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n  Die Funktion zählt die Zeichen, ausgenommen Leerzeichen und Zeilenumbrüche.\n  \n  Beispielverwendung:\n  - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n  - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n  \n  @param string $title Der Titel der Komposition.\n  @return int Die Anzahl der Zeichen im Titel, ausgenommen Leerzeichen und Zeilenumbrüche.",
      "ha": "* Lissafa yawan haruffa a cikin taken rubutu.\n * Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n * Aikin yana ƙidaya haruffa banda sarari da haruffan sabon layi.\n * \n * Misalin amfani:\n * - Don take \"234\", aikin yana dawowa 3.\n * - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n * \n * @param string $title Taken rubutun.\n * @return int Yawan haruffa a cikin taken, banda sarari da haruffan sabon layi.  Lissafa yawan haruffa a cikin taken rubutu.\n  Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n  Aikin yana ƙidaya haruffa banda sarari da haruffan sabon layi.\n  \n  Misalin amfani:\n  - Don take \"234\", aikin yana dawowa 3.\n  - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n  \n  @param string $title Taken rubutun.\n  @return int Yawan haruffa a cikin taken, banda sarari da haruffan sabon layi.",
      "hi": "* एक रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n * शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान और नई पंक्ति के वर्ण हो सकते हैं।\n * यह फ़ंक्शन रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n * \n * उदाहरण उपयोग:\n * - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n * - शीर्षक \"Ca 45\\n\" के लिए, जिसमें एक नई पंक्ति का वर्ण शामिल है, फ़ंक्शन 4 लौटाता है।\n * \n * @param string $title रचना का शीर्षक।\n * @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर। एक रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n  शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान और नई पंक्ति के वर्ण हो सकते हैं।\n  यह फ़ंक्शन रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n  \n  उदाहरण उपयोग:\n  - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n  - शीर्षक \"Ca 45\\n\" के लिए, जिसमें एक नई पंक्ति का वर्ण शामिल है, फ़ंक्शन 4 लौटाता है।\n  \n  @param string $title रचना का शीर्षक।\n  @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति के वर्णों को छोड़कर।",
      "hu": "* Kiszámítja a karakterek számát egy kompozíció címében.\n * A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és újsor karaktereket.\n * A függvény megszámolja a karaktereket, kivéve a szóközöket és az újsor karaktereket.\n * \n * Példa használat:\n * - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n * - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy újsor karaktert, a függvény 4-et ad vissza.\n * \n * @param string $title A kompozíció címe.\n * @return int A karakterek száma a címben, kivéve a szóközöket és az újsor karaktereket. Kiszámítja a karakterek számát egy kompozíció címében.\n  A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és újsor karaktereket.\n  A függvény megszámolja a karaktereket, kivéve a szóközöket és az újsor karaktereket.\n  \n  Példa használat:\n  - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n  - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy újsor karaktert, a függvény 4-et ad vissza.\n  \n  @param string $title A kompozíció címe.\n  @return int A karakterek száma a címben, kivéve a szóközöket és az újsor karaktereket."
    },
    "docstring_bertscore": {
      "sq": "0.9887763903196236",
      "hy": "0.9605287665718901",
      "bn": "0.9588350453128056",
      "bg": "0.9802587223200856",
      "zh": "0.9353706397707733",
      "fr": "0.9755219836235466",
      "de": "0.9334455141177831",
      "ha": "0.9450242749194498",
      "hi": "0.9709211081076354",
      "hu": "0.9850896118172351"
    }
  },
  {
    "task_id": "PHP/47",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of students enrolled in both courses A and B.\n * Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n * this function calculates the total number of students who have enrolled in both courses.\n * \n * The function accepts two parameters:\n * - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n * - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n * \n * The function returns an integer representing the number of students enrolled in both courses.\n * \n * Example:\n * If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n * the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e studentëve të regjistruar në të dy kurset A dhe B.\n * Duke pasur dy vargje që përfaqësojnë ID-të e studentëve të atyre që janë regjistruar në kurset A dhe B,\n * kjo funksion llogarit numrin total të studentëve që janë regjistruar në të dy kurset.\n * \n * Funksioni pranon dy parametra:\n * - $courseA (array): Një varg i numrave të plotë që përfaqëson ID-të e studentëve të regjistruar në kursin A.\n * - $courseB (array): Një varg i numrave të plotë që përfaqëson ID-të e studentëve të regjistruar në kursin B.\n * \n * Funksioni kthen një numër të plotë që përfaqëson numrin e studentëve të regjistruar në të dy kurset.\n * \n * Shembull:\n * Nëse kursi A ka studentë me ID [1, 2, 3, 4, 5] dhe kursi B ka studentë me ID [1, 3, 4, 5, 6],\n * funksioni duhet të kthejë 4 sepse studentët me ID 1, 3, 4, dhe 5 janë regjistruar në të dy kurset.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է ուսանողների քանակը, ովքեր գրանցված են և՛ A, և՛ B դասընթացներում:\n * Տրված են երկու զանգվածներ, որոնք ներկայացնում են այն ուսանողների ID-ները, ովքեր գրանցված են A և B դասընթացներում,\n * այս ֆունկցիան հաշվարկում է այն ուսանողների ընդհանուր քանակը, ովքեր գրանցված են երկու դասընթացներում:\n * \n * Ֆունկցիան ընդունում է երկու պարամետր.\n * - $courseA (array): Ամբողջ թվերի զանգված, որը ներկայացնում է այն ուսանողների ID-ները, ովքեր գրանցված են A դասընթացում:\n * - $courseB (array): Ամբողջ թվերի զանգված, որը ներկայացնում է այն ուսանողների ID-ները, ովքեր գրանցված են B դասընթացում:\n * \n * Ֆունկցիան վերադարձնում է ամբողջ թիվ, որը ներկայացնում է այն ուսանողների քանակը, ովքեր գրանցված են երկու դասընթացներում:\n * \n * Օրինակ:\n * Եթե A դասընթացում ուսանողների ID-ները [1, 2, 3, 4, 5] են, իսկ B դասընթացում ուսանողների ID-ները [1, 3, 4, 5, 6] են,\n * ֆունկցիան պետք է վերադարձնի 4, որովհետև ուսանողները, որոնց ID-ները 1, 3, 4 և 5 են, գրանցված են երկու դասընթացներում:\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "bn": "<?php\n\n\n/**\n * কোর্স A এবং B উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা গণনা করে।\n * দুটি অ্যারে দেওয়া হয়েছে যা কোর্স A এবং B তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে,\n * এই ফাংশনটি উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের মোট সংখ্যা গণনা করে।\n * \n * ফাংশনটি দুটি প্যারামিটার গ্রহণ করে:\n * - $courseA (array): একটি অ্যারে যা কোর্স A তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n * - $courseB (array): একটি অ্যারে যা কোর্স B তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n * \n * ফাংশনটি একটি পূর্ণসংখ্যা রিটার্ন করে যা উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা উপস্থাপন করে।\n * \n * উদাহরণ:\n * যদি কোর্স A তে শিক্ষার্থীদের আইডি [1, 2, 3, 4, 5] এবং কোর্স B তে শিক্ষার্থীদের আইডি [1, 3, 4, 5, 6] থাকে,\n * তাহলে ফাংশনটি 4 রিটার্ন করবে কারণ আইডি 1, 3, 4, এবং 5 সহ শিক্ষার্থীরা উভয় কোর্সে ভর্তি।\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "bg": "<?php\n\n\n/**\n * Брои броя на студентите, записани и в двата курса A и B.\n * Дадени са два масива, представляващи идентификационните номера на студентите, които са записани в курсовете A и B,\n * тази функция изчислява общия брой на студентите, които са записани и в двата курса.\n * \n * Функцията приема два параметъра:\n * - $courseA (array): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс A.\n * - $courseB (array): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс B.\n * \n * Функцията връща цяло число, представляващо броя на студентите, записани и в двата курса.\n * \n * Пример:\n * Ако курс A има студенти с идентификационни номера [1, 2, 3, 4, 5] и курс B има студенти с идентификационни номера [1, 3, 4, 5, 6],\n * функцията трябва да върне 4, защото студентите с идентификационни номера 1, 3, 4 и 5 са записани и в двата курса.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "zh": "<?php\n\n\n/**\n * 计算同时注册课程 A 和 B 的学生人数。\n * 给定两个数组，分别表示注册了课程 A 和 B 的学生 ID，\n * 此函数计算同时注册了这两门课程的学生总数。\n * \n * 函数接受两个参数：\n * - $courseA (array): 一个整数数组，表示注册了课程 A 的学生 ID。\n * - $courseB (array): 一个整数数组，表示注册了课程 B 的学生 ID。\n * \n * 函数返回一个整数，表示同时注册了这两门课程的学生人数。\n * \n * 例子：\n * 如果课程 A 的学生 ID 是 [1, 2, 3, 4, 5]，课程 B 的学生 ID 是 [1, 3, 4, 5, 6]，\n * 函数应返回 4，因为 ID 为 1, 3, 4 和 5 的学生同时注册了这两门课程。\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre d'étudiants inscrits dans les deux cours A et B.\n * Étant donné deux tableaux représentant les identifiants des étudiants inscrits dans les cours A et B,\n * cette fonction calcule le nombre total d'étudiants inscrits dans les deux cours.\n * \n * La fonction accepte deux paramètres :\n * - $courseA (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours A.\n * - $courseB (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours B.\n * \n * La fonction retourne un entier représentant le nombre d'étudiants inscrits dans les deux cours.\n * \n * Exemple :\n * Si le cours A a des étudiants avec les identifiants [1, 2, 3, 4, 5] et le cours B a des étudiants avec les identifiants [1, 3, 4, 5, 6],\n * la fonction devrait retourner 4 car les étudiants avec les identifiants 1, 3, 4 et 5 sont inscrits dans les deux cours.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der Studenten, die in beiden Kursen A und B eingeschrieben sind.\n * Gegeben sind zwei Arrays, die die Studenten-IDs derjenigen darstellen, die sich in die Kurse A und B eingeschrieben haben,\n * berechnet diese Funktion die Gesamtzahl der Studenten, die in beiden Kursen eingeschrieben sind.\n * \n * Die Funktion akzeptiert zwei Parameter:\n * - $courseA (array): Ein Array von Ganzzahlen, das die IDs der in Kurs A eingeschriebenen Studenten darstellt.\n * - $courseB (array): Ein Array von Ganzzahlen, das die IDs der in Kurs B eingeschriebenen Studenten darstellt.\n * \n * Die Funktion gibt eine Ganzzahl zurück, die die Anzahl der in beiden Kursen eingeschriebenen Studenten darstellt.\n * \n * Beispiel:\n * Wenn Kurs A Studenten mit den IDs [1, 2, 3, 4, 5] hat und Kurs B Studenten mit den IDs [1, 3, 4, 5, 6] hat,\n * sollte die Funktion 4 zurückgeben, weil die Studenten mit den IDs 1, 3, 4 und 5 in beiden Kursen eingeschrieben sind.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙidaya adadin ɗaliban da suka yi rajista a cikin duka darussan A da B.\n * An ba da wasu jerin lambobi guda biyu da ke wakiltar ID ɗin ɗaliban da suka yi rajista a cikin darussan A da B,\n * wannan aikin yana ƙididdige jimlar adadin ɗaliban da suka yi rajista a cikin duka darussan.\n * \n * Aikin yana karɓar sigogi guda biyu:\n * - $courseA (array): Jerin lambobi da ke wakiltar ID ɗin ɗaliban da suka yi rajista a cikin darasi A.\n * - $courseB (array): Jerin lambobi da ke wakiltar ID ɗin ɗaliban da suka yi rajista a cikin darasi B.\n * \n * Aikin yana dawowa da lamba mai wakiltar adadin ɗaliban da suka yi rajista a cikin duka darussan.\n * \n * Misali:\n * Idan darasi A yana da ɗalibai tare da ID [1, 2, 3, 4, 5] kuma darasi B yana da ɗalibai tare da ID [1, 3, 4, 5, 6],\n * aikin ya kamata ya dawo da 4 saboda ɗalibai tare da ID 1, 3, 4, da 5 sun yi rajista a cikin duka darussan.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hi": "<?php\n\n\n/**\n * उन छात्रों की संख्या गिनता है जो दोनों पाठ्यक्रम A और B में नामांकित हैं।\n * दिए गए दो ऐरे जो उन छात्रों के आईडी का प्रतिनिधित्व करते हैं जिन्होंने पाठ्यक्रम A और B में नामांकन किया है,\n * यह फ़ंक्शन उन छात्रों की कुल संख्या की गणना करता है जिन्होंने दोनों पाठ्यक्रमों में नामांकन किया है।\n * \n * फ़ंक्शन दो पैरामीटर स्वीकार करता है:\n * - $courseA (array): एक ऐरे जो पाठ्यक्रम A में नामांकित छात्रों के आईडी का प्रतिनिधित्व करता है।\n * - $courseB (array): एक ऐरे जो पाठ्यक्रम B में नामांकित छात्रों के आईडी का प्रतिनिधित्व करता है।\n * \n * फ़ंक्शन एक पूर्णांक लौटाता है जो दोनों पाठ्यक्रमों में नामांकित छात्रों की संख्या का प्रतिनिधित्व करता है।\n * \n * उदाहरण:\n * यदि पाठ्यक्रम A में छात्रों के आईडी [1, 2, 3, 4, 5] हैं और पाठ्यक्रम B में छात्रों के आईडी [1, 3, 4, 5, 6] हैं,\n * तो फ़ंक्शन को 4 लौटाना चाहिए क्योंकि आईडी 1, 3, 4, और 5 वाले छात्र दोनों पाठ्यक्रमों में नामांकित हैं।\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hu": "<?php\n\n\n/**\n * Megszámolja azoknak a diákoknak a számát, akik mindkét kurzusra, A-ra és B-re beiratkoztak.\n * Két tömböt kapunk, amelyek az A és B kurzusokra beiratkozott diákok azonosítóit tartalmazzák,\n * ez a függvény kiszámítja azoknak a diákoknak a teljes számát, akik mindkét kurzusra beiratkoztak.\n * \n * A függvény két paramétert fogad el:\n * - $courseA (array): Egész számokat tartalmazó tömb, amely az A kurzusra beiratkozott diákok azonosítóit tartalmazza.\n * - $courseB (array): Egész számokat tartalmazó tömb, amely a B kurzusra beiratkozott diákok azonosítóit tartalmazza.\n * \n * A függvény egy egész számot ad vissza, amely a mindkét kurzusra beiratkozott diákok számát jelenti.\n * \n * Példa:\n * Ha az A kurzus diákjai azonosítókkal [1, 2, 3, 4, 5] és a B kurzus diákjai azonosítókkal [1, 3, 4, 5, 6],\n * a függvénynek 4-et kell visszaadnia, mert az 1, 3, 4 és 5 azonosítójú diákok mindkét kurzusra beiratkoztak.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int "
    },
    "prompt_bertscore": {
      "sq": "0.9791448031432419",
      "hy": "0.9408371464872344",
      "bn": "0.9516005295747529",
      "bg": "0.9767546837682491",
      "zh": "0.9595483270111019",
      "fr": "0.9792963581239715",
      "de": "0.9838952473360723",
      "ha": "0.9479745319689611",
      "hi": "0.9713892799157348",
      "hu": "0.9553643766649831"
    },
    "canonical_solution": "{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}",
    "instruction": {
      "en": "Write a PHP function `function countCommonStudents(array $courseA, array $courseB): int` to solve the following problem:\nCounts the number of students enrolled in both courses A and B.\n  Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n  this function calculates the total number of students who have enrolled in both courses.\n  \n  The function accepts two parameters:\n  - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n  - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n  \n  The function returns an integer representing the number of students enrolled in both courses.\n  \n  Example:\n  If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n  the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.",
      "sq": "Shkruani një funksion PHP `function countCommonStudents(array $courseA, array $courseB): int` për të zgjidhur problemin e mëposhtëm:\nNumëron numrin e studentëve të regjistruar në të dy kurset A dhe B.\n  Duke pasur dy vargje që përfaqësojnë ID-të e studentëve që janë regjistruar në kurset A dhe B,\n  ky funksion llogarit numrin total të studentëve që janë regjistruar në të dy kurset.\n  \n  Funksioni pranon dy parametra:\n  - $courseA (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin A.\n  - $courseB (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin B.\n  \n  Funksioni kthen një numër të plotë që përfaqëson numrin e studentëve të regjistruar në të dy kurset.\n  \n  Shembull:\n  Nëse kursi A ka studentë me ID-të [1, 2, 3, 4, 5] dhe kursi B ka studentë me ID-të [1, 3, 4, 5, 6],\n  funksioni duhet të kthejë 4 sepse studentët me ID-të 1, 3, 4, dhe 5 janë regjistruar në të dy kurset.",
      "hy": "Գրեք PHP ֆունկցիա `function countCommonStudents(array $courseA, array $courseB): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է այն ուսանողների քանակը, ովքեր գրանցված են և՛ A, և՛ B դասընթացներում:\n  Տրված են երկու զանգվածներ, որոնք ներկայացնում են այն ուսանողների ID-ները, ովքեր գրանցվել են A և B դասընթացներում,\n  այս ֆունկցիան հաշվարկում է այն ուսանողների ընդհանուր քանակը, ովքեր գրանցվել են երկու դասընթացներում:\n  \n  Ֆունկցիան ընդունում է երկու պարամետր:\n  - $courseA (array): Զանգված, որը ներկայացնում է A դասընթացում գրանցված ուսանողների ID-ները:\n  - $courseB (array): Զանգված, որը ներկայացնում է B դասընթացում գրանցված ուսանողների ID-ները:\n  \n  Ֆունկցիան վերադարձնում է ամբողջ թիվ, որը ներկայացնում է երկու դասընթացներում գրանցված ուսանողների քանակը:\n  \n  Օրինակ:\n  Եթե A դասընթացում ուսանողների ID-ները [1, 2, 3, 4, 5] են, իսկ B դասընթացում ուսանողների ID-ները [1, 3, 4, 5, 6] են,\n  ֆունկցիան պետք է վերադարձնի 4, որովհետև ուսանողները, որոնց ID-ները 1, 3, 4 և 5 են, գրանցված են երկու դասընթացներում:",
      "bn": "PHP ফাংশন `function countCommonStudents(array $courseA, array $courseB): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nকোর্স A এবং B উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা গণনা করে।\n  দুটি অ্যারে দেওয়া হয়েছে যা কোর্স A এবং B তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে,\n  এই ফাংশনটি উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের মোট সংখ্যা গণনা করে।\n  \n  ফাংশনটি দুটি প্যারামিটার গ্রহণ করে:\n  - $courseA (array): কোর্স A তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n  - $courseB (array): কোর্স B তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n  \n  ফাংশনটি একটি পূর্ণসংখ্যা ফেরত দেয় যা উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা উপস্থাপন করে।\n  \n  উদাহরণ:\n  যদি কোর্স A তে শিক্ষার্থীদের আইডি থাকে [1, 2, 3, 4, 5] এবং কোর্স B তে শিক্ষার্থীদের আইডি থাকে [1, 3, 4, 5, 6],\n  ফাংশনটি 4 ফেরত দেবে কারণ আইডি 1, 3, 4, এবং 5 সহ শিক্ষার্থীরা উভয় কোর্সে ভর্তি হয়েছে।",
      "bg": "Напишете PHP функция `function countCommonStudents(array $courseA, array $courseB): int`, за да решите следния проблем:\nБрои броя на студентите, записани и в двата курса A и B.\n  Дадени са два масива, представляващи идентификаторите на студентите, които са записани в курсовете A и B,\n  тази функция изчислява общия брой на студентите, които са записани и в двата курса.\n  \n  Функцията приема два параметъра:\n  - $courseA (array): Масив от цели числа, представляващи идентификаторите на студентите, записани в курс A.\n  - $courseB (array): Масив от цели числа, представляващи идентификаторите на студентите, записани в курс B.\n  \n  Функцията връща цяло число, представляващо броя на студентите, записани и в двата курса.\n  \n  Пример:\n  Ако курс A има студенти с идентификатори [1, 2, 3, 4, 5] и курс B има студенти с идентификатори [1, 3, 4, 5, 6],\n  функцията трябва да върне 4, защото студентите с идентификатори 1, 3, 4 и 5 са записани и в двата курса.",
      "zh": "编写一个 PHP 函数 `function countCommonStudents(array $courseA, array $courseB): int` 来解决以下问题：\n计算同时注册了课程 A 和 B 的学生人数。\n给定两个数组，分别表示注册了课程 A 和 B 的学生 ID，\n此函数计算同时注册了这两门课程的学生总数。\n\n该函数接受两个参数：\n- $courseA (array): 一个整数数组，表示注册了课程 A 的学生 ID。\n- $courseB (array): 一个整数数组，表示注册了课程 B 的学生 ID。\n\n该函数返回一个整数，表示同时注册了这两门课程的学生人数。\n\n示例：\n如果课程 A 的学生 ID 为 [1, 2, 3, 4, 5]，课程 B 的学生 ID 为 [1, 3, 4, 5, 6]，\n函数应返回 4，因为 ID 为 1, 3, 4 和 5 的学生同时注册了这两门课程。",
      "fr": "Écrire une fonction PHP `function countCommonStudents(array $courseA, array $courseB): int` pour résoudre le problème suivant :\nCompte le nombre d'étudiants inscrits dans les deux cours A et B.\nDonnées deux tableaux représentant les identifiants des étudiants inscrits dans les cours A et B,\ncette fonction calcule le nombre total d'étudiants inscrits dans les deux cours.\n\nLa fonction accepte deux paramètres :\n- $courseA (array) : Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours A.\n- $courseB (array) : Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours B.\n\nLa fonction retourne un entier représentant le nombre d'étudiants inscrits dans les deux cours.\n\nExemple :\nSi le cours A a des étudiants avec les identifiants [1, 2, 3, 4, 5] et le cours B a des étudiants avec les identifiants [1, 3, 4, 5, 6],\nla fonction doit retourner 4 car les étudiants avec les identifiants 1, 3, 4, et 5 sont inscrits dans les deux cours.",
      "de": "Schreiben Sie eine PHP-Funktion `function countCommonStudents(array $courseA, array $courseB): int`, um das folgende Problem zu lösen:\nZählt die Anzahl der Studenten, die in beiden Kursen A und B eingeschrieben sind.\n  Gegeben sind zwei Arrays, die die Studentenausweise derjenigen darstellen, die sich in den Kursen A und B eingeschrieben haben,\n  diese Funktion berechnet die Gesamtzahl der Studenten, die in beiden Kursen eingeschrieben sind.\n  \n  Die Funktion akzeptiert zwei Parameter:\n  - $courseA (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs A eingeschriebenen Studenten darstellt.\n  - $courseB (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs B eingeschriebenen Studenten darstellt.\n  \n  Die Funktion gibt eine ganze Zahl zurück, die die Anzahl der in beiden Kursen eingeschriebenen Studenten darstellt.\n  \n  Beispiel:\n  Wenn Kurs A Studenten mit den IDs [1, 2, 3, 4, 5] hat und Kurs B Studenten mit den IDs [1, 3, 4, 5, 6] hat,\n  sollte die Funktion 4 zurückgeben, da die Studenten mit den IDs 1, 3, 4 und 5 in beiden Kursen eingeschrieben sind.",
      "ha": "Rubuta aikin PHP `function countCommonStudents(array $courseA, array $courseB): int` don warware matsalar mai zuwa:\nYana ƙidaya adadin ɗaliban da suka yi rajista a cikin duka darussa A da B.\n  An ba da shirye-shiryen tsararru guda biyu da ke wakiltar ID ɗin ɗaliban waɗanda suka yi rajista a cikin darussa A da B,\n  wannan aikin yana ƙididdige jimillar adadin ɗaliban da suka yi rajista a cikin duka darussan.\n  \n  Aikin yana karɓar sigogi guda biyu:\n  - $courseA (array): Tsarar tsararru na lambobi da ke wakiltar ID ɗin ɗaliban da suka yi rajista a cikin darasi A.\n  - $courseB (array): Tsarar tsararru na lambobi da ke wakiltar ID ɗin ɗaliban da suka yi rajista a cikin darasi B.\n  \n  Aikin yana mayar da lamba mai wakiltar adadin ɗaliban da suka yi rajista a cikin duka darussan.\n  \n  Misali:\n  Idan darasi A yana da ɗalibai tare da ID [1, 2, 3, 4, 5] kuma darasi B yana da ɗalibai tare da ID [1, 3, 4, 5, 6],\n  aikin ya kamata ya mayar da 4 saboda ɗalibai tare da ID 1, 3, 4, da 5 suna rajista a cikin duka darussan.",
      "hi": "PHP फ़ंक्शन `function countCommonStudents(array $courseA, array $courseB): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nगणना करता है कि कितने छात्र दोनों पाठ्यक्रम A और B में नामांकित हैं।\n  दिए गए दो ऐरे जो उन छात्रों की आईडी का प्रतिनिधित्व करते हैं जिन्होंने पाठ्यक्रम A और B में नामांकन किया है,\n  यह फ़ंक्शन उन छात्रों की कुल संख्या की गणना करता है जिन्होंने दोनों पाठ्यक्रमों में नामांकन किया है।\n  \n  फ़ंक्शन दो पैरामीटर स्वीकार करता है:\n  - $courseA (array): एक पूर्णांक ऐरे जो पाठ्यक्रम A में नामांकित छात्रों की आईडी का प्रतिनिधित्व करता है।\n  - $courseB (array): एक पूर्णांक ऐरे जो पाठ्यक्रम B में नामांकित छात्रों की आईडी का प्रतिनिधित्व करता है।\n  \n  फ़ंक्शन एक पूर्णांक लौटाता है जो दोनों पाठ्यक्रमों में नामांकित छात्रों की संख्या का प्रतिनिधित्व करता है।\n  \n  उदाहरण:\n  यदि पाठ्यक्रम A में छात्रों की आईडी [1, 2, 3, 4, 5] है और पाठ्यक्रम B में छात्रों की आईडी [1, 3, 4, 5, 6] है,\n  तो फ़ंक्शन को 4 लौटाना चाहिए क्योंकि आईडी 1, 3, 4, और 5 वाले छात्र दोनों पाठ्यक्रमों में नामांकित हैं।",
      "hu": "Írj egy PHP függvényt `function countCommonStudents(array $courseA, array $courseB): int` a következő probléma megoldására:\nSzámolja meg azon diákok számát, akik mindkét, A és B kurzusra beiratkoztak.\n  Két tömb adott, amelyek azon diákok azonosítóit tartalmazzák, akik beiratkoztak az A és B kurzusokra,\n  ez a függvény kiszámítja azon diákok teljes számát, akik mindkét kurzusra beiratkoztak.\n  \n  A függvény két paramétert fogad el:\n  - $courseA (array): Egész számokat tartalmazó tömb, amely az A kurzusra beiratkozott diákok azonosítóit képviseli.\n  - $courseB (array): Egész számokat tartalmazó tömb, amely a B kurzusra beiratkozott diákok azonosítóit képviseli.\n  \n  A függvény egy egész számot ad vissza, amely a mindkét kurzusra beiratkozott diákok számát jelenti.\n  \n  Példa:\n  Ha az A kurzus diákjai az [1, 2, 3, 4, 5] azonosítókkal rendelkeznek, és a B kurzus diákjai az [1, 3, 4, 5, 6] azonosítókkal,\n  a függvénynek 4-et kell visszaadnia, mert az 1, 3, 4 és 5 azonosítójú diákok mindkét kurzusra beiratkoztak."
    },
    "instruction_bertscore": {
      "sq": "0.9756789016245642",
      "hy": "0.9618419120209117",
      "bn": "0.9685675367227531",
      "bg": "0.9870377785944253",
      "zh": "0.9508642067522566",
      "fr": "0.97839974058398",
      "de": "0.9837957335151738",
      "ha": "0.9465006945416822",
      "hi": "0.9600872112348495",
      "hu": "0.9658659649102975"
    },
    "level": "easy",
    "test": "function main(){\n    assert(countCommonStudents([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]) === 4); // Expected: 4\n    assert(countCommonStudents([2, 4, 6, 8], [1, 3, 5, 7]) === 0); // Expected: 0, no common students\n    assert(countCommonStudents([1, 3, 5, 7, 9], [2, 3, 5, 7]) === 3); // Expected: 3, students with IDs 3, 5, and 7 are common\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countCommonStudents",
    "signature": "function countCommonStudents(array $courseA, array $courseB): int",
    "docstring": {
      "en": "Counts the number of students enrolled in both courses A and B.\n  Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n  this function calculates the total number of students who have enrolled in both courses.\n  \n  The function accepts two parameters:\n  - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n  - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n  \n  The function returns an integer representing the number of students enrolled in both courses.\n  \n  Example:\n  If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n  the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.",
      "sq": "Numëron numrin e studentëve të regjistruar në të dy kurset A dhe B.\n  Duke pasur dy vargje që përfaqësojnë ID-të e studentëve që janë regjistruar në kurset A dhe B,\n  kjo funksion llogarit numrin total të studentëve që janë regjistruar në të dy kurset.\n  \n  Funksioni pranon dy parametra:\n  - $courseA (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin A.\n  - $courseB (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin B.\n  \n  Funksioni kthen një numër të plotë që përfaqëson numrin e studentëve të regjistruar në të dy kurset.\n  \n  Shembull:\n  Nëse kursi A ka studentë me ID [1, 2, 3, 4, 5] dhe kursi B ka studentë me ID [1, 3, 4, 5, 6],\n  funksioni duhet të kthejë 4 sepse studentët me ID 1, 3, 4, dhe 5 janë regjistruar në të dy kurset.",
      "hy": "Հաշվում է այն ուսանողների քանակը, որոնք գրանցված են և՛ A, և՛ B դասընթացներում:\n  Տրված երկու զանգվածներ, որոնք ներկայացնում են այն ուսանողների ID-ները, ովքեր գրանցված են A և B դասընթացներում,\n  այս ֆունկցիան հաշվարկում է այն ուսանողների ընդհանուր քանակը, ովքեր գրանցված են երկու դասընթացներում:\n  \n  Ֆունկցիան ընդունում է երկու պարամետր.\n  - $courseA (array): Ամբողջ թվերի զանգված, որը ներկայացնում է A դասընթացում գրանցված ուսանողների ID-ները:\n  - $courseB (array): Ամբողջ թվերի զանգված, որը ներկայացնում է B դասընթացում գրանցված ուսանողների ID-ները:\n  \n  Ֆունկցիան վերադարձնում է ամբողջ թիվ, որը ներկայացնում է այն ուսանողների քանակը, որոնք գրանցված են երկու դասընթացներում:\n  \n  Օրինակ:\n  Եթե A դասընթացում ուսանողները ունեն ID-ներ [1, 2, 3, 4, 5], իսկ B դասընթացում ուսանողները ունեն ID-ներ [1, 3, 4, 5, 6],\n  ֆունկցիան պետք է վերադարձնի 4, քանի որ ուսանողները, որոնք ունեն ID-ներ 1, 3, 4 և 5, գրանցված են երկու դասընթացներում:",
      "bn": "কোর্স A এবং B উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা গণনা করে।\n  দুটি অ্যারে দেওয়া হয়েছে যা কোর্স A এবং B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে,\n  এই ফাংশনটি উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের মোট সংখ্যা গণনা করে।\n  \n  ফাংশনটি দুটি প্যারামিটার গ্রহণ করে:\n  - $courseA (array): একটি পূর্ণসংখ্যার অ্যারে যা কোর্স A-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n  - $courseB (array): একটি পূর্ণসংখ্যার অ্যারে যা কোর্স B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n  \n  ফাংশনটি একটি পূর্ণসংখ্যা প্রদান করে যা উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা উপস্থাপন করে।\n  \n  উদাহরণ:\n  যদি কোর্স A-তে শিক্ষার্থীদের আইডি [1, 2, 3, 4, 5] এবং কোর্স B-তে শিক্ষার্থীদের আইডি [1, 3, 4, 5, 6] হয়,\n  তাহলে ফাংশনটি 4 প্রদান করা উচিত কারণ আইডি 1, 3, 4, এবং 5 সহ শিক্ষার্থীরা উভয় কোর্সে ভর্তি হয়েছে।",
      "bg": "Брои броя на студентите, записани и в двата курса A и B.\n  Дадени са два масива, представляващи идентификационните номера на студентите, записани в курсовете A и B,\n  тази функция изчислява общия брой на студентите, които са записани и в двата курса.\n  \n  Функцията приема два параметъра:\n  - $courseA (масив): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс A.\n  - $courseB (масив): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс B.\n  \n  Функцията връща цяло число, представляващо броя на студентите, записани и в двата курса.\n  \n  Пример:\n  Ако курс A има студенти с идентификационни номера [1, 2, 3, 4, 5] и курс B има студенти с идентификационни номера [1, 3, 4, 5, 6],\n  функцията трябва да върне 4, защото студентите с идентификационни номера 1, 3, 4 и 5 са записани и в двата курса.",
      "zh": "计算同时注册课程A和B的学生人数。\n给定两个数组，分别表示注册课程A和B的学生ID，\n此函数计算同时注册这两门课程的学生总数。\n\n函数接受两个参数：\n- $courseA (array): 一个整数数组，表示注册课程A的学生ID。\n- $courseB (array): 一个整数数组，表示注册课程B的学生ID。\n\n函数返回一个整数，表示同时注册两门课程的学生人数。\n\n示例：\n如果课程A的学生ID为[1, 2, 3, 4, 5]，课程B的学生ID为[1, 3, 4, 5, 6]，\n函数应返回4，因为ID为1, 3, 4和5的学生同时注册了这两门课程。",
      "fr": "Compte le nombre d'étudiants inscrits dans les deux cours A et B.\n  Étant donné deux tableaux représentant les identifiants des étudiants inscrits dans les cours A et B,\n  cette fonction calcule le nombre total d'étudiants inscrits dans les deux cours.\n  \n  La fonction accepte deux paramètres :\n  - $courseA (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours A.\n  - $courseB (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours B.\n  \n  La fonction renvoie un entier représentant le nombre d'étudiants inscrits dans les deux cours.\n  \n  Exemple :\n  Si le cours A a des étudiants avec les identifiants [1, 2, 3, 4, 5] et le cours B a des étudiants avec les identifiants [1, 3, 4, 5, 6],\n  la fonction devrait renvoyer 4 car les étudiants avec les identifiants 1, 3, 4 et 5 sont inscrits dans les deux cours.",
      "de": "Zählt die Anzahl der Studenten, die in beiden Kursen A und B eingeschrieben sind.\n  Gegeben zwei Arrays, die die Studenten-IDs derjenigen darstellen, die sich in die Kurse A und B eingeschrieben haben,\n  berechnet diese Funktion die Gesamtanzahl der Studenten, die in beiden Kursen eingeschrieben sind.\n  \n  Die Funktion akzeptiert zwei Parameter:\n  - $courseA (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs A eingeschriebenen Studenten darstellt.\n  - $courseB (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs B eingeschriebenen Studenten darstellt.\n  \n  Die Funktion gibt eine ganze Zahl zurück, die die Anzahl der in beiden Kursen eingeschriebenen Studenten darstellt.\n  \n  Beispiel:\n  Wenn Kurs A Studenten mit den IDs [1, 2, 3, 4, 5] hat und Kurs B Studenten mit den IDs [1, 3, 4, 5, 6] hat,\n  sollte die Funktion 4 zurückgeben, da die Studenten mit den IDs 1, 3, 4 und 5 in beiden Kursen eingeschrieben sind.",
      "ha": "Yana ƙididdige yawan ɗaliban da suka yi rajista a duka darussa A da B.  \n  An ba da jerin lambobi guda biyu da ke wakiltar lambobin ɗaliban da suka yi rajista a darussa A da B,  \n  wannan aikin yana ƙididdige jimillar yawan ɗaliban da suka yi rajista a duka darussa.  \n  \n  Aikin yana karɓar sigogi guda biyu:  \n  - $courseA (array): Jerin lambobi na lambobin ɗaliban da suka yi rajista a darasi A.  \n  - $courseB (array): Jerin lambobi na lambobin ɗaliban da suka yi rajista a darasi B.  \n  \n  Aikin yana mayar da lamba mai nuna yawan ɗaliban da suka yi rajista a duka darussa.  \n  \n  Misali:  \n  Idan darasi A yana da ɗalibai tare da lambobi [1, 2, 3, 4, 5] kuma darasi B yana da ɗalibai tare da lambobi [1, 3, 4, 5, 6],  \n  aikin ya kamata ya mayar da 4 saboda ɗalibai da lambobi 1, 3, 4, da 5 sun yi rajista a duka darussa.",
      "hi": "दो कोर्स A और B में नामांकित छात्रों की संख्या गिनता है।\nदो ऐरे दिए गए हैं जो उन छात्रों के IDs का प्रतिनिधित्व करते हैं जिन्होंने कोर्स A और B में नामांकन किया है,\nयह फ़ंक्शन उन छात्रों की कुल संख्या की गणना करता है जिन्होंने दोनों कोर्स में नामांकन किया है।\nफ़ंक्शन दो पैरामीटर स्वीकार करता है:\n- $courseA (array): पूर्णांकों का एक ऐरे जो कोर्स A में नामांकित छात्रों के IDs का प्रतिनिधित्व करता है।\n- $courseB (array): पूर्णांकों का एक ऐरे जो कोर्स B में नामांकित छात्रों के IDs का प्रतिनिधित्व करता है।\nफ़ंक्शन एक पूर्णांक लौटाता है जो दोनों कोर्स में नामांकित छात्रों की संख्या का प्रतिनिधित्व करता है।\nउदाहरण:\nयदि कोर्स A के छात्रों के IDs [1, 2, 3, 4, 5] हैं और कोर्स B के छात्रों के IDs [1, 3, 4, 5, 6] हैं,\nतो फ़ंक्शन को 4 लौटाना चाहिए क्योंकि IDs 1, 3, 4, और 5 वाले छात्र दोनों कोर्स में नामांकित हैं।",
      "hu": "Számolja meg a mindkét kurzusra, A-ra és B-re beiratkozott diákok számát.\n  Két tömböt adva, amelyek az A és B kurzusokra beiratkozott diákok azonosítóit tartalmazzák,\n  ez a függvény kiszámítja a mindkét kurzusra beiratkozott diákok teljes számát.\n  \n  A függvény két paramétert fogad el:\n  - $courseA (tömb): Egész számokat tartalmazó tömb, amely az A kurzusra beiratkozott diákok azonosítóit képviseli.\n  - $courseB (tömb): Egész számokat tartalmazó tömb, amely a B kurzusra beiratkozott diákok azonosítóit képviseli.\n  \n  A függvény egy egész számot ad vissza, amely a mindkét kurzusra beiratkozott diákok számát képviseli.\n  \n  Példa:\n  Ha az A kurzus diákjai azonosítókkal [1, 2, 3, 4, 5] és a B kurzus diákjai azonosítókkal [1, 3, 4, 5, 6] rendelkeznek,\n  a függvénynek 4-et kell visszaadnia, mert az 1, 3, 4 és 5 azonosítójú diákok mindkét kurzusra beiratkoztak."
    },
    "docstring_bertscore": {
      "sq": "0.9775674792874439",
      "hy": "0.9745526673640963",
      "bn": "0.9603480129251484",
      "bg": "0.9746144414125982",
      "zh": "0.9473321613166942",
      "fr": "0.9784954804276389",
      "de": "0.9822412521531948",
      "ha": "0.9111031715982169",
      "hi": "0.8739145985089599",
      "hu": "0.963027139504547"
    }
  },
  {
    "task_id": "PHP/48",
    "prompt": {
      "en": "<?php\n\n\n\n/**\n * Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n * Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n * Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n * \n * Arguments:\n * - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n * - $failed: The number of failed deliveries (0 <= $failed <= 100).\n * \n * Returns:\n * - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n * \n * Examples:\n * - calculateDroidEarnings(5, 2) returns 730.\n * - calculateDroidEarnings(0, 10) returns -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "sq": "<?php\n\n\n\n/**\n * Llogarit fitimet totale të Deliv-e-droid bazuar në numrin e dërgesave të suksesshme dhe të dështuara.\n * Deliv-e-droid fiton 50 njësi parash për çdo dërgesë të suksesshme dhe humb 10 njësi për çdo dërgesë të dështuar.\n * Përveç kësaj, nëse numri i dërgesave të suksesshme është më i madh se ai i dështimeve, Deliv-e-droid merr një bonus prej 500 njësish.\n * \n * Argumentet:\n * - $delivered: Numri i pakove të dërguara me sukses (0 <= $delivered <= 100).\n * - $failed: Numri i dërgesave të dështuara (0 <= $failed <= 100).\n * \n * Kthen:\n * - Fitimet totale të Deliv-e-droid, të cilat mund të jenë negative nëse humbjet tejkalojnë fitimet.\n * \n * Shembuj:\n * - calculateDroidEarnings(5, 2) kthen 730.\n * - calculateDroidEarnings(0, 10) kthen -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hy": "<?php\n\n\n\n/**\n * Հաշվում է Deliv-e-droid-ի ընդհանուր վաստակը՝ հիմնված հաջողությամբ առաքված և ձախողված առաքումների քանակի վրա:\n * Deliv-e-droid-ը վաստակում է 50 միավոր գումար յուրաքանչյուր հաջող առաքման համար և կորցնում է 10 միավոր յուրաքանչյուր ձախողված առաքման համար:\n * Բացի այդ, եթե հաջողությամբ առաքվածների քանակը գերազանցում է ձախողվածների քանակը, Deliv-e-droid-ը ստանում է 500 միավոր բոնուս:\n * \n * Պարամետրեր:\n * - $delivered: Հաջողությամբ առաքված փաթեթների քանակը (0 <= $delivered <= 100):\n * - $failed: Ձախողված առաքումների քանակը (0 <= $failed <= 100):\n * \n * Վերադարձնում է:\n * - Deliv-e-droid-ի ընդհանուր վաստակը, որը կարող է լինել բացասական, եթե կորուստները գերազանցում են շահույթները:\n * \n * Օրինակներ:\n * - calculateDroidEarnings(5, 2) վերադարձնում է 730:\n * - calculateDroidEarnings(0, 10) վերադարձնում է -100:\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "bn": "<?php\n\n\n\n/**\n * Deliv-e-droid এর মোট উপার্জন গণনা করে সফলভাবে বিতরণ করা এবং ব্যর্থ বিতরণের সংখ্যার উপর ভিত্তি করে।\n * Deliv-e-droid প্রতিটি সফল বিতরণের জন্য 50 ইউনিট অর্থ উপার্জন করে এবং প্রতিটি ব্যর্থ বিতরণের জন্য 10 ইউনিট হারায়।\n * অতিরিক্তভাবে, যদি সফল বিতরণের সংখ্যা ব্যর্থগুলোর চেয়ে বেশি হয়, Deliv-e-droid 500 ইউনিট বোনাস পায়।\n * \n * আর্গুমেন্টসমূহ:\n * - $delivered: সফলভাবে বিতরণ করা প্যাকেজের সংখ্যা (0 <= $delivered <= 100)।\n * - $failed: ব্যর্থ বিতরণের সংখ্যা (0 <= $failed <= 100)।\n * \n * রিটার্ন:\n * - Deliv-e-droid এর মোট উপার্জন, যা নেতিবাচক হতে পারে যদি ক্ষতি লাভের চেয়ে বেশি হয়।\n * \n * উদাহরণ:\n * - calculateDroidEarnings(5, 2) 730 রিটার্ন করে।\n * - calculateDroidEarnings(0, 10) -100 রিটার্ন করে।\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "bg": "<?php\n\n\n\n/**\n * Изчислява общите приходи на Deliv-e-droid въз основа на броя на успешно доставените и неуспешните доставки.\n * Deliv-e-droid печели 50 единици пари за всяка успешна доставка и губи 10 единици за всяка неуспешна доставка.\n * Освен това, ако броят на успешните доставки е по-голям от броя на неуспешните, Deliv-e-droid получава бонус от 500 единици.\n * \n * Аргументи:\n * - $delivered: Броят на успешно доставените пакети (0 <= $delivered <= 100).\n * - $failed: Броят на неуспешните доставки (0 <= $failed <= 100).\n * \n * Връща:\n * - Общите приходи на Deliv-e-droid, които могат да бъдат отрицателни, ако загубите превишават печалбите.\n * \n * Примери:\n * - calculateDroidEarnings(5, 2) връща 730.\n * - calculateDroidEarnings(0, 10) връща -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "zh": "<?php\n\n\n\n/**\n * 计算 Deliv-e-droid 的总收入，基于成功交付和失败交付的数量。\n * Deliv-e-droid 每次成功交付可赚取 50 个单位的钱，每次失败交付损失 10 个单位。\n * 另外，如果成功交付的数量大于失败交付的数量，Deliv-e-droid 将获得 500 个单位的奖金。\n * \n * 参数:\n * - $delivered: 成功交付的包裹数量 (0 <= $delivered <= 100)。\n * - $failed: 失败交付的数量 (0 <= $failed <= 100)。\n * \n * 返回:\n * - Deliv-e-droid 的总收入，如果损失大于收益，总收入可能为负。\n * \n * 示例:\n * - calculateDroidEarnings(5, 2) 返回 730。\n * - calculateDroidEarnings(0, 10) 返回 -100。\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "fr": "<?php\n\n\n\n/**\n * Calcule les gains totaux de Deliv-e-droid en fonction du nombre de livraisons réussies et échouées.\n * Deliv-e-droid gagne 50 unités d'argent pour chaque livraison réussie et perd 10 unités pour chaque livraison échouée.\n * De plus, si le nombre de livraisons réussies est supérieur au nombre de livraisons échouées, Deliv-e-droid reçoit un bonus de 500 unités.\n * \n * Arguments:\n * - $delivered: Le nombre de colis livrés avec succès (0 <= $delivered <= 100).\n * - $failed: Le nombre de livraisons échouées (0 <= $failed <= 100).\n * \n * Renvoie:\n * - Les gains totaux de Deliv-e-droid, qui peuvent être négatifs si les pertes dépassent les gains.\n * \n * Exemples:\n * - calculateDroidEarnings(5, 2) renvoie 730.\n * - calculateDroidEarnings(0, 10) renvoie -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "de": "<?php\n\n\n\n/**\n * Berechnet den Gesamtertrag von Deliv-e-droid basierend auf der Anzahl der erfolgreich zugestellten und fehlgeschlagenen Lieferungen.\n * Deliv-e-droid verdient 50 Geldeinheiten für jede erfolgreiche Lieferung und verliert 10 Einheiten für jede fehlgeschlagene Lieferung.\n * Zusätzlich erhält Deliv-e-droid einen Bonus von 500 Einheiten, wenn die Anzahl der erfolgreichen Lieferungen größer ist als die der fehlgeschlagenen.\n * \n * Argumente:\n * - $delivered: Die Anzahl der erfolgreich zugestellten Pakete (0 <= $delivered <= 100).\n * - $failed: Die Anzahl der fehlgeschlagenen Lieferungen (0 <= $failed <= 100).\n * \n * Rückgabe:\n * - Der Gesamtertrag von Deliv-e-droid, der negativ sein kann, wenn die Verluste die Gewinne überwiegen.\n * \n * Beispiele:\n * - calculateDroidEarnings(5, 2) gibt 730 zurück.\n * - calculateDroidEarnings(0, 10) gibt -100 zurück.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "ha": "<?php\n\n\n\n/**\n * Lissafin jimillar kudin da Deliv-e-droid ya samu bisa ga yawan isar da sako da aka yi nasara da kuma wadanda suka kasa.\n * Deliv-e-droid yana samun kudi guda 50 don kowane isar da sako da aka yi nasara kuma yana rasa kudi guda 10 don kowane isar da sako da ya kasa.\n * Bugu da ƙari, idan yawan isar da sako da aka yi nasara ya fi yawan wadanda suka kasa, Deliv-e-droid yana samun karin kudi guda 500.\n * \n * Huɗɗa:\n * - $delivered: Yawan fakitoci da aka isar da nasara (0 <= $delivered <= 100).\n * - $failed: Yawan isar da sako da suka kasa (0 <= $failed <= 100).\n * \n * Komawa:\n * - Jimillar kudin da Deliv-e-droid ya samu, wanda zai iya zama mara kyau idan asarar ta fi samun.\n * \n * Misalai:\n * - calculateDroidEarnings(5, 2) yana dawowa 730.\n * - calculateDroidEarnings(0, 10) yana dawowa -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hi": "<?php\n\n\n\n/**\n * Deliv-e-droid की कुल कमाई की गणना करता है जो सफलतापूर्वक डिलीवर की गई और असफल डिलीवरी की संख्या पर आधारित है।\n * Deliv-e-droid प्रत्येक सफल डिलीवरी के लिए 50 यूनिट पैसे कमाता है और प्रत्येक असफल डिलीवरी के लिए 10 यूनिट खोता है।\n * इसके अतिरिक्त, यदि सफल डिलीवरी की संख्या असफल डिलीवरी की संख्या से अधिक है, तो Deliv-e-droid को 500 यूनिट का बोनस मिलता है।\n * \n * तर्क:\n * - $delivered: सफलतापूर्वक डिलीवर किए गए पैकेजों की संख्या (0 <= $delivered <= 100)।\n * - $failed: असफल डिलीवरी की संख्या (0 <= $failed <= 100)।\n * \n * लौटाता है:\n * - Deliv-e-droid की कुल कमाई, जो नकारात्मक हो सकती है यदि नुकसान लाभ से अधिक हो।\n * \n * उदाहरण:\n * - calculateDroidEarnings(5, 2) 730 लौटाता है।\n * - calculateDroidEarnings(0, 10) -100 लौटाता है।\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hu": "<?php\n\n\n\n/**\n * Kiszámítja a Deliv-e-droid összes bevételét a sikeresen kézbesített és a sikertelen kézbesítések számának alapján.\n * A Deliv-e-droid 50 egységnyi pénzt keres minden sikeres kézbesítésért, és 10 egységet veszít minden sikertelen kézbesítésért.\n * Továbbá, ha a sikeres kézbesítések száma nagyobb, mint a sikerteleneké, a Deliv-e-droid 500 egységnyi bónuszt kap.\n * \n * Argumentumok:\n * - $delivered: A sikeresen kézbesített csomagok száma (0 <= $delivered <= 100).\n * - $failed: A sikertelen kézbesítések száma (0 <= $failed <= 100).\n * \n * Visszatér:\n * - A Deliv-e-droid összes bevétele, amely negatív is lehet, ha a veszteségek meghaladják a nyereségeket.\n * \n * Példák:\n * - calculateDroidEarnings(5, 2) visszatér 730.\n * - calculateDroidEarnings(0, 10) visszatér -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int "
    },
    "prompt_bertscore": {
      "sq": "0.972267623460671",
      "hy": "0.9581718184705301",
      "bn": "0.978638494301984",
      "bg": "0.9901590564020075",
      "zh": "0.9781524457595916",
      "fr": "0.994693390740272",
      "de": "0.979059392079397",
      "ha": "0.9659098622245063",
      "hi": "0.9857397290543622",
      "hu": "0.9873595598117018"
    },
    "canonical_solution": " {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n",
    "instruction": {
      "en": "Write a PHP function `function calculateDroidEarnings(int $delivered, int $failed): int` to solve the following problem:\nCalculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Arguments:\n  - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n  - $failed: The number of failed deliveries (0 <= $failed <= 100).\n  \n  Returns:\n  - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n  \n  Examples:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.",
      "sq": "Shkruani një funksion PHP `function calculateDroidEarnings(int $delivered, int $failed): int` për të zgjidhur problemin e mëposhtëm:\nLlogarit fitimet totale të Deliv-e-droid bazuar në numrin e dërgesave të suksesshme dhe dështimeve.\n  Deliv-e-droid fiton 50 njësi parash për çdo dërgesë të suksesshme dhe humbet 10 njësi për çdo dështim.\n  Për më tepër, nëse numri i dërgesave të suksesshme është më i madh se ai i dështimeve, Deliv-e-droid merr një bonus prej 500 njësish.\n  \n  Argumentet:\n  - $delivered: Numri i pakove të dërguara me sukses (0 <= $delivered <= 100).\n  - $failed: Numri i dërgesave të dështuara (0 <= $failed <= 100).\n  \n  Kthen:\n  - Fitimet totale të Deliv-e-droid, të cilat mund të jenë negative nëse humbjet tejkalojnë fitimet.\n  \n  Shembuj:\n  - calculateDroidEarnings(5, 2) kthen 730.\n  - calculateDroidEarnings(0, 10) kthen -100.",
      "hy": "Գրեք PHP ֆունկցիա `function calculateDroidEarnings(int $delivered, int $failed): int` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է Deliv-e-droid-ի ընդհանուր եկամուտները հաջողությամբ առաքված և ձախողված առաքումների քանակի հիման վրա:\n  Deliv-e-droid-ը վաստակում է 50 միավոր գումար յուրաքանչյուր հաջողված առաքման համար և կորցնում է 10 միավոր յուրաքանչյուր ձախողված առաքման համար:\n  Բացի այդ, եթե հաջողված առաքումների քանակը գերազանցում է ձախողվածներին, Deliv-e-droid-ը ստանում է 500 միավոր բոնուս:\n  \n  Փոփոխականներ:\n  - $delivered: Հաջողությամբ առաքված փաթեթների քանակը (0 <= $delivered <= 100):\n  - $failed: Ձախողված առաքումների քանակը (0 <= $failed <= 100):\n  \n  Վերադարձնում է:\n  - Deliv-e-droid-ի ընդհանուր եկամուտները, որոնք կարող են լինել բացասական, եթե կորուստները գերազանցում են շահույթները:\n  \n  Օրինակներ:\n  - calculateDroidEarnings(5, 2) վերադարձնում է 730:\n  - calculateDroidEarnings(0, 10) վերադարձնում է -100:",
      "bn": "PHP ফাংশন `function calculateDroidEarnings(int $delivered, int $failed): int` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nDeliv-e-droid-এর মোট উপার্জন গণনা করে সফলভাবে বিতরণ করা এবং ব্যর্থ বিতরণের সংখ্যার ভিত্তিতে।\n  Deliv-e-droid প্রতিটি সফল বিতরণের জন্য 50 ইউনিট অর্থ উপার্জন করে এবং প্রতিটি ব্যর্থ বিতরণের জন্য 10 ইউনিট হারায়।\n  অতিরিক্তভাবে, যদি সফল বিতরণের সংখ্যা ব্যর্থগুলির চেয়ে বেশি হয়, তাহলে Deliv-e-droid 500 ইউনিট বোনাস পায়।\n  \n  আর্গুমেন্টসমূহ:\n  - $delivered: সফলভাবে বিতরণ করা প্যাকেজের সংখ্যা (0 <= $delivered <= 100)।\n  - $failed: ব্যর্থ বিতরণের সংখ্যা (0 <= $failed <= 100)।\n  \n  রিটার্নস:\n  - Deliv-e-droid-এর মোট উপার্জন, যা নেতিবাচক হতে পারে যদি ক্ষতি লাভের চেয়ে বেশি হয়।\n  \n  উদাহরণসমূহ:\n  - calculateDroidEarnings(5, 2) 730 রিটার্ন করে।\n  - calculateDroidEarnings(0, 10) -100 রিটার্ন করে।",
      "bg": "Напишете PHP функция `function calculateDroidEarnings(int $delivered, int $failed): int`, за да решите следния проблем:\nИзчислява общите приходи на Deliv-e-droid въз основа на броя на успешно доставените и неуспешните доставки.\n  Deliv-e-droid печели 50 единици пари за всяка успешна доставка и губи 10 единици за всяка неуспешна доставка.\n  Освен това, ако броят на успешните доставки е по-голям от броя на неуспешните, Deliv-e-droid получава бонус от 500 единици.\n  \n  Аргументи:\n  - $delivered: Броят на успешно доставените пакети (0 <= $delivered <= 100).\n  - $failed: Броят на неуспешните доставки (0 <= $failed <= 100).\n  \n  Връща:\n  - Общите приходи на Deliv-e-droid, които могат да бъдат отрицателни, ако загубите надвишават печалбите.\n  \n  Примери:\n  - calculateDroidEarnings(5, 2) връща 730.\n  - calculateDroidEarnings(0, 10) връща -100.",
      "zh": "编写一个 PHP 函数 `function calculateDroidEarnings(int $delivered, int $failed): int` 来解决以下问题：\n计算 Deliv-e-droid 的总收入，基于成功交付和失败交付的数量。\nDeliv-e-droid 每次成功交付赚取 50 个单位的金钱，每次失败交付损失 10 个单位的金钱。\n另外，如果成功交付的数量大于失败交付的数量，Deliv-e-droid 会获得 500 个单位的奖金。\n\n参数：\n- $delivered: 成功交付的包裹数量 (0 <= $delivered <= 100)。\n- $failed: 失败交付的数量 (0 <= $failed <= 100)。\n\n返回：\n- Deliv-e-droid 的总收入，如果损失超过收益，可能为负数。\n\n示例：\n- calculateDroidEarnings(5, 2) 返回 730。\n- calculateDroidEarnings(0, 10) 返回 -100。",
      "fr": "Écrire une fonction PHP `function calculateDroidEarnings(int $delivered, int $failed): int` pour résoudre le problème suivant :\nCalcule les gains totaux de Deliv-e-droid en fonction du nombre de livraisons réussies et échouées.\n  Deliv-e-droid gagne 50 unités d'argent pour chaque livraison réussie et perd 10 unités pour chaque livraison échouée.\n  De plus, si le nombre de livraisons réussies est supérieur au nombre de livraisons échouées, Deliv-e-droid reçoit un bonus de 500 unités.\n  \n  Arguments :\n  - $delivered : Le nombre de colis livrés avec succès (0 <= $delivered <= 100).\n  - $failed : Le nombre de livraisons échouées (0 <= $failed <= 100).\n  \n  Renvoie :\n  - Les gains totaux de Deliv-e-droid, qui peuvent être négatifs si les pertes dépassent les gains.\n  \n  Exemples :\n  - calculateDroidEarnings(5, 2) renvoie 730.\n  - calculateDroidEarnings(0, 10) renvoie -100.",
      "de": "Schreiben Sie eine PHP-Funktion `function calculateDroidEarnings(int $delivered, int $failed): int`, um das folgende Problem zu lösen:\nBerechnet die Gesamteinnahmen von Deliv-e-droid basierend auf der Anzahl der erfolgreich zugestellten und fehlgeschlagenen Lieferungen.\n  Deliv-e-droid verdient 50 Geldeinheiten für jede erfolgreiche Lieferung und verliert 10 Einheiten für jede fehlgeschlagene Lieferung.\n  Zusätzlich erhält Deliv-e-droid einen Bonus von 500 Einheiten, wenn die Anzahl der erfolgreichen Lieferungen größer ist als die der fehlgeschlagenen.\n  \n  Argumente:\n  - $delivered: Die Anzahl der erfolgreich zugestellten Pakete (0 <= $delivered <= 100).\n  - $failed: Die Anzahl der fehlgeschlagenen Lieferungen (0 <= $failed <= 100).\n  \n  Rückgabewert:\n  - Die Gesamteinnahmen von Deliv-e-droid, die negativ sein können, wenn die Verluste die Gewinne überwiegen.\n  \n  Beispiele:\n  - calculateDroidEarnings(5, 2) gibt 730 zurück.\n  - calculateDroidEarnings(0, 10) gibt -100 zurück.",
      "ha": "Rubuta aikin PHP `function calculateDroidEarnings(int $delivered, int $failed): int` don warware matsalar mai zuwa:\nƘididdige jimillar kudaden shiga na Deliv-e-droid bisa ga adadin isarwa da aka yi nasara da kuma waɗanda suka gaza.\n  Deliv-e-droid yana samun 50 raka'a na kuɗi don kowane isarwa mai nasara kuma yana rasa 10 raka'a don kowane isarwa da ya gaza.\n  Bugu da ƙari, idan adadin isarwa da aka yi nasara ya fi na waɗanda suka gaza, Deliv-e-droid yana samun kari na 500 raka'a.\n  \n  Huɗɗa:\n  - $delivered: Adadin fakitoci da aka isar da nasara (0 <= $delivered <= 100).\n  - $failed: Adadin isarwa da suka gaza (0 <= $failed <= 100).\n  \n  Mayarwa:\n  - Jimillar kudaden shiga na Deliv-e-droid, wanda zai iya zama mara kyau idan asarar ta fi riba.\n  \n  Misalai:\n  - calculateDroidEarnings(5, 2) yana mayar da 730.\n  - calculateDroidEarnings(0, 10) yana mayar da -100.",
      "hi": "PHP फ़ंक्शन `function calculateDroidEarnings(int $delivered, int $failed): int` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nDeliv-e-droid की कुल कमाई की गणना करें जो सफलतापूर्वक वितरित और असफल डिलीवरी की संख्या पर आधारित है।\n  Deliv-e-droid प्रत्येक सफल डिलीवरी के लिए 50 इकाइयाँ कमाता है और प्रत्येक असफल डिलीवरी के लिए 10 इकाइयाँ खोता है।\n  इसके अतिरिक्त, यदि सफल डिलीवरी की संख्या असफल डिलीवरी की संख्या से अधिक है, तो Deliv-e-droid को 500 इकाइयों का बोनस प्राप्त होता है।\n  \n  तर्क:\n  - $delivered: सफलतापूर्वक वितरित पैकेजों की संख्या (0 <= $delivered <= 100)।\n  - $failed: असफल डिलीवरी की संख्या (0 <= $failed <= 100)।\n  \n  लौटाता है:\n  - Deliv-e-droid की कुल कमाई, जो नकारात्मक हो सकती है यदि नुकसान लाभ से अधिक हो।\n  \n  उदाहरण:\n  - calculateDroidEarnings(5, 2) 730 लौटाता है।\n  - calculateDroidEarnings(0, 10) -100 लौटाता है।",
      "hu": "Írj egy PHP függvényt `function calculateDroidEarnings(int $delivered, int $failed): int` a következő probléma megoldására:\nKiszámítja a Deliv-e-droid összes bevételét a sikeresen kézbesített és a sikertelen kézbesítések száma alapján.\n  A Deliv-e-droid 50 egységnyi pénzt keres minden sikeres kézbesítésért, és 10 egységet veszít minden sikertelen kézbesítésért.\n  Továbbá, ha a sikeres kézbesítések száma nagyobb, mint a sikerteleneké, a Deliv-e-droid 500 egység bónuszt kap.\n  \n  Argumentumok:\n  - $delivered: A sikeresen kézbesített csomagok száma (0 <= $delivered <= 100).\n  - $failed: A sikertelen kézbesítések száma (0 <= $failed <= 100).\n  \n  Visszatér:\n  - A Deliv-e-droid összes bevétele, ami negatív is lehet, ha a veszteségek meghaladják a nyereségeket.\n  \n  Példák:\n  - calculateDroidEarnings(5, 2) visszatér 730.\n  - calculateDroidEarnings(0, 10) visszatér -100."
    },
    "instruction_bertscore": {
      "sq": "0.9736939882268825",
      "hy": "0.9672895488511746",
      "bn": "0.9799429000142401",
      "bg": "0.9961966254639439",
      "zh": "0.9810290109377389",
      "fr": "0.9924441003054328",
      "de": "0.9792882142783491",
      "ha": "0.9803663799866065",
      "hi": "0.972728843205434",
      "hu": "0.9979096138699889"
    },
    "level": "easy",
    "test": "function main(){\n    assert(calculateDroidEarnings(5, 2) === 730, 'Test case 1 failed');\n    assert(calculateDroidEarnings(0, 10) === -100, 'Test case 2 failed');\n    assert(calculateDroidEarnings(10, 0) === 1000, 'Test case 3 failed');\n    assert(calculateDroidEarnings(3, 3) === 120, 'Test case 4 failed');\n    assert(calculateDroidEarnings(0, 0) === 0, 'Test case 5 failed');\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateDroidEarnings",
    "signature": "function calculateDroidEarnings(int $delivered, int $failed): int",
    "docstring": {
      "en": "Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Arguments:\n  - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n  - $failed: The number of failed deliveries (0 <= $failed <= 100).\n  \n  Returns:\n  - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n  \n  Examples:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.",
      "sq": "Llogarit fitimet totale të Deliv-e-droid bazuar në numrin e dërgesave të suksesshme dhe të dështuara.\nDeliv-e-droid fiton 50 njësi parash për çdo dërgesë të suksesshme dhe humbet 10 njësi për çdo dërgesë të dështuar.\nPër më tepër, nëse numri i dërgesave të suksesshme është më i madh se ai i dështuar, Deliv-e-droid merr një bonus prej 500 njësish.\n\nArgumentet:\n- $delivered: Numri i pakove të dorëzuara me sukses (0 <= $delivered <= 100).\n- $failed: Numri i dërgesave të dështuara (0 <= $failed <= 100).\n\nKthen:\n- Fitimet totale të Deliv-e-droid, të cilat mund të jenë negative nëse humbjet tejkalojnë fitimet.\n\nShembuj:\n- calculateDroidEarnings(5, 2) kthen 730.\n- calculateDroidEarnings(0, 10) kthen -100.",
      "hy": "Հաշվում է Deliv-e-droid-ի ընդհանուր եկամուտը՝ հիմնվելով հաջողությամբ առաքված և ձախողված առաքումների քանակի վրա։  \nDeliv-e-droid-ը վաստակում է 50 միավոր գումար յուրաքանչյուր հաջողված առաքման համար և կորցնում է 10 միավոր յուրաքանչյուր ձախողված առաքման համար։  \nԲացի այդ, եթե հաջողված առաքումների քանակը գերազանցում է ձախողվածներին, Deliv-e-droid-ը ստանում է 500 միավոր բոնուս։  \n  \nԱրձանագրություններ:  \n- $delivered: Հաջողությամբ առաքված փաթեթների քանակը (0 <= $delivered <= 100):  \n- $failed: Ձախողված առաքումների քանակը (0 <= $failed <= 100):  \n  \nՎերադարձնում է:  \n- Deliv-e-droid-ի ընդհանուր եկամուտը, որը կարող է լինել բացասական, եթե կորուստները գերազանցում են շահույթները։  \n  \nՕրինակներ:  \n- calculateDroidEarnings(5, 2) վերադարձնում է 730։  \n- calculateDroidEarnings(0, 10) վերադարձնում է -100։",
      "bn": "Deliv-e-droid এর মোট আয় গণনা করে সফলভাবে বিতরণ করা এবং ব্যর্থ বিতরণগুলির সংখ্যার উপর ভিত্তি করে।\nDeliv-e-droid প্রতিটি সফল বিতরণের জন্য ৫০ ইউনিট অর্থ উপার্জন করে এবং প্রতিটি ব্যর্থ বিতরণের জন্য ১০ ইউনিট হারায়।\nঅতিরিক্তভাবে, যদি সফল বিতরণের সংখ্যা ব্যর্থগুলির চেয়ে বেশি হয়, তবে Deliv-e-droid ৫০০ ইউনিট বোনাস পায়।\n\nArguments:\n- $delivered: সফলভাবে বিতরণ করা প্যাকেজের সংখ্যা (0 <= $delivered <= 100)।\n- $failed: ব্যর্থ বিতরণের সংখ্যা (0 <= $failed <= 100)।\n\nReturns:\n- Deliv-e-droid এর মোট আয়, যা নেতিবাচক হতে পারে যদি ক্ষতি লাভের চেয়ে বেশি হয়।\n\nExamples:\n- calculateDroidEarnings(5, 2) returns 730।\n- calculateDroidEarnings(0, 10) returns -100।",
      "bg": "Изчислява общите приходи на Deliv-e-droid въз основа на броя на успешно доставените и неуспешно доставените пратки. Deliv-e-droid печели 50 единици пари за всяка успешна доставка и губи 10 единици за всяка неуспешна доставка. Освен това, ако броят на успешните доставки е по-голям от броя на неуспешните, Deliv-e-droid получава бонус от 500 единици.\n\nАргументи:\n- $delivered: Броят на успешно доставените пакети (0 <= $delivered <= 100).\n- $failed: Броят на неуспешните доставки (0 <= $failed <= 100).\n\nВръща:\n- Общите приходи на Deliv-e-droid, които могат да бъдат отрицателни, ако загубите превишават печалбите.\n\nПримери:\n- calculateDroidEarnings(5, 2) връща 730.\n- calculateDroidEarnings(0, 10) връща -100.",
      "zh": "计算 Deliv-e-droid 的总收入，基于成功交付和失败交付的数量。\nDeliv-e-droid 每成功交付一个包裹赚取 50 个单位的货币，每失败交付一个包裹损失 10 个单位的货币。\n另外，如果成功交付的数量大于失败交付的数量，Deliv-e-droid 将获得 500 个单位的奖金。\n\n参数:\n- $delivered: 成功交付的包裹数量 (0 <= $delivered <= 100)。\n- $failed: 失败交付的数量 (0 <= $failed <= 100)。\n\n返回:\n- Deliv-e-droid 的总收入，如果损失超过收益，可能为负值。\n\n示例:\n- calculateDroidEarnings(5, 2) 返回 730。\n- calculateDroidEarnings(0, 10) 返回 -100。",
      "fr": "Calcule les gains totaux de Deliv-e-droid en fonction du nombre de livraisons réussies et échouées.\n  Deliv-e-droid gagne 50 unités d'argent pour chaque livraison réussie et perd 10 unités pour chaque livraison échouée.\n  De plus, si le nombre de livraisons réussies est supérieur au nombre de livraisons échouées, Deliv-e-droid reçoit un bonus de 500 unités.\n  \n  Arguments:\n  - $delivered: Le nombre de colis livrés avec succès (0 <= $delivered <= 100).\n  - $failed: Le nombre de livraisons échouées (0 <= $failed <= 100).\n  \n  Retourne:\n  - Les gains totaux de Deliv-e-droid, qui peuvent être négatifs si les pertes dépassent les gains.\n  \n  Exemples:\n  - calculateDroidEarnings(5, 2) retourne 730.\n  - calculateDroidEarnings(0, 10) retourne -100.",
      "de": "Berechnet die Gesamteinnahmen von Deliv-e-droid basierend auf der Anzahl der erfolgreich zugestellten und fehlgeschlagenen Lieferungen.\nDeliv-e-droid verdient 50 Geldeinheiten für jede erfolgreiche Lieferung und verliert 10 Einheiten für jede fehlgeschlagene Lieferung.\nZusätzlich erhält Deliv-e-droid einen Bonus von 500 Einheiten, wenn die Anzahl der erfolgreichen Lieferungen größer ist als die der fehlgeschlagenen.\n\nArgumente:\n- $delivered: Die Anzahl der erfolgreich zugestellten Pakete (0 <= $delivered <= 100).\n- $failed: Die Anzahl der fehlgeschlagenen Lieferungen (0 <= $failed <= 100).\n\nRückgabewerte:\n- Die Gesamteinnahmen von Deliv-e-droid, die negativ sein können, wenn die Verluste die Gewinne übersteigen.\n\nBeispiele:\n- calculateDroidEarnings(5, 2) gibt 730 zurück.\n- calculateDroidEarnings(0, 10) gibt -100 zurück.",
      "ha": "Lissafin jimillar kudin da Deliv-e-droid ya samu bisa ga yawan isar da sako da aka yi nasara da kuma wadanda suka kasa.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery. \n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Huɗɗa:\n  - $delivered: Yawan fakitoci da aka kai nasara (0 <= $delivered <= 100).\n  - $failed: Yawan isarwa da suka kasa (0 <= $failed <= 100).\n  \n  Dawowa:\n  - Jimillar kudin da Deliv-e-droid ya samu, wanda zai iya zama mara kyau idan asarar ta fi ribar yawa.\n  \n  Misalai:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.",
      "hi": "Deliv-e-droid की कुल कमाई की गणना करता है जो सफलतापूर्वक वितरित और असफल डिलीवरी की संख्या पर आधारित है। \n  Deliv-e-droid प्रत्येक सफल डिलीवरी के लिए 50 यूनिट पैसा कमाता है और प्रत्येक असफल डिलीवरी के लिए 10 यूनिट खोता है।\n  इसके अतिरिक्त, यदि सफल डिलीवरी की संख्या असफल डिलीवरी की संख्या से अधिक है, तो Deliv-e-droid को 500 यूनिट का बोनस मिलता है।\n\n  तर्क:\n  - $delivered: सफलतापूर्वक वितरित पैकेजों की संख्या (0 <= $delivered <= 100)।\n  - $failed: असफल डिलीवरी की संख्या (0 <= $failed <= 100)।\n\n  वापसी:\n  - Deliv-e-droid की कुल कमाई, जो नकारात्मक हो सकती है यदि नुकसान लाभ से अधिक हो।\n\n  उदाहरण:\n  - calculateDroidEarnings(5, 2) 730 लौटाता है।\n  - calculateDroidEarnings(0, 10) -100 लौटाता है।",
      "hu": "Kiszámítja a Deliv-e-droid teljes keresetét a sikeresen kézbesített és a sikertelen kézbesítések száma alapján.  \nA Deliv-e-droid 50 egységnyi pénzt keres minden sikeres kézbesítésért, és 10 egységet veszít minden sikertelen kézbesítésért.  \nEzenkívül, ha a sikeres kézbesítések száma nagyobb, mint a sikerteleneké, a Deliv-e-droid 500 egységnyi bónuszt kap.  \n  \nArgumentumok:  \n- $delivered: A sikeresen kézbesített csomagok száma (0 <= $delivered <= 100).  \n- $failed: A sikertelen kézbesítések száma (0 <= $failed <= 100).  \n  \nVisszatérési érték:  \n- A Deliv-e-droid teljes keresete, amely negatív is lehet, ha a veszteségek meghaladják a nyereséget.  \n  \nPéldák:  \n- calculateDroidEarnings(5, 2) visszaadja 730.  \n- calculateDroidEarnings(0, 10) visszaadja -100."
    },
    "docstring_bertscore": {
      "sq": "0.9706779845212488",
      "hy": "0.9698137437333659",
      "bn": "0.9910078040201695",
      "bg": "0.989279521074785",
      "zh": "0.9610015068787532",
      "fr": "0.992194620546853",
      "de": "0.9752578052167702",
      "ha": "0.9817003816256368",
      "hi": "0.9880444373655101",
      "hu": "0.9781158977694812"
    }
  },
  {
    "task_id": "PHP/49",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n * Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n * one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n *\n * Note: The missing ID will not be at the start or end of the overall ID range.\n *\n * Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n * Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n *\n * Example:\n * Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Output: [7, 9] // 7 is missing, and 9 is duplicated.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "sq": "<?php\n\n\n/**\n * Identifikon ID-të që mungojnë (të prishura) dhe ID-të e dyfishta nga një grup i dhënë ID-sh.\n * Çdo grup ID-sh përfaqëson një koleksion të ID-ve të biletave që supozohet të jenë të njëpasnjëshme por përmbajnë një gabim:\n * një ID mungon dhe një ID është e dyfishtë. Kjo funksion llogarit dhe kthen ID-të që mungojnë dhe ato të dyfishta.\n *\n * Shënim: ID-ja që mungon nuk do të jetë në fillim ose në fund të intervalit të përgjithshëm të ID-ve.\n *\n * Hyrja: Një varg me vargje, ku çdo nën-varg përmban numra të plotë që përfaqësojnë ID-të e biletave.\n * Dalja: Një varg me dy numra të plotë, i pari është ID-ja që mungon (e prishur) dhe i dyti është ID-ja e dyfishtë.\n *\n * Shembull:\n * Hyrja: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Dalja: [7, 9] // 7 mungon dhe 9 është i dyfishtë.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hy": "<?php\n\n\n/**\n * Հայտնաբերում է բացակայող (կոտրված) և կրկնօրինակված ID-ները տրված ID խմբերի հավաքածուից:\n * Յուրաքանչյուր ID խումբ ներկայացնում է տոմսերի ID-ների հավաքածու, որոնք պետք է լինեն հաջորդական, բայց պարունակում են սխալ.\n * մեկ ID բացակայում է, և մեկ ID կրկնօրինակված է: Այս ֆունկցիան հաշվարկում և վերադարձնում է բացակայող և կրկնօրինակված ID-ները:\n *\n * Նշում: Բացակայող ID-ն չի լինի ընդհանուր ID միջակայքի սկզբում կամ վերջում:\n *\n * Մուտք: Զանգվածների զանգված, որտեղ յուրաքանչյուր ենթազանգված պարունակում է ամբողջ թվեր, որոնք ներկայացնում են տոմսերի ID-ները:\n * Ելք: Զանգված երկու ամբողջ թվերով, առաջինը՝ բացակայող (կոտրված) ID-ն, իսկ երկրորդը՝ կրկնօրինակված ID-ն:\n *\n * Օրինակ:\n * Մուտք: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Ելք: [7, 9] // 7-ը բացակայում է, իսկ 9-ը կրկնօրինակված է:\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "bn": "<?php\n\n\n/**\n * প্রদত্ত ID গ্রুপগুলির একটি সেট থেকে অনুপস্থিত (ভাঙ্গা) এবং সদৃশ ID সনাক্ত করে।\n * প্রতিটি ID গ্রুপ টিকেট ID গুলির একটি সংগ্রহকে উপস্থাপন করে যা ধারাবাহিক হওয়ার কথা কিন্তু একটি ভুল রয়েছে:\n * একটি ID অনুপস্থিত, এবং একটি ID সদৃশ। এই ফাংশনটি অনুপস্থিত এবং সদৃশ ID গুলি গণনা করে এবং ফেরত দেয়।\n *\n * নোট: অনুপস্থিত ID পুরো ID পরিসরের শুরু বা শেষে থাকবে না।\n *\n * ইনপুট: একটি অ্যারের অ্যারে, যেখানে প্রতিটি সাব-অ্যারে পূর্ণসংখ্যা রয়েছে যা টিকেট ID গুলিকে উপস্থাপন করে।\n * আউটপুট: দুটি পূর্ণসংখ্যা সহ একটি অ্যারে, প্রথমটি অনুপস্থিত (ভাঙ্গা) ID এবং দ্বিতীয়টি সদৃশ ID।\n *\n * উদাহরণ:\n * ইনপুট: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * আউটপুট: [7, 9] // 7 অনুপস্থিত, এবং 9 সদৃশ।\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "bg": "<?php\n\n\n/**\n * Идентифицира липсващите (счупени) и дублирани ID-та от даден набор от групи ID-та.\n * Всяка група ID-та представлява колекция от ID-та на билети, които трябва да са последователни, но съдържат грешка:\n * едно ID липсва, а едно ID е дублирано. Тази функция изчислява и връща липсващите и дублираните ID-та.\n *\n * Забележка: Липсващото ID няма да бъде в началото или края на общия диапазон от ID-та.\n *\n * Вход: Масив от масиви, където всеки подмасив съдържа цели числа, представляващи ID-та на билети.\n * Изход: Масив с две цели числа, първото е липсващото (счупено) ID, а второто е дублираното ID.\n *\n * Пример:\n * Вход: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Изход: [7, 9] // 7 липсва, а 9 е дублирано.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "zh": "<?php\n\n\n/**\n * 识别给定ID组中的缺失（损坏）和重复ID。\n * 每个ID组代表一组本应连续但存在错误的票据ID：\n * 一个ID缺失，一个ID重复。此函数计算并返回缺失和重复的ID。\n *\n * 注意：缺失的ID不会出现在整个ID范围的开始或结束。\n *\n * 输入：一个数组的数组，其中每个子数组包含表示票据ID的整数。\n * 输出：一个包含两个整数的数组，第一个是缺失（损坏）的ID，第二个是重复的ID。\n *\n * 示例：\n * 输入: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * 输出: [7, 9] // 7是缺失的，9是重复的。\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "fr": "<?php\n\n\n/**\n * Identifie les ID manquants (cassés) et en double à partir d'un ensemble donné de groupes d'ID.\n * Chaque groupe d'ID représente une collection d'ID de tickets qui sont censés être consécutifs mais contiennent une erreur :\n * un ID est manquant et un ID est dupliqué. Cette fonction calcule et retourne les ID manquants et dupliqués.\n *\n * Remarque : L'ID manquant ne sera pas au début ou à la fin de la plage globale d'ID.\n *\n * Entrée : Un tableau de tableaux, où chaque sous-tableau contient des entiers représentant des ID de tickets.\n * Sortie : Un tableau avec deux entiers, le premier étant l'ID manquant (cassé) et le second l'ID dupliqué.\n *\n * Exemple :\n * Entrée : [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Sortie : [7, 9] // 7 est manquant, et 9 est dupliqué.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "de": "<?php\n\n\n/**\n * Identifiziert die fehlenden (defekten) und doppelten IDs aus einer gegebenen Menge von ID-Gruppen.\n * Jede ID-Gruppe stellt eine Sammlung von Ticket-IDs dar, die aufeinanderfolgend sein sollen, aber einen Fehler enthalten:\n * Eine ID fehlt, und eine ID ist doppelt vorhanden. Diese Funktion berechnet und gibt die fehlenden und doppelten IDs zurück.\n *\n * Hinweis: Die fehlende ID wird nicht am Anfang oder Ende des gesamten ID-Bereichs sein.\n *\n * Eingabe: Ein Array von Arrays, wobei jedes Unter-Array Ganzzahlen enthält, die Ticket-IDs darstellen.\n * Ausgabe: Ein Array mit zwei Ganzzahlen, wobei die erste die fehlende (defekte) ID und die zweite die doppelte ID ist.\n *\n * Beispiel:\n * Eingabe: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Ausgabe: [7, 9] // 7 fehlt, und 9 ist doppelt vorhanden.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "ha": "<?php\n\n\n/**\n * Gane IDs da suka ɓace (lalace) da kuma waɗanda aka maimaita daga wani saitin rukunin ID.\n * Kowace rukuni na ID tana wakiltar tarin IDs na tikiti waɗanda ya kamata su kasance a jere amma suna ɗauke da kuskure:\n * ana rasa ID ɗaya, kuma ana maimaita ID ɗaya. Wannan aikin yana ƙididdige kuma yana dawo da IDs da suka ɓace da waɗanda aka maimaita.\n *\n * Lura: ID ɗin da ya ɓace ba zai kasance a farkon ko ƙarshen kewayon ID gaba ɗaya ba.\n *\n * Shigarwa: Jeri na jerin, inda kowace ƙaramin jeri ke ɗauke da lambobi masu wakiltar IDs na tikiti.\n * Fitarwa: Jeri tare da lambobi biyu, na farko shine ID ɗin da ya ɓace (lalace) kuma na biyu shine ID ɗin da aka maimaita.\n *\n * Misali:\n * Shigarwa: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Fitarwa: [7, 9] // 7 ya ɓace, kuma 9 an maimaita.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hi": "<?php\n\n\n/**\n * दिए गए ID समूहों के सेट से गायब (टूटी हुई) और डुप्लिकेट ID की पहचान करता है।\n * प्रत्येक ID समूह टिकट ID का एक संग्रह दर्शाता है जो लगातार होने चाहिए लेकिन उनमें एक गलती होती है:\n * एक ID गायब है, और एक ID डुप्लिकेट है। यह फ़ंक्शन गायब और डुप्लिकेट ID की गणना करता है और लौटाता है।\n *\n * नोट: गायब ID कुल ID रेंज की शुरुआत या अंत में नहीं होगी।\n *\n * इनपुट: एक सरणी की सरणी, जहां प्रत्येक उप-सरणी में टिकट ID का प्रतिनिधित्व करने वाले पूर्णांक होते हैं।\n * आउटपुट: दो पूर्णांकों के साथ एक सरणी, पहला गायब (टूटी हुई) ID और दूसरा डुप्लिकेट ID।\n *\n * उदाहरण:\n * इनपुट: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * आउटपुट: [7, 9] // 7 गायब है, और 9 डुप्लिकेट है।\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hu": "<?php\n\n\n/**\n * Azonosítja a hiányzó (hibás) és duplikált azonosítókat egy adott azonosítócsoportból.\n * Minden azonosítócsoport egy jegyazonosítók gyűjteményét képviseli, amelyeknek egymást követőnek kellene lenniük, de tartalmaznak egy hibát:\n * egy azonosító hiányzik, és egy azonosító duplikált. Ez a függvény kiszámítja és visszaadja a hiányzó és duplikált azonosítókat.\n *\n * Megjegyzés: A hiányzó azonosító nem lesz az összes azonosító tartományának elején vagy végén.\n *\n * Bemenet: Tömbök tömbje, ahol minden al-tömb egész számokat tartalmaz, amelyek jegyazonosítókat képviselnek.\n * Kimenet: Egy tömb két egész számmal, az első a hiányzó (hibás) azonosító, a második a duplikált azonosító.\n *\n * Példa:\n * Bemenet: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Kimenet: [7, 9] // 7 hiányzik, és 9 duplikált.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array "
    },
    "prompt_bertscore": {
      "sq": "0.9762847242867205",
      "hy": "0.980642277585864",
      "bn": "0.9832882328916297",
      "bg": "0.9775196093656144",
      "zh": "0.9548956089657407",
      "fr": "0.9888574315150859",
      "de": "0.970303566252998",
      "ha": "0.9483743749259843",
      "hi": "0.9826361293506921",
      "hu": "0.947171667968818"
    },
    "canonical_solution": "{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}",
    "instruction": {
      "en": "Write a PHP function `function findMissingAndDuplicateIDs(array $idGroups): array` to solve the following problem:\nIdentifies the missing (broken) and duplicate IDs from a given set of ID groups.\n  Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n  one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n \n  Note: The missing ID will not be at the start or end of the overall ID range.\n \n  Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n  Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n \n  Example:\n  Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Output: [7, 9] // 7 is missing, and 9 is duplicated.",
      "sq": "Shkruani një funksion PHP `function findMissingAndDuplicateIDs(array $idGroups): array` për të zgjidhur problemin e mëposhtëm:\nIdentifikon ID-të që mungojnë (të thyera) dhe ID-të e dyfishta nga një grup i dhënë i grupeve të ID-ve.\n  Çdo grup ID përfaqëson një koleksion të ID-ve të biletave që supozohet të jenë në rend të njëpasnjëshëm, por përmban një gabim:\n  një ID mungon, dhe një ID është e dyfishtë. Ky funksion llogarit dhe kthen ID-të që mungojnë dhe ato të dyfishta.\n\n  Shënim: ID-ja që mungon nuk do të jetë në fillim ose në fund të intervalit të përgjithshëm të ID-ve.\n\n  Hyrja: Një varg i vargjeve, ku secili nën-varg përmban numra të plotë që përfaqësojnë ID-të e biletave.\n  Dalja: Një varg me dy numra të plotë, i pari është ID-ja që mungon (e thyer) dhe i dyti është ID-ja e dyfishtë.\n\n  Shembull:\n  Hyrja: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Dalja: [7, 9] // 7 mungon, dhe 9 është e dyfishtë.",
      "hy": "Գրեք PHP ֆունկցիա `function findMissingAndDuplicateIDs(array $idGroups): array`՝ լուծելու հետևյալ խնդիրը:\nՀայտնաբերում է բացակայող (կոտրված) և կրկնվող ID-ները տրված ID խմբերի հավաքածուից:\n  Յուրաքանչյուր ID խումբ ներկայացնում է տոմսերի ID-ների հավաքածու, որոնք պետք է լինեն հաջորդական, բայց պարունակում են սխալ.\n  մեկ ID բացակայում է, և մեկ ID կրկնվում է: Այս ֆունկցիան հաշվարկում և վերադարձնում է բացակայող և կրկնվող ID-ները:\n \n  Նշում: Բացակայող ID-ն չի լինի ամբողջ ID տիրույթի սկզբում կամ վերջում:\n \n  Մուտք: Զանգվածների զանգված, որտեղ յուրաքանչյուր ենթազանգված պարունակում է ամբողջ թվեր, որոնք ներկայացնում են տոմսերի ID-ներ:\n  Ելք: Զանգված երկու ամբողջ թվերով, առաջինը՝ բացակայող (կոտրված) ID-ն, իսկ երկրորդը՝ կրկնվող ID-ն:\n \n  Օրինակ:\n  Մուտք: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ելք: [7, 9] // 7-ը բացակայում է, և 9-ը կրկնվում է.",
      "bn": "একটি PHP ফাংশন লিখুন `function findMissingAndDuplicateIDs(array $idGroups): array` নিম্নলিখিত সমস্যার সমাধানের জন্য:\nপ্রদত্ত ID গ্রুপের একটি সেট থেকে অনুপস্থিত (ভাঙা) এবং সদৃশ ID সনাক্ত করে।\n  প্রতিটি ID গ্রুপ একটি টিকেট ID এর সংগ্রহ উপস্থাপন করে যা ধারাবাহিক হওয়ার কথা কিন্তু এতে একটি ভুল রয়েছে:\n  একটি ID অনুপস্থিত এবং একটি ID সদৃশ। এই ফাংশনটি অনুপস্থিত এবং সদৃশ ID গুলি গণনা করে এবং ফেরত দেয়।\n \n  নোট: অনুপস্থিত ID পুরো ID পরিসরের শুরু বা শেষে থাকবে না।\n \n  ইনপুট: একটি অ্যারের অ্যারে, যেখানে প্রতিটি উপ-অ্যারে পূর্ণসংখ্যা রয়েছে যা টিকেট ID উপস্থাপন করে।\n  আউটপুট: দুটি পূর্ণসংখ্যা সহ একটি অ্যারে, প্রথমটি অনুপস্থিত (ভাঙা) ID এবং দ্বিতীয়টি সদৃশ ID।\n \n  উদাহরণ:\n  ইনপুট: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  আউটপুট: [7, 9] // 7 অনুপস্থিত, এবং 9 সদৃশ।",
      "bg": "Напишете PHP функция `function findMissingAndDuplicateIDs(array $idGroups): array`, за да решите следния проблем:\nИдентифицира липсващите (счупени) и дублирани ID от даден набор от групи ID.\n  Всяка група ID представлява колекция от ID на билети, които трябва да бъдат последователни, но съдържат грешка:\n  едно ID липсва, а едно ID е дублирано. Тази функция изчислява и връща липсващите и дублирани ID.\n \n  Забележка: Липсващото ID няма да бъде в началото или края на общия диапазон от ID.\n \n  Вход: Масив от масиви, където всеки подмасив съдържа цели числа, представляващи ID на билети.\n  Изход: Масив с две цели числа, първото от които е липсващото (счупено) ID, а второто е дублираното ID.\n \n  Пример:\n  Вход: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Изход: [7, 9] // 7 липсва, а 9 е дублирано.",
      "zh": "编写一个 PHP 函数 `function findMissingAndDuplicateIDs(array $idGroups): array` 来解决以下问题：\n识别给定 ID 组中的缺失（损坏）和重复 ID。\n每个 ID 组代表一组票据 ID，这些 ID 应该是连续的，但包含一个错误：\n一个 ID 缺失，一个 ID 重复。此函数计算并返回缺失和重复的 ID。\n\n注意：缺失的 ID 不会出现在整个 ID 范围的开始或结束。\n\n输入：一个数组的数组，其中每个子数组包含表示票据 ID 的整数。\n输出：一个包含两个整数的数组，第一个是缺失（损坏）的 ID，第二个是重复的 ID。\n\n示例：\n输入：[[5, 6, 8, 11, 9], [10, 12, 9]]\n输出：[7, 9] // 7 是缺失的，9 是重复的。",
      "fr": "Écrire une fonction PHP `function findMissingAndDuplicateIDs(array $idGroups): array` pour résoudre le problème suivant :\nIdentifie les IDs manquants (cassés) et dupliqués à partir d'un ensemble donné de groupes d'IDs.\n  Chaque groupe d'IDs représente une collection d'IDs de tickets qui sont censés être consécutifs mais contiennent une erreur :\n  un ID est manquant, et un ID est dupliqué. Cette fonction calcule et renvoie les IDs manquants et dupliqués.\n \n  Remarque : L'ID manquant ne sera ni au début ni à la fin de la plage globale d'IDs.\n \n  Entrée : Un tableau de tableaux, où chaque sous-tableau contient des entiers représentant des IDs de tickets.\n  Sortie : Un tableau avec deux entiers, le premier étant l'ID manquant (cassé) et le second l'ID dupliqué.\n \n  Exemple :\n  Entrée : [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Sortie : [7, 9] // 7 est manquant, et 9 est dupliqué.",
      "de": "Schreiben Sie eine PHP-Funktion `function findMissingAndDuplicateIDs(array $idGroups): array`, um das folgende Problem zu lösen:\nIdentifiziert die fehlenden (defekten) und doppelten IDs aus einer gegebenen Menge von ID-Gruppen.\n  Jede ID-Gruppe stellt eine Sammlung von Ticket-IDs dar, die aufeinanderfolgend sein sollen, aber einen Fehler enthalten:\n  eine ID fehlt, und eine ID ist doppelt vorhanden. Diese Funktion berechnet und gibt die fehlenden und doppelten IDs zurück.\n \n  Hinweis: Die fehlende ID wird nicht am Anfang oder Ende des gesamten ID-Bereichs sein.\n \n  Eingabe: Ein Array von Arrays, wobei jedes Unter-Array Ganzzahlen enthält, die Ticket-IDs darstellen.\n  Ausgabe: Ein Array mit zwei Ganzzahlen, wobei die erste die fehlende (defekte) ID und die zweite die doppelte ID ist.\n \n  Beispiel:\n  Eingabe: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ausgabe: [7, 9] // 7 fehlt, und 9 ist doppelt vorhanden.",
      "ha": "Rubuta aikin PHP `function findMissingAndDuplicateIDs(array $idGroups): array` don warware matsalar mai zuwa:\nGano ID da suka ɓace (ɓatattu) da kuma ID masu maimaituwa daga wani saitin rukunan ID da aka bayar.\n  Kowanne rukuni na ID yana wakiltar tarin ID na tikiti waɗanda ya kamata su kasance masu jere amma suna ɗauke da kuskure:\n  ana rasa ɗaya daga cikin ID, kuma ana maimaita ɗaya daga cikin ID. Wannan aikin yana ƙididdige kuma yana dawowa da ID da suka ɓace da kuma ID masu maimaituwa.\n\n  Lura: ID da ya ɓace ba zai kasance a farkon ko ƙarshen jerin ID gaba ɗaya ba.\n\n  Shigarwa: Wani tsari na tsare-tsare, inda kowanne ƙaramin tsari ya ƙunshi lambobi da ke wakiltar ID na tikiti.\n  Fitarwa: Wani tsari tare da lambobi guda biyu, na farko shine ID da ya ɓace (ɓatacce) kuma na biyu shine ID mai maimaituwa.\n\n  Misali:\n  Shigarwa: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Fitarwa: [7, 9] // 7 ya ɓace, kuma 9 yana maimaituwa.",
      "hi": "PHP फ़ंक्शन `function findMissingAndDuplicateIDs(array $idGroups): array` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\nदिए गए ID समूहों से गायब (टूटी हुई) और डुप्लिकेट ID की पहचान करता है।\n  प्रत्येक ID समूह टिकट ID का एक संग्रह दर्शाता है जो लगातार होना चाहिए लेकिन इसमें एक गलती होती है:\n  एक ID गायब है, और एक ID डुप्लिकेट है। यह फ़ंक्शन गायब और डुप्लिकेट ID की गणना करता है और उन्हें लौटाता है।\n\n  नोट: गायब ID समग्र ID रेंज की शुरुआत या अंत में नहीं होगी।\n\n  इनपुट: उप-ऐरे वाले ऐरे का एक ऐरे, जहाँ प्रत्येक उप-ऐरे में टिकट ID का प्रतिनिधित्व करने वाले पूर्णांक होते हैं।\n  आउटपुट: दो पूर्णांकों के साथ एक ऐरे, पहला गायब (टूटी हुई) ID और दूसरा डुप्लिकेट ID।\n\n  उदाहरण:\n  इनपुट: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  आउटपुट: [7, 9] // 7 गायब है, और 9 डुप्लिकेट है।",
      "hu": "Írj egy PHP függvényt `function findMissingAndDuplicateIDs(array $idGroups): array` a következő probléma megoldására:\nAzonosítja a hiányzó (hibás) és duplikált azonosítókat egy adott azonosítócsoportból.\n  Minden azonosítócsoport olyan jegyazonosítók gyűjteményét képviseli, amelyeknek egymást követőnek kellene lenniük, de hibát tartalmaznak:\n  egy azonosító hiányzik, és egy azonosító duplikált. Ez a függvény kiszámítja és visszaadja a hiányzó és duplikált azonosítókat.\n \n  Megjegyzés: A hiányzó azonosító nem lesz az összes azonosító tartományának elején vagy végén.\n \n  Bemenet: Tömbök tömbje, ahol minden al-tömb egész számokat tartalmaz, amelyek jegyazonosítókat képviselnek.\n  Kimenet: Egy tömb két egész számmal, az első a hiányzó (hibás) azonosító, a második a duplikált azonosító.\n \n  Példa:\n  Bemenet: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Kimenet: [7, 9] // 7 hiányzik, és 9 duplikált."
    },
    "instruction_bertscore": {
      "sq": "0.9796223105792498",
      "hy": "0.9776471300702388",
      "bn": "0.9772472871132156",
      "bg": "0.9772939652527588",
      "zh": "0.9590950524815803",
      "fr": "0.9839043843336",
      "de": "0.9710168479512943",
      "ha": "0.9507440353717305",
      "hi": "0.9613856580356747",
      "hu": "0.9652539847063291"
    },
    "level": "hard",
    "test": "function main(){\n\n    // Test case based on the example provided\n    assert(findMissingAndDuplicateIDs([[5, 6, 8, 11, 9], [10, 12, 9]]) === [7, 9]);\n    \n    // Additional test cases\n    assert(findMissingAndDuplicateIDs([[1, 2, 4], [3, 5, 5, 7]]) === [6, 5]);\n    assert(findMissingAndDuplicateIDs([[10, 11, 12, 14, 17], [13, 15, 12]]) === [16, 12]);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMissingAndDuplicateIDs",
    "signature": "function findMissingAndDuplicateIDs(array $idGroups): array",
    "docstring": {
      "en": "Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n  Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n  one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n \n  Note: The missing ID will not be at the start or end of the overall ID range.\n \n  Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n  Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n \n  Example:\n  Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Output: [7, 9] // 7 is missing, and 9 is duplicated.",
      "sq": "Identifikon ID-të e humbura (të thyera) dhe të dyfishuara nga një grup i dhënë grupesh ID-sh.\n  Çdo grup ID përfaqëson një koleksion të ID-ve të biletave që supozohet të jenë të njëpasnjëshme por përmbajnë një gabim:\n  një ID mungon dhe një ID është e dyfishuar. Kjo funksion llogarit dhe kthen ID-të e humbura dhe të dyfishuara.\n \n  Shënim: ID-ja që mungon nuk do të jetë në fillim ose në fund të intervalit të përgjithshëm të ID-ve.\n \n  Hyrja: Një varg me vargje, ku çdo nën-varg përmban numra të plotë që përfaqësojnë ID-të e biletave.\n  Dalja: Një varg me dy numra të plotë, i pari është ID-ja që mungon (e thyer) dhe i dyti është ID-ja e dyfishuar.\n \n  Shembull:\n  Hyrja: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Dalja: [7, 9] // 7 mungon, dhe 9 është e dyfishuar.",
      "hy": "Հայտնաբերում է բացակայող (կոտրված) և կրկնօրինակված ID-ները տրված ID խմբերի հավաքածուից:\n  Յուրաքանչյուր ID խումբ ներկայացնում է տոմսերի ID-ների հավաքածու, որոնք պետք է լինեն հաջորդական, բայց պարունակում են սխալ՝\n  մեկ ID բացակայում է, և մեկ ID կրկնօրինակված է: Այս ֆունկցիան հաշվարկում և վերադարձնում է բացակայող և կրկնօրինակված ID-ները:\n \n  Նշում: Բացակայող ID-ն չի լինի ընդհանուր ID միջակայքի սկզբում կամ վերջում:\n \n  Մուտք: Զանգվածների զանգված, որտեղ յուրաքանչյուր ենթազանգված պարունակում է ամբողջ թվեր, որոնք ներկայացնում են տոմսերի ID-ներ:\n  Ելք: Զանգված երկու ամբողջ թվերով, առաջինը՝ բացակայող (կոտրված) ID-ն, և երկրորդը՝ կրկնօրինակված ID-ն:\n \n  Օրինակ:\n  Մուտք: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ելք: [7, 9] // 7-ը բացակայում է, իսկ 9-ը կրկնօրինակված է:",
      "bn": "নির্দিষ্ট ID গোষ্ঠীগুলির একটি সেট থেকে অনুপস্থিত (ভাঙা) এবং সদৃশ ID গুলি সনাক্ত করে। \nপ্রতিটি ID গোষ্ঠী টিকিট ID এর একটি সংগ্রহকে উপস্থাপন করে যা ধারাবাহিক হওয়ার কথা কিন্তু এতে একটি ভুল রয়েছে: \nএকটি ID অনুপস্থিত এবং একটি ID সদৃশ। এই ফাংশনটি অনুপস্থিত এবং সদৃশ ID গুলি গণনা এবং ফেরত দেয়।\n\nনোট: অনুপস্থিত ID সামগ্রিক ID পরিসরের শুরু বা শেষে থাকবে না।\n\nইনপুট: অ্যারেগুলির একটি অ্যারে, যেখানে প্রতিটি উপ-অ্যারে টিকিট ID গুলি উপস্থাপনকারী পূর্ণসংখ্যা রয়েছে।\nআউটপুট: দুটি পূর্ণসংখ্যার একটি অ্যারে, প্রথমটি অনুপস্থিত (ভাঙা) ID এবং দ্বিতীয়টি সদৃশ ID।\n\nউদাহরণ:\nইনপুট: [[5, 6, 8, 11, 9], [10, 12, 9]]\nআউটপুট: [7, 9] // 7 অনুপস্থিত, এবং 9 সদৃশ।",
      "bg": "Идентифицира липсващите (счупени) и дублирани ID от даден набор от групи ID.\n  Всяка група ID представлява колекция от ID на билети, които трябва да бъдат последователни, но съдържат грешка:\n  едно ID липсва, а едно ID е дублирано. Тази функция изчислява и връща липсващите и дублирани ID.\n\n  Забележка: Липсващото ID няма да бъде в началото или в края на общия диапазон на ID.\n\n  Вход: Масив от масиви, където всеки подмасив съдържа цели числа, представляващи ID на билети.\n  Изход: Масив с две цели числа, първото от които е липсващото (счупено) ID, а второто е дублираното ID.\n\n  Пример:\n  Вход: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Изход: [7, 9] // 7 липсва, а 9 е дублирано.",
      "zh": "识别给定ID组中的缺失（错误）和重复ID。  \n每个ID组表示一组票据ID，这些ID应该是连续的，但包含一个错误：一个ID缺失，一个ID重复。此函数计算并返回缺失和重复的ID。\n\n注意：缺失的ID不会出现在整个ID范围的开始或结束位置。\n\n输入：一个数组的数组，其中每个子数组包含表示票据ID的整数。  \n输出：一个包含两个整数的数组，第一个是缺失（错误）的ID，第二个是重复的ID。\n\n示例：  \n输入：[[5, 6, 8, 11, 9], [10, 12, 9]]  \n输出：[7, 9] // 7是缺失的，9是重复的。",
      "fr": "Identifie les IDs manquants (brisés) et en double à partir d'un ensemble donné de groupes d'IDs.\n  Chaque groupe d'IDs représente une collection d'IDs de tickets qui sont supposés être consécutifs mais contiennent une erreur :\n  un ID est manquant, et un ID est en double. Cette fonction calcule et retourne les IDs manquants et en double.\n \n  Remarque : L'ID manquant ne sera pas au début ou à la fin de la plage globale d'IDs.\n \n  Entrée : Un tableau de tableaux, où chaque sous-tableau contient des entiers représentant des IDs de tickets.\n  Sortie : Un tableau avec deux entiers, le premier étant l'ID manquant (brisé) et le second l'ID en double.\n \n  Exemple :\n  Entrée : [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Sortie : [7, 9] // 7 est manquant, et 9 est en double.",
      "de": "Identifiziert die fehlenden (gebrochenen) und doppelten IDs aus einer gegebenen Menge von ID-Gruppen.\n  Jede ID-Gruppe repräsentiert eine Sammlung von Ticket-IDs, die aufeinanderfolgend sein sollen, aber einen Fehler enthalten:\n  eine ID fehlt und eine ID ist doppelt vorhanden. Diese Funktion berechnet und gibt die fehlenden und doppelten IDs zurück.\n \n  Hinweis: Die fehlende ID wird nicht am Anfang oder Ende des gesamten ID-Bereichs sein.\n \n  Eingabe: Ein Array von Arrays, wobei jedes Unter-Array Ganzzahlen enthält, die Ticket-IDs darstellen.\n  Ausgabe: Ein Array mit zwei Ganzzahlen, wobei die erste die fehlende (gebrochene) ID und die zweite die doppelte ID ist.\n \n  Beispiel:\n  Eingabe: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ausgabe: [7, 9] // 7 fehlt, und 9 ist doppelt vorhanden.",
      "ha": "Gane ID da suka ɓace (ɓata) da kuma ID masu maimaitawa daga wani saitin rukuni na ID.\n  Kowanne rukuni na ID yana wakiltar tarin ID na tikiti waɗanda ya kamata su kasance masu jere amma suna ɗauke da kuskure:\n  ɗaya ID ya ɓace, kuma ɗaya ID ya maimaita. Wannan aikin yana ƙididdige kuma yana mayar da ID da suka ɓace da kuma waɗanda suka maimaita.\n\n  Lura: ID da ya ɓace ba zai kasance a farkon ko ƙarshen jerin ID gaba ɗaya ba.\n\n  Shigarwa: Jeri na jerin, inda kowanne ƙaramin jeri ya ƙunshi lambobi da ke wakiltar ID na tikiti.\n  Fitarwa: Jeri tare da lambobi biyu, na farko shine ID da ya ɓace (ɓata) kuma na biyu shine ID da ya maimaita.\n\n  Misali:\n  Shigarwa: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Fitarwa: [7, 9] // 7 ya ɓace, kuma 9 ya maimaita.",
      "hi": "गुम (टूटी हुई) और डुप्लिकेट आईडी की पहचान करता है जो दिए गए आईडी समूहों के सेट से हैं।\n  प्रत्येक आईडी समूह टिकट आईडी का एक संग्रह दर्शाता है जो लगातार होना चाहिए लेकिन इसमें एक गलती होती है:\n  एक आईडी गायब है, और एक आईडी डुप्लिकेट है। यह फ़ंक्शन गायब और डुप्लिकेट आईडी की गणना करता है और उन्हें लौटाता है।\n\n  नोट: गायब आईडी समग्र आईडी रेंज की शुरुआत या अंत में नहीं होगी।\n\n  इनपुट: एक सरणी की सरणी, जहाँ प्रत्येक उप-सरणी में पूर्णांक होते हैं जो टिकट आईडी का प्रतिनिधित्व करते हैं।\n  आउटपुट: दो पूर्णांकों के साथ एक सरणी, पहला गायब (टूटी हुई) आईडी और दूसरा डुप्लिकेट आईडी।\n\n  उदाहरण:\n  इनपुट: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  आउटपुट: [7, 9] // 7 गायब है, और 9 डुप्लिकेट है।",
      "hu": "Azonosítja a hiányzó (hibás) és duplikált azonosítókat egy adott azonosítócsoportból.  \n  Minden azonosítócsoport egy olyan jegyazonosító-gyűjteményt képvisel, amelynek folyamatosnak kellene lennie, de hibát tartalmaz:  \n  egy azonosító hiányzik, és egy azonosító duplikált. Ez a függvény kiszámítja és visszaadja a hiányzó és duplikált azonosítókat.\n \n  Megjegyzés: A hiányzó azonosító nem lesz az összesített azonosítótartomány elején vagy végén.\n \n  Bemenet: Tömbök tömbje, ahol minden al-tömb egész számokat tartalmaz, amelyek jegyazonosítókat képviselnek.\n  Kimenet: Egy tömb két egész számmal, az első a hiányzó (hibás) azonosító, a második a duplikált azonosító.\n \n  Példa:\n  Bemenet: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Kimenet: [7, 9] // 7 hiányzik, és 9 duplikált."
    },
    "docstring_bertscore": {
      "sq": "0.9868923811555077",
      "hy": "0.970520271998707",
      "bn": "0.969574791384981",
      "bg": "0.9712840058137863",
      "zh": "0.9471408802597576",
      "fr": "0.9864681066616172",
      "de": "0.9737297416954688",
      "ha": "0.9248029076085741",
      "hi": "0.9747304415551226",
      "hu": "0.9370041760244042"
    }
  },
  {
    "task_id": "PHP/50",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n *\n * This function takes a single string of exactly 8 characters as input.\n * It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n *\n * Input: A string of 8 characters.\n * Output: An array of three integers, where:\n * - The first integer is the count of digits in the string.\n * - The second integer is the count of lowercase letters in the string.\n * - The third integer is the count of uppercase letters in the string.\n *\n * Examples:\n * - For the string \"yLOI2022\", the output should be [4, 1, 3].\n * - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n * - For the string \"1n2s0e1s\", the output should be [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha në një varg prej 8 karakteresh.\n *\n * Kjo funksion merr si hyrje një varg të vetëm me saktësisht 8 karaktere.\n * Pastaj numëron dhe kthen numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha brenda vargut.\n *\n * Hyrja: Një varg me 8 karaktere.\n * Dalja: Një varg me tre numra të plotë, ku:\n * - Numri i parë është numri i shifrave në varg.\n * - Numri i dytë është numri i shkronjave të vogla në varg.\n * - Numri i tretë është numri i shkronjave të mëdha në varg.\n *\n * Shembuj:\n * - Për vargun \"yLOI2022\", dalja duhet të jetë [4, 1, 3].\n * - Për vargun \"IAKIOIOI\", dalja duhet të jetë [0, 0, 8].\n * - Për vargun \"1n2s0e1s\", dalja duhet të jetë [4, 4, 0].\n */ \n\nfunction countCharacters($s)",
      "hy": "<?php\n\n\n/**\n * Հաշվում է թվանշանների, փոքրատառերի և մեծատառերի քանակը 8 նիշանոց տողում:\n *\n * Այս ֆունկցիան որպես մուտք ընդունում է հենց 8 նիշանոց մեկ տող:\n * Այնուհետև հաշվում և վերադարձնում է թվանշանների, փոքրատառերի և մեծատառերի քանակը տողի մեջ:\n *\n * Մուտք: 8 նիշանոց տող:\n * Ելք: Երեք ամբողջ թվերի զանգված, որտեղ՝\n * - Առաջին ամբողջ թիվը թվանշանների քանակն է տողի մեջ:\n * - Երկրորդ ամբողջ թիվը փոքրատառերի քանակն է տողի մեջ:\n * - Երրորդ ամբողջ թիվը մեծատառերի քանակն է տողի մեջ:\n *\n * Օրինակներ:\n * - \"yLOI2022\" տողի համար ելքը պետք է լինի [4, 1, 3]:\n * - \"IAKIOIOI\" տողի համար ելքը պետք է լինի [0, 0, 8]:\n * - \"1n2s0e1s\" տողի համար ելքը պետք է լինի [4, 4, 0]:\n */\n\n function countCharacters($s) ",
      "bn": "<?php\n\n\n/**\n * একটি ৮-অক্ষরের স্ট্রিং-এ সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে।\n *\n * এই ফাংশনটি ইনপুট হিসেবে ঠিক ৮ অক্ষরের একটি স্ট্রিং নেয়।\n * তারপর এটি স্ট্রিং-এর ভিতরে সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে এবং ফেরত দেয়।\n *\n * ইনপুট: ৮ অক্ষরের একটি স্ট্রিং।\n * আউটপুট: তিনটি পূর্ণসংখ্যার একটি অ্যারে, যেখানে:\n * - প্রথম পূর্ণসংখ্যাটি স্ট্রিং-এর মধ্যে সংখ্যার সংখ্যা।\n * - দ্বিতীয় পূর্ণসংখ্যাটি স্ট্রিং-এর মধ্যে ছোট হাতের অক্ষরের সংখ্যা।\n * - তৃতীয় পূর্ণসংখ্যাটি স্ট্রিং-এর মধ্যে বড় হাতের অক্ষরের সংখ্যা।\n *\n * উদাহরণ:\n * - স্ট্রিং \"yLOI2022\" এর জন্য, আউটপুট হওয়া উচিত [4, 1, 3]।\n * - স্ট্রিং \"IAKIOIOI\" এর জন্য, আউটপুট হওয়া উচিত [0, 0, 8]।\n * - স্ট্রিং \"1n2s0e1s\" এর জন্য, আউটপুট হওয়া উচিত [4, 4, 0]।\n */\n\n function countCharacters($s) ",
      "bg": "<?php\n\n\n/**\n * Брои броя на цифрите, малките букви и главните букви в низ от 8 символа.\n *\n * Тази функция приема като входен параметър един низ от точно 8 символа.\n * След това брои и връща броя на цифрите, малките букви и главните букви в низа.\n *\n * Вход: Низ от 8 символа.\n * Изход: Масив от три цели числа, където:\n * - Първото число е броят на цифрите в низа.\n * - Второто число е броят на малките букви в низа.\n * - Третото число е броят на главните букви в низа.\n *\n * Примери:\n * - За низа \"yLOI2022\", изходът трябва да бъде [4, 1, 3].\n * - За низа \"IAKIOIOI\", изходът трябва да бъде [0, 0, 8].\n * - За низа \"1n2s0e1s\", изходът трябва да бъде [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "zh": "<?php\n\n\n/**\n * 计算一个8字符字符串中的数字、小写字母和大写字母的数量。\n *\n * 该函数接受一个恰好8个字符的字符串作为输入。\n * 然后计算并返回字符串中数字、小写字母和大写字母的数量。\n *\n * 输入：一个8个字符的字符串。\n * 输出：一个包含三个整数的数组，其中：\n * - 第一个整数是字符串中数字的数量。\n * - 第二个整数是字符串中小写字母的数量。\n * - 第三个整数是字符串中大写字母的数量。\n *\n * 示例：\n * - 对于字符串 \"yLOI2022\"，输出应为 [4, 1, 3]。\n * - 对于字符串 \"IAKIOIOI\"，输出应为 [0, 0, 8]。\n * - 对于字符串 \"1n2s0e1s\"，输出应为 [4, 4, 0]。\n */\n\n function countCharacters($s) ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre de chiffres, de lettres minuscules et de lettres majuscules dans une chaîne de 8 caractères.\n *\n * Cette fonction prend en entrée une seule chaîne de exactement 8 caractères.\n * Elle compte ensuite et renvoie le nombre de chiffres, de lettres minuscules et de lettres majuscules dans la chaîne.\n *\n * Entrée : Une chaîne de 8 caractères.\n * Sortie : Un tableau de trois entiers, où :\n * - Le premier entier est le nombre de chiffres dans la chaîne.\n * - Le deuxième entier est le nombre de lettres minuscules dans la chaîne.\n * - Le troisième entier est le nombre de lettres majuscules dans la chaîne.\n *\n * Exemples :\n * - Pour la chaîne \"yLOI2022\", la sortie devrait être [4, 1, 3].\n * - Pour la chaîne \"IAKIOIOI\", la sortie devrait être [0, 0, 8].\n * - Pour la chaîne \"1n2s0e1s\", la sortie devrait être [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben in einem 8-stelligen String.\n *\n * Diese Funktion nimmt einen einzelnen String mit genau 8 Zeichen als Eingabe.\n * Sie zählt dann die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben im String und gibt diese zurück.\n *\n * Eingabe: Ein String mit 8 Zeichen.\n * Ausgabe: Ein Array mit drei ganzen Zahlen, wobei:\n * - Die erste ganze Zahl die Anzahl der Ziffern im String ist.\n * - Die zweite ganze Zahl die Anzahl der Kleinbuchstaben im String ist.\n * - Die dritte ganze Zahl die Anzahl der Großbuchstaben im String ist.\n *\n * Beispiele:\n * - Für den String \"yLOI2022\" sollte die Ausgabe [4, 1, 3] sein.\n * - Für den String \"IAKIOIOI\" sollte die Ausgabe [0, 0, 8] sein.\n * - Für den String \"1n2s0e1s\" sollte die Ausgabe [4, 4, 0] sein.\n */\n\n function countCharacters($s) ",
      "ha": "<?php\n\n\n/**\n * Yana ƙirga yawan lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffa 8.\n *\n * Wannan aikin yana karɓar jeren haruffa guda ɗaya na ainihin haruffa 8 a matsayin shigarwa.\n * Sannan yana ƙirga kuma ya dawo da yawan lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffan.\n *\n * Shigarwa: Jeren haruffa 8.\n * Fitarwa: Jerin lambobi guda uku, inda:\n * - Lamba ta farko ita ce yawan lambobi a cikin jeren haruffan.\n * - Lamba ta biyu ita ce yawan ƙananan haruffa a cikin jeren haruffan.\n * - Lamba ta uku ita ce yawan manyan haruffa a cikin jeren haruffan.\n *\n * Misalai:\n * - Don jeren haruffa \"yLOI2022\", fitarwa ya kamata ya zama [4, 1, 3].\n * - Don jeren haruffa \"IAKIOIOI\", fitarwa ya kamata ya zama [0, 0, 8].\n * - Don jeren haruffa \"1n2s0e1s\", fitarwa ya kamata ya zama [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "hi": "<?php\n\n\n/**\n * एक 8-अक्षर की स्ट्रिंग में अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है।\n *\n * यह फ़ंक्शन इनपुट के रूप में ठीक 8 अक्षरों की एक स्ट्रिंग लेता है।\n * इसके बाद यह स्ट्रिंग में अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है और लौटाता है।\n *\n * इनपुट: 8 अक्षरों की एक स्ट्रिंग।\n * आउटपुट: तीन पूर्णांकों की एक array, जहाँ:\n * - पहला पूर्णांक स्ट्रिंग में अंकों की गिनती है।\n * - दूसरा पूर्णांक स्ट्रिंग में छोटे अक्षरों की गिनती है।\n * - तीसरा पूर्णांक स्ट्रिंग में बड़े अक्षरों की गिनती है।\n *\n * उदाहरण:\n * - स्ट्रिंग \"yLOI2022\" के लिए, आउटपुट [4, 1, 3] होना चाहिए।\n * - स्ट्रिंग \"IAKIOIOI\" के लिए, आउटपुट [0, 0, 8] होना चाहिए।\n * - स्ट्रिंग \"1n2s0e1s\" के लिए, आउटपुट [4, 4, 0] होना चाहिए।\n */\n\n function countCharacters($s) ",
      "hu": "<?php\n\n\n/**\n * Megszámolja a számjegyek, kisbetűk és nagybetűk számát egy 8 karakteres sztringben.\n *\n * Ez a függvény egy pontosan 8 karakter hosszú sztringet vesz be bemenetként.\n * Ezután megszámolja és visszaadja a számjegyek, kisbetűk és nagybetűk számát a sztringben.\n *\n * Bemenet: Egy 8 karakteres sztring.\n * Kimenet: Egy három egész számot tartalmazó tömb, ahol:\n * - Az első egész szám a számjegyek száma a sztringben.\n * - A második egész szám a kisbetűk száma a sztringben.\n * - A harmadik egész szám a nagybetűk száma a sztringben.\n *\n * Példák:\n * - A \"yLOI2022\" sztring esetén a kimenet [4, 1, 3] kell legyen.\n * - Az \"IAKIOIOI\" sztring esetén a kimenet [0, 0, 8] kell legyen.\n * - Az \"1n2s0e1s\" sztring esetén a kimenet [4, 4, 0] kell legyen.\n */\n\n function countCharacters($s) "
    },
    "prompt_bertscore": {
      "sq": "0.9580425100924764",
      "hy": "0.9640633942024059",
      "bn": "0.9786933162871496",
      "bg": "0.982709622591675",
      "zh": "0.9759951211911717",
      "fr": "0.9891218085522433",
      "de": "0.9825882594288627",
      "ha": "0.9757599428200264",
      "hi": "0.992832025439594",
      "hu": "0.9756312303331158"
    },
    "canonical_solution": " {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}",
    "instruction": {
      "en": "Write a PHP function `function countCharacters($s)` to solve the following problem:\nCounts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n \n  This function takes a single string of exactly 8 characters as input.\n  It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n \n  Input: A string of 8 characters.\n  Output: An array of three integers, where:\n  - The first integer is the count of digits in the string.\n  - The second integer is the count of lowercase letters in the string.\n  - The third integer is the count of uppercase letters in the string.\n \n  Examples:\n  - For the string \"yLOI2022\", the output should be [4, 1, 3].\n  - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n  - For the string \"1n2s0e1s\", the output should be [4, 4, 0].",
      "sq": "Shkruani një funksion PHP `function countCharacters($s)` për të zgjidhur problemin e mëposhtëm:\nNumëron numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha në një varg me 8 karaktere.\n\nKy funksion merr si hyrje një varg të vetëm me saktësisht 8 karaktere.\nMë pas numëron dhe kthen numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha brenda vargut.\n\nHyrja: Një varg me 8 karaktere.\nDalja: Një varg me tre numra të plotë, ku:\n- Numri i parë është numri i shifrave në varg.\n- Numri i dytë është numri i shkronjave të vogla në varg.\n- Numri i tretë është numri i shkronjave të mëdha në varg.\n\nShembuj:\n- Për vargun \"yLOI2022\", dalja duhet të jetë [4, 1, 3].\n- Për vargun \"IAKIOIOI\", dalja duhet të jetë [0, 0, 8].\n- Për vargun \"1n2s0e1s\", dalja duhet të jetë [4, 4, 0].",
      "hy": "Գրեք PHP ֆունկցիա `function countCharacters($s)` հետևյալ խնդիրը լուծելու համար:\nՀաշվում է թվանշանների, փոքրատառերի և մեծատառերի քանակը 8-սիմվոլանոց տողում։\n\nԱյս ֆունկցիան ընդունում է ճիշտ 8 սիմվոլանոց մեկ տող որպես մուտք։\nԱյնուհետև հաշվում և վերադարձնում է թվանշանների, փոքրատառերի և մեծատառերի քանակը տողի մեջ։\n\nՄուտք: 8 սիմվոլանոց տող։\nԵլք: Երեք ամբողջ թվերի զանգված, որտեղ՝\n- Առաջին ամբողջ թիվը տողի մեջ թվանշանների քանակն է։\n- Երկրորդ ամբողջ թիվը տողի մեջ փոքրատառերի քանակն է։\n- Երրորդ ամբողջ թիվը տողի մեջ մեծատառերի քանակն է։\n\nՕրինակներ:\n- \"yLOI2022\" տողի համար ելքը պետք է լինի [4, 1, 3]։\n- \"IAKIOIOI\" տողի համար ելքը պետք է լինի [0, 0, 8]։\n- \"1n2s0e1s\" տողի համար ելքը պետք է լինի [4, 4, 0]։",
      "bn": "PHP ফাংশন `function countCharacters($s)` লিখুন নিম্নলিখিত সমস্যার সমাধানের জন্য:\nএকটি ৮-অক্ষরের স্ট্রিং-এ সংখ্যার সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষর গণনা করে।\n\nএই ফাংশনটি ইনপুট হিসেবে ঠিক ৮ অক্ষরের একটি স্ট্রিং নেয়।\nএরপর এটি স্ট্রিংয়ের মধ্যে সংখ্যার সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষর গণনা করে এবং ফেরত দেয়।\n\nইনপুট: ৮ অক্ষরের একটি স্ট্রিং।\nআউটপুট: তিনটি পূর্ণসংখ্যার একটি অ্যারে, যেখানে:\n- প্রথম পূর্ণসংখ্যাটি স্ট্রিংয়ের সংখ্যার সংখ্যা।\n- দ্বিতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের ছোট হাতের অক্ষরের সংখ্যা।\n- তৃতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের বড় হাতের অক্ষরের সংখ্যা।\n\nউদাহরণ:\n- স্ট্রিং \"yLOI2022\" এর জন্য, আউটপুট হওয়া উচিত [4, 1, 3]।\n- স্ট্রিং \"IAKIOIOI\" এর জন্য, আউটপুট হওয়া উচিত [0, 0, 8]।\n- স্ট্রিং \"1n2s0e1s\" এর জন্য, আউটপুট হওয়া উচিত [4, 4, 0]।",
      "bg": "Напишете PHP функция `function countCharacters($s)`, за да решите следния проблем:\nБрои броя на цифрите, малките букви и главните букви в низ от 8 знака.\n\nТази функция приема като вход един низ от точно 8 знака.\nСлед това брои и връща броя на цифрите, малките букви и главните букви в низа.\n\nВход: Низ от 8 знака.\nИзход: Масив от три цели числа, където:\n- Първото цяло число е броят на цифрите в низа.\n- Второто цяло число е броят на малките букви в низа.\n- Третото цяло число е броят на главните букви в низа.\n\nПримери:\n- За низа \"yLOI2022\", изходът трябва да бъде [4, 1, 3].\n- За низа \"IAKIOIOI\", изходът трябва да бъде [0, 0, 8].\n- За низа \"1n2s0e1s\", изходът трябва да бъде [4, 4, 0].",
      "zh": "编写一个 PHP 函数 `function countCharacters($s)` 来解决以下问题：\n计算一个 8 个字符的字符串中数字、小写字母和大写字母的数量。\n\n该函数接受一个正好 8 个字符的字符串作为输入。\n然后它计算并返回字符串中数字、小写字母和大写字母的数量。\n\n输入：一个 8 个字符的字符串。\n输出：一个包含三个整数的数组，其中：\n- 第一个整数是字符串中数字的数量。\n- 第二个整数是字符串中小写字母的数量。\n- 第三个整数是字符串中大写字母的数量。\n\n示例：\n- 对于字符串 \"yLOI2022\"，输出应为 [4, 1, 3]。\n- 对于字符串 \"IAKIOIOI\"，输出应为 [0, 0, 8]。\n- 对于字符串 \"1n2s0e1s\"，输出应为 [4, 4, 0]。",
      "fr": "Écrire une fonction PHP `function countCharacters($s)` pour résoudre le problème suivant :\nCompte le nombre de chiffres, de lettres minuscules et de lettres majuscules dans une chaîne de 8 caractères.\n\n  Cette fonction prend en entrée une seule chaîne de exactement 8 caractères.\n  Elle compte ensuite et retourne le nombre de chiffres, de lettres minuscules et de lettres majuscules dans la chaîne.\n\n  Entrée : Une chaîne de 8 caractères.\n  Sortie : Un tableau de trois entiers, où :\n  - Le premier entier est le nombre de chiffres dans la chaîne.\n  - Le deuxième entier est le nombre de lettres minuscules dans la chaîne.\n  - Le troisième entier est le nombre de lettres majuscules dans la chaîne.\n\n  Exemples :\n  - Pour la chaîne \"yLOI2022\", la sortie devrait être [4, 1, 3].\n  - Pour la chaîne \"IAKIOIOI\", la sortie devrait être [0, 0, 8].\n  - Pour la chaîne \"1n2s0e1s\", la sortie devrait être [4, 4, 0].",
      "de": "Schreiben Sie eine PHP-Funktion `function countCharacters($s)`, um das folgende Problem zu lösen:\nZählt die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben in einem 8-Zeichen-String.\n\nDiese Funktion nimmt einen einzelnen String mit genau 8 Zeichen als Eingabe.\nSie zählt dann die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben im String und gibt diese zurück.\n\nEingabe: Ein String mit 8 Zeichen.\nAusgabe: Ein Array von drei ganzen Zahlen, wobei:\n- Die erste ganze Zahl die Anzahl der Ziffern im String ist.\n- Die zweite ganze Zahl die Anzahl der Kleinbuchstaben im String ist.\n- Die dritte ganze Zahl die Anzahl der Großbuchstaben im String ist.\n\nBeispiele:\n- Für den String \"yLOI2022\" sollte die Ausgabe [4, 1, 3] sein.\n- Für den String \"IAKIOIOI\" sollte die Ausgabe [0, 0, 8] sein.\n- Für den String \"1n2s0e1s\" sollte die Ausgabe [4, 4, 0] sein.",
      "ha": "Rubuta aikin PHP `function countCharacters($s)` don warware matsalar mai zuwa:\nYana ƙidaya adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffa guda 8.\n\nWannan aikin yana ɗaukar jeren haruffa guda ɗaya na ainihin haruffa 8 a matsayin shigarwa.\nSannan yana ƙidaya kuma yana dawo da adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffan.\n\nShigarwa: Jeren haruffa guda 8.\nFitarwa: Jerin lambobi guda uku, inda:\n- Lamba ta farko ita ce ƙidayar lambobi a cikin jeren haruffan.\n- Lamba ta biyu ita ce ƙidayar ƙananan haruffa a cikin jeren haruffan.\n- Lamba ta uku ita ce ƙidayar manyan haruffa a cikin jeren haruffan.\n\nMisalai:\n- Don jeren haruffa \"yLOI2022\", fitarwa ya kamata ya zama [4, 1, 3].\n- Don jeren haruffa \"IAKIOIOI\", fitarwa ya kamata ya zama [0, 0, 8].\n- Don jeren haruffa \"1n2s0e1s\", fitarwa ya kamata ya zama [4, 4, 0].",
      "hi": "PHP फ़ंक्शन `function countCharacters($s)` लिखें ताकि निम्नलिखित समस्या का समाधान किया जा सके:\n8-अक्षरों की स्ट्रिंग में अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनें।\n\nयह फ़ंक्शन इनपुट के रूप में ठीक 8 अक्षरों की एकल स्ट्रिंग लेता है।\nयह फिर स्ट्रिंग के भीतर अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है और लौटाता है।\n\nइनपुट: 8 अक्षरों की एक स्ट्रिंग।\nआउटपुट: तीन पूर्णांकों की एक एरे, जहां:\n- पहला पूर्णांक स्ट्रिंग में अंकों की गिनती है।\n- दूसरा पूर्णांक स्ट्रिंग में छोटे अक्षरों की गिनती है।\n- तीसरा पूर्णांक स्ट्रिंग में बड़े अक्षरों की गिनती है।\n\nउदाहरण:\n- स्ट्रिंग \"yLOI2022\" के लिए, आउटपुट [4, 1, 3] होना चाहिए।\n- स्ट्रिंग \"IAKIOIOI\" के लिए, आउटपुट [0, 0, 8] होना चाहिए।\n- स्ट्रिंग \"1n2s0e1s\" के लिए, आउटपुट [4, 4, 0] होना चाहिए।",
      "hu": "Írjon egy PHP függvényt `function countCharacters($s)` a következő probléma megoldására:\nMegszámolja a számjegyek, kisbetűk és nagybetűk számát egy 8 karakteres sztringben.\n \n  Ez a függvény egyetlen, pontosan 8 karakter hosszú sztringet vesz be bemenetként.\n  Ezután megszámolja és visszaadja a számjegyek, kisbetűk és nagybetűk számát a sztringben.\n \n  Bemenet: Egy 8 karakteres sztring.\n  Kimenet: Egy három egész számot tartalmazó tömb, ahol:\n  - Az első egész szám a számjegyek száma a sztringben.\n  - A második egész szám a kisbetűk száma a sztringben.\n  - A harmadik egész szám a nagybetűk száma a sztringben.\n \n  Példák:\n  - A \"yLOI2022\" sztring esetén a kimenet [4, 1, 3] kell legyen.\n  - Az \"IAKIOIOI\" sztring esetén a kimenet [0, 0, 8] kell legyen.\n  - Az \"1n2s0e1s\" sztring esetén a kimenet [4, 4, 0] kell legyen."
    },
    "instruction_bertscore": {
      "sq": "0.9745115508752221",
      "hy": "0.9721885685690191",
      "bn": "0.9629141188177381",
      "bg": "0.9826337457861197",
      "zh": "0.9744034959479392",
      "fr": "0.9867221549189609",
      "de": "0.9841403572262694",
      "ha": "0.9738995706712537",
      "hi": "0.9847876936380621",
      "hu": "0.9856706056817621"
    },
    "level": "easy",
    "test": "function main(){\n    // Testcases\n    assert(countCharacters(\"yLOI2022\") === [4, 1, 3]);\n    assert(countCharacters(\"IAKIOIOI\") === [0, 0, 8]);\n    assert(countCharacters(\"1n2s0e1s\") === [4, 4, 0]);\n\n    // echo \"All test cases passed!\";\n\n}\n\n\nmain();\n?>",
    "entry_point": "countCharacters",
    "signature": "function countCharacters($s)",
    "docstring": {
      "en": "Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n \n  This function takes a single string of exactly 8 characters as input.\n  It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n \n  Input: A string of 8 characters.\n  Output: An array of three integers, where:\n  - The first integer is the count of digits in the string.\n  - The second integer is the count of lowercase letters in the string.\n  - The third integer is the count of uppercase letters in the string.\n \n  Examples:\n  - For the string \"yLOI2022\", the output should be [4, 1, 3].\n  - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n  - For the string \"1n2s0e1s\", the output should be [4, 4, 0].",
      "sq": "Numëron numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha në një varg prej 8 karakteresh.\n\nKjo funksion merr si hyrje një varg të vetëm me saktësisht 8 karaktere. Pastaj numëron dhe kthen numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha brenda vargut.\n\nHyrja: Një varg me 8 karaktere. Dalja: Një varg me tre numra të plotë, ku: - Numri i parë është numri i shifrave në varg. - Numri i dytë është numri i shkronjave të vogla në varg. - Numri i tretë është numri i shkronjave të mëdha në varg.\n\nShembuj: - Për vargun \"yLOI2022\", dalja duhet të jetë [4, 1, 3]. - Për vargun \"IAKIOIOI\", dalja duhet të jetë [0, 0, 8]. - Për vargun \"1n2s0e1s\", dalja duhet të jetë [4, 4, 0].",
      "hy": "Հաշվում է թվանշանների, փոքրատառերի և մեծատառերի քանակը 8 նիշից բաղկացած տողում։\n\nԱյս ֆունկցիան որպես մուտք ընդունում է ճիշտ 8 նիշից բաղկացած մեկ տող։ Այնուհետև հաշվում և վերադարձնում է թվանշանների, փոքրատառերի և մեծատառերի քանակը տողի մեջ։\n\nՄուտք: 8 նիշից բաղկացած տող։ \nԵլք: Երեք ամբողջ թվերից բաղկացած զանգված, որտեղ՝ \n- Առաջին ամբողջ թիվը տողի մեջ թվանշանների քանակն է։\n- Երկրորդ ամբողջ թիվը տողի մեջ փոքրատառերի քանակն է։\n- Երրորդ ամբողջ թիվը տողի մեջ մեծատառերի քանակն է։\n\nՕրինակներ:\n- \"yLOI2022\" տողի համար ելքը պետք է լինի [4, 1, 3]։\n- \"IAKIOIOI\" տողի համար ելքը պետք է լինի [0, 0, 8]։\n- \"1n2s0e1s\" տողի համար ելքը պետք է լինի [4, 4, 0]։",
      "bn": "একটি ৮-অক্ষরের স্ট্রিং-এ সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে।\n\nএই ফাংশনটি একটি ৮ অক্ষরের সঠিক একটি স্ট্রিং ইনপুট হিসেবে গ্রহণ করে। \nএরপর এটি স্ট্রিংয়ের মধ্যে সংখ্যা, ছোট হাতের অক্ষর এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে এবং ফেরত দেয়।\n\nInput: একটি ৮ অক্ষরের স্ট্রিং।\nOutput: তিনটি পূর্ণসংখ্যার একটি অ্যারে, যেখানে:\n- প্রথম পূর্ণসংখ্যাটি স্ট্রিংয়ের সংখ্যার গণনা।\n- দ্বিতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের ছোট হাতের অক্ষরের গণনা।\n- তৃতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের বড় হাতের অক্ষরের গণনা।\n\nExamples:\n- স্ট্রিং \"yLOI2022\" এর জন্য, আউটপুট হওয়া উচিত [4, 1, 3]।\n- স্ট্রিং \"IAKIOIOI\" এর জন্য, আউটপুট হওয়া উচিত [0, 0, 8]।\n- স্ট্রিং \"1n2s0e1s\" এর জন্য, আউটপুট হওয়া উচিত [4, 4, 0]।",
      "bg": "Брои броя на цифрите, малките букви и главните букви в низ от 8 знака.\n\nТази функция приема един низ от точно 8 знака като вход.\nСлед това брои и връща броя на цифрите, малките букви и главните букви в низа.\n\nВход: Низ от 8 знака.\nИзход: Масив от три цели числа, където:\n- Първото цяло число е броят на цифрите в низа.\n- Второто цяло число е броят на малките букви в низа.\n- Третото цяло число е броят на главните букви в низа.\n\nПримери:\n- За низа \"yLOI2022\", изходът трябва да бъде [4, 1, 3].\n- За низа \"IAKIOIOI\", изходът трябва да бъде [0, 0, 8].\n- За низа \"1n2s0e1s\", изходът трябва да бъде [4, 4, 0].",
      "zh": "计算一个8字符字符串中的数字、小写字母和大写字母的数量。\n\n这个函数接受一个长度正好为8的字符串作为输入。\n然后它计算并返回字符串中数字、小写字母和大写字母的数量。\n\n输入：一个8字符的字符串。\n输出：一个包含三个整数的数组，其中：\n- 第一个整数是字符串中数字的数量。\n- 第二个整数是字符串中小写字母的数量。\n- 第三个整数是字符串中大写字母的数量。\n\n示例：\n- 对于字符串 \"yLOI2022\"，输出应为 [4, 1, 3]。\n- 对于字符串 \"IAKIOIOI\"，输出应为 [0, 0, 8]。\n- 对于字符串 \"1n2s0e1s\"，输出应为 [4, 4, 0]。",
      "fr": "Compte le nombre de chiffres, de lettres minuscules et de lettres majuscules dans une chaîne de 8 caractères.\n\n  Cette fonction prend en entrée une seule chaîne de caractères de exactement 8 caractères.\n  Elle compte ensuite et renvoie le nombre de chiffres, de lettres minuscules et de lettres majuscules dans la chaîne.\n\n  Entrée : Une chaîne de 8 caractères.\n  Sortie : Un tableau de trois entiers, où :\n  - Le premier entier est le compte des chiffres dans la chaîne.\n  - Le deuxième entier est le compte des lettres minuscules dans la chaîne.\n  - Le troisième entier est le compte des lettres majuscules dans la chaîne.\n\n  Exemples :\n  - Pour la chaîne \"yLOI2022\", la sortie devrait être [4, 1, 3].\n  - Pour la chaîne \"IAKIOIOI\", la sortie devrait être [0, 0, 8].\n  - Pour la chaîne \"1n2s0e1s\", la sortie devrait être [4, 4, 0].",
      "de": "Zählt die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben in einem 8-Zeichen-String.\n\n  Diese Funktion nimmt einen einzelnen String mit genau 8 Zeichen als Eingabe.\n  Sie zählt dann die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben im String und gibt diese zurück.\n\n  Eingabe: Ein String mit 8 Zeichen.\n  Ausgabe: Ein Array von drei ganzen Zahlen, wobei:\n  - Die erste ganze Zahl die Anzahl der Ziffern im String ist.\n  - Die zweite ganze Zahl die Anzahl der Kleinbuchstaben im String ist.\n  - Die dritte ganze Zahl die Anzahl der Großbuchstaben im String ist.\n\n  Beispiele:\n  - Für den String \"yLOI2022\" sollte die Ausgabe [4, 1, 3] sein.\n  - Für den String \"IAKIOIOI\" sollte die Ausgabe [0, 0, 8] sein.\n  - Für den String \"1n2s0e1s\" sollte die Ausgabe [4, 4, 0] sein.",
      "ha": "Yana ƙidaya adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffa guda 8.\n\nWannan aikin yana karɓar jeren haruffa guda ɗaya na ainihin haruffa 8 a matsayin shigarwa. \nSannan yana ƙidaya kuma yana dawowa da adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffan.\n\nShigarwa: Jeren haruffa na 8.\nFitarwa: Jerin lambobi guda uku, inda:\n- Lamba ta farko ita ce ƙidayar lambobi a cikin jeren haruffa.\n- Lamba ta biyu ita ce ƙidayar ƙananan haruffa a cikin jeren haruffa.\n- Lamba ta uku ita ce ƙidayar manyan haruffa a cikin jeren haruffa.\n\nMisalai:\n- Don jeren haruffa \"yLOI2022\", fitarwa ya kamata ya zama [4, 1, 3].\n- Don jeren haruffa \"IAKIOIOI\", fitarwa ya kamata ya zama [0, 0, 8].\n- Don jeren haruffa \"1n2s0e1s\", fitarwa ya kamata ya zama [4, 4, 0].",
      "hi": "अंक, छोटे अक्षर, और बड़े अक्षरों की संख्या 8-अक्षर की स्ट्रिंग में गिनता है।\n\nयह फ़ंक्शन इनपुट के रूप में ठीक 8 अक्षरों की एकल स्ट्रिंग लेता है। \nयह तब स्ट्रिंग के भीतर अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है और लौटाता है।\n\nइनपुट: 8 अक्षरों की एक स्ट्रिंग।\nआउटपुट: तीन पूर्णांकों की एक सरणी, जहाँ:\n- पहला पूर्णांक स्ट्रिंग में अंकों की गिनती है।\n- दूसरा पूर्णांक स्ट्रिंग में छोटे अक्षरों की गिनती है।\n- तीसरा पूर्णांक स्ट्रिंग में बड़े अक्षरों की गिनती है।\n\nउदाहरण:\n- स्ट्रिंग \"yLOI2022\" के लिए, आउटपुट [4, 1, 3] होना चाहिए।\n- स्ट्रिंग \"IAKIOIOI\" के लिए, आउटपुट [0, 0, 8] होना चाहिए।\n- स्ट्रिंग \"1n2s0e1s\" के लिए, आउटपुट [4, 4, 0] होना चाहिए।",
      "hu": "Számolja meg a számjegyek, kisbetűk és nagybetűk számát egy 8 karakteres sztringben.\n\nEz a függvény egyetlen, pontosan 8 karakter hosszú sztringet vesz be bemenetként.\nEzután megszámolja és visszaadja a számjegyek, kisbetűk és nagybetűk számát a sztringben.\n\nBemenet: Egy 8 karakteres sztring.\nKimenet: Egy három egész számot tartalmazó tömb, ahol:\n- Az első egész szám a számjegyek száma a sztringben.\n- A második egész szám a kisbetűk száma a sztringben.\n- A harmadik egész szám a nagybetűk száma a sztringben.\n\nPéldák:\n- A \"yLOI2022\" sztring esetén a kimenet [4, 1, 3].\n- Az \"IAKIOIOI\" sztring esetén a kimenet [0, 0, 8].\n- Az \"1n2s0e1s\" sztring esetén a kimenet [4, 4, 0]."
    },
    "docstring_bertscore": {
      "sq": "0.9728762269481619",
      "hy": "0.979549015968648",
      "bn": "0.9824037318048813",
      "bg": "0.9834695824295145",
      "zh": "0.969882271214823",
      "fr": "0.9893116991965126",
      "de": "0.9822966700295035",
      "ha": "0.9404607419151733",
      "hi": "0.999999801369619",
      "hu": "0.9730853847393917"
    }
  }
]