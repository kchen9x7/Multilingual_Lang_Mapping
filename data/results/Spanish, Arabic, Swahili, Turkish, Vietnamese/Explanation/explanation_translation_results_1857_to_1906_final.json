[
  {
    "task_id": "TypeScript/1",
    "prompt": {
      "en": "\n// return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval(): string",
      "es": "// devuelve \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval(): string",
      "arb": "// إرجاع \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval(): string",
      "sw": "// rudisha \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval(): string",
      "tr": "// \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\" döndür",
      "vi": "// trả về \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\"\nfunction hello_mmcodeeval(): string"
    },
    "prompt_bertscore": {
      "es": "0.9927952788191026",
      "arb": "0.9955175081911857",
      "sw": "1",
      "tr": "0.857273345185857",
      "vi": "1"
    },
    "canonical_solution": "{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}",
    "instruction": {
      "en": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function hello_mmcodeeval(): string\n{\n    return \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\";\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.9005839052489902",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    console.assert(hello_mmcodeeval() === \"Hello, MMCODEEVAL: Masssively Multilingual Code Evaluation\");\n})();",
    "entry_point": "hello_mmcodeeval",
    "signature": "function hello_mmcodeeval(): string",
    "docstring": {
      "en": "return \"Hello, MMCODEEVAL: Massively Multilingual Code Evaluation\"",
      "es": "devuelve \"Hello, MMCODEEVAL: Evaluación de Código Masivamente Multilingüe\"",
      "arb": "إرجاع \"Hello, MMCODEEVAL: Massively Multilingual Code Evaluation\"",
      "sw": "rudisha \"Hello, MMCODEEVAL: Massively Multilingual Code Evaluation\"",
      "tr": " \"Hello, MMCODEEVAL: Massively Multilingual Code Evaluation\" döndür",
      "vi": "trả về \"Hello, MMCODEEVAL: Đánh giá mã đa ngôn ngữ quy mô lớn\""
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "1",
      "sw": "1",
      "tr": "1",
      "vi": "0.9384794038643502"
    }
  },
  {
    "task_id": "TypeScript/2",
    "prompt": {
      "en": "\n/**\n * Calculate the area of a triangle given its three sides.\n * \n * @param a - Length of side 'a'.\n * @param b - Length of side 'b'.\n * @param c - Length of side 'c'.\n * @returns If the provided sides form a triangle, return the calculated area with 2 decimal places.\n *          Otherwise, return \"-1\".\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number",
      "es": "/**\n * Calcular el área de un triángulo dados sus tres lados.\n * \n * @param a - Longitud del lado 'a'.\n * @param b - Longitud del lado 'b'.\n * @param c - Longitud del lado 'c'.\n * @returns Si los lados proporcionados forman un triángulo, devuelve el área calculada con 2 decimales.\n *          De lo contrario, devuelve \"-1\".\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number",
      "arb": "/**\n * حساب مساحة المثلث المعطى أطوال أضلاعه الثلاثة.\n * \n * @param a - طول الضلع 'a'.\n * @param b - طول الضلع 'b'.\n * @param c - طول الضلع 'c'.\n * @returns إذا كانت الأضلاع المقدمة تشكل مثلثًا، يتم إرجاع المساحة المحسوبة بدقتين عشريتين.\n *          خلاف ذلك، يتم إرجاع \"-1\".\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number",
      "sw": "/**\n * Hesabu eneo la pembetatu ukizingatia pande zake tatu.\n * \n * @param a - Urefu wa upande 'a'.\n * @param b - Urefu wa upande 'b'.\n * @param c - Urefu wa upande 'c'.\n * @returns Ikiwa pande zilizotolewa zinaunda pembetatu, rudisha eneo lililohesabiwa na nafasi 2 za desimali.\n *          Vinginevyo, rudisha \"-1\".\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number",
      "tr": "/**\n * Üç kenarı verilen bir üçgenin alanını hesapla.\n * \n * @param a - 'a' kenarının uzunluğu.\n * @param b - 'b' kenarının uzunluğu.\n * @param c - 'c' kenarının uzunluğu.\n * @returns Verilen kenarlar bir üçgen oluşturuyorsa, hesaplanan alanı 2 ondalık basamakla döndür.\n *          Aksi takdirde, \"-1\" döndür.\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number",
      "vi": "/**\n * Tính diện tích của một tam giác khi biết ba cạnh của nó.\n * \n * @param a - Chiều dài của cạnh 'a'.\n * @param b - Chiều dài của cạnh 'b'.\n * @param c - Chiều dài của cạnh 'c'.\n * @returns Nếu các cạnh được cung cấp tạo thành một tam giác, trả về diện tích đã tính với 2 chữ số thập phân.\n *          Ngược lại, trả về \"-1\".\n * \n * @example\n * calculateTriangleArea(3, 5, 4)  // 6\n */\nfunction calculateTriangleArea(a: number, b: number, c: number): number"
    },
    "prompt_bertscore": {
      "es": "0.980443249944067",
      "arb": "0.9708333134792181",
      "sw": "0.9965164203774102",
      "tr": "0.9965164203774102",
      "vi": "1"
    },
    "canonical_solution": "{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}",
    "instruction": {
      "en": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function calculateTriangleArea(a: number, b: number, c: number): number\n{\n    if (a + b > c && a + c > b && b + c > a) {\n        const s: number = (a + b + c) / 2.0;\n        return parseFloat(Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2));\n    } else {\n        return -1; // Use a special value to indicate not a triangle\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.8445147199208429",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    let area: number;\n\n    // Triangle with sides 3, 5, 4 should return area 6\n    area = calculateTriangleArea(3, 5, 4);\n    console.assert(Math.abs(area - 6) < 1e-6);\n\n    // Not a triangle with sides 1, 1, 4 should return \"-1\"\n    area = calculateTriangleArea(1, 1, 4);\n    console.assert(area === -1);\n\n    // Triangle with sides 7, 24, 25 should return area 84\n    area = calculateTriangleArea(7, 24, 25);\n    console.assert(Math.abs(area - 84) < 1e-6);\n\n    // Triangle with sides 10.5, 6.2, 7.3 should return a correct area\n    area = calculateTriangleArea(10.5, 6.2, 7.3);\n    // For precision issues, we test if the calculated area is close enough to the expected value\n    console.assert(Math.abs(area - 22.15) < 1e-2);\n\n    // console.log(\"All tests passed successfully.\");\n})();",
    "entry_point": "calculateTriangleArea",
    "signature": "function calculateTriangleArea(a: number, b: number, c: number): number",
    "docstring": {
      "en": "Calculate the area of a triangle given its three sides.\n\n@param a - Length of side 'a'.\n@param b - Length of side 'b'.\n@param c - Length of side 'c'.\n@returns If the provided sides form a triangle, return the calculated area with 2 decimal places.\n         Otherwise, return \"-1\".\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6",
      "es": "Calcular el área de un triángulo dados sus tres lados.\n\n@param a - Longitud del lado 'a'.\n@param b - Longitud del lado 'b'.\n@param c - Longitud del lado 'c'.\n@returns Si los lados proporcionados forman un triángulo, devuelve el área calculada con 2 decimales.\n         De lo contrario, devuelve \"-1\".\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6",
      "arb": "احسب مساحة المثلث بناءً على أطوال أضلاعه الثلاثة.\n\n@param a - طول الضلع 'a'.\n@param b - طول الضلع 'b'.\n@param c - طول الضلع 'c'.\n@returns إذا كانت الأضلاع المقدمة تشكل مثلثًا، يتم إرجاع المساحة المحسوبة مع دقتين عشريتين.\n         خلاف ذلك، يتم إرجاع \"-1\".\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6",
      "sw": "Hesabu eneo la pembetatu ukitumia pande zake tatu.\n\n@param a - Urefu wa upande 'a'.\n@param b - Urefu wa upande 'b'.\n@param c - Urefu wa upande 'c'.\n@returns Ikiwa pande zilizotolewa zinaunda pembetatu, rudisha eneo lililohesabiwa na sehemu 2 za desimali.\n         Vinginevyo, rudisha \"-1\".\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6",
      "tr": "Üç kenarı verilen bir üçgenin alanını hesaplayın.\n\n@param a - 'a' kenarının uzunluğu.\n@param b - 'b' kenarının uzunluğu.\n@param c - 'c' kenarının uzunluğu.\n@returns Eğer verilen kenarlar bir üçgen oluşturuyorsa, hesaplanan alanı 2 ondalık basamakla döndürür.\n         Aksi takdirde, \"-1\" döndürür.\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6",
      "vi": "Tính diện tích của một tam giác khi biết độ dài ba cạnh của nó.\n\n@param a - Độ dài của cạnh 'a'.\n@param b - Độ dài của cạnh 'b'.\n@param c - Độ dài của cạnh 'c'.\n@returns Nếu các cạnh được cung cấp tạo thành một tam giác, trả về diện tích đã tính với 2 chữ số thập phân.\n         Ngược lại, trả về \"-1\".\n\n@example\ncalculateTriangleArea(3, 5, 4)  // 6"
    },
    "docstring_bertscore": {
      "es": "0.9743224547524769",
      "arb": "0.9630992423328626",
      "sw": "0.9901818988958265",
      "tr": "0.9759256005578095",
      "vi": "0.986546565662126"
    }
  },
  {
    "task_id": "TypeScript/3",
    "prompt": {
      "en": "\n/**\n * Calculate the value of the function for a given input.\n * \n * Parameters:\n * - x (number): Input value for the function.\n * \n * Returns:\n * - string: If x is not in the defined domain, returns \"Not define\".\n *   Otherwise, returns the calculated function value rounded to 5 decimal places.\n * \n * Function Definitions:\n * - For 0 <= x < 10: y = cos(x + 3.0)\n * - For 10 <= x < 20: y = (cos(x + 7.5))^2\n * - For 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * Example usage:\n * calculateFunctionValue(40); // Returns \"Not define\"\n */\nfunction calculateFunctionValue(x: number): string",
      "es": "/**\n * Calcular el valor de la función para una entrada dada.\n * \n * Parámetros:\n * - x (number): Valor de entrada para la función.\n * \n * Devuelve:\n * - string: Si x no está en el dominio definido, devuelve \"Not define\".\n *   De lo contrario, devuelve el valor calculado de la función redondeado a 5 decimales.\n * \n * Definiciones de la función:\n * - Para 0 <= x < 10: y = cos(x + 3.0)\n * - Para 10 <= x < 20: y = (cos(x + 7.5))^2\n * - Para 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * Ejemplo de uso:\n * calculateFunctionValue(40); // Returns \"Not define\"\n */\nfunction calculateFunctionValue(x: number): string",
      "arb": "/**\n * حساب قيمة الدالة لقيمة مدخلة معينة.\n * \n * المعاملات:\n * - x (رقم): قيمة المدخل للدالة.\n * \n * يعيد:\n * - سلسلة نصية: إذا لم تكن x في النطاق المحدد، يعيد \"غير معرف\".\n *   خلاف ذلك، يعيد قيمة الدالة المحسوبة مقربة إلى 5 منازل عشرية.\n * \n * تعريفات الدالة:\n * - لـ 0 <= x < 10: y = cos(x + 3.0)\n * - لـ 10 <= x < 20: y = (cos(x + 7.5))^2\n * - لـ 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * مثال على الاستخدام:\n * calculateFunctionValue(40); // يعيد \"غير معرف\"\n */\nfunction calculateFunctionValue(x: number): string",
      "sw": "/**\n * Hesabu thamani ya kazi kwa ingizo lililopewa.\n * \n * Vigezo:\n * - x (nambari): Thamani ya ingizo kwa kazi.\n * \n * Inarudisha:\n * - string: Ikiwa x haipo katika kikoa kilichobainishwa, inarudisha \"Not define\".\n *   Vinginevyo, inarudisha thamani ya kazi iliyohesabiwa iliyopiga hadi sehemu 5 za desimali.\n * \n * Ufafanuzi wa Kazi:\n * - Kwa 0 <= x < 10: y = cos(x + 3.0)\n * - Kwa 10 <= x < 20: y = (cos(x + 7.5))^2\n * - Kwa 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * Mfano wa matumizi:\n * calculateFunctionValue(40); // Inarudisha \"Not define\"\n */\nfunction calculateFunctionValue(x: number): string",
      "tr": "/**\n * Belirli bir giriş için fonksiyonun değerini hesapla.\n * \n * Parametreler:\n * - x (sayı): Fonksiyon için giriş değeri.\n * \n * Döndürür:\n * - string: Eğer x tanımlı alanda değilse, \"Not define\" döndürür.\n *   Aksi takdirde, hesaplanan fonksiyon değerini 5 ondalık basamağa yuvarlanmış olarak döndürür.\n * \n * Fonksiyon Tanımları:\n * - 0 <= x < 10 için: y = cos(x + 3.0)\n * - 10 <= x < 20 için: y = (cos(x + 7.5))^2\n * - 20 <= x < 30 için: y = (cos(x + 4.0))^4\n * \n * Örnek kullanım:\n * calculateFunctionValue(40); // \"Not define\" döndürür\n */\nfunction calculateFunctionValue(x: number): string",
      "vi": "/**\n * Tính giá trị của hàm cho một đầu vào đã cho.\n * \n * Tham số:\n * - x (number): Giá trị đầu vào cho hàm.\n * \n * Trả về:\n * - string: Nếu x không nằm trong miền xác định, trả về \"Not define\".\n *   Ngược lại, trả về giá trị hàm đã tính toán được làm tròn đến 5 chữ số thập phân.\n * \n * Định nghĩa hàm:\n * - Với 0 <= x < 10: y = cos(x + 3.0)\n * - Với 10 <= x < 20: y = (cos(x + 7.5))^2\n * - Với 20 <= x < 30: y = (cos(x + 4.0))^4\n * \n * Ví dụ sử dụng:\n * calculateFunctionValue(40); // Trả về \"Not define\"\n */\nfunction calculateFunctionValue(x: number): string"
    },
    "prompt_bertscore": {
      "es": "0.975973867740401",
      "arb": "0.9673159666918523",
      "sw": "0.9960132896222488",
      "tr": "0.9864585724033276",
      "vi": "0.9943279108391677"
    },
    "canonical_solution": "{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}",
    "instruction": {
      "en": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function calculateFunctionValue(x: number): string\n{\n    let y: number;\n\n    if (0 <= x && x < 10) {\n        y = Math.cos(x + 3.0);\n        return y.toFixed(5);\n    } else if (10 <= x && x < 20) {\n        y = Math.cos(x + 7.5);\n        return (y * y).toFixed(5);\n    } else if (20 <= x && x < 30) {\n        y = Math.cos(x + 4.0);\n        return Math.pow(y, 4).toFixed(5);\n    } else {\n        return \"Not define\";\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9190900992196297",
      "sw": "0.9442521986283673",
      "tr": "0.9396636381960803",
      "vi": "0.927375171042976"
    },
    "level": "",
    "test": "function testCalculateFunctionValue(): void {\n    console.assert(calculateFunctionValue(40) === \"Not define\", \"Test failed: x = 40 should be 'Not define'\");\n    console.assert(calculateFunctionValue(5) === \"-0.14550\", \"Test failed: x = 5 should be '-0.14550'\");\n    console.assert(calculateFunctionValue(15) === \"0.76266\", \"Test failed: x = 15 should be '0.76266'\");\n    console.assert(calculateFunctionValue(25) === \"0.31314\", \"Test failed: x = 25 should be '0.31314'\");\n    console.assert(calculateFunctionValue(-1) === \"Not define\", \"Test failed: x = -1 should be 'Not define'\");\n}\n\ntestCalculateFunctionValue();",
    "entry_point": "calculateFunctionValue",
    "signature": "function calculateFunctionValue(x: number): string",
    "docstring": {
      "en": "Calculate the value of the function for a given input.\n\nParameters:\n- x (number): Input value for the function.\n\nReturns:\n- string: If x is not in the defined domain, returns \"Not define\".\n  Otherwise, returns the calculated function value rounded to 5 decimal places.\n\nFunction Definitions:\n- For 0 <= x < 10: y = cos(x + 3.0)\n- For 10 <= x < 20: y = (cos(x + 7.5))^2\n- For 20 <= x < 30: y = (cos(x + 4.0))^4\n\nExample usage:\ncalculateFunctionValue(40); // Returns \"Not define\"\n",
      "es": "Calcular el valor de la función para una entrada dada.\n\nParámetros:\n- x (number): Valor de entrada para la función.\n\nDevuelve:\n- string: Si x no está en el dominio definido, devuelve \"Not define\".\n  De lo contrario, devuelve el valor calculado de la función redondeado a 5 decimales.\n\nDefiniciones de función:\n- Para 0 <= x < 10: y = cos(x + 3.0)\n- Para 10 <= x < 20: y = (cos(x + 7.5))^2\n- Para 20 <= x < 30: y = (cos(x + 4.0))^4\n\nEjemplo de uso:\ncalculateFunctionValue(40); // Devuelve \"Not define\"",
      "arb": "احسب قيمة الدالة لإدخال معين.\n\nالمعطيات:\n- x (رقم): قيمة الإدخال للدالة.\n\nالقيم المعادة:\n- سلسلة نصية: إذا لم يكن x في النطاق المحدد، تُعاد \"غير معرف\".\n  خلاف ذلك، تُعاد قيمة الدالة المحسوبة مقربة إلى 5 منازل عشرية.\n\nتعريفات الدوال:\n- لـ 0 <= x < 10: y = cos(x + 3.0)\n- لـ 10 <= x < 20: y = (cos(x + 7.5))^2\n- لـ 20 <= x < 30: y = (cos(x + 4.0))^4\n\nمثال على الاستخدام:\ncalculateFunctionValue(40); // يُعيد \"غير معرف\"",
      "sw": "Hesabu thamani ya kazi kwa pembejeo iliyotolewa.\n\nVigezo:\n- x (nambari): Thamani ya pembejeo kwa kazi.\n\nInarejesha:\n- string: Ikiwa x haiko katika kikoa kilichobainishwa, inarejesha \"Not define\".\n  Vinginevyo, inarejesha thamani ya kazi iliyohesabiwa iliyokatwa hadi sehemu tano za desimali.\n\nUfafanuzi wa Kazi:\n- Kwa 0 <= x < 10: y = cos(x + 3.0)\n- Kwa 10 <= x < 20: y = (cos(x + 7.5))^2\n- Kwa 20 <= x < 30: y = (cos(x + 4.0))^4\n\nMfano wa matumizi:\ncalculateFunctionValue(40); // Inarejesha \"Not define\"",
      "tr": "Fonksiyonun değerini verilen bir girdi için hesaplayın.\n\nParametreler:\n- x (sayı): Fonksiyon için giriş değeri.\n\nDöndürülenler:\n- string: Eğer x tanımlı alanda değilse, \"Not define\" döndürür.\n  Aksi takdirde, hesaplanan fonksiyon değerini 5 ondalık basamağa yuvarlanmış olarak döndürür.\n\nFonksiyon Tanımları:\n- 0 <= x < 10 için: y = cos(x + 3.0)\n- 10 <= x < 20 için: y = (cos(x + 7.5))^2\n- 20 <= x < 30 için: y = (cos(x + 4.0))^4\n\nÖrnek kullanım:\ncalculateFunctionValue(40); // \"Not define\" döndürür",
      "vi": "Tính giá trị của hàm cho một đầu vào nhất định.\n\nTham số:\n- x (number): Giá trị đầu vào cho hàm.\n\nTrả về:\n- string: Nếu x không nằm trong miền xác định, trả về \"Not define\".\n  Ngược lại, trả về giá trị hàm đã tính toán được làm tròn đến 5 chữ số thập phân.\n\nĐịnh nghĩa hàm:\n- Với 0 <= x < 10: y = cos(x + 3.0)\n- Với 10 <= x < 20: y = (cos(x + 7.5))^2\n- Với 20 <= x < 30: y = (cos(x + 4.0))^4\n\nVí dụ sử dụng:\ncalculateFunctionValue(40); // Trả về \"Not define\""
    },
    "docstring_bertscore": {
      "es": "0.9716004240107748",
      "arb": "0.9397595766701201",
      "sw": "0.983221493083602",
      "tr": "0.9841481038111297",
      "vi": "0.9889730343968481"
    }
  },
  {
    "task_id": "TypeScript/4",
    "prompt": {
      "en": "\n/**\n * Find the maximum and minimum of three distinct integers.\n *\n * @param a - The first integer.\n * @param b - The second integer.\n * @param c - The third integer.\n * @returns A tuple containing the maximum and minimum values respectively.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]",
      "es": "/**\n * Encontrar el máximo y el mínimo de tres enteros distintos.\n *\n * @param a - El primer entero.\n * @param b - El segundo entero.\n * @param c - El tercer entero.\n * @returns Una tupla que contiene los valores máximo y mínimo respectivamente.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]",
      "arb": "/**\n * إيجاد القيمة العظمى والصغرى لثلاثة أعداد صحيحة مميزة.\n *\n * @param a - العدد الصحيح الأول.\n * @param b - العدد الصحيح الثاني.\n * @param c - العدد الصحيح الثالث.\n * @returns زوج يحتوي على القيمتين العظمى والصغرى على التوالي.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]",
      "sw": "/**\n * Pata ya juu na ya chini ya nambari tatu tofauti.\n *\n * @param a - Nambari ya kwanza.\n * @param b - Nambari ya pili.\n * @param c - Nambari ya tatu.\n * @returns Jozi inayojumuisha thamani ya juu na ya chini mtawalia.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]",
      "tr": "/**\n * Üç farklı tam sayının maksimum ve minimumunu bulun.\n *\n * @param a - Birinci tam sayı.\n * @param b - İkinci tam sayı.\n * @param c - Üçüncü tam sayı.\n * @returns Sırasıyla maksimum ve minimum değerleri içeren bir demet.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]",
      "vi": "/**\n * Tìm giá trị lớn nhất và nhỏ nhất của ba số nguyên khác nhau.\n *\n * @param a - Số nguyên thứ nhất.\n * @param b - Số nguyên thứ hai.\n * @param c - Số nguyên thứ ba.\n * @returns Một bộ giá trị chứa giá trị lớn nhất và nhỏ nhất tương ứng.\n *\n * @example\n * const [max, min] = findMaxMin(1, 2, 3);\n * console.assert(max === 3 && min === 1);\n */\nfunction findMaxMin(a: number, b: number, c: number): [number, number]"
    },
    "prompt_bertscore": {
      "es": "1",
      "arb": "0.9854606533690082",
      "sw": "0.9558573772707116",
      "tr": "0.9816733678938161",
      "vi": "0.9919685791732353"
    },
    "canonical_solution": "{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}",
    "instruction": {
      "en": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function findMaxMin(a: number, b: number, c: number): [number, number]\n{\n    let max: number;\n    let min: number;\n\n    if (a > b) {\n        if (a > c) {\n            max = a;\n            min = b < c ? b : c;\n        } else {\n            max = c;\n            min = b;\n        }\n    } else {\n        if (b > c) {\n            max = b;\n            min = a < c ? a : c;\n        } else {\n            max = c;\n            min = a;\n        }\n    }\n\n    return [max, min];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9179912759517447",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.9386158629361213"
    },
    "level": "",
    "test": "(() => {\n    let max: number, min: number, result: [number, number];\n\n    result = findMaxMin(1, 2, 3);\n    [max, min] = result;\n    console.assert(max === 3 && min === 1, 'Test failed for input (1, 2, 3)');\n\n    // Additional tests\n    result = findMaxMin(5, 3, 4);\n    [max, min] = result;\n    console.assert(max === 5 && min === 3, 'Test failed for input (5, 3, 4)');\n\n    result = findMaxMin(10, -2, 7);\n    [max, min] = result;\n    console.assert(max === 10 && min === -2, 'Test failed for input (10, -2, 7)');\n\n    result = findMaxMin(-1, -3, -2);\n    [max, min] = result;\n    console.assert(max === -1 && min === -3, 'Test failed for input (-1, -3, -2)');\n})();",
    "entry_point": "findMaxMin",
    "signature": "function findMaxMin(a: number, b: number, c: number): [number, number]",
    "docstring": {
      "en": "Find the maximum and minimum of three distinct integers.\n\n@param a - The first integer.\n@param b - The second integer.\n@param c - The third integer.\n@returns A tuple containing the maximum and minimum values respectively.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);",
      "es": "Encontrar el máximo y el mínimo de tres enteros distintos.\n\n@param a - El primer entero.\n@param b - El segundo entero.\n@param c - El tercer entero.\n@returns Una tupla que contiene los valores máximo y mínimo respectivamente.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);",
      "arb": "إيجاد القيمة القصوى والدنيا لثلاثة أعداد صحيحة مميزة.\n\n@param a - العدد الصحيح الأول.\n@param b - العدد الصحيح الثاني.\n@param c - العدد الصحيح الثالث.\n@returns زوج يحتوي على القيمتين القصوى والدنيا على التوالي.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);",
      "sw": "Pata ya juu na ya chini ya nambari tatu tofauti.\n\n@param a - Integer ya kwanza.\n@param b - Integer ya pili.\n@param c - Integer ya tatu.\n@returns Tupuli inayojumuisha thamani za juu na chini mtawalia.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);",
      "tr": "Üç farklı tam sayının maksimum ve minimumunu bulun.\n\n@param a - Birinci tam sayı.\n@param b - İkinci tam sayı.\n@param c - Üçüncü tam sayı.\n@returns Maksimum ve minimum değerleri sırasıyla içeren bir demet.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);",
      "vi": "Tìm giá trị lớn nhất và nhỏ nhất của ba số nguyên khác nhau.\n\n@param a - Số nguyên thứ nhất.\n@param b - Số nguyên thứ hai.\n@param c - Số nguyên thứ ba.\n@returns Một bộ giá trị chứa giá trị lớn nhất và nhỏ nhất theo thứ tự tương ứng.\n\n@example\nconst [max, min] = findMaxMin(1, 2, 3);\nconsole.assert(max === 3 && min === 1);"
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9751982161024597",
      "sw": "0.9820869163471306",
      "tr": "0.9833045205828745",
      "vi": "0.938848061851551"
    }
  },
  {
    "task_id": "TypeScript/5",
    "prompt": {
      "en": "\n/**\n * Calculate the distance between two points A (xa, ya) and B (xb, yb).\n * \n * @param xa - x-coordinate of point A\n * @param ya - y-coordinate of point A\n * @param xb - x-coordinate of point B\n * @param yb - y-coordinate of point B\n * @returns The distance between points A and B\n * \n * Example:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
      "es": "/**\n * Calcular la distancia entre dos puntos A (xa, ya) y B (xb, yb).\n * \n * @param xa - coordenada x del punto A\n * @param ya - coordenada y del punto A\n * @param xb - coordenada x del punto B\n * @param yb - coordenada y del punto B\n * @returns La distancia entre los puntos A y B\n * \n * Ejemplo:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
      "arb": "/**\n * حساب المسافة بين نقطتين A (xa, ya) و B (xb, yb).\n * \n * @param xa - الإحداثي السيني للنقطة A\n * @param ya - الإحداثي الصادي للنقطة A\n * @param xb - الإحداثي السيني للنقطة B\n * @param yb - الإحداثي الصادي للنقطة B\n * @returns المسافة بين النقطتين A و B\n * \n * مثال:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
      "sw": "/**\n * Hesabu umbali kati ya pointi mbili A (xa, ya) na B (xb, yb).\n * \n * @param xa - x-kiwianishi cha pointi A\n * @param ya - y-kiwianishi cha pointi A\n * @param xb - x-kiwianishi cha pointi B\n * @param yb - y-kiwianishi cha pointi B\n * @returns Umbali kati ya pointi A na B\n * \n * Mfano:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
      "tr": "/**\n * İki nokta A (xa, ya) ve B (xb, yb) arasındaki mesafeyi hesapla.\n * \n * @param xa - A noktasının x-koordinatı\n * @param ya - A noktasının y-koordinatı\n * @param xb - B noktasının x-koordinatı\n * @param yb - B noktasının y-koordinatı\n * @returns A ve B noktaları arasındaki mesafe\n * \n * Örnek:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
      "vi": "/**\n * Tính khoảng cách giữa hai điểm A (xa, ya) và B (xb, yb).\n * \n * @param xa - tọa độ x của điểm A\n * @param ya - tọa độ y của điểm A\n * @param xb - tọa độ x của điểm B\n * @param yb - tọa độ y của điểm B\n * @returns Khoảng cách giữa điểm A và B\n * \n * Ví dụ:\n * ```\n * calculateDistance(0, 0, 3, 4) === 5\n * ```\n */\nfunction calculateDistance(xa: number, ya: number, xb: number, yb: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9654973069230968",
      "arb": "0.972711959623046",
      "sw": "0.9944564246956973",
      "tr": "0.9999996027392379",
      "vi": "0.9642604355403925"
    },
    "canonical_solution": "{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}",
    "instruction": {
      "en": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number\n{\n    return Math.sqrt((xa - xb) ** 2 + (ya - yb) ** 2);\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9005839052489902",
      "vi": "0.9167933361237233"
    },
    "level": "",
    "test": "const testCalculateDistance = (): void => {\n    console.assert(Math.abs(calculateDistance(0, 0, 3, 4) - 5) < 1e-6);\n    console.assert(Math.abs(calculateDistance(0, 0, 0, 0) - 0) < 1e-6);\n    console.assert(Math.abs(calculateDistance(-1, -1, 2, 2) - 4.242640687) < 1e-6);\n    console.assert(Math.abs(calculateDistance(1.5, 3.9, 4.2, -1.1) - 5.68243) < 1e-6);\n    // console.log(\"All test cases passed!\");\n};\n\ntestCalculateDistance();",
    "entry_point": "calculateDistance",
    "signature": "function calculateDistance(xa: number, ya: number, xb: number, yb: number): number",
    "docstring": {
      "en": "Calculate the distance between two points A (xa, ya) and B (xb, yb).\n\n@param xa - x-coordinate of point A\n@param ya - y-coordinate of point A\n@param xb - x-coordinate of point B\n@param yb - y-coordinate of point B\n@returns The distance between points A and B\n\nExample:\ncalculateDistance(0, 0, 3, 4) === 5",
      "es": "Calcular la distancia entre dos puntos A (xa, ya) y B (xb, yb).\n\n@param xa - coordenada x del punto A\n@param ya - coordenada y del punto A\n@param xb - coordenada x del punto B\n@param yb - coordenada y del punto B\n@returns La distancia entre los puntos A y B\n\nEjemplo:\ncalculateDistance(0, 0, 3, 4) === 5",
      "arb": "احسب المسافة بين نقطتين A (xa, ya) و B (xb, yb).\n\n@param xa - الإحداثي السيني للنقطة A\n@param ya - الإحداثي الصادي للنقطة A\n@param xb - الإحداثي السيني للنقطة B\n@param yb - الإحداثي الصادي للنقطة B\n@returns المسافة بين النقطتين A و B\n\nمثال:\ncalculateDistance(0, 0, 3, 4) === 5",
      "sw": "Hesabu umbali kati ya pointi mbili A (xa, ya) na B (xb, yb).\n\n@param xa - x-kiwianishi cha pointi A\n@param ya - y-kiwianishi cha pointi A\n@param xb - x-kiwianishi cha pointi B\n@param yb - y-kiwianishi cha pointi B\n@returns Umbali kati ya pointi A na B\n\nMfano:\ncalculateDistance(0, 0, 3, 4) === 5",
      "tr": "İki nokta A (xa, ya) ve B (xb, yb) arasındaki mesafeyi hesaplayın.\n\n@param xa - A noktasının x-koordinatı\n@param ya - A noktasının y-koordinatı\n@param xb - B noktasının x-koordinatı\n@param yb - B noktasının y-koordinatı\n@returns A ve B noktaları arasındaki mesafe\n\nÖrnek:\ncalculateDistance(0, 0, 3, 4) === 5",
      "vi": "Tính khoảng cách giữa hai điểm A (xa, ya) và B (xb, yb).\n\n@param xa - tọa độ x của điểm A\n@param ya - tọa độ y của điểm A\n@param xb - tọa độ x của điểm B\n@param yb - tọa độ y của điểm B\n@returns Khoảng cách giữa điểm A và B\n\nVí dụ:\ncalculateDistance(0, 0, 3, 4) === 5"
    },
    "docstring_bertscore": {
      "es": "0.9512012825088728",
      "arb": "0.9687012149691896",
      "sw": "0.9941902599851106",
      "tr": "1",
      "vi": "0.9495164996169349"
    }
  },
  {
    "task_id": "TypeScript/6",
    "prompt": {
      "en": "\n/**\n * Finds the factorial of N and applies modulo 10007 to the result.\n *\n * Parameters:\n * - N (number): A non-negative integer (N <= 10000).\n *\n * Returns:\n * - number: The factorial of N modulo 10007.\n *\n * Examples:\n * processRequest(1) // returns 1\n * processRequest(2) // returns 2\n * processRequest(10) // returns 6266\n */\nfunction processRequest(n: number): number",
      "es": "/**\n * Encuentra el factorial de N y aplica el módulo 10007 al resultado.\n *\n * Parámetros:\n * - N (número): Un entero no negativo (N <= 10000).\n *\n * Devuelve:\n * - número: El factorial de N módulo 10007.\n *\n * Ejemplos:\n * processRequest(1) // returns 1\n * processRequest(2) // returns 2\n * processRequest(10) // returns 6266\n */\nfunction processRequest(n: number): number",
      "arb": "/**\n * يجد مضروب N ويطبق باقي القسمة 10007 على النتيجة.\n *\n * المعلمات:\n * - N (رقم): عدد صحيح غير سالب (N <= 10000).\n *\n * يعيد:\n * - رقم: مضروب N باقي القسمة 10007.\n *\n * أمثلة:\n * processRequest(1) // يعيد 1\n * processRequest(2) // يعيد 2\n * processRequest(10) // يعيد 6266\n */\nfunction processRequest(n: number): number",
      "sw": "/**\n * Inapata factorial ya N na inatumia modulo 10007 kwenye matokeo.\n *\n * Vigezo:\n * - N (nambari): Nambari isiyo hasi (N <= 10000).\n *\n * Inarudisha:\n * - nambari: Factorial ya N modulo 10007.\n *\n * Mifano:\n * processRequest(1) // inarudisha 1\n * processRequest(2) // inarudisha 2\n * processRequest(10) // inarudisha 6266\n */\nfunction processRequest(n: number): number",
      "tr": "/**\n * N'in faktöriyelini bulur ve sonuca 10007 modunu uygular.\n *\n * Parametreler:\n * - N (sayı): Negatif olmayan bir tam sayı (N <= 10000).\n *\n * Döndürür:\n * - sayı: N'in faktöriyelinin 10007 modundaki değeri.\n *\n * Örnekler:\n * processRequest(1) // 1 döndürür\n * processRequest(2) // 2 döndürür\n * processRequest(10) // 6266 döndürür\n */\nfunction processRequest(n: number): number",
      "vi": "/**\n * Tìm giai thừa của N và áp dụng modulo 10007 cho kết quả.\n *\n * Tham số:\n * - N (number): Một số nguyên không âm (N <= 10000).\n *\n * Trả về:\n * - number: Giai thừa của N modulo 10007.\n *\n * Ví dụ:\n * processRequest(1) // trả về 1\n * processRequest(2) // trả về 2\n * processRequest(10) // trả về 6266\n */\nfunction processRequest(n: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9930068201749047",
      "arb": "0.9713698141383933",
      "sw": "0.9889235754319705",
      "tr": "0.9788009739536705",
      "vi": "0.9848514539903742"
    },
    "canonical_solution": "{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}",
    "instruction": {
      "en": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function processRequest(n: number): number\n{\n    let a: number[] = Array(10001).fill(0);\n    a[0] = 1;\n    a[1] = 1;\n    for (let i = 2; i <= 10000; i++) {\n        a[i] = (a[i - 1] * i) % 10007;\n    }\n    return a[n];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.8445147199208429",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "const testProcessRequest = () => {\n    console.assert(processRequest(0) === 1, \"processRequest(0) should return 1\"); // Added test for boundary condition\n    console.assert(processRequest(1) === 1, \"processRequest(1) should return 1\");\n    console.assert(processRequest(2) === 2, \"processRequest(2) should return 2\");\n    console.assert(processRequest(3) === 6, \"processRequest(3) should return 6\");\n    console.assert(processRequest(4) === 24, \"processRequest(4) should return 24\");\n    console.assert(processRequest(10) === 6266, \"processRequest(10) should return 6266\"); // 10! % 10007 = 3628800 % 10007 = 6266\n    console.assert(processRequest(10000) === 6991, \"processRequest(10000) should return 6991\"); // Added a test for upper boundary condition\n};\n\ntestProcessRequest();",
    "entry_point": "processRequest",
    "signature": "function processRequest(n: number): number",
    "docstring": {
      "en": "Finds the factorial of N and applies modulo 10007 to the result.\n\nParameters:\n- N (number): A non-negative integer (N <= 10000).\n\nReturns:\n- number: The factorial of N modulo 10007.\n\nExamples:\nprocessRequest(1) // returns 1\nprocessRequest(2) // returns 2\nprocessRequest(10) // returns 6266",
      "es": "Encuentra el factorial de N y aplica el módulo 10007 al resultado.\n\nParámetros:\n- N (number): Un entero no negativo (N <= 10000).\n\nDevuelve:\n- number: El factorial de N módulo 10007.\n\nEjemplos:\nprocessRequest(1) // devuelve 1\nprocessRequest(2) // devuelve 2\nprocessRequest(10) // devuelve 6266",
      "arb": "يجد مضروب N ويطبق باقي القسمة 10007 على النتيجة.\n\nالمعطيات:\n- N (عدد): عدد صحيح غير سالب (N <= 10000).\n\nالقيم المعادة:\n- عدد: مضروب N باقي القسمة 10007.\n\nأمثلة:\nprocessRequest(1) // يعيد 1\nprocessRequest(2) // يعيد 2\nprocessRequest(10) // يعيد 6266",
      "sw": "Inapata faktoria ya N na inatumia modulo 10007 kwa matokeo.\n\nVigezo:\n- N (nambari): Nambari isiyo hasi (N <= 10000).\n\nInarejesha:\n- nambari: Faktoria ya N modulo 10007.\n\nMifano:\nprocessRequest(1) // inarejesha 1\nprocessRequest(2) // inarejesha 2\nprocessRequest(10) // inarejesha 6266",
      "tr": "N'in faktöriyelini bulur ve sonuca 10007 modunu uygular.\n\nParametreler:\n- N (number): Negatif olmayan bir tamsayı (N <= 10000).\n\nDöndürür:\n- number: N faktöriyelinin 10007 modülüne göre sonucu.\n\nÖrnekler:\nprocessRequest(1) // 1 döndürür\nprocessRequest(2) // 2 döndürür\nprocessRequest(10) // 6266 döndürür",
      "vi": "Tìm giai thừa của N và áp dụng phép chia dư 10007 cho kết quả.\n\nTham số:\n- N (number): Một số nguyên không âm (N <= 10000).\n\nTrả về:\n- number: Giai thừa của N chia dư 10007.\n\nVí dụ:\nprocessRequest(1) // trả về 1\nprocessRequest(2) // trả về 2\nprocessRequest(10) // trả về 6266"
    },
    "docstring_bertscore": {
      "es": "0.9871285526785583",
      "arb": "0.9199501687695107",
      "sw": "0.9705437103836692",
      "tr": "0.9855361329138015",
      "vi": "0.9874483475920244"
    }
  },
  {
    "task_id": "TypeScript/7",
    "prompt": {
      "en": "\n/**\n * Calculate the area of a triangle given its base and height.\n * \n * @param base The base length of the triangle.\n * @param height The height of the triangle.\n * \n * @returns The calculated area of the triangle, rounded to one decimal place.\n * \n * Examples:\n * calculateTriangleArea(1, 2) returns 1.0\n * calculateTriangleArea(3, 4) returns 6.0\n */\nfunction calculateTriangleArea(base: number, height: number): number",
      "es": "/**\n * Calcular el área de un triángulo dada su base y altura.\n * \n * @param base La longitud de la base del triángulo.\n * @param height La altura del triángulo.\n * \n * @returns El área calculada del triángulo, redondeada a un decimal.\n * \n * Ejemplos:\n * calculateTriangleArea(1, 2) returns 1.0\n * calculateTriangleArea(3, 4) returns 6.0\n */\nfunction calculateTriangleArea(base: number, height: number): number",
      "arb": "/**\n * حساب مساحة المثلث المعطى قاعدته وارتفاعه.\n * \n * @param base طول قاعدة المثلث.\n * @param height ارتفاع المثلث.\n * \n * @returns المساحة المحسوبة للمثلث، مقربة إلى منزلة عشرية واحدة.\n * \n * أمثلة:\n * calculateTriangleArea(1, 2) returns 1.0\n * calculateTriangleArea(3, 4) returns 6.0\n */\nfunction calculateTriangleArea(base: number, height: number): number",
      "sw": "/**\n * Hesabu eneo la pembetatu ukizingatia msingi wake na urefu.\n * \n * @param base Urefu wa msingi wa pembetatu.\n * @param height Urefu wa pembetatu.\n * \n * @returns Eneo lililohesabiwa la pembetatu, limezungushwa hadi sehemu moja ya desimali.\n * \n * Mifano:\n * calculateTriangleArea(1, 2) inarudisha 1.0\n * calculateTriangleArea(3, 4) inarudisha 6.0\n */\nfunction calculateTriangleArea(base: number, height: number): number",
      "tr": "/**\n * Üçgenin tabanı ve yüksekliği verildiğinde alanını hesaplayın.\n * \n * @param base Üçgenin taban uzunluğu.\n * @param height Üçgenin yüksekliği.\n * \n * @returns Üçgenin hesaplanan alanı, bir ondalık basamağa yuvarlanmış olarak.\n * \n * Örnekler:\n * calculateTriangleArea(1, 2) 1.0 döndürür\n * calculateTriangleArea(3, 4) 6.0 döndürür\n */\nfunction calculateTriangleArea(base: number, height: number): number",
      "vi": "/**\n * Tính diện tích của một tam giác dựa trên đáy và chiều cao của nó.\n * \n * @param base Độ dài đáy của tam giác.\n * @param height Chiều cao của tam giác.\n * \n * @returns Diện tích được tính của tam giác, làm tròn đến một chữ số thập phân.\n * \n * Ví dụ:\n * calculateTriangleArea(1, 2) trả về 1.0\n * calculateTriangleArea(3, 4) trả về 6.0\n */\nfunction calculateTriangleArea(base: number, height: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9885896777614509",
      "arb": "0.990275851066056",
      "sw": "0.990275851066056",
      "tr": "0.990275851066056",
      "vi": "0.9784319187057077"
    },
    "canonical_solution": "{\n    return (base * height) / 2.0;\n}",
    "instruction": {
      "en": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function calculateTriangleArea(base: number, height: number): number\n{\n    return (base * height) / 2.0;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.9386158629361213"
    },
    "level": "",
    "test": "const testCalculateTriangleArea = () => {\n    // The equivalent of C's assertion with a floating-point comparison in TypeScript.\n    const assertCloseTo = (value: number, expected: number, tolerance: number = 1e-6) => {\n        console.assert(Math.abs(value - expected) < tolerance);\n    };\n\n    assertCloseTo(calculateTriangleArea(1, 2), 1.0);\n    assertCloseTo(calculateTriangleArea(3, 4), 6.0);\n    assertCloseTo(calculateTriangleArea(5, 8), 20.0);\n    assertCloseTo(calculateTriangleArea(7, 3), 10.5);\n    assertCloseTo(calculateTriangleArea(10, 10), 50.0);\n\n    // Uncomment to log the outcome to the console.\n    // console.log(\"All tests passed.\");\n};\n\ntestCalculateTriangleArea();",
    "entry_point": "calculateTriangleArea",
    "signature": "function calculateTriangleArea(base: number, height: number): number",
    "docstring": {
      "en": "Calculate the area of a triangle given its base and height.\n\n@param base The base length of the triangle.\n@param height The height of the triangle.\n\n@returns The calculated area of the triangle, rounded to one decimal place.\n\nExamples:\ncalculateTriangleArea(1, 2) returns 1.0\ncalculateTriangleArea(3, 4) returns 6.0\n",
      "es": "Calcular el área de un triángulo dada su base y altura.\n\n@param base La longitud de la base del triángulo.\n@param height La altura del triángulo.\n\n@returns El área calculada del triángulo, redondeada a un decimal.\n\nEjemplos:\ncalculateTriangleArea(1, 2) returns 1.0\ncalculateTriangleArea(3, 4) returns 6.0",
      "arb": "احسب مساحة المثلث المعطى قاعدته وارتفاعه.\n\n@param base طول قاعدة المثلث.\n@param height ارتفاع المثلث.\n\n@returns المساحة المحسوبة للمثلث، مقربة إلى منزلة عشرية واحدة.\n\nأمثلة:\ncalculateTriangleArea(1, 2) returns 1.0\ncalculateTriangleArea(3, 4) returns 6.0",
      "sw": "Hesabu eneo la pembetatu ukizingatia msingi wake na urefu.\n\n@param base Urefu wa msingi wa pembetatu.\n@param height Urefu wa pembetatu.\n\n@returns Eneo lililohesabiwa la pembetatu, limezungushwa hadi sehemu moja ya desimali.\n\nMifano:\ncalculateTriangleArea(1, 2) inarudisha 1.0\ncalculateTriangleArea(3, 4) inarudisha 6.0",
      "tr": "Üçgenin taban ve yüksekliği verildiğinde alanını hesaplayın.\n\n@param base Üçgenin taban uzunluğu.\n@param height Üçgenin yüksekliği.\n\n@returns Üçgenin hesaplanan alanı, bir ondalık basamağa yuvarlanmış olarak.\n\nÖrnekler:\ncalculateTriangleArea(1, 2) returns 1.0\ncalculateTriangleArea(3, 4) returns 6.0",
      "vi": "Tính diện tích của một tam giác khi biết đáy và chiều cao của nó.\n\n@param base Độ dài đáy của tam giác.\n@param height Chiều cao của tam giác.\n\n@returns Diện tích đã tính của tam giác, làm tròn đến một chữ số thập phân.\n\nVí dụ:\ncalculateTriangleArea(1, 2) trả về 1.0\ncalculateTriangleArea(3, 4) trả về 6.0"
    },
    "docstring_bertscore": {
      "es": "0.9830329928519999",
      "arb": "0.988567431158775",
      "sw": "0.972097397224124",
      "tr": "0.9855998932661137",
      "vi": "0.9842569532599368"
    }
  },
  {
    "task_id": "TypeScript/8",
    "prompt": {
      "en": "\n/**\n * Calculate the Hamming distance between two integers in binary representation.\n * Parameters:\n * - x (number): The first positive integer (x <= 1,000,000,000).\n * - y (number): The second positive integer (y <= 1,000,000,000).\n * Returns:\n * - number: The Hamming distance between x and y, i.e., the number of bits\n *           that need to be flipped to transform x into y in binary.\n * Example usage:\n *   hamming_distance(1, 2); // returns 2\n *   hamming_distance(4, 7); // returns 2\n */\nfunction hamming_distance(x: number, y: number): number",
      "es": "/**\n * Calcular la distancia de Hamming entre dos enteros en representación binaria.\n * Parámetros:\n * - x (number): El primer entero positivo (x <= 1,000,000,000).\n * - y (number): El segundo entero positivo (y <= 1,000,000,000).\n * Devuelve:\n * - number: La distancia de Hamming entre x e y, es decir, el número de bits\n *           que necesitan ser cambiados para transformar x en y en binario.\n * Ejemplo de uso:\n *   hamming_distance(1, 2); // returns 2\n *   hamming_distance(4, 7); // returns 2\n */\nfunction hamming_distance(x: number, y: number): number",
      "arb": "/**\n * حساب مسافة هامنج بين عددين صحيحين في التمثيل الثنائي.\n * المعاملات:\n * - x (عدد): العدد الصحيح الأول الموجب (x <= 1,000,000,000).\n * - y (عدد): العدد الصحيح الثاني الموجب (y <= 1,000,000,000).\n * يعيد:\n * - عدد: مسافة هامنج بين x و y، أي عدد البتات التي تحتاج إلى التغيير لتحويل x إلى y في الثنائي.\n * مثال على الاستخدام:\n *   hamming_distance(1, 2); // يعيد 2\n *   hamming_distance(4, 7); // يعيد 2\n */\nfunction hamming_distance(x: number, y: number): number",
      "sw": "/**\n * Hesabu umbali wa Hamming kati ya nambari mbili katika uwakilishi wa binary.\n * Vigezo:\n * - x (nambari): Nambari ya kwanza chanya (x <= 1,000,000,000).\n * - y (nambari): Nambari ya pili chanya (y <= 1,000,000,000).\n * Inarejesha:\n * - nambari: Umbali wa Hamming kati ya x na y, yaani, idadi ya biti\n *           zinazohitajika kubadilishwa ili kubadilisha x kuwa y katika binary.\n * Mfano wa matumizi:\n *   hamming_distance(1, 2); // inarejesha 2\n *   hamming_distance(4, 7); // inarejesha 2\n */\nfunction hamming_distance(x: number, y: number): number",
      "tr": "/**\n * İki tamsayı arasındaki Hamming mesafesini ikili temsil ile hesaplayın.\n * Parametreler:\n * - x (number): İlk pozitif tamsayı (x <= 1,000,000,000).\n * - y (number): İkinci pozitif tamsayı (y <= 1,000,000,000).\n * Döndürür:\n * - number: x ve y arasındaki Hamming mesafesi, yani x'i ikili olarak y'ye dönüştürmek için\n *           çevrilmesi gereken bit sayısı.\n * Örnek kullanım:\n *   hamming_distance(1, 2); // 2 döndürür\n *   hamming_distance(4, 7); // 2 döndürür\n */\nfunction hamming_distance(x: number, y: number): number",
      "vi": "/**\n * Tính khoảng cách Hamming giữa hai số nguyên trong biểu diễn nhị phân.\n * Tham số:\n * - x (number): Số nguyên dương thứ nhất (x <= 1,000,000,000).\n * - y (number): Số nguyên dương thứ hai (y <= 1,000,000,000).\n * Trả về:\n * - number: Khoảng cách Hamming giữa x và y, tức là số bit\n *           cần phải lật để biến đổi x thành y trong nhị phân.\n * Ví dụ sử dụng:\n *   hamming_distance(1, 2); // trả về 2\n *   hamming_distance(4, 7); // trả về 2\n */\nfunction hamming_distance(x: number, y: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9892660142088746",
      "arb": "0.9885515407282921",
      "sw": "0.9832375821444658",
      "tr": "0.9872836830061464",
      "vi": "0.9921972027418064"
    },
    "canonical_solution": "{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}",
    "instruction": {
      "en": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function hamming_distance(x: number, y: number): number\n{\n    let distance = 0;\n    let xor_result = x ^ y; // XOR x and y to get a number where set bits are the differences\n\n    // Count the number of bits set in xor_result\n    while (xor_result) {\n        if (xor_result & 1) {\n            distance++;\n        }\n        xor_result >>>= 1;\n    }\n\n    return distance;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9230585356023258",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    console.assert(hamming_distance(1, 2) === 2, '01 and 10 have 2 different bits');\n    console.assert(hamming_distance(4, 7) === 2, '100 and 111 have 2 different bits');\n    console.assert(hamming_distance(25, 30) === 3, '11001 and 11110 have 3 different bits');\n    console.assert(hamming_distance(0, 0) === 0, 'Same numbers have 0 different bits');\n    console.assert(hamming_distance(0xFFFFFFF, 0) === 28, 'Max unsigned int and 0 have 28 different bits');\n\n    // If no assertion fails, log success message to the console\n    // console.log(\"All tests passed!\");\n})();",
    "entry_point": "hamming_distance",
    "signature": "function hamming_distance(x: number, y: number): number",
    "docstring": {
      "en": "Calculate the Hamming distance between two integers in binary representation.\nParameters:\n- x (number): The first positive integer (x <= 1,000,000,000).\n- y (number): The second positive integer (y <= 1,000,000,000).\nReturns:\n- number: The Hamming distance between x and y, i.e., the number of bits that need to be flipped to transform x into y in binary.\nExample usage:\n  hamming_distance(1, 2); // returns 2\n  hamming_distance(4, 7); // returns 2",
      "es": "Calcular la distancia de Hamming entre dos enteros en representación binaria.\nParámetros:\n- x (número): El primer entero positivo (x <= 1,000,000,000).\n- y (número): El segundo entero positivo (y <= 1,000,000,000).\nDevuelve:\n- número: La distancia de Hamming entre x e y, es decir, el número de bits que necesitan ser cambiados para transformar x en y en binario.\nEjemplo de uso:\n  hamming_distance(1, 2); // devuelve 2\n  hamming_distance(4, 7); // devuelve 2",
      "arb": "احسب مسافة هامينغ بين عددين صحيحين في التمثيل الثنائي.\nالمعلمات:\n- x (number): العدد الصحيح الموجب الأول (x <= 1,000,000,000).\n- y (number): العدد الصحيح الموجب الثاني (y <= 1,000,000,000).\nالقيم المعادة:\n- number: مسافة هامينغ بين x و y، أي عدد البتات التي تحتاج إلى قلب لتحويل x إلى y في التمثيل الثنائي.\nمثال على الاستخدام:\n  hamming_distance(1, 2); // يعيد 2\n  hamming_distance(4, 7); // يعيد 2",
      "sw": "Hesabu umbali wa Hamming kati ya nambari mbili katika uwakilishi wa binary.  \nVigezo:  \n- x (nambari): Nambari ya kwanza chanya (x <= 1,000,000,000).  \n- y (nambari): Nambari ya pili chanya (y <= 1,000,000,000).  \nInarejesha:  \n- nambari: Umbali wa Hamming kati ya x na y, yaani, idadi ya biti zinazohitajika kubadilishwa ili kubadilisha x kuwa y katika binary.  \nMfano wa matumizi:  \n  hamming_distance(1, 2); // inarejesha 2  \n  hamming_distance(4, 7); // inarejesha 2  ",
      "tr": "İkili gösterimde iki tamsayı arasındaki Hamming mesafesini hesaplayın.\nParametreler:\n- x (number): İlk pozitif tamsayı (x <= 1,000,000,000).\n- y (number): İkinci pozitif tamsayı (y <= 1,000,000,000).\nDöndürür:\n- number: x ve y arasındaki Hamming mesafesi, yani x'i ikili olarak y'ye dönüştürmek için çevrilmesi gereken bit sayısı.\nÖrnek kullanım:\n  hamming_distance(1, 2); // 2 döndürür\n  hamming_distance(4, 7); // 2 döndürür",
      "vi": "Tính khoảng cách Hamming giữa hai số nguyên trong biểu diễn nhị phân.  \nTham số:  \n- x (number): Số nguyên dương thứ nhất (x <= 1,000,000,000).  \n- y (number): Số nguyên dương thứ hai (y <= 1,000,000,000).  \nTrả về:  \n- number: Khoảng cách Hamming giữa x và y, tức là số bit cần phải lật để biến đổi x thành y trong nhị phân.  \nVí dụ sử dụng:  \n  hamming_distance(1, 2); // trả về 2  \n  hamming_distance(4, 7); // trả về 2  "
    },
    "docstring_bertscore": {
      "es": "0.9866413123538796",
      "arb": "0.9875307792001539",
      "sw": "0.9761303884806565",
      "tr": "0.9961414062180163",
      "vi": "0.9882188348400587"
    }
  },
  {
    "task_id": "TypeScript/9",
    "prompt": {
      "en": "\n/**\n * Counts the number of odd integers in a given list of numbers.\n * \n * @param count - The count of numbers to evaluate.\n * @param numbers - A list of integers to be checked for oddness.\n * @returns The count of odd numbers in the input list.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number",
      "es": "/**\n * Cuenta el número de enteros impares en una lista dada de números.\n * \n * @param count - La cantidad de números a evaluar.\n * @param numbers - Una lista de enteros que se verificarán para imparidad.\n * @returns La cantidad de números impares en la lista de entrada.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number",
      "arb": "/**\n * يحسب عدد الأعداد الفردية في قائمة معينة من الأرقام.\n * \n * @param count - عدد الأرقام التي سيتم تقييمها.\n * @param numbers - قائمة من الأعداد الصحيحة التي سيتم التحقق من فرديتها.\n * @returns عدد الأعداد الفردية في قائمة الإدخال.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number",
      "sw": "/**\n * Inahesabu idadi ya nambari zisizo za kawaida katika orodha iliyotolewa ya nambari.\n * \n * @param count - Idadi ya nambari za kutathmini.\n * @param numbers - Orodha ya nambari za kuangaliwa ikiwa ni zisizo za kawaida.\n * @returns Idadi ya nambari zisizo za kawaida katika orodha ya pembejeo.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number",
      "tr": "/**\n * Verilen bir sayı listesindeki tek sayıların sayısını sayar.\n * \n * @param count - Değerlendirilecek sayıların sayısı.\n * @param numbers - Teklik açısından kontrol edilecek tamsayıların listesi.\n * @returns Girdi listesindeki tek sayıların sayısı.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // 3 döndürür\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number",
      "vi": "/**\n * Đếm số lượng số nguyên lẻ trong một danh sách số đã cho.\n * \n * @param count - Số lượng số cần đánh giá.\n * @param numbers - Một danh sách các số nguyên cần kiểm tra tính lẻ.\n * @returns Số lượng số lẻ trong danh sách đầu vào.\n *\n * @example\n * ```\n * countOddNumbers(5, [1, 4, 3, 2, 5]) // trả về 3\n * ```\n */\nfunction countOddNumbers(count: number, numbers: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9927887240165284",
      "arb": "0.9804704623062688",
      "sw": "0.9566693782683823",
      "tr": "0.9878744097593443",
      "vi": "0.9809362505497956"
    },
    "canonical_solution": "{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}",
    "instruction": {
      "en": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function countOddNumbers(count: number, numbers: number[]): number\n{\n    let ans = 0;\n    numbers.slice(0, count).forEach(num => {\n        if (num % 2 === 1)\n            ans++;\n    });\n    return ans;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.9396636381960803",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testCountOddNumbers = (): void => {\n    console.assert(countOddNumbers(5, [1, 4, 3, 2, 5]) === 3, \"Test 1 failed\");\n    console.assert(countOddNumbers(4, [2, 2, 0, 0]) === 0, \"Test 2 failed\");\n    console.assert(countOddNumbers(6, [7, 7, 8, 1, 9, 10]) === 4, \"Test 3 failed\");\n    // console.log(\"All tests passed!\");\n};\n\ntestCountOddNumbers();",
    "entry_point": "countOddNumbers",
    "signature": "function countOddNumbers(count: number, numbers: number[]): number",
    "docstring": {
      "en": "Counts the number of odd integers in a given list of numbers.\n\n@param count - The count of numbers to evaluate.\n@param numbers - A list of integers to be checked for oddness.\n@returns The count of odd numbers in the input list.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```",
      "es": "Cuenta la cantidad de números enteros impares en una lista dada de números.\n\n@param count - La cantidad de números a evaluar.\n@param numbers - Una lista de enteros que se verificarán para imparidad.\n@returns La cantidad de números impares en la lista de entrada.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```",
      "arb": "يحسب عدد الأعداد الفردية في قائمة معينة من الأرقام.\n\n@param count - عدد الأرقام التي سيتم تقييمها.\n@param numbers - قائمة من الأعداد الصحيحة التي سيتم التحقق من فرديتها.\n@returns عدد الأعداد الفردية في قائمة الإدخال.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```",
      "sw": "Hesabu idadi ya nambari zisizo za kawaida katika orodha iliyotolewa ya nambari.\n\n@param count - Idadi ya nambari za kutathmini.\n@param numbers - Orodha ya nambari za mzima zitakazokaguliwa kwa kutokuwa za kawaida.\n@returns Idadi ya nambari zisizo za kawaida katika orodha ya pembejeo.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```",
      "tr": "Verilen bir sayı listesindeki tek sayıların sayısını sayar.\n\n@param count - Değerlendirilecek sayıların sayısı.\n@param numbers - Teklik açısından kontrol edilecek tamsayıların listesi.\n@returns Girdi listesindeki tek sayıların sayısı.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```",
      "vi": "Đếm số lượng số nguyên lẻ trong một danh sách số cho trước.\n\n@param count - Số lượng số cần đánh giá.\n@param numbers - Một danh sách các số nguyên cần được kiểm tra tính lẻ.\n@returns Số lượng số lẻ trong danh sách đầu vào.\n\n@example\n```\ncountOddNumbers(5, [1, 4, 3, 2, 5]) // returns 3\n```"
    },
    "docstring_bertscore": {
      "es": "0.9830544449331516",
      "arb": "0.9714808485213918",
      "sw": "0.9744732152116824",
      "tr": "0.9850788857766593",
      "vi": "0.9844236041496252"
    }
  },
  {
    "task_id": "TypeScript/10",
    "prompt": {
      "en": "\n/**\n * Calculate the sum of even numbers in a given list.\n * \n * @param numbers An array of integers.\n * @param size The size of the array.\n * @returns The sum of even numbers in the input array.\n * \n * Examples:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // Returns 6\n * calculateEvenSum([2, 2, 0, 0], 4); // Returns 4\n * calculateEvenSum([7, 11, 19], 3); // Returns 0 (no even numbers)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number",
      "es": "/**\n * Calcular la suma de números pares en una lista dada.\n * \n * @param numbers Un arreglo de enteros.\n * @param size El tamaño del arreglo.\n * @returns La suma de los números pares en el arreglo de entrada.\n * \n * Ejemplos:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // Devuelve 6\n * calculateEvenSum([2, 2, 0, 0], 4); // Devuelve 4\n * calculateEvenSum([7, 11, 19], 3); // Devuelve 0 (sin números pares)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number",
      "arb": "/**\n * حساب مجموع الأعداد الزوجية في قائمة معينة.\n * \n * @param numbers مصفوفة من الأعداد الصحيحة.\n * @param size حجم المصفوفة.\n * @returns مجموع الأعداد الزوجية في المصفوفة المدخلة.\n * \n * أمثلة:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // يعيد 6\n * calculateEvenSum([2, 2, 0, 0], 4); // يعيد 4\n * calculateEvenSum([7, 11, 19], 3); // يعيد 0 (لا توجد أعداد زوجية)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number",
      "sw": "/**\n * Hesabu jumla ya namba shufwa katika orodha iliyotolewa.\n * \n * @param numbers Orodha ya namba za mzima.\n * @param size Ukubwa wa orodha.\n * @returns Jumla ya namba shufwa katika orodha ya ingizo.\n * \n * Mifano:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // Inarudisha 6\n * calculateEvenSum([2, 2, 0, 0], 4); // Inarudisha 4\n * calculateEvenSum([7, 11, 19], 3); // Inarudisha 0 (hakuna namba shufwa)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number",
      "tr": "/**\n * Verilen bir listedeki çift sayıların toplamını hesapla.\n * \n * @param numbers Bir tamsayı dizisi.\n * @param size Dizinin boyutu.\n * @returns Girdi dizisindeki çift sayıların toplamı.\n * \n * Örnekler:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // 6 döndürür\n * calculateEvenSum([2, 2, 0, 0], 4); // 4 döndürür\n * calculateEvenSum([7, 11, 19], 3); // 0 döndürür (çift sayı yok)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number",
      "vi": "/**\n * Tính tổng của các số chẵn trong một danh sách cho trước.\n * \n * @param numbers Một mảng các số nguyên.\n * @param size Kích thước của mảng.\n * @returns Tổng của các số chẵn trong mảng đầu vào.\n * \n * Ví dụ:\n * \n * calculateEvenSum([1, 4, 3, 2, 5], 5); // Trả về 6\n * calculateEvenSum([2, 2, 0, 0], 4); // Trả về 4\n * calculateEvenSum([7, 11, 19], 3); // Trả về 0 (không có số chẵn nào)\n */\nfunction calculateEvenSum(numbers: number[], size: number): number"
    },
    "prompt_bertscore": {
      "es": "0.996623482152788",
      "arb": "0.9979133878472285",
      "sw": "0.9618472750411997",
      "tr": "0.9979133878472285",
      "vi": "0.9985609228894022"
    },
    "canonical_solution": "{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}",
    "instruction": {
      "en": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function calculateEvenSum(numbers: number[], size: number): number\n{\n    let sum = 0;\n    for (let i = 0; i < size; i++) {\n        if (numbers[i] % 2 === 0) { // Only sum the even numbers\n            sum += numbers[i];\n        }\n    }\n    return sum;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "(() => {\n    console.assert(calculateEvenSum([1, 4, 3, 2, 5], 5) === 6, \"Test 1 failed\");\n    console.assert(calculateEvenSum([2, 2, 0, 0], 4) === 4, \"Test 2 failed\");\n    console.assert(calculateEvenSum([7, 11, 19], 3) === 0, \"Test 3 failed - no even numbers\");\n    console.assert(calculateEvenSum([12, 14, 16, 18, 20], 5) === (12 + 14 + 16 + 18 + 20), \"Test 4 failed - all even numbers\");\n    // console.log(\"All tests passed successfully.\");\n})();",
    "entry_point": "calculateEvenSum",
    "signature": "function calculateEvenSum(numbers: number[], size: number): number",
    "docstring": {
      "en": "Calculate the sum of even numbers in a given list.\n\n@param numbers An array of integers.\n@param size The size of the array.\n@returns The sum of even numbers in the input array.\n\nExamples:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // Returns 6\ncalculateEvenSum([2, 2, 0, 0], 4); // Returns 4\ncalculateEvenSum([7, 11, 19], 3); // Returns 0 (no even numbers)",
      "es": "Calcular la suma de números pares en una lista dada.\n\n@param numbers Un arreglo de enteros.\n@param size El tamaño del arreglo.\n@returns La suma de los números pares en el arreglo de entrada.\n\nEjemplos:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // Devuelve 6\ncalculateEvenSum([2, 2, 0, 0], 4); // Devuelve 4\ncalculateEvenSum([7, 11, 19], 3); // Devuelve 0 (sin números pares)",
      "arb": "احسب مجموع الأرقام الزوجية في قائمة معينة.\n\n@param numbers مصفوفة من الأعداد الصحيحة.\n@param size حجم المصفوفة.\n@returns مجموع الأرقام الزوجية في المصفوفة المدخلة.\n\nأمثلة:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // يعيد 6\ncalculateEvenSum([2, 2, 0, 0], 4); // يعيد 4\ncalculateEvenSum([7, 11, 19], 3); // يعيد 0 (لا توجد أرقام زوجية)",
      "sw": "Hesabu jumla ya namba shufwa katika orodha iliyotolewa.\n\n@param numbers Mfululizo wa namba za mzima.\n@param size Ukubwa wa mfululizo.\n@returns Jumla ya namba shufwa katika mfululizo wa pembejeo.\n\nMifano:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // Inarudisha 6\ncalculateEvenSum([2, 2, 0, 0], 4); // Inarudisha 4\ncalculateEvenSum([7, 11, 19], 3); // Inarudisha 0 (hakuna namba shufwa)",
      "tr": "Verilen bir listedeki çift sayıların toplamını hesaplayın.\n\n@param numbers Bir tamsayı dizisi.\n@param size Dizinin boyutu.\n@returns Girdi dizisindeki çift sayıların toplamı.\n\nÖrnekler:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // 6 döndürür\ncalculateEvenSum([2, 2, 0, 0], 4); // 4 döndürür\ncalculateEvenSum([7, 11, 19], 3); // 0 döndürür (çift sayı yok)",
      "vi": "Tính tổng các số chẵn trong một danh sách cho trước.\n\n@param numbers Một mảng các số nguyên.\n@param size Kích thước của mảng.\n@returns Tổng các số chẵn trong mảng đầu vào.\n\nVí dụ:\n\ncalculateEvenSum([1, 4, 3, 2, 5], 5); // Trả về 6\ncalculateEvenSum([2, 2, 0, 0], 4); // Trả về 4\ncalculateEvenSum([7, 11, 19], 3); // Trả về 0 (không có số chẵn)"
    },
    "docstring_bertscore": {
      "es": "0.9959954128879556",
      "arb": "0.9976412642252107",
      "sw": "0.9501030551321309",
      "tr": "0.9976412642252107",
      "vi": "0.9988999849498288"
    }
  },
  {
    "task_id": "TypeScript/11",
    "prompt": {
      "en": "\n/**\n * Determine if two closed intervals intersect.\n * Args:\n *    a, b: Representing the first closed interval [a, b] where 0 <= a <= b <= 1000.\n *    c, d: Representing the second closed interval [c, d] where 0 <= c <= d <= 1000.\n * Returns:\n *    boolean: true if the intervals intersect, false otherwise.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
      "es": "/**\n * Determinar si dos intervalos cerrados se intersectan.\n * Args:\n *    a, b: Representando el primer intervalo cerrado [a, b] donde 0 <= a <= b <= 1000.\n *    c, d: Representando el segundo intervalo cerrado [c, d] donde 0 <= c <= d <= 1000.\n * Returns:\n *    booleano: true si los intervalos se intersectan, false en caso contrario.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
      "arb": "/**\n * تحديد ما إذا كان هناك تقاطع بين فترتين مغلقتين.\n * Args:\n *    a, b: تمثل الفترة المغلقة الأولى [a, b] حيث 0 <= a <= b <= 1000.\n *    c, d: تمثل الفترة المغلقة الثانية [c, d] حيث 0 <= c <= d <= 1000.\n * Returns:\n *    boolean: true إذا كانت الفترات تتقاطع، false خلاف ذلك.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
      "sw": "/**\n * Kuamua kama vipindi viwili vilivyofungwa vinakatana.\n * Args:\n *    a, b: Inawakilisha kipindi cha kwanza kilichofungwa [a, b] ambapo 0 <= a <= b <= 1000.\n *    c, d: Inawakilisha kipindi cha pili kilichofungwa [c, d] ambapo 0 <= c <= d <= 1000.\n * Returns:\n *    boolean: kweli ikiwa vipindi vinakatana, vinginevyo si kweli.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
      "tr": "/**\n * İki kapalı aralığın kesişip kesişmediğini belirleyin.\n * Argümanlar:\n *    a, b: İlk kapalı aralığı temsil eder [a, b] burada 0 <= a <= b <= 1000.\n *    c, d: İkinci kapalı aralığı temsil eder [c, d] burada 0 <= c <= d <= 1000.\n * Döndürür:\n *    boolean: Aralıklar kesişiyorsa true, aksi takdirde false.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
      "vi": "/**\n * Xác định xem hai khoảng đóng có giao nhau không.\n * Tham số:\n *    a, b: Đại diện cho khoảng đóng đầu tiên [a, b] với 0 <= a <= b <= 1000.\n *    c, d: Đại diện cho khoảng đóng thứ hai [c, d] với 0 <= c <= d <= 1000.\n * Trả về:\n *    boolean: true nếu các khoảng giao nhau, false nếu không.\n */\nfunction areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean"
    },
    "prompt_bertscore": {
      "es": "1",
      "arb": "0.9678629947612223",
      "sw": "0.983557178427551",
      "tr": "0.9748271745506866",
      "vi": "0.9568300702466395"
    },
    "canonical_solution": "{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}",
    "instruction": {
      "en": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean\n{\n    return (c <= a && b <= d) ||\n           (a <= c && c <= b && b <= d) ||\n           (a <= c && d <= b) ||\n           (c <= a && a <= d && d <= b);\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9166161578238401",
      "tr": "0.878088021444884",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "(() => {\n    console.assert(areIntervalsIntersecting(1, 1, 1, 2) === true);\n    console.assert(areIntervalsIntersecting(3, 5, 2, 6) === true);\n    console.assert(areIntervalsIntersecting(3, 5, 4, 7) === true);\n    console.assert(areIntervalsIntersecting(3, 5, 6, 7) === false);\n    // Additional test cases\n    console.assert(areIntervalsIntersecting(0, 0, 0, 0) === true);\n    console.assert(areIntervalsIntersecting(1, 3, 2, 4) === true);\n    console.assert(areIntervalsIntersecting(1, 3, 4, 6) === false);\n    console.assert(areIntervalsIntersecting(10, 20, 20, 30) === true);\n    console.assert(areIntervalsIntersecting(10, 20, 21, 30) === false);\n})();",
    "entry_point": "areIntervalsIntersecting",
    "signature": "function areIntervalsIntersecting(a: number, b: number, c: number, d: number): boolean",
    "docstring": {
      "en": "Determine if two closed intervals intersect.\nArgs:\n    a, b: Representing the first closed interval [a, b] where 0 <= a <= b <= 1000.\n    c, d: Representing the second closed interval [c, d] where 0 <= c <= d <= 1000.\nReturns:\n    boolean: true if the intervals intersect, false otherwise.",
      "es": "Determinar si dos intervalos cerrados se intersectan.\nArgs:\n    a, b: Representando el primer intervalo cerrado [a, b] donde 0 <= a <= b <= 1000.\n    c, d: Representando el segundo intervalo cerrado [c, d] donde 0 <= c <= d <= 1000.\nReturns:\n    boolean: verdadero si los intervalos se intersectan, falso en caso contrario.",
      "arb": "تحديد ما إذا كان هناك تقاطع بين فترتين مغلقتين.\n\nArgs:\n    a, b: تمثل الفترة المغلقة الأولى [a, b] حيث 0 <= a <= b <= 1000.\n    c, d: تمثل الفترة المغلقة الثانية [c, d] حيث 0 <= c <= d <= 1000.\n\nReturns:\n    boolean: صحيح إذا كانت الفترات تتقاطع، خطأ خلاف ذلك.",
      "sw": "Amua kama vipindi viwili vilivyofungwa vinakatana.\nArgs:\n    a, b: Inawakilisha kipindi cha kwanza kilichofungwa [a, b] ambapo 0 <= a <= b <= 1000.\n    c, d: Inawakilisha kipindi cha pili kilichofungwa [c, d] ambapo 0 <= c <= d <= 1000.\nReturns:\n    boolean: kweli ikiwa vipindi vinakatana, vinginevyo si kweli.",
      "tr": "Determine if two closed intervals intersect.  \nArgümanlar:  \n    a, b: İlk kapalı aralığı temsil eder [a, b] burada 0 <= a <= b <= 1000.  \n    c, d: İkinci kapalı aralığı temsil eder [c, d] burada 0 <= c <= d <= 1000.  \nDöndürür:  \n    boolean: Aralıklar kesişiyorsa true, aksi takdirde false.",
      "vi": "Xác định xem hai khoảng đóng có giao nhau hay không.\nArgs:\n    a, b: Đại diện cho khoảng đóng đầu tiên [a, b] với 0 <= a <= b <= 1000.\n    c, d: Đại diện cho khoảng đóng thứ hai [c, d] với 0 <= c <= d <= 1000.\nReturns:\n    boolean: true nếu các khoảng giao nhau, false nếu không."
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.955973576043617",
      "sw": "0.9765610191467401",
      "tr": "0.9621674672154279",
      "vi": "0.9592386622470686"
    }
  },
  {
    "task_id": "TypeScript/12",
    "prompt": {
      "en": "\n/**\n * You are given three digits a, b, c. Two of them are equal, but the third one\n * is different from the other two. Find the value that occurs exactly once.\n * \n * Examples:\n * ```\n * extraNumber(0, 0, 1) // returns 1\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number",
      "es": "/**\n * Se te dan tres dígitos a, b, c. Dos de ellos son iguales, pero el tercero\n * es diferente de los otros dos. Encuentra el valor que ocurre exactamente una vez.\n * \n * Ejemplos:\n * ```\n * extraNumber(0, 0, 1) // returns 1\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number",
      "arb": "/**\n * لديك ثلاثة أرقام a، b، c. اثنان منهما متساويان، لكن الثالث\n * يختلف عن الآخرين. جد القيمة التي تظهر مرة واحدة فقط.\n * \n * أمثلة:\n * ```\n * extraNumber(0, 0, 1) // returns 1\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number",
      "sw": "/**\n * Umepewa tarakimu tatu a, b, c. Mbili kati ya hizo ni sawa, lakini ya tatu\n * ni tofauti na zile mbili. Tafuta thamani inayotokea mara moja tu.\n * \n * Mifano:\n * ```\n * extraNumber(0, 0, 1) // inarudisha 1\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number",
      "tr": "/**\n * Üç basamaklı sayılar a, b, c verilmektedir. Bunlardan ikisi eşittir, ancak üçüncüsü\n * diğer ikisinden farklıdır. Tam olarak bir kez olan değeri bulun.\n * \n * Örnekler:\n * ```\n * extraNumber(0, 0, 1) // 1 döner\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number",
      "vi": "/**\n * Bạn được cho ba chữ số a, b, c. Hai trong số đó là bằng nhau, nhưng chữ số thứ ba\n * khác với hai chữ số còn lại. Tìm giá trị xuất hiện đúng một lần.\n * \n * Ví dụ:\n * ```\n * extraNumber(0, 0, 1) // returns 1\n * ```\n */\nfunction extraNumber(a: number, b: number, c: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9873514159660793",
      "arb": "0.9598937452437216",
      "sw": "0.9806800173582606",
      "tr": "0.9763171010388293",
      "vi": "0.9791879059359265"
    },
    "canonical_solution": "{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}",
    "instruction": {
      "en": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nProporciona una descripción concisa en lenguaje natural (docstring) del código TypeScript en español usando como máximo 500 caracteres.",
      "arb": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، باستخدام 500 حرف كحد أقصى.",
      "sw": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function extraNumber(a: number, b: number, c: number): number\n{\n    if (a === b) {\n        return c;\n    } else if (a === c) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9396636381960803",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "(() => {\n    console.assert(extraNumber(2, 7, 2) === 7, \"Test 1 failed\");\n    console.assert(extraNumber(3, 2, 2) === 3, \"Test 2 failed\");\n    console.assert(extraNumber(5, 5, 1) === 1, \"Test 3 failed\");\n    console.assert(extraNumber(500000000, 3, 500000000) === 3, \"Test 4 failed\");\n    console.assert(extraNumber(500000000, 500000000, 3) === 3, \"Test 5 failed\");\n\n    // console.log(\"All tests passed!\");\n})();",
    "entry_point": "extraNumber",
    "signature": "function extraNumber(a: number, b: number, c: number): number",
    "docstring": {
      "en": "You are given three digits a, b, c. Two of them are equal, but the third one\nis different from the other two. Find the value that occurs exactly once.\n\nExamples:\nextraNumber(0, 0, 1) // returns 1\n",
      "es": "Se te dan tres dígitos a, b, c. Dos de ellos son iguales, pero el tercero es diferente de los otros dos. Encuentra el valor que ocurre exactamente una vez.\n\nEjemplos:\nextraNumber(0, 0, 1) // devuelve 1",
      "arb": "أنت مُعطى ثلاثة أرقام a، b، c. اثنان منهما متساويان، لكن الرقم الثالث يختلف عن الاثنين الآخرين. ابحث عن القيمة التي تظهر مرة واحدة فقط.\n\nأمثلة:\nextraNumber(0, 0, 1) // يعيد 1",
      "sw": "Unapewa tarakimu tatu a, b, c. Mbili kati ya hizo ni sawa, lakini ya tatu ni tofauti na zile mbili nyingine. Tafuta thamani inayotokea mara moja tu.\n\nMifano:\nextraNumber(0, 0, 1) // inarudisha 1",
      "tr": "Üç rakam verilir: a, b, c. Bunlardan ikisi eşittir, ancak üçüncüsü diğer ikisinden farklıdır. Tam olarak bir kez geçen değeri bulun.\n\nÖrnekler:\nextraNumber(0, 0, 1) // 1 döndürür",
      "vi": "Bạn được cung cấp ba chữ số a, b, c. Hai trong số chúng bằng nhau, nhưng chữ số thứ ba khác với hai chữ số còn lại. Tìm giá trị xuất hiện chính xác một lần.\n\nVí dụ:\nextraNumber(0, 0, 1) // trả về 1"
    },
    "docstring_bertscore": {
      "es": "0.9835398975844009",
      "arb": "0.9639593118827436",
      "sw": "0.9735168099269994",
      "tr": "0.9685850161962841",
      "vi": "0.9681772280240195"
    }
  },
  {
    "task_id": "TypeScript/13",
    "prompt": {
      "en": "\n/**\n * Calculate the total score for a student based on the scores in different subjects.\n * @param score1 - The score for the first subject.\n * @param score2 - The score for the second subject.\n * @param score3 - The score for the third subject.\n * @param score4 - The score for the fourth subject.\n * @param score5 - The score for the fifth subject.\n * @returns The total score obtained by summing up the scores in all subjects.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
      "es": "/**\n * Calcular la puntuación total para un estudiante basada en las puntuaciones en diferentes materias.\n * @param score1 - La puntuación para la primera materia.\n * @param score2 - La puntuación para la segunda materia.\n * @param score3 - La puntuación para la tercera materia.\n * @param score4 - La puntuación para la cuarta materia.\n * @param score5 - La puntuación para la quinta materia.\n * @returns La puntuación total obtenida al sumar las puntuaciones en todas las materias.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
      "arb": "/**\n * حساب المجموع الكلي للدرجات لطالب بناءً على الدرجات في مواد مختلفة.\n * @param score1 - الدرجة للمادة الأولى.\n * @param score2 - الدرجة للمادة الثانية.\n * @param score3 - الدرجة للمادة الثالثة.\n * @param score4 - الدرجة للمادة الرابعة.\n * @param score5 - الدرجة للمادة الخامسة.\n * @returns المجموع الكلي للدرجات المحصل عليه بجمع الدرجات في جميع المواد.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
      "sw": "/**\n * Hesabu jumla ya alama kwa mwanafunzi kulingana na alama katika masomo tofauti.\n * @param score1 - Alama kwa somo la kwanza.\n * @param score2 - Alama kwa somo la pili.\n * @param score3 - Alama kwa somo la tatu.\n * @param score4 - Alama kwa somo la nne.\n * @param score5 - Alama kwa somo la tano.\n * @returns Jumla ya alama iliyopatikana kwa kujumlisha alama katika masomo yote.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
      "tr": "/**\n * Farklı derslerdeki puanlara göre bir öğrencinin toplam puanını hesaplayın.\n * @param score1 - Birinci dersin puanı.\n * @param score2 - İkinci dersin puanı.\n * @param score3 - Üçüncü dersin puanı.\n * @param score4 - Dördüncü dersin puanı.\n * @param score5 - Beşinci dersin puanı.\n * @returns Tüm derslerdeki puanların toplanmasıyla elde edilen toplam puan.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // 500 döndürür\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
      "vi": "/**\n * Tính tổng điểm cho một học sinh dựa trên điểm số ở các môn học khác nhau.\n * @param score1 - Điểm cho môn học thứ nhất.\n * @param score2 - Điểm cho môn học thứ hai.\n * @param score3 - Điểm cho môn học thứ ba.\n * @param score4 - Điểm cho môn học thứ tư.\n * @param score5 - Điểm cho môn học thứ năm.\n * @returns Tổng điểm đạt được bằng cách cộng điểm số ở tất cả các môn học.\n * @example\n * calculateTotalScore(100, 100, 100, 100, 100); // returns 500\n */\nfunction calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9929253817186804",
      "arb": "0.9977503123043988",
      "sw": "0.9724827401633318",
      "tr": "0.9670575485661259",
      "vi": "0.9682981939260698"
    },
    "canonical_solution": "{\n    return score1 + score2 + score3 + score4 + score5;\n}",
    "instruction": {
      "en": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español usando como máximo 500 caracteres.",
      "arb": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number\n{\n    return score1 + score2 + score3 + score4 + score5;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.892025319390959",
      "vi": "0.9072163723021262"
    },
    "level": "",
    "test": "const testCalculateTotalScore = (): void => {\n    console.assert(calculateTotalScore(100, 100, 100, 100, 100) === 500);\n    console.assert(calculateTotalScore(0, 0, 0, 0, 0) === 0);\n    console.assert(calculateTotalScore(20, 30, 40, 10, 50) === 150);\n    console.assert(calculateTotalScore(23, 45, 67, 89, 12) === 236);\n    console.assert(calculateTotalScore(5, 5, 5, 5, 5) === 25);\n};\n\ntestCalculateTotalScore();",
    "entry_point": "calculateTotalScore",
    "signature": "function calculateTotalScore(score1: number, score2: number, score3: number, score4: number, score5: number): number",
    "docstring": {
      "en": "Calculate the total score for a student based on the scores in different subjects.\n@param score1 - The score for the first subject.\n@param score2 - The score for the second subject.\n@param score3 - The score for the third subject.\n@param score4 - The score for the fourth subject.\n@param score5 - The score for the fifth subject.\n@returns The total score obtained by summing up the scores in all subjects.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500",
      "es": "Calcular la puntuación total para un estudiante basado en las puntuaciones en diferentes materias.\n@param score1 - La puntuación para la primera materia.\n@param score2 - La puntuación para la segunda materia.\n@param score3 - La puntuación para la tercera materia.\n@param score4 - La puntuación para la cuarta materia.\n@param score5 - La puntuación para la quinta materia.\n@returns La puntuación total obtenida al sumar las puntuaciones en todas las materias.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500",
      "arb": "احسب المجموع الكلي للدرجات لطالب بناءً على الدرجات في مواد مختلفة.\n@param score1 - الدرجة للموضوع الأول.\n@param score2 - الدرجة للموضوع الثاني.\n@param score3 - الدرجة للموضوع الثالث.\n@param score4 - الدرجة للموضوع الرابع.\n@param score5 - الدرجة للموضوع الخامس.\n@returns المجموع الكلي للدرجات المحصل عليه من خلال جمع الدرجات في جميع المواد.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500",
      "sw": "Hesabu jumla ya alama kwa mwanafunzi kulingana na alama katika masomo tofauti.\n@param score1 - Alama kwa somo la kwanza.\n@param score2 - Alama kwa somo la pili.\n@param score3 - Alama kwa somo la tatu.\n@param score4 - Alama kwa somo la nne.\n@param score5 - Alama kwa somo la tano.\n@returns Jumla ya alama inayopatikana kwa kujumlisha alama katika masomo yote.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500",
      "tr": "Farklı derslerdeki puanlara göre bir öğrencinin toplam puanını hesaplayın.\n@param score1 - İlk dersin puanı.\n@param score2 - İkinci dersin puanı.\n@param score3 - Üçüncü dersin puanı.\n@param score4 - Dördüncü dersin puanı.\n@param score5 - Beşinci dersin puanı.\n@returns Tüm derslerdeki puanların toplanmasıyla elde edilen toplam puan.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500",
      "vi": "Tính tổng điểm cho một học sinh dựa trên điểm số trong các môn học khác nhau.\n@param score1 - Điểm số cho môn học thứ nhất.\n@param score2 - Điểm số cho môn học thứ hai.\n@param score3 - Điểm số cho môn học thứ ba.\n@param score4 - Điểm số cho môn học thứ tư.\n@param score5 - Điểm số cho môn học thứ năm.\n@returns Tổng điểm đạt được bằng cách cộng điểm số trong tất cả các môn học.\n@example\ncalculateTotalScore(100, 100, 100, 100, 100); // returns 500"
    },
    "docstring_bertscore": {
      "es": "0.9902665154381474",
      "arb": "0.9975739285260399",
      "sw": "0.9660479103393256",
      "tr": "0.986598010930814",
      "vi": "0.9640488941845904"
    }
  },
  {
    "task_id": "TypeScript/14",
    "prompt": {
      "en": "\n/**\n * Decode a series of numbers to reveal the pattern and understand the actual values\n * each digit represents.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * Parameters:\n * - dataStr: A string representing a series of numbers. Length does not exceed 100.\n *\n * Returns:\n * number: The result of each data string corresponding to the right-hand side of the equation.\n *\n * Example usage:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */\nfunction decodeNumbers(dataStr: string): number",
      "es": "/**\n * Decodificar una serie de números para revelar el patrón y entender los valores reales\n * que representa cada dígito.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * Parámetros:\n * - dataStr: Una cadena que representa una serie de números. La longitud no excede 100.\n *\n * Devuelve:\n * número: El resultado de cada cadena de datos correspondiente al lado derecho de la ecuación.\n *\n * Ejemplo de uso:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */ \nfunction decodeNumbers(dataStr: string): number",
      "arb": "/**\n * فك سلسلة من الأرقام للكشف عن النمط وفهم القيم الفعلية\n * التي يمثلها كل رقم.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * المعاملات:\n * - dataStr: سلسلة تمثل سلسلة من الأرقام. الطول لا يتجاوز 100.\n *\n * يعيد:\n * number: نتيجة كل سلسلة بيانات تقابل الجانب الأيمن من المعادلة.\n *\n * مثال على الاستخدام:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */ \nfunction decodeNumbers(dataStr: string): number",
      "sw": "/**\n * Fafanua mfululizo wa namba ili kufichua muundo na kuelewa thamani halisi\n * kila tarakimu inawakilisha.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * Vigezo:\n * - dataStr: Kamba inayowakilisha mfululizo wa namba. Urefu hauzidi 100.\n *\n * Inarudisha:\n * number: Matokeo ya kila kamba ya data inayolingana na upande wa kulia wa mlingano.\n *\n * Mfano wa matumizi:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */\nfunction decodeNumbers(dataStr: string): number",
      "tr": "/**\n * Bir dizi sayıyı çözerek deseni ortaya çıkarın ve her bir rakamın\n * temsil ettiği gerçek değerleri anlayın.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * Parametreler:\n * - dataStr: Bir dizi sayıyı temsil eden bir string. Uzunluğu 100'ü geçmez.\n *\n * Döndürür:\n * number: Her bir veri dizisinin denklemde sağ tarafta karşılık gelen sonucu.\n *\n * Örnek kullanım:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */\nfunction decodeNumbers(dataStr: string): number",
      "vi": "/**\n * Giải mã một chuỗi số để tiết lộ mẫu và hiểu các giá trị thực tế\n * mà mỗi chữ số đại diện.\n * 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n *\n * Tham số:\n * - dataStr: Một chuỗi đại diện cho một loạt các số. Độ dài không vượt quá 100.\n *\n * Trả về:\n * number: Kết quả của mỗi chuỗi dữ liệu tương ứng với phía bên phải của phương trình.\n *\n * Ví dụ sử dụng:\n * console.assert(decodeNumbers(\"0000\") === 4);\n */ \nfunction decodeNumbers(dataStr: string): number"
    },
    "prompt_bertscore": {
      "es": "0.9839834392252518",
      "arb": "0.9809153943597869",
      "sw": "0.9697360792543813",
      "tr": "0.9659740198375806",
      "vi": "0.9886562189390975"
    },
    "canonical_solution": "{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}",
    "instruction": {
      "en": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function decodeNumbers(dataStr: string): number\n{\n    const a: number[] = [1, 0, 0, 0, 1, 0, 1, 0, 2, 1];\n    let ans: number = 0;\n    \n    for (let i = 0; i < dataStr.length; i++) {\n        ans += a[parseInt(dataStr[i])];\n    }\n    \n    return ans;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.8445147199208429",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "const testDecodeNumbers = (): void => {\n    console.assert(decodeNumbers(\"0000\") === 4);\n    console.assert(decodeNumbers(\"8888\") === 8);\n    console.assert(decodeNumbers(\"1234\") === 1);\n    console.assert(decodeNumbers(\"5678\") === 3);\n    console.assert(decodeNumbers(\"9012\") === 2);\n    console.assert(decodeNumbers(\"1357\") === 0);\n    console.assert(decodeNumbers(\"2468\") === 4);\n\n    // Additional test samples\n    console.assert(decodeNumbers(\"9999\") === 4);\n    console.assert(decodeNumbers(\"1111\") === 0);\n    console.assert(decodeNumbers(\"2222\") === 0);\n    console.assert(decodeNumbers(\"3333\") === 0);\n    console.assert(decodeNumbers(\"4444\") === 4);\n    console.assert(decodeNumbers(\"5555\") === 0);\n    console.assert(decodeNumbers(\"6666\") === 4);\n    console.assert(decodeNumbers(\"7777\") === 0);\n    console.assert(decodeNumbers(\"0001\") === 3);\n    console.assert(decodeNumbers(\"2301\") === 1);\n};\n\ntestDecodeNumbers();",
    "entry_point": "decodeNumbers",
    "signature": "function decodeNumbers(dataStr: string): number",
    "docstring": {
      "en": "Decode a series of numbers to reveal the pattern and understand the actual values\n each digit represents.\n 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\n Parameters:\n - dataStr: A string representing a series of numbers. Length does not exceed 100.\n\n Returns:\n number: The result of each data string corresponding to the right-hand side of the equation.\n\n Example usage:\n console.assert(decodeNumbers(\"0000\") === 4);",
      "es": "Decode una serie de números para revelar el patrón y comprender los valores reales que representa cada dígito.\n 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\n Parámetros:\n - dataStr: Una cadena que representa una serie de números. La longitud no excede 100.\n\n Devuelve:\n number: El resultado de cada cadena de datos correspondiente al lado derecho de la ecuación.\n\n Ejemplo de uso:\n console.assert(decodeNumbers(\"0000\") === 4);",
      "arb": "فك سلسلة من الأرقام للكشف عن النمط وفهم القيم الفعلية التي يمثلها كل رقم.\n0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\nالمعلمات:\n- dataStr: سلسلة تمثل مجموعة من الأرقام. الطول لا يتجاوز 100.\n\nالقيم المعادة:\nnumber: نتيجة كل سلسلة بيانات تتوافق مع الجانب الأيمن من المعادلة.\n\nمثال على الاستخدام:\nconsole.assert(decodeNumbers(\"0000\") === 4);",
      "sw": "Fasiri mfululizo wa nambari ili kufichua muundo na kuelewa thamani halisi\n kila tarakimu inawakilisha.\n 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\n Vigezo:\n - dataStr: Kamba inayowakilisha mfululizo wa nambari. Urefu hauzidi 100.\n\n Inarudisha:\n number: Matokeo ya kila kamba ya data inayolingana na upande wa kulia wa mlingano.\n\n Mfano wa matumizi:\n console.assert(decodeNumbers(\"0000\") === 4);",
      "tr": "Decode a series of numbers to reveal the pattern and understand the actual values each digit represents. 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\nParametreler:\n- dataStr: Bir dizi sayıyı temsil eden bir dize. Uzunluk 100'ü geçmez.\n\nDöndürür:\nnumber: Her veri dizesinin denklemin sağ tarafına karşılık gelen sonucu.\n\nÖrnek kullanım:\nconsole.assert(decodeNumbers(\"0000\") === 4);",
      "vi": "Giải mã một chuỗi số để tiết lộ mẫu và hiểu các giá trị thực tế mà mỗi chữ số đại diện.\n 0000=4 8888=8 1234=1 5678=3 9012=2 1357=0 2468=4\n\n Tham số:\n - dataStr: Một chuỗi đại diện cho một loạt số. Độ dài không vượt quá 100.\n\n Trả về:\n number: Kết quả của mỗi chuỗi dữ liệu tương ứng với phía bên phải của phương trình.\n\n Ví dụ sử dụng:\n console.assert(decodeNumbers(\"0000\") === 4);"
    },
    "docstring_bertscore": {
      "es": "0.9811954631970461",
      "arb": "0.9515532555440667",
      "sw": "0.9593502925212102",
      "tr": "0.9809722026487628",
      "vi": "0.9887593081068546"
    }
  },
  {
    "task_id": "TypeScript/15",
    "prompt": {
      "en": "\n/**\n * Counts the number of different coloring methods for `n` squares with `m` colors,\n * considering the requirement that adjacent squares and the first/last squares\n * must have different colors.\n * \n * Args:\n * - n (number): The number of squares.\n * - m (number): The number of colors.\n * \n * Returns:\n * - number: The count of different coloring methods satisfying the specified conditions.\n *           The result is modulo 1000003.\n * \n * Example calls:\n * ```\n * countColoringMethods(1, 1) // returns 1\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {",
      "es": "/**\n * Cuenta el número de diferentes métodos de coloreo para `n` cuadrados con `m` colores,\n * considerando el requisito de que los cuadrados adyacentes y los primeros/últimos cuadrados\n * deben tener diferentes colores.\n * \n * Argumentos:\n * - n (number): El número de cuadrados.\n * - m (number): El número de colores.\n * \n * Devuelve:\n * - number: La cuenta de diferentes métodos de coloreo que satisfacen las condiciones especificadas.\n *           El resultado es módulo 1000003.\n * \n * Llamadas de ejemplo:\n * ```\n * countColoringMethods(1, 1) // returns 1\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {",
      "arb": "/**\n * يحسب عدد طرق التلوين المختلفة لـ `n` مربعات باستخدام `m` ألوان،\n * مع مراعاة الشرط بأن المربعات المتجاورة والمربعات الأولى/الأخيرة\n * يجب أن تكون بألوان مختلفة.\n * \n * Args:\n * - n (number): عدد المربعات.\n * - m (number): عدد الألوان.\n * \n * Returns:\n * - number: عدد طرق التلوين المختلفة التي تلبي الشروط المحددة.\n *           النتيجة تكون موديولو 1000003.\n * \n * أمثلة على الاستدعاءات:\n * ```\n * countColoringMethods(1, 1) // يعيد 1\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {",
      "sw": "/**\n * Inahesabu idadi ya mbinu tofauti za kupaka rangi `n` za miraba kwa kutumia rangi `m`,\n * kwa kuzingatia sharti kwamba miraba iliyo karibu na miraba ya kwanza/ya mwisho\n * lazima iwe na rangi tofauti.\n * \n * Vipengele:\n * - n (nambari): Idadi ya miraba.\n * - m (nambari): Idadi ya rangi.\n * \n * Inarudisha:\n * - nambari: Idadi ya mbinu tofauti za kupaka rangi zinazokidhi masharti yaliyotajwa.\n *           Matokeo ni modulo 1000003.\n * \n * Mifano ya miito:\n * ```\n * countColoringMethods(1, 1) // inarudisha 1\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {",
      "tr": "/**\n * `n` kare için `m` renk ile farklı boyama yöntemlerinin sayısını hesaplar,\n * bitişik kareler ve ilk/son karelerin farklı renklere sahip olması gerekliliğini göz önünde bulundurarak.\n * \n * Argümanlar:\n * - n (number): Karelerin sayısı.\n * - m (number): Renklerin sayısı.\n * \n * Döndürür:\n * - number: Belirtilen koşulları karşılayan farklı boyama yöntemlerinin sayısı.\n *           Sonuç 1000003 ile mod alınır.\n * \n * Örnek çağrılar:\n * ```\n * countColoringMethods(1, 1) // 1 döndürür\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {",
      "vi": "/**\n * Đếm số lượng phương pháp tô màu khác nhau cho `n` ô vuông với `m` màu,\n * với yêu cầu rằng các ô liền kề và ô đầu/cuối phải có màu khác nhau.\n * \n * Tham số:\n * - n (number): Số lượng ô vuông.\n * - m (number): Số lượng màu sắc.\n * \n * Trả về:\n * - number: Số lượng phương pháp tô màu khác nhau thỏa mãn các điều kiện đã chỉ định.\n *           Kết quả được lấy modulo 1000003.\n * \n * Ví dụ gọi hàm:\n * ```\n * countColoringMethods(1, 1) // trả về 1\n * ```\n */\nfunction countColoringMethods(n: number, m: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.9877524507053888",
      "arb": "0.9610271301979066",
      "sw": "0.9535149291871672",
      "tr": "0.966882157939672",
      "vi": "0.9609780684937911"
    },
    "canonical_solution": "const MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}",
    "instruction": {
      "en": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español usando como máximo 500 caracteres.",
      "arb": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function countColoringMethods(n: number, m: number): number\nconst MOD = 1000003;\n    let f: number[] = new Array(n + 1); // Array to store results\n\n    if (n === 1) return m;\n    if (n === 2) return (m * (m - 1)) % MOD;\n\n    // Initialize the first three elements\n    f[1] = m;\n    f[2] = (m * (m - 1)) % MOD;\n    f[3] = (f[2] * (m - 2)) % MOD;\n\n    for (let i = 4; i <= n; i++) {\n        f[i] = ((f[i - 1] * (m - 2)) % MOD + (f[i - 2] * (m - 1)) % MOD) % MOD;\n    }\n\n    return f[n];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.9369118128972229",
      "vi": "0.9386158629361213"
    },
    "level": "",
    "test": "function runTests() {\n    console.assert(countColoringMethods(1, 1) === 1);\n    console.assert(countColoringMethods(2, 2) === 2);\n    console.assert(countColoringMethods(3, 3) === 6);\n    console.assert(countColoringMethods(4, 2) === 2);\n    // The expected result for this case is not provided in the C code, but it is required to pass the test\n    console.assert(countColoringMethods(1000, 10) === 566585); \n\n    // Additional test cases.\n    console.assert(countColoringMethods(2, 3) === 6);\n    console.assert(countColoringMethods(1000, 1000) === 67911);\n    console.assert(countColoringMethods(999, 66) === 501817);\n    console.assert(countColoringMethods(5, 3) === 30); // Example of an expected output\n\n}\n\nrunTests();",
    "entry_point": "countColoringMethods",
    "signature": "function countColoringMethods(n: number, m: number): number",
    "docstring": {
      "en": "Counts the number of different coloring methods for `n` squares with `m` colors,\nconsidering the requirement that adjacent squares and the first/last squares\nmust have different colors.\n\nArgs:\n- n (number): The number of squares.\n- m (number): The number of colors.\n\nReturns:\n- number: The count of different coloring methods satisfying the specified conditions.\nThe result is modulo 1000003.\n\nExample calls:\ncountColoringMethods(1, 1) // returns 1\n",
      "es": "Cuenta el número de diferentes métodos de coloreado para `n` cuadrados con `m` colores, considerando el requisito de que los cuadrados adyacentes y los primeros/últimos cuadrados deben tener colores diferentes.\n\nArgs:\n- n (number): El número de cuadrados.\n- m (number): El número de colores.\n\nReturns:\n- number: El conteo de diferentes métodos de coloreado que satisfacen las condiciones especificadas. El resultado es módulo 1000003.\n\nExample calls:\ncountColoringMethods(1, 1) // returns 1",
      "arb": "يحسب عدد طرق التلوين المختلفة لـ `n` مربعات باستخدام `m` ألوان، مع مراعاة الشرط الذي ينص على أن المربعات المتجاورة والمربعات الأولى/الأخيرة يجب أن تكون بألوان مختلفة.\n\nArgs:\n- n (number): عدد المربعات.\n- m (number): عدد الألوان.\n\nReturns:\n- number: عدد طرق التلوين المختلفة التي تلبي الشروط المحددة. النتيجة تكون موديولو 1000003.\n\nمثال على الاستدعاء:\ncountColoringMethods(1, 1) // يعيد 1",
      "sw": "Inahesabu idadi ya mbinu tofauti za kupaka rangi kwa `n` miraba kwa kutumia `m` rangi, kwa kuzingatia hitaji kwamba miraba inayopakana na miraba ya kwanza/mwisho lazima iwe na rangi tofauti.\n\nVipengele:\n- n (nambari): Idadi ya miraba.\n- m (nambari): Idadi ya rangi.\n\nReturns:\n- nambari: Idadi ya mbinu tofauti za kupaka rangi zinazokidhi masharti yaliyotajwa. Matokeo ni modulo 1000003.\nMifano ya miito:\ncountColoringMethods(1, 1) // inarudisha 1",
      "tr": "`n` kareyi `m` renkle boyamak için farklı boyama yöntemlerinin sayısını sayar, bitişik karelerin ve ilk/son karelerin farklı renklere sahip olması gerektiği şartını dikkate alarak.\n\nArgs:\n- n (number): Karelerin sayısı.\n- m (number): Renklerin sayısı.\n\nReturns:\n- number: Belirtilen koşulları sağlayan farklı boyama yöntemlerinin sayısı. Sonuç 1000003 ile mod alınmıştır.\n\nÖrnek çağrılar:\ncountColoringMethods(1, 1) // 1 döndürür",
      "vi": "Đếm số lượng phương pháp tô màu khác nhau cho `n` ô vuông với `m` màu, xem xét yêu cầu rằng các ô vuông liền kề và ô vuông đầu/cuối phải có màu khác nhau.\n\nArgs:\n- n (number): Số lượng ô vuông.\n- m (number): Số lượng màu.\n\nReturns:\n- number: Số lượng phương pháp tô màu khác nhau thỏa mãn các điều kiện đã chỉ định. Kết quả được lấy modulo 1000003.\n\nVí dụ gọi:\ncountColoringMethods(1, 1) // trả về 1"
    },
    "docstring_bertscore": {
      "es": "0.9904436937380305",
      "arb": "0.9546602319642143",
      "sw": "1",
      "tr": "0.9506540558091217",
      "vi": "0.9732816315558541"
    }
  },
  {
    "task_id": "TypeScript/16",
    "prompt": {
      "en": "\n/**\n * Counts the number of valid coin toss sequences with no consecutive heads in n tosses.\n * \n * @param n - The number of coin tosses.\n * @returns The count of valid sequences.\n * \n * Examples:\n * countValidCoinTossSequences(1) returns 2\n * countValidCoinTossSequences(2) returns 3\n */\nfunction countValidCoinTossSequences(n: number): number",
      "es": "/**\n * Cuenta el número de secuencias válidas de lanzamientos de moneda sin caras consecutivas en n lanzamientos.\n * \n * @param n - El número de lanzamientos de moneda.\n * @returns La cuenta de secuencias válidas.\n * \n * Ejemplos:\n * countValidCoinTossSequences(1) returns 2\n * countValidCoinTossSequences(2) returns 3\n */\nfunction countValidCoinTossSequences(n: number): number",
      "arb": "/**\n * يحسب عدد تسلسلات رمي العملة الصحيحة بدون رؤوس متتالية في n من الرميات.\n * \n * @param n - عدد رميات العملة.\n * @returns عدد التسلسلات الصحيحة.\n * \n * أمثلة:\n * countValidCoinTossSequences(1) returns 2\n * countValidCoinTossSequences(2) returns 3\n */\nfunction countValidCoinTossSequences(n: number): number",
      "sw": "/**\n * Inahesabu idadi ya mfuatano halali wa kurusha sarafu bila vichwa vinavyofuatana katika kurusha sarafu n.\n * \n * @param n - Idadi ya kurusha sarafu.\n * @returns Idadi ya mfuatano halali.\n * \n * Mifano:\n * countValidCoinTossSequences(1) inarudisha 2\n * countValidCoinTossSequences(2) inarudisha 3\n */\nfunction countValidCoinTossSequences(n: number): number",
      "tr": "/**\n * Ardışık yazı gelmeyen geçerli madeni para atış dizilerinin sayısını n atışta sayar.\n * \n * @param n - Madeni para atışlarının sayısı.\n * @returns Geçerli dizilerin sayısı.\n * \n * Örnekler:\n * countValidCoinTossSequences(1) returns 2\n * countValidCoinTossSequences(2) returns 3\n */\nfunction countValidCoinTossSequences(n: number): number",
      "vi": "/**\n * Đếm số lượng dãy tung đồng xu hợp lệ mà không có mặt ngửa liên tiếp trong n lần tung.\n * \n * @param n - Số lần tung đồng xu.\n * @returns Số lượng dãy hợp lệ.\n * \n * Ví dụ:\n * countValidCoinTossSequences(1) trả về 2\n * countValidCoinTossSequences(2) trả về 3\n */\nfunction countValidCoinTossSequences(n: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9902492345949974",
      "arb": "0.9725284251509698",
      "sw": "0.9696308051524328",
      "tr": "0.9854320505941392",
      "vi": "0.9716705405352801"
    },
    "canonical_solution": "{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}",
    "instruction": {
      "en": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function countValidCoinTossSequences(n: number): number\n{\n    let a: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    a[1][0] = a[1][1] = 1;\n    \n    for (let i = 2; i <= n; i++) {\n        a[i][0] = a[i - 1][1] + a[i - 1][0];\n        a[i][1] = a[i - 1][0];\n    }\n    \n    return a[n][0] + a[n][1];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testCountValidCoinTossSequences = (): void => {\n    console.assert(countValidCoinTossSequences(1) === 2);\n    console.assert(countValidCoinTossSequences(2) === 3);\n    console.assert(countValidCoinTossSequences(3) === 5);\n    console.assert(countValidCoinTossSequences(4) === 8); // Additional test\n    console.assert(countValidCoinTossSequences(5) === 13); // Additional test\n    // Feel free to add more tests here\n    console.assert(countValidCoinTossSequences(40) === 267914296); // Additional test\n    console.assert(countValidCoinTossSequences(39) === 165580141);\n    console.assert(countValidCoinTossSequences(38) === 102334155);\n    // Uncomment the next line to log a message on successful test pass\n    // console.log(\"All tests passed!\");\n};\n\ntestCountValidCoinTossSequences();",
    "entry_point": "countValidCoinTossSequences",
    "signature": "function countValidCoinTossSequences(n: number): number",
    "docstring": {
      "en": "Counts the number of valid coin toss sequences with no consecutive heads in n tosses.\n\n@param n - The number of coin tosses.\n@returns The count of valid sequences.\n\nExamples:\ncountValidCoinTossSequences(1) returns 2\ncountValidCoinTossSequences(2) returns 3\n",
      "es": "Cuenta el número de secuencias de lanzamientos de moneda válidas sin caras consecutivas en n lanzamientos.\n\n@param n - El número de lanzamientos de moneda.\n@returns El conteo de secuencias válidas.\n\nEjemplos:\ncountValidCoinTossSequences(1) returns 2\ncountValidCoinTossSequences(2) returns 3",
      "arb": "يحسب عدد تسلسلات رمي العملة الصحيحة بدون رؤوس متتالية في n من الرميات.\n\n@param n - عدد رميات العملة.\n@returns عدد التسلسلات الصحيحة.\n\nأمثلة:\ncountValidCoinTossSequences(1) returns 2\ncountValidCoinTossSequences(2) returns 3",
      "sw": "Inahesabu idadi ya mfuatano halali wa kurusha sarafu bila vichwa vinavyofuatana katika kurusha sarafu n.\n\n@param n - Idadi ya kurusha sarafu.\n@returns Idadi ya mfuatano sahihi.\n\nMifano:\ncountValidCoinTossSequences(1) returns 2\ncountValidCoinTossSequences(2) returns 3",
      "tr": "Geçerli para atışı dizilerinin sayısını, n atışında ardışık yazı olmadan sayar.\n\n@param n - Para atışlarının sayısı.\n@returns Geçerli dizilerin sayısı.\n\nÖrnekler:\ncountValidCoinTossSequences(1) returns 2\ncountValidCoinTossSequences(2) returns 3",
      "vi": "Đếm số lượng dãy tung đồng xu hợp lệ mà không có hai lần xuất hiện mặt ngửa liên tiếp trong n lần tung.\n\n@param n - Số lần tung đồng xu.\n@returns Số lượng dãy hợp lệ.\n\nVí dụ:\ncountValidCoinTossSequences(1) trả về 2\ncountValidCoinTossSequences(2) trả về 3"
    },
    "docstring_bertscore": {
      "es": "0.99458553444337",
      "arb": "0.9610106438762808",
      "sw": "0.9824144578454572",
      "tr": "0.9765552588656901",
      "vi": "0.9780857059515639"
    }
  },
  {
    "task_id": "TypeScript/17",
    "prompt": {
      "en": "\n/**\n * Find the length of the longest consecutive sequence of 1s in the binary representation of a non-negative integer.\n *\n * Parameters:\n * - n (number): A non-negative integer (0 ≤ n ≤ 2^64 - 1).\n *\n * Returns:\n * - number: The length of the longest consecutive sequence of 1s in the binary representation of the given integer.\n *\n * Examples:\n * extraNumber(7) returns 3\n * extraNumber(13) returns 2\n * extraNumber(12345) returns 3\n * extraNumber(0b11011101111) returns 4\n * extraNumber(0xFFFFFFFF) returns 32\n * extraNumber(0) returns 0\n */\nfunction findLongestConsecutiveOnesLength(n: number): number",
      "es": "/**\n * Encuentra la longitud de la secuencia consecutiva más larga de 1s en la representación binaria de un número entero no negativo.\n *\n * Parámetros:\n * - n (number): Un número entero no negativo (0 ≤ n ≤ 2^64 - 1).\n *\n * Devuelve:\n * - number: La longitud de la secuencia consecutiva más larga de 1s en la representación binaria del número entero dado.\n *\n * Ejemplos:\n * extraNumber(7) returns 3\n * extraNumber(13) returns 2\n * extraNumber(12345) returns 3\n * extraNumber(0b11011101111) returns 4\n * extraNumber(0xFFFFFFFF) returns 32\n * extraNumber(0) returns 0\n */\nfunction findLongestConsecutiveOnesLength(n: number): number",
      "arb": "/**\n * إيجاد طول أطول تسلسل متتالي من الأرقام 1 في التمثيل الثنائي لعدد صحيح غير سالب.\n *\n * المعاملات:\n * - n (number): عدد صحيح غير سالب (0 ≤ n ≤ 2^64 - 1).\n *\n * يعيد:\n * - number: طول أطول تسلسل متتالي من الأرقام 1 في التمثيل الثنائي للعدد المعطى.\n *\n * أمثلة:\n * extraNumber(7) returns 3\n * extraNumber(13) returns 2\n * extraNumber(12345) returns 3\n * extraNumber(0b11011101111) returns 4\n * extraNumber(0xFFFFFFFF) returns 32\n * extraNumber(0) returns 0\n */\nfunction findLongestConsecutiveOnesLength(n: number): number",
      "sw": "/**\n * Pata urefu wa mlolongo mrefu zaidi wa 1 mfululizo katika uwakilishi wa binary wa nambari isiyo hasi.\n *\n * Vigezo:\n * - n (nambari): Nambari isiyo hasi (0 ≤ n ≤ 2^64 - 1).\n *\n * Inarudisha:\n * - nambari: Urefu wa mlolongo mrefu zaidi wa 1 mfululizo katika uwakilishi wa binary wa nambari iliyotolewa.\n *\n * Mifano:\n * extraNumber(7) inarudisha 3\n * extraNumber(13) inarudisha 2\n * extraNumber(12345) inarudisha 3\n * extraNumber(0b11011101111) inarudisha 4\n * extraNumber(0xFFFFFFFF) inarudisha 32\n * extraNumber(0) inarudisha 0\n */\nfunction findLongestConsecutiveOnesLength(n: number): number",
      "tr": "/**\n * Negatif olmayan bir tam sayının ikili gösteriminde ardışık 1'lerin en uzun dizisinin uzunluğunu bulun.\n *\n * Parametreler:\n * - n (sayı): Negatif olmayan bir tam sayı (0 ≤ n ≤ 2^64 - 1).\n *\n * Döndürür:\n * - sayı: Verilen tam sayının ikili gösteriminde ardışık 1'lerin en uzun dizisinin uzunluğu.\n *\n * Örnekler:\n * extraNumber(7) 3 döndürür\n * extraNumber(13) 2 döndürür\n * extraNumber(12345) 3 döndürür\n * extraNumber(0b11011101111) 4 döndürür\n * extraNumber(0xFFFFFFFF) 32 döndürür\n * extraNumber(0) 0 döndürür\n */\nfunction findLongestConsecutiveOnesLength(n: number): number",
      "vi": "/**\n * Tìm độ dài của dãy liên tiếp dài nhất của số 1 trong biểu diễn nhị phân của một số nguyên không âm.\n *\n * Tham số:\n * - n (number): Một số nguyên không âm (0 ≤ n ≤ 2^64 - 1).\n *\n * Trả về:\n * - number: Độ dài của dãy liên tiếp dài nhất của số 1 trong biểu diễn nhị phân của số nguyên đã cho.\n *\n * Ví dụ:\n * extraNumber(7) trả về 3\n * extraNumber(13) trả về 2\n * extraNumber(12345) trả về 3\n * extraNumber(0b11011101111) trả về 4\n * extraNumber(0xFFFFFFFF) trả về 32\n * extraNumber(0) trả về 0\n */\nfunction findLongestConsecutiveOnesLength(n: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9960629472175074",
      "arb": "0.9967742426119934",
      "sw": "0.9854346327890927",
      "tr": "0.9979123946953233",
      "vi": "1"
    },
    "canonical_solution": "{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}",
    "instruction": {
      "en": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function findLongestConsecutiveOnesLength(n: number): number\n{\n    let max = 0;\n    let ans = 0;\n    while (n) {\n        if (n & 1) {\n            ans++;\n        } else {\n            if (ans > max) {\n                max = ans;\n            }\n            ans = 0;\n        }\n        n >>>= 1; // In TypeScript, >>> is used for unsigned right shift\n    }\n    if (ans > max) {\n        max = ans;\n    }\n    return max;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9050961916149597",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.9233888579259867"
    },
    "level": "",
    "test": "const testFindLongestConsecutiveOnesLength = (): void => {\n    console.assert(findLongestConsecutiveOnesLength(7) === 3, \"Failed on input 7\");\n    console.assert(findLongestConsecutiveOnesLength(13) === 2, \"Failed on input 13\");\n    console.assert(findLongestConsecutiveOnesLength(12345) === 3, \"Failed on input 12345\");\n    console.assert(findLongestConsecutiveOnesLength(0b11011101111) === 4, \"Failed on input 0b11011101111\");\n    console.assert(findLongestConsecutiveOnesLength(0xFFFFFFFF) === 32, \"Failed on input 0xFFFFFFFF\");\n    console.assert(findLongestConsecutiveOnesLength(0) === 0, \"Failed on input 0\");\n\n    // console.log(\"All tests passed!\");\n};\n\ntestFindLongestConsecutiveOnesLength();",
    "entry_point": "findLongestConsecutiveOnesLength",
    "signature": "function findLongestConsecutiveOnesLength(n: number): number",
    "docstring": {
      "en": "Find the length of the longest consecutive sequence of 1s in the binary representation of a non-negative integer.\n\nParameters:\n- n (number): A non-negative integer (0 ≤ n ≤ 2^64 - 1).\n\nReturns:\n- number: The length of the longest consecutive sequence of 1s in the binary representation of the given integer.\n\nExamples:\nextraNumber(7) returns 3\nextraNumber(13) returns 2\nextraNumber(12345) returns 3\nextraNumber(0b11011101111) returns 4\nextraNumber(0xFFFFFFFF) returns 32\nextraNumber(0) returns 0\n",
      "es": "Encontrar la longitud de la secuencia consecutiva más larga de 1s en la representación binaria de un entero no negativo.\n\nParámetros:\n- n (number): Un entero no negativo (0 ≤ n ≤ 2^64 - 1).\n\nDevuelve:\n- number: La longitud de la secuencia consecutiva más larga de 1s en la representación binaria del entero dado.\n\nEjemplos:\nextraNumber(7) devuelve 3\nextraNumber(13) devuelve 2\nextraNumber(12345) devuelve 3\nextraNumber(0b11011101111) devuelve 4\nextraNumber(0xFFFFFFFF) devuelve 32\nextraNumber(0) devuelve 0",
      "arb": "ابحث عن طول أطول تسلسل متتابع من الأرقام 1 في التمثيل الثنائي لعدد صحيح غير سالب.\n\nالمعطيات:\n- n (عدد): عدد صحيح غير سالب (0 ≤ n ≤ 2^64 - 1).\n\nالقيم المعادة:\n- عدد: طول أطول تسلسل متتابع من الأرقام 1 في التمثيل الثنائي للعدد المعطى.\n\nأمثلة:\nextraNumber(7) يعيد 3\nextraNumber(13) يعيد 2\nextraNumber(12345) يعيد 3\nextraNumber(0b11011101111) يعيد 4\nextraNumber(0xFFFFFFFF) يعيد 32\nextraNumber(0) يعيد 0",
      "sw": "Pata urefu wa mlolongo mrefu zaidi wa 1 mfululizo katika uwakilishi wa binary wa nambari isiyo hasi.\n\nVigezo:\n- n (number): Nambari isiyo hasi (0 ≤ n ≤ 2^64 - 1).\n\nRudisha:\n- number: Urefu wa mlolongo mrefu zaidi wa 1s mfululizo katika uwakilishi wa binary wa nambari iliyotolewa.\n\nMifano:\nextraNumber(7) inarudisha 3\nextraNumber(13) inarudisha 2\nextraNumber(12345) inarudisha 3\nextraNumber(0b11011101111) inarudisha 4\nextraNumber(0xFFFFFFFF) inarudisha 32\nextraNumber(0) inarudisha 0",
      "tr": "Negatif olmayan bir tam sayının ikili gösteriminde ardışık 1'lerin en uzun dizisinin uzunluğunu bulun.\n\nParametreler:\n- n (number): Negatif olmayan bir tam sayı (0 ≤ n ≤ 2^64 - 1).\n\nDöndürülenler:\n- number: Verilen tam sayının ikili gösterimindeki en uzun ardışık 1 dizisinin uzunluğu.\n\nÖrnekler:\nextraNumber(7) returns 3\nextraNumber(13) returns 2\nextraNumber(12345) returns 3\nextraNumber(0b11011101111) returns 4\nextraNumber(0xFFFFFFFF) returns 32\nextraNumber(0) returns 0",
      "vi": "Tìm độ dài của dãy liên tiếp dài nhất của các số 1 trong biểu diễn nhị phân của một số nguyên không âm.\n\nTham số:\n- n (number): Một số nguyên không âm (0 ≤ n ≤ 2^64 - 1).\n\nTrả về:\n- number: Độ dài của dãy liên tiếp dài nhất của các số 1 trong biểu diễn nhị phân của số nguyên đã cho.\n\nVí dụ:\nextraNumber(7) trả về 3\nextraNumber(13) trả về 2\nextraNumber(12345) trả về 3\nextraNumber(0b11011101111) trả về 4\nextraNumber(0xFFFFFFFF) trả về 32\nextraNumber(0) trả về 0"
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9798155779399967",
      "sw": "0.9751139968209009",
      "tr": "1",
      "vi": "1"
    }
  },
  {
    "task_id": "TypeScript/18",
    "prompt": {
      "en": "\n/**\n * Creates an ID by combining two words in a specific manner.\n * Parameters:\n * - word1 (string): The first word to be used in the ID.\n * - word2 (string): The second word to be used in the ID.\n * Returns:\n *  string: A unique ID formed by reversing every other character of the second\n *          word and combining it with the first word.\n * e.g.:\n *      createId('fish', 'cat')  // returns 'ftiasch'\n */\nfunction createId(word1: string, word2: string): string",
      "es": "/**\n * Crea un ID combinando dos palabras de una manera específica.\n * Parámetros:\n * - word1 (string): La primera palabra que se usará en el ID.\n * - word2 (string): La segunda palabra que se usará en el ID.\n * Devuelve:\n *  string: Un ID único formado invirtiendo cada otro carácter de la segunda\n *          palabra y combinándolo con la primera palabra.\n * p.ej.:\n *      createId('fish', 'cat')  // returns 'ftiasch'\n */\nfunction createId(word1: string, word2: string): string",
      "arb": "/**\n * ينشئ معرفًا عن طريق دمج كلمتين بطريقة معينة.\n * المعلمات:\n * - word1 (string): الكلمة الأولى التي سيتم استخدامها في المعرف.\n * - word2 (string): الكلمة الثانية التي سيتم استخدامها في المعرف.\n * يعيد:\n *  string: معرف فريد يتم تشكيله عن طريق عكس كل حرف آخر من الكلمة الثانية\n *          ودمجه مع الكلمة الأولى.\n * على سبيل المثال:\n *      createId('fish', 'cat')  // يعيد 'ftiasch'\n */\nfunction createId(word1: string, word2: string): string",
      "sw": "/**\n * Inaunda kitambulisho kwa kuchanganya maneno mawili kwa njia maalum.\n * Vigezo:\n * - word1 (string): Neno la kwanza litakalotumika kwenye kitambulisho.\n * - word2 (string): Neno la pili litakalotumika kwenye kitambulisho.\n * Inarudisha:\n *  string: Kitambulisho cha kipekee kinachoundwa kwa kurudisha kila herufi nyingine ya\n *          neno la pili na kuichanganya na neno la kwanza.\n * e.g.:\n *      createId('fish', 'cat')  // inarudisha 'ftiasch'\n */\nfunction createId(word1: string, word2: string): string",
      "tr": "/**\n * İki kelimeyi belirli bir şekilde birleştirerek bir ID oluşturur.\n * Parametreler:\n * - word1 (string): ID'de kullanılacak ilk kelime.\n * - word2 (string): ID'de kullanılacak ikinci kelime.\n * Döndürür:\n *  string: İkinci kelimenin her iki karakterinden birini ters çevirerek ve\n *          birinci kelimeyle birleştirerek oluşturulan benzersiz bir ID.\n * örn.:\n *      createId('fish', 'cat')  // 'ftiasch' döndürür\n */\nfunction createId(word1: string, word2: string): string",
      "vi": "/**\n * Tạo một ID bằng cách kết hợp hai từ theo một cách cụ thể.\n * Tham số:\n * - word1 (string): Từ đầu tiên được sử dụng trong ID.\n * - word2 (string): Từ thứ hai được sử dụng trong ID.\n * Trả về:\n *  string: Một ID duy nhất được tạo bằng cách đảo ngược mỗi ký tự khác của từ thứ hai\n *          và kết hợp với từ đầu tiên.\n * ví dụ:\n *      createId('fish', 'cat')  // trả về 'ftiasch'\n */\nfunction createId(word1: string, word2: string): string"
    },
    "prompt_bertscore": {
      "es": "0.9978402918670076",
      "arb": "0.9744789754927324",
      "sw": "0.9639150173077728",
      "tr": "0.9911144685347854",
      "vi": "0.9596013613228382"
    },
    "canonical_solution": "{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}",
    "instruction": {
      "en": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nProporciona una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function createId(word1: string, word2: string): string\n{\n    let result: string[] = [];\n    let j: number = 0;\n    let k: number = word2.length - 1;\n\n    for (let i = 0; i < word1.length + word2.length; i++) {\n        if (i % 2 === 0) {\n            // Take character from word1\n            result.push(word1[j++]);\n        } else {\n            // Take character from word2 in reverse\n            result.push(word2[k--]);\n        }\n    }\n    return result.join('');\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9179912759517447",
      "sw": "0.9442521986283673",
      "tr": "0.878088021444884",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testCreateId = (): void => {\n    let id: string;\n\n    id = createId(\"fish\", \"cat\");\n    console.assert(id === \"ftiasch\", `Test failed: Expected ftiasch, got ${id}`);\n  \n    id = createId(\"icpc\", \"acm\");\n    console.assert(id === \"imccpac\", `Test failed: Expected imccpac, got ${id}`);\n  \n    id = createId(\"oo\", \"w\");\n    console.assert(id === \"owo\", `Test failed: Expected owo, got ${id}`);\n  \n    id = createId(\"hello\", \"world\");\n    console.assert(id === \"hdellrloow\", `Test failed: Expected hdellrloow, got ${id}`);\n  \n    id = createId(\"abc\", \"def\");\n    console.assert(id === \"afbecd\", `Test failed: Expected afbecd, got ${id}`);\n  \n    id = createId(\"buaanb\", \"nbbuaa\");\n    console.assert(id === \"bauaauabnbbn\", `Test failed: Expected bauaauabnbbn, got ${id}`);\n    \n    id = createId(\"xtuisgood\", \"ilovextu\");\n    console.assert(id === \"xuttuxiesvgooloid\", `Test failed: Expected xuttuxiesvgooloid, got ${id}`);\n};\n\ntestCreateId();",
    "entry_point": "createId",
    "signature": "function createId(word1: string, word2: string): string",
    "docstring": {
      "en": "Creates an ID by combining two words in a specific manner.\nParameters:\n- word1 (string): The first word to be used in the ID.\n- word2 (string): The second word to be used in the ID.\nReturns:\n string: A unique ID formed by reversing every other character of the second\n         word and combining it with the first word.\ne.g.:\n     createId('fish', 'cat')  // returns 'ftiasch'\n",
      "es": "Crea un ID combinando dos palabras de una manera específica.\nParámetros:\n- word1 (string): La primera palabra que se utilizará en el ID.\n- word2 (string): La segunda palabra que se utilizará en el ID.\nDevuelve:\n string: Un ID único formado al invertir cada otro carácter de la segunda\n         palabra y combinarlo con la primera palabra.\ne.g.:\n     createId('fish', 'cat')  // returns 'ftiasch'",
      "arb": "ينشئ معرفًا عن طريق دمج كلمتين بطريقة معينة.\nالمعلمات:\n- word1 (string): الكلمة الأولى التي سيتم استخدامها في المعرف.\n- word2 (string): الكلمة الثانية التي سيتم استخدامها في المعرف.\nيعيد:\n string: معرف فريد يتم تشكيله عن طريق عكس كل حرف آخر من الكلمة الثانية ودمجه مع الكلمة الأولى.\nعلى سبيل المثال:\n     createId('fish', 'cat')  // يعيد 'ftiasch'",
      "sw": "Inaunda kitambulisho kwa kuchanganya maneno mawili kwa njia maalum.\nInaunda kitambulisho kwa kuchanganya maneno mawili kwa njia maalum.\nArgs:\n- word1 (string): Neno la kwanza litakalotumika katika kitambulisho.\n- word2 (string): Neno la pili litakalotumika katika kitambulisho.\nReturns:\n string: Kitambulisho cha kipekee kinachoundwa kwa kurudisha kila herufi nyingine ya neno la pili na kuichanganya na neno la kwanza.\ne.g.:\n     createId('fish', 'cat')  // returns 'ftiasch'",
      "tr": "İki kelimeyi belirli bir şekilde birleştirerek bir ID oluşturur.  \nParametreler:  \n- word1 (string): Kimlikte kullanılacak ilk kelime.  \n- word2 (string): Kimlikte kullanılacak ikinci kelime.  \nDöndürülen:  \n string: İkinci kelimenin her iki karakterini ters çevirerek ve ilk kelimeyle birleştirerek oluşturulan benzersiz bir kimlik.  \nÖrnek:  \n     createId('fish', 'cat')  // 'ftiasch' döndürür  ",
      "vi": "Tạo một ID bằng cách kết hợp hai từ theo một cách cụ thể.  \nTham số:  \n- word1 (string): Từ đầu tiên được sử dụng trong ID.  \n- word2 (string): Từ thứ hai được sử dụng trong ID.  \nTrả về:  \n string: Một ID duy nhất được tạo bằng cách đảo ngược mỗi ký tự khác của từ thứ hai và kết hợp với từ đầu tiên.  \nví dụ:  \n     createId('fish', 'cat')  // trả về 'ftiasch'  "
    },
    "docstring_bertscore": {
      "es": "0.9884063419197556",
      "arb": "0.9679432414351604",
      "sw": "0.970662292721147",
      "tr": "0.9761297925895134",
      "vi": "0.9550874859138204"
    }
  },
  {
    "task_id": "TypeScript/19",
    "prompt": {
      "en": "\n/*\nCount the number of different permutation schemes for a binary string of length n,\nwhere the number of '1's is m and the number of '0's is n - m.\n\nParameters:\n- n (number): Length of the binary string.\n- m (number): Number of '1's in the binary string.\n\nReturns:\nnumber: The total number of different permutation schemes.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number",
      "es": "/*\nCuenta el número de diferentes esquemas de permutación para una cadena binaria de longitud n,\ndonde el número de '1's es m y el número de '0's es n - m.\n\nParámetros:\n- n (number): Longitud de la cadena binaria.\n- m (number): Número de '1's en la cadena binaria.\n\nDevuelve:\nnumber: El número total de diferentes esquemas de permutación.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number",
      "arb": "/*\nاحسب عدد مخططات التبديل المختلفة لسلسلة ثنائية بطول n،\nحيث يكون عدد '1's هو m وعدد '0's هو n - m.\n\nالمعلمات:\n- n (number): طول السلسلة الثنائية.\n- m (number): عدد '1's في السلسلة الثنائية.\n\nالإرجاع:\nnumber: العدد الإجمالي لمخططات التبديل المختلفة.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number",
      "sw": "/*\nHesabu idadi ya mipango tofauti ya mpangilio kwa kamba ya binary yenye urefu n,\nambapo idadi ya '1's ni m na idadi ya '0's ni n - m.\n\nVigezo:\n- n (nambari): Urefu wa kamba ya binary.\n- m (nambari): Idadi ya '1's katika kamba ya binary.\n\nRudisha:\nnambari: Jumla ya idadi ya mipango tofauti ya mpangilio.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number",
      "tr": "/*\nn uzunluğundaki bir ikili dizgi için, '1'lerin sayısının m ve '0'ların sayısının n - m olduğu farklı permütasyon şemalarının sayısını sayın.\n\nParametreler:\n- n (number): İkili dizginin uzunluğu.\n- m (number): İkili dizgideki '1'lerin sayısı.\n\nDöndürür:\nnumber: Farklı permütasyon şemalarının toplam sayısı.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number",
      "vi": "/*\nĐếm số lượng các sơ đồ hoán vị khác nhau cho một chuỗi nhị phân có độ dài n,\ntrong đó số lượng '1' là m và số lượng '0' là n - m.\n\nTham số:\n- n (number): Độ dài của chuỗi nhị phân.\n- m (number): Số lượng '1' trong chuỗi nhị phân.\n\nTrả về:\nnumber: Tổng số lượng các sơ đồ hoán vị khác nhau.\n*/\nfunction countPermutationsOfBinaryString(n: number, m: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9954116381980941",
      "arb": "0.9824951017801574",
      "sw": "0.9691870648812009",
      "tr": "0.9778545001880393",
      "vi": "0.996590112248774"
    },
    "canonical_solution": "{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}",
    "instruction": {
      "en": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function countPermutationsOfBinaryString(n: number, m: number): number\n{\n    let factorial = 1.0;\n    let i: number;\n\n    // Calculate n factorial (n!)\n    for (i = 2; i <= n; ++i) {\n        factorial *= i;\n    }\n\n    let numerator = factorial; // n!\n\n    // Calculate (n+m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n + m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator1 = factorial; // ((n+m)/2)!\n\n    // Calculate (n-m)/2 factorial\n    factorial = 1.0;\n    for (i = 2; i <= (n - m) / 2; ++i) {\n        factorial *= i;\n    }\n\n    let denominator2 = factorial; // ((n-m)/2)!\n\n    if ((n + m) & 1) {\n        return 0;\n    } else if (n === m) {\n        return 1;\n    } else {\n        // Calculating the number of permutations using the factorial values\n        return Math.round(numerator / denominator1 / denominator2);\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9166161578238401",
      "tr": "0.9369118128972229",
      "vi": "0.9072163723021262"
    },
    "level": "",
    "test": "(() => {\n    console.assert(countPermutationsOfBinaryString(2, 0) === 2);\n    console.assert(countPermutationsOfBinaryString(2, 1) === 0);\n    console.assert(countPermutationsOfBinaryString(3, 0) === 0);\n    console.assert(countPermutationsOfBinaryString(3, 1) === 3);\n    console.assert(countPermutationsOfBinaryString(3, 2) === 0);\n    console.assert(countPermutationsOfBinaryString(30, 2) === 145422675);\n    console.assert(countPermutationsOfBinaryString(4, 2) === 4);\n    console.assert(countPermutationsOfBinaryString(5, 5) === 1);\n    console.assert(countPermutationsOfBinaryString(33, 17) === 13884156);\n    console.assert(countPermutationsOfBinaryString(1000, 1000) === 1);\n    // Add more test cases if necessary\n})();",
    "entry_point": "countPermutationsOfBinaryString",
    "signature": "function countPermutationsOfBinaryString(n: number, m: number): number",
    "docstring": {
      "en": "Count the number of different permutation schemes for a binary string of length n, where the number of '1's is m and the number of '0's is n - m.\n\nParameters:\n- n (number): Length of the binary string.\n- m (number): Number of '1's in the binary string.\n\nReturns:\nnumber: The total number of different permutation schemes.",
      "es": "Cuenta el número de diferentes esquemas de permutación para una cadena binaria de longitud n, donde el número de '1's es m y el número de '0's es n - m.\n\nParámetros:\n- n (number): Longitud de la cadena binaria.\n- m (number): Número de '1's en la cadena binaria.\n\nDevuelve:\nnumber: El número total de diferentes esquemas de permutación.",
      "arb": "احسب عدد مخططات التبديل المختلفة لسلسلة ثنائية بطول n، حيث يكون عدد '1's هو m وعدد '0's هو n - m.\n\nالمعلمات:\n- n (number): طول السلسلة الثنائية.\n- m (number): عدد '1's في السلسلة الثنائية.\n\nالإرجاع:\nnumber: العدد الإجمالي لمخططات التبديل المختلفة.",
      "sw": "Hesabu idadi ya mipango tofauti ya mpangilio kwa kamba ya binary yenye urefu n, ambapo idadi ya '1's ni m na idadi ya '0's ni n - m.\n\nVigezo:\n- n (nambari): Urefu wa kamba ya binary.\n- m (nambari): Idadi ya '1's katika kamba ya binary.\n\nInarejesha:\nnambari: Jumla ya idadi ya mipango tofauti ya mpangilio.",
      "tr": "İkili bir dizinin uzunluğu n olan, '1'lerin sayısı m ve '0'ların sayısı n - m olan farklı permütasyon şemalarının sayısını hesaplayın.\n\nParametreler:\n- n (number): İkili dizinin uzunluğu.\n- m (number): İkili dizideki '1'lerin sayısı.\n\nDöndürülen:\nnumber: Farklı permütasyon şemalarının toplam sayısı.",
      "vi": "Đếm số lượng các sơ đồ hoán vị khác nhau cho một chuỗi nhị phân có độ dài n, trong đó số lượng '1' là m và số lượng '0' là n - m.\n\nTham số:\n- n (number): Độ dài của chuỗi nhị phân.\n- m (number): Số lượng '1' trong chuỗi nhị phân.\n\nTrả về:\nnumber: Tổng số lượng các sơ đồ hoán vị khác nhau."
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9806895516165502",
      "sw": "0.9754679561599051",
      "tr": "0.9584624147179842",
      "vi": "0.9964161120349875"
    }
  },
  {
    "task_id": "TypeScript/20",
    "prompt": {
      "en": "\n/**\n * Answer a series of questions by providing choices A, B, C, or D for each question.\n * Question 1:\n *  Constants like 1e6 belong to which data type?\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * Question 2:\n *  Given 21! = 51,090,942,171,709,440,000, which data type can be used to store this value?\n *      A. int\n *      B. long long\n *      C. double\n *      D. None of the above\n * Question 3:\n *  Which statement about left values in expressions is incorrect?\n *      A. Variable name expressions are left values.\n *      B. Increment operation requires the operand to be a left value.\n *      C. Pointer dereference expressions are left values.\n *      D. Prefix increment operation expressions are left values.\n * Question 4:\n *  Which statement about functions is incorrect?\n *      A. Formal parameters of a function are local variables.\n *      B. Local variables are allocated space in the stack.\n *      C. The function type is the same as the return value type.\n *      D. A function can call itself from within its body.\n * Question 5:\n *  Which statement about pointers is incorrect?\n *      A. Subtracting two pointers equals the difference in their address values.\n *      B. Pointer dereference involves resolving based on the pointer's type.\n *      C. int *p[4], p is an array of int pointers.\n *      D. Function names can be assigned to function pointers.\n * \n * You're supposed to only return strings similar to \"AAAAA\", which stand for the choices of the question.\n */\nfunction answerQuestions(): string",
      "es": "/**\n * Responder a una serie de preguntas proporcionando opciones A, B, C o D para cada pregunta.\n * Pregunta 1:\n *  ¿A qué tipo de dato pertenecen constantes como 1e6?\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * Pregunta 2:\n *  Dado 21! = 51,090,942,171,709,440,000, ¿qué tipo de dato se puede usar para almacenar este valor?\n *      A. int\n *      B. long long\n *      C. double\n *      D. Ninguna de las anteriores\n * Pregunta 3:\n *  ¿Cuál afirmación sobre los valores a la izquierda en expresiones es incorrecta?\n *      A. Las expresiones de nombres de variables son valores a la izquierda.\n *      B. La operación de incremento requiere que el operando sea un valor a la izquierda.\n *      C. Las expresiones de desreferencia de punteros son valores a la izquierda.\n *      D. Las expresiones de operación de incremento prefijo son valores a la izquierda.\n * Pregunta 4:\n *  ¿Cuál afirmación sobre las funciones es incorrecta?\n *      A. Los parámetros formales de una función son variables locales.\n *      B. Las variables locales se asignan espacio en la pila.\n *      C. El tipo de la función es el mismo que el tipo del valor de retorno.\n *      D. Una función puede llamarse a sí misma desde dentro de su cuerpo.\n * Pregunta 5:\n *  ¿Cuál afirmación sobre los punteros es incorrecta?\n *      A. Restar dos punteros equivale a la diferencia en sus valores de dirección.\n *      B. La desreferencia de punteros implica resolver según el tipo del puntero.\n *      C. int *p[4], p es un arreglo de punteros a int.\n *      D. Los nombres de funciones pueden asignarse a punteros de funciones.\n * \n * Se supone que debes devolver solo cadenas similares a \"AAAAA\", que representan las opciones de la pregunta.\n */\nfunction answerQuestions(): string",
      "arb": "/**\n * أجب عن سلسلة من الأسئلة بتقديم اختيارات A، B، C، أو D لكل سؤال.\n * السؤال 1:\n *  الثوابت مثل 1e6 تنتمي إلى أي نوع من البيانات؟\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * السؤال 2:\n *  بالنظر إلى 21! = 51,090,942,171,709,440,000، أي نوع بيانات يمكن استخدامه لتخزين هذه القيمة؟\n *      A. int\n *      B. long long\n *      C. double\n *      D. لا شيء مما سبق\n * السؤال 3:\n *  أي عبارة عن القيم اليسارية في التعبيرات غير صحيحة؟\n *      A. تعبيرات أسماء المتغيرات هي قيم يسارية.\n *      B. عملية الزيادة تتطلب أن يكون المعامل قيمة يسارية.\n *      C. تعبيرات فك المؤشر هي قيم يسارية.\n *      D. تعبيرات عملية الزيادة السابقة هي قيم يسارية.\n * السؤال 4:\n *  أي عبارة عن الدوال غير صحيحة؟\n *      A. المعاملات الرسمية للدالة هي متغيرات محلية.\n *      B. المتغيرات المحلية يتم تخصيص مساحة لها في المكدس.\n *      C. نوع الدالة هو نفسه نوع قيمة الإرجاع.\n *      D. يمكن للدالة استدعاء نفسها من داخل جسمها.\n * السؤال 5:\n *  أي عبارة عن المؤشرات غير صحيحة؟\n *      A. طرح مؤشرين يساوي الفرق في قيم عناوينهم.\n *      B. فك المؤشر يتضمن الحل بناءً على نوع المؤشر.\n *      C. int *p[4]، p هو مصفوفة من مؤشرات int.\n *      D. يمكن تعيين أسماء الدوال إلى مؤشرات الدوال.\n * \n * من المفترض أن تعيد فقط سلاسل مشابهة لـ \"AAAAA\"، والتي تمثل اختيارات السؤال.\n */\nfunction answerQuestions(): string",
      "sw": "/**\n * Jibu mfululizo wa maswali kwa kutoa chaguo A, B, C, au D kwa kila swali.\n * Swali la 1:\n *  Vigezo kama 1e6 vinahusiana na aina gani ya data?\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * Swali la 2:\n *  Ikitolewa 21! = 51,090,942,171,709,440,000, ni aina gani ya data inaweza kutumika kuhifadhi thamani hii?\n *      A. int\n *      B. long long\n *      C. double\n *      D. Hakuna kati ya hizi\n * Swali la 3:\n *  Ni kauli gani kuhusu thamani za kushoto katika maelezo si sahihi?\n *      A. Maelezo ya jina la kigezo ni thamani za kushoto.\n *      B. Operesheni ya kuongeza inahitaji operand kuwa thamani ya kushoto.\n *      C. Maelezo ya kufuta pointer ni thamani za kushoto.\n *      D. Maelezo ya operesheni ya kuongeza awali ni thamani za kushoto.\n * Swali la 4:\n *  Ni kauli gani kuhusu kazi si sahihi?\n *      A. Vigezo rasmi vya kazi ni vigezo vya ndani.\n *      B. Vigezo vya ndani vinapewa nafasi kwenye stack.\n *      C. Aina ya kazi ni sawa na aina ya thamani ya kurudi.\n *      D. Kazi inaweza kujita kutoka ndani ya mwili wake.\n * Swali la 5:\n *  Ni kauli gani kuhusu pointers si sahihi?\n *      A. Kutoa pointers mbili ni sawa na tofauti katika thamani za anwani zao.\n *      B. Kufuta pointer kunahusisha kutatua kulingana na aina ya pointer.\n *      C. int *p[4], p ni safu ya pointers za int.\n *      D. Majina ya kazi yanaweza kupewa pointers za kazi.\n * \n * Unatakiwa kurudisha tu mistari kama \"AAAAA\", ambayo inawakilisha chaguo za swali.\n */\nfunction answerQuestions(): string",
      "tr": "/**\n * Her bir soru için A, B, C veya D seçeneklerini sağlayarak bir dizi soruyu yanıtlayın.\n * Soru 1:\n *  1e6 gibi sabitler hangi veri türüne aittir?\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * Soru 2:\n *  21! = 51,090,942,171,709,440,000 verildiğinde, bu değeri saklamak için hangi veri türü kullanılabilir?\n *      A. int\n *      B. long long\n *      C. double\n *      D. Yukarıdakilerin hiçbiri\n * Soru 3:\n *  İfadelerdeki sol değerler hakkında hangi ifade yanlıştır?\n *      A. Değişken adı ifadeleri sol değerlerdir.\n *      B. Artırma işlemi, operandın sol değer olmasını gerektirir.\n *      C. Gösterici çözme ifadeleri sol değerlerdir.\n *      D. Ön ek artırma işlemi ifadeleri sol değerlerdir.\n * Soru 4:\n *  Fonksiyonlar hakkında hangi ifade yanlıştır?\n *      A. Bir fonksiyonun resmi parametreleri yerel değişkenlerdir.\n *      B. Yerel değişkenler yığında alan tahsis edilir.\n *      C. Fonksiyon türü, dönüş değeri türü ile aynıdır.\n *      D. Bir fonksiyon, gövdesi içinden kendisini çağırabilir.\n * Soru 5:\n *  Göstericiler hakkında hangi ifade yanlıştır?\n *      A. İki göstericinin çıkarılması, adres değerlerindeki farkı eşittir.\n *      B. Gösterici çözme, göstericinin türüne göre çözümlemeyi içerir.\n *      C. int *p[4], p bir dizi int göstericidir.\n *      D. Fonksiyon isimleri, fonksiyon göstericilerine atanabilir.\n * \n * Soruların seçeneklerini temsil eden \"AAAAA\" gibi dizeler döndürmeniz gerekiyor.\n */\nfunction answerQuestions(): string",
      "vi": "/**\n * Trả lời một loạt câu hỏi bằng cách cung cấp lựa chọn A, B, C, hoặc D cho mỗi câu hỏi.\n * Câu hỏi 1:\n *  Các hằng số như 1e6 thuộc kiểu dữ liệu nào?\n *      A. unsigned int\n *      B. int\n *      C. float\n *      D. double\n * Câu hỏi 2:\n *  Cho 21! = 51,090,942,171,709,440,000, kiểu dữ liệu nào có thể được sử dụng để lưu trữ giá trị này?\n *      A. int\n *      B. long long\n *      C. double\n *      D. Không có lựa chọn nào ở trên\n * Câu hỏi 3:\n *  Câu nào về giá trị bên trái trong biểu thức là không đúng?\n *      A. Biểu thức tên biến là giá trị bên trái.\n *      B. Phép toán tăng yêu cầu toán hạng phải là giá trị bên trái.\n *      C. Biểu thức giải tham chiếu con trỏ là giá trị bên trái.\n *      D. Biểu thức phép tăng tiền tố là giá trị bên trái.\n * Câu hỏi 4:\n *  Câu nào về hàm là không đúng?\n *      A. Tham số hình thức của một hàm là biến cục bộ.\n *      B. Biến cục bộ được cấp phát không gian trong ngăn xếp.\n *      C. Kiểu của hàm giống với kiểu giá trị trả về.\n *      D. Một hàm có thể gọi chính nó từ bên trong thân hàm.\n * Câu hỏi 5:\n *  Câu nào về con trỏ là không đúng?\n *      A. Trừ hai con trỏ bằng với sự khác biệt trong giá trị địa chỉ của chúng.\n *      B. Giải tham chiếu con trỏ liên quan đến việc giải quyết dựa trên kiểu của con trỏ.\n *      C. int *p[4], p là một mảng các con trỏ int.\n *      D. Tên hàm có thể được gán cho con trỏ hàm.\n * \n * Bạn cần trả về các chuỗi tương tự như \"AAAAA\", đại diện cho các lựa chọn của câu hỏi.\n */\nfunction answerQuestions(): string"
    },
    "prompt_bertscore": {
      "es": "0.9536062991624432",
      "arb": "0.9611838495685432",
      "sw": "0.906936700725629",
      "tr": "0.9614283635675971",
      "vi": "0.9529939216977127"
    },
    "canonical_solution": "{\n    return \"DDDBA\";\n}",
    "instruction": {
      "en": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nTürkçe olarak TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function answerQuestions(): string\n{\n    return \"DDDBA\";\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.9029156272919587",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "function testAnswerQuestions(): void {\n    const expectedAnswers = \"DDDBA\";\n    console.assert(answerQuestions() === expectedAnswers, `Expected answers string '${expectedAnswers}' does not match the result.`);\n}\n\ntestAnswerQuestions();",
    "entry_point": "answerQuestions",
    "signature": "function answerQuestions(): string",
    "docstring": {
      "en": "Answer a series of questions by providing choices A, B, C, or D for each question.\nQuestion 1:\nConstants like 1e6 belong to which data type?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\nQuestion 2:\nGiven 21! = 51,090,942,171,709,440,000, which data type can be used to store this value?\n    A. int\n    B. long long\n    C. double\n    D. None of the above\nQuestion 3:\nWhich statement about left values in expressions is incorrect?\n    A. Variable name expressions are left values.\n    B. Increment operation requires the operand to be a left value.\n    C. Pointer dereference expressions are left values.\n    D. Prefix increment operation expressions are left values.\nQuestion 4:\nWhich statement about functions is incorrect?\n    A. Formal parameters of a function are local variables.\n    B. Local variables are allocated space in the stack.\n    C. The function type is the same as the return value type.\n    D. A function can call itself from within its body.\nQuestion 5:\nWhich statement about pointers is incorrect?\n    A. Subtracting two pointers equals the difference in their address values.\n    B. Pointer dereference involves resolving based on the pointer's type.\n    C. int *p[4], p is an array of int pointers.\n    D. Function names can be assigned to function pointers.\n\nYou're supposed to only return strings similar to \"AAAAA\", which stand for the choices of the question.",
      "es": "Responde una serie de preguntas proporcionando opciones A, B, C o D para cada pregunta.  \nPregunta 1:  \n¿A qué tipo de dato pertenecen constantes como 1e6?  \n    A. unsigned int  \n    B. int  \n    C. float  \n    D. double  \nPregunta 2:  \nDado 21! = 51,090,942,171,709,440,000, ¿qué tipo de dato se puede usar para almacenar este valor?  \n    A. int  \n    B. long long  \n    C. double  \n    D. Ninguna de las anteriores  \nPregunta 3:  \n¿Cuál afirmación sobre los valores a la izquierda en las expresiones es incorrecta?  \n    A. Las expresiones de nombres de variables son valores a la izquierda.  \n    B. La operación de incremento requiere que el operando sea un valor a la izquierda.  \n    C. Las expresiones de desreferencia de punteros son valores a la izquierda.  \n    D. Las expresiones de operación de incremento prefijo son valores a la izquierda.  \nPregunta 4:  \n¿Cuál afirmación sobre las funciones es incorrecta?  \n    A. Los parámetros formales de una función son variables locales.  \n    B. Las variables locales se asignan espacio en la pila.  \n    C. El tipo de la función es el mismo que el tipo del valor de retorno.  \n    D. Una función puede llamarse a sí misma desde dentro de su cuerpo.  \nPregunta 5:  \n¿Cuál afirmación sobre los punteros es incorrecta?  \n    A. Restar dos punteros equivale a la diferencia en sus valores de dirección.  \n    B. La desreferencia de punteros implica resolver en base al tipo del puntero.  \n    C. int *p[4], p es un arreglo de punteros a int.  \n    D. Los nombres de funciones pueden asignarse a punteros de función.  \n\nSe supone que solo debes devolver cadenas similares a \"AAAAA\", que representan las opciones de la pregunta.",
      "arb": "ترجمة سلسلة من الأسئلة عن طريق تقديم الخيارات A، B، C، أو D لكل سؤال.\n\nالسؤال 1:\nالثوابت مثل 1e6 تنتمي إلى أي نوع من البيانات؟\n    A. unsigned int\n    B. int\n    C. float\n    D. double\n\nالسؤال 2:\nبالنظر إلى 21! = 51,090,942,171,709,440,000، أي نوع من البيانات يمكن استخدامه لتخزين هذه القيمة؟\n    A. int\n    B. long long\n    C. double\n    D. لا شيء مما سبق\n\nالسؤال 3:\nأي عبارة عن القيم اليسرى في التعبيرات غير صحيحة؟\n    A. تعبيرات أسماء المتغيرات هي قيم يسرى.\n    B. تتطلب عملية الزيادة أن يكون المعامل قيمة يسرى.\n    C. تعبيرات إلغاء الإشارة للمؤشر هي قيم يسرى.\n    D. تعبيرات عملية الزيادة السابقة هي قيم يسرى.\n\nالسؤال 4:\nأي عبارة عن الدوال غير صحيحة؟\n    A. المعاملات الشكلية للدالة هي متغيرات محلية.\n    B. يتم تخصيص مساحة للمتغيرات المحلية في المكدس.\n    C. نوع الدالة هو نفسه نوع قيمة الإرجاع.\n    D. يمكن للدالة أن تستدعي نفسها من داخل جسمها.\n\nالسؤال 5:\nأي عبارة عن المؤشرات غير صحيحة؟\n    A. طرح مؤشرين يساوي الفرق في قيم عناوينهما.\n    B. يتضمن إلغاء الإشارة للمؤشر الحل بناءً على نوع المؤشر.\n    C. int *p[4]، p هو مصفوفة من مؤشرات int.\n    D. يمكن تعيين أسماء الدوال إلى مؤشرات الدوال.\n\nمن المفترض أن تعود فقط بسلاسل مشابهة لـ \"AAAAA\"، والتي تمثل اختيارات السؤال.",
      "sw": "Jibu maswali kadhaa kwa kutoa chaguo A, B, C, au D kwa kila swali.\n\nSwali la 1:\nKonstant kama 1e6 ni ya aina gani ya data?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\n\nSwali la 2:\nKwa kuzingatia 21! = 51,090,942,171,709,440,000, ni aina gani ya data inaweza kutumika kuhifadhi thamani hii?\n    A. int\n    B. long long\n    C. double\n    D. Hakuna kati ya hapo juu\n\nSwali la 3:\nNi kauli gani kuhusu thamani za kushoto katika maonyesho si sahihi?\n    A. Maonyesho ya majina ya vigezo ni thamani za kushoto.\n    B. Operesheni ya kuongeza inahitaji operand kuwa thamani ya kushoto.\n    C. Maonyesho ya kufuta pointer ni thamani za kushoto.\n    D. Maonyesho ya operesheni ya kuongeza awali ni thamani za kushoto.\n\nSwali la 4:\nNi kauli gani kuhusu kazi si sahihi?\n    A. Vigezo rasmi vya kazi ni vigezo vya ndani.\n    B. Vigezo vya ndani vinatengewa nafasi kwenye stack.\n    C. Aina ya kazi ni sawa na aina ya thamani ya kurudi.\n    D. Kazi inaweza kujirejelea yenyewe kutoka ndani ya mwili wake.\n\nSwali la 5:\nNi kauli gani kuhusu pointer si sahihi?\n    A. Kutoa pointer mbili ni sawa na tofauti ya thamani za anwani zao.\n    B. Kufuta pointer kunahusisha kutatua kulingana na aina ya pointer.\n    C. int *p[4], p ni safu ya pointer za int.\n    D. Majina ya kazi yanaweza kupewa pointer za kazi.\n\nUnatakiwa kurudisha tu mistari kama \"AAAAA\", ambayo inawakilisha chaguo za swali.",
      "tr": "Bir dizi soruyu yanıtlayarak her soru için A, B, C veya D seçeneklerini sağlayın.\nSoru 1:\n1e6 gibi sabitler hangi veri tipine aittir?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\nSoru 2:\n21! = 51,090,942,171,709,440,000 verildiğinde, bu değeri saklamak için hangi veri tipi kullanılabilir?\n    A. int\n    B. long long\n    C. double\n    D. Yukarıdakilerin hiçbiri\nSoru 3:\nİfadelerdeki sol değerler hakkında hangi ifade yanlıştır?\n    A. Değişken adı ifadeleri sol değerlerdir.\n    B. Artırma işlemi, operandın sol değer olmasını gerektirir.\n    C. İşaretçi çözme ifadeleri sol değerlerdir.\n    D. Ön ek artırma işlemi ifadeleri sol değerlerdir.\nSoru 4:\nFonksiyonlar hakkında hangi ifade yanlıştır?\n    A. Bir fonksiyonun resmi parametreleri yerel değişkenlerdir.\n    B. Yerel değişkenler yığın içinde yer kaplar.\n    C. Fonksiyon türü, dönüş değeri türü ile aynıdır.\n    D. Bir fonksiyon, gövdesi içinde kendisini çağırabilir.\nSoru 5:\nİşaretçiler hakkında hangi ifade yanlıştır?\n    A. İki işaretçinin çıkarılması, adres değerlerindeki farkı eşittir.\n    B. İşaretçi çözme, işaretçinin türüne göre çözümlemeyi içerir.\n    C. int *p[4], p bir int işaretçi dizisidir.\n    D. Fonksiyon adları, fonksiyon işaretçilerine atanabilir.\n\nSoruların seçeneklerini temsil eden \"AAAAA\" gibi dizeler döndürmeniz gerekiyor.",
      "vi": "Trả lời một loạt các câu hỏi bằng cách cung cấp lựa chọn A, B, C hoặc D cho mỗi câu hỏi.\n\nCâu hỏi 1:\nHằng số như 1e6 thuộc kiểu dữ liệu nào?\n    A. unsigned int\n    B. int\n    C. float\n    D. double\n\nCâu hỏi 2:\nCho 21! = 51,090,942,171,709,440,000, kiểu dữ liệu nào có thể được sử dụng để lưu trữ giá trị này?\n    A. int\n    B. long long\n    C. double\n    D. Không có cái nào ở trên\n\nCâu hỏi 3:\nCâu nào về giá trị bên trái trong biểu thức là không đúng?\n    A. Biểu thức tên biến là giá trị bên trái.\n    B. Phép toán tăng yêu cầu toán hạng phải là giá trị bên trái.\n    C. Biểu thức giải tham chiếu con trỏ là giá trị bên trái.\n    D. Biểu thức phép tăng tiền tố là giá trị bên trái.\n\nCâu hỏi 4:\nCâu nào về hàm là không đúng?\n    A. Tham số hình thức của một hàm là biến cục bộ.\n    B. Biến cục bộ được cấp phát không gian trong ngăn xếp.\n    C. Kiểu hàm giống với kiểu giá trị trả về.\n    D. Một hàm có thể tự gọi chính nó từ trong thân hàm.\n\nCâu hỏi 5:\nCâu nào về con trỏ là không đúng?\n    A. Trừ hai con trỏ bằng sự khác biệt trong giá trị địa chỉ của chúng.\n    B. Giải tham chiếu con trỏ liên quan đến việc giải quyết dựa trên kiểu của con trỏ.\n    C. int *p[4], p là một mảng các con trỏ int.\n    D. Tên hàm có thể được gán cho con trỏ hàm.\n\nBạn được yêu cầu chỉ trả về chuỗi tương tự như \"AAAAA\", đại diện cho các lựa chọn của câu hỏi."
    },
    "docstring_bertscore": {
      "es": "0.9513822347859956",
      "arb": "0.9442436575219827",
      "sw": "0.9024013732354594",
      "tr": "0.9553006163126708",
      "vi": "0.9385258833735125"
    }
  },
  {
    "task_id": "TypeScript/21",
    "prompt": {
      "en": "\n/**\n * Determines if it is possible to assemble wooden squares from a number of buckets\n * into a single larger square. Each bucket contains a set number of squares,\n * with each square having a side length of 1.\n * \n * @param length - The number of buckets.\n * @param squares - An array where each element represents the number of squares in a bucket.\n * @returns A boolean indicating whether it is possible to form a larger square.\n *\n * Examples:\n *   IsSquare(1, [9]) returns true.\n *   IsSquare(2, [14, 2]) returns true.\n *   IsSquare(2, [7, 7]) returns false.\n */\nfunction isSquare(length: number, squares: number[]): boolean",
      "es": "/**\n * Determina si es posible ensamblar cuadrados de madera a partir de un número de cubos\n * en un cuadrado más grande. Cada cubo contiene un número determinado de cuadrados,\n * con cada cuadrado teniendo un lado de longitud 1.\n * \n * @param length - El número de cubos.\n * @param squares - Un arreglo donde cada elemento representa el número de cuadrados en un cubo.\n * @returns Un booleano que indica si es posible formar un cuadrado más grande.\n *\n * Ejemplos:\n *   IsSquare(1, [9]) devuelve true.\n *   IsSquare(2, [14, 2]) devuelve true.\n *   IsSquare(2, [7, 7]) devuelve false.\n */\nfunction isSquare(length: number, squares: number[]): boolean",
      "arb": "/**\n * يحدد ما إذا كان من الممكن تجميع مربعات خشبية من عدد من الدلاء\n * في مربع أكبر واحد. يحتوي كل دلو على عدد معين من المربعات،\n * حيث يكون لكل مربع طول جانب يساوي 1.\n * \n * @param length - عدد الدلاء.\n * @param squares - مصفوفة حيث يمثل كل عنصر عدد المربعات في دلو.\n * @returns قيمة منطقية تشير إلى ما إذا كان من الممكن تشكيل مربع أكبر.\n *\n * أمثلة:\n *   IsSquare(1, [9]) returns true.\n *   IsSquare(2, [14, 2]) returns true.\n *   IsSquare(2, [7, 7]) returns false.\n */\nfunction isSquare(length: number, squares: number[]): boolean",
      "sw": "/**\n * Huamua kama inawezekana kuunda miraba ya mbao kutoka kwa idadi ya ndoo\n * kuwa mraba mmoja mkubwa zaidi. Kila ndoo ina idadi fulani ya miraba,\n * ambapo kila mraba una urefu wa upande wa 1.\n * \n * @param length - Idadi ya ndoo.\n * @param squares - Kifurushi ambapo kila kipengele kinawakilisha idadi ya miraba katika ndoo.\n * @returns Boolean inayoonyesha kama inawezekana kuunda mraba mkubwa zaidi.\n *\n * Mifano:\n *   IsSquare(1, [9]) inarudisha true.\n *   IsSquare(2, [14, 2]) inarudisha true.\n *   IsSquare(2, [7, 7]) inarudisha false.\n */\nfunction isSquare(length: number, squares: number[]): boolean",
      "tr": "/**\n * Belirli sayıda kovadan tek bir büyük kare oluşturmanın mümkün olup olmadığını belirler.\n * Her kova belirli sayıda kare içerir ve her karenin bir kenar uzunluğu 1'dir.\n * \n * @param length - Kova sayısı.\n * @param squares - Her bir elemanın bir kovadaki kare sayısını temsil ettiği bir dizi.\n * @returns Daha büyük bir kare oluşturmanın mümkün olup olmadığını belirten bir boolean.\n *\n * Örnekler:\n *   IsSquare(1, [9]) true döner.\n *   IsSquare(2, [14, 2]) true döner.\n *   IsSquare(2, [7, 7]) false döner.\n */\nfunction isSquare(length: number, squares: number[]): boolean",
      "vi": "/**\n * Xác định xem có thể lắp ráp các hình vuông gỗ từ một số xô\n * thành một hình vuông lớn hơn hay không. Mỗi xô chứa một số lượng hình vuông nhất định,\n * với mỗi hình vuông có chiều dài cạnh là 1.\n * \n * @param length - Số lượng xô.\n * @param squares - Một mảng mà mỗi phần tử đại diện cho số lượng hình vuông trong một xô.\n * @returns Một giá trị boolean cho biết liệu có thể tạo thành một hình vuông lớn hơn hay không.\n *\n * Ví dụ:\n *   IsSquare(1, [9]) trả về true.\n *   IsSquare(2, [14, 2]) trả về true.\n *   IsSquare(2, [7, 7]) trả về false.\n */\nfunction isSquare(length: number, squares: number[]): boolean"
    },
    "prompt_bertscore": {
      "es": "0.968629906662398",
      "arb": "0.983972911815057",
      "sw": "0.965595430331328",
      "tr": "0.9585595449743103",
      "vi": "0.9703820252535068"
    },
    "canonical_solution": "{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}",
    "instruction": {
      "en": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function isSquare(length: number, squares: number[]): boolean\n{\n    let sum: number = 0;\n    for (let i = 0; i < length; ++i) {\n        sum += squares[i]; // Sum the squares\n    }\n    let root: number = Math.floor(Math.sqrt(sum));\n    return root * root === sum; // Check if sum is a perfect square\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.9005839052489902",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "const testIsSquare = (): void => {\n    console.assert(isSquare(1, [9]) === true, \"Test 1 failed\");\n    console.assert(isSquare(2, [14, 2]) === true, \"Test 2 failed\");\n    console.assert(isSquare(2, [7, 7]) === false, \"Test 3 failed\");\n    console.assert(isSquare(7, [1, 2, 3, 4, 5, 6, 7]) === false, \"Test 4 failed\");\n    console.assert(isSquare(6, [1, 3, 5, 7, 9, 11]) === true, \"Test 5 failed\");\n    console.assert(isSquare(4, [2, 2, 2, 2]) === false, \"Test 6 failed\");\n    \n    // Additional test cases\n    console.assert(isSquare(3, [4, 5, 6]) === false, \"Additional Test 1 failed\");\n    console.assert(isSquare(4, [16, 9, 4, 1]) === false, \"Additional Test 2 failed\");\n    console.assert(isSquare(5, [1, 1, 1, 1, 1]) === false, \"Additional Test 3 failed\");\n    console.assert(isSquare(2, [25, 25]) === false, \"Additional Test 4 failed\");\n    console.assert(isSquare(3, [10, 10, 5]) === true, \"Additional Test 5 failed\");\n    \n    // console.info(\"All tests passed!\");\n};\n\ntestIsSquare();",
    "entry_point": "isSquare",
    "signature": "function isSquare(length: number, squares: number[]): boolean",
    "docstring": {
      "en": "Determines if it is possible to assemble wooden squares from a number of buckets into a single larger square. Each bucket contains a set number of squares, with each square having a side length of 1.\n\nParameters:\n- length - The number of buckets.\n- squares - An array where each element represents the number of squares in a bucket.\n\nReturns A boolean indicating whether it is possible to form a larger square.\n\nExamples:\n  IsSquare(1, [9]) returns true.\n  IsSquare(2, [14, 2]) returns true.\n  IsSquare(2, [7, 7]) returns false.",
      "es": "Determina si es posible ensamblar cuadrados de madera a partir de un número de cubos en un solo cuadrado más grande. Cada cubo contiene un número determinado de cuadrados, y cada cuadrado tiene un lado de longitud 1.\n\nParámetros:\n- length - El número de cubos.\n- squares - Un arreglo donde cada elemento representa el número de cuadrados en un cubo.\n\nDevuelve Un booleano que indica si es posible formar un cuadrado más grande.\n\nEjemplos:\n  IsSquare(1, [9]) devuelve true.\n  IsSquare(2, [14, 2]) devuelve true.\n  IsSquare(2, [7, 7]) devuelve false.",
      "arb": "يحدد ما إذا كان من الممكن تجميع المربعات الخشبية من عدد من الدلاء لتكوين مربع أكبر واحد. يحتوي كل دلو على عدد محدد من المربعات، وكل مربع له طول ضلع يساوي 1.\n\nالمعلمات:\n- length - عدد الدلاء.\n- squares - مصفوفة حيث يمثل كل عنصر عدد المربعات في دلو.\n\nReturns: قيمة منطقية تشير إلى ما إذا كان من الممكن تكوين مربع أكبر.\n\nأمثلة:\n  IsSquare(1, [9]) returns true.\n  IsSquare(2, [14, 2]) returns true.\n  IsSquare(2, [7, 7]) returns false.",
      "sw": "Inabainisha ikiwa inawezekana kuunganisha miraba ya mbao kutoka kwa idadi ya ndoo kuwa mraba mmoja mkubwa zaidi. Kila ndoo ina idadi fulani ya miraba, ambapo kila mraba una urefu wa upande wa 1.\n\nVigezo:\n- length - Idadi ya ndoo.\n- squares - Kifurushi ambapo kila kipengele kinawakilisha idadi ya miraba katika ndoo.\n\nInarejesha thamani ya boolean inayoonyesha ikiwa inawezekana kuunda mraba mkubwa zaidi.\n\nMifano:\n  IsSquare(1, [9]) inarejesha kweli.\n  IsSquare(2, [14, 2]) inarejesha kweli.\n  IsSquare(2, [7, 7]) inarejesha si kweli.",
      "tr": "Ahşap kareleri bir dizi kovadan tek bir büyük kareye monte etmenin mümkün olup olmadığını belirler. Her kova belirli sayıda kare içerir ve her karenin bir kenar uzunluğu 1'dir.\n\nParametreler:\n- length - Kova sayısı.\n- squares - Her elemanın bir kovadaki kare sayısını temsil ettiği bir dizi.\n\nDöndürür: Daha büyük bir kare oluşturmanın mümkün olup olmadığını belirten bir boolean.\n\nÖrnekler:\n  IsSquare(1, [9]) true döndürür.\n  IsSquare(2, [14, 2]) true döndürür.\n  IsSquare(2, [7, 7]) false döndürür.",
      "vi": "Xác định xem có thể lắp ráp các hình vuông gỗ từ một số xô thành một hình vuông lớn hơn hay không. Mỗi xô chứa một số lượng hình vuông nhất định, với mỗi hình vuông có chiều dài cạnh là 1.\n\nTham số:\n- length - Số lượng xô.\n- squares - Một mảng mà mỗi phần tử đại diện cho số lượng hình vuông trong một xô.\n\nTrả về Một giá trị boolean cho biết liệu có thể tạo thành một hình vuông lớn hơn hay không.\n\nVí dụ:\n  IsSquare(1, [9]) trả về true.\n  IsSquare(2, [14, 2]) trả về true.\n  IsSquare(2, [7, 7]) trả về false."
    },
    "docstring_bertscore": {
      "es": "0.9610902946590758",
      "arb": "0.97077610792948",
      "sw": "0.999999801369619",
      "tr": "0.9662717667787518",
      "vi": "0.9773660680810745"
    }
  },
  {
    "task_id": "TypeScript/22",
    "prompt": {
      "en": "\n/**\n * Given integers c and d, where a + b = c and a * b = d, find and return the\n * possible value of a (a <= b). If there are multiple pairs, output the pair with\n * the smallest a.\n * \n * @param c - The sum of a and b.\n * @param d - The product of a and b.\n * @returns A possible value of a or -1 if valid values do not exist.\n *\n * Examples:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number",
      "es": "/**\n * Dados los enteros c y d, donde a + b = c y a * b = d, encuentra y devuelve el\n * valor posible de a (a <= b). Si hay múltiples pares, devuelve el par con\n * el menor a.\n * \n * @param c - La suma de a y b.\n * @param d - El producto de a y b.\n * @returns Un valor posible de a o -1 si no existen valores válidos.\n *\n * Ejemplos:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number",
      "arb": "/**\n * بالنظر إلى الأعداد الصحيحة c و d، حيث a + b = c و a * b = d، ابحث وأعد\n * القيمة الممكنة لـ a (حيث a <= b). إذا كانت هناك أزواج متعددة، أعرض الزوج\n * الذي يحتوي على أصغر قيمة لـ a.\n * \n * @param c - مجموع a و b.\n * @param d - حاصل ضرب a و b.\n * @returns قيمة ممكنة لـ a أو -1 إذا لم تكن هناك قيم صالحة.\n *\n * أمثلة:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number",
      "sw": "/**\n * Kwa kuzingatia namba nzima c na d, ambapo a + b = c na a * b = d, tafuta na rudisha\n * thamani inayowezekana ya a (a <= b). Ikiwa kuna jozi nyingi, toa jozi yenye\n * a ndogo zaidi.\n * \n * @param c - Jumla ya a na b.\n * @param d - Bidhaa ya a na b.\n * @returns Thamani inayowezekana ya a au -1 ikiwa thamani halali hazipo.\n *\n * Mifano:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number",
      "tr": "/**\n * a ve b'nin toplamı c ve çarpımı d olan c ve d tamsayıları verildiğinde,\n * a'nın (a <= b) olası değerini bulun ve döndürün. Birden fazla çift varsa,\n * en küçük a'ya sahip çifti çıkartın.\n * \n * @param c - a ve b'nin toplamı.\n * @param d - a ve b'nin çarpımı.\n * @returns a'nın olası bir değeri veya geçerli değerler yoksa -1.\n *\n * Örnekler:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number",
      "vi": "/**\n * Cho các số nguyên c và d, trong đó a + b = c và a * b = d, tìm và trả về\n * giá trị có thể của a (a <= b). Nếu có nhiều cặp, xuất cặp với\n * a nhỏ nhất.\n * \n * @param c - Tổng của a và b.\n * @param d - Tích của a và b.\n * @returns Một giá trị có thể của a hoặc -1 nếu không tồn tại giá trị hợp lệ.\n *\n * Ví dụ:\n *   findIntegers(7, 11) // -1\n *   findIntegers(5, 6)  // 2\n */\nfunction findIntegers(c: number, d: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9903948306642959",
      "arb": "0.9629464955698468",
      "sw": "0.9767904372368353",
      "tr": "0.9520492356055108",
      "vi": "0.9781212607897691"
    },
    "canonical_solution": "{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}",
    "instruction": {
      "en": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function findIntegers(c: number, d: number): number\n{\n    for (let i = 0; i <= c / 2; i++) {\n        if (i * (c - i) !== d) continue;\n        return i;\n    }\n    return -1; // Return -1 if no valid pairs (a, b) are found.\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.8946639253726264",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testFindIntegers = () => {\n    console.assert(findIntegers(5, 6) === 2, 'Test 1 failed');\n    console.assert(findIntegers(6, 9) === 3, 'Test 2 failed');\n    console.assert(findIntegers(7, 12) === 3, 'Test 3 failed');\n    console.assert(findIntegers(7, 11) === -1, 'Test 4 failed');\n    console.assert(findIntegers(9, 8) === 1, 'Test 5 failed');\n    console.assert(findIntegers(10, 25) === 5, 'Test 6 failed');\n    console.assert(findIntegers(10000, 8765) === -1, 'Test 7 failed');\n\n    // console.log(\"All tests passed successfully.\");\n};\n\ntestFindIntegers();",
    "entry_point": "findIntegers",
    "signature": "function findIntegers(c: number, d: number): number",
    "docstring": {
      "en": "Given integers c and d, where a + b = c and a * b = d, find and return the\npossible value of a (a <= b). If there are multiple pairs, output the pair with\nthe smallest a.\n\n@param c - The sum of a and b.\n@param d - The product of a and b.\n@returns A possible value of a or -1 if valid values do not exist.\n\nExamples:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2",
      "es": "Dado los enteros c y d, donde a + b = c y a * b = d, encuentra y devuelve el\nvalor posible de a (a <= b). Si hay múltiples pares, devuelve el par con el\nmenor a.\n\n@param c - La suma de a y b.\n@param d - El producto de a y b.\n@returns Un valor posible de a o -1 si no existen valores válidos.\n\nEjemplos:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2",
      "arb": "المعطى عددان صحيحان c و d، حيث a + b = c و a * b = d، ابحث وأعد القيمة الممكنة لـ a (حيث a <= b). إذا كان هناك عدة أزواج، أخرج الزوج الذي يحتوي على أصغر قيمة لـ a.\n\n@param c - مجموع a و b.\n@param d - حاصل ضرب a و b.\n@returns قيمة ممكنة لـ a أو -1 إذا لم تكن هناك قيم صحيحة موجودة.\n\nأمثلة:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2",
      "sw": "Kwa kuzingatia namba nzima c na d, ambapo a + b = c na a * b = d, tafuta na rudisha thamani inayowezekana ya a (a <= b). Ikiwa kuna jozi nyingi, toa jozi yenye a ndogo zaidi.\n\n@param c - Jumla ya a na b.\n@param d - Bidhaa ya a na b.\n@returns Thamani inayowezekana ya a au -1 ikiwa thamani halali hazipo.\n\nMifano:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2",
      "tr": "Verilen tam sayılar c ve d için, burada a + b = c ve a * b = d, a'nın olası değerini bulun ve döndürün (a <= b). Birden fazla çift varsa, en küçük a'ya sahip çifti çıkartın.\n\n@param c - a ve b'nin toplamı.\n@param d - a ve b'nin çarpımı.\n@returns a'nın olası bir değeri veya geçerli değerler yoksa -1.\n\nÖrnekler:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2",
      "vi": "Cho các số nguyên c và d, trong đó a + b = c và a * b = d, tìm và trả về giá trị có thể của a (a <= b). Nếu có nhiều cặp, xuất ra cặp có a nhỏ nhất.\n\n@param c - Tổng của a và b.\n@param d - Tích của a và b.\n@returns Một giá trị có thể của a hoặc -1 nếu không tồn tại giá trị hợp lệ.\n\nVí dụ:\n  findIntegers(7, 11) // -1\n  findIntegers(5, 6)  // 2"
    },
    "docstring_bertscore": {
      "es": "0.9897264394321135",
      "arb": "0.9665550137021076",
      "sw": "0.9882970952101865",
      "tr": "0.8952923918982207",
      "vi": "0.9946667742692132"
    }
  },
  {
    "task_id": "TypeScript/23",
    "prompt": {
      "en": "\n/**\n * Count the number of acute-angled triangles that can be formed by selecting any 3 edges out of a given set of edges.\n * \n * @param edges An array of integers representing the lengths of the edges.\n * @returns The count of distinct acute-angled triangles that can be formed.\n * \n * Examples:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // returns 4\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number",
      "es": "/**\n * Cuenta el número de triángulos acutángulos que se pueden formar seleccionando cualquier 3 lados de un conjunto dado de lados.\n * \n * @param edges Un arreglo de enteros que representa las longitudes de los lados.\n * @returns La cuenta de triángulos acutángulos distintos que se pueden formar.\n * \n * Ejemplos:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // returns 4\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number",
      "arb": "/**\n * احسب عدد المثلثات الحادة الزاوية التي يمكن تشكيلها عن طريق اختيار أي 3 حواف من مجموعة الحواف المعطاة.\n * \n * @param edges مصفوفة من الأعداد الصحيحة تمثل أطوال الحواف.\n * @returns عدد المثلثات الحادة الزاوية المميزة التي يمكن تشكيلها.\n * \n * أمثلة:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // returns 4\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number",
      "sw": "/**\n * Hesabu idadi ya pembetatu zenye pembe kali ambazo zinaweza kuundwa kwa kuchagua pande 3 zozote kutoka kwenye seti iliyotolewa ya pande.\n * \n * @param edges Mfululizo wa namba nzima unaowakilisha urefu wa pande.\n * @returns Idadi ya pembetatu tofauti zenye pembe kali ambazo zinaweza kuundwa.\n * \n * Mifano:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // inarejesha 4\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number",
      "tr": "/**\n * Verilen bir kenar kümesinden herhangi 3 kenar seçilerek oluşturulabilecek dar açılı üçgenlerin sayısını sayar.\n * \n * @param edges Kenarların uzunluklarını temsil eden bir tamsayı dizisi.\n * @returns Oluşturulabilecek farklı dar açılı üçgenlerin sayısı.\n * \n * Örnekler:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // 4 döndürür\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number",
      "vi": "/**\n * Đếm số lượng tam giác nhọn có thể được tạo thành bằng cách chọn bất kỳ 3 cạnh nào từ một tập hợp các cạnh cho trước.\n * \n * @param edges Một mảng các số nguyên đại diện cho độ dài của các cạnh.\n * @returns Số lượng tam giác nhọn khác nhau có thể được tạo thành.\n * \n * Ví dụ:\n * ```\n * countAcuteTriangles([1, 1, 1, 1])\n * // trả về 4\n * ```\n */\nfunction countAcuteTriangles(edges: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.976936430566896",
      "arb": "0.9818563064747492",
      "sw": "0.9673235146463316",
      "tr": "0.9768291701611372",
      "vi": "0.9608511436803098"
    },
    "canonical_solution": "{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}",
    "instruction": {
      "en": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف على الأكثر.",
      "sw": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function countAcuteTriangles(edges: number[]): number\n{\n    // Sort the edges in non-decreasing order\n    edges.sort((a, b) => a - b);\n\n    let sum = 0;\n    for (let i = 0; i < edges.length - 2; i++) {\n        for (let j = i + 1; j < edges.length - 1; j++) {\n            for (let k = j + 1; k < edges.length; k++) {\n                let x = edges[i], y = edges[j], z = edges[k];\n                // Check if the edges form an acute-angled triangle\n                if (x + y > z && x * x + y * y > z * z) {\n                    sum++;\n                }\n            }\n        }\n    }\n\n    return sum;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9166751510470075",
      "sw": "0.9166161578238401",
      "tr": "0.8445147199208429",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    // Test function using console.assert for validation\n    console.assert(countAcuteTriangles([1, 1, 1, 1]) === 4, \"Test 1 Failed\");\n    console.assert(countAcuteTriangles([1, 2, 3]) === 0, \"Test 2 Failed\");\n    // Additional tests to ensure correctness\n    console.assert(countAcuteTriangles([3, 4, 5, 7, 10]) === 0, \"Test 3 Failed\");\n    console.assert(countAcuteTriangles([6, 8, 10, 5, 5, 5]) === 4, \"Test 4 Failed\");\n    // console.log(\"All tests passed!\");\n})();",
    "entry_point": "countAcuteTriangles",
    "signature": "function countAcuteTriangles(edges: number[]): number",
    "docstring": {
      "en": "Count the number of acute-angled triangles that can be formed by selecting any 3 edges out of a given set of edges.\n\n@param edges An array of integers representing the lengths of the edges.\n@returns The count of distinct acute-angled triangles that can be formed.\n\nExamples:\ncountAcuteTriangles([1, 1, 1, 1])\n// returns 4",
      "es": "Contar el número de triángulos acutángulos que se pueden formar seleccionando cualquier 3 lados de un conjunto dado de lados.\n\n@param edges Un arreglo de enteros que representa las longitudes de los lados.\n@returns El conteo de triángulos acutángulos distintos que se pueden formar.\n\nEjemplos:\ncountAcuteTriangles([1, 1, 1, 1])\n// returns 4",
      "arb": "حساب عدد المثلثات الحادة الزاوية التي يمكن تشكيلها عن طريق اختيار أي 3 حواف من مجموعة الحواف المعطاة.\n\n@param edges مصفوفة من الأعداد الصحيحة تمثل أطوال الحواف.\n@returns عدد المثلثات الحادة الزاوية المختلفة التي يمكن تشكيلها.\n\nأمثلة:\ncountAcuteTriangles([1, 1, 1, 1])\n// يعيد 4",
      "sw": "Hesabu idadi ya pembetatu kali zinazoweza kuundwa kwa kuchagua kingo 3 kutoka kwenye seti iliyotolewa ya kingo.\n\n@param edges Mfululizo wa nambari za mzima zinazowakilisha urefu wa kingo.\n@returns Idadi ya pembetatu kali tofauti zinazoweza kuundwa.\n\nMifano:\ncountAcuteTriangles([1, 1, 1, 1])\n// inarudisha 4",
      "tr": "Verilen bir kenar kümesinden herhangi 3 kenar seçilerek oluşturulabilecek dik açılı üçgenlerin sayısını sayın.\n\n@param edges Kenarların uzunluklarını temsil eden bir tamsayı dizisi.\n@returns Oluşturulabilecek farklı dik açılı üçgenlerin sayısı.\n\nÖrnekler:\ncountAcuteTriangles([1, 1, 1, 1])\n// 4 döndürür",
      "vi": "Đếm số lượng tam giác nhọn có thể được tạo thành bằng cách chọn bất kỳ 3 cạnh nào từ một tập hợp các cạnh đã cho.\n\n@param edges Một mảng các số nguyên đại diện cho độ dài của các cạnh.\n@returns Số lượng tam giác nhọn khác biệt có thể được tạo thành.\n\nVí dụ:\ncountAcuteTriangles([1, 1, 1, 1])\n// trả về 4"
    },
    "docstring_bertscore": {
      "es": "0.9474412093958824",
      "arb": "0.9631628040547938",
      "sw": "0.9454733782109698",
      "tr": "0.9484041694831395",
      "vi": "0.9553792739435607"
    }
  },
  {
    "task_id": "TypeScript/24",
    "prompt": {
      "en": "\n/**\n * Reads an integer and a character, then returns them as a formatted string separated by a comma.\n * @param integer_value The input integer.\n * @param char_value The input character.\n * @returns A string containing the integer and character separated by a comma.\n * @example\n * processIntegerAndChar(234, 'H')  // Returns \"234,H\"\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string",
      "es": "/**\n * Lee un entero y un carácter, luego los devuelve como una cadena formateada separada por una coma.\n * @param integer_value El entero de entrada.\n * @param char_value El carácter de entrada.\n * @returns Una cadena que contiene el entero y el carácter separados por una coma.\n * @example\n * processIntegerAndChar(234, 'H')  // Returns \"234,H\"\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string",
      "arb": "/**\n * يقرأ عددًا صحيحًا وحرفًا، ثم يعيدهما كسلسلة منسقة مفصولة بفاصلة.\n * @param integer_value العدد الصحيح المدخل.\n * @param char_value الحرف المدخل.\n * @returns سلسلة تحتوي على العدد الصحيح والحرف مفصولين بفاصلة.\n * @example\n * processIntegerAndChar(234, 'H')  // Returns \"234,H\"\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string",
      "sw": "/**\n * Husoma nambari nzima na herufi, kisha inazirejesha kama kamba iliyopangwa ikitenganishwa na koma.\n * @param integer_value Nambari nzima ya ingizo.\n * @param char_value Herufi ya ingizo.\n * @returns Kamba inayojumuisha nambari nzima na herufi ikitenganishwa na koma.\n * @example\n * processIntegerAndChar(234, 'H')  // Inarejesha \"234,H\"\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string",
      "tr": "/**\n * Bir tamsayı ve bir karakter okur, ardından bunları virgülle ayrılmış biçimlendirilmiş bir dize olarak döndürür.\n * @param integer_value Girdi tamsayısı.\n * @param char_value Girdi karakteri.\n * @returns Virgülle ayrılmış tamsayı ve karakter içeren bir dize.\n * @example\n * processIntegerAndChar(234, 'H')  // \"234,H\" döndürür\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string",
      "vi": "/**\n * Đọc một số nguyên và một ký tự, sau đó trả về chúng dưới dạng một chuỗi định dạng được ngăn cách bằng dấu phẩy.\n * @param integer_value Số nguyên đầu vào.\n * @param char_value Ký tự đầu vào.\n * @returns Một chuỗi chứa số nguyên và ký tự được ngăn cách bằng dấu phẩy.\n * @example\n * processIntegerAndChar(234, 'H')  // Trả về \"234,H\"\n */\nfunction processIntegerAndChar(integer_value: number, char_value: string): string"
    },
    "prompt_bertscore": {
      "es": "0.9960305704653988",
      "arb": "1",
      "sw": "0.978319891170804",
      "tr": "0.9703397169823463",
      "vi": "0.9744605028672961"
    },
    "canonical_solution": "{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}",
    "instruction": {
      "en": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function processIntegerAndChar(integer_value: number, char_value: string): string\n{\n    // Format the string\n    return `${integer_value},${char_value}`;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "const testProcessIntegerAndChar = (): void => {\n    console.assert(processIntegerAndChar(234, 'H') === \"234,H\", \"Test 1 Failed\");\n    console.assert(processIntegerAndChar(123, 'A') === \"123,A\", \"Test 2 Failed\");\n    console.assert(processIntegerAndChar(0, 'Z') === \"0,Z\", \"Test 3 Failed\");\n    \n    // Additional tests can be added here with different input values\n    // Example:\n    console.assert(processIntegerAndChar(567, 'X') === \"567,X\", \"Example Test Failed\");\n};\n\ntestProcessIntegerAndChar();",
    "entry_point": "processIntegerAndChar",
    "signature": "function processIntegerAndChar(integer_value: number, char_value: string): string",
    "docstring": {
      "en": "Reads an integer and a character, then returns them as a formatted string separated by a comma.\n@param integer_value The input integer.\n@param char_value The input character.\n@returns A string containing the integer and character separated by a comma.\n@example\nprocessIntegerAndChar(234, 'H')  // Returns \"234,H\"",
      "es": "Lee un entero y un carácter, luego los devuelve como una cadena formateada separada por una coma.\n@param integer_value El entero de entrada.\n@param char_value El carácter de entrada.\n@returns Una cadena que contiene el entero y el carácter separados por una coma.\n@example\nprocessIntegerAndChar(234, 'H')  // Devuelve \"234,H\"",
      "arb": "يقرأ عددًا صحيحًا وحرفًا، ثم يعيدهما كسلسلة منسقة مفصولة بفاصلة.\n@param integer_value العدد الصحيح المدخل.\n@param char_value الحرف المدخل.\n@returns سلسلة تحتوي على العدد الصحيح والحرف مفصولين بفاصلة.\n@example\nprocessIntegerAndChar(234, 'H')  // يعيد \"234,H\"",
      "sw": "Husoma nambari kamili na herufi, kisha inawarudisha kama kamba iliyopangwa iliyotenganishwa na koma.\n@param integer_value Nambari kamili ya ingizo.\n@param char_value Herufi ya ingizo.\n@returns Kamba inayojumuisha nambari kamili na herufi iliyotenganishwa na koma.\n@example\nprocessIntegerAndChar(234, 'H')  // Inarudisha \"234,H\"",
      "tr": "Reads an integer and a character, then returns them as a formatted string separated by a comma.\n@param integer_value Girdi tamsayısı.\n@param char_value Girdi karakteri.\n@returns Tamsayı ve karakteri virgülle ayrılmış bir dize olarak döndürür.\n@example\nprocessIntegerAndChar(234, 'H')  // \"234,H\" döndürür",
      "vi": "Đọc một số nguyên và một ký tự, sau đó trả về chúng dưới dạng một chuỗi định dạng được phân tách bằng dấu phẩy.\n@param integer_value Số nguyên đầu vào.\n@param char_value Ký tự đầu vào.\n@returns Một chuỗi chứa số nguyên và ký tự được phân tách bằng dấu phẩy.\n@example\nprocessIntegerAndChar(234, 'H')  // Trả về \"234,H\""
    },
    "docstring_bertscore": {
      "es": "0.9896243434162616",
      "arb": "0.9990245261987377",
      "sw": "0.965003114535082",
      "tr": "0.9514682417409837",
      "vi": "0.9625885636232219"
    }
  },
  {
    "task_id": "TypeScript/25",
    "prompt": {
      "en": "\n/**\n * Shifts all characters by 5 positions in alphabetical order. Only letters\n * are replaced, and all letters are in uppercase.\n * \n * @param text The input text to be processed.\n * @returns The transformed text with characters shifted by 5 positions.\n * \n * Example:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text: string): string",
      "es": "/**\n * Desplaza todos los caracteres 5 posiciones en orden alfabético. Solo se reemplazan\n * las letras, y todas las letras están en mayúsculas.\n * \n * @param text El texto de entrada a procesar.\n * @returns El texto transformado con caracteres desplazados 5 posiciones.\n * \n * Ejemplo:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text: string): string",
      "arb": "/**\n * يحرك جميع الأحرف بمقدار 5 مواقع في الترتيب الأبجدي. يتم استبدال الأحرف فقط،\n * وجميع الأحرف تكون بحروف كبيرة.\n * \n * @param text النص المدخل ليتم معالجته.\n * @returns النص المحول مع الأحرف المحركة بمقدار 5 مواقع.\n * \n * مثال:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text: string): string",
      "sw": "/**\n * Inasogeza herufi zote kwa nafasi 5 katika mpangilio wa alfabeti. Ni herufi\n * pekee ndizo zinabadilishwa, na herufi zote ziko katika herufi kubwa.\n * \n * @param text Maandishi ya ingizo yanayopaswa kushughulikiwa.\n * @returns Maandishi yaliyobadilishwa na herufi zilizogeuzwa kwa nafasi 5.\n * \n * Mfano:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text: string): string",
      "tr": "/**\n * Alfabetik sırada tüm karakterleri 5 pozisyon kaydırır. Yalnızca harfler\n * değiştirilir ve tüm harfler büyük harfle yazılır.\n * \n * @param text İşlenecek giriş metni.\n * @returns Karakterlerin 5 pozisyon kaydırıldığı dönüştürülmüş metin.\n * \n * Örnek:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\" döndürür\n */\nfunction shiftCharacters(text: string): string",
      "vi": "/**\n * Dịch chuyển tất cả các ký tự 5 vị trí theo thứ tự bảng chữ cái. Chỉ có các chữ cái\n * được thay thế, và tất cả các chữ cái đều ở dạng chữ hoa.\n * \n * @param text Văn bản đầu vào cần được xử lý.\n * @returns Văn bản đã được biến đổi với các ký tự dịch chuyển 5 vị trí.\n * \n * Ví dụ:\n * shiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\n * returns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"\n */\nfunction shiftCharacters(text: string): string"
    },
    "prompt_bertscore": {
      "es": "0.9793406526989423",
      "arb": "0.9912471536293166",
      "sw": "0.9493182664966621",
      "tr": "0.9899896246869847",
      "vi": "0.9662322393329259"
    },
    "canonical_solution": "{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}",
    "instruction": {
      "en": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español usando como máximo 500 caracteres.",
      "arb": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nTürkçe olarak, TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function shiftCharacters(text: string): string\n{\n    let result = \"\";\n    for (let i = 0; i < text.length; ++i) {\n        let charCode = text.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 69) { // 'A'.charCodeAt(0) == 65, 'E'.charCodeAt(0) == 69\n            result += String.fromCharCode(charCode + 21); // 'V'.charCodeAt(0) == 86; 'V' - 'A' = 21\n        } else if (charCode >= 70 && charCode <= 90) { // 'F'.charCodeAt(0) == 70, 'Z'.charCodeAt(0) == 90\n            result += String.fromCharCode(charCode - 5);\n        } else {\n            result += text[i];\n        }\n    }\n    return result;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.8387586101088329",
      "vi": "0.8857392637223478"
    },
    "level": "",
    "test": "function testShiftCharacters() {\n    let test1 = \"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\";\n    let test2 = \"N BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\";\n    let test3 = \"IFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\";\n\n    console.assert(shiftCharacters(test1) === \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\", \"Test 1 failed\");\n    console.assert(shiftCharacters(test2) === \"I WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\", \"Test 2 failed\");\n    console.assert(shiftCharacters(test3) === \"DANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE\", \"Test 3 failed\");\n}\n\ntestShiftCharacters();",
    "entry_point": "shiftCharacters",
    "signature": "function shiftCharacters(text: string): string",
    "docstring": {
      "en": "Shifts all characters by 5 positions in alphabetical order. Only letters are replaced, and all letters are in uppercase.\n\n@param text The input text to be processed.\n@returns The transformed text with characters shifted by 5 positions.\n\nExample:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"",
      "es": "Desplaza todos los caracteres 5 posiciones en orden alfabético. Solo se reemplazan las letras, y todas las letras están en mayúsculas.\n\n@param text El texto de entrada a ser procesado.\n@returns El texto transformado con caracteres desplazados 5 posiciones.\n\nEjemplo:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"",
      "arb": "ينقل جميع الأحرف بمقدار 5 مواقع في الترتيب الأبجدي. يتم استبدال الحروف فقط، وجميع الحروف تكون بأحرف كبيرة.\n\n@param text النص المدخل ليتم معالجته.\n@returns النص المحول مع الأحرف التي تم نقلها بمقدار 5 مواقع.\n\nمثال:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"",
      "sw": "Shifts herufi zote kwa nafasi 5 katika mpangilio wa alfabeti. Ni herufi pekee ndizo hubadilishwa, na herufi zote ni kubwa.\n\n@param text Maandishi ya kuingiza yatakayoshughulikiwa.\n@returns Maandishi yaliyobadilishwa na herufi zilizohamishwa kwa nafasi 5.\n\nMfano:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"",
      "tr": "Alfabetik sırayla tüm karakterleri 5 pozisyon kaydırır. Yalnızca harfler değiştirilir ve tüm harfler büyük harf olarak kullanılır.\n\n@param text İşlenecek giriş metni.\n@returns Karakterleri 5 pozisyon kaydırılmış dönüştürülmüş metin.\n\nÖrnek:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\"",
      "vi": "Dịch chuyển tất cả các ký tự 5 vị trí theo thứ tự bảng chữ cái. Chỉ các chữ cái được thay thế, và tất cả các chữ cái đều ở dạng chữ hoa.\n\n@param text Văn bản đầu vào cần được xử lý.\n@returns Văn bản đã được biến đổi với các ký tự được dịch chuyển 5 vị trí.\n\nVí dụ:\nshiftCharacters(\"NS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\")\nreturns \"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\""
    },
    "docstring_bertscore": {
      "es": "0.9753430176502341",
      "arb": "0.9884359378465298",
      "sw": "0.9811589152069357",
      "tr": "0.9424126826696031",
      "vi": "0.9799681260726315"
    }
  },
  {
    "task_id": "TypeScript/26",
    "prompt": {
      "en": "\n/**\n * Classify the integer x based on the following method:\n * If x is a single-digit number, x belongs to its own class.\n * Otherwise, sum the digits of x, get a new x, and iterate until the class is determined.\n *\n * @param x - The string representation of the integer to be classified.\n * @returns The class to which the integer x belongs.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number",
      "es": "/**\n * Clasificar el entero x basado en el siguiente método:\n * Si x es un número de un solo dígito, x pertenece a su propia clase.\n * De lo contrario, suma los dígitos de x, obtiene un nuevo x, e itera hasta que se determine la clase.\n *\n * @param x - La representación en cadena del entero a clasificar.\n * @returns La clase a la que pertenece el entero x.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number",
      "arb": "/**\n * صنف العدد الصحيح x بناءً على الطريقة التالية:\n * إذا كان x رقمًا مكونًا من رقم واحد، فإن x ينتمي إلى فئته الخاصة.\n * خلاف ذلك، اجمع أرقام x، واحصل على x جديد، وكرر حتى يتم تحديد الفئة.\n *\n * @param x - التمثيل النصي للعدد الصحيح الذي سيتم تصنيفه.\n * @returns الفئة التي ينتمي إليها العدد الصحيح x.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number",
      "sw": "/**\n * Tambua nambari x kulingana na njia ifuatayo:\n * Ikiwa x ni nambari ya tarakimu moja, x inahusiana na darasa lake lenyewe.\n * Vinginevyo, jumlisha tarakimu za x, pata x mpya, na rudia hadi darasa litakapobainishwa.\n *\n * @param x - Uwakilishi wa nambari kama kamba ya maandishi inayotakiwa kutambuliwa.\n * @returns Darasa ambalo nambari x inahusiana nalo.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number",
      "tr": "/**\n * x tamsayısını aşağıdaki yönteme göre sınıflandırın:\n * Eğer x tek basamaklı bir sayıysa, x kendi sınıfına aittir.\n * Aksi takdirde, x'in basamaklarını toplayın, yeni bir x elde edin ve sınıf belirlenene kadar yineleyin.\n *\n * @param x - Sınıflandırılacak tamsayının string gösterimi.\n * @returns x tamsayısının ait olduğu sınıf.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number",
      "vi": "/**\n * Phân loại số nguyên x dựa trên phương pháp sau:\n * Nếu x là một số có một chữ số, x thuộc về lớp riêng của nó.\n * Ngược lại, tổng các chữ số của x, lấy một x mới, và lặp lại cho đến khi lớp được xác định.\n *\n * @param x - Chuỗi biểu diễn của số nguyên cần phân loại.\n * @returns Lớp mà số nguyên x thuộc về.\n * \n * @example\n * ```typescript\n * classifyInteger(\"24\") // returns 6\n * ```\n */\nfunction classifyInteger(x: string): number"
    },
    "prompt_bertscore": {
      "es": "0.9938907253705099",
      "arb": "0.9769278894605116",
      "sw": "0.9447239457833251",
      "tr": "0.991653750019295",
      "vi": "0.9799981192601678"
    },
    "canonical_solution": "{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}",
    "instruction": {
      "en": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function classifyInteger(x: string): number\n{\n    let n = 0;\n    for (let i = 0; i < x.length; i++) {\n        n += parseInt(x[i]);\n    }\n    while (n > 9) {\n        let t = n;\n        let a = 0;\n        while (t) {\n            a += t % 10;\n            t = Math.floor(t / 10);\n        }\n        n = a;\n    }\n    return n;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9056483840742368",
      "sw": "0.9442521986283673",
      "tr": "0.9396636381960803",
      "vi": "0.9233888579259867"
    },
    "level": "",
    "test": "const testClassifyInteger = (): void => {\n    console.assert(classifyInteger(\"24\") === 6, \"Test failed for input '24'\");\n    console.assert(classifyInteger(\"39\") === 3, \"Test failed for input '39'\");\n    console.assert(classifyInteger(\"123456789\") === 9, \"Test failed for input '123456789'\");\n    console.assert(classifyInteger(\"123456789012345678901234567890\") === 9, \"Test failed for input '123456789012345678901234567890'\");\n    console.assert(classifyInteger(\"12345\") === 6, \"Test failed for input '12345'\");\n    console.assert(classifyInteger(\"999999999\") === 9, \"Test failed for input '999999999'\");\n};\n\ntestClassifyInteger();",
    "entry_point": "classifyInteger",
    "signature": "function classifyInteger(x: string): number",
    "docstring": {
      "en": "Classify the integer x based on the following method:\nIf x is a single-digit number, x belongs to its own class.\nOtherwise, sum the digits of x, get a new x, and iterate until the class is determined.\n\nParameters:\n- x (string): The string representation of the integer to be classified.\n\nReturns:\nThe class to which the integer x belongs.\n\nExample:\nclassifyInteger(\"24\") // returns 6",
      "es": "Clasificar el entero x basado en el siguiente método:\nSi x es un número de un solo dígito, x pertenece a su propia clase.\nDe lo contrario, suma los dígitos de x, obtén un nuevo x, e itera hasta que se determine la clase.\n\nParámetros:\n- x (string): La representación en cadena del entero a clasificar.\n\nDevuelve:\nLa clase a la que pertenece el entero x.\n\nEjemplo:\nclassifyInteger(\"24\") // devuelve 6",
      "arb": "صنّف العدد الصحيح x بناءً على الطريقة التالية:\nإذا كان x رقمًا مكونًا من رقم واحد، فإن x ينتمي إلى فئته الخاصة.\nوإلا، قم بجمع أرقام x، واحصل على x جديد، وكرر العملية حتى يتم تحديد الفئة.\n\nالمعطيات:\n- x (string): التمثيل النصي للعدد الصحيح الذي سيتم تصنيفه.\n\nالقيم المعادة:\nالفئة التي ينتمي إليها العدد الصحيح x.\n\nمثال:\nclassifyInteger(\"24\") // يعيد 6",
      "sw": "Tambua nambari x kulingana na njia ifuatayo:\nIkiwa x ni nambari ya tarakimu moja, x inahusishwa na darasa lake lenyewe.\nVinginevyo, jumlisha tarakimu za x, pata x mpya, na rudia hadi darasa litakapobainishwa.\n\nVigezo:\n- x (string): Uwakilishi wa kamba wa nambari ya kuhesabu inayopaswa kutambuliwa.\n\nInarejesha:\nDarasa ambalo nambari x inahusishwa.\n\nMfano:\nclassifyInteger(\"24\") // inarejesha 6",
      "tr": "Classify the integer x based on the following method:\nx'i aşağıdaki yönteme göre sınıflandırın:\nIf x is a single-digit number, x belongs to its own class.\nEğer x tek basamaklı bir sayıysa, x kendi sınıfına aittir.\nOtherwise, sum the digits of x, get a new x, and iterate until the class is determined.\nAksi takdirde, x'in basamaklarını toplayın, yeni bir x elde edin ve sınıf belirlenene kadar yineleyin.\n\nParameters:\n- x (string): The string representation of the integer to be classified.\n- x (string): Sınıflandırılacak tam sayının string gösterimi.\n\nReturns:\nThe class to which the integer x belongs.\nTam sayı x'in ait olduğu sınıf.\n\nExample:\nclassifyInteger(\"24\") // returns 6\nÖrnek:\nclassifyInteger(\"24\") // 6 döndürür",
      "vi": "Phân loại số nguyên x dựa trên phương pháp sau:\nNếu x là một số có một chữ số, x thuộc về lớp của chính nó.\nNgược lại, tính tổng các chữ số của x, nhận được một x mới, và lặp lại cho đến khi lớp được xác định.\n\nTham số:\n- x (string): Biểu diễn chuỗi của số nguyên cần được phân loại.\n\nTrả về:\nLớp mà số nguyên x thuộc về.\n\nVí dụ:\nclassifyInteger(\"24\") // trả về 6"
    },
    "docstring_bertscore": {
      "es": "0.9933778617266779",
      "arb": "0.9443803152241348",
      "sw": "0.9386615479237593",
      "tr": "0.999999801369619",
      "vi": "0.973315597351011"
    }
  },
  {
    "task_id": "TypeScript/27",
    "prompt": {
      "en": "\n/**\n * Transforms the case of a given letter.\n * \n * Parameters:\n * - letter (string): The input letter to be transformed.\n * \n * Returns:\n * - string: The letter with its case reversed. If the input is lowercase, \n *           it returns the uppercase version, and if the input is uppercase, \n *           it returns the lowercase version.\n * \n * Examples:\n * transformLetterCase('b') // Returns 'B'\n */\nfunction transformLetterCase(letter: string): string",
      "es": "/**\n * Transforma el caso de una letra dada.\n * \n * Parámetros:\n * - letter (string): La letra de entrada a ser transformada.\n * \n * Retorna:\n * - string: La letra con su caso invertido. Si la entrada es minúscula,\n *           devuelve la versión en mayúscula, y si la entrada es mayúscula,\n *           devuelve la versión en minúscula.\n * \n * Ejemplos:\n * transformLetterCase('b') // Returns 'B'\n */\nfunction transformLetterCase(letter: string): string",
      "arb": "/**\n * يحول حالة الحرف المعطى.\n * \n * المعطيات:\n * - letter (string): الحرف المدخل الذي سيتم تحويله.\n * \n * يعيد:\n * - string: الحرف مع عكس حالته. إذا كان المدخل بحروف صغيرة، \n *           فإنه يعيد النسخة بحروف كبيرة، وإذا كان المدخل بحروف كبيرة، \n *           فإنه يعيد النسخة بحروف صغيرة.\n * \n * أمثلة:\n * transformLetterCase('b') // Returns 'B'\n */\nfunction transformLetterCase(letter: string): string",
      "sw": "/**\n * Hubadilisha herufi kubwa na ndogo ya herufi iliyotolewa.\n * \n * Vigezo:\n * - letter (string): Herufi ya kuingiza itakayobadilishwa.\n * \n * Inarudisha:\n * - string: Herufi ikiwa na herufi kubwa na ndogo zimebadilishwa. Ikiwa ingizo ni herufi ndogo, \n *           inarudisha toleo la herufi kubwa, na ikiwa ingizo ni herufi kubwa, \n *           inarudisha toleo la herufi ndogo.\n * \n * Mifano:\n * transformLetterCase('b') // Inarudisha 'B'\n */\nfunction transformLetterCase(letter: string): string",
      "tr": "/**\n * Verilen bir harfin büyük/küçük harf durumunu dönüştürür.\n * \n * Parametreler:\n * - letter (string): Dönüştürülecek giriş harfi.\n * \n * Döndürür:\n * - string: Harfin büyük/küçük harf durumu ters çevrilmiş hali. Eğer giriş \n *           küçük harf ise, büyük harf versiyonunu döndürür ve eğer giriş \n *           büyük harf ise, küçük harf versiyonunu döndürür.\n * \n * Örnekler:\n * transformLetterCase('b') // 'B' döndürür\n */\nfunction transformLetterCase(letter: string): string",
      "vi": "/**\n * Chuyển đổi chữ hoa/thường của một chữ cái cho trước.\n * \n * Tham số:\n * - letter (string): Chữ cái đầu vào cần được chuyển đổi.\n * \n * Trả về:\n * - string: Chữ cái với chữ hoa/thường được đảo ngược. Nếu đầu vào là chữ thường,\n *           nó trả về phiên bản chữ hoa, và nếu đầu vào là chữ hoa,\n *           nó trả về phiên bản chữ thường.\n * \n * Ví dụ:\n * transformLetterCase('b') // Trả về 'B'\n */\nfunction transformLetterCase(letter: string): string"
    },
    "prompt_bertscore": {
      "es": "0.9972479760707617",
      "arb": "0.9837995074924135",
      "sw": "0.9676540356003737",
      "tr": "0.9812196961035323",
      "vi": "0.9789406111115381"
    },
    "canonical_solution": "{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}",
    "instruction": {
      "en": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function transformLetterCase(letter: string): string\n{\n    if (letter >= 'A' && letter <= 'Z') {\n        return letter.toLowerCase();\n    } else if (letter >= 'a' && letter <= 'z') {\n        return letter.toUpperCase();\n    } else {\n        // Non-alphabetic characters are returned unchanged\n        return letter;\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9166751510470075",
      "sw": "0.9166161578238401",
      "tr": "0.878088021444884",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "const testTransformLetterCase = (): void => {\n    console.assert(transformLetterCase('b') === 'B', 'Test failed: transformLetterCase(\\'b\\') should return \\'B\\'');\n    console.assert(transformLetterCase('B') === 'b', 'Test failed: transformLetterCase(\\'B\\') should return \\'b\\'');\n    console.assert(transformLetterCase('z') === 'Z', 'Test failed: transformLetterCase(\\'z\\') should return \\'Z\\'');\n    console.assert(transformLetterCase('Z') === 'z', 'Test failed: transformLetterCase(\\'Z\\') should return \\'z\\'');\n    console.assert(transformLetterCase('m') === 'M', 'Test failed: transformLetterCase(\\'m\\') should return \\'M\\'');\n    console.assert(transformLetterCase('M') === 'm', 'Test failed: transformLetterCase(\\'M\\') should return \\'m\\'');\n    console.assert(transformLetterCase('1') === '1', 'Test failed: transformLetterCase(\\'1\\') should return \\'1\\' (unchanged)');\n    console.assert(transformLetterCase('!') === '!', 'Test failed: transformLetterCase(\\'!\\') should return \\'!\\' (unchanged)');\n\n    // console.log(\"All tests passed successfully.\");\n};\n\ntestTransformLetterCase();",
    "entry_point": "transformLetterCase",
    "signature": "function transformLetterCase(letter: string): string",
    "docstring": {
      "en": "Transforms the case of a given letter.\n\nParameters:\n- letter (string): The input letter to be transformed.\n\nReturns:\n- string: The letter with its case reversed. If the input is lowercase, it returns the uppercase version, and if the input is uppercase, it returns the lowercase version.\n\nExamples:\ntransformLetterCase('b') // Returns 'B'",
      "es": "Transforma el caso de una letra dada.\n\nParámetros:\n- letter (string): La letra de entrada a ser transformada.\n\nDevuelve:\n- string: La letra con su caso invertido. Si la entrada es minúscula, devuelve la versión en mayúscula, y si la entrada es mayúscula, devuelve la versión en minúscula.\n\nEjemplos:\ntransformLetterCase('b') // Devuelve 'B'",
      "arb": "يحول حالة حرف معين.\n\nالمعلمات:\n- letter (string): الحرف المدخل الذي سيتم تحويله.\n\nالقيم المعادة:\n- string: الحرف مع عكس حالته. إذا كان المدخل بحروف صغيرة، فإنه يعيد النسخة الكبيرة، وإذا كان المدخل بحروف كبيرة، فإنه يعيد النسخة الصغيرة.\n\nأمثلة:\ntransformLetterCase('b') // يعيد 'B'",
      "sw": "Hubadilisha herufi ya herufi iliyotolewa.\n\nVigezo:\n- letter (string): Herufi ya kuingiza itakayobadilishwa.\n\nInarejesha:\n- string: Herufi ikiwa na herufi kubwa imebadilishwa. Ikiwa ingizo ni herufi ndogo, inarejesha toleo la herufi kubwa, na ikiwa ingizo ni herufi kubwa, inarejesha toleo la herufi ndogo.\n\nMifano:\ntransformLetterCase('b') // Inarejesha 'B'",
      "tr": "Verilen bir harfin büyük/küçük harf durumunu değiştirir.\n\nParametreler:\n- letter (string): Dönüştürülecek giriş harfi.\n\nDöndürülenler:\n- string: Harfin büyük/küçük harf durumu ters çevrilmiş hali. Eğer giriş küçük harfse, büyük harf versiyonunu döndürür ve eğer giriş büyük harfse, küçük harf versiyonunu döndürür.\n\nÖrnekler:\ntransformLetterCase('b') // 'B' döndürür",
      "vi": "Chuyển đổi chữ hoa/thường của một chữ cái cho trước.\n\nTham số:\n- letter (string): Chữ cái đầu vào cần được chuyển đổi.\n\nTrả về:\n- string: Chữ cái với chữ hoa/thường được đảo ngược. Nếu đầu vào là chữ thường, nó trả về phiên bản chữ hoa, và nếu đầu vào là chữ hoa, nó trả về phiên bản chữ thường.\n\nVí dụ:\ntransformLetterCase('b') // Trả về 'B'"
    },
    "docstring_bertscore": {
      "es": "0.9871053129239771",
      "arb": "0.9656933551091782",
      "sw": "0.9653008614762533",
      "tr": "0.9765397656959693",
      "vi": "0.9767685878949216"
    }
  },
  {
    "task_id": "TypeScript/28",
    "prompt": {
      "en": "\n/**\n * Display the ASCII information for a given character.\n * \n * Parameters:\n * - character (string): The input character for which ASCII information is to be displayed.\n *    \n * Returns:\n * - number: corresponding ASCII code\n *    \n * Examples:\n * ```\n * console.log(display_ascii_info('A'));\n * // expected output: 65\n * ```\n */\nfunction display_ascii_info(character: string): number",
      "es": "/**\n * Mostrar la información ASCII para un carácter dado.\n * \n * Parámetros:\n * - character (string): El carácter de entrada para el cual se mostrará la información ASCII.\n *    \n * Devuelve:\n * - number: código ASCII correspondiente\n *    \n * Ejemplos:\n * ```\n * console.log(display_ascii_info('A'));\n * // expected output: 65\n * ```\n */\nfunction display_ascii_info(character: string): number",
      "arb": "/**\n * عرض معلومات ASCII لحرف معين.\n * \n * المعلمات:\n * - character (string): الحرف المدخل الذي سيتم عرض معلومات ASCII له.\n *    \n * يعيد:\n * - number: رمز ASCII المقابل\n *    \n * أمثلة:\n * ```\n * console.log(display_ascii_info('A'));\n * // expected output: 65\n * ```\n */\nfunction display_ascii_info(character: string): number",
      "sw": "/**\n * Onyesha taarifa za ASCII kwa herufi iliyotolewa.\n * \n * Vigezo:\n * - character (string): Herufi ya kuingiza ambayo taarifa za ASCII zinapaswa kuonyeshwa.\n *    \n * Inarudisha:\n * - number: nambari ya ASCII inayolingana\n *    \n * Mifano:\n * ```\n * console.log(display_ascii_info('A'));\n * // matokeo yanayotarajiwa: 65\n * ```\n */\nfunction display_ascii_info(character: string): number",
      "tr": "/**\n * Belirtilen bir karakter için ASCII bilgisini göster.\n * \n * Parametreler:\n * - character (string): ASCII bilgisinin gösterileceği giriş karakteri.\n *    \n * Döndürür:\n * - number: karşılık gelen ASCII kodu\n *    \n * Örnekler:\n * ```\n * console.log(display_ascii_info('A'));\n * // beklenen çıktı: 65\n * ```\n */\nfunction display_ascii_info(character: string): number",
      "vi": "/**\n * Hiển thị thông tin ASCII cho một ký tự được cung cấp.\n * \n * Tham số:\n * - character (string): Ký tự đầu vào mà thông tin ASCII cần được hiển thị.\n *    \n * Trả về:\n * - number: mã ASCII tương ứng\n *    \n * Ví dụ:\n * ```\n * console.log(display_ascii_info('A'));\n * // kết quả mong đợi: 65\n * ```\n */\nfunction display_ascii_info(character: string): number"
    },
    "prompt_bertscore": {
      "es": "0.9926703403094316",
      "arb": "0.9812254563845824",
      "sw": "0.9797688998004536",
      "tr": "0.9791660565940127",
      "vi": "0.9812884222153704"
    },
    "canonical_solution": "{\n    return character.charCodeAt(0);\n}",
    "instruction": {
      "en": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nTürkçe olarak, TypeScript kodunun kısa ve öz bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function display_ascii_info(character: string): number\n{\n    return character.charCodeAt(0);\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.8994050339375481",
      "vi": "0.9314262376641824"
    },
    "level": "",
    "test": "const testDisplayAsciiInfo = (): void => {\n    console.assert(display_ascii_info('A') === 65);\n    console.assert(display_ascii_info('B') === 66); // Additional test case\n    console.assert(display_ascii_info('0') === 48); // Additional test case\n    console.assert(display_ascii_info(' ') === 32); // Additional test case\n    // console.log(\"All tests passed.\");\n};\n\ntestDisplayAsciiInfo();",
    "entry_point": "display_ascii_info",
    "signature": "function display_ascii_info(character: string): number",
    "docstring": {
      "en": "Display the ASCII information for a given character.\n\nParameters:\n- character (string): The input character for which ASCII information is to be displayed.\n\nReturns:\n- number: corresponding ASCII code\n\nExamples:\n```\nconsole.log(display_ascii_info('A'));\n// expected output: 65\n```\n",
      "es": "Mostrar la información ASCII para un carácter dado.\n\nParámetros:\n- character (string): El carácter de entrada para el cual se mostrará la información ASCII.\n\nDevuelve:\n- number: código ASCII correspondiente\n\nEjemplos:\n```\nconsole.log(display_ascii_info('A'));\n// expected output: 65\n```",
      "arb": "عرض معلومات ASCII للحرف المعطى.\n\nالمعلمات:\n- character (string): الحرف المدخل الذي سيتم عرض معلومات ASCII له.\n\nالقيم المعادة:\n- number: رمز ASCII المقابل\n\nأمثلة:\n```\nconsole.log(display_ascii_info('A'));\n// expected output: 65\n```",
      "sw": "Onyesha taarifa za ASCII kwa herufi iliyotolewa.\n\nVigezo:\n- character (string): Herufi ya ingizo ambayo taarifa za ASCII zinapaswa kuonyeshwa.\n\nInarejesha:\n- number: nambari inayolingana ya ASCII\n\nMifano:\n```\nconsole.log(display_ascii_info('A'));\n// expected output: 65\n```",
      "tr": "Belirtilen karakter için ASCII bilgisini görüntüleyin.\n\nParametreler:\n- character (string): ASCII bilgisinin görüntüleneceği giriş karakteri.\n\nDöndürür:\n- number: karşılık gelen ASCII kodu\n\nÖrnekler:\n```\nconsole.log(display_ascii_info('A'));\n// beklenen çıktı: 65\n```",
      "vi": "Hiển thị thông tin ASCII cho một ký tự nhất định.\n\nTham số:\n- character (string): Ký tự đầu vào mà thông tin ASCII cần được hiển thị.\n\nTrả về:\n- number: mã ASCII tương ứng\n\nVí dụ:\n```\nconsole.log(display_ascii_info('A'));\n// expected output: 65\n```"
    },
    "docstring_bertscore": {
      "es": "0.983939144650281",
      "arb": "0.969216263547213",
      "sw": "0.9711594645648773",
      "tr": "0.9727103705799978",
      "vi": "0.9818632585380854"
    }
  },
  {
    "task_id": "TypeScript/29",
    "prompt": {
      "en": "\n/**\n * Evaluate the grade for an input integer.\n * @param score - The integer score to be evaluated.\n * @returns The grade corresponding to the input score.\n *          If the score is between 90 and 100 (inclusive), returns 'A'.\n *          Otherwise, returns 'B'.\n * \n * Examples:\n * evaluateIntegerGrade(90) // returns 'A'\n *\n */\nfunction evaluateIntegerGrade(score: number): string",
      "es": "/**\n * Evaluar la calificación para un entero de entrada.\n * @param score - La puntuación entera a evaluar.\n * @returns La calificación correspondiente a la puntuación de entrada.\n *          Si la puntuación está entre 90 y 100 (inclusive), devuelve 'A'.\n *          De lo contrario, devuelve 'B'.\n * \n * Ejemplos:\n * evaluateIntegerGrade(90) // returns 'A'\n *\n */\nfunction evaluateIntegerGrade(score: number): string",
      "arb": "/**\n * تقييم الدرجة لعدد صحيح مدخل.\n * @param score - الدرجة الصحيحة التي سيتم تقييمها.\n * @returns الدرجة المقابلة للدرجة المدخلة.\n *          إذا كانت الدرجة بين 90 و 100 (شاملة)، تُرجع 'A'.\n *          خلاف ذلك، تُرجع 'B'.\n * \n * أمثلة:\n * evaluateIntegerGrade(90) // تُرجع 'A'\n *\n */\nfunction evaluateIntegerGrade(score: number): string",
      "sw": "/**\n * Tambua alama kwa nambari ya pembejeo.\n * @param score - Alama ya nambari itakayopimwa.\n * @returns Alama inayolingana na alama ya pembejeo.\n *          Ikiwa alama iko kati ya 90 na 100 (ikiwemo), inarudisha 'A'.\n *          Vinginevyo, inarudisha 'B'.\n * \n * Mifano:\n * evaluateIntegerGrade(90) // inarudisha 'A'\n *\n */\nfunction evaluateIntegerGrade(score: number): string",
      "tr": "/**\n * Bir tam sayı notunu değerlendir.\n * @param score - Değerlendirilecek tam sayı notu.\n * @returns Girdi notuna karşılık gelen harf notu.\n *          Eğer not 90 ile 100 arasında (dahil) ise, 'A' döner.\n *          Aksi takdirde, 'B' döner.\n * \n * Örnekler:\n * evaluateIntegerGrade(90) // 'A' döner\n *\n */\nfunction evaluateIntegerGrade(score: number): string",
      "vi": "/**\n * Đánh giá điểm cho một số nguyên đầu vào.\n * @param score - Điểm số nguyên cần được đánh giá.\n * @returns Điểm tương ứng với điểm số đầu vào.\n *          Nếu điểm số nằm trong khoảng từ 90 đến 100 (bao gồm cả 90 và 100), trả về 'A'.\n *          Ngược lại, trả về 'B'.\n * \n * Ví dụ:\n * evaluateIntegerGrade(90) // returns 'A'\n *\n */\nfunction evaluateIntegerGrade(score: number): string"
    },
    "prompt_bertscore": {
      "es": "0.9947803908471652",
      "arb": "0.999999801369619",
      "sw": "0.9764732245183226",
      "tr": "0.9755998467329122",
      "vi": "0.9695652571266913"
    },
    "canonical_solution": "{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}",
    "instruction": {
      "en": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nيرجى تقديم وصف مختصر بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nTürkçe olarak TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function evaluateIntegerGrade(score: number): string\n{\n    return (score >= 90 && score <= 100) ? 'A' : 'B';\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9166161578238401",
      "tr": "0.9029156272919587",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "const testEvaluateIntegerGrade = (): void => {\n    console.assert(evaluateIntegerGrade(90) === 'A', \"Expected 'A' for score 90\");\n    console.assert(evaluateIntegerGrade(89) === 'B', \"Expected 'B' for score 89\");\n    console.assert(evaluateIntegerGrade(95) === 'A', \"Expected 'A' for score 95\");\n    console.assert(evaluateIntegerGrade(100) === 'A', \"Expected 'A' for score 100\");\n    console.assert(evaluateIntegerGrade(101) === 'B', \"Expected 'B' for score 101\");\n    \n    // console.log(\"All tests passed\");\n};\n\ntestEvaluateIntegerGrade();",
    "entry_point": "evaluateIntegerGrade",
    "signature": "function evaluateIntegerGrade(score: number): string",
    "docstring": {
      "en": "Evaluate the grade for an input integer.\n@param score - The integer score to be evaluated.\n@returns The grade corresponding to the input score.\n         If the score is between 90 and 100 (inclusive), returns 'A'.\n         Otherwise, returns 'B'.\n\nExamples:\n evaluateIntegerGrade(90) // returns 'A'\n\n",
      "es": "Evaluar la calificación para un entero de entrada.\n@param score - La puntuación entera a evaluar.\n@returns La calificación correspondiente a la puntuación de entrada.\n         Si la puntuación está entre 90 y 100 (inclusive), devuelve 'A'.\n         De lo contrario, devuelve 'B'.\n\nEjemplos:\n evaluateIntegerGrade(90) // devuelve 'A'",
      "arb": "تقييم الدرجة لعدد صحيح مُدخل.\n@param score - الدرجة الصحيحة التي سيتم تقييمها.\n@returns الدرجة المقابلة للدرجة المُدخلة.\n         إذا كانت الدرجة بين 90 و 100 (شاملة)، تُرجع 'A'.\n         خلاف ذلك، تُرجع 'B'.\n\nأمثلة:\n evaluateIntegerGrade(90) // تُرجع 'A'",
      "sw": "Tambua alama kwa nambari kamili iliyoingizwa.  \n@param score - Alama ya nambari kamili inayopaswa kutathminiwa.  \n@returns Daraja linalolingana na alama iliyoingizwa.  \n         Ikiwa alama iko kati ya 90 na 100 (ikijumuisha), inarudisha 'A'.  \n         Vinginevyo, inarudisha 'B'.  \n\nMifano:  \n evaluateIntegerGrade(90) // inarudisha 'A'  ",
      "tr": "Evaluate the grade for an input integer.\n@param score - Değerlendirilecek tamsayı puanı.\n@returns Girdi puanına karşılık gelen notu döndürür.\n         Eğer puan 90 ile 100 arasında (dahil) ise, 'A' döndürür.\n         Aksi takdirde, 'B' döndürür.\n\nÖrnekler:\n evaluateIntegerGrade(90) // 'A' döndürür",
      "vi": "Đánh giá điểm cho một số nguyên đầu vào.\n@param score - Điểm số nguyên cần được đánh giá.\n@returns Điểm tương ứng với điểm số đầu vào.\n         Nếu điểm số nằm trong khoảng từ 90 đến 100 (bao gồm cả 90 và 100), trả về 'A'.\n         Ngược lại, trả về 'B'.\n\nVí dụ:\n evaluateIntegerGrade(90) // trả về 'A'"
    },
    "docstring_bertscore": {
      "es": "0.9931361285529584",
      "arb": "0.9763544435504639",
      "sw": "0.9526135445180308",
      "tr": "0.9891557743474003",
      "vi": "0.9566574604455201"
    }
  },
  {
    "task_id": "TypeScript/30",
    "prompt": {
      "en": "\n/**\n * Checks if a three-character string has exactly two characters that are the same.\n *\n * @param str The three-character string to be checked.\n * @return Returns 'Yes' if the input has exactly two equal characters, otherwise 'No'.\n * \n * Examples:\n *  checkTwoEqualDigits(\"112\") // Returns 'Yes'\n */\nfunction checkTwoEqualDigits(str: string): string",
      "es": "/**\n * Verifica si una cadena de tres caracteres tiene exactamente dos caracteres que son iguales.\n *\n * @param str La cadena de tres caracteres que se va a verificar.\n * @return Devuelve 'Yes' si la entrada tiene exactamente dos caracteres iguales, de lo contrario 'No'.\n * \n * Ejemplos:\n *  checkTwoEqualDigits(\"112\") // Devuelve 'Yes'\n */\nfunction checkTwoEqualDigits(str: string): string",
      "arb": "/**\n * يتحقق مما إذا كانت سلسلة مكونة من ثلاثة أحرف تحتوي على حرفين متشابهين بالضبط.\n *\n * @param str السلسلة المكونة من ثلاثة أحرف التي سيتم التحقق منها.\n * @return يعيد 'Yes' إذا كان المدخل يحتوي على حرفين متساويين بالضبط، وإلا يعيد 'No'.\n * \n * أمثلة:\n *  checkTwoEqualDigits(\"112\") // Returns 'Yes'\n */\nfunction checkTwoEqualDigits(str: string): string",
      "sw": "/**\n * Hukagua kama mfuatano wa herufi tatu una herufi mbili sawa.\n *\n * @param str Mfuatano wa herufi tatu unaopaswa kukaguliwa.\n * @return Inarudisha 'Yes' ikiwa ingizo lina herufi mbili sawa, vinginevyo 'No'.\n * \n * Mifano:\n *  checkTwoEqualDigits(\"112\") // Inarudisha 'Yes'\n */\nfunction checkTwoEqualDigits(str: string): string",
      "tr": "/**\n * Üç karakterli bir dizgede tam olarak iki karakterin aynı olup olmadığını kontrol eder.\n *\n * @param str Kontrol edilecek üç karakterli dizge.\n * @return Girdi tam olarak iki eşit karaktere sahipse 'Yes', aksi takdirde 'No' döndürür.\n * \n * Örnekler:\n *  checkTwoEqualDigits(\"112\") // 'Yes' döndürür\n */\nfunction checkTwoEqualDigits(str: string): string",
      "vi": "/**\n * Kiểm tra xem một chuỗi ba ký tự có chính xác hai ký tự giống nhau hay không.\n *\n * @param str Chuỗi ba ký tự cần được kiểm tra.\n * @return Trả về 'Yes' nếu đầu vào có chính xác hai ký tự bằng nhau, nếu không thì 'No'.\n * \n * Ví dụ:\n *  checkTwoEqualDigits(\"112\") // Trả về 'Yes'\n */\nfunction checkTwoEqualDigits(str: string): string"
    },
    "prompt_bertscore": {
      "es": "0.9937580402759787",
      "arb": "0.973588714124934",
      "sw": "0.9341015902663413",
      "tr": "0.9675620697339545",
      "vi": "0.96144425399808"
    },
    "canonical_solution": "{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
    "instruction": {
      "en": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function checkTwoEqualDigits(str: string): string\n{\n    if ((str[0] === str[1] && str[1] !== str[2]) ||\n        (str[0] === str[2] && str[0] !== str[1]) ||\n        (str[1] === str[2] && str[0] !== str[1])) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9070262830274758",
      "sw": "0.9166161578238401",
      "tr": "0.8935138554664344",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "function testCheckTwoEqualDigits(): void {\n    // Testing the logic with various cases.\n    console.assert(checkTwoEqualDigits(\"112\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"123\") === \"No\");\n    console.assert(checkTwoEqualDigits(\"232\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"444\") === \"No\"); // All three characters are equal, not two.\n    console.assert(checkTwoEqualDigits(\"121\") === \"Yes\");\n\n    // Additional test cases to cover more scenarios\n    console.assert(checkTwoEqualDigits(\"787\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"999\") === \"No\"); // All three characters are equal\n    console.assert(checkTwoEqualDigits(\"890\") === \"No\");\n    console.assert(checkTwoEqualDigits(\"556\") === \"Yes\");\n    console.assert(checkTwoEqualDigits(\"353\") === \"Yes\"); // No two characters are equal\n\n    // Uncomment the next line if you wish to print to console upon successful tests\n    //console.log(\"All tests passed successfully.\");\n}\n\n// Run the tests\ntestCheckTwoEqualDigits();",
    "entry_point": "checkTwoEqualDigits",
    "signature": "function checkTwoEqualDigits(str: string): string",
    "docstring": {
      "en": "Checks if a three-character string has exactly two characters that are the same.\n\nParameters:\n- str: The three-character string to be checked.\n\nReturns:\n- Returns 'Yes' if the input has exactly two equal characters, otherwise 'No'.\n\nExamples:\n- checkTwoEqualDigits(\"112\") // Returns 'Yes'",
      "es": "Verifica si una cadena de tres caracteres tiene exactamente dos caracteres que son iguales.\n\nParámetros:\n- str: La cadena de tres caracteres que se va a verificar.\n\nDevuelve:\n- Devuelve 'Yes' si la entrada tiene exactamente dos caracteres iguales, de lo contrario 'No'.\n\nEjemplos:\n- checkTwoEqualDigits(\"112\") // Devuelve 'Yes'",
      "arb": "يتحقق مما إذا كانت سلسلة مكونة من ثلاثة أحرف تحتوي على حرفين متطابقين بالضبط.\n\nالمعلمات:\n- str: السلسلة المكونة من ثلاثة أحرف التي سيتم التحقق منها.\n\nالقيم المعادة:\n- يعيد 'Yes' إذا كان الإدخال يحتوي على حرفين متساويين بالضبط، وإلا 'No'.\n\nأمثلة:\n- checkTwoEqualDigits(\"112\") // يعيد 'Yes'",
      "sw": "Hukagua kama mfuatano wa herufi tatu una herufi mbili sawa.\n\nVigezo:\n- str: Mfuatano wa herufi tatu utakaokaguliwa.\n\nInarejesha:\n- Inarejesha 'Yes' ikiwa ingizo lina herufi mbili sawa, vinginevyo 'No'.\n\nMifano:\n- checkTwoEqualDigits(\"112\") // Inarejesha 'Yes'",
      "tr": "Üç karakterli bir dizgede tam olarak iki karakterin aynı olup olmadığını kontrol eder.\n\nParametreler:\n- str: Kontrol edilecek üç karakterli dizge.\n\nDöner:\n- Girdi tam olarak iki eşit karaktere sahipse 'Evet', aksi takdirde 'Hayır' döner.\n\nÖrnekler:\n- checkTwoEqualDigits(\"112\") // 'Evet' döner",
      "vi": "Kiểm tra xem một chuỗi ba ký tự có chính xác hai ký tự giống nhau hay không.\n\nTham số:\n- str: Chuỗi ba ký tự cần được kiểm tra.\n\nTrả về:\n- Trả về 'Yes' nếu đầu vào có chính xác hai ký tự bằng nhau, ngược lại 'No'.\n\nVí dụ:\n- checkTwoEqualDigits(\"112\") // Trả về 'Yes'"
    },
    "docstring_bertscore": {
      "es": "0.9852697695728337",
      "arb": "0.9537669911407005",
      "sw": "0.9246877019875739",
      "tr": "0.9517415571452877",
      "vi": "0.9662171434239673"
    }
  },
  {
    "task_id": "TypeScript/31",
    "prompt": {
      "en": "\n/**\n * Given a string consisting of lowercase English letters, you can change one character to another\n * in each round. This function calculates the minimum number of rounds needed to make the string\n * composed of the same character.\n * \n * @param s The input string.\n * @returns The minimum number of rounds to make all characters in the string the same.\n * \n * Examples:\n * minRoundsToSameChar(\"aab\") // returns 1\n */\nfunction minRoundsToSameChar(s: string): number",
      "es": "/**\n * Dada una cadena que consiste en letras minúsculas del alfabeto inglés, puedes cambiar un carácter por otro\n * en cada ronda. Esta función calcula el número mínimo de rondas necesarias para hacer que la cadena\n * esté compuesta por el mismo carácter.\n * \n * @param s La cadena de entrada.\n * @returns El número mínimo de rondas para hacer que todos los caracteres en la cadena sean iguales.\n * \n * Ejemplos:\n * minRoundsToSameChar(\"aab\") // returns 1\n */\nfunction minRoundsToSameChar(s: string): number",
      "arb": "/**\n * بالنظر إلى سلسلة تتكون من أحرف إنجليزية صغيرة، يمكنك تغيير حرف واحد إلى آخر\n * في كل جولة. تقوم هذه الدالة بحساب الحد الأدنى لعدد الجولات اللازمة لجعل السلسلة\n * مكونة من نفس الحرف.\n * \n * @param s السلسلة المدخلة.\n * @returns الحد الأدنى لعدد الجولات لجعل جميع الأحرف في السلسلة متشابهة.\n * \n * أمثلة:\n * minRoundsToSameChar(\"aab\") // يعيد 1\n */\nfunction minRoundsToSameChar(s: string): number",
      "sw": "/**\n * Ukipewa kamba inayojumuisha herufi ndogo za Kiingereza, unaweza kubadilisha herufi moja kuwa nyingine\n * katika kila mzunguko. Kazi hii inahesabu idadi ndogo ya mizunguko inayohitajika ili kufanya kamba\n * iwe na herufi sawa.\n * \n * @param s Kamba ya ingizo.\n * @returns Idadi ndogo ya mizunguko ya kufanya herufi zote katika kamba kuwa sawa.\n * \n * Mifano:\n * minRoundsToSameChar(\"aab\") // inarudisha 1\n */\nfunction minRoundsToSameChar(s: string): number",
      "tr": "/**\n * Küçük harflerden oluşan bir dize verildiğinde, her turda bir karakteri başka bir karaktere değiştirebilirsiniz.\n * Bu fonksiyon, diziyi aynı karakterden oluşacak şekilde yapmak için gereken minimum tur sayısını hesaplar.\n * \n * @param s Girdi dizisi.\n * @returns Dizideki tüm karakterleri aynı yapmak için gereken minimum tur sayısı.\n * \n * Örnekler:\n * minRoundsToSameChar(\"aab\") // 1 döndürür\n */\nfunction minRoundsToSameChar(s: string): number",
      "vi": "/**\n * Cho một chuỗi bao gồm các chữ cái tiếng Anh viết thường, bạn có thể thay đổi một ký tự thành ký tự khác\n * trong mỗi vòng. Hàm này tính toán số vòng tối thiểu cần thiết để làm cho chuỗi\n * được tạo thành từ cùng một ký tự.\n * \n * @param s Chuỗi đầu vào.\n * @returns Số vòng tối thiểu để làm cho tất cả các ký tự trong chuỗi giống nhau.\n * \n * Ví dụ:\n * minRoundsToSameChar(\"aab\") // trả về 1\n */\nfunction minRoundsToSameChar(s: string): number"
    },
    "prompt_bertscore": {
      "es": "0.9877451013812905",
      "arb": "0.9885118146520852",
      "sw": "0.9665645479603973",
      "tr": "0.9716304171983111",
      "vi": "0.9765306286984418"
    },
    "canonical_solution": "{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}",
    "instruction": {
      "en": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function minRoundsToSameChar(s: string): number\n{\n    const charCount = new Array(26).fill(0); // Assuming only lowercase letters\n    for (const char of s) {\n        charCount[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    let maxCount = 0;\n    for (const count of charCount) {\n        if (count !== 0) {\n            maxCount++;\n        }\n    }\n\n    return maxCount - 1;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.8821400812179956",
      "sw": "0.9442521986283673",
      "tr": "0.8935138554664344",
      "vi": "0.9340241244177377"
    },
    "level": "",
    "test": "const testMinRoundsToSameChar = (): void => {\n    console.assert(minRoundsToSameChar(\"aab\") === 1, \"Expected 1 round for 'aab'\");\n    console.assert(minRoundsToSameChar(\"abc\") === 2, \"Expected 2 rounds for 'abc'\");\n    console.assert(minRoundsToSameChar(\"aaa\") === 0, \"Expected 0 rounds for 'aaa'\");\n    console.assert(minRoundsToSameChar(\"abab\") === 1, \"Expected 1 round for 'abab'\");\n    console.assert(minRoundsToSameChar(\"zzzzz\") === 0, \"Expected 0 rounds for 'zzzzz'\");\n};\n\ntestMinRoundsToSameChar();",
    "entry_point": "minRoundsToSameChar",
    "signature": "function minRoundsToSameChar(s: string): number",
    "docstring": {
      "en": "Given a string consisting of lowercase English letters, you can change one character to another\nin each round. This function calculates the minimum number of rounds needed to make the string\ncomposed of the same character.\n\n@param s The input string.\n@returns The minimum number of rounds to make all characters in the string the same.\n\nExamples:\nminRoundsToSameChar(\"aab\") // returns 1",
      "es": "Dada una cadena compuesta por letras minúsculas del alfabeto inglés, puedes cambiar un carácter por otro en cada ronda. Esta función calcula el número mínimo de rondas necesarias para hacer que la cadena esté compuesta por el mismo carácter.\n\n@param s La cadena de entrada.\n@returns El número mínimo de rondas para hacer que todos los caracteres en la cadena sean iguales.\n\nEjemplos:\nminRoundsToSameChar(\"aab\") // returns 1",
      "arb": "تُعطى سلسلة تتكون من أحرف إنجليزية صغيرة، يمكنك تغيير حرف واحد إلى آخر في كل جولة. تقوم هذه الدالة بحساب الحد الأدنى لعدد الجولات اللازمة لجعل السلسلة مكونة من نفس الحرف.\n\n@param s السلسلة المدخلة.\n@returns الحد الأدنى لعدد الجولات لجعل جميع الأحرف في السلسلة متشابهة.\n\nأمثلة:\nminRoundsToSameChar(\"aab\") // returns 1",
      "sw": "Ukipewa kamba inayojumuisha herufi ndogo za Kiingereza, unaweza kubadilisha herufi moja kuwa nyingine katika kila mzunguko. Kazi hii inahesabu idadi ndogo ya mizunguko inayohitajika ili kufanya kamba iwe na herufi sawa.\n\n@param s Uzi wa maandishi wa kuingiza.\n@returns Idadi ndogo ya raundi za kufanya herufi zote kwenye uzi kuwa sawa.\n\nMifano:\nminRoundsToSameChar(\"aab\") // inarudisha 1",
      "tr": "Verilen bir küçük harf İngilizce harflerden oluşan bir dizede, her turda bir karakteri başka bir karaktere değiştirebilirsiniz. Bu fonksiyon, dizenin aynı karakterden oluşmasını sağlamak için gereken minimum tur sayısını hesaplar.\n\n@param s Girdi dizesi.\n@returns Dizideki tüm karakterleri aynı yapmak için gereken minimum tur sayısı.\n\nÖrnekler:\nminRoundsToSameChar(\"aab\") // 1 döndürür",
      "vi": "Cho một chuỗi bao gồm các chữ cái tiếng Anh viết thường, bạn có thể thay đổi một ký tự thành ký tự khác trong mỗi vòng. Hàm này tính toán số vòng tối thiểu cần thiết để làm cho chuỗi được tạo thành từ cùng một ký tự.\n\n@param s Chuỗi đầu vào.\n@returns Số vòng tối thiểu để làm cho tất cả các ký tự trong chuỗi giống nhau.\n\nVí dụ:\nminRoundsToSameChar(\"aab\") // trả về 1"
    },
    "docstring_bertscore": {
      "es": "0.9827853007668493",
      "arb": "0.995052514469183",
      "sw": "0.9763125325400654",
      "tr": "0.979140036014097",
      "vi": "0.9788518233312155"
    }
  },
  {
    "task_id": "TypeScript/32",
    "prompt": {
      "en": "\n/**\n * Calculates the year Y_n when the n-th event occurs, considering that each\n * event has a periodicity of a_i years. The countdown for event i+1 starts\n * the year after event i occurs.\n *\n * @param n - the total number of events\n * @param signs - an array representing the periodicities of the events\n * @returns The year when the n-th event occurs\n * \n * Example:\n * apocalypseYear(6, [3,2,4,5,9,18]) // returns 36\n */\nfunction apocalypseYear(n: number, signs: number[]): number",
      "es": "/**\n * Calcula el año Y_n cuando ocurre el evento n-ésimo, considerando que cada\n * evento tiene una periodicidad de a_i años. La cuenta regresiva para el evento i+1 comienza\n * el año después de que ocurre el evento i.\n *\n * @param n - el número total de eventos\n * @param signs - un arreglo que representa las periodicidades de los eventos\n * @returns El año en que ocurre el evento n-ésimo\n * \n * Ejemplo:\n * apocalypseYear(6, [3,2,4,5,9,18]) // returns 36\n */\nfunction apocalypseYear(n: number, signs: number[]): number",
      "arb": "/**\n * يحسب السنة Y_n عندما يحدث الحدث n، مع الأخذ في الاعتبار أن كل\n * حدث له دورية a_i سنوات. يبدأ العد التنازلي للحدث i+1\n * في السنة التالية لحدوث الحدث i.\n *\n * @param n - العدد الإجمالي للأحداث\n * @param signs - مصفوفة تمثل دوريات الأحداث\n * @returns السنة التي يحدث فيها الحدث n\n * \n * مثال:\n * apocalypseYear(6, [3,2,4,5,9,18]) // returns 36\n */\nfunction apocalypseYear(n: number, signs: number[]): number",
      "sw": "/**\n * Inahesabu mwaka Y_n wakati tukio la n linapotokea, ikizingatia kwamba kila\n * tukio lina kipindi cha a_i miaka. Muda wa kuhesabu kwa tukio i+1 huanza\n * mwaka baada ya tukio i kutokea.\n *\n * @param n - jumla ya idadi ya matukio\n * @param signs - safu inayowakilisha vipindi vya matukio\n * @returns Mwaka ambapo tukio la n linatokea\n * \n * Mfano:\n * apocalypseYear(6, [3,2,4,5,9,18]) // returns 36\n */\nfunction apocalypseYear(n: number, signs: number[]): number",
      "tr": "/**\n * Her bir olayın a_i yıl periyoduna sahip olduğunu göz önünde bulundurarak,\n * n-inci olayın gerçekleştiği Y_n yılını hesaplar. i+1 olayının geri sayımı,\n * i olayı gerçekleştiği yılın ardından başlar.\n *\n * @param n - toplam olay sayısı\n * @param signs - olayların periyodlarını temsil eden bir dizi\n * @returns n-inci olayın gerçekleştiği yıl\n * \n * Örnek:\n * apocalypseYear(6, [3,2,4,5,9,18]) // 36 döndürür\n */\nfunction apocalypseYear(n: number, signs: number[]): number",
      "vi": "/**\n * Tính toán năm Y_n khi sự kiện thứ n xảy ra, với điều kiện rằng mỗi\n * sự kiện có chu kỳ a_i năm. Đếm ngược cho sự kiện i+1 bắt đầu\n * vào năm sau khi sự kiện i xảy ra.\n *\n * @param n - tổng số sự kiện\n * @param signs - một mảng đại diện cho chu kỳ của các sự kiện\n * @returns Năm khi sự kiện thứ n xảy ra\n * \n * Ví dụ:\n * apocalypseYear(6, [3,2,4,5,9,18]) // trả về 36\n */\nfunction apocalypseYear(n: number, signs: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9942709039198108",
      "arb": "0.9599503549023165",
      "sw": "0.9412792977154181",
      "tr": "0.9395468435320318",
      "vi": "0.9605647186708575"
    },
    "canonical_solution": "{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}",
    "instruction": {
      "en": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nProporciona una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function apocalypseYear(n: number, signs: number[]): number\n{\n    let year = 0;\n    for (let i = 0; i < n; ++i) {\n        let period = signs[i];\n        let nextOccurrence = Math.floor(year / period + 1) * period;\n        year = nextOccurrence;\n    }\n    return year;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9138005721726706",
      "sw": "0.9442521986283673",
      "tr": "0.8946639253726264",
      "vi": "0.927375171042976"
    },
    "level": "",
    "test": "const testApocalypseYear = (): void => {\n    console.assert(apocalypseYear(6, [3, 2, 4, 5, 9, 18]) === 36);\n    console.assert(apocalypseYear(5, [1, 2, 3, 4, 5]) === 5);\n    console.assert(apocalypseYear(5, [1, 1, 1, 1, 1]) === 5);\n    console.assert(apocalypseYear(6, [50, 30, 711, 200, 503, 1006]) === 2012);\n    console.assert(apocalypseYear(2, [1, 2]) === 2);\n    console.assert(apocalypseYear(3, [3, 1, 2]) === 6);\n    console.assert(apocalypseYear(3, [2, 3, 4]) === 4);\n    console.assert(apocalypseYear(4, [1, 2, 3, 4]) === 4);\n    console.assert(apocalypseYear(4, [5, 7, 11, 13]) === 13);\n    console.assert(apocalypseYear(5, [2, 2, 2, 2, 2]) === 10);\n    console.assert(apocalypseYear(3, [6, 10, 15]) === 15);\n    console.assert(apocalypseYear(3, [4, 6, 14]) === 14);\n    console.assert(apocalypseYear(4, [50, 30, 711, 200]) === 800);\n    console.assert(apocalypseYear(6, [1, 1, 1, 1, 1, 1]) === 6);\n    console.assert(apocalypseYear(2, [1000000, 999999]) === 1999998);\n};\n\ntestApocalypseYear();",
    "entry_point": "apocalypseYear",
    "signature": "function apocalypseYear(n: number, signs: number[]): number",
    "docstring": {
      "en": "Calculates the year Y_n when the n-th event occurs, considering that each event has a periodicity of a_i years. The countdown for event i+1 starts the year after event i occurs.\n\nParameters:\n- n - the total number of events\n- signs - an array representing the periodicities of the events\n\nReturns The year when the n-th event occurs\n\nExample:\napocalypseYear(6, [3,2,4,5,9,18]) // returns 36\n",
      "es": "Calcula el año Y_n cuando ocurre el evento n-ésimo, considerando que cada evento tiene una periodicidad de a_i años. La cuenta regresiva para el evento i+1 comienza el año después de que ocurre el evento i.\n\nParámetros:\n- n - el número total de eventos\n- signs - un arreglo que representa las periodicidades de los eventos\n\nDevuelve El año en que ocurre el evento n-ésimo\n\nEjemplo:\napocalypseYear(6, [3,2,4,5,9,18]) // devuelve 36",
      "arb": "يحسب السنة Y_n عندما يحدث الحدث n، مع الأخذ في الاعتبار أن كل حدث له دورية a_i سنوات. يبدأ العد التنازلي للحدث i+1 في السنة التي تلي حدوث الحدث i.\n\nالمعلمات:\n- n - العدد الإجمالي للأحداث\n- signs - مصفوفة تمثل دوريات الأحداث\n\nيعيد السنة التي يحدث فيها الحدث n\n\nمثال:\napocalypseYear(6, [3,2,4,5,9,18]) // يعيد 36",
      "sw": "Hesabu mwaka Y_n wakati tukio la n linapotokea, ukizingatia kuwa kila tukio lina kipindi cha a_i miaka. Hesabu ya tukio la i+1 inaanza mwaka baada ya tukio la i kutokea.\n\nVigezo:\n- n - jumla ya idadi ya matukio\n- signs - safu inayowakilisha vipindi vya matukio\n\nRudisha Mwaka ambapo tukio la n linatokea\n\nMfano:\napocalypseYear(6, [3,2,4,5,9,18]) // inarudisha 36",
      "tr": "n-inci olayın gerçekleştiği yılı Y_n hesaplar, her olayın a_i yıllık bir periyodu olduğunu dikkate alarak. i+1 olayının geri sayımı, i olayı gerçekleştiği yılın sonrasında başlar.\n\nParametreler:\n- n - toplam olay sayısı\n- signs - olayların periyodlarını temsil eden bir dizi\n\nDöndürülen n-inci olayın gerçekleştiği yıl\n\nÖrnek:\napocalypseYear(6, [3,2,4,5,9,18]) // 36 döndürür",
      "vi": "Tính toán năm Y_n khi sự kiện thứ n xảy ra, với điều kiện rằng mỗi sự kiện có chu kỳ là a_i năm. Đếm ngược cho sự kiện i+1 bắt đầu từ năm sau khi sự kiện i xảy ra.\n\nTham số:\n- n - tổng số sự kiện\n- signs - một mảng đại diện cho chu kỳ của các sự kiện\n\nTrả về Năm khi sự kiện thứ n xảy ra\n\nVí dụ:\napocalypseYear(6, [3,2,4,5,9,18]) // trả về 36"
    },
    "docstring_bertscore": {
      "es": "0.9899868438616503",
      "arb": "0.9502681169787709",
      "sw": "0.9203071075642304",
      "tr": "0.92449503051797",
      "vi": "0.9440924998020152"
    }
  },
  {
    "task_id": "TypeScript/33",
    "prompt": {
      "en": "\n/**\n * This problem introduces a new modulo operation, denoted by the symbol \"⊕\".\n * When calculating x ⊕ y, if x is not a multiple of y, the result is the remainder of x divided by y.\n * Otherwise, divide x by y repeatedly until x is no longer a multiple of y, denoting the final value as x'.\n * Then the result is the remainder of x' divided by y.\n * For example, 4⊕5=4, 20⊕5=4, 100⊕5=4.\n * Given a prime number p, there will be several queries. For each query, an integer n is given,\n * and you need to compute the value of n! ⊕ p, where n! is the factorial of n,\n * i.e. the product of all positive integers less than or equal to n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {",
      "es": "/**\n * Este problema introduce una nueva operación de módulo, denotada por el símbolo \"⊕\".\n * Al calcular x ⊕ y, si x no es un múltiplo de y, el resultado es el resto de x dividido por y.\n * De lo contrario, divide x por y repetidamente hasta que x ya no sea un múltiplo de y, denotando el valor final como x'.\n * Luego el resultado es el resto de x' dividido por y.\n * Por ejemplo, 4⊕5=4, 20⊕5=4, 100⊕5=4.\n * Dado un número primo p, habrá varias consultas. Para cada consulta, se da un número entero n,\n * y necesitas calcular el valor de n! ⊕ p, donde n! es el factorial de n,\n * es decir, el producto de todos los enteros positivos menores o iguales a n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {",
      "arb": "/**\n * هذه المشكلة تقدم عملية جديدة للباقي، يرمز لها بالرمز \"⊕\".\n * عند حساب x ⊕ y، إذا لم يكن x مضاعفًا لـ y، فإن النتيجة هي باقي قسمة x على y.\n * خلاف ذلك، قم بتقسيم x على y بشكل متكرر حتى لا يكون x مضاعفًا لـ y، مشيرًا إلى القيمة النهائية بـ x'.\n * ثم تكون النتيجة هي باقي قسمة x' على y.\n * على سبيل المثال، 4⊕5=4، 20⊕5=4، 100⊕5=4.\n * بالنظر إلى عدد أولي p، سيكون هناك عدة استفسارات. لكل استفسار، يُعطى عدد صحيح n،\n * وتحتاج إلى حساب قيمة n! ⊕ p، حيث n! هو مضروب n،\n * أي حاصل ضرب جميع الأعداد الصحيحة الموجبة الأقل من أو تساوي n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {",
      "sw": "/**\n * Shida hii inatambulisha operesheni mpya ya modulo, inayowakilishwa na alama \"⊕\".\n * Wakati wa kuhesabu x ⊕ y, ikiwa x si kigezo cha y, matokeo ni baki ya x iliyogawanywa na y.\n * Vinginevyo, gawanya x kwa y mara kwa mara hadi x isiwe tena kigezo cha y, ukitaja thamani ya mwisho kama x'.\n * Kisha matokeo ni baki ya x' iliyogawanywa na y.\n * Kwa mfano, 4⊕5=4, 20⊕5=4, 100⊕5=4.\n * Ukipewa nambari ya kwanza p, kutakuwa na maswali kadhaa. Kwa kila swali, nambari nzima n inatolewa,\n * na unahitaji kuhesabu thamani ya n! ⊕ p, ambapo n! ni factorial ya n,\n * yaani, bidhaa ya nambari zote chanya zilizo chini au sawa na n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {",
      "tr": "/**\n * Bu problem, \"⊕\" sembolüyle gösterilen yeni bir modül işlemi tanıtmaktadır.\n * x ⊕ y hesaplanırken, eğer x, y'nin katı değilse, sonuç x'in y'ye bölümünden kalan olur.\n * Aksi takdirde, x artık y'nin katı olmayana kadar x'i y'ye bölmeye devam edin ve son değeri x' olarak belirtin.\n * Sonra sonuç, x'in y'ye bölümünden kalan olur.\n * Örneğin, 4⊕5=4, 20⊕5=4, 100⊕5=4.\n * Verilen bir asal sayı p için, birkaç sorgu olacaktır. Her sorgu için bir tamsayı n verilir,\n * ve n! ⊕ p değerini hesaplamanız gerekir, burada n! n'nin faktöriyelidir,\n * yani n'ye eşit veya daha küçük olan tüm pozitif tamsayıların çarpımıdır.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {",
      "vi": "/**\n * Vấn đề này giới thiệu một phép toán modulo mới, được ký hiệu bằng biểu tượng \"⊕\".\n * Khi tính toán x ⊕ y, nếu x không phải là bội số của y, kết quả là phần dư của x chia cho y.\n * Ngược lại, chia x cho y liên tục cho đến khi x không còn là bội số của y, ký hiệu giá trị cuối cùng là x'.\n * Sau đó, kết quả là phần dư của x' chia cho y.\n * Ví dụ, 4⊕5=4, 20⊕5=4, 100⊕5=4.\n * Cho một số nguyên tố p, sẽ có một số truy vấn. Đối với mỗi truy vấn, một số nguyên n được cho,\n * và bạn cần tính giá trị của n! ⊕ p, trong đó n! là giai thừa của n,\n * tức là tích của tất cả các số nguyên dương nhỏ hơn hoặc bằng n.\n * \n * @example\n * newModuloFactorial(3, 7); // returns 6\n */\nfunction newModuloFactorial(n: number, p: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.9949847815092501",
      "arb": "0.981491025204026",
      "sw": "0.9872266760867895",
      "tr": "0.9707512791318507",
      "vi": "0.9857025851731087"
    },
    "canonical_solution": "const pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}",
    "instruction": {
      "en": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، باستخدام 500 حرف كحد أقصى.",
      "sw": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function newModuloFactorial(n: number, p: number): number\nconst pj: number[] = new Array(p).fill(1);\n    for (let i = 2; i < p; i++) pj[i] = (i * pj[i - 1]) % p;\n    \n    let ans = 1;\n    while (n > 0) {\n        ans = (ans * pj[n % p]) % p;\n        ans = ((n / p) & 1) ? p - ans : ans;\n        n = Math.floor(n / p);\n    }\n    return ans;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "(function testNewModuloFactorial(): void {\n    console.assert(newModuloFactorial(3, 7) === 6, 'Test at n=3, p=7 failed');\n    console.assert(newModuloFactorial(10, 3) === 1, 'Test at n=10, p=3 failed');\n    console.assert(newModuloFactorial(11, 7) === 4, 'Test at n=11, p=7 failed');\n    console.assert(newModuloFactorial(45, 7) === 1, 'Test at n=45, p=7 failed');\n    console.assert(newModuloFactorial(14, 7) === 2, 'Test at n=14, p=7 failed');\n    console.assert(newModuloFactorial(1919, 10007) === 3152, 'Test at n=1919, p=10007 failed');\n    console.assert(newModuloFactorial(810, 10007) === 3679, 'Test at n=810, p=10007 failed');\n    console.assert(newModuloFactorial(1, 2) === 1, 'Test at n=1, p=2 failed');\n    console.assert(newModuloFactorial(5, 11) === 10, 'Test at n=5, p=11 failed');\n    console.assert(newModuloFactorial(6, 13) === 5, 'Test at n=6, p=13 failed');\n    console.assert(newModuloFactorial(8, 17) === 13, 'Test at n=8, p=17 failed');\n    console.assert(newModuloFactorial(15, 19) === 16, 'Test at n=15, p=19 failed');\n    console.assert(newModuloFactorial(21, 23) === 1, 'Test at n=21, p=23 failed');\n    console.assert(newModuloFactorial(30, 29) === 28, 'Test at n=30, p=29 failed');\n    console.assert(newModuloFactorial(100, 101) === 100, 'Test at n=100, p=101 failed');\n})();",
    "entry_point": "newModuloFactorial",
    "signature": "function newModuloFactorial(n: number, p: number): number",
    "docstring": {
      "en": "This problem introduces a new modulo operation, denoted by the symbol '⊕'.\nWhen calculating x ⊕ y, if x is not a multiple of y, the result is the remainder of x divided by y.\nOtherwise, divide x by y repeatedly until x is no longer a multiple of y, denoting the final value as x'.\nThen the result is the remainder of x' divided by y.\nFor example, 4⊕5=4, 20⊕5=4, 100⊕5=4.\nGiven a prime number p, there will be several queries. For each query, an integer n is given,\nand you need to compute the value of n! ⊕ p, where n! is the factorial of n,\ni.e. the product of all positive integers less than or equal to n.\n\n@example\nnewModuloFactorial(3, 7); // returns 6",
      "es": "Este problema introduce una nueva operación de módulo, denotada por el símbolo '⊕'.\nAl calcular x ⊕ y, si x no es un múltiplo de y, el resultado es el resto de x dividido por y.\nDe lo contrario, divide x por y repetidamente hasta que x ya no sea un múltiplo de y, denotando el valor final como x'.\nEntonces el resultado es el resto de x' dividido por y.\nPor ejemplo, 4⊕5=4, 20⊕5=4, 100⊕5=4.\nDado un número primo p, habrá varias consultas. Para cada consulta, se da un número entero n,\ny necesitas calcular el valor de n! ⊕ p, donde n! es el factorial de n,\nes decir, el producto de todos los enteros positivos menores o iguales a n.\n\n@example\nnewModuloFactorial(3, 7); // returns 6",
      "arb": "هذه المشكلة تقدم عملية جديدة للباقي، يرمز لها بالرمز '⊕'.\nعند حساب x ⊕ y، إذا لم يكن x مضاعفًا لـ y، فإن النتيجة هي باقي قسمة x على y.\nوإلا، قم بقسمة x على y بشكل متكرر حتى لا يكون x مضاعفًا لـ y، مع الإشارة إلى القيمة النهائية كـ x'.\nثم تكون النتيجة هي باقي قسمة x' على y.\nعلى سبيل المثال، 4⊕5=4، 20⊕5=4، 100⊕5=4.\nمعطى عدد أولي p، سيكون هناك عدة استفسارات. لكل استفسار، يُعطى عدد صحيح n،\nوتحتاج إلى حساب قيمة n! ⊕ p، حيث n! هو مضروب n،\nأي حاصل ضرب جميع الأعداد الصحيحة الموجبة الأقل من أو تساوي n.\n\n@example\nnewModuloFactorial(3, 7); // returns 6",
      "sw": "Tatizo hili linaanzisha operesheni mpya ya modulo, inayowakilishwa na alama '⊕'. Wakati wa kuhesabu x ⊕ y, ikiwa x si kigezo cha y, matokeo ni baki ya x iliyogawanywa na y. Vinginevyo, gawanya x kwa y mara kwa mara hadi x isipo kuwa tena kigezo cha y, ukionyesha thamani ya mwisho kama x'. Kisha matokeo ni baki ya x' iliyogawanywa na y. Kwa mfano, 4⊕5=4, 20⊕5=4, 100⊕5=4. Ukipewa nambari ya kwanza p, kutakuwa na maswali kadhaa. Kwa kila swali, nambari nzima n inatolewa, na unahitaji kuhesabu thamani ya n! ⊕ p, ambapo n! ni factorial ya n, yaani, ni bidhaa ya nambari zote chanya zilizo chini au sawa na n.\n\n@example\nnewModuloFactorial(3, 7); // inarudisha 6",
      "tr": "Bu problem, '⊕' sembolü ile gösterilen yeni bir modül işlemi tanıtır.\nx ⊕ y hesaplanırken, eğer x y'nin katı değilse, sonuç x'in y'ye bölümünden kalan olur.\nAksi takdirde, x artık y'nin katı olmayana kadar x'i y'ye tekrar tekrar bölün, son değeri x' olarak belirtin.\nSonra sonuç, x'in y'ye bölümünden kalan olur.\nÖrneğin, 4⊕5=4, 20⊕5=4, 100⊕5=4.\nVerilen bir asal sayı p için, birkaç sorgu olacaktır. Her sorgu için bir tamsayı n verilir,\nve n! ⊕ p değerini hesaplamanız gerekir, burada n! n'nin faktöriyelidir,\nyani n'ye eşit veya daha küçük olan tüm pozitif tamsayıların çarpımıdır.\n\n@example\nnewModuloFactorial(3, 7); // 6 döndürür",
      "vi": "Vấn đề này giới thiệu một phép toán modulo mới, được ký hiệu bằng biểu tượng '⊕'.  \nKhi tính toán x ⊕ y, nếu x không phải là bội số của y, kết quả là phần dư của x chia cho y.  \nNgược lại, chia x cho y liên tục cho đến khi x không còn là bội số của y, ký hiệu giá trị cuối cùng là x'.  \nSau đó, kết quả là phần dư của x' chia cho y.  \nVí dụ, 4⊕5=4, 20⊕5=4, 100⊕5=4.  \nCho một số nguyên tố p, sẽ có một số truy vấn. Đối với mỗi truy vấn, một số nguyên n được đưa ra,  \nvà bạn cần tính giá trị của n! ⊕ p, trong đó n! là giai thừa của n,  \ntức là tích của tất cả các số nguyên dương nhỏ hơn hoặc bằng n.\n\n@example\nnewModuloFactorial(3, 7); // trả về 6"
    },
    "docstring_bertscore": {
      "es": "0.9932056491863206",
      "arb": "0.9752222503785649",
      "sw": "0.9877669507232043",
      "tr": "0.9669624046136102",
      "vi": "0.9837256169906685"
    }
  },
  {
    "task_id": "TypeScript/34",
    "prompt": {
      "en": "\n/**\n * You are given an array a of n integers. You can perform at most one operation where\n * you select three integers i, j, x (1 <= i <= j <= n) and replace all elements from a[i] to a[j]\n * with x, at a cost of (j - i + 1).\n * Find the minimum cost to make all elements in the array equal.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {",
      "es": "/**\n * Se te da un arreglo a de n enteros. Puedes realizar como máximo una operación donde\n * seleccionas tres enteros i, j, x (1 <= i <= j <= n) y reemplazas todos los elementos desde a[i] hasta a[j]\n * con x, a un costo de (j - i + 1).\n * Encuentra el costo mínimo para hacer que todos los elementos en el arreglo sean iguales.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {",
      "arb": "/**\n * لديك مصفوفة a تحتوي على n عدد صحيح. يمكنك تنفيذ عملية واحدة على الأكثر حيث\n * تختار ثلاثة أعداد صحيحة i، j، x (1 <= i <= j <= n) وتستبدل جميع العناصر من a[i] إلى a[j]\n * بـ x، بتكلفة (j - i + 1).\n * جد التكلفة الدنيا لجعل جميع العناصر في المصفوفة متساوية.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {",
      "sw": "/**\n * Umepewa safu a ya n ya nambari za mzima. Unaweza kufanya operesheni moja tu ambapo\n * unachagua nambari tatu i, j, x (1 <= i <= j <= n) na kubadilisha vipengele vyote kutoka a[i] hadi a[j]\n * na x, kwa gharama ya (j - i + 1).\n * Pata gharama ya chini ya kufanya vipengele vyote katika safu kuwa sawa.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {",
      "tr": "/**\n * Size n olan bir tamsayı dizisi a verilmektedir. En fazla bir işlem gerçekleştirebilirsiniz, \n * bu işlemde i, j, x (1 <= i <= j <= n) üç tamsayısını seçer ve a[i] ile a[j] arasındaki tüm \n * elemanları x ile değiştirirsiniz, bu işlemin maliyeti (j - i + 1) olur.\n * Dizideki tüm elemanları eşit yapmak için minimum maliyeti bulun.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {",
      "vi": "/**\n * Bạn được cho một mảng a gồm n số nguyên. Bạn có thể thực hiện tối đa một thao tác \n * trong đó bạn chọn ba số nguyên i, j, x (1 <= i <= j <= n) và thay thế tất cả các phần tử từ a[i] đến a[j]\n * bằng x, với chi phí là (j - i + 1).\n * Tìm chi phí tối thiểu để làm cho tất cả các phần tử trong mảng bằng nhau.\n */\nfunction makeEqualAgain(n: number, a: number[]): number {"
    },
    "prompt_bertscore": {
      "es": "1",
      "arb": "0.9891156510104312",
      "sw": "0.9845090152134701",
      "tr": "0.9383469174002",
      "vi": "0.98144573747715"
    },
    "canonical_solution": "let j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};",
    "instruction": {
      "en": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nProporciona una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik öz bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function makeEqualAgain(n: number, a: number[]): number\nlet j = 0, p = 1, q = 0, c, d;\n  let k = n;\n  for (p = 1; p < k; p++) {\n      if (a[p] !== a[p - 1])\n          break;\n  }\n  for (q = k - 1; q > p; q--) {\n      if (a[q] !== a[p - 1])\n          break;\n  }\n  for (d = k - 2; d >= 0; d--) {\n      if (a[d] !== a[d + 1])\n          break;\n  }\n  for (c = 0; c < d; c++) {\n      if (a[c] !== a[c + 1])\n          break;\n  }\n  if (q - p + 1 < d - c + 1)\n      return q - p + 1;\n  else\n      return d - c + 1;\n};\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9190900992196297",
      "sw": "0.9442521986283673",
      "tr": "0.908787339985731",
      "vi": "0.9216210475347762"
    },
    "level": "",
    "test": "function testMakeEqualAgain(): void {\n  console.assert(makeEqualAgain(6, [1, 2, 3, 4, 5, 1]) === 4);\n  console.assert(makeEqualAgain(7, [1, 1, 1, 1, 1, 1, 1]) === 0);\n  console.assert(makeEqualAgain(8, [8, 8, 8, 1, 2, 8, 8, 8]) === 2);\n  console.assert(makeEqualAgain(3, [1, 2, 3]) === 2);\n  console.assert(makeEqualAgain(7, [4, 3, 2, 7, 1, 1, 3]) === 6);\n  console.assert(makeEqualAgain(9, [9, 9, 2, 9, 2, 5, 5, 5, 3]) === 7);\n  \n  console.assert(makeEqualAgain(3, [1, 2, 1]) === 1);\n  console.assert(makeEqualAgain(5, [5, 5, 1, 5, 5]) === 1);\n  console.assert(makeEqualAgain(4, [1, 1, 1, 1]) === 0);\n  console.assert(makeEqualAgain(6, [2, 2, 2, 3, 2, 2]) === 1);\n  console.assert(makeEqualAgain(1, [1]) === 0);\n  console.assert(makeEqualAgain(2, [1, 2]) === 1);\n  console.assert(makeEqualAgain(4, [1, 2, 2, 1]) === 2);\n  console.assert(makeEqualAgain(7, [4, 4, 4, 3, 3, 4, 4]) === 2);\n  console.assert(makeEqualAgain(6, [5, 4, 4, 4, 5, 5]) === 3);\n  console.assert(makeEqualAgain(7, [1, 2, 1, 2, 1, 2, 1]) === 5);\n\n};\n\ntestMakeEqualAgain();",
    "entry_point": "makeEqualAgain",
    "signature": "function makeEqualAgain(n: number, a: number[]): number",
    "docstring": {
      "en": "You are given an array a of n integers. You can perform at most one operation where\nyou select three integers i, j, x (1 <= i <= j <= n) and replace all elements from a[i] to a[j]\nwith x, at a cost of (j - i + 1).\nFind the minimum cost to make all elements in the array equal.",
      "es": "Se te da un array a de n enteros. Puedes realizar como máximo una operación donde seleccionas tres enteros i, j, x (1 <= i <= j <= n) y reemplazas todos los elementos desde a[i] hasta a[j] con x, a un costo de (j - i + 1). Encuentra el costo mínimo para hacer que todos los elementos en el array sean iguales.",
      "arb": "أنت مُعطى مصفوفة a تحتوي على n من الأعداد الصحيحة. يمكنك تنفيذ عملية واحدة على الأكثر حيث تختار ثلاثة أعداد صحيحة i، j، x (1 <= i <= j <= n) وتستبدل جميع العناصر من a[i] إلى a[j] بـ x، بتكلفة (j - i + 1).  \nابحث عن الحد الأدنى للتكلفة لجعل جميع العناصر في المصفوفة متساوية.",
      "sw": "Umepewa safu a ya n nambari za mzima. Unaweza kufanya operesheni moja tu ambapo unachagua nambari tatu i, j, x (1 <= i <= j <= n) na kubadilisha vipengele vyote kutoka a[i] hadi a[j] na x, kwa gharama ya (j - i + 1). Tafuta gharama ya chini kabisa ya kufanya vipengele vyote katika safu kuwa sawa.",
      "tr": "Bir n tam sayıdan oluşan bir dizi verilmektedir. En fazla bir işlem gerçekleştirebilirsiniz; burada i, j, x (1 <= i <= j <= n) üç tam sayısını seçip a[i] ile a[j] arasındaki tüm elemanları x ile değiştirirsiniz ve bu işlemin maliyeti (j - i + 1) olur. Dizideki tüm elemanları eşit yapmak için minimum maliyeti bulun.",
      "vi": "Bạn được cung cấp một mảng a gồm n số nguyên. Bạn có thể thực hiện tối đa một thao tác, trong đó bạn chọn ba số nguyên i, j, x (1 <= i <= j <= n) và thay thế tất cả các phần tử từ a[i] đến a[j] bằng x, với chi phí là (j - i + 1). Tìm chi phí tối thiểu để làm cho tất cả các phần tử trong mảng bằng nhau."
    },
    "docstring_bertscore": {
      "es": "0.999999801369619",
      "arb": "0.993584040062192",
      "sw": "0.9802819620746667",
      "tr": "0.9405457557182563",
      "vi": "0.981781422821099"
    }
  },
  {
    "task_id": "TypeScript/35",
    "prompt": {
      "en": "\n/**\n * Given a sequence of N piles of stones numbered from 1 to N, each containing a positive number of stones,\n * this function identifies the winner of a game played by Charlie and Dan. The game starts with Charlie,\n * and they alternate turns moving stones from the leftmost non-empty pile to the adjacent right pile.\n * Movement is done in positive numbers. The player forced to only move stones in the last pile loses.\n * Assuming optimal play, the function determines the winner.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // returns \"Dan\"\n */\nfunction gameWinner(piles: number[]): string",
      "es": "/**\n * Dada una secuencia de N pilas de piedras numeradas del 1 al N, cada una conteniendo un número positivo de piedras,\n * esta función identifica al ganador de un juego jugado por Charlie y Dan. El juego comienza con Charlie,\n * y ellos alternan turnos moviendo piedras de la pila más a la izquierda que no esté vacía a la pila adyacente a la derecha.\n * El movimiento se realiza en números positivos. El jugador obligado a mover piedras solo en la última pila pierde.\n * Suponiendo un juego óptimo, la función determina el ganador.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // returns \"Dan\"\n */\nfunction gameWinner(piles: number[]): string",
      "arb": "/**\n * بالنظر إلى تسلسل من N أكوام من الحجارة مرقمة من 1 إلى N، تحتوي كل منها على عدد موجب من الحجارة،\n * تحدد هذه الدالة الفائز في لعبة يلعبها تشارلي ودان. تبدأ اللعبة مع تشارلي،\n * ويتناوبان الأدوار في نقل الحجارة من الكومة غير الفارغة الأكثر يسارًا إلى الكومة المجاورة على اليمين.\n * يتم النقل بأعداد موجبة. اللاعب الذي يُجبر على نقل الحجارة فقط في الكومة الأخيرة يخسر.\n * بافتراض اللعب الأمثل، تحدد الدالة الفائز.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // returns \"Dan\"\n */\nfunction gameWinner(piles: number[]): string",
      "sw": "/**\n * Ukiwa na mlolongo wa marundo ya mawe N yaliyohesabiwa kutoka 1 hadi N, kila moja ikiwa na idadi chanya ya mawe,\n * kazi hii inatambua mshindi wa mchezo unaochezwa na Charlie na Dan. Mchezo unaanza na Charlie,\n * na wanabadilishana zamu kuhamisha mawe kutoka kwenye rundo la kwanza lisilo tupu kwenda kwenye rundo la kulia lililo karibu.\n * Uhamishaji unafanywa kwa idadi chanya. Mchezaji anayelazimika kuhamisha mawe tu kwenye rundo la mwisho anapoteza.\n * Kwa kudhani uchezaji bora, kazi hii inaamua mshindi.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // inarudisha \"Dan\"\n */\nfunction gameWinner(piles: number[]): string",
      "tr": "/**\n * 1'den N'e kadar numaralandırılmış N taş yığını dizisi verildiğinde, her biri pozitif sayıda taş içerir,\n * bu fonksiyon Charlie ve Dan tarafından oynanan bir oyunun kazananını belirler. Oyun Charlie ile başlar\n * ve taşları en soldaki boş olmayan yığından bitişik sağ yığına hareket ettirerek sırayla oynarlar.\n * Hareket pozitif sayılarla yapılır. Sadece son yığındaki taşları hareket ettirmek zorunda kalan oyuncu kaybeder.\n * Optimal oyun varsayılarak, fonksiyon kazananı belirler.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // \"Dan\" döndürür\n */\nfunction gameWinner(piles: number[]): string",
      "vi": "/**\n * Cho một dãy N đống đá được đánh số từ 1 đến N, mỗi đống chứa một số lượng đá dương,\n * hàm này xác định người chiến thắng của trò chơi được chơi bởi Charlie và Dan. Trò chơi bắt đầu với Charlie,\n * và họ lần lượt di chuyển đá từ đống không rỗng bên trái nhất sang đống liền kề bên phải.\n * Việc di chuyển được thực hiện với số lượng dương. Người chơi bị buộc phải chỉ di chuyển đá trong đống cuối cùng sẽ thua.\n * Giả sử chơi tối ưu, hàm xác định người chiến thắng.\n *\n * @example\n * gameWinner([3, 1, 2, 2]) // trả về \"Dan\"\n */\nfunction gameWinner(piles: number[]): string"
    },
    "prompt_bertscore": {
      "es": "0.9711417864609653",
      "arb": "0.9755013260639189",
      "sw": "0.9569450772372586",
      "tr": "0.9706871215187763",
      "vi": "0.9681583581378213"
    },
    "canonical_solution": "{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}",
    "instruction": {
      "en": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function gameWinner(piles: number[]): string\n{\n    const n = piles.length;\n    const firstPileStones = piles[0];\n    \n    // With only two piles, Charlie always wins.\n    if (n === 2) {\n        return \"Charlie\";\n    }\n    // If the first pile has only one stone, Dan wins.\n    if (firstPileStones === 1) {\n        return \"Dan\";\n    }\n    // In all other cases, Charlie wins.\n    return \"Charlie\";\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9179912759517447",
      "sw": "0.9442521986283673",
      "tr": "0.878088021444884",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    console.assert(gameWinner([1, 2, 2]) === \"Dan\", \"Test 1 failed\");\n    console.assert(gameWinner([5, 5, 5, 5, 5]) === \"Charlie\", \"Test 2 failed\");\n    console.assert(gameWinner([2, 1, 2]) === \"Charlie\", \"Test 3 failed\");\n    console.assert(gameWinner([3, 3, 3, 3]) === \"Charlie\", \"Test 4 failed\");\n    console.assert(gameWinner([1, 1]) === \"Charlie\", \"Test 5 failed\");\n    console.assert(gameWinner([2, 1]) === \"Charlie\", \"Test 6 failed\");\n    console.assert(gameWinner([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) === \"Dan\", \"Test 7 failed\");\n    console.assert(gameWinner([2, 2, 2, 2, 2, 2, 2, 2, 2, 1]) === \"Charlie\", \"Test 8 failed\");\n    console.assert(gameWinner([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) === \"Charlie\", \"Test 9 failed\");\n    console.assert(gameWinner([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === \"Dan\", \"Test 10 failed\");\n})();",
    "entry_point": "gameWinner",
    "signature": "function gameWinner(piles: number[]): string",
    "docstring": {
      "en": "Given a sequence of N piles of stones numbered from 1 to N, each containing a positive number of stones,\nthis function identifies the winner of a game played by Charlie and Dan. The game starts with Charlie,\nand they alternate turns moving stones from the leftmost non-empty pile to the adjacent right pile.\nMovement is done in positive numbers. The player forced to only move stones in the last pile loses.\nAssuming optimal play, the function determines the winner.\n\n@example\ngameWinner([3, 1, 2, 2]) // returns \"Dan\"\n",
      "es": "Dada una secuencia de N pilas de piedras numeradas del 1 al N, cada una conteniendo un número positivo de piedras, esta función identifica al ganador de un juego jugado por Charlie y Dan. El juego comienza con Charlie, y se alternan turnos moviendo piedras desde la pila más a la izquierda no vacía hacia la pila adyacente a la derecha. El movimiento se realiza en números positivos. El jugador obligado a mover piedras solo en la última pila pierde. Suponiendo un juego óptimo, la función determina al ganador.\n\n@example\ngameWinner([3, 1, 2, 2]) // retorna \"Dan\"",
      "arb": "بالنظر إلى تسلسل مكون من N من أكوام الحجارة مرقمة من 1 إلى N، يحتوي كل منها على عدد موجب من الحجارة، تحدد هذه الدالة الفائز في لعبة يلعبها تشارلي ودان. تبدأ اللعبة مع تشارلي، ويتناوبان الأدوار في نقل الحجارة من الكومة غير الفارغة الأكثر إلى اليسار إلى الكومة المجاورة على اليمين. يتم النقل بأعداد موجبة. اللاعب الذي يُجبر على نقل الحجارة فقط في الكومة الأخيرة يخسر. بافتراض اللعب الأمثل، تحدد الدالة الفائز.\n\n@example\ngameWinner([3, 1, 2, 2]) // يعيد \"Dan\"",
      "sw": "Kwa kuzingatia mlolongo wa marundo N ya mawe yaliyoorodheshwa kutoka 1 hadi N, kila moja likiwa na idadi chanya ya mawe, \nkazi hii inatambua mshindi wa mchezo unaochezwa na Charlie na Dan. Mchezo unaanza na Charlie, \nna wanabadilisha zamu kuhamisha mawe kutoka kwenye rundo la kwanza lisilo tupu kwenda kwenye rundo la kulia lililo karibu. \nUhamishaji unafanywa kwa namba chanya. Mchezaji anayelazimika kuhamisha mawe tu kwenye rundo la mwisho anapoteza. \nKwa kudhani mchezo bora, kazi hii inaamua mshindi.\n\n@mfano\ngameWinner([3, 1, 2, 2]) // inarejesha \"Dan\"",
      "tr": "Verilen 1'den N'ye kadar numaralandırılmış N taş yığını dizisinde, her biri pozitif sayıda taş içeren bu fonksiyon, Charlie ve Dan tarafından oynanan bir oyunun kazananını belirler. Oyun Charlie ile başlar ve sırayla taşları en soldaki boş olmayan yığından bitişik sağdaki yığına hareket ettirirler. Hareket pozitif sayılarla yapılır. Sadece son yığındaki taşları hareket ettirmek zorunda kalan oyuncu kaybeder. Optimal oyun varsayılarak, fonksiyon kazananı belirler.\n\n@example\ngameWinner([3, 1, 2, 2]) // \"Dan\" döndürür",
      "vi": "Cho một dãy N đống đá được đánh số từ 1 đến N, mỗi đống chứa một số lượng đá dương, hàm này xác định người chiến thắng của một trò chơi được chơi bởi Charlie và Dan. Trò chơi bắt đầu với Charlie, và họ lần lượt thay phiên nhau di chuyển đá từ đống không rỗng bên trái nhất sang đống liền kề bên phải. Việc di chuyển được thực hiện với số lượng dương. Người chơi bị buộc phải chỉ di chuyển đá trong đống cuối cùng sẽ thua. Giả sử chơi tối ưu, hàm xác định người chiến thắng.\n\n@example\ngameWinner([3, 1, 2, 2]) // trả về \"Dan\""
    },
    "docstring_bertscore": {
      "es": "0.9636399142300396",
      "arb": "0.9717009309835785",
      "sw": "0.9337655076616304",
      "tr": "0.9667012056625492",
      "vi": "0.9662477325026466"
    }
  },
  {
    "task_id": "TypeScript/36",
    "prompt": {
      "en": "\n/**\n * Given n doors arranged in a circle, the player starts in front of door 1.\n * Each turn, the player can choose a number i and pay a cost C_i to move i steps\n * to the right and then open the door at that position. It is guaranteed that\n * C_i >= C_{i+1} for 1 <= i < n.\n * The task is to determine the minimum total cost required to open all doors.\n *\n * Example:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */\nfunction minTotalCost(n: number, C: number[]): number",
      "es": "/**\n * Dado n puertas dispuestas en un círculo, el jugador comienza frente a la puerta 1.\n * En cada turno, el jugador puede elegir un número i y pagar un costo C_i para moverse i pasos\n * a la derecha y luego abrir la puerta en esa posición. Se garantiza que\n * C_i >= C_{i+1} para 1 <= i < n.\n * La tarea es determinar el costo total mínimo requerido para abrir todas las puertas.\n *\n * Ejemplo:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */\nfunction minTotalCost(n: number, C: number[]): number",
      "arb": "/**\n * بالنظر إلى n أبواب مرتبة في دائرة، يبدأ اللاعب أمام الباب 1.\n * في كل دور، يمكن للاعب اختيار رقم i ودفع تكلفة C_i للتحرك i خطوات\n * إلى اليمين ثم فتح الباب في ذلك الموقع. من المضمون أن\n * C_i >= C_{i+1} لـ 1 <= i < n.\n * المهمة هي تحديد الحد الأدنى للتكلفة الإجمالية المطلوبة لفتح جميع الأبواب.\n *\n * مثال:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */ \nfunction minTotalCost(n: number, C: number[]): number",
      "sw": "/**\n * Ukiwa na milango n iliyopangwa kwa mduara, mchezaji anaanza mbele ya mlango wa 1.\n * Kila zamu, mchezaji anaweza kuchagua namba i na kulipa gharama C_i ili kusonga hatua i\n * kwenda kulia na kisha kufungua mlango katika nafasi hiyo. Inahakikishwa kuwa\n * C_i >= C_{i+1} kwa 1 <= i < n.\n * Kazi ni kuamua gharama ndogo kabisa inayohitajika kufungua milango yote.\n *\n * Mfano:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */",
      "tr": "/**\n * Çember şeklinde düzenlenmiş n kapı verildiğinde, oyuncu 1 numaralı kapının önünde başlar.\n * Her turda, oyuncu bir sayı i seçebilir ve i adım sağa hareket etmek için bir maliyet C_i öder\n * ve ardından o konumdaki kapıyı açar. C_i >= C_{i+1} olduğu garanti edilir, 1 <= i < n için.\n * Görev, tüm kapıları açmak için gereken minimum toplam maliyeti belirlemektir.\n *\n * Örnek:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */ \nfunction minTotalCost(n: number, C: number[]): number",
      "vi": "/**\n * Cho n cánh cửa được sắp xếp thành một vòng tròn, người chơi bắt đầu trước cửa số 1.\n * Mỗi lượt, người chơi có thể chọn một số i và trả một chi phí C_i để di chuyển i bước\n * sang phải và sau đó mở cánh cửa tại vị trí đó. Đảm bảo rằng\n * C_i >= C_{i+1} cho 1 <= i < n.\n * Nhiệm vụ là xác định tổng chi phí tối thiểu cần thiết để mở tất cả các cửa.\n *\n * Ví dụ:\n *     > minTotalCost(3, [1, 1, 1])\n *     3\n */ \nfunction minTotalCost(n: number, C: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9938819856337444",
      "arb": "0.991425722341867",
      "sw": "0.9576027424288652",
      "tr": "0.9852191188256698",
      "vi": "0.9880984648291515"
    },
    "canonical_solution": "{\n   return C[n-2] * (n - 1) + C[n-1];\n}",
    "instruction": {
      "en": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik özlü bir açıklama (docstring) sağlayın.",
      "vi": "function minTotalCost(n: number, C: number[]): number\n{\n   return C[n-2] * (n - 1) + C[n-1];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.8745351198193129",
      "vi": "0.927375171042976"
    },
    "level": "",
    "test": "function testMinTotalCost(): void {\n    console.assert(minTotalCost(5, [4, 3, 3, 3, 3]) === 15);\n    console.assert(minTotalCost(3, [1, 1, 1]) === 3);\n    console.assert(minTotalCost(4, [5, 4, 3, 2]) === 11);\n    console.assert(minTotalCost(4, [100, 99, 98, 97]) === 391);\n    console.assert(minTotalCost(6, [10, 9, 8, 7, 6, 5]) === 35);\n    console.assert(minTotalCost(7, [2, 2, 2, 2, 2, 2, 2]) === 14);\n    console.assert(minTotalCost(8, [9, 7, 7, 7, 7, 7, 7, 7]) === 56);\n    console.assert(minTotalCost(9, [3, 2, 2, 2, 2, 2, 2, 2, 2]) === 18);\n    console.assert(minTotalCost(10, [6, 5, 5, 5, 5, 5, 5, 5, 5, 5]) === 50);\n    console.assert(minTotalCost(11, [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) === 11);\n}\n\ntestMinTotalCost();",
    "entry_point": "minTotalCost",
    "signature": "function minTotalCost(n: number, C: number[]): number",
    "docstring": {
      "en": "Given n doors arranged in a circle, the player starts in front of door 1.\nEach turn, the player can choose a number i and pay a cost C_i to move i steps\nto the right and then open the door at that position. It is guaranteed that\nC_i >= C_{i+1} for 1 <= i < n.\nThe task is to determine the minimum total cost required to open all doors.\n\nExample:\n    > minTotalCost(3, [1, 1, 1])\n    3\n",
      "es": "Dado n puertas dispuestas en un círculo, el jugador comienza frente a la puerta 1.  \nEn cada turno, el jugador puede elegir un número i y pagar un costo C_i para moverse i pasos a la derecha y luego abrir la puerta en esa posición. Se garantiza que C_i >= C_{i+1} para 1 <= i < n.  \nLa tarea es determinar el costo total mínimo requerido para abrir todas las puertas.\n\nEjemplo:\n    > minTotalCost(3, [1, 1, 1])\n    3",
      "arb": "معطى n من الأبواب مرتبة في دائرة، يبدأ اللاعب أمام الباب 1. \nفي كل دور، يمكن للاعب اختيار رقم i ودفع تكلفة C_i للتحرك i خطوات إلى اليمين ثم فتح الباب في ذلك الموقع. من المضمون أن C_i >= C_{i+1} لـ 1 <= i < n. \nالمهمة هي تحديد الحد الأدنى للتكلفة الإجمالية المطلوبة لفتح جميع الأبواب.\n\nمثال:\n    > minTotalCost(3, [1, 1, 1])\n    3",
      "sw": "Kwa kuzingatia milango n iliyopangwa kwa mduara, mchezaji anaanza mbele ya mlango wa 1. Kila zamu, mchezaji anaweza kuchagua namba i na kulipa gharama C_i ili kusonga hatua i kwenda kulia na kisha kufungua mlango katika nafasi hiyo. Inahakikishwa kuwa C_i >= C_{i+1} kwa 1 <= i < n. Kazi ni kuamua gharama ndogo kabisa inayohitajika kufungua milango yote.\n\nMfano:\n    > minTotalCost(3, [1, 1, 1])\n    3",
      "tr": "Verilen n kapı bir daire şeklinde düzenlenmiştir, oyuncu kapı 1'in önünde başlar. Her turda, oyuncu bir sayı i seçebilir ve i adım sağa hareket etmek için bir maliyet C_i öder ve ardından o konumdaki kapıyı açar. C_i >= C_{i+1} olduğu garanti edilir, 1 <= i < n için. Görev, tüm kapıları açmak için gereken minimum toplam maliyeti belirlemektir.\n\nÖrnek:\n    > minTotalCost(3, [1, 1, 1])\n    3",
      "vi": "Với n cánh cửa được sắp xếp thành một vòng tròn, người chơi bắt đầu trước cửa số 1.  \nMỗi lượt, người chơi có thể chọn một số i và trả một chi phí C_i để di chuyển i bước  \nsang phải và sau đó mở cánh cửa ở vị trí đó. Đảm bảo rằng C_i >= C_{i+1} cho 1 <= i < n.  \nNhiệm vụ là xác định tổng chi phí tối thiểu cần thiết để mở tất cả các cửa.\n\nVí dụ:  \n    > minTotalCost(3, [1, 1, 1])  \n    3  "
    },
    "docstring_bertscore": {
      "es": "0.9927710459126163",
      "arb": "0.989678172249522",
      "sw": "0.994608376937189",
      "tr": "0.9756222919659692",
      "vi": "0.9847638579923379"
    }
  },
  {
    "task_id": "TypeScript/37",
    "prompt": {
      "en": "\n/**\n * Calculates the total number of handshakes in a classroom where each student shakes\n * hands with every student already in the room with a smaller student ID. The student\n * IDs range from 0 to N-1, and the sequence of ID entries represents the order in which\n * they enter the classroom.\n * \n * @param n - the number of students\n * @param order - the sequence of student IDs entering the classroom\n * @returns the total number of handshakes\n * \n * Examples:\n *    countHandshakes(3, [2, 1, 0])  // returns 0\n */\nfunction countHandshakes(n: number, order: number[]): number",
      "es": "/**\n * Calcula el número total de apretones de manos en un aula donde cada estudiante se da\n * la mano con cada estudiante que ya está en la sala con un ID de estudiante más pequeño. Los\n * IDs de los estudiantes van de 0 a N-1, y la secuencia de entradas de ID representa el orden en el que\n * entran al aula.\n * \n * @param n - el número de estudiantes\n * @param order - la secuencia de IDs de estudiantes entrando al aula\n * @returns el número total de apretones de manos\n * \n * Ejemplos:\n *    countHandshakes(3, [2, 1, 0])  // returns 0\n */\nfunction countHandshakes(n: number, order: number[]): number",
      "arb": "/**\n * يحسب العدد الإجمالي للمصافحات في الفصل الدراسي حيث يصافح كل طالب\n * كل طالب موجود بالفعل في الغرفة برقم تعريف أصغر. تتراوح أرقام تعريف الطلاب\n * من 0 إلى N-1، وتمثل تسلسل إدخال الأرقام التعريفية الترتيب الذي يدخلون به\n * إلى الفصل الدراسي.\n * \n * @param n - عدد الطلاب\n * @param order - تسلسل أرقام تعريف الطلاب الذين يدخلون الفصل\n * @returns العدد الإجمالي للمصافحات\n * \n * أمثلة:\n *    countHandshakes(3, [2, 1, 0])  // يعيد 0\n */\nfunction countHandshakes(n: number, order: number[]): number",
      "sw": "/**\n * Inahesabu jumla ya mikono iliyoshikwa katika darasa ambapo kila mwanafunzi anashikana\n * mikono na kila mwanafunzi ambaye tayari yuko darasani na ana kitambulisho kidogo. Vitambulisho\n * vya wanafunzi vinatoka 0 hadi N-1, na mpangilio wa kuingia kwa vitambulisho unaonyesha\n * mpangilio ambao wanaingia darasani.\n * \n * @param n - idadi ya wanafunzi\n * @param order - mpangilio wa vitambulisho vya wanafunzi wanaoingia darasani\n * @returns jumla ya mikono iliyoshikwa\n * \n * Mifano:\n *    countHandshakes(3, [2, 1, 0])  // inarudisha 0\n */\nfunction countHandshakes(n: number, order: number[]): number",
      "tr": "/**\n * Her öğrencinin, sınıfa daha önce girmiş olan ve daha küçük öğrenci kimliğine sahip\n * her öğrenciyle tokalaştığı bir sınıfta toplam tokalaşma sayısını hesaplar. Öğrenci\n * kimlikleri 0'dan N-1'e kadar sıralanır ve kimlik giriş sırası, sınıfa giriş sırasını\n * temsil eder.\n * \n * @param n - öğrenci sayısı\n * @param order - sınıfa giren öğrencilerin kimlik sırası\n * @returns toplam tokalaşma sayısı\n * \n * Örnekler:\n *    countHandshakes(3, [2, 1, 0])  // 0 döndürür\n */\nfunction countHandshakes(n: number, order: number[]): number",
      "vi": "/**\n * Tính tổng số cái bắt tay trong một lớp học nơi mỗi học sinh bắt tay\n * với mỗi học sinh đã có mặt trong phòng với ID học sinh nhỏ hơn. Các ID học sinh\n * dao động từ 0 đến N-1, và thứ tự của các ID đại diện cho thứ tự mà họ vào lớp.\n * \n * @param n - số lượng học sinh\n * @param order - thứ tự của các ID học sinh vào lớp\n * @returns tổng số cái bắt tay\n * \n * Ví dụ:\n *    countHandshakes(3, [2, 1, 0])  // trả về 0\n */\nfunction countHandshakes(n: number, order: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.995428720410863",
      "arb": "0.9605017528400693",
      "sw": "0.9610674521652567",
      "tr": "0.9327971845540852",
      "vi": "0.9626280910690479"
    },
    "canonical_solution": "{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};",
    "instruction": {
      "en": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nTürkçe çeviri: TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik özlü bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function countHandshakes(n: number, order: number[]): number\n{\n    let ans = 0;\n    const tr = new Array(n + 1).fill(0); // Increase the size to accommodate 1-indexed values.\n    for (let i = 0; i < n; ++i) {\n        let x = order[i] + 1; // Convert 0-indexed to 1-indexed\n        for (let j = x - 1; j > 0; j -= j & (-j)) {\n            ans += tr[j];\n        }\n        for (let j = x; j <= n; j += j & (-j)) {\n            tr[j]++;\n        }\n    }\n    return ans;\n};\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9070262830274758",
      "sw": "0.9442521986283673",
      "tr": "0.854011238438121",
      "vi": "0.9508159395696651"
    },
    "level": "",
    "test": "(() => {\n    console.assert(countHandshakes(4, [2, 1, 3, 0]) === 2, \"Test 1 failed\");\n    console.assert(countHandshakes(6, [0, 1, 2, 3, 4, 5]) === 15, \"Test 2 failed\");\n    console.assert(countHandshakes(3, [1, 2, 0]) === 1, \"Test 3 failed\");\n    console.assert(countHandshakes(4, [3, 2, 1, 0]) === 0, \"Test 4 failed\");\n    console.assert(countHandshakes(4, [0, 1, 2, 3]) === 6, \"Test 5 failed\");\n    console.assert(countHandshakes(6, [5, 4, 3, 2, 1, 0]) === 0, \"Test 6 failed\");\n    console.assert(countHandshakes(4, [0, 2, 1, 3]) === 5, \"Test 7 failed\");\n    console.assert(countHandshakes(5, [3, 1, 4, 2, 0]) === 3, \"Test 8 failed\");\n    console.assert(countHandshakes(4, [1, 0, 3, 2]) === 4, \"Test 9 failed\");\n    console.assert(countHandshakes(3, [2, 0, 1]) === 1, \"Test 10 failed\");\n    console.assert(countHandshakes(5, [1, 3, 0, 2, 4]) === 7, \"Test 11 failed\");\n    console.assert(countHandshakes(5, [4, 3, 2, 1, 0]) === 0, \"Test 12 failed\");\n})();",
    "entry_point": "countHandshakes",
    "signature": "function countHandshakes(n: number, order: number[]): number",
    "docstring": {
      "en": "Calculates the total number of handshakes in a classroom where each student shakes hands with every student already in the room with a smaller student ID. The student IDs range from 0 to N-1, and the sequence of ID entries represents the order in which they enter the classroom.\n\n@param n - the number of students\n@param order - the sequence of student IDs entering the classroom\n@returns the total number of handshakes\n\nExamples:\n   countHandshakes(3, [2, 1, 0])  // returns 0\n",
      "es": "Calcula el número total de apretones de manos en un aula donde cada estudiante se da la mano con cada estudiante que ya está en la sala con un ID de estudiante más pequeño. Los IDs de estudiantes van de 0 a N-1, y la secuencia de entradas de ID representa el orden en que entran al aula.\n\n@param n - el número de estudiantes\n@param order - la secuencia de IDs de estudiantes entrando al aula\n@returns el número total de apretones de manos\n\nEjemplos:\n   countHandshakes(3, [2, 1, 0])  // devuelve 0",
      "arb": "يحسب العدد الإجمالي للمصافحات في الفصل حيث يصافح كل طالب كل طالب موجود بالفعل في الغرفة برقم تعريف أصغر. تتراوح أرقام تعريف الطلاب من 0 إلى N-1، وتمثل تسلسل أرقام التعريف ترتيب دخولهم إلى الفصل.\n\n@param n - عدد الطلاب\n@param order - تسلسل أرقام تعريف الطلاب الذين يدخلون الفصل\n@returns العدد الإجمالي للمصافحات\n\nأمثلة:\n   countHandshakes(3, [2, 1, 0])  // يعيد 0",
      "sw": "Hesabu jumla ya mikono iliyoshikwa katika darasa ambapo kila mwanafunzi anashikana mikono na kila mwanafunzi ambaye tayari yuko darasani na ana kitambulisho kidogo. Vitambulisho vya wanafunzi vinatoka 0 hadi N-1, na mpangilio wa kuingia kwa vitambulisho unawakilisha mpangilio ambao wanaingia darasani.\n\n@param n - idadi ya wanafunzi\n@param order - mpangilio wa vitambulisho vya wanafunzi wanaoingia darasani\n@returns jumla ya mikono iliyoshikwa\n\nMifano:\n   countHandshakes(3, [2, 1, 0])  // inarudisha 0",
      "tr": "Sınıfta her öğrencinin, sınıfa daha önce girmiş olan ve daha küçük öğrenci kimlik numarasına sahip her öğrenciyle tokalaştığı toplam tokalaşma sayısını hesaplar. Öğrenci kimlik numaraları 0'dan N-1'e kadar uzanır ve kimlik numaralarının sırası, sınıfa giriş sırasını temsil eder.\n\n@param n - öğrenci sayısı\n@param order - sınıfa giren öğrenci kimlik numaralarının sırası\n@returns toplam tokalaşma sayısı\n\nÖrnekler:\n   countHandshakes(3, [2, 1, 0])  // 0 döndürür",
      "vi": "Tính tổng số lần bắt tay trong một lớp học nơi mỗi học sinh bắt tay với mọi học sinh đã có mặt trong phòng với ID nhỏ hơn. Các ID học sinh nằm trong khoảng từ 0 đến N-1, và thứ tự của các ID đại diện cho thứ tự mà họ vào lớp.\n\n@param n - số lượng học sinh\n@param order - thứ tự của các ID học sinh vào lớp\n@returns tổng số lần bắt tay\n\nVí dụ:\n   countHandshakes(3, [2, 1, 0])  // trả về 0"
    },
    "docstring_bertscore": {
      "es": "0.9913675236402237",
      "arb": "0.9414449554532012",
      "sw": "0.9527086884705466",
      "tr": "0.9010393647127032",
      "vi": "0.9608706094576511"
    }
  },
  {
    "task_id": "TypeScript/38",
    "prompt": {
      "en": "\n/**\n * Given n positive integers representing the count of each number from 1 to n, \n * find the maximum sum of the mode (most frequent element) for all prefixes of \n * a sequence constructed from these numbers. The mode is the largest number \n * among the most frequent elements in a sequence.\n * For example:\n *   maxModeSum(3, [1, 2, 3])\n *   A sequence that reaches its maximum value is [3, 2, 3, 1, 2, 2], and the sum is 17.\n */\nfunction maxModeSum(n: number, counts: number[]): number",
      "es": "/**\n * Dado n enteros positivos que representan el conteo de cada número del 1 al n,\n * encuentra la suma máxima del modo (elemento más frecuente) para todos los prefijos de\n * una secuencia construida a partir de estos números. El modo es el número más grande\n * entre los elementos más frecuentes en una secuencia.\n * Por ejemplo:\n *   maxModeSum(3, [1, 2, 3])\n *   Una secuencia que alcanza su valor máximo es [3, 2, 3, 1, 2, 2], y la suma es 17.\n */\nfunction maxModeSum(n: number, counts: number[]): number",
      "arb": "/**\n * بالنظر إلى n من الأعداد الصحيحة الموجبة التي تمثل عدد كل رقم من 1 إلى n،\n * ابحث عن الحد الأقصى لمجموع الوضع (العنصر الأكثر تكرارًا) لجميع البادئات\n * لتسلسل تم تكوينه من هذه الأرقام. الوضع هو أكبر رقم\n * بين العناصر الأكثر تكرارًا في تسلسل.\n * على سبيل المثال:\n *   maxModeSum(3, [1, 2, 3])\n *   التسلسل الذي يصل إلى قيمته القصوى هو [3, 2, 3, 1, 2, 2]، والمجموع هو 17.\n */\nfunction maxModeSum(n: number, counts: number[]): number",
      "sw": "/**\n * Ukipewa n nambari chanya zinazowakilisha idadi ya kila nambari kutoka 1 hadi n,\n * pata jumla ya juu zaidi ya hali (kipengele kinachotokea mara nyingi zaidi) kwa viambishi vyote vya\n * mlolongo uliotengenezwa kutoka kwa nambari hizi. Hali ni nambari kubwa zaidi\n * kati ya vipengele vinavyotokea mara nyingi zaidi katika mlolongo.\n * Kwa mfano:\n *   maxModeSum(3, [1, 2, 3])\n *   Mlolongo unaofikia thamani yake ya juu zaidi ni [3, 2, 3, 1, 2, 2], na jumla ni 17.\n */\nfunction maxModeSum(n: number, counts: number[]): number",
      "tr": "/**\n * 1'den n'e kadar olan her sayının sayısını temsil eden n pozitif tamsayı verildiğinde,\n * bu sayılardan oluşturulan bir dizinin tüm önekleri için modun (en sık görülen eleman) \n * maksimum toplamını bulun. Mod, bir dizideki en sık görülen elemanlar arasında en büyük sayıdır.\n * Örneğin:\n *   maxModeSum(3, [1, 2, 3])\n *   Maksimum değerine ulaşan bir dizi [3, 2, 3, 1, 2, 2] ve toplam 17'dir.\n */\nfunction maxModeSum(n: number, counts: number[]): number",
      "vi": "/**\n * Cho n số nguyên dương đại diện cho số lượng của mỗi số từ 1 đến n,\n * tìm tổng lớn nhất của mode (phần tử xuất hiện nhiều nhất) cho tất cả các tiền tố của\n * một dãy được tạo từ các số này. Mode là số lớn nhất\n * trong số các phần tử xuất hiện nhiều nhất trong một dãy.\n * Ví dụ:\n *   maxModeSum(3, [1, 2, 3])\n *   Một dãy đạt giá trị lớn nhất là [3, 2, 3, 1, 2, 2], và tổng là 17.\n */\nfunction maxModeSum(n: number, counts: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.999999801369619",
      "arb": "0.9864194422182636",
      "sw": "0.9626193513322823",
      "tr": "0.95964009424714",
      "vi": "0.9719668970637841"
    },
    "canonical_solution": "{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}",
    "instruction": {
      "en": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function maxModeSum(n: number, counts: number[]): number\n{\n  let ans = 0;\n  let mx = 0;\n  let f = new Array(100000).fill(0); // Initialize the array with zeroes\n  \n  for (let i = 0; i < n; ++i) {\n    f[i] = 0;\n  }\n  \n  for (let i = n; i > 0; --i) {\n    while (mx < counts[i - 1]) {\n      mx++;\n      f[mx] = f[mx - 1] + i;\n    }\n    ans += f[counts[i - 1]];\n  }\n  return ans;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.9005839052489902",
      "vi": "0.9340241244177377"
    },
    "level": "",
    "test": "(function testMaxModeSum(): void {\n  console.assert(maxModeSum(3, [1, 3, 2]) === 17, 'Test case 1 failed');\n  console.assert(maxModeSum(4, [4, 1, 2, 3]) === 37, 'Test case 2 failed');\n  console.assert(maxModeSum(2, [1, 1]) === 4, 'Test case 3 failed');\n  console.assert(maxModeSum(5, [1, 2, 3, 4, 5]) === 75, 'Test case 4 failed');\n  console.assert(maxModeSum(1, [100000]) === 100000, 'Test case 5 failed');\n  console.assert(maxModeSum(5, [5, 3, 2, 4, 1]) === 62, 'Test case 6 failed');\n  console.assert(maxModeSum(3, [100000, 100000, 100000]) === 900000, 'Test case 7 failed');\n  console.assert(maxModeSum(3, [2, 2, 5]) === 27, 'Test case 8 failed');\n  console.assert(maxModeSum(4, [4, 4, 4, 4]) === 64, 'Test case 9 failed');\n  console.assert(maxModeSum(6, [1, 2, 3, 4, 5, 6]) === 126, 'Test case 10 failed');\n  console.assert(maxModeSum(3, [3, 1, 2]) === 16, 'Test case 11 failed');\n})();",
    "entry_point": "maxModeSum",
    "signature": "function maxModeSum(n: number, counts: number[]): number",
    "docstring": {
      "en": "Given n positive integers representing the count of each number from 1 to n, find the maximum sum of the mode (most frequent element) for all prefixes of a sequence constructed from these numbers. The mode is the largest number among the most frequent elements in a sequence.\nFor example:\n  maxModeSum(3, [1, 2, 3])\n  A sequence that reaches its maximum value is [3, 2, 3, 1, 2, 2], and the sum is 17.",
      "es": "Dado n enteros positivos que representan el conteo de cada número del 1 al n, encuentra la suma máxima del modo (elemento más frecuente) para todos los prefijos de una secuencia construida a partir de estos números. El modo es el número más grande entre los elementos más frecuentes en una secuencia.\nPor ejemplo:\n  maxModeSum(3, [1, 2, 3])\n  Una secuencia que alcanza su valor máximo es [3, 2, 3, 1, 2, 2], y la suma es 17.",
      "arb": "إعطاء n من الأعداد الصحيحة الموجبة التي تمثل عدد كل رقم من 1 إلى n، ابحث عن أقصى مجموع للوضع (العنصر الأكثر تكرارًا) لجميع البادئات لتسلسل تم إنشاؤه من هذه الأرقام. الوضع هو أكبر رقم بين العناصر الأكثر تكرارًا في تسلسل.\nعلى سبيل المثال:\n  maxModeSum(3, [1, 2, 3])\n  تسلسل يصل إلى قيمته القصوى هو [3, 2, 3, 1, 2, 2]، والمجموع هو 17.",
      "sw": "Kwa kuzingatia n nambari chanya zinazowakilisha idadi ya kila nambari kutoka 1 hadi n, tafuta jumla ya juu zaidi ya hali (kipengele kinachojitokeza mara nyingi zaidi) kwa viambishi vyote vya mlolongo ulioundwa kutoka kwa nambari hizi. Hali ni nambari kubwa zaidi kati ya vipengele vinavyojitokeza mara nyingi zaidi katika mlolongo.\n\nKwa mfano:\n  maxModeSum(3, [1, 2, 3])\n  Mlolongo unaofikia thamani yake ya juu ni [3, 2, 3, 1, 2, 2], na jumla ni 17.",
      "tr": "Verilen n pozitif tam sayı, 1'den n'e kadar olan her sayının sayısını temsil eder, bu sayılardan oluşturulan bir dizinin tüm önekleri için modun (en sık rastlanan eleman) maksimum toplamını bulun. Mod, bir dizideki en sık rastlanan elemanlar arasında en büyük sayıdır.\nÖrneğin:\n  maxModeSum(3, [1, 2, 3])\n  Maksimum değerine ulaşan bir dizi [3, 2, 3, 1, 2, 2] olup, toplam 17'dir.",
      "vi": "Đưa ra n số nguyên dương đại diện cho số lượng của mỗi số từ 1 đến n, tìm tổng lớn nhất của mode (phần tử xuất hiện nhiều nhất) cho tất cả các tiền tố của một dãy được tạo từ các số này. Mode là số lớn nhất trong số các phần tử xuất hiện nhiều nhất trong một dãy.\nVí dụ:\n  maxModeSum(3, [1, 2, 3])\n  Một dãy đạt giá trị lớn nhất là [3, 2, 3, 1, 2, 2], và tổng là 17."
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9849042896717295",
      "sw": "0.9450270557447843",
      "tr": "0.9349660296846052",
      "vi": "0.9613391785265125"
    }
  },
  {
    "task_id": "TypeScript/39",
    "prompt": {
      "en": "\n/**\n * Given an array A of integers, the task is to calculate the sum of the XOR of all subarrays.\n * A subarray is defined by a pair of indices (L, R) such that 1 <= L <= R <= the length of the array.\n * The XOR sum of a subarray is the result of XORing all elements from L to R.\n * The final result is the sum of the XOR sums for all possible subarrays.\n *\n * Example:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // returns 39\n */\nfunction sumOfXorSubarrays(A: number[]): number",
      "es": "/**\n * Dado un array A de enteros, la tarea es calcular la suma del XOR de todos los subarrays.\n * Un subarray se define por un par de índices (L, R) tal que 1 <= L <= R <= la longitud del array.\n * La suma XOR de un subarray es el resultado de aplicar XOR a todos los elementos desde L hasta R.\n * El resultado final es la suma de las sumas XOR para todos los subarrays posibles.\n *\n * Ejemplo:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // devuelve 39\n */\nfunction sumOfXorSubarrays(A: number[]): number",
      "arb": "/**\n * بالنظر إلى مصفوفة A من الأعداد الصحيحة، فإن المهمة هي حساب مجموع XOR لجميع المصفوفات الفرعية.\n * يتم تعريف المصفوفة الفرعية بواسطة زوج من الفهارس (L, R) بحيث 1 <= L <= R <= طول المصفوفة.\n * مجموع XOR للمصفوفة الفرعية هو نتيجة XOR لجميع العناصر من L إلى R.\n * النتيجة النهائية هي مجموع مجموعات XOR لجميع المصفوفات الفرعية الممكنة.\n *\n * مثال:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // يعيد 39\n */\nfunction sumOfXorSubarrays(A: number[]): number",
      "sw": "/**\n * Ukipewa safu A ya nambari za mzima, kazi ni kuhesabu jumla ya XOR ya vipande vidogo vyote.\n * Kipande kidogo kinafafanuliwa na jozi ya fahirisi (L, R) ambapo 1 <= L <= R <= urefu wa safu.\n * Jumla ya XOR ya kipande kidogo ni matokeo ya XOR ya vipengele vyote kutoka L hadi R.\n * Matokeo ya mwisho ni jumla ya jumla za XOR kwa vipande vidogo vyote vinavyowezekana.\n *\n * Mfano:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // inarudisha 39\n */\nfunction sumOfXorSubarrays(A: number[]): number",
      "tr": "/**\n * Bir tamsayı dizisi A verildiğinde, görev tüm alt dizilerin XOR toplamını hesaplamaktır.\n * Bir alt dizi, 1 <= L <= R <= dizinin uzunluğu olacak şekilde (L, R) indeks çifti ile tanımlanır.\n * Bir alt dizinin XOR toplamı, L'den R'ye kadar olan tüm elemanların XOR'lanması sonucudur.\n * Nihai sonuç, tüm olası alt diziler için XOR toplamlarının toplamıdır.\n *\n * Örnek:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // 39 döndürür\n */\nfunction sumOfXorSubarrays(A: number[]): number",
      "vi": "/**\n * Cho một mảng A gồm các số nguyên, nhiệm vụ là tính tổng của XOR của tất cả các dãy con.\n * Một dãy con được định nghĩa bởi một cặp chỉ số (L, R) sao cho 1 <= L <= R <= độ dài của mảng.\n * Tổng XOR của một dãy con là kết quả của việc XOR tất cả các phần tử từ L đến R.\n * Kết quả cuối cùng là tổng của các tổng XOR cho tất cả các dãy con có thể có.\n *\n * Ví dụ:\n * sumOfXorSubarrays([1, 2, 3, 4, 5])  // trả về 39\n */\nfunction sumOfXorSubarrays(A: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9916752021004468",
      "arb": "0.9670063019278189",
      "sw": "0.9618202613093789",
      "tr": "0.9729656106196276",
      "vi": "0.994266534051428"
    },
    "canonical_solution": "{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};",
    "instruction": {
      "en": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function sumOfXorSubarrays(A: number[]): number\n{\n    const n: number = A.length;\n    let q: number[] = new Array(n + 1).fill(0);\n    let w: number[][] = Array.from({ length: 21 }, () => [0, 0]);\n    let ans: number = 0;\n\n    for (let i = 1; i <= n; i++) {\n        q[i] = q[i - 1] ^ A[i - 1];\n    }\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 20; j >= 0; j--) {\n            w[j][(q[i] >> j) & 1]++;\n        }\n    }\n\n    for (let i = 0; i <= 20; i++) {\n        ans += w[i][0] * w[i][1] * (1 << i);\n    }\n\n    return ans;\n};\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9179912759517447",
      "sw": "0.9442521986283673",
      "tr": "0.878088021444884",
      "vi": "0.9072163723021262"
    },
    "level": "",
    "test": "const testSumOfXorSubarrays = (): void => {\n    console.assert(sumOfXorSubarrays([1, 2, 3, 4, 5]) === 39);\n    console.assert(sumOfXorSubarrays([1, 1, 1]) === 4);\n    console.assert(sumOfXorSubarrays([2, 3, 1]) === 9);\n    console.assert(sumOfXorSubarrays([4, 5, 7, 9]) === 74);\n    console.assert(sumOfXorSubarrays([0, 0, 0, 0]) === 0);\n    console.assert(sumOfXorSubarrays([8, 8, 8, 8, 8]) === 72);\n    console.assert(sumOfXorSubarrays([3, 6, 9, 12, 15]) === 125);\n    console.assert(sumOfXorSubarrays([10, 20, 30, 40, 50]) === 390);\n    console.assert(sumOfXorSubarrays([16, 16, 16, 16, 16, 16]) === 192);\n    console.assert(sumOfXorSubarrays([1, 3, 5, 7, 9, 11, 13]) === 192);\n    console.assert(sumOfXorSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) === 218);\n};\n\ntestSumOfXorSubarrays();",
    "entry_point": "sumOfXorSubarrays",
    "signature": "function sumOfXorSubarrays(A: number[]): number",
    "docstring": {
      "en": "Given an array A of integers, the task is to calculate the sum of the XOR of all subarrays.\nA subarray is defined by a pair of indices (L, R) such that 1 <= L <= R <= the length of the array.\nThe XOR sum of a subarray is the result of XORing all elements from L to R.\nThe final result is the sum of the XOR sums for all possible subarrays.\n\nExample:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // returns 39\n",
      "es": "Dado un array A de enteros, la tarea es calcular la suma del XOR de todos los subarrays.  \nUn subarray se define por un par de índices (L, R) tal que 1 <= L <= R <= la longitud del array.  \nLa suma XOR de un subarray es el resultado de aplicar XOR a todos los elementos desde L hasta R.  \nEl resultado final es la suma de las sumas XOR para todos los subarrays posibles.\n\nEjemplo:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // devuelve 39",
      "arb": "معطى مصفوفة A من الأعداد الصحيحة، المهمة هي حساب مجموع عملية XOR لجميع المصفوفات الفرعية. \nيتم تعريف المصفوفة الفرعية بواسطة زوج من الفهارس (L, R) بحيث 1 <= L <= R <= طول المصفوفة. \nمجموع XOR لمصفوفة فرعية هو نتيجة تطبيق عملية XOR على جميع العناصر من L إلى R. \nالنتيجة النهائية هي مجموع قيم XOR لجميع المصفوفات الفرعية الممكنة.\n\nمثال:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // يعيد 39",
      "sw": "Kutolewa safu A ya nambari za mzima, kazi ni kuhesabu jumla ya XOR ya vipande vidogo vyote.\nKipande kidogo kinatajwa na jozi ya fahirisi (L, R) ambapo 1 <= L <= R <= urefu wa safu.\nJumla ya XOR ya kipande kidogo ni matokeo ya XOR ya vipengele vyote kutoka L hadi R.\nMatokeo ya mwisho ni jumla ya jumla za XOR kwa vipande vidogo vyote vinavyowezekana.\n\nMfano:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // inarudisha 39",
      "tr": "Verilen bir tamsayı dizisi A için, tüm alt dizilerin XOR toplamını hesaplama görevi.\nBir alt dizi, 1 <= L <= R <= dizinin uzunluğu olacak şekilde (L, R) indeks çifti ile tanımlanır.\nBir alt dizinin XOR toplamı, L'den R'ye kadar olan tüm elemanların XOR'lanması sonucudur.\nNihai sonuç, tüm olası alt dizilerin XOR toplamlarının toplamıdır.\n\nÖrnek:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // 39 döndürür",
      "vi": "Cho một mảng A gồm các số nguyên, nhiệm vụ là tính tổng của phép XOR của tất cả các mảng con. \nMột mảng con được định nghĩa bởi một cặp chỉ số (L, R) sao cho 1 <= L <= R <= độ dài của mảng. \nTổng XOR của một mảng con là kết quả của phép XOR tất cả các phần tử từ L đến R. \nKết quả cuối cùng là tổng của các tổng XOR cho tất cả các mảng con có thể có.\n\nVí dụ:\nsumOfXorSubarrays([1, 2, 3, 4, 5])  // trả về 39"
    },
    "docstring_bertscore": {
      "es": "0.9871480184558996",
      "arb": "0.9617421995696323",
      "sw": "0.9781276169619623",
      "tr": "0.9692661197728528",
      "vi": "0.9841210900793089"
    }
  },
  {
    "task_id": "TypeScript/40",
    "prompt": {
      "en": "\n/**\n * Given two positive integers n and k, find the number of positive integers x,\n * where 1 <= x <= n, that can be expressed as x = a^b with a and b being positive integers\n * and b >= k. Different legal representations of the same number are counted only once.\n * Example:\n *   countPowerNumbers(99, 1) returns 99\n */\nfunction countPowerNumbers(n: number, k: number): number {",
      "es": "/**\n * Dado dos enteros positivos n y k, encuentra la cantidad de enteros positivos x,\n * donde 1 <= x <= n, que pueden expresarse como x = a^b con a y b siendo enteros positivos\n * y b >= k. Diferentes representaciones legales del mismo número se cuentan solo una vez.\n * Ejemplo:\n *   countPowerNumbers(99, 1) returns 99\n */\nfunction countPowerNumbers(n: number, k: number): number {",
      "arb": "/**\n * بالنظر إلى عددين صحيحين موجبين n و k، جد عدد الأعداد الصحيحة الموجبة x،\n * حيث 1 <= x <= n، التي يمكن التعبير عنها كـ x = a^b مع كون a و b أعداد صحيحة موجبة\n * و b >= k. يتم احتساب التمثيلات القانونية المختلفة لنفس العدد مرة واحدة فقط.\n * مثال:\n *   countPowerNumbers(99, 1) returns 99\n */\nfunction countPowerNumbers(n: number, k: number): number {",
      "sw": "/**\n * Ukipewa nambari mbili chanya n na k, pata idadi ya nambari chanya x,\n * ambapo 1 <= x <= n, ambazo zinaweza kuonyeshwa kama x = a^b huku a na b wakiwa nambari chanya\n * na b >= k. Uwakilishi tofauti wa kisheria wa nambari sawa huhesabiwa mara moja tu.\n * Mfano:\n *   countPowerNumbers(99, 1) inarudisha 99\n */\nfunction countPowerNumbers(n: number, k: number): number {",
      "tr": "/**\n * İki pozitif tam sayı n ve k verildiğinde, 1 <= x <= n aralığında olan ve\n * x = a^b şeklinde ifade edilebilen pozitif tam sayı x'lerin sayısını bulun,\n * burada a ve b pozitif tam sayılar ve b >= k. Aynı sayının farklı yasal\n * temsilleri yalnızca bir kez sayılır.\n * Örnek:\n *   countPowerNumbers(99, 1) 99 döndürür\n */\nfunction countPowerNumbers(n: number, k: number): number {",
      "vi": "/**\n * Cho hai số nguyên dương n và k, tìm số lượng số nguyên dương x,\n * với 1 <= x <= n, có thể được biểu diễn dưới dạng x = a^b với a và b là các số nguyên dương\n * và b >= k. Các biểu diễn hợp lệ khác nhau của cùng một số chỉ được đếm một lần.\n * Ví dụ:\n *   countPowerNumbers(99, 1) trả về 99\n */\nfunction countPowerNumbers(n: number, k: number): number {"
    },
    "prompt_bertscore": {
      "es": "1",
      "arb": "0.9928842652298062",
      "sw": "0.985584201466012",
      "tr": "0.9518279613610379",
      "vi": "0.9764835532981365"
    },
    "canonical_solution": "let count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}",
    "instruction": {
      "en": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español usando como máximo 500 caracteres.",
      "arb": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nTürkçe olarak, TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik özlü bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function countPowerNumbers(n: number, k: number): number\nlet count = 0;\n    let x = 0;\n    const mp: boolean[] = new Array(n + 1).fill(false);\n    \n    for (let i = 2; i <= Math.cbrt(n); ++i) {\n        let t = i * i;\n        let m = 2;\n        while (t <= n / i) {\n            t *= i;\n            m++;\n            if (m < k || mp[t]) continue;\n            if (Math.pow(Math.floor(Math.sqrt(t)), 2) === t) x++;\n            mp[t] = true;\n            count++;\n        }\n    }\n    if (k === 1) {\n        count = n;\n    } else if (k >= 3) {\n        count += 1;\n    } else {\n        count += Math.floor(Math.sqrt(n)) - x;\n    }\n    return count;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.8828199930122781",
      "sw": "0.9166161578238401",
      "tr": "0.8922567237848645",
      "vi": "0.9038124434623312"
    },
    "level": "",
    "test": "const testCountPowerNumbers = (): void => {\n    console.assert(countPowerNumbers(99, 1) === 99, `Expected 99, got ${countPowerNumbers(99, 1)}`);\n    console.assert(countPowerNumbers(99, 3) === 7, `Expected 7, got ${countPowerNumbers(99, 3)}`);\n    console.assert(countPowerNumbers(99, 2) === 12, `Expected 12, got ${countPowerNumbers(99, 2)}`);\n    console.assert(countPowerNumbers(10, 1) === 10, `Expected 10, got ${countPowerNumbers(10, 1)}`);\n    console.assert(countPowerNumbers(10, 2) === 4, `Expected 4, got ${countPowerNumbers(10, 2)}`);\n    console.assert(countPowerNumbers(500, 1) === 500, `Expected 500, got ${countPowerNumbers(500, 1)}`);\n    console.assert(countPowerNumbers(500, 2) === 30, `Expected 30, got ${countPowerNumbers(500, 2)}`);\n    console.assert(countPowerNumbers(500, 3) === 13, `Expected 13, got ${countPowerNumbers(500, 3)}`);\n    console.assert(countPowerNumbers(1000, 1) === 1000, `Expected 1000, got ${countPowerNumbers(1000, 1)}`);\n    console.assert(countPowerNumbers(1000, 2) === 41, `Expected 41, got ${countPowerNumbers(1000, 2)}`);\n    console.assert(countPowerNumbers(1000, 3) === 17, `Expected 17, got ${countPowerNumbers(1000, 3)}`);\n    console.assert(countPowerNumbers(1000, 93) === 1, `Expected 1, got ${countPowerNumbers(1000, 93)}`);\n    console.assert(countPowerNumbers(50, 2) === 10, `Expected 10, got ${countPowerNumbers(50, 2)}`);\n    console.assert(countPowerNumbers(50, 3) === 5, `Expected 5, got ${countPowerNumbers(50, 3)}`);\n    console.assert(countPowerNumbers(2, 3) === 1, `Expected 1, got ${countPowerNumbers(2, 3)}`);\n};\n\ntestCountPowerNumbers();",
    "entry_point": "countPowerNumbers",
    "signature": "function countPowerNumbers(n: number, k: number): number",
    "docstring": {
      "en": "Given two positive integers n and k, find the number of positive integers x, where 1 <= x <= n, that can be expressed as x = a^b with a and b being positive integers and b >= k. Different legal representations of the same number are counted only once.\nExample:\n  countPowerNumbers(99, 1) returns 99",
      "es": "Dado dos enteros positivos n y k, encuentra la cantidad de enteros positivos x, donde 1 <= x <= n, que pueden expresarse como x = a^b con a y b siendo enteros positivos y b >= k. Diferentes representaciones legales del mismo número se cuentan solo una vez.\nEjemplo:\n  countPowerNumbers(99, 1) returns 99",
      "arb": "معطى عددان صحيحان موجبان n و k، ابحث عن عدد الأعداد الصحيحة الموجبة x، حيث 1 <= x <= n، والتي يمكن التعبير عنها كـ x = a^b مع كون a و b عددين صحيحين موجبين و b >= k. يتم احتساب التمثيلات القانونية المختلفة لنفس العدد مرة واحدة فقط.\n\nمثال:\n  countPowerNumbers(99, 1) returns 99",
      "sw": "Kwa kupewa nambari mbili nzima chanya n na k, pata idadi ya nambari nzima chanya x, ambapo 1 <= x <= n, ambazo zinaweza kuonyeshwa kama x = a^b huku a na b zikiwa nambari nzima chanya na b >= k. Uwiano tofauti halali wa nambari ile ile huhesabiwa mara moja tu.\n\nMfano:\n  countPowerNumbers(99, 1) inarejesha 99",
      "tr": "Verilen iki pozitif tam sayı n ve k için, 1 <= x <= n aralığında olan ve x = a^b şeklinde ifade edilebilen pozitif tam sayıların sayısını bulun, burada a ve b pozitif tam sayılar ve b >= k'dir. Aynı sayının farklı yasal gösterimleri yalnızca bir kez sayılır.\nÖrnek:\n  countPowerNumbers(99, 1) 99 döndürür",
      "vi": "Cho hai số nguyên dương n và k, tìm số lượng số nguyên dương x, với 1 <= x <= n, có thể được biểu diễn dưới dạng x = a^b với a và b là các số nguyên dương và b >= k. Các biểu diễn hợp lệ khác nhau của cùng một số chỉ được đếm một lần.\n\nVí dụ:\n  countPowerNumbers(99, 1) trả về 99"
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9822754165787327",
      "sw": "0.9904204539834495",
      "tr": "0.9425632444984275",
      "vi": "0.9776741438020596"
    }
  },
  {
    "task_id": "TypeScript/41",
    "prompt": {
      "en": "\n/**\n * Computes the number of sequences consisting of n '(' and m ')', such that the longest balanced\n * subsequence is of length 2 * k, modulo 1,000,000,007 (10^9 + 7).\n * \n * Example:\n *   countBalancedSubsequences(2, 2, 2) returns 2\n *\n * @param n The number of '(' characters.\n * @param m The number of ')' characters.\n * @param k The half-length of the longest balanced subsequence.\n * @returns The number of valid sequences modulo 10^9 + 7.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {",
      "es": "/**\n * Calcula el número de secuencias que consisten en n '(' y m ')', de tal manera que la subsecuencia\n * balanceada más larga tenga una longitud de 2 * k, módulo 1,000,000,007 (10^9 + 7).\n * \n * Ejemplo:\n *   countBalancedSubsequences(2, 2, 2) returns 2\n *\n * @param n El número de caracteres '('.\n * @param m El número de caracteres ')'.\n * @param k La mitad de la longitud de la subsecuencia balanceada más larga.\n * @returns El número de secuencias válidas módulo 10^9 + 7.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {",
      "arb": "/**\n * يحسب عدد التسلسلات التي تتكون من n من '(' و m من ')', بحيث يكون أطول تسلسل متوازن\n * هو بطول 2 * k، مودولو 1,000,000,007 (10^9 + 7).\n * \n * مثال:\n *   countBalancedSubsequences(2, 2, 2) returns 2\n *\n * @param n عدد الأحرف '('.\n * @param m عدد الأحرف ')'.\n * @param k نصف طول أطول تسلسل متوازن.\n * @returns عدد التسلسلات الصالحة مودولو 10^9 + 7.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {",
      "sw": "/**\n * Inahesabu idadi ya misururu inayojumuisha n '(' na m ')', kiasi kwamba mfuatano mrefu zaidi ulio sawa\n * una urefu wa 2 * k, modulo 1,000,000,007 (10^9 + 7).\n * \n * Mfano:\n *   countBalancedSubsequences(2, 2, 2) inarudisha 2\n *\n * @param n Idadi ya herufi '('.\n * @param m Idadi ya herufi ')'.\n * @param k Nusu ya urefu wa mfuatano mrefu zaidi ulio sawa.\n * @returns Idadi ya misururu sahihi modulo 10^9 + 7.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {",
      "tr": "/**\n * En uzun dengeli alt dizinin uzunluğu 2 * k olan, n '(' ve m ')' karakterlerinden oluşan dizilerin\n * sayısını 1,000,000,007 (10^9 + 7) ile mod alarak hesaplar.\n * \n * Örnek:\n *   countBalancedSubsequences(2, 2, 2) 2 döndürür\n *\n * @param n '(' karakterlerinin sayısı.\n * @param m ')' karakterlerinin sayısı.\n * @param k En uzun dengeli alt dizinin yarı uzunluğu.\n * @returns Geçerli dizilerin sayısını 10^9 + 7 ile mod alarak döndürür.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {",
      "vi": "/**\n * Tính số lượng các dãy bao gồm n '(' và m ')', sao cho dãy con cân bằng dài nhất có độ dài 2 * k, lấy modulo 1,000,000,007 (10^9 + 7).\n * \n * Ví dụ:\n *   countBalancedSubsequences(2, 2, 2) trả về 2\n *\n * @param n Số lượng ký tự '('.\n * @param m Số lượng ký tự ')'.\n * @param k Nửa độ dài của dãy con cân bằng dài nhất.\n * @returns Số lượng dãy hợp lệ lấy modulo 10^9 + 7.\n */\nfunction countBalancedSubsequences(n: number, m: number, k: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.9848441046662759",
      "arb": "0.9613187195972659",
      "sw": "0.954675327873173",
      "tr": "0.9628426118805655",
      "vi": "0.9660008349390202"
    },
    "canonical_solution": "const P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}",
    "instruction": {
      "en": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function countBalancedSubsequences(n: number, m: number, k: number): number\nconst P = 1e9 + 7;\n    const C = Array.from({ length: 4003 }, () => Array(4003).fill(0));\n \n    // Compute binomial coefficients only once.\n    if (C[0][0] === 0) {\n        for (let i = 0; i <= 4002; i++) C[i][0] = 1;\n        for (let i = 1; i <= 4002; i++)\n            for (let j = 1; j <= i; j++)\n                C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n \n    // Calculate the number of balanced subsequences.\n    if (k > n || k > m) return 0;\n    \n    return (C[n + m][k] - C[n + m][k - 1] + P) % P;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9166161578238401",
      "tr": "0.9369118128972229",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "(() => {\n    console.assert(countBalancedSubsequences(2, 2, 2) === 2, 'Test case 1 failed');\n    console.assert(countBalancedSubsequences(3, 2, 3) === 0, 'Test case 2 failed');\n    console.assert(countBalancedSubsequences(3, 2, 1) === 4, 'Test case 3 failed');\n    console.assert(countBalancedSubsequences(4, 3, 2) === 14, 'Test case 4 failed');\n    console.assert(countBalancedSubsequences(5, 5, 2) === 35, 'Test case 5 failed');\n    console.assert(countBalancedSubsequences(6, 1, 1) === 6, 'Test case 6 failed');\n    console.assert(countBalancedSubsequences(1, 6, 1) === 6, 'Test case 7 failed');\n    console.assert(countBalancedSubsequences(7, 2, 2) === 27, 'Test case 8 failed');\n    console.assert(countBalancedSubsequences(8, 3, 3) === 110, 'Test case 9 failed');\n    console.assert(countBalancedSubsequences(10, 10, 5) === 10659, 'Test case 10 failed');\n    console.assert(countBalancedSubsequences(20, 20, 10) === 574221648, 'Test case 11 failed');\n    console.assert(countBalancedSubsequences(2000, 2000, 1000) === 854104531, 'Test case 12 failed');\n    console.assert(countBalancedSubsequences(2000, 1999, 1000) === 334874485, 'Test case 13 failed');\n    console.assert(countBalancedSubsequences(2000, 2000, 1999) === 259428024, 'Test case 14 failed');\n})();",
    "entry_point": "countBalancedSubsequences",
    "signature": "function countBalancedSubsequences(n: number, m: number, k: number): number",
    "docstring": {
      "en": "Computes the number of sequences consisting of n '(' and m ')', such that the longest balanced\nsubsequence is of length 2 * k, modulo 1,000,000,007 (10^9 + 7).\n\nExample:\ncountBalancedSubsequences(2, 2, 2) returns 2\n\n@param n The number of '(' characters.\n@param m The number of ')' characters.\n@param k The half-length of the longest balanced subsequence.\n@returns The number of valid sequences modulo 10^9 + 7.",
      "es": "Calcula el número de secuencias que consisten en n '(' y m ')', de tal manera que la subsecuencia balanceada más larga sea de longitud 2 * k, módulo 1,000,000,007 (10^9 + 7).\n\nEjemplo:\ncountBalancedSubsequences(2, 2, 2) devuelve 2\n\n@param n El número de caracteres '('.\n@param m El número de caracteres ')'.\n@param k La mitad de la longitud de la subsecuencia balanceada más larga.\n@returns El número de secuencias válidas módulo 10^9 + 7.",
      "arb": "يحسب عدد التسلسلات المكونة من n من '(' و m من ')', بحيث يكون أطول تسلسل متوازن بطول 2 * k، مع الباقي 1,000,000,007 (10^9 + 7).\n\nمثال:\ncountBalancedSubsequences(2, 2, 2) returns 2\n\n@param n عدد الأحرف '('.\n@param m عدد الأحرف ')'.\n@param k نصف طول أطول تسلسل متوازن.\n@returns عدد التسلسلات الصالحة مع الباقي 10^9 + 7.",
      "sw": "Hesabu idadi ya misururu inayojumuisha n '(' na m ')', ili kwamba mfuatano mrefu zaidi ulio sawa una urefu wa 2 * k, modulo 1,000,000,007 (10^9 + 7).\n\nMfano:\ncountBalancedSubsequences(2, 2, 2) inarudisha 2\n\n@param n Idadi ya herufi '('.\n@param m Idadi ya herufi ')'.\n@param k Nusu ya urefu wa mfuatano mrefu zaidi ulio sawa.\n@returns Idadi ya misururu halali modulo 10^9 + 7.",
      "tr": "n '(' ve m ')' karakterlerinden oluşan dizilerin sayısını hesaplar, öyle ki en uzun dengeli alt dizinin uzunluğu 2 * k olur, 1,000,000,007 (10^9 + 7) modunda.\n\nÖrnek:\ncountBalancedSubsequences(2, 2, 2) 2 döndürür\n\n@param n '(' karakterlerinin sayısı.\n@param m ')' karakterlerinin sayısı.\n@param k En uzun dengeli alt dizinin yarı uzunluğu.\n@returns Geçerli dizilerin sayısı 10^9 + 7 modunda.",
      "vi": "Tính toán số lượng dãy bao gồm n '(' và m ')', sao cho dãy con cân bằng dài nhất có độ dài 2 * k, theo modulo 1,000,000,007 (10^9 + 7).\n\nVí dụ:\ncountBalancedSubsequences(2, 2, 2) trả về 2\n\n@param n Số lượng ký tự '('.\n@param m Số lượng ký tự ')'.\n@param k Nửa độ dài của dãy con cân bằng dài nhất.\n@returns Số lượng dãy hợp lệ theo modulo 10^9 + 7."
    },
    "docstring_bertscore": {
      "es": "0.9797375162002501",
      "arb": "0.9271302597831599",
      "sw": "0.9605124788806453",
      "tr": "0.9582669624230459",
      "vi": "0.9582790788762889"
    }
  },
  {
    "task_id": "TypeScript/42",
    "prompt": {
      "en": "\n/**\n * Given a rectangle paper of size n x m placed on a plane Cartesian coordinate system with its bottom-left\n * corner at (0,0) and top-right corner at (n,m), you need to calculate the expected number of operations\n * to cut the paper such that the remaining area is less than k. In each operation, a line is randomly\n * chosen that is parallel to the axes, passes through points with integer coordinates, and cuts through\n * (not just touching the edge) the paper. The bottom or right part of the paper along this line is then\n * discarded. The answer should be modulo 10^9+7.\n *\n * For example:\n *    expectedCuts(3, 3, 4) // returns 3\n *    expectedCuts(5, 5, 12) // returns 2\n */\nfunction expectedCuts(n: number, m: number, k: number): number",
      "es": "/**\n * Dado un papel rectangular de tamaño n x m colocado en un sistema de coordenadas Cartesianas en el plano con su esquina\n * inferior izquierda en (0,0) y la esquina superior derecha en (n,m), necesitas calcular el número esperado de operaciones\n * para cortar el papel de tal manera que el área restante sea menor que k. En cada operación, se elige aleatoriamente una línea\n * que es paralela a los ejes, pasa por puntos con coordenadas enteras, y corta (no solo tocando el borde) el papel. La parte\n * inferior o derecha del papel a lo largo de esta línea es entonces descartada. La respuesta debe ser módulo 10^9+7.\n *\n * Por ejemplo:\n *    expectedCuts(3, 3, 4) // devuelve 3\n *    expectedCuts(5, 5, 12) // devuelve 2\n */\nfunction expectedCuts(n: number, m: number, k: number): number",
      "arb": "/**\n * بالنظر إلى ورقة مستطيلة بحجم n x m موضوعة على نظام إحداثيات ديكارتي مستوٍ مع وجود زاويتها السفلية اليسرى\n * عند (0,0) وزاويتها العلوية اليمنى عند (n,m)، تحتاج إلى حساب العدد المتوقع من العمليات\n * لقطع الورقة بحيث تكون المساحة المتبقية أقل من k. في كل عملية، يتم اختيار خط بشكل عشوائي\n * يكون موازياً للمحاور، ويمر عبر نقاط ذات إحداثيات صحيحة، ويقطع (وليس فقط يلامس الحافة) الورقة. يتم بعد ذلك\n * التخلص من الجزء السفلي أو الأيمن من الورقة على طول هذا الخط. يجب أن تكون الإجابة بتقسيمها على 10^9+7.\n *\n * على سبيل المثال:\n *    expectedCuts(3, 3, 4) // يعيد 3\n *    expectedCuts(5, 5, 12) // يعيد 2\n */\nfunction expectedCuts(n: number, m: number, k: number): number",
      "sw": "/**\n * Ukiwa na karatasi ya mstatili ya ukubwa n x m iliyowekwa kwenye mfumo wa kuratibu wa Cartesian kwenye ndege na kona yake ya chini-kushoto\n * iko kwenye (0,0) na kona ya juu-kulia iko kwenye (n,m), unahitaji kuhesabu idadi inayotarajiwa ya operesheni\n * za kukata karatasi ili eneo lililobaki liwe chini ya k. Katika kila operesheni, mstari huchaguliwa kwa nasibu ambao ni sambamba na mhimili,\n * unapita kupitia pointi zenye kuratibu za namba nzima, na unakata (si kugusa tu ukingo) karatasi. Sehemu ya chini au ya kulia ya karatasi kando ya mstari huu\n * kisha hutupwa. Jibu linapaswa kuwa modulo 10^9+7.\n *\n * Kwa mfano:\n *    expectedCuts(3, 3, 4) // inarudisha 3\n *    expectedCuts(5, 5, 12) // inarudisha 2\n */\nfunction expectedCuts(n: number, m: number, k: number): number",
      "tr": "/**\n * n x m boyutunda bir dikdörtgen kağıt, düzlemde Kartezyen koordinat sistemine yerleştirilmiş ve\n * sol alt köşesi (0,0) ve sağ üst köşesi (n,m) noktasında bulunmaktadır. Kağıdın kalan alanının k'dan\n * küçük olacak şekilde kesilmesi için beklenen işlem sayısını hesaplamanız gerekiyor. Her işlemde, \n * eksenlere paralel olan, tam sayı koordinatlarına sahip noktalardan geçen ve kağıdı kesen (sadece \n * kenara dokunmayan) bir çizgi rastgele seçilir. Bu çizgi boyunca kağıdın alt veya sağ kısmı \n * atılır. Cevap 10^9+7 modunda olmalıdır.\n *\n * Örneğin:\n *    expectedCuts(3, 3, 4) // 3 döndürür\n *    expectedCuts(5, 5, 12) // 2 döndürür\n */\nfunction expectedCuts(n: number, m: number, k: number): number",
      "vi": "/**\n * Cho một tờ giấy hình chữ nhật kích thước n x m đặt trên hệ tọa độ Đề-các phẳng với góc dưới bên trái\n * tại (0,0) và góc trên bên phải tại (n,m), bạn cần tính số lượng phép cắt kỳ vọng\n * để cắt tờ giấy sao cho diện tích còn lại nhỏ hơn k. Trong mỗi phép cắt, một đường thẳng được chọn ngẫu nhiên\n * song song với các trục, đi qua các điểm có tọa độ nguyên, và cắt qua\n * (không chỉ chạm vào cạnh) tờ giấy. Phần dưới hoặc bên phải của tờ giấy dọc theo đường này sau đó\n * bị loại bỏ. Câu trả lời cần lấy modulo 10^9+7.\n *\n * Ví dụ:\n *    expectedCuts(3, 3, 4) // trả về 3\n *    expectedCuts(5, 5, 12) // trả về 2\n */\nfunction expectedCuts(n: number, m: number, k: number): number"
    },
    "prompt_bertscore": {
      "es": "0.9820881081294169",
      "arb": "0.957982920978166",
      "sw": "0.9607194517376836",
      "tr": "0.9538255871031057",
      "vi": "0.946265913431299"
    },
    "canonical_solution": "{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}",
    "instruction": {
      "en": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nTürkçe olarak, TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function expectedCuts(n: number, m: number, k: number): number\n{\n    const MD: number = 1000000007;\n    const N: number = 1000000;\n    let vv: number[] = new Array(N * 2 + 2).fill(0);\n    let ans: number = 1;\n\n    vv[1] = 1;\n    for (let i = 2; i <= N * 2; i++)\n        vv[i] = vv[i - MD % i] * (Math.floor(MD / i) + 1) % MD;\n    if (k > n * m) {\n        return 0;\n    }\n\n    for (let i = Math.floor((k + m - 1) / m); i < n; i++) {\n        ans = (ans + vv[i + Math.floor((k + i - 1) / i) - 1]) % MD;\n    }\n    for (let j = Math.floor((k + n - 1) / n); j < m; j++)\n        ans = (ans + vv[Math.floor((k + j - 1) / j) + j - 1]) % MD;\n\n    return ans;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9166161578238401",
      "tr": "0.8802679898767418",
      "vi": "0.9508159395696651"
    },
    "level": "",
    "test": "function testExpectedCuts(): void {\n    console.assert(expectedCuts(2, 4, 10) === 0, 'Test 1 failed');\n    console.assert(expectedCuts(2, 4, 8) === 1, 'Test 2 failed');\n    console.assert(expectedCuts(2, 4, 2) === 833333342, 'Test 3 failed');\n    console.assert(expectedCuts(2, 4, 6) === 250000003, 'Test 4 failed');\n    console.assert(expectedCuts(3, 3, 4) === 666666673, 'Test 5 failed');\n    console.assert(expectedCuts(5, 5, 12) === 666666673, 'Test 6 failed');\n    console.assert(expectedCuts(6, 7, 20) === 722222229, 'Test 7 failed');\n    console.assert(expectedCuts(10, 10, 50) === 714285721, 'Test 9 failed');\n    console.assert(expectedCuts(1, 10, 5) === 945634929, 'Test 10 failed');\n    console.assert(expectedCuts(10, 1, 5) === 945634929, 'Test 11 failed');\n}\n\ntestExpectedCuts();",
    "entry_point": "expectedCuts",
    "signature": "function expectedCuts(n: number, m: number, k: number): number",
    "docstring": {
      "en": "Given a rectangle paper of size n x m placed on a plane Cartesian coordinate system with its bottom-left corner at (0,0) and top-right corner at (n,m), you need to calculate the expected number of operations to cut the paper such that the remaining area is less than k. In each operation, a line is randomly chosen that is parallel to the axes, passes through points with integer coordinates, and cuts through (not just touching the edge) the paper. The bottom or right part of the paper along this line is then discarded. The answer should be modulo 10^9+7.\n\nFor example:\n   expectedCuts(3, 3, 4) // returns 3\n   expectedCuts(5, 5, 12) // returns 2\n",
      "es": "Dado un papel rectangular de tamaño n x m colocado en un sistema de coordenadas Cartesianas en un plano con su esquina inferior izquierda en (0,0) y la esquina superior derecha en (n,m), necesitas calcular el número esperado de operaciones para cortar el papel de tal manera que el área restante sea menor que k. En cada operación, se elige aleatoriamente una línea que es paralela a los ejes, pasa por puntos con coordenadas enteras, y corta (no solo toca el borde) el papel. La parte inferior o derecha del papel a lo largo de esta línea se descarta. La respuesta debe ser módulo 10^9+7.\n\nPor ejemplo:\n   expectedCuts(3, 3, 4) // devuelve 3\n   expectedCuts(5, 5, 12) // devuelve 2",
      "arb": "معطى ورقة مستطيلة بحجم n x m موضوعة على نظام إحداثيات ديكارتي مستوي بحيث تكون الزاوية السفلية اليسرى عند (0,0) والزواية العلوية اليمنى عند (n,m)، تحتاج إلى حساب العدد المتوقع من العمليات لقطع الورقة بحيث تكون المساحة المتبقية أقل من k. في كل عملية، يتم اختيار خط بشكل عشوائي يكون موازياً للمحاور، ويمر عبر نقاط ذات إحداثيات صحيحة، ويقطع (وليس فقط يلامس الحافة) الورقة. يتم بعد ذلك التخلص من الجزء السفلي أو الأيمن من الورقة على طول هذا الخط. يجب أن تكون الإجابة موديولو 10^9+7.\n\nعلى سبيل المثال:\n   expectedCuts(3, 3, 4) // يعيد 3\n   expectedCuts(5, 5, 12) // يعيد 2",
      "sw": "Kwa kuzingatia karatasi ya mstatili yenye ukubwa wa n x m iliyowekwa kwenye mfumo wa kuratibu wa Cartesian wa ndege na kona yake ya chini-kushoto katika (0,0) na kona yake ya juu-kulia katika (n,m), unahitaji kuhesabu idadi inayotarajiwa ya operesheni za kukata karatasi ili eneo linalobaki liwe chini ya k. Katika kila operesheni, mstari unachaguliwa kwa nasibu ambao ni sambamba na mhimili, unapita kupitia pointi zenye kuratibu za namba kamili, na unakata (sio tu kugusa ukingo) karatasi. Sehemu ya chini au ya kulia ya karatasi kando ya mstari huu kisha inatupwa. Jibu linapaswa kuwa modulo 10^9+7.\n\nKwa mfano:\n   expectedCuts(3, 3, 4) // inarudisha 3\n   expectedCuts(5, 5, 12) // inarudisha 2",
      "tr": "Verilen bir dikdörtgen kağıt, n x m boyutunda olup, Kartezyen koordinat sisteminde alt-sol köşesi (0,0) ve üst-sağ köşesi (n,m) olacak şekilde yerleştirilmiştir. Kağıdın kalan alanının k'dan küçük olması için gereken beklenen işlem sayısını hesaplamanız gerekmektedir. Her işlemde, eksenlere paralel olan, tam sayı koordinatlarına sahip noktalardan geçen ve kağıdı kesen (sadece kenara dokunmayan) bir çizgi rastgele seçilir. Bu çizgi boyunca kağıdın alt veya sağ kısmı atılır. Cevap 10^9+7 ile mod alınarak verilmelidir.\n\nÖrneğin:\n   expectedCuts(3, 3, 4) // 3 döndürür\n   expectedCuts(5, 5, 12) // 2 döndürür",
      "vi": "Cho một tờ giấy hình chữ nhật kích thước n x m đặt trên hệ tọa độ phẳng Cartesian với góc dưới bên trái tại (0,0) và góc trên bên phải tại (n,m), bạn cần tính số lần cắt kỳ vọng để cắt giấy sao cho diện tích còn lại nhỏ hơn k. Trong mỗi lần cắt, một đường được chọn ngẫu nhiên song song với các trục, đi qua các điểm có tọa độ nguyên, và cắt qua (không chỉ chạm vào cạnh) tờ giấy. Phần dưới hoặc bên phải của tờ giấy dọc theo đường này sau đó bị loại bỏ. Kết quả phải được lấy modulo 10^9+7.\n\nVí dụ:\n   expectedCuts(3, 3, 4) // trả về 3\n   expectedCuts(5, 5, 12) // trả về 2"
    },
    "docstring_bertscore": {
      "es": "0.9743327835322907",
      "arb": "0.9528894421172883",
      "sw": "0.970377854015505",
      "tr": "0.9181936803100192",
      "vi": "0.9352528519548196"
    }
  },
  {
    "task_id": "TypeScript/43",
    "prompt": {
      "en": "\n/**\n * Given a permutation q of n elements and an integer k, find the number of permutations p of n elements\n * such that f(p) = q, where f(p) is the lexicographically smallest permutation that can be obtained by\n * dividing p into exactly k non-empty contiguous segments and sorting each segment (i.e., choose k-1\n * breakpoints 1 <= x1 < x2 < ... < x(k-1) < n, and divide it into [1, x1], (x1, x2], ..., (x(k-1), n]).\n * The result should be modulo 998244353.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // returns 2\n */\nfunction countPermutations(n: number, k: number, q: number[]): number",
      "es": "/**\n * Dada una permutación q de n elementos y un entero k, encuentra el número de permutaciones p de n elementos\n * tal que f(p) = q, donde f(p) es la permutación lexicográficamente más pequeña que se puede obtener\n * dividiendo p en exactamente k segmentos contiguos no vacíos y ordenando cada segmento (es decir, elige k-1\n * puntos de corte 1 <= x1 < x2 < ... < x(k-1) < n, y divídelo en [1, x1], (x1, x2], ..., (x(k-1), n]).\n * El resultado debe ser módulo 998244353.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // returns 2\n */\nfunction countPermutations(n: number, k: number, q: number[]): number",
      "arb": "/**\n * معطى تبديل q من n عنصرًا وعدد صحيح k، ابحث عن عدد التبديلات p من n عنصرًا\n * بحيث يكون f(p) = q، حيث f(p) هو التبديل الأصغر لغويًا الذي يمكن الحصول عليه عن طريق\n * تقسيم p إلى k مقاطع متجاورة غير فارغة بالضبط وترتيب كل مقطع (أي، اختر k-1\n * نقاط انقطاع 1 <= x1 < x2 < ... < x(k-1) < n، وقسمها إلى [1, x1]، (x1, x2]، ...، (x(k-1), n]).\n * يجب أن تكون النتيجة موديولو 998244353.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // returns 2\n */\nfunction countPermutations(n: number, k: number, q: number[]): number",
      "sw": "/**\n * Ukipewa permutation q ya vipengele n na nambari k, pata idadi ya permutations p ya vipengele n\n * kama f(p) = q, ambapo f(p) ni permutation ndogo zaidi kwa mpangilio wa alfabeti inayoweza kupatikana kwa\n * kugawanya p katika sehemu k zisizo tupu za mfululizo na kupanga kila sehemu (yaani, chagua k-1\n * sehemu za kuvunja 1 <= x1 < x2 < ... < x(k-1) < n, na igawanye katika [1, x1], (x1, x2], ..., (x(k-1), n]).\n * Matokeo yanapaswa kuwa modulo 998244353.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // returns 2\n */\nfunction countPermutations(n: number, k: number, q: number[]): number",
      "tr": "/**\n * n elemanlı bir permütasyon q ve bir tamsayı k verildiğinde, n elemanlı permütasyonların sayısını bulun\n * öyle ki f(p) = q, burada f(p), p'yi tam olarak k boş olmayan ardışık parçaya bölerek ve her parçayı sıralayarak\n * elde edilebilecek sözlük sırasına göre en küçük permütasyondur (yani, k-1 tane kırılma noktası seçin 1 <= x1 < x2 < ... < x(k-1) < n, ve [1, x1], (x1, x2], ..., (x(k-1), n] olarak bölün).\n * Sonuç 998244353 ile mod alınmalıdır.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // 2 döndürür\n */\nfunction countPermutations(n: number, k: number, q: number[]): number",
      "vi": "/**\n * Cho một hoán vị q của n phần tử và một số nguyên k, tìm số lượng hoán vị p của n phần tử\n * sao cho f(p) = q, trong đó f(p) là hoán vị nhỏ nhất theo thứ tự từ điển có thể được lấy bằng cách\n * chia p thành chính xác k đoạn liên tiếp không rỗng và sắp xếp từng đoạn (tức là, chọn k-1\n * điểm ngắt 1 <= x1 < x2 < ... < x(k-1) < n, và chia nó thành [1, x1], (x1, x2], ..., (x(k-1), n]).\n * Kết quả nên được lấy modulo 998244353.\n *\n * @example\n * countPermutations(2, 1, [1, 2]) // returns 2\n */\nfunction countPermutations(n: number, k: number, q: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9891502126967313",
      "arb": "1",
      "sw": "0.9767568687024405",
      "tr": "0.9675833231847252",
      "vi": "0.9804021334551928"
    },
    "canonical_solution": "{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};",
    "instruction": {
      "en": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nProporciona una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nقدم وصفًا موجزًا بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nTürkçe olarak, TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function countPermutations(n: number, k: number, q: number[]): number\n{\n    const P = 998244353;\n    let dp: number[][] = Array.from({length: n + 1}, () => new Array(n + 1).fill(0));\n    let jc: number[] = new Array(n + 1).fill(0);\n    let f: number[] = new Array(n + 1).fill(0);\n\n    dp[0][0] = f[0] = jc[0] = 1;\n\n    for (let i = 1; i <= n; i++) {\n        jc[i] = (jc[i - 1] * i) % P;\n    }\n\n    for (let i = 1; i <= n; i++) {\n        f[i] = jc[i];\n        for (let j = 1; j < i; j++) {\n            f[i] = (f[i] + P - (f[j] * jc[i - j]) % P) % P;\n        }\n    }\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j < i; j++) {\n            for (let kk = 1; kk <= n; kk++) {\n                dp[i][kk] = (dp[i][kk] + dp[j][kk - 1] * f[i - j]) % P;\n            }\n        }\n    }\n\n    let m = 0;\n    for (let i = 1; i < n; i++) {\n        if (q[i - 1] > q[i]) {\n            m = i;\n            break;\n        }\n    }\n\n    let ans = 0;\n    if (m === n || m === 0) {\n        for (let i = k; i <= n; i++) {\n            ans = (ans + dp[n][i]) % P;\n        }\n    } else {\n        for (let i = m + 1; i <= n; i++) {\n            if (i !== m + 1 && (q[i - 2] > q[i - 1] || q[i - 1] < q[m - 1])) {\n                break;\n            }\n            let c = k - 1 + i - n;\n            if (c >= 0) {\n                ans = (ans + dp[m][c] * jc[i - m - 1]) % P;\n            }\n        }\n    }\n\n    return ans;\n};\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9119219260288426",
      "sw": "0.9166161578238401",
      "tr": "0.8440360207025489",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "console.assert(countPermutations(2, 1, [1, 2]) === 2, 'Test failed for input ([1, 2])');\nconsole.assert(countPermutations(3, 3, [3, 1, 2]) === 1, 'Test failed for input ([3, 1, 2])');\nconsole.assert(countPermutations(6, 3, [1, 2, 3, 6, 5, 4]) === 13, 'Test failed for input ([1, 2, 3, 6, 5, 4])');\nconsole.assert(countPermutations(6, 1, [1, 2, 3, 4, 5, 6]) === 720, 'Test failed for input ([1, 2, 3, 4, 5, 6])');\nconsole.assert(countPermutations(6, 3, [1, 2, 5, 3, 4, 5]) === 0, 'Test failed for input ([1, 2, 5, 3, 4, 5])');\nconsole.assert(countPermutations(9, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9]) === 1, 'Test failed for input ([1, 2, 3, 4, 5, 6, 7, 8, 9])');\nconsole.assert(countPermutations(9, 2, [1, 2, 3, 4, 5, 6, 7, 9, 8]) === 29093);",
    "entry_point": "countPermutations",
    "signature": "function countPermutations(n: number, k: number, q: number[]): number",
    "docstring": {
      "en": "Given a permutation q of n elements and an integer k, find the number of permutations p of n elements such that f(p) = q, where f(p) is the lexicographically smallest permutation that can be obtained by dividing p into exactly k non-empty contiguous segments and sorting each segment (i.e., choose k-1 breakpoints 1 <= x1 < x2 < ... < x(k-1) < n, and divide it into [1, x1], (x1, x2], ..., (x(k-1), n]). The result should be modulo 998244353.\n\n@example\ncountPermutations(2, 1, [1, 2]) // returns 2",
      "es": "Dada una permutación q de n elementos y un entero k, encuentra el número de permutaciones p de n elementos tal que f(p) = q, donde f(p) es la permutación lexicográficamente más pequeña que se puede obtener dividiendo p en exactamente k segmentos contiguos no vacíos y ordenando cada segmento (es decir, elige k-1 puntos de ruptura 1 <= x1 < x2 < ... < x(k-1) < n, y divídelo en [1, x1], (x1, x2], ..., (x(k-1), n]). El resultado debe ser módulo 998244353.\n\n@example\ncountPermutations(2, 1, [1, 2]) // devuelve 2",
      "arb": "معطى ترتيب q من n عنصرًا وعدد صحيح k، ابحث عن عدد الترتيبات p من n عنصرًا بحيث f(p) = q، حيث f(p) هو الترتيب الأصغر لغويًا الذي يمكن الحصول عليه عن طريق تقسيم p إلى k مقاطع متجاورة غير فارغة بالضبط وترتيب كل مقطع (أي اختيار k-1 نقطة فاصلة 1 <= x1 < x2 < ... < x(k-1) < n، وتقسيمها إلى [1, x1]، (x1, x2]، ...، (x(k-1), n]). يجب أن تكون النتيجة موديولو 998244353.\n\n@example\ncountPermutations(2, 1, [1, 2]) // يعيد 2",
      "sw": "Ukipewa permutation q ya vipengele n na nambari k, pata idadi ya permutations p ya vipengele n kama f(p) = q, ambapo f(p) ni permutation ndogo zaidi kwa mpangilio wa alfabeti inayoweza kupatikana kwa kugawanya p katika sehemu k zisizo tupu za mfululizo na kupanga kila sehemu (yaani, chagua k-1\n * sehemu za kuvunja 1 <= x1 < x2 < ... < x(k-1) < n, na igawanye katika [1, x1], (x1, x2], ..., (x(k-1), n]). Matokeo yanapaswa kuwa modulo 998244353.\n\n@example\ncountPermutations(2, 1, [1, 2]) // inarudisha 2",
      "tr": "Verilen n elemanlı bir q permütasyonu ve bir k tam sayısı için, f(p) = q olacak şekilde n elemanlı kaç tane p permütasyonu olduğunu bulun, burada f(p), p'yi tam olarak k boş olmayan ardışık segmente bölerek ve her segmenti sıralayarak elde edilebilecek sözlük sırasına göre en küçük permütasyondur (yani, k-1 tane kırılma noktası seçin 1 <= x1 < x2 < ... < x(k-1) < n ve bunu [1, x1], (x1, x2], ..., (x(k-1), n] olarak bölün). Sonuç 998244353 ile mod alınmalıdır.\n\n@example\ncountPermutations(2, 1, [1, 2]) // 2 döndürür",
      "vi": "Đưa ra một hoán vị q của n phần tử và một số nguyên k, tìm số lượng hoán vị p của n phần tử sao cho f(p) = q, trong đó f(p) là hoán vị nhỏ nhất theo thứ tự từ điển có thể thu được bằng cách chia p thành chính xác k đoạn liên tiếp không rỗng và sắp xếp từng đoạn (tức là, chọn k-1 điểm ngắt 1 <= x1 < x2 < ... < x(k-1) < n, và chia nó thành [1, x1], (x1, x2], ..., (x(k-1), n]). Kết quả nên được lấy modulo 998244353.\n\n@example\ncountPermutations(2, 1, [1, 2]) // trả về 2"
    },
    "docstring_bertscore": {
      "es": "0.9971722978955874",
      "arb": "0.9946832605908391",
      "sw": "1",
      "tr": "0.9812308194048703",
      "vi": "0.9777686918634322"
    }
  },
  {
    "task_id": "TypeScript/44",
    "prompt": {
      "en": "\n/**\n * Determines the number of ways to choose a triplet (a, b, c)\n * from an array of distinct integers representing heights such that the\n * greatest common divisor (GCD) of the maximum and minimum values\n * of the triplet is 1.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Returns: 1\n */\nfunction countTriplets(heights: number[]): number",
      "es": "/**\n * Determina el número de formas de elegir un triplete (a, b, c)\n * de un arreglo de enteros distintos que representan alturas tal que el\n * máximo común divisor (MCD) de los valores máximo y mínimo\n * del triplete es 1.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Devuelve: 1\n */\nfunction countTriplets(heights: number[]): number",
      "arb": "/**\n * يحدد عدد الطرق لاختيار ثلاثية (a, b, c)\n * من مصفوفة من الأعداد الصحيحة المميزة التي تمثل الارتفاعات بحيث أن\n * القاسم المشترك الأكبر (GCD) للقيم القصوى والدنيا\n * للثلاثية هو 1.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Returns: 1\n */\nfunction countTriplets(heights: number[]): number",
      "sw": "/**\n * Huamua idadi ya njia za kuchagua tatu (a, b, c)\n * kutoka kwenye safu ya nambari tofauti zinazowakilisha urefu ili kwamba\n * mgawanyiko mkubwa zaidi (GCD) wa thamani ya juu na ya chini\n * ya tatu ni 1.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Inarudisha: 1\n */\nfunction countTriplets(heights: number[]): number",
      "tr": "/**\n * Bir dizideki farklı tamsayıları temsil eden yüksekliklerden\n * bir üçlü (a, b, c) seçmenin kaç yolu olduğunu belirler, öyle ki\n * üçlünün maksimum ve minimum değerlerinin en büyük ortak böleni (EBOB) 1'dir.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Döndürür: 1\n */\nfunction countTriplets(heights: number[]): number",
      "vi": "/**\n * Xác định số cách để chọn một bộ ba (a, b, c)\n * từ một mảng các số nguyên khác nhau đại diện cho chiều cao sao cho\n * ước số chung lớn nhất (GCD) của giá trị lớn nhất và nhỏ nhất\n * của bộ ba là 1.\n *\n * @example\n * countTriplets([1, 5, 7])\n * // Trả về: 1\n */\nfunction countTriplets(heights: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9960063375589125",
      "arb": "0.9915536403072535",
      "sw": "0.9275175890261779",
      "tr": "0.9685047695223461",
      "vi": "0.9849716253709003"
    },
    "canonical_solution": "{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}",
    "instruction": {
      "en": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function countTriplets(heights: number[]): number\n{\n    let count = 0;\n    const n = heights.length;\n    for (let i = 0; i < n; ++i) {\n        for (let j = i + 1; j < n; ++j) {\n            for (let k = j + 1; k < n; ++k) {\n                const minVal = Math.min(heights[i], heights[j], heights[k]);\n                const maxVal = Math.max(heights[i], heights[j], heights[k]);\n                if (gcd(minVal, maxVal) === 1) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\n// Helper function to find the greatest common divisor\nfunction gcd(a: number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.878088021444884",
      "vi": "0.9233888579259867"
    },
    "level": "",
    "test": "const main = (): void => {\n    console.assert(countTriplets([1, 5, 7]) === 1);\n    console.assert(countTriplets([1, 6, 2, 3]) === 3);\n    console.assert(countTriplets([16, 4, 8, 2]) === 0);\n    console.assert(countTriplets([10, 1, 6, 7, 9, 8, 4, 3, 5, 2]) === 77);\n    console.assert(countTriplets([4, 5, 9, 11, 14]) === 7);\n    console.assert(countTriplets([15, 10, 6, 9, 7, 3, 12, 8, 11, 1, 2]) === 104);\n    console.assert(countTriplets([3, 7, 11, 13]) === 4);\n    console.assert(countTriplets([5, 12, 13, 17, 19]) === 10);\n    console.assert(countTriplets([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) === 87);\n    console.assert(countTriplets([1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) === 122);\n}\n\nmain();",
    "entry_point": "countTriplets",
    "signature": "function countTriplets(heights: number[]): number",
    "docstring": {
      "en": "Determines the number of ways to choose a triplet (a, b, c)\nfrom an array of distinct integers representing heights such that the\ngreatest common divisor (GCD) of the maximum and minimum values\nof the triplet is 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Returns: 1\n",
      "es": "Determina el número de formas de elegir un triplete (a, b, c) de un arreglo de enteros distintos que representan alturas, de modo que el máximo común divisor (MCD) de los valores máximo y mínimo del triplete sea 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Devuelve: 1",
      "arb": "يحدد عدد الطرق لاختيار ثلاثية (a, b, c) من مصفوفة من الأعداد الصحيحة المميزة التي تمثل الارتفاعات بحيث يكون القاسم المشترك الأكبر (GCD) للقيم القصوى والدنيا للثلاثية هو 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Returns: 1",
      "sw": "Inabainisha idadi ya njia za kuchagua tatu (a, b, c)\nkutoka kwenye safu ya nambari tofauti zinazowakilisha urefu ili kwamba\nmgawanyiko mkubwa zaidi wa kawaida (GCD) wa thamani za juu na za chini\nza tatu ni 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Inarudisha: 1",
      "tr": "Belirli yükseklikleri temsil eden farklı tamsayılar içeren bir diziden bir üçlü (a, b, c) seçmenin kaç yolu olduğunu belirler, öyle ki üçlünün maksimum ve minimum değerlerinin en büyük ortak böleni (GCD) 1'dir.\n\n@example\ncountTriplets([1, 5, 7])\n// Döndürür: 1",
      "vi": "Xác định số cách để chọn một bộ ba (a, b, c) từ một mảng các số nguyên khác nhau đại diện cho chiều cao sao cho ước số chung lớn nhất (GCD) của giá trị lớn nhất và nhỏ nhất của bộ ba là 1.\n\n@example\ncountTriplets([1, 5, 7])\n// Trả về: 1"
    },
    "docstring_bertscore": {
      "es": "0.995064035031283",
      "arb": "1",
      "sw": "0.9012795088433744",
      "tr": "0.965452416456983",
      "vi": "0.9843580561238836"
    }
  },
  {
    "task_id": "TypeScript/45",
    "prompt": {
      "en": "\n/**\n * Given a 1 by n pixel image, each pixel has a color represented by an integer. You can change all\n * connected pixels of the same color to a chosen color, where two pixels are connected if they are\n * adjacent and have the same color. The goal is to find the minimum number of operations required\n * to make all pixels the same color.\n * Note: For each color, there are at most 20 pixels of that color.\n *\n * Examples:\n *    minOperations(5, [1, 2, 3, 2, 1]) returns 2\n */\nfunction minOperations(n: number, pixels: number[]): number",
      "es": "/**\n * Dada una imagen de 1 por n píxeles, cada píxel tiene un color representado por un entero. Puedes cambiar todos\n * los píxeles conectados del mismo color a un color elegido, donde dos píxeles están conectados si son\n * adyacentes y tienen el mismo color. El objetivo es encontrar el número mínimo de operaciones requeridas\n * para hacer que todos los píxeles sean del mismo color.\n * Nota: Para cada color, hay como máximo 20 píxeles de ese color.\n *\n * Ejemplos:\n *    minOperations(5, [1, 2, 3, 2, 1]) devuelve 2\n */\nfunction minOperations(n: number, pixels: number[]): number",
      "arb": "/**\n * معطى صورة بحجم 1 في n بكسل، كل بكسل له لون ممثل برقم صحيح. يمكنك تغيير جميع\n * البكسلات المتصلة من نفس اللون إلى لون مختار، حيث يعتبر بكسلان متصلان إذا كانا\n * متجاورين ولهما نفس اللون. الهدف هو إيجاد الحد الأدنى من العمليات المطلوبة\n * لجعل جميع البكسلات بنفس اللون.\n * ملاحظة: لكل لون، يوجد على الأكثر 20 بكسل من ذلك اللون.\n *\n * أمثلة:\n *    minOperations(5, [1, 2, 3, 2, 1]) returns 2\n */ \nfunction minOperations(n: number, pixels: number[]): number",
      "sw": "/**\n * Ukipewa picha ya pikseli 1 kwa n, kila pikseli ina rangi inayowakilishwa na nambari. Unaweza kubadilisha\n * pikseli zote zilizounganishwa zenye rangi sawa kuwa rangi iliyochaguliwa, ambapo pikseli mbili zimeunganishwa\n * ikiwa zipo karibu na zina rangi sawa. Lengo ni kupata idadi ndogo ya operesheni zinazohitajika\n * kufanya pikseli zote ziwe na rangi sawa.\n * Kumbuka: Kwa kila rangi, kuna pikseli zisizozidi 20 za rangi hiyo.\n *\n * Mifano:\n *    minOperations(5, [1, 2, 3, 2, 1]) inarudisha 2\n */\nfunction minOperations(n: number, pixels: number[]): number",
      "tr": "/**\n * 1'e n pikselden oluşan bir görüntü verildiğinde, her piksel bir tamsayı ile temsil edilen bir renge sahiptir. \n * Aynı renkteki tüm bağlantılı pikselleri, seçilen bir renge değiştirebilirsiniz; burada iki piksel, bitişik ve aynı renkte \n * olduklarında bağlantılıdır. Amaç, tüm pikselleri aynı renkte yapmak için gereken minimum işlem sayısını bulmaktır.\n * Not: Her renk için en fazla 20 piksel vardır.\n *\n * Örnekler:\n *    minOperations(5, [1, 2, 3, 2, 1]) 2 döndürür\n */\nfunction minOperations(n: number, pixels: number[]): number",
      "vi": "/**\n * Cho một hình ảnh 1 x n pixel, mỗi pixel có một màu được biểu diễn bằng một số nguyên. Bạn có thể thay đổi tất cả\n * các pixel kết nối có cùng màu sang một màu đã chọn, trong đó hai pixel được kết nối nếu chúng\n * liền kề và có cùng màu. Mục tiêu là tìm số lượng thao tác tối thiểu cần thiết\n * để làm cho tất cả các pixel có cùng màu.\n * Lưu ý: Đối với mỗi màu, có tối đa 20 pixel của màu đó.\n *\n * Ví dụ:\n *    minOperations(5, [1, 2, 3, 2, 1]) trả về 2\n */\nfunction minOperations(n: number, pixels: number[]): number"
    },
    "prompt_bertscore": {
      "es": "0.9943475752468902",
      "arb": "0.9791890977182127",
      "sw": "0.9691342291998456",
      "tr": "0.9538996762352318",
      "vi": "0.9936331017663077"
    },
    "canonical_solution": "{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}",
    "instruction": {
      "en": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nTürkçe olarak TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function minOperations(n: number, pixels: number[]): number\n{\n    let pre = new Array(n+1).fill(0),\n        u = new Array(n+1).fill(0),\n        f = Array.from({length: n+1}, () => new Array(n+1).fill(Infinity));\n\n    for (let i = 1; i <= n; i++) {\n        pre[i] = u[pixels[i-1]];\n        u[pixels[i-1]] = i;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n        f[i][i] = 0;\n    }\n    \n    for (let len = 2; len <= n; len++) {\n        for (let i = 1; i <= n - len + 1; i++) {\n            let j = i + len - 1;\n            f[i][j] = f[i][j - 1] + 1;\n            for (let l = pre[j]; l >= i; l = pre[l]) {\n                f[i][j] = Math.min(f[i][j], f[i][l] + f[l + 1][j]);\n            }\n        }\n    }\n    \n    return f[1][n];\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt với tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9166161578238401",
      "tr": "0.8946639253726264",
      "vi": "0.9340241244177377"
    },
    "level": "",
    "test": "(() => {\n    console.assert(minOperations(5, [1, 2, 3, 2, 1]) === 2);\n    console.assert(minOperations(4, [1, 1, 2, 2]) === 1);\n    console.assert(minOperations(5, [1, 2, 1, 4, 2]) === 3);\n    console.assert(minOperations(5, [5, 5, 5, 5, 5]) === 0);\n    console.assert(minOperations(6, [1, 1, 1, 2, 2, 2]) === 1);\n    console.assert(minOperations(7, [1, 3, 3, 3, 2, 2, 2]) === 2);\n    console.assert(minOperations(8, [4, 4, 4, 4, 3, 3, 3, 3]) === 1);\n    console.assert(minOperations(9, [1, 2, 3, 4, 5, 6, 7, 8, 9]) === 8);\n    console.assert(minOperations(10, [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) === 5);\n    console.assert(minOperations(3, [3, 3, 3]) === 0);\n    console.assert(minOperations(4, [2, 1, 1, 2]) === 1);\n})();",
    "entry_point": "minOperations",
    "signature": "function minOperations(n: number, pixels: number[]): number",
    "docstring": {
      "en": "Given a 1 by n pixel image, each pixel has a color represented by an integer. You can change all\nconnected pixels of the same color to a chosen color, where two pixels are connected if they are\nadjacent and have the same color. The goal is to find the minimum number of operations required\nto make all pixels the same color.\nNote: For each color, there are at most 20 pixels of that color.\n\nExamples:\n   minOperations(5, [1, 2, 3, 2, 1]) returns 2\n",
      "es": "Dada una imagen de 1 por n píxeles, cada píxel tiene un color representado por un número entero. Puedes cambiar todos los píxeles conectados del mismo color a un color elegido, donde dos píxeles están conectados si son adyacentes y tienen el mismo color. El objetivo es encontrar el número mínimo de operaciones requeridas para hacer que todos los píxeles sean del mismo color.\nNota: Para cada color, hay como máximo 20 píxeles de ese color.\n\nEjemplos:\n   minOperations(5, [1, 2, 3, 2, 1]) devuelve 2",
      "arb": "نظرًا لصورة مكونة من 1 في n بكسل، كل بكسل له لون ممثل برقم صحيح. يمكنك تغيير جميع البكسلات المتصلة من نفس اللون إلى لون مختار، حيث يعتبر البكسلان متصلان إذا كانا متجاورين ولهما نفس اللون. الهدف هو إيجاد الحد الأدنى لعدد العمليات المطلوبة لجعل جميع البكسلات بنفس اللون.\nملاحظة: لكل لون، هناك بحد أقصى 20 بكسل من ذلك اللون.\n\nأمثلة:\n   minOperations(5, [1, 2, 3, 2, 1]) يعيد 2",
      "sw": "Kwa kupewa picha ya pikseli 1 kwa n, kila pikseli ina rangi inayowakilishwa na nambari nzima. Unaweza kubadilisha pikseli zote zilizounganishwa za rangi sawa kuwa rangi iliyochaguliwa, ambapo pikseli mbili zimeunganishwa ikiwa ziko karibu na zina rangi sawa. Lengo ni kupata idadi ndogo ya operesheni zinazohitajika ili kufanya pikseli zote ziwe na rangi sawa.\nKumbuka: Kwa kila rangi, kuna pikseli zisizozidi 20 za rangi hiyo.\n\nMifano:\n   minOperations(5, [1, 2, 3, 2, 1]) inarudisha 2",
      "tr": "Verilen 1'e n piksel boyutunda bir görüntüde, her piksel bir tamsayı ile temsil edilen bir renge sahiptir. Aynı renkteki tüm bağlı pikselleri seçilen bir renge değiştirebilirsiniz, burada iki piksel, bitişik ve aynı renkte ise bağlı kabul edilir. Amaç, tüm pikselleri aynı renkte yapmak için gereken minimum işlem sayısını bulmaktır.\nNot: Her renk için en fazla 20 piksel bulunmaktadır.\n\nÖrnekler:\n   minOperations(5, [1, 2, 3, 2, 1]) 2 döndürür",
      "vi": "Đưa ra một hình ảnh 1 x n pixel, mỗi pixel có một màu được biểu diễn bằng một số nguyên. Bạn có thể thay đổi tất cả các pixel kết nối có cùng màu thành một màu đã chọn, trong đó hai pixel được kết nối nếu chúng liền kề và có cùng màu. Mục tiêu là tìm số lượng thao tác tối thiểu cần thiết để làm cho tất cả các pixel có cùng màu.\n\nLưu ý: Đối với mỗi màu, có tối đa 20 pixel của màu đó.\n\nVí dụ:\n   minOperations(5, [1, 2, 3, 2, 1]) trả về 2"
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "0.9626878788137394",
      "sw": "0.9797619477371173",
      "tr": "0.9648056759363334",
      "vi": "0.985538715108755"
    }
  },
  {
    "task_id": "TypeScript/46",
    "prompt": {
      "en": "\n/**\n * Given an integer n, write a function to compute the sum of all numbers from 1 to n\n * that are multiples of either 3 or 5. If a number is a multiple of both 3 and 5,\n * it should only be counted once.\n * \n * For example:\n *     sumOfMultiples(10); // returns 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {",
      "es": "/**\n * Dado un entero n, escribe una función para calcular la suma de todos los números desde 1 hasta n\n * que son múltiplos de 3 o 5. Si un número es múltiplo de ambos 3 y 5,\n * solo debe contarse una vez.\n * \n * Por ejemplo:\n *     sumOfMultiples(10); // devuelve 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {",
      "arb": "/**\n * معطى عدد صحيح n، اكتب دالة لحساب مجموع جميع الأرقام من 1 إلى n\n * التي هي من مضاعفات 3 أو 5. إذا كان الرقم من مضاعفات كل من 3 و 5،\n * يجب أن يُحسب مرة واحدة فقط.\n * \n * على سبيل المثال:\n *     sumOfMultiples(10); // يعيد 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {",
      "sw": "/**\n * Ukipewa nambari n, andika kazi ya kuhesabu jumla ya nambari zote kutoka 1 hadi n\n * ambazo ni maradufu ya 3 au 5. Ikiwa nambari ni maradufu ya 3 na 5,\n * inapaswa kuhesabiwa mara moja tu.\n * \n * Kwa mfano:\n *     sumOfMultiples(10); // inarudisha 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {",
      "tr": "/**\n * Verilen bir tamsayı n için, 1'den n'e kadar olan sayılardan\n * 3 veya 5'in katı olanların toplamını hesaplayan bir fonksiyon yazın.\n * Bir sayı hem 3 hem de 5'in katıysa, yalnızca bir kez sayılmalıdır.\n * \n * Örneğin:\n *     sumOfMultiples(10); // 33 döndürür (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {",
      "vi": "/**\n * Cho một số nguyên n, viết một hàm để tính tổng của tất cả các số từ 1 đến n\n * là bội số của 3 hoặc 5. Nếu một số là bội số của cả 3 và 5,\n * nó chỉ nên được tính một lần.\n * \n * Ví dụ:\n *     sumOfMultiples(10); // trả về 33 (3 + 5 + 6 + 9 + 10)\n */\nfunction sumOfMultiples(n: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.9924756825360174",
      "arb": "0.9916982432246468",
      "sw": "0.9871170321164582",
      "tr": "0.9580305922696143",
      "vi": "0.986871326335118"
    },
    "canonical_solution": "let sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}",
    "instruction": {
      "en": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir doğal dil tanımı (docstring) sağlayın.",
      "vi": "function sumOfMultiples(n: number): number\nlet sum = 0;\n    for (let i = 1; i <= n; ++i) {\n        if (i % 3 === 0 || i % 5 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.878088021444884",
      "vi": "0.9072163723021262"
    },
    "level": "",
    "test": "const testSumOfMultiples = (): void => {\n    console.assert(sumOfMultiples(10) === 33, 'Test case n=10 failed');\n    console.assert(sumOfMultiples(15) === 60, 'Test case n=15 failed');\n    console.assert(sumOfMultiples(20) === 98, 'Test case n=20 failed');\n    console.assert(sumOfMultiples(5) === 8, 'Test case n=5 failed');\n    console.assert(sumOfMultiples(3) === 3, 'Test case n=3 failed');\n    console.assert(sumOfMultiples(6) === 14, 'Test case n=6 failed');\n    console.assert(sumOfMultiples(9) === 23, 'Test case n=9 failed');\n    console.assert(sumOfMultiples(12) === 45, 'Test case n=12 failed');\n    console.assert(sumOfMultiples(17) === 60, 'Test case n=17 failed');\n    console.assert(sumOfMultiples(21) === 119, 'Test case n=21 failed');\n    console.assert(sumOfMultiples(25) === 168, 'Test case n=25 failed');\n};\n\ntestSumOfMultiples();",
    "entry_point": "sumOfMultiples",
    "signature": "function sumOfMultiples(n: number): number",
    "docstring": {
      "en": "Given an integer n, write a function to compute the sum of all numbers from 1 to n that are multiples of either 3 or 5. If a number is a multiple of both 3 and 5, it should only be counted once.\n\nFor example:\n    sumOfMultiples(10); // returns 33 (3 + 5 + 6 + 9 + 10)",
      "es": "Dado un entero n, escribe una función para calcular la suma de todos los números desde 1 hasta n que son múltiplos de 3 o 5. Si un número es múltiplo de ambos 3 y 5, solo debe contarse una vez.\n\nPor ejemplo:\n    sumOfMultiples(10); // devuelve 33 (3 + 5 + 6 + 9 + 10)",
      "arb": "بالنظر إلى عدد صحيح n، اكتب دالة لحساب مجموع جميع الأرقام من 1 إلى n التي هي من مضاعفات 3 أو 5. إذا كان الرقم من مضاعفات كل من 3 و 5، فيجب احتسابه مرة واحدة فقط.\n\nعلى سبيل المثال:\n    sumOfMultiples(10); // يعيد 33 (3 + 5 + 6 + 9 + 10)",
      "sw": "Kwa kupewa nambari nzima n, andika kazi ya kuhesabu jumla ya nambari zote kutoka 1 hadi n ambazo ni maradufu ya 3 au 5. Ikiwa nambari ni maradufu ya 3 na 5, inapaswa kuhesabiwa mara moja tu.\n\nKwa mfano:\n    sumOfMultiples(10); // inarudisha 33 (3 + 5 + 6 + 9 + 10)",
      "tr": "Verilen bir tamsayı n için, 1'den n'e kadar olan ve 3 veya 5'in katı olan tüm sayıların toplamını hesaplayan bir fonksiyon yazın. Bir sayı hem 3 hem de 5'in katıysa, yalnızca bir kez sayılmalıdır.\n\nÖrneğin:\n    sumOfMultiples(10); // 33 döndürür (3 + 5 + 6 + 9 + 10)",
      "vi": "Cho một số nguyên n, viết một hàm để tính tổng của tất cả các số từ 1 đến n mà là bội số của 3 hoặc 5. Nếu một số là bội số của cả 3 và 5, nó chỉ nên được tính một lần.\n\nVí dụ:\n    sumOfMultiples(10); // trả về 33 (3 + 5 + 6 + 9 + 10)"
    },
    "docstring_bertscore": {
      "es": "0.9898460149214965",
      "arb": "0.9887452053498011",
      "sw": "0.9887452053498011",
      "tr": "0.9887376573953218",
      "vi": "0.9861052089554665"
    }
  },
  {
    "task_id": "TypeScript/47",
    "prompt": {
      "en": "\n/**\n * Determine if a given string is a palindrome.\n * A palindrome is a word, phrase, number, or other sequence of characters\n * that reads the same forward and backward (ignoring spaces, punctuation,\n * and capitalization).\n * \n * Examples:\n * isPalindrome(\"racecar\") // returns true\n */\nfunction isPalindrome(str: string): boolean",
      "es": "/**\n * Determinar si una cadena dada es un palíndromo.\n * Un palíndromo es una palabra, frase, número u otra secuencia de caracteres\n * que se lee igual de adelante hacia atrás (ignorando espacios, puntuación\n * y mayúsculas).\n * \n * Ejemplos:\n * isPalindrome(\"racecar\") // returns true\n */\nfunction isPalindrome(str: string): boolean",
      "arb": "/**\n * تحديد ما إذا كانت سلسلة معينة هي كلمة متطابقة.\n * الكلمة المتطابقة هي كلمة، عبارة، رقم، أو تسلسل آخر من الأحرف\n * الذي يُقرأ بنفس الطريقة من الأمام والخلف (مع تجاهل المسافات، وعلامات الترقيم،\n * والحروف الكبيرة).\n * \n * أمثلة:\n * isPalindrome(\"racecar\") // returns true\n */\nfunction isPalindrome(str: string): boolean",
      "sw": "/**\n * Tambua kama string iliyotolewa ni palindrome.\n * Palindrome ni neno, kifungu, namba, au mfuatano mwingine wa herufi\n * ambao unasomwa sawa mbele na nyuma (kupuuza nafasi, alama za uakifishaji,\n * na herufi kubwa na ndogo).\n * \n * Mifano:\n * isPalindrome(\"racecar\") // inarudisha true\n */\nfunction isPalindrome(str: string): boolean",
      "tr": "/**\n * Verilen bir stringin palindrom olup olmadığını belirleyin.\n * Palindrom, ileri ve geri okunduğunda aynı olan bir kelime, ifade, sayı veya diğer karakter dizisidir\n * (boşluklar, noktalama işaretleri ve büyük/küçük harf dikkate alınmaz).\n * \n * Örnekler:\n * isPalindrome(\"racecar\") // true döndürür\n */\nfunction isPalindrome(str: string): boolean",
      "vi": "/**\n * Xác định xem một chuỗi cho trước có phải là một palindrome hay không.\n * Một palindrome là một từ, cụm từ, số, hoặc một chuỗi ký tự khác\n * mà đọc xuôi hay ngược đều giống nhau (bỏ qua khoảng trắng, dấu câu,\n * và chữ hoa chữ thường).\n * \n * Ví dụ:\n * isPalindrome(\"racecar\") // trả về true\n */\nfunction isPalindrome(str: string): boolean"
    },
    "prompt_bertscore": {
      "es": "0.999999801369619",
      "arb": "0.9991750880275622",
      "sw": "0.997420983132643",
      "tr": "0.9935927797989577",
      "vi": "0.9808683189594817"
    },
    "canonical_solution": "{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}",
    "instruction": {
      "en": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى، بحيث لا يتجاوز 500 حرف.",
      "sw": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function isPalindrome(str: string): boolean\n{\n  let start: number = 0;\n  let end: number = str.length - 1;\n\n  while (start < end) {\n    // Skip non-alphanumeric characters and handle case insensitivity\n    while (!isalnum(str[start]) && start < end) start++;\n    while (!isalnum(str[end]) && start < end) end--;\n    if (str[start].toLowerCase() !== str[end].toLowerCase())\n      return false;\n    start++;\n    end--;\n  }\n  return true;\n}\n\n// Helper function to check if a character is alphanumeric\nfunction isalnum(char: string): boolean {\n  let code: number = char.charCodeAt(0);\n  return (code > 47 && code < 58) || // numeric (0-9)\n         (code > 64 && code < 91) || // upper alpha (A-Z)\n         (code > 96 && code < 123);  // lower alpha (a-z)\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9069744404980257",
      "sw": "0.9442521986283673",
      "tr": "0.9396636381960803",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testIsPalindrome = (): void => {\n  console.assert(isPalindrome(\"A man a plan a canal Panama\") === true, \"Test 1 failed\");\n  console.assert(isPalindrome(\"No lemon, no melon\") === true, \"Test 2 failed\");\n  console.assert(isPalindrome(\"Was it a car or a cat I saw\") === true, \"Test 3 failed\");\n  console.assert(isPalindrome(\"Madam, in Eden, I'm Adam\") === true, \"Test 4 failed\");\n  console.assert(isPalindrome(\"Never odd or even\") === true, \"Test 5 failed\");\n  console.assert(isPalindrome(\"Eva, can I see bees in a cave\") === true, \"Test 6 failed\");\n  console.assert(isPalindrome(\"hello\") === false, \"Test 7 failed\");\n  console.assert(isPalindrome(\"GitHub\") === false, \"Test 8 failed\");\n  console.assert(isPalindrome(\"programming\") === false, \"Test 9 failed\");\n};\n\ntestIsPalindrome();",
    "entry_point": "isPalindrome",
    "signature": "function isPalindrome(str: string): boolean",
    "docstring": {
      "en": "Determine if a given string is a palindrome.\nA palindrome is a word, phrase, number, or other sequence of characters\nthat reads the same forward and backward (ignoring spaces, punctuation,\nand capitalization).\n\nExamples:\nisPalindrome(\"racecar\") // returns true\n",
      "es": "Determinar si una cadena dada es un palíndromo.  \nUn palíndromo es una palabra, frase, número u otra secuencia de caracteres  \nque se lee igual de adelante hacia atrás y de atrás hacia adelante (ignorando espacios, puntuación  \ny capitalización).  \n\nEjemplos:  \nisPalindrome(\"racecar\") // devuelve true  ",
      "arb": "تحديد ما إذا كانت سلسلة معينة هي جملة مقلوبة.\nالجملة المقلوبة هي كلمة أو عبارة أو رقم أو تسلسل آخر من الأحرف\nالتي تُقرأ بنفس الطريقة من الأمام إلى الخلف والعكس صحيح (مع تجاهل المسافات وعلامات الترقيم والحروف الكبيرة).\n\nأمثلة:\nisPalindrome(\"racecar\") // يعيد true",
      "sw": "Tambua kama string iliyotolewa ni palindrome.  \nPalindromu ni neno, kifungu cha maneno, nambari, au mlolongo mwingine wa herufi  \nambao unasomwa sawa mbele na nyuma (ukipuuza nafasi, alama za uakifishaji,  \nna herufi kubwa na ndogo).\n\nMifano:  \nisPalindrome(\"racecar\") // inarejesha kweli",
      "tr": "Verilen bir stringin palindrom olup olmadığını belirleyin.  \nPalindrom, ileri ve geri aynı şekilde okunan (boşluklar, noktalama işaretleri ve büyük/küçük harf farkı göz ardı edilerek) bir kelime, ifade, sayı veya başka bir karakter dizisidir.  \nÖrnekler:  \nisPalindrome(\"racecar\") // returns true  \n",
      "vi": "Xác định xem một chuỗi đã cho có phải là một palindrome hay không.  \nMột palindrome là một từ, cụm từ, số, hoặc một chuỗi ký tự khác  \nmà đọc xuôi hay ngược đều giống nhau (bỏ qua khoảng trắng, dấu câu,  \nvà chữ hoa chữ thường).\n\nVí dụ:\nisPalindrome(\"racecar\") // trả về true"
    },
    "docstring_bertscore": {
      "es": "0.9999996027392379",
      "arb": "0.9840942749778693",
      "sw": "0.9999996027392379",
      "tr": "0.9045535334139724",
      "vi": "0.9958736524643812"
    }
  },
  {
    "task_id": "TypeScript/48",
    "prompt": {
      "en": "\n/**\n * Given a non-negative integer num, repeatedly add all its digits until\n * the result has only one digit. \n * For example:\n *   addDigits(38)  // returns 2\n *   Explanation: 3 + 8 = 11, and 1 + 1 = 2. Since 2 has only one digit, 2 is the result.\n */\nfunction addDigits(num: number): number {",
      "es": "/**\n * Dado un número entero no negativo num, suma repetidamente todos sus dígitos hasta que\n * el resultado tenga solo un dígito.\n * Por ejemplo:\n *   addDigits(38)  // devuelve 2\n *   Explicación: 3 + 8 = 11, y 1 + 1 = 2. Dado que 2 tiene solo un dígito, 2 es el resultado.\n */\nfunction addDigits(num: number): number {",
      "arb": "/**\n * معطى عدد صحيح غير سالب، قم بإضافة جميع أرقامه بشكل متكرر حتى\n * يكون الناتج رقماً مكوناً من رقم واحد فقط.\n * على سبيل المثال:\n *   addDigits(38)  // يعيد 2\n *   التوضيح: 3 + 8 = 11، و 1 + 1 = 2. بما أن 2 مكون من رقم واحد فقط، فإن 2 هو الناتج.\n */\nfunction addDigits(num: number): number {",
      "sw": "/**\n * Ukipewa nambari isiyo hasi num, ongeza mara kwa mara tarakimu zake zote hadi\n * matokeo yawe na tarakimu moja tu.\n * Kwa mfano:\n *   addDigits(38)  // inarejesha 2\n *   Maelezo: 3 + 8 = 11, na 1 + 1 = 2. Kwa kuwa 2 ina tarakimu moja tu, 2 ndiyo matokeo.\n */\nfunction addDigits(num: number): number {",
      "tr": "/**\n * Verilen negatif olmayan bir tamsayı num için, sonucu tek bir basamak kalana kadar\n * tüm basamaklarını tekrar tekrar toplayın.\n * Örneğin:\n *   addDigits(38)  // 2 döndürür\n *   Açıklama: 3 + 8 = 11, ve 1 + 1 = 2. 2 yalnızca bir basamağa sahip olduğundan, sonuç 2'dir.\n */\nfunction addDigits(num: number): number {",
      "vi": "/**\n * Cho một số nguyên không âm num, liên tục cộng tất cả các chữ số của nó cho đến khi\n * kết quả chỉ còn một chữ số.\n * Ví dụ:\n *   addDigits(38)  // trả về 2\n *   Giải thích: 3 + 8 = 11, và 1 + 1 = 2. Vì 2 chỉ có một chữ số, 2 là kết quả.\n */\nfunction addDigits(num: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.9910127697796954",
      "arb": "0.9539356283341991",
      "sw": "0.9936897114249026",
      "tr": "0.9814701690140174",
      "vi": "0.9674472613737163"
    },
    "canonical_solution": "while (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}",
    "instruction": {
      "en": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando como máximo 500 caracteres.",
      "arb": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام ما لا يزيد عن 500 حرف.",
      "sw": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nToa maelezo mafupi ya lugha ya asili (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nTürkçe olarak, TypeScript kodunun işlevini açıklayan en fazla 500 karakterlik kısa bir doğal dil açıklaması (docstring) sağlayın.",
      "vi": "function addDigits(num: number): number\nwhile (num >= 10) {\n        let sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        num = sum;\n    }\n    return num;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, sử dụng tối đa 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9179912759517447",
      "sw": "0.9166161578238401",
      "tr": "0.8779100486234767",
      "vi": "0.9386158629361213"
    },
    "level": "",
    "test": "const testAddDigits = (): void => {\n    console.assert(addDigits(38) === 2, 'Test 1 failed');\n    console.assert(addDigits(0) === 0, 'Test 2 failed');\n    console.assert(addDigits(9) === 9, 'Test 3 failed');\n    console.assert(addDigits(123) === 6, 'Test 4 failed');\n    console.assert(addDigits(456) === 6, 'Test 5 failed');\n    console.assert(addDigits(9999) === 9, 'Test 6 failed');\n    console.assert(addDigits(100) === 1, 'Test 7 failed');\n    console.assert(addDigits(1010) === 2, 'Test 8 failed');\n    console.assert(addDigits(1234) === 1, 'Test 9 failed');\n    console.assert(addDigits(9876) === 3, 'Test 10 failed');\n    console.assert(addDigits(199) === 1, 'Test 11 failed');\n};\n\ntestAddDigits();",
    "entry_point": "addDigits",
    "signature": "function addDigits(num: number): number",
    "docstring": {
      "en": "Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\nFor example:\n  addDigits(38)  // returns 2\n  Explanation: 3 + 8 = 11, and 1 + 1 = 2. Since 2 has only one digit, 2 is the result.",
      "es": "Dado un número entero no negativo num, suma repetidamente todos sus dígitos hasta que el resultado tenga solo un dígito.\nPor ejemplo:\n  addDigits(38)  // devuelve 2\n  Explicación: 3 + 8 = 11, y 1 + 1 = 2. Dado que 2 tiene solo un dígito, 2 es el resultado.",
      "arb": "بالنظر إلى عدد صحيح غير سالب num، قم بإضافة جميع أرقامه بشكل متكرر حتى يكون الناتج رقمًا واحدًا فقط.\nعلى سبيل المثال:\n  addDigits(38)  // يعيد 2\n  التوضيح: 3 + 8 = 11، و 1 + 1 = 2. بما أن 2 هو رقم واحد فقط، فإن 2 هو الناتج.",
      "sw": "Kwa kupewa nambari isiyo hasi num, ongeza mara kwa mara tarakimu zake zote hadi matokeo yawe na tarakimu moja tu.\nKwa mfano:\n  addDigits(38)  // inarudisha 2\n  Maelezo: 3 + 8 = 11, na 1 + 1 = 2. Kwa kuwa 2 ina tarakimu moja tu, 2 ndiyo matokeo.",
      "tr": "Verilen bir negatif olmayan tam sayı num için, sonucu yalnızca bir basamak olana kadar tüm basamaklarını tekrar tekrar toplayın.\nÖrneğin:\n  addDigits(38)  // 2 döndürür\n  Açıklama: 3 + 8 = 11 ve 1 + 1 = 2. 2 yalnızca bir basamak olduğundan, sonuç 2'dir.",
      "vi": "Cho một số nguyên không âm `num`, liên tục cộng tất cả các chữ số của nó cho đến khi kết quả chỉ còn một chữ số.\n\nVí dụ:\n  addDigits(38)  // trả về 2\n  Giải thích: 3 + 8 = 11, và 1 + 1 = 2. Vì 2 chỉ có một chữ số, 2 là kết quả."
    },
    "docstring_bertscore": {
      "es": "0.9903282894866492",
      "arb": "0.965771814109687",
      "sw": "0.9912318590899769",
      "tr": "0.9750522227723991",
      "vi": "0.9431778068973495"
    }
  },
  {
    "task_id": "TypeScript/49",
    "prompt": {
      "en": "\n/**\n * You are playing a game called Nim. In this game, you start with a pile\n * of n stones, and you and your opponent take turns to remove 1 to 3\n * stones from the pile. The one who removes the last stone wins the game.\n * Given the number of stones n, determine if you can win the game if both\n * you and your opponent play optimally.\n * Note: You always take the first turn.\n *\n * Here are some cases:\n *   canWinNim(1) // returns true\n */\nfunction canWinNim(n: number): boolean",
      "es": "/**\n * Estás jugando un juego llamado Nim. En este juego, comienzas con una pila\n * de n piedras, y tú y tu oponente se turnan para quitar de 1 a 3\n * piedras de la pila. Quien quite la última piedra gana el juego.\n * Dado el número de piedras n, determina si puedes ganar el juego si ambos\n * tú y tu oponente juegan de manera óptima.\n * Nota: Siempre tomas el primer turno.\n *\n * Aquí hay algunos casos:\n *   canWinNim(1) // devuelve true\n */\nfunction canWinNim(n: number): boolean",
      "arb": "/**\n * أنت تلعب لعبة تسمى نيم. في هذه اللعبة، تبدأ بكومة من n من الحجارة،\n * وتقوم أنت وخصمك بالتناوب لإزالة 1 إلى 3 حجارة من الكومة. الشخص الذي\n * يزيل الحجر الأخير يفوز باللعبة. بالنظر إلى عدد الحجارة n، حدد ما إذا\n * كان بإمكانك الفوز باللعبة إذا لعبت أنت وخصمك بشكل مثالي.\n * ملاحظة: أنت دائمًا تأخذ الدور الأول.\n *\n * هنا بعض الحالات:\n *   canWinNim(1) // يعيد true\n */ \nfunction canWinNim(n: number): boolean",
      "sw": "/**\n * Unacheza mchezo unaoitwa Nim. Katika mchezo huu, unaanza na rundo\n * la mawe n, na wewe na mpinzani wako mnachukua zamu kuondoa mawe 1 hadi 3\n * kutoka kwenye rundo. Yule anayeondoa jiwe la mwisho anashinda mchezo.\n * Ukipewa idadi ya mawe n, amua kama unaweza kushinda mchezo ikiwa wote\n * wewe na mpinzani wako mna cheza kwa ufanisi.\n * Kumbuka: Daima unachukua zamu ya kwanza.\n *\n * Hapa kuna baadhi ya kesi:\n *   canWinNim(1) // inarudisha kweli\n */\nfunction canWinNim(n: number): boolean",
      "tr": "/**\n * Nim adında bir oyun oynuyorsunuz. Bu oyunda, n taşından oluşan bir yığınla\n * başlarsınız ve siz ve rakibiniz sırayla yığından 1 ila 3 taş çıkarırsınız.\n * Son taşı çıkaran oyunu kazanır. Taş sayısı n verildiğinde, hem siz hem de\n * rakibiniz optimal oynarsa oyunu kazanıp kazanamayacağınızı belirleyin.\n * Not: Her zaman ilk hamleyi siz yaparsınız.\n *\n * İşte bazı durumlar:\n *   canWinNim(1) // true döndürür\n */\nfunction canWinNim(n: number): boolean",
      "vi": "/**\n * Bạn đang chơi một trò chơi gọi là Nim. Trong trò chơi này, bạn bắt đầu với một đống\n * n viên đá, và bạn cùng đối thủ của bạn lần lượt lấy đi từ 1 đến 3\n * viên đá từ đống. Người nào lấy viên đá cuối cùng sẽ thắng trò chơi.\n * Cho số lượng viên đá n, xác định xem bạn có thể thắng trò chơi nếu cả\n * bạn và đối thủ của bạn chơi tối ưu.\n * Lưu ý: Bạn luôn là người đi trước.\n *\n * Dưới đây là một số trường hợp:\n *   canWinNim(1) // trả về true\n */\nfunction canWinNim(n: number): boolean"
    },
    "prompt_bertscore": {
      "es": "0.9887074655774045",
      "arb": "0.9727302336181012",
      "sw": "0.9958992757835348",
      "tr": "0.9680326251066261",
      "vi": "0.9830464997179102"
    },
    "canonical_solution": "{\n    return n % 4 !== 0;\n}",
    "instruction": {
      "en": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لكود TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nTürkçe olarak TypeScript kodunun kısa bir doğal dil açıklamasını (docstring) en fazla 500 karakter kullanarak sağlayın.",
      "vi": "function canWinNim(n: number): boolean\n{\n    return n % 4 !== 0;\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.9369118128972229",
      "vi": "0.8992582460859634"
    },
    "level": "",
    "test": "function testCanWinNim(): void {\n    console.assert(canWinNim(1) === true, \"Test case 1 failed\");\n    console.assert(canWinNim(2) === true, \"Test case 2 failed\");\n    console.assert(canWinNim(3) === true, \"Test case 3 failed\");\n    console.assert(canWinNim(4) === false, \"Test case 4 failed\");\n    console.assert(canWinNim(5) === true, \"Test case 5 failed\");\n    console.assert(canWinNim(6) === true, \"Test case 6 failed\");\n    console.assert(canWinNim(7) === true, \"Test case 7 failed\");\n    console.assert(canWinNim(8) === false, \"Test case 8 failed\");\n    console.assert(canWinNim(9) === true, \"Test case 9 failed\");\n    console.assert(canWinNim(10) === true, \"Test case 10 failed\");\n    console.assert(canWinNim(11) === true, \"Test case 11 failed\");\n    console.assert(canWinNim(12) === false, \"Test case 12 failed\");\n    console.assert(canWinNim(13) === true, \"Test case 13 failed\");\n    console.assert(canWinNim(14) === true, \"Test case 14 failed\");\n    console.assert(canWinNim(15) === true, \"Test case 15 failed\");\n    console.assert(canWinNim(16) === false, \"Test case 16 failed\");\n    console.assert(canWinNim(17) === true, \"Test case 17 failed\");\n    console.assert(canWinNim(18) === true, \"Test case 18 failed\");\n    console.assert(canWinNim(19) === true, \"Test case 19 failed\");\n    console.assert(canWinNim(20) === false, \"Test case 20 failed\");\n}\ntestCanWinNim();",
    "entry_point": "canWinNim",
    "signature": "function canWinNim(n: number): boolean",
    "docstring": {
      "en": "You are playing a game called Nim. In this game, you start with a pile\nof n stones, and you and your opponent take turns to remove 1 to 3\nstones from the pile. The one who removes the last stone wins the game.\nGiven the number of stones n, determine if you can win the game if both\nyou and your opponent play optimally.\nNote: You always take the first turn.\n\nHere are some cases:\n  canWinNim(1) // returns true\n",
      "es": "Estás jugando un juego llamado Nim. En este juego, comienzas con una pila de n piedras, y tú y tu oponente se turnan para quitar de 1 a 3 piedras de la pila. El que quite la última piedra gana el juego. Dado el número de piedras n, determina si puedes ganar el juego si tanto tú como tu oponente juegan de manera óptima. \nNota: Siempre tomas el primer turno.\n\nAquí hay algunos casos:\n  canWinNim(1) // devuelve true",
      "arb": "أنت تلعب لعبة تسمى نيم. في هذه اللعبة، تبدأ بكومة من n من الحجارة، وتقوم أنت وخصمك بالتناوب لإزالة 1 إلى 3 حجارة من الكومة. الشخص الذي يزيل آخر حجر يفوز باللعبة. بالنظر إلى عدد الحجارة n، حدد ما إذا كان بإمكانك الفوز باللعبة إذا لعبت أنت وخصمك بشكل مثالي.\nملاحظة: أنت دائمًا تأخذ الدور الأول.\n\nإليك بعض الحالات:\n  canWinNim(1) // يعيد true",
      "sw": "Unacheza mchezo unaoitwa Nim. Katika mchezo huu, unaanza na rundo la mawe n, na wewe na mpinzani wako mnapokezana kuondoa mawe 1 hadi 3 kutoka kwenye rundo. Yule anayeondoa jiwe la mwisho ndiye anayeshinda mchezo. Ukipewa idadi ya mawe n, amua kama unaweza kushinda mchezo ikiwa wewe na mpinzani wako mna cheza kwa ustadi.\n\nKumbuka: Daima unachukua zamu ya kwanza.\n\nHapa kuna baadhi ya kesi:\n  canWinNim(1) // inarudisha kweli",
      "tr": "Nim adlı bir oyun oynuyorsunuz. Bu oyunda, n taşlık bir yığınla başlarsınız ve siz ve rakibiniz sırayla yığından 1 ila 3 taş alırsınız. Son taşı alan oyunu kazanır. Taş sayısı n verildiğinde, hem siz hem de rakibiniz en iyi şekilde oynarsa oyunu kazanıp kazanamayacağınızı belirleyin. Not: Her zaman ilk hamleyi siz yaparsınız.\n\nİşte bazı durumlar:\n  canWinNim(1) // true döndürür",
      "vi": "Bạn đang chơi một trò chơi có tên là Nim. Trong trò chơi này, bạn bắt đầu với một đống n viên đá, và bạn cùng đối thủ của mình lần lượt lấy đi từ 1 đến 3 viên đá từ đống. Người lấy viên đá cuối cùng sẽ thắng trò chơi. Cho số lượng viên đá n, xác định xem bạn có thể thắng trò chơi nếu cả bạn và đối thủ đều chơi tối ưu hay không. Lưu ý: Bạn luôn đi trước.\n\nDưới đây là một số trường hợp:\n  canWinNim(1) // trả về true"
    },
    "docstring_bertscore": {
      "es": "0.9948608361514844",
      "arb": "0.981889279118001",
      "sw": "0.9901374056904747",
      "tr": "0.9688392630840088",
      "vi": "0.9818640530596096"
    }
  },
  {
    "task_id": "TypeScript/50",
    "prompt": {
      "en": "\n/**\n * Given two integers a and b, return the sum if the sum is even,\n * or return the product of a and b if the sum is odd.\n * Examples:\n *   evenSumOrOddProduct(2, 3) returns 6\n *   evenSumOrOddProduct(5, 5) returns 10\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {",
      "es": "/**\n * Dados dos enteros a y b, devuelve la suma si la suma es par,\n * o devuelve el producto de a y b si la suma es impar.\n * Ejemplos:\n *   evenSumOrOddProduct(2, 3) returns 6\n *   evenSumOrOddProduct(5, 5) returns 10\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {",
      "arb": "/**\n * بالنظر إلى عددين صحيحين a و b، أعد المجموع إذا كان المجموع زوجيًا،\n * أو أعد حاصل ضرب a و b إذا كان المجموع فرديًا.\n * أمثلة:\n *   evenSumOrOddProduct(2, 3) returns 6\n *   evenSumOrOddProduct(5, 5) returns 10\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {",
      "sw": "/**\n * Ukipewa nambari mbili a na b, rudisha jumla ikiwa jumla ni shufwa,\n * au rudisha bidhaa ya a na b ikiwa jumla ni witiri.\n * Mifano:\n *   evenSumOrOddProduct(2, 3) inarudisha 6\n *   evenSumOrOddProduct(5, 5) inarudisha 10\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {",
      "tr": "/**\n * İki tam sayı a ve b verildiğinde, toplam çift ise toplamı döndür,\n * veya toplam tek ise a ve b'nin çarpımını döndür.\n * Örnekler:\n *   evenSumOrOddProduct(2, 3) 6 döndürür\n *   evenSumOrOddProduct(5, 5) 10 döndürür\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {",
      "vi": "/**\n * Cho hai số nguyên a và b, trả về tổng nếu tổng là số chẵn,\n * hoặc trả về tích của a và b nếu tổng là số lẻ.\n * Ví dụ:\n *   evenSumOrOddProduct(2, 3) trả về 6\n *   evenSumOrOddProduct(5, 5) trả về 10\n */\nfunction evenSumOrOddProduct(a: number, b: number): number {"
    },
    "prompt_bertscore": {
      "es": "0.999999801369619",
      "arb": "0.999999801369619",
      "sw": "0.9912463591077925",
      "tr": "0.9733239398270145",
      "vi": "0.9975677709842278"
    },
    "canonical_solution": "let sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}",
    "instruction": {
      "en": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nProvide a concise natural language description (docstring) of the TypeScript code in English using at most 500 characters.",
      "es": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nProporcione una descripción concisa en lenguaje natural (docstring) del código TypeScript en español utilizando un máximo de 500 caracteres.",
      "arb": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nيرجى تقديم وصف موجز بلغة طبيعية (docstring) لشيفرة TypeScript باللغة العربية الفصحى باستخدام 500 حرف كحد أقصى.",
      "sw": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nToa maelezo mafupi ya lugha asilia (docstring) ya msimbo wa TypeScript kwa Kiswahili kwa kutumia herufi zisizozidi 500.",
      "tr": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nTürkçe olarak, TypeScript kodunun işlevselliğini açıklayan en fazla 500 karakterlik kısa bir açıklama (docstring) sağlayın.",
      "vi": "function evenSumOrOddProduct(a: number, b: number): number\nlet sum = a + b;\n    if (sum % 2 === 0) {\n        return sum;\n    } else {\n        return a * b;\n    }\n}\n\nCung cấp mô tả ngắn gọn bằng ngôn ngữ tự nhiên (docstring) cho mã TypeScript bằng tiếng Việt, không quá 500 ký tự."
    },
    "instruction_bertscore": {
      "es": "0.9691922292711078",
      "arb": "0.9270462391319821",
      "sw": "0.9442521986283673",
      "tr": "0.8445147199208429",
      "vi": "0.917805755175858"
    },
    "level": "",
    "test": "const testEvenSumOrOddProduct = (): void => {\n    console.assert(evenSumOrOddProduct(2, 3) === 6, 'Test Case 1 Failed');\n    console.assert(evenSumOrOddProduct(5, 5) === 10, 'Test Case 2 Failed');\n    console.assert(evenSumOrOddProduct(1, 1) === 2, 'Test Case 3 Failed');\n    console.assert(evenSumOrOddProduct(0, 0) === 0, 'Test Case 4 Failed');\n    console.assert(evenSumOrOddProduct(-1, -1) === -2, 'Test Case 5 Failed');\n    console.assert(evenSumOrOddProduct(100, 200) === 300, 'Test Case 6 Failed');\n    console.assert(evenSumOrOddProduct(3, 4) === 12, 'Test Case 7 Failed');\n    console.assert(evenSumOrOddProduct(-5, 5) === 0, 'Test Case 8 Failed');\n    console.assert(evenSumOrOddProduct(7, 8) === 56, 'Test Case 9 Failed');\n    console.assert(evenSumOrOddProduct(9, 10) === 90, 'Test Case 10 Failed');\n    console.assert(evenSumOrOddProduct(11, 14) === 154, 'Test Case 11 Failed');\n};\n\ntestEvenSumOrOddProduct();",
    "entry_point": "evenSumOrOddProduct",
    "signature": "function evenSumOrOddProduct(a: number, b: number): number",
    "docstring": {
      "en": "Given two integers a and b, return the sum if the sum is even,\nor return the product of a and b if the sum is odd.\nExamples:\nevenSumOrOddProduct(2, 3) returns 6\nevenSumOrOddProduct(5, 5) returns 10\n",
      "es": "Dado dos enteros a y b, devuelve la suma si la suma es par, o devuelve el producto de a y b si la suma es impar.\nEjemplos:\nevenSumOrOddProduct(2, 3) returns 6\nevenSumOrOddProduct(5, 5) returns 10",
      "arb": "إعطاء عددين صحيحين a و b، إرجاع المجموع إذا كان المجموع زوجيًا، أو إرجاع حاصل ضرب a و b إذا كان المجموع فرديًا.\nأمثلة:\nevenSumOrOddProduct(2, 3) returns 6\nevenSumOrOddProduct(5, 5) returns 10",
      "sw": "Given two integers a and b, return the sum if the sum is even,  \nor return the product of a and b if the sum is odd.  \nMifano:  \nevenSumOrOddProduct(2, 3) inarudisha 6  \nevenSumOrOddProduct(5, 5) inarudisha 10  ",
      "tr": "Verilen iki tam sayı a ve b için, toplam çift ise toplamı döndürün, \nveya toplam tek ise a ve b'nin çarpımını döndürün.\nÖrnekler:\nevenSumOrOddProduct(2, 3) 6 döndürür\nevenSumOrOddProduct(5, 5) 10 döndürür",
      "vi": "Cho hai số nguyên a và b, trả về tổng nếu tổng là số chẵn, \nhoặc trả về tích của a và b nếu tổng là lẻ.  \nVí dụ:  \nevenSumOrOddProduct(2, 3) returns 6  \nevenSumOrOddProduct(5, 5) returns 10  "
    },
    "docstring_bertscore": {
      "es": "1",
      "arb": "1",
      "sw": "1",
      "tr": "1",
      "vi": "1"
    }
  }
]