[
  {
    "task_id": "Python/1",
    "original": {
      "prompt": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
      "instruction": "Write a python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    ",
      "docstring": " Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    "
    },
    "translations": {
      "Chinese": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.947011770512085,
              "time_taken": {
                "translation_time": 1.7292938232421875,
                "back_translation_time": 2.3467187881469727,
                "bertscore_times": 2.619361400604248
              }
            },
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.9402400635618435,
              "time_taken": {
                "translation_time": 2.0146734714508057,
                "back_translation_time": 1.2900397777557373,
                "bertscore_times": 6.212778568267822
              }
            },
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.947011770512085,
              "time_taken": {
                "translation_time": 1.7694766521453857,
                "back_translation_time": 1.3656065464019775,
                "bertscore_times": 1.08431077003479
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.947011770512085
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "编写一个 Python 函数 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' 来解决以下问题：\n 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if there are any two numbers in the given list of numbers whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9558045415893563,
              "time_taken": {
                "translation_time": 1.6131632328033447,
                "back_translation_time": 2.040688991546631,
                "bertscore_times": 1.0979750156402588
              }
            }
          ],
          "best_translation": "编写一个 Python 函数 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' 来解决以下问题：\n 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if there are any two numbers in the given list of numbers whose distance is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9558045415893563
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "检查给定数字列表中是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if the distance between any two numbers in the given list of numbers is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.934754289698422,
              "time_taken": {
                "translation_time": 1.2617509365081787,
                "back_translation_time": 1.6415705680847168,
                "bertscore_times": 0.9873411655426025
              }
            },
            {
              "translated_text": "检查给定数字列表中是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if the distance between any two numbers in the given list of numbers is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.934754289698422,
              "time_taken": {
                "translation_time": 1.6111502647399902,
                "back_translation_time": 5.939378976821899,
                "bertscore_times": 1.071037769317627
              }
            },
            {
              "translated_text": "检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if the distance between any two numbers in a given list of numbers is less than a given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.932169313919634,
              "time_taken": {
                "translation_time": 2.3314685821533203,
                "back_translation_time": 1.6555979251861572,
                "bertscore_times": 1.0382890701293945
              }
            }
          ],
          "best_translation": "检查给定数字列表中是否有任意两个数字之间的距离小于给定的阈值。\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Check if the distance between any two numbers in the given list of numbers is less than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.934754289698422
        },
        "best_score": 0.9558045415893563
      },
      "Hausa": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Duba idan a cikin jerin lambobin da aka bayar, akwai wasu lambobi biyu da suka fi kusa da juna fiye da\n    iyakar da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the given list of numbers, there are two numbers that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.968851379537252,
              "time_taken": {
                "translation_time": 1.6587038040161133,
                "back_translation_time": 3.379117727279663,
                "bertscore_times": 1.0872540473937988
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Duba idan a cikin jerin lambobin da aka bayar, akwai wasu lambobi biyu da suka fi kusa da juna fiye da\n    iyakar da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the given list of numbers, there are two numbers that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.968851379537252
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Rubuta aikin python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' don warware matsalar da ke gaba:\n Duba idan a cikin jerin lambobin da aka bayar, akwai kowanne lambobi biyu da ke kusa da juna fiye da\n    iyakar da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write the Python task 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, there are any two numbers that are closer to each other than the\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9621211863366468,
              "time_taken": {
                "translation_time": 1.7716562747955322,
                "back_translation_time": 2.5314273834228516,
                "bertscore_times": 1.0791420936584473
              }
            }
          ],
          "best_translation": "Rubuta aikin python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' don warware matsalar da ke gaba:\n Duba idan a cikin jerin lambobin da aka bayar, akwai kowanne lambobi biyu da ke kusa da juna fiye da\n    iyakar da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Write the Python task 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, there are any two numbers that are closer to each other than the\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9621211863366468
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Duba idan a cikin jerin lambobi da aka bayar, ko akwai wasu lambobi biyu da suke kusa da juna fiye da\n    iyaka da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if in the given list of numbers, there are any two numbers that are closer to each other than the given limit.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9613189182276469,
              "time_taken": {
                "translation_time": 1.3643615245819092,
                "back_translation_time": 1.8246431350708008,
                "bertscore_times": 1.1022119522094727
              }
            }
          ],
          "best_translation": "Duba idan a cikin jerin lambobi da aka bayar, ko akwai wasu lambobi biyu da suke kusa da juna fiye da\n    iyaka da aka bayar.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Check if in the given list of numbers, there are any two numbers that are closer to each other than the given limit.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9613189182276469
        },
        "best_score": 0.968851379537252
      },
      "Oromo": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Lakkoofsa kenname keessatti, lakkoofsi lama walitti dhiyeenyaan kan jiran\n    akka ta'e sakatta'i.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are two numbers that are close to each other\n    in the given list of numbers.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.9598480602560836,
              "time_taken": {
                "translation_time": 2.8471100330352783,
                "back_translation_time": 1.2849669456481934,
                "bertscore_times": 1.0813302993774414
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Lakkoofsa kenname keessatti, lakkoofsi lama walitti dhiyeenyaan kan jiran\n    akka ta'e sakatta'i.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are two numbers that are close to each other\n    in the given list of numbers.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.9598480602560836
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Fuunkishina python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' jedhu barreessi akka rakkoo armaan gadiitti hiikuuf:\n Ilaali yoo lakkoofsa tarree kenname keessatti, lakkoofsi lama walitti dhiyaatan\n    caalbaasi kennameen dhiyaachuu danda'u.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write the Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, any two numbers are close to each other\n    by the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9702489428982134,
              "time_taken": {
                "translation_time": 2.209980010986328,
                "back_translation_time": 3.174933910369873,
                "bertscore_times": 1.3982725143432617
              }
            }
          ],
          "best_translation": "Fuunkishina python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' jedhu barreessi akka rakkoo armaan gadiitti hiikuuf:\n Ilaali yoo lakkoofsa tarree kenname keessatti, lakkoofsi lama walitti dhiyaatan\n    caalbaasi kennameen dhiyaachuu danda'u.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Write the Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, any two numbers are close to each other\n    by the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9702489428982134
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Mirkadhu yoo lakkoofsa tarree kenname keessatti lakkoofsota lama walitti dhiyeenya qaban\n    daangaa kennameen caalaa jiraatan.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Verify if there are two numbers in the given list that are closer than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9287848508571805,
              "time_taken": {
                "translation_time": 2.0145020484924316,
                "back_translation_time": 1.1995351314544678,
                "bertscore_times": 10.2543785572052
              }
            },
            {
              "translated_text": "Check gochuun yoo lakkoofsota tarree kenname keessatti lakkoofsota lama walitti dhiyaatan\n    caancala kenname caalaa jiraatan.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if any two numbers in the given list are closer than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9459637966217449,
              "time_taken": {
                "translation_time": 5.066990613937378,
                "back_translation_time": 1.0681145191192627,
                "bertscore_times": 1.0648021697998047
              }
            },
            {
              "translated_text": "Mirkadhu yoo lakkoofsa tarree kenname keessatti, lakkoofsi lama walitti dhiyaachuu\n    caalaa daangeffama kenname.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Verify if in the given list of numbers, any two numbers are closer than the given limit.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9401538579764744,
              "time_taken": {
                "translation_time": 1.6096467971801758,
                "back_translation_time": 1.365041971206665,
                "bertscore_times": 1.0066020488739014
              }
            }
          ],
          "best_translation": "Check gochuun yoo lakkoofsota tarree kenname keessatti lakkoofsota lama walitti dhiyaatan\n    caancala kenname caalaa jiraatan.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Check if any two numbers in the given list are closer than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9459637966217449
        },
        "best_score": 0.9702489428982134
      },
      "Khmer": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" ពិនិត្យមើលថាតើក្នុងបញ្ជីលេខដែលបានផ្ដល់ មានលេខពីរណាមួយដែលនៅជិតគ្នាជាង\n    កម្រិតដែលបានផ្ដល់ឬទេ។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list that are closer\n    than the provided threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.9568644333025585,
              "time_taken": {
                "translation_time": 1.9408845901489258,
                "back_translation_time": 1.7729268074035645,
                "bertscore_times": 1.0660514831542969
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" ពិនិត្យមើលថាតើក្នុងបញ្ជីលេខដែលបានផ្ដល់ មានលេខពីរណាមួយដែលនៅជិតគ្នាជាង\n    កម្រិតដែលបានផ្ដល់ឬទេ។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if there are any two numbers in the given list that are closer\n    than the provided threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.9568644333025585
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "សរសេរមុខងារ python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' ដើម្បីដោះស្រាយបញ្ហាខាងក្រោម៖\n ពិនិត្យមើលថាក្នុងបញ្ជីលេខដែលបានផ្តល់ យើងមានលេខពីរដែលនៅជិតគ្នាជាង\n    ចំនួនកម្រិតដែលបានផ្តល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, we have two numbers that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9647929635919471,
              "time_taken": {
                "translation_time": 2.989804983139038,
                "back_translation_time": 1.3806629180908203,
                "bertscore_times": 1.7959866523742676
              }
            }
          ],
          "best_translation": "សរសេរមុខងារ python 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' ដើម្បីដោះស្រាយបញ្ហាខាងក្រោម៖\n ពិនិត្យមើលថាក្នុងបញ្ជីលេខដែលបានផ្តល់ យើងមានលេខពីរដែលនៅជិតគ្នាជាង\n    ចំនួនកម្រិតដែលបានផ្តល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of numbers, we have two numbers that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9647929635919471
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "ពិនិត្យមើលថាតើក្នុងបញ្ជីលេខដែលបានផ្ដល់ មានលេខពីរណាមួយនៅជិតគ្នាជាង\n    ចំនួនកម្រិតដែលបានផ្ដល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if in the given list of numbers, any two numbers are closer to each other than the given threshold.\n\n```python\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n```",
              "score": 0.8489435815267778,
              "time_taken": {
                "translation_time": 1.6218082904815674,
                "back_translation_time": 1.4614052772521973,
                "bertscore_times": 1.2462148666381836
              }
            },
            {
              "translated_text": " ពិនិត្យមើលថាតើនៅក្នុងបញ្ជីលេខដែលបានផ្ដល់មានលេខពីរណាមួយនៅជិតគ្នាជាង\n    កម្រិតស្ទង់ដែលបានផ្ដល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check whether there are any numbers in the given list that are closer together than the specified threshold.\n\n```python\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n```",
              "score": 0.8232207485523788,
              "time_taken": {
                "translation_time": 2.361609935760498,
                "back_translation_time": 1.4683096408843994,
                "bertscore_times": 1.889474868774414
              }
            },
            {
              "translated_text": "ពិនិត្យមើលថាតើក្នុងបញ្ជីលេខដែលបានផ្ដល់ មានលេខពីរណាមួយនៅជិតគ្នាជាង\n    កម្រិតសំខាន់ដែលបានផ្ដល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if in the given list of numbers, any two numbers are closer than the given threshold.\n\n```python\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n```",
              "score": 0.8434458898404943,
              "time_taken": {
                "translation_time": 1.5919010639190674,
                "back_translation_time": 1.3460047245025635,
                "bertscore_times": 1.1499757766723633
              }
            }
          ],
          "best_translation": "ពិនិត្យមើលថាតើក្នុងបញ្ជីលេខដែលបានផ្ដល់ មានលេខពីរណាមួយនៅជិតគ្នាជាង\n    ចំនួនកម្រិតដែលបានផ្ដល់ឬអត់។\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Check if in the given list of numbers, any two numbers are closer to each other than the given threshold.\n\n```python\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n```",
          "best_score": 0.8489435815267778
        },
        "best_score": 0.9647929635919471
      },
      "Tibetan": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" གདམ་ཁ་རྐྱབས་ཡོད་པའི་ཨང་རིགས་ཐོ་ཡིག་ནང་ལས། གང་ཞིག་གཉིས་ཀྱི་ཨང་གྲངས་གཅིག་གཅིག་ལ་གཅིག་གཅིག་ལས་ཉུང་བ་ཡོད་པའི་སྐབས་ལ།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" In a given list of numbers, check if there are any two numbers that are closer to each other than the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.9687182971819586,
              "time_taken": {
                "translation_time": 12.370774984359741,
                "back_translation_time": 1.43589448928833,
                "bertscore_times": 0.9909412860870361
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" གདམ་ཁ་རྐྱབས་ཡོད་པའི་ཨང་རིགས་ཐོ་ཡིག་ནང་ལས། གང་ཞིག་གཉིས་ཀྱི་ཨང་གྲངས་གཅིག་གཅིག་ལ་གཅིག་གཅིག་ལས་ཉུང་བ་ཡོད་པའི་སྐབས་ལ།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" In a given list of numbers, check if there are any two numbers that are closer to each other than the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.9687182971819586
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Python གྱི་ལས་ཀ་གཅིག 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' བྲིས་ནས་འོག་གི་འགྲེལ་བཤད་འདི་བཀོད།\n ཨང་གྲངས་ཀྱི་ཐོ་ཡིན་ནའི་སྟེང་ལ་ཨང་གྲངས་གཉིས་ཀྱི་འབྲེལ་བ་འདི་སྐུལ་བསྐྱོར་གྱི་ཐང་ལས་ཉེ་ཤོས་ཡོད་དམ་བརྟེན་བརྗེད།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write a Python task 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' and include the following explanation below:\n Check if there are two numbers in the list that are closer than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9242664069493989,
              "time_taken": {
                "translation_time": 7.304121971130371,
                "back_translation_time": 2.6780900955200195,
                "bertscore_times": 1.1604828834533691
              }
            },
            {
              "translated_text": "Python གྱི་ལས་ཀ་ཞིབ་ཕྲ་འབད་དོན་གཅིག་བྱེད་རྒྱུ་ཡིན་པ་ནི་ 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' ལག་ལེན་འབད་དེ་འདི་འབད་རྩོལ་འབད་དོན་འདི་བཀོད་ཡོད།\n གནས་སྐབས་གི་ཨང་རིམ་གྱི་ཐོ་ཡིག་ནང་གི་གཉིས་ཀ་གྱི་ཨང་གཉིས་ཀ་གཅིག་ལ་གཅིག་ལ་གཅིག་ལ་ཉེ་བ་ཡོད་མེད་བརྟེན་བརྗེད་དགོས།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Python programming task involves implementing 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to achieve the following objective:\n Determine if there are any two numbers in the given list that are close to each other based on the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9313060662836563,
              "time_taken": {
                "translation_time": 5.907595872879028,
                "back_translation_time": 1.682488203048706,
                "bertscore_times": 1.2569077014923096
              }
            },
            {
              "translated_text": "ཨང་ཚུ་གི་ཐོ་ཡིག་ནང་ཡོད་པའི་ཨང་གཉིས་ཀྱི་འབྲེལ་ལམ་གཅིག་གིས་གཅིག་ལ་ཉེ་ཤོས་ཡོད་མི་ཡོད་མ་རེད་པ་ཞིབ་དཔྱད་བྱེད་པའི་དོན་ལུ་ 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' ཞེས་པའི་པཱའུ་ཐུང་བཟོ་དགོས།\n ཐོ་ཡིག་ནང་ཡོད་པའི་ཨང་གཉིས་ཀྱི་འབྲེལ་ལམ་གཅིག་གིས་གཅིག་ལ་ཉེ་ཤོས་ཡོད་མི་ཡོད་མ་རེད་པ་ཞིབ་དཔྱད་བྱེད།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "To check if there are any two numbers in the list that are closer to each other than a given threshold, create a function called 'def has_close_elements(numbers: List[float], threshold: float) -> bool:'\n Check if there are any two numbers in the list that are closer to each other than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9008852275370202,
              "time_taken": {
                "translation_time": 7.695860862731934,
                "back_translation_time": 3.6237545013427734,
                "bertscore_times": 1.0128612518310547
              }
            }
          ],
          "best_translation": "Python གྱི་ལས་ཀ་ཞིབ་ཕྲ་འབད་དོན་གཅིག་བྱེད་རྒྱུ་ཡིན་པ་ནི་ 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' ལག་ལེན་འབད་དེ་འདི་འབད་རྩོལ་འབད་དོན་འདི་བཀོད་ཡོད།\n གནས་སྐབས་གི་ཨང་རིམ་གྱི་ཐོ་ཡིག་ནང་གི་གཉིས་ཀ་གྱི་ཨང་གཉིས་ཀ་གཅིག་ལ་གཅིག་ལ་གཅིག་ལ་ཉེ་བ་ཡོད་མེད་བརྟེན་བརྗེད་དགོས།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Python programming task involves implementing 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to achieve the following objective:\n Determine if there are any two numbers in the given list that are close to each other based on the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9313060662836563
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "སྤྱིར་བཏང་གི་ཨང་རིགས་ཐོ་ནང་གི་ཨང་གྲངས་གཉིས་ཀྱི་རང་འགྲེལ་གྱི་དོན་ལྡན་ན་གནས་སྟངས་འདི་ལྟར་རྒྱུན་སྤྱོད་ཡོད་མེད་བརྟེན་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་གཏོང་ནས་བརྡ་འཕྲིན་ག",
              "back_translated_text": "If there is a common divisor between two numbers in a list of integers, use the following function to send a message:\n\n```python\ndef send_message():\n    # Code to send a message\n    pass\n```\n\nCheck each pair of numbers in the list, and if they have a common divisor other than 1, call the `send_message()` function.",
              "score": 0.5049614465619896,
              "time_taken": {
                "translation_time": 115.72358441352844,
                "back_translation_time": 2.5980424880981445,
                "bertscore_times": 1.0259132385253906
              }
            },
            {
              "translated_text": "གནས་སྐབས་སྟེང་གི་ཨང་རིམ་གྱི་ཐོ་ཡིག་ནང་གང་ཡང་མེད་པའི་ཨང་གཉིས་ཀྱི་དོན་ལུགས་སྟོང་ཡོད་མི་རེད་པས།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    ནོར་བཅོས།\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    ཡིན།",
              "back_translated_text": "Is there a pair of numbers in the list that are closer than the given tolerance?\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9134630991552923,
              "time_taken": {
                "translation_time": 3.836167335510254,
                "back_translation_time": 1.664808988571167,
                "bertscore_times": 1.3374104499816895
              }
            },
            {
              "translated_text": "གནས་སྐབས་སྤྱིར་བཏང་གི་ཨང་ཚུགས་ནས་གང་རུང་གི་གཉིས་ཀྱི་ཨང་གྲངས་གཅིག་གཅིག་གི་འགྲེལ་བཤད་ལས་འབྲེལ་བ་ལྡན་པའི་དོན་ལུ་མཐུན་སྒྲིལ་བྱེད་དགོས་པ་ཡིན་པ་བརྟེན་པ་འདི་རྐྱང་བ་ཡིན།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    ནོར་འཁྲུལ་མེད།\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    དོན་ཡོད།\n",
              "back_translated_text": "In the context of a sequence of numbers, it is necessary to implement a function for the purpose of determining whether there is any pair of numbers that are close to each other based on a given explanation.\n\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.8717223149934779,
              "time_taken": {
                "translation_time": 6.623055458068848,
                "back_translation_time": 2.0790176391601562,
                "bertscore_times": 1.108105182647705
              }
            }
          ],
          "best_translation": "གནས་སྐབས་སྟེང་གི་ཨང་རིམ་གྱི་ཐོ་ཡིག་ནང་གང་ཡང་མེད་པའི་ཨང་གཉིས་ཀྱི་དོན་ལུགས་སྟོང་ཡོད་མི་རེད་པས།\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    ནོར་བཅོས།\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    ཡིན།",
          "best_back_translation": "Is there a pair of numbers in the list that are closer than the given tolerance?\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9134630991552923
        },
        "best_score": 0.9687182971819586
      },
      "Yoruba": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Ṣayẹwo boya ninu akojọ awọn nọmba ti a fun, ṣe eyikeyi awọn nọmba meji sunmọ ara wọn ju\n    idiwọn ti a fun lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "back_translated_text": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the given list of numbers, any two numbers are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
              "score": 0.982276211100257,
              "time_taken": {
                "translation_time": 2.297178030014038,
                "back_translation_time": 2.467297315597534,
                "bertscore_times": 1.0591726303100586
              }
            }
          ],
          "best_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Ṣayẹwo boya ninu akojọ awọn nọmba ti a fun, ṣe eyikeyi awọn nọmba meji sunmọ ara wọn ju\n    idiwọn ti a fun lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_back_translation": "from typing import List\n \ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the given list of numbers, any two numbers are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"",
          "best_score": 0.982276211100257
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Kọ iṣẹ́-ṣiṣe python kan 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' láti yanju iṣoro tó tẹ̀lé:\n Ṣàyẹ̀wò bí nínú àkójọ àwọn nǹkan tí a fún, báwọn nǹkan méjì tó sún mọ́ ara wọn ju\n    àkókò tó fún lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of elements, there are two elements that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9583265515373564,
              "time_taken": {
                "translation_time": 2.279271125793457,
                "back_translation_time": 1.5635995864868164,
                "bertscore_times": 1.0566816329956055
              }
            }
          ],
          "best_translation": "Kọ iṣẹ́-ṣiṣe python kan 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' láti yanju iṣoro tó tẹ̀lé:\n Ṣàyẹ̀wò bí nínú àkójọ àwọn nǹkan tí a fún, báwọn nǹkan méjì tó sún mọ́ ara wọn ju\n    àkókò tó fún lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Write a Python function 'def has_close_elements(numbers: List[float], threshold: float) -> bool:' to solve the following problem:\n Check if in the given list of elements, there are two elements that are closer to each other than\n    the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9583265515373564
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Ṣayẹwo boya ninu atokọ awọn nọmba ti a fun, ṣe eyikeyi awọn nọmba meji sunmọ ara wọn ju\n    iye aropọ ti a fun lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "back_translated_text": "Check if in the given list of numbers, any two numbers are closer to each other than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
              "score": 0.9656023823946642,
              "time_taken": {
                "translation_time": 1.9527671337127686,
                "back_translation_time": 1.1347873210906982,
                "bertscore_times": 1.3284797668457031
              }
            }
          ],
          "best_translation": "Ṣayẹwo boya ninu atokọ awọn nọmba ti a fun, ṣe eyikeyi awọn nọmba meji sunmọ ara wọn ju\n    iye aropọ ti a fun lọ.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_back_translation": "Check if in the given list of numbers, any two numbers are closer to each other than the given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True",
          "best_score": 0.9656023823946642
        },
        "best_score": 0.982276211100257
      }
    }
  },
  {
    "task_id": "Python/2",
    "original": {
      "prompt": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
      "instruction": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    ",
      "docstring": " Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    "
    },
    "translations": {
      "Chinese": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" 此函数的输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串，并返回这些字符串的列表。\n    分离的组是平衡的（每个打开的括号都有正确的闭合）且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple nested groups of parentheses. Your goal is to separate these groups into individual strings and return a list of these strings.\n    The separated groups are balanced (each opening parenthesis has a correct closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9439782873329201,
              "time_taken": {
                "translation_time": 1.4854841232299805,
                "back_translation_time": 2.0446276664733887,
                "bertscore_times": 0.9309046268463135
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" 此函数的输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n    单独的组是平衡的（每个开括号都有正确的闭合）并且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple nested parenthesis groups. Your goal is to separate these groups into individual strings and return a list of these strings.\n    The individual groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9343749056706454,
              "time_taken": {
                "translation_time": 1.5477960109710693,
                "back_translation_time": 2.0428643226623535,
                "bertscore_times": 0.9961040019989014
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" 此函数的输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n    单独的组是平衡的（每个开括号都有正确的闭合）并且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple nested groups of parentheses. Your goal is to separate these groups into individual strings and return a list of these strings.\n    The individual groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9412640031760784,
              "time_taken": {
                "translation_time": 1.5473966598510742,
                "back_translation_time": 2.0661513805389404,
                "bertscore_times": 1.0198392868041992
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" 此函数的输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串，并返回这些字符串的列表。\n    分离的组是平衡的（每个打开的括号都有正确的闭合）且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple nested groups of parentheses. Your goal is to separate these groups into individual strings and return a list of these strings.\n    The separated groups are balanced (each opening parenthesis has a correct closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_score": 0.9439782873329201
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "编写一个Python函数 'def separate_paren_groups(paren_string: str) -> List[str]:' 来解决以下问题：\n 输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串并返回这些字符串的列表。\n 分离的组是平衡的（每个打开的括号都有正确的闭合）且不嵌套在彼此之中。\n 忽略输入字符串中的任何空格。\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input is a string containing multiple nested parenthesis groups. Your goal is to separate these groups into individual strings and return a list of these strings.\n The separated groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "score": 0.8800334073967396,
              "time_taken": {
                "translation_time": 2.0663349628448486,
                "back_translation_time": 1.6629135608673096,
                "bertscore_times": 1.043259859085083
              }
            },
            {
              "translated_text": "编写一个 Python 函数 'def separate_paren_groups(paren_string: str) -> List[str]:' 来解决以下问题：\n 输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串，并返回这些字符串的列表。\n 分离的组是平衡的（每个开括号都有正确的闭合）并且不相互嵌套。\n 忽略输入字符串中的任何空格。\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input is a string containing multiple nested parenthesis groups. Your goal is to separate these groups into individual strings and return a list of these strings.\n The separated groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "score": 0.8800334073967396,
              "time_taken": {
                "translation_time": 1.8518335819244385,
                "back_translation_time": 1.9447579383850098,
                "bertscore_times": 1.0663461685180664
              }
            },
            {
              "translated_text": "编写一个 Python 函数 'def separate_paren_groups(paren_string: str) -> List[str]:' 来解决以下问题：\n 该函数的输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串并返回这些字符串的列表。\n 分离的组是平衡的（每个打开的括号都有正确的关闭）且不相互嵌套。\n 忽略输入字符串中的任何空格。\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The function's input is a string containing multiple nested parenthesis groups. Your goal is to separate these groups into individual strings and return a list of these strings.\n The separated groups are balanced (every opening parenthesis has a corresponding closing one) and are not nested within each other.\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
              "score": 0.8793612421873176,
              "time_taken": {
                "translation_time": 1.8796613216400146,
                "back_translation_time": 1.4956388473510742,
                "bertscore_times": 1.0473179817199707
              }
            }
          ],
          "best_translation": "编写一个Python函数 'def separate_paren_groups(paren_string: str) -> List[str]:' 来解决以下问题：\n 输入是一个包含多个嵌套括号组的字符串。你的目标是将这些组分离成单独的字符串并返回这些字符串的列表。\n 分离的组是平衡的（每个打开的括号都有正确的闭合）且不嵌套在彼此之中。\n 忽略输入字符串中的任何空格。\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
          "best_back_translation": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input is a string containing multiple nested parenthesis groups. Your goal is to separate these groups into individual strings and return a list of these strings.\n The separated groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n Ignore any spaces in the input string.\n >>> separate_paren_groups('( ) (( )) (( )( ))')\n ['()', '(())', '(()())']",
          "best_score": 0.8800334073967396
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "```\n 输入此函数的是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n    各个组是平衡的（每个左括号都有正确的右括号闭合）且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n```",
              "back_translated_text": "```\nThe input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate these groups into individual strings and return a list of these strings.\n    Each group is balanced (each left parenthesis has a corresponding right parenthesis) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n```",
              "score": 0.8917522026170359,
              "time_taken": {
                "translation_time": 1.6779072284698486,
                "back_translation_time": 1.3737292289733887,
                "bertscore_times": 1.0645744800567627
              }
            },
            {
              "translated_text": "```\n输入此函数的是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n单独的组是平衡的（每个打开的括号都有正确的关闭）并且不相互嵌套。\n忽略输入字符串中的任何空格。\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "back_translated_text": "The input to this function is a string containing multiple nested groups of parentheses. Your goal is to separate these groups into individual strings and return a list of these strings. The individual groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other. Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.8488772389795123,
              "time_taken": {
                "translation_time": 1.4025170803070068,
                "back_translation_time": 1.6333956718444824,
                "bertscore_times": 1.0034117698669434
              }
            },
            {
              "translated_text": "```\n输入此函数的是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n单独的组是平衡的（每个开括号都有正确的闭合）并且不相互嵌套。\n忽略输入字符串中的任何空格。\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "back_translated_text": "The input to this function is a string containing multiple nested groups of parentheses. Your goal is to separate these groups into individual strings and return a list of these strings. The individual groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other. Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.8488772389795123,
              "time_taken": {
                "translation_time": 1.8200054168701172,
                "back_translation_time": 1.404477834701538,
                "bertscore_times": 1.1647427082061768
              }
            }
          ],
          "best_translation": "```\n 输入此函数的是一个包含多个嵌套括号组的字符串。你的目标是将这些组分成单独的字符串并返回这些字符串的列表。\n    各个组是平衡的（每个左括号都有正确的右括号闭合）且不相互嵌套。\n    忽略输入字符串中的任何空格。\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n```",
          "best_back_translation": "```\nThe input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate these groups into individual strings and return a list of these strings.\n    Each group is balanced (each left parenthesis has a corresponding right parenthesis) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n```",
          "best_score": 0.8917522026170359
        },
        "best_score": 0.9439782873329201
      },
      "Hausa": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Shigar da wannan aikin shine wani igiyar rubutu da ke dauke da kungiyoyi masu yawa na ma'ajin kowane-kowane. Manufarka ita ce\n    raba wadannan kungiyoyi zuwa igiyoyi daban-daban kuma dawo da jerin su.\n    Kungiyoyi daban-daban suna daidaita (kowace buɗewa tana da rufewa daidai) kuma ba a haɗa su cikin juna ba\n    Yi watsi da duk wani sarari a cikin igiyar shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of balanced parentheses. Your goal is to\n    separate these groups into different strings and return a list of them.\n    Different groups are balanced (each opening has a matching closing) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9588157781658453,
              "time_taken": {
                "translation_time": 2.2010653018951416,
                "back_translation_time": 4.482562065124512,
                "bertscore_times": 1.085935354232788
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Shigar da wannan aikin shine wani igiyar rubutu da ke dauke da kungiyoyi masu yawa na ma'ajin kowane-kowane. Manufarka ita ce\n    raba wadannan kungiyoyi zuwa igiyoyi daban-daban kuma dawo da jerin su.\n    Kungiyoyi daban-daban suna daidaita (kowace buɗewa tana da rufewa daidai) kuma ba a haɗa su cikin juna ba\n    Yi watsi da duk wani sarari a cikin igiyar shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of balanced parentheses. Your goal is to\n    separate these groups into different strings and return a list of them.\n    Different groups are balanced (each opening has a matching closing) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_score": 0.9588157781658453
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Rubuta aikin python 'def separate_paren_groups(paren_string: str) -> List[str]:' don magance matsalar mai zuwa:\n  Shigar da wannan aikin shine wani igiyar rubutu wanda ke dauke da kungiyoyi da dama na baka-baka da aka saka. Burinka shine\n    raba wadannan kungiyoyi zuwa igiyoyi daban-daban kuma mayar da jerin wadannan.\n    Kungiyoyi daban-daban suna daidaito (kowanne buɗaɗɗen baka yana da rufewa daidai) kuma ba a saka su cikin juna ba\n    Yi watsi da duk wani sarari a cikin igiyar shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write the Python task 'def separate_paren_groups(paren_string: str) -> List[str]:' to address the following problem:\n  The input to this function is a string containing multiple groups of parentheses. Your goal is to\n    separate these groups into different strings and return a list of these.\n    The different groups are balanced (each opening parenthesis has a matching closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9375877520838847,
              "time_taken": {
                "translation_time": 3.7826735973358154,
                "back_translation_time": 1.7770583629608154,
                "bertscore_times": 1.2217001914978027
              }
            },
            {
              "translated_text": "Rubuta wata aikin python 'def separate_paren_groups(paren_string: str) -> List[str]:' don warware matsalar mai zuwa:\n Shigar da wannan aikin shi ne wani kirtani da ke dauke da kungiyoyi masu yawa na maƙarƙashiya. Manufarka ita ce\n    raba waɗannan kungiyoyi zuwa kirtani daban-daban kuma dawo da jerin waɗannan.\n    Kungiyoyi daban-daban suna daidaita (kowanne buɗaɗɗen maƙarƙashiya yana da rufewa daidai) kuma ba a maƙale da juna ba\n    Yi watsi da duk wani sarari a cikin kirtanin shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input to this function is a string containing multiple groups of parentheses. Your goal is to\n    separate these groups into different strings and return a list of these.\n    Different groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9502079319733173,
              "time_taken": {
                "translation_time": 3.6483867168426514,
                "back_translation_time": 1.3624935150146484,
                "bertscore_times": 1.242931842803955
              }
            }
          ],
          "best_translation": "Rubuta wata aikin python 'def separate_paren_groups(paren_string: str) -> List[str]:' don warware matsalar mai zuwa:\n Shigar da wannan aikin shi ne wani kirtani da ke dauke da kungiyoyi masu yawa na maƙarƙashiya. Manufarka ita ce\n    raba waɗannan kungiyoyi zuwa kirtani daban-daban kuma dawo da jerin waɗannan.\n    Kungiyoyi daban-daban suna daidaita (kowanne buɗaɗɗen maƙarƙashiya yana da rufewa daidai) kuma ba a maƙale da juna ba\n    Yi watsi da duk wani sarari a cikin kirtanin shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input to this function is a string containing multiple groups of parentheses. Your goal is to\n    separate these groups into different strings and return a list of these.\n    Different groups are balanced (each opening parenthesis has a corresponding closing one) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9502079319733173
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Input zuwa wannan aikin shine wani rubutu wanda ke dauke da kungiyoyi masu yawa na kowane irin kowane. Manufarka ita ce\n    raba wadannan kungiyoyi zuwa rubutattun rubutu daban-daban kuma dawo da jerin wadannan.\n    Kungiyoyi daban-daban suna daidaita (kowace buɗe kowane an rufe shi da kyau) kuma ba a haɗa su cikin juna ba\n    Yi watsi da duk wani sarari a cikin rubutun shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The input to this task is a string containing multiple groups of parentheses of any kind. Your goal is to\n    separate these groups into different substrings and return a list of these.\n    Different groups are balanced (each open parenthesis is properly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9262384093723133,
              "time_taken": {
                "translation_time": 2.346149444580078,
                "back_translation_time": 1.607309103012085,
                "bertscore_times": 1.1200447082519531
              }
            },
            {
              "translated_text": "Input zuwa wannan aikin shine wani igiyar rubutu wanda ke dauke da kungiyoyi masu yawa na kowane irin kowane. Burinka shine\n    raba wadannan kungiyoyi zuwa igiyoyi daban-daban kuma dawo da jerin wadannan.\n    Kungiyoyi daban-daban suna daidaituwa (kowace buɗewa tana da rufewa daidai) kuma ba a cikin juna suke ba\n    Yi watsi da duk wani sarari a cikin igiyar rubutun shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The input for this task is a string containing multiple groups of parentheses of any kind. Your goal is to\n    separate these groups into different strings and return a list of them.\n    The different groups are balanced (each opening has a matching closing) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9182222830848883,
              "time_taken": {
                "translation_time": 3.540344476699829,
                "back_translation_time": 2.248232126235962,
                "bertscore_times": 1.138453483581543
              }
            },
            {
              "translated_text": "Input zuwa wannan aikin shine wani igiyar rubutu da ke dauke da rukuni masu yawa na kowane nau'in baka. Burinka shine\n    raba wadannan rukuni zuwa igiyoyi daban-daban kuma dawo da jerin wadannan.\n    Rukuni daban-daban suna daidaitacce (kowace bude baka tana da rufewa daidai) kuma ba a cikin juna suke ba\n    Yi watsi da duk wani sarari a cikin igiyar rubutu.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The input to this task is a string containing multiple groups of any type of parentheses. Your goal is to\n    separate these groups into different strings and return a list of them.\n    The different groups are balanced (each opening parenthesis has a matching closing one) and are not nested within each other.\n    Ignore any spaces in the string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.911593590008992,
              "time_taken": {
                "translation_time": 4.72988748550415,
                "back_translation_time": 1.5318729877471924,
                "bertscore_times": 1.1684398651123047
              }
            }
          ],
          "best_translation": "Input zuwa wannan aikin shine wani rubutu wanda ke dauke da kungiyoyi masu yawa na kowane irin kowane. Manufarka ita ce\n    raba wadannan kungiyoyi zuwa rubutattun rubutu daban-daban kuma dawo da jerin wadannan.\n    Kungiyoyi daban-daban suna daidaita (kowace buɗe kowane an rufe shi da kyau) kuma ba a haɗa su cikin juna ba\n    Yi watsi da duk wani sarari a cikin rubutun shigarwa.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "The input to this task is a string containing multiple groups of parentheses of any kind. Your goal is to\n    separate these groups into different substrings and return a list of these.\n    Different groups are balanced (each open parenthesis is properly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9262384093723133
        },
        "best_score": 0.9588157781658453
      },
      "Oromo": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Galmee seensa ta'e kun sirriiwwan bal'inaan walitti qabaman kan qabuu dha. Kaayyoon kee garee sana\n    sirriiwwan walitti qabaman gara sirriiwwan adda addaa fi tarree sana deebisuudha.\n    Gareewwan adda addaa wal-qixxooftuu dha (sirriiwwan banaman sirrii ta'anii cufamu) fi walitti hin qabamne\n    Iddoo hunda sirriiwwan keessa jiru hin yaadatin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This input list contains groups of parentheses. Your goal is to separate these\n    groups of parentheses into distinct groups and return that list.\n    The distinct groups are balanced (opening and closing parentheses are matched) and not nested.\n    Do not consider any spaces within the parentheses.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9053550070014482,
              "time_taken": {
                "translation_time": 2.7200357913970947,
                "back_translation_time": 2.4726948738098145,
                "bertscore_times": 1.2886288166046143
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Galii hojii kanaaf jecha tokko kan qabuu gareewwan maxxantoota walitti makaman hedduu of keessaa qabu dha.\n    Kaayyoon kee gareewwan sana gara jechoota adda addaa addaan baasuu fi galmee isaanii deebisuu dha.\n    Gareewwan adda addaa wal-qixa dha (maxxantoonni banaman hundi sirriitti cufaman) fi walitti hin makaman.\n    Bakka bu'aa galchaa keessa jiru kamiyyuu hin yaadin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This function takes a string containing multiple concatenated groups of parentheses.\n    Your goal is to separate these groups into distinct strings and return them as a list.\n    The different groups are balanced (all opened parentheses are properly closed) and do not overlap.\n    Do not consider any whitespace present in the input.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9213628280394309,
              "time_taken": {
                "translation_time": 2.889482021331787,
                "back_translation_time": 1.658806562423706,
                "bertscore_times": 1.1052639484405518
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Galmee ittiin seensifamu kun sarara qubee kan gareewwan qubeewwan walitti makaman heddu of keessaa qabu dha.\n    Kaayyoon kee gareewwan sana gara sararoota adda addaatti qooduu fi tarree sana deebisuu dha.\n    Gareewwan adda addaa wal-qixxee dha (qubee baname tokkoon tokkoon sirriitti cufame) fi walitti hin makaman.\n    Boqonnaawwan sarara qubee seensifamee keessatti argaman hin ilaalin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This input string contains multiple groups of parentheses combined together.\n    Your goal is to separate these groups into different strings and return that list.\n    The different groups are balanced (each open parenthesis is correctly closed) and do not overlap.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9226449871490111,
              "time_taken": {
                "translation_time": 2.989388942718506,
                "back_translation_time": 1.5646071434020996,
                "bertscore_times": 1.0665805339813232
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Galmee ittiin seensifamu kun sarara qubee kan gareewwan qubeewwan walitti makaman heddu of keessaa qabu dha.\n    Kaayyoon kee gareewwan sana gara sararoota adda addaatti qooduu fi tarree sana deebisuu dha.\n    Gareewwan adda addaa wal-qixxee dha (qubee baname tokkoon tokkoon sirriitti cufame) fi walitti hin makaman.\n    Boqonnaawwan sarara qubee seensifamee keessatti argaman hin ilaalin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This input string contains multiple groups of parentheses combined together.\n    Your goal is to separate these groups into different strings and return that list.\n    The different groups are balanced (each open parenthesis is correctly closed) and do not overlap.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_score": 0.9226449871490111
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Barreessi hojii fuunshinii python 'def separate_paren_groups(paren_string: str) -> List[str]:' rakkoo armaan gadii furuuf:\n  Galchii hojii kanaaf kennamee jecha gareewwan baay’ee of keessaa qabu kan parenthesis walitti makaman. Kaayyoon kee gareewwan sana gara jechoota adda addaa taasisuu fi tarree isaanii deebisuu dha.\n  Gareewwan adda addaa wal madaalanii jiru (hunda banuuf cufamu sirrii ta'ee jira) fi wal keessa hin makaman.\n  Iddoo hunda jecha galchaa keessatti dhiisi.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input given to this function is a string containing multiple groups of parentheses combined together. Your goal is to separate those groups into distinct strings and return their list.\n  The different groups are balanced (each opening has a correct closing) and do not overlap.\n  Ignore spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']",
              "score": 0.9082679215393248,
              "time_taken": {
                "translation_time": 2.8699350357055664,
                "back_translation_time": 2.6835811138153076,
                "bertscore_times": 1.116173267364502
              }
            },
            {
              "translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  Galchaa hojii kanaaf kenname jecha (string) kan gareewwan qubeewwan walitti hidhatanii (nested parentheses) hedduu qabu dha. Kaayyoon kee gareewwan sana gara jechoota (strings) adda addaa taasisuu fi tarree isaanii deebisuu dha.\n    Gareewwan adda addaa wal-qixxee (balansii) dha (qubee banamee tokko qubee cufameen sirriitti cufama) fi walitti hin hidhaman\n    Iddoo (spaces) kamiyyuu jecha galchaa keessa jiru hin ilaalin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input provided for this task is a string containing multiple groups of nested parentheses. Your goal is to convert these groups into separate strings and return them as a list.\n    The separate groups are balanced (each opened parenthesis is properly closed by a closed parenthesis) and are not nested within each other.\n    Ignore any spaces present in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9312818333771701,
              "time_taken": {
                "translation_time": 4.759359359741211,
                "back_translation_time": 2.14512300491333,
                "bertscore_times": 1.0011298656463623
              }
            },
            {
              "translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  Galmee gara fuula kanaatti darbuu kun sirrii dha: barruu kan qabu gareewwan baay'ee of keessaa qabuu. Kaayyoon kee gareewwan kana gara barruu adda addaa taasisuu dhaan deebisuu dha.\n    Gareewwan adda addaa wal-qixxee dha (bakka hundaatti cufamee jira) fi wal keessa hin galu.\n    Iddoo hunda barruu keessa jiru dhiisi.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  Passing a document to this page is correct: it contains many groups with text. Your goal is to return these groups by converting them into separate texts.\n    The different groups are balanced (closed everywhere) and do not overlap.\n    Ignore all spaces in the text.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.8787931592975577,
              "time_taken": {
                "translation_time": 2.2049543857574463,
                "back_translation_time": 1.6700503826141357,
                "bertscore_times": 1.118689775466919
              }
            }
          ],
          "best_translation": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  Galchaa hojii kanaaf kenname jecha (string) kan gareewwan qubeewwan walitti hidhatanii (nested parentheses) hedduu qabu dha. Kaayyoon kee gareewwan sana gara jechoota (strings) adda addaa taasisuu fi tarree isaanii deebisuu dha.\n    Gareewwan adda addaa wal-qixxee (balansii) dha (qubee banamee tokko qubee cufameen sirriitti cufama) fi walitti hin hidhaman\n    Iddoo (spaces) kamiyyuu jecha galchaa keessa jiru hin ilaalin.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input provided for this task is a string containing multiple groups of nested parentheses. Your goal is to convert these groups into separate strings and return them as a list.\n    The separate groups are balanced (each opened parenthesis is properly closed by a closed parenthesis) and are not nested within each other.\n    Ignore any spaces present in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9312818333771701
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Input gara hojii kanaatti kennamee jecha keessatti gareewwan baay'ee of keessaa qabu kan parenthesis walitti maxxanfaman. Kaayyoon kee gareewwan sana gara jechawwan adda addaa keessatti adda baasuu fi tarree isaanii deebisuu dha.\nGareewwan adda addaa wal madaalanii jiru (qulqullinni banuu fi cufamuu eeyyamameera) fi wal keessa hin seenne.\nIddoo duwwaa kamiyyuu jecha keessatti argamu hin ilaalin.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "The input given to this task contains multiple groups enclosed in parentheses concatenated within a string. Your goal is to separate these groups into distinct strings and return their list.\nThe different groups are balanced (the opening and closing are allowed) and do not overlap.\nDo not consider any spaces found in the string.\n\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.7887055417614705,
              "time_taken": {
                "translation_time": 3.0636234283447266,
                "back_translation_time": 2.2678029537200928,
                "bertscore_times": 1.0536911487579346
              }
            },
            {
              "translated_text": "Input gara fuunshinii kanaatti kennamee jecha kan gareewwan baay’ee of keessaa qabu kan parenthesis walitti maxxanfaman. Kaayyoon kee gareewwan sana gara jechawwan adda addaa taasisuu fi tarree isaanii deebisuudha.\nGareewwan adda addaa wal qixa ta’anii jiru (parenthesis baname tokko tokkoon cufameera) fi wal keessa hin jiran.\nIddoo hunda jecha keessatti argamu hin ilaalin.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "The input given to this function is a string containing multiple groups of parentheses. Your goal is to separate these groups into distinct strings and return their list.\nThe different groups are balanced (each opened parenthesis is closed) and non-overlapping.\nDo not consider spaces in the string.\n\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.8183270918548223,
              "time_taken": {
                "translation_time": 2.464791774749756,
                "back_translation_time": 1.638679027557373,
                "bertscore_times": 1.0744917392730713
              }
            },
            {
              "translated_text": "Inputti hojii kanaa jecha keessaa gareewwan baay’ee of keessaa qabu kan parenthesis walitti makaman. Kaayyoon kee gareewwan sana gara jechoota adda addaa qooduu fi tarree isaanii deebisuu dha.\nGareewwan adda addaa wal madaalu (parenthesis baname hundi sirnaan cufame) fi wal keessa hin makaman.\nIddoo duwwaa kamiyyuu jecha keessa jiru hin ilaalin.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "The input for this task consists of groups of words enclosed in parentheses that are nested together. Your goal is to separate those groups into distinct words and return their list.\nThe different groups are balanced (every opened parenthesis is properly closed) and do not overlap.\nDo not consider any spaces within the words.\n\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.7924254915374919,
              "time_taken": {
                "translation_time": 2.114344835281372,
                "back_translation_time": 1.7767469882965088,
                "bertscore_times": 1.0729591846466064
              }
            }
          ],
          "best_translation": "Input gara fuunshinii kanaatti kennamee jecha kan gareewwan baay’ee of keessaa qabu kan parenthesis walitti maxxanfaman. Kaayyoon kee gareewwan sana gara jechawwan adda addaa taasisuu fi tarree isaanii deebisuudha.\nGareewwan adda addaa wal qixa ta’anii jiru (parenthesis baname tokko tokkoon cufameera) fi wal keessa hin jiran.\nIddoo hunda jecha keessatti argamu hin ilaalin.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
          "best_back_translation": "The input given to this function is a string containing multiple groups of parentheses. Your goal is to separate these groups into distinct strings and return their list.\nThe different groups are balanced (each opened parenthesis is closed) and non-overlapping.\nDo not consider spaces in the string.\n\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
          "best_score": 0.8183270918548223
        },
        "best_score": 0.9312818333771701
      },
      "Khmer": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" អ៊ីនផុតទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមមួយចំនួននៃសញ្ញាក្រចកបើកបិទដែលបានបង្គោល។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃវា។\n    ក្រុមផ្សេងគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនបានបង្គោលនៅក្នុងគ្នាទៀតទេ\n    មិនអើពើចន្លោះណាមួយនៅក្នុងខ្សែអក្សរអ៊ីនផុត។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing several groups of parentheses that are balanced. Your goal is\n    to separate those groups into different strings and return a list of them.\n    Different groups are balanced (each opening parenthesis is correctly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9484794503975518,
              "time_taken": {
                "translation_time": 5.340972185134888,
                "back_translation_time": 4.460383176803589,
                "bertscore_times": 1.0794637203216553
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" អ៊ីនផុតទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលបានដាក់ជាស្រទាប់។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗ និងត្រឡប់ត្រឡប់បញ្ជីនៃក្រុមទាំងនោះ។\n    ក្រុមផ្សេងៗគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនបានដាក់ជាស្រទាប់នៅក្នុងគ្នាទៅវិញទៅមក\n    មិនអើពើនឹងគ្រប់ចន្លោះនៅក្នុងខ្សែអក្សរអ៊ីនផុត។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of parentheses that are layered. Your goal is\n    to separate those groups into different strings and return a list of those groups.\n    The different groups are balanced (each opening parenthesis is properly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9519046326881173,
              "time_taken": {
                "translation_time": 4.550180435180664,
                "back_translation_time": 1.6042323112487793,
                "bertscore_times": 1.2712976932525635
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" អ៊ីនផុតទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលបានដាក់ជាស្រទាប់។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗ និងត្រឡប់ត្រឡប់បញ្ជីនៃក្រុមទាំងនោះ។\n    ក្រុមផ្សេងៗគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនបានដាក់ជាស្រទាប់នៅក្នុងគ្នាទៅវិញទៅមក\n    មិនអើពើនឹងគ្រប់ចន្លោះនៅក្នុងខ្សែអក្សរអ៊ីនផុត។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of parentheses that are layered. Your goal is\n    to separate those groups into different strings and return a list of those groups.\n    The different groups are balanced (each opening parenthesis is properly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_score": 0.9519046326881173
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "សរសេរមុខងារ python 'def separate_paren_groups(paren_string: str) -> List[str]:' ដើម្បីដោះស្រាយបញ្ហាខាងក្រោម៖\n ការបញ្ចូលទៅមុខងារនេះគឺជាសរសេរដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលជាស្រទាប់។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាសរសេរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃសរសេរទាំងនោះវិញ។\n    ក្រុមដែលបំបែកគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនជាស្រទាប់នៅក្នុងគ្នាទៀតទេ\n    មិនអើពើចន្លោះណាមួយនៅក្នុងសរសេរបញ្ចូល។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input to this function is a string containing multiple groups of nested parentheses. Your goal is\n    to separate those groups into different strings and return a list of those strings.\n    The separated groups are balanced (each opening parenthesis is correctly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9570672349215952,
              "time_taken": {
                "translation_time": 4.401699066162109,
                "back_translation_time": 1.7842273712158203,
                "bertscore_times": 1.152846336364746
              }
            }
          ],
          "best_translation": "សរសេរមុខងារ python 'def separate_paren_groups(paren_string: str) -> List[str]:' ដើម្បីដោះស្រាយបញ្ហាខាងក្រោម៖\n ការបញ្ចូលទៅមុខងារនេះគឺជាសរសេរដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលជាស្រទាប់។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាសរសេរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃសរសេរទាំងនោះវិញ។\n    ក្រុមដែលបំបែកគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនជាស្រទាប់នៅក្នុងគ្នាទៀតទេ\n    មិនអើពើចន្លោះណាមួយនៅក្នុងសរសេរបញ្ចូល។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n The input to this function is a string containing multiple groups of nested parentheses. Your goal is\n    to separate those groups into different strings and return a list of those strings.\n    The separated groups are balanced (each opening parenthesis is correctly closed) and are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9570672349215952
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Input ទៅក្នុងមុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលជាប់គ្នា។ គោលដៅរបស់អ្នកគឺបំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃក្រុមទាំងនោះវិញ។ ក្រុមដែលបំបែកគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនជាប់គ្នានៅក្នុងគ្នាទៀតទេ។ មិនអើពើចន្លោះណាមួយនៅក្នុងខ្សែអក្សរបញ្ចូល។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Input to this function is a string containing multiple groups of parentheses that are adjacent. Your goal is to separate those groups into different strings and return a list of those groups. The separated groups are balanced (each opening parenthesis is correctly closed) and not nested within each other. Ignore any spaces in the input string.\n```python\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "score": 0.8426052860679546,
              "time_taken": {
                "translation_time": 3.761861801147461,
                "back_translation_time": 1.8171470165252686,
                "bertscore_times": 1.621051549911499
              }
            },
            {
              "translated_text": "Input ទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលស្ថិតនៅក្នុងគ្នា។ គោលដៅរបស់អ្នកគឺបំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃក្រុមទាំងនោះវិញ។ ក្រុមដែលបំបែកគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទត្រឹមត្រូវ) ហើយមិនស្ថិតនៅក្នុងគ្នាទេ។ មិនអើពើចន្លោះណាមួយនៅក្នុងខ្សែអក្សរបញ្ចូលទេ។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Input to this function is a string containing multiple groups of parentheses that are nested within each other. Your goal is to separate those groups into distinct strings and return a list of those groups. The separated groups are balanced (each opening parenthesis is correctly closed) and are not nested within each other. Ignore any spaces in the input string.\n    \n```python\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "score": 0.8761648820957041,
              "time_taken": {
                "translation_time": 4.07765531539917,
                "back_translation_time": 1.4904582500457764,
                "bertscore_times": 1.2642261981964111
              }
            },
            {
              "translated_text": " Input ទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលជ្រៀតជ្រែកគ្នា។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃក្រុមទាំងនោះវិញ។\n    ក្រុមផ្សេងៗគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទដោយត្រឹមត្រូវ) ហើយមិនជ្រៀតជ្រែកគ្នាទៅវិញទៅមកទេ។\n    មិនអើពើនឹងគ្រប់ចន្លោះក្នុងខ្សែអក្សរបញ្ចូល។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into different strings and return a list of those groups.\n    The different groups are balanced (each opening parenthesis is correctly closed) and do not overlap with each other.\n    Ignore all spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9410971536560091,
              "time_taken": {
                "translation_time": 4.811405658721924,
                "back_translation_time": 1.549772024154663,
                "bertscore_times": 1.0135650634765625
              }
            }
          ],
          "best_translation": " Input ទៅកាន់មុខងារនេះគឺជាខ្សែអក្សរមួយដែលមានក្រុមច្រើននៃសញ្ញាក្រចកបើកបិទដែលជ្រៀតជ្រែកគ្នា។ គោលដៅរបស់អ្នកគឺ\n    បំបែកក្រុមទាំងនោះជាខ្សែអក្សរផ្សេងៗគ្នា ហើយត្រឡប់បញ្ជីនៃក្រុមទាំងនោះវិញ។\n    ក្រុមផ្សេងៗគ្នាគឺមានតុល្យភាព (សញ្ញាក្រចកបើកនីមួយៗត្រូវបានបិទដោយត្រឹមត្រូវ) ហើយមិនជ្រៀតជ្រែកគ្នាទៅវិញទៅមកទេ។\n    មិនអើពើនឹងគ្រប់ចន្លោះក្នុងខ្សែអក្សរបញ្ចូល។\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into different strings and return a list of those groups.\n    The different groups are balanced (each opening parenthesis is correctly closed) and do not overlap with each other.\n    Ignore all spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9410971536560091
        },
        "best_score": 0.9570672349215952
      },
      "Tibetan": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" འདི་ནི་དོན་ཚན་འདིའི་ནང་བེད་སྤྱོད་ཡོད་པའི་སྒྲོམ་ཚུ་འདི་ནི་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛིན་ཚུ་སྒྲོམ་ཚུ་གི་སྒྲོམ་འཛི",
              "back_translated_text": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This function separates the groups of parentheses in the given string and returns a list of these groups. \"\"\"\n    result = []\n    current_group = \"\"\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            if balance == 0 and current_group:\n                result.append(current_group)\n                current_group = \"\"\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        current_group += char\n\n        if balance == 0 and current_group:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result",
              "score": 0.6226857007937471,
              "time_taken": {
                "translation_time": 133.73651671409607,
                "back_translation_time": 3.4498515129089355,
                "bertscore_times": 1.250861406326294
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" འདི་ནི་ལས་འགན་འདི་ནང་ཡོད་པའི་སྒྲོམ་གྱི་ནང་དུ་འཛུལ་བའི་སྒྲོམ་ཚུ་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་ཡོད་རེད། ཁྱོད་ཀྱི་དོན་ནི་སྒྲོམ་ཚུ་དེ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས།\n    སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས། སྒྲོམ་ཚུ་སྔོན་འགྲོ་བར་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་སྤྲོད་དགོས།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "```python\nfrom typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This function takes a string containing groups of parentheses and returns a list of those groups.\n    The goal is to provide the groups of parentheses in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    The groups of parentheses should be provided in the order they appear.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n```",
              "score": 0.7224235767620334,
              "time_taken": {
                "translation_time": 11.752177715301514,
                "back_translation_time": 2.442085027694702,
                "bertscore_times": 1.2642700672149658
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" འདི་ནི་ལས་རྩོམ་འདིའི་ནང་ལས་སྒྲིག་སྟངས་འདི་ནི་མང་པོ་ཡོད་པའི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འ",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This is a function that separates groups of parentheses from a given string. \"\"\"\n",
              "score": 0.7633207776955928,
              "time_taken": {
                "translation_time": 115.57749104499817,
                "back_translation_time": 3.0794317722320557,
                "bertscore_times": 1.173715591430664
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" འདི་ནི་ལས་རྩོམ་འདིའི་ནང་ལས་སྒྲིག་སྟངས་འདི་ནི་མང་པོ་ཡོད་པའི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འདི་ནི་སྒྲིག་སྟངས་འ",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" This is a function that separates groups of parentheses from a given string. \"\"\"\n",
          "best_score": 0.7633207776955928
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Python གྱི་ལས་ཀ་འབད་བར་སྒྲིགས་ཡོད་པའི་ 'def separate_paren_groups(paren_string: str) -> List[str]:' གི་ལས་ཀ་འབད་དོན་འདི་བརྗོད་དགོས།:\n ལས་ཀ་འདི་ནི་ཚིག་ཡིག་གཅིག་གི་ནང་ལུས་ནང་འཇུག་ཡོད་པའི་སྒྲོམ་ཚུ་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་ཡིན། ཁྱོད་ཀྱི་དོན་ནི་སྒྲོམ་ཚུ་དེ་རིམ་བཞིན་སྒྲིགས་ཡོད་པའི་ཚིག་ཡིག་དེ་རིམ་བཞིན་བཏོན་ནས་ཐོ་བཀོད་འདི་ལུ་ལོག་སྤྲོད་དགོས།\n སྒྲོམ་ཚུ་འདི་རིམ་བཞིན་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་ཡིན་པས། (སྒྲོམ་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་རེ་རེ་གིས་རིམ་བཞིན་སྒྲིགས་ཡོད་པས།) དང་གཅིག་གི་ནང་ལུས་ནང་མིན་འཇུག་ཡོད།\n ནང་འདྲེན་ཚིག་ཡིག་གི་སྟེང་ལུ་ས་སྒོར་ཚུ་གང་རུང་གཏན་འཁེལ་མ་བྱིན།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The task of the Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' needs to be described:\n This function is for extracting nested groups of parentheses that are contained within a single string. Your goal is to extract these groups of parentheses in the order they appear and return them in a list.\n These groups are nested groups of parentheses in order. (Each nested group of parentheses is ordered) and does not include any non-parenthesis content.\n Do not include any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.830127722792105,
              "time_taken": {
                "translation_time": 22.06883716583252,
                "back_translation_time": 3.344698190689087,
                "bertscore_times": 1.186896562576294
              }
            },
            {
              "translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' འདི་གི་འབྲི་རྩོམ་བྱེད་དགོས། འདི་གི་འགྲེལ་བཤད་ནི་འོག་གི་འབྲི་རྩོམ་ལ་སྒྲིག་བཀོད་བྱེད་དགོས།\n འདི་གི་ནང་འཁོད་ལས་འགྲེལ་བཤད་སྦེ་བཀོད་ཡོད་མི་ནི་སྒྲིག་བཀོད་བྱེད་དགོས། འདི་ནི་སྒྲིག་བཀོད་བྱེད་དགོས་ཡིན།\n    འདི་གི་ནང་འཁོད་ལས་འགྲེལ་བཤད་སྦེ་བཀོད་ཡོད་མི་ནི་སྒྲིག་བཀོད་བྱེད་དགོས།\n    འདི་ནི་སྒྲིག་བཀོད་བྱེད་དགོས་ཡིན།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a python function 'def separate_paren_groups(paren_string: str) -> List[str]:' This needs to be written. The explanation for this should be organized in the writing below.\n The explanation from within this should be organized. This needs to be organized.\n    The explanation from within this should be organized.\n    This needs to be organized.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.746697599737164,
              "time_taken": {
                "translation_time": 6.404280662536621,
                "back_translation_time": 1.8284978866577148,
                "bertscore_times": 0.9910707473754883
              }
            },
            {
              "translated_text": "Python གྱི་ལས་སྤྱོད་ཞིབ་འཇུག 'def separate_paren_groups(paren_string: str) -> List[str]:' འདི་བྱེད་ནས་འོག་གི་འབྲི་བ་འབད།:\n འདི་གི་ནང་འདྲེན་རྣམ་པ་ནི་མང་པོའི་སྒྲིག་འཛུགས་ཀྱི་སྒྲིག་འཛུགས་གྲངས་མང་པོ་ཡོད་པའི་སྡེབ་སྒྲིག་སྒྲོམ་གྱི་ཚིག་ཡིག་རེད། ཁྱོད་ཀྱི་དགོས་མཁོ་ཡིན་པ་ནི་\n    སྡེབ་སྒྲིག་དེ་ཚང་མ་རེ་རེར་སྡེབ་སྒྲིག་ཚིག་ཡིག་དང་ལས་འབྲེལ་གྱི་སྣོན་བཤེར་གྱི་ཐོ་བཀོད་ལེན་འཐུང་བྱེད།\n    སྡེབ་སྒྲིག་ཚང་མ་འདི་རང་འབྲེལ་གྱི་སྒྲིག་འཛུགས་ཡོད་པའི་སྒྲིག་འཛུགས་སྒྲོམ་གྱི་སྦེ་མི་འདུག\n    ནང་འདྲེན་ཚིག་ཡིག་ནང་གི་སྟེང་གི་ས་སྟོང་གང་རུང་གི་རྣམ་པ་རྟོགས་མི་འདུག།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The task in Python involves using the function 'def separate_paren_groups(paren_string: str) -> List[str]:' to perform the following writing task:\n\nThe function is a method for extracting multiple structured sequences of grouped parentheses. What you need to do is:\n- Collect each complete group of parentheses as a separate string and store it in a list.\n- Ensure that all these groups are properly nested and do not overlap with each other.\n- There should not be any empty spaces detected at the top level of the input string.\n\nExample:\n```python\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "score": 0.7554715009282371,
              "time_taken": {
                "translation_time": 12.027528524398804,
                "back_translation_time": 3.241025447845459,
                "bertscore_times": 1.0128967761993408
              }
            }
          ],
          "best_translation": "Python གྱི་ལས་ཀ་འབད་བར་སྒྲིགས་ཡོད་པའི་ 'def separate_paren_groups(paren_string: str) -> List[str]:' གི་ལས་ཀ་འབད་དོན་འདི་བརྗོད་དགོས།:\n ལས་ཀ་འདི་ནི་ཚིག་ཡིག་གཅིག་གི་ནང་ལུས་ནང་འཇུག་ཡོད་པའི་སྒྲོམ་ཚུ་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་ཡིན། ཁྱོད་ཀྱི་དོན་ནི་སྒྲོམ་ཚུ་དེ་རིམ་བཞིན་སྒྲིགས་ཡོད་པའི་ཚིག་ཡིག་དེ་རིམ་བཞིན་བཏོན་ནས་ཐོ་བཀོད་འདི་ལུ་ལོག་སྤྲོད་དགོས།\n སྒྲོམ་ཚུ་འདི་རིམ་བཞིན་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་ཡིན་པས། (སྒྲོམ་སྒྲིགས་ཡོད་པའི་སྒྲོམ་ཚུ་རེ་རེ་གིས་རིམ་བཞིན་སྒྲིགས་ཡོད་པས།) དང་གཅིག་གི་ནང་ལུས་ནང་མིན་འཇུག་ཡོད།\n ནང་འདྲེན་ཚིག་ཡིག་གི་སྟེང་ལུ་ས་སྒོར་ཚུ་གང་རུང་གཏན་འཁེལ་མ་བྱིན།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "The task of the Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' needs to be described:\n This function is for extracting nested groups of parentheses that are contained within a single string. Your goal is to extract these groups of parentheses in the order they appear and return them in a list.\n These groups are nested groups of parentheses in order. (Each nested group of parentheses is ordered) and does not include any non-parenthesis content.\n Do not include any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.830127722792105
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Input འདི་ནི་སྒྲོམ་གྱི་ཚོགས་མང་པོ་ཡོད་པའི་སྒྲོམ་འཛིན་ནང་འདུག དེ་གི་དོན་ནི་ཚོགས་དེ་རེ་རེ་སྒྲོམ་གྱི་ཚོགས་དང་བྲལ་བ་བྱས་ནས་ཐོ་བཀོད་དེ་ལོག་སྟེ་སླར་ཕྱིན་ནི་ཡིན།\n    ཚོགས་དང་བྲལ་བ་ནི་མཉམ་སྒྲིག་ཡོད་དེ་གང་རུང་སྒྲོམ་གྱི་སྒྲོམ་གཏོང་བ་ཡོད་པ་དང་མཉམ་སྒྲིག་མ་བྱས་པ་ཡིན།\n    ནང་འདྲེན་སྒྲོམ་ནང་གི་ས་སྟོང་སྒྲིག་མ་བྱེད།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "The input consists of a string containing multiple groups of parentheses. The task is to separate each group of parentheses and return them as a list.\n\n    The separation should maintain the order and include any complete group of parentheses without mixing them.\n    Do not include empty spaces in the output list.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.8327484520394793,
              "time_taken": {
                "translation_time": 7.316925287246704,
                "back_translation_time": 1.9316205978393555,
                "bertscore_times": 1.2126426696777344
              }
            },
            {
              "translated_text": "Input འདི་ནི་སྒྲོམ་ཚུ་གི་ཚོགས་སྒྲིག་སྟེ་གཞི་སྒྲིག་བྱེད་ཡོད་པའི་སྒྲོམ་ཚུ་གི་རྒྱུ་ཡིག་ཞིག་ཡིན། ཁྱོད་ཀྱི་དོན་ནི་དེ་ཚུ་གི་ཚོགས་སྒྲིག་གཅིག་གཅིག་གི་རྒྱུ་ཡིག་ཚུ་དང་བྱེད་རྒྱུ་ཡིན། ཚོགས་སྒྲིག་གཅིག་གཅིག་ནི་བདེན་པའི་སྒྲོམ་སྒྲིག་དང་གཞི་སྒྲིག་བྱེད་མི་མིན་འདུག ནང་བཅུད་གྱི་རྒྱུ་ཡིག་ནང་ས་མེད་རྣམས་གང་ཡང་གོ་སྟོན་བྱེད་མི་འདུག\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "Input: This is a string consisting of groups of parentheses that are properly nested. Your task is to separate and identify each group of parentheses. Each group must be a valid and properly nested group. The content within the parentheses does not matter and should not be considered.\n```python\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n```",
              "score": 0.7078133190850122,
              "time_taken": {
                "translation_time": 7.270144462585449,
                "back_translation_time": 1.7654836177825928,
                "bertscore_times": 1.0126359462738037
              }
            },
            {
              "translated_text": "Input འདི་ནི་ཚིག་ཡིག་གཅིག་ཡིན་པ་དང་དེ་ནང་ནི་མང་པོའི་ཚོགས་པ་གཉེར་སྒྲིག་ཡོད་པའི་སྒོ་རྒྱན་ཚུ་ཡོད་རེད། ཁྱོད་ཀྱི་དགོས་ཡིག་ནི་དེ་ཚོའི་ཚོགས་པ་རེ་རེར་སྡེ་རིམ་བྱས་ནས་ཚིག་ཡིག་རེ་རེར་བཅད་ནས་ཐོག་མར་སླེབས་མི་ཐོ་བཀོད་ལ་ལོག་སྤྲོད་བྱེད་དགོས་རེད། རེ་རེའི་ཚོགས་པ་ཚུ་འཁྲིལ་བ་མེད་པ་དང་། (སྒོ་རྒྱན་སྔ་མ་རེ་རེར་རྒྱབ་མ་ཡོད་པ་དང་མཉམ་སྦྲེལ་མེད་པ་ཡིན་པ་དང་། ནང་དུ་མཉམ་སྦྲེལ་མེད་པ་ཡིན། ནང་བསྒྲིགས་ཚིག་ཡིག་ནང་གི་ས་སྟོང་ཚུ་རྣམས་རྟོགས་མི་ཚུགས།\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "Input is a single string that contains multiple groups of parentheses. Your task is to sort these groups and return them in a list, ensuring each group is distinct and not nested with others (each opening parenthesis has a matching closing parenthesis, and they are not interleaved with others). Spaces inside the grouped strings should not be considered.\n\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.7492946919691952,
              "time_taken": {
                "translation_time": 10.884179592132568,
                "back_translation_time": 2.1882219314575195,
                "bertscore_times": 1.047945499420166
              }
            }
          ],
          "best_translation": "Input འདི་ནི་སྒྲོམ་གྱི་ཚོགས་མང་པོ་ཡོད་པའི་སྒྲོམ་འཛིན་ནང་འདུག དེ་གི་དོན་ནི་ཚོགས་དེ་རེ་རེ་སྒྲོམ་གྱི་ཚོགས་དང་བྲལ་བ་བྱས་ནས་ཐོ་བཀོད་དེ་ལོག་སྟེ་སླར་ཕྱིན་ནི་ཡིན།\n    ཚོགས་དང་བྲལ་བ་ནི་མཉམ་སྒྲིག་ཡོད་དེ་གང་རུང་སྒྲོམ་གྱི་སྒྲོམ་གཏོང་བ་ཡོད་པ་དང་མཉམ་སྒྲིག་མ་བྱས་པ་ཡིན།\n    ནང་འདྲེན་སྒྲོམ་ནང་གི་ས་སྟོང་སྒྲིག་མ་བྱེད།\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "The input consists of a string containing multiple groups of parentheses. The task is to separate each group of parentheses and return them as a list.\n\n    The separation should maintain the order and include any complete group of parentheses without mixing them.\n    Do not include empty spaces in the output list.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.8327484520394793
        },
        "best_score": 0.8327484520394793
      },
      "Yoruba": {
        "prompt": {
          "iterations": [
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Ẹ̀bùn sí iṣẹ́ àkọsílẹ̀ yìí jẹ́ okun kan tí ó ní ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀rún ẹgbẹ̀r",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The task for this documentation is a string that contains thousands of parentheses...",
              "score": 0.7458977151927365,
              "time_taken": {
                "translation_time": 134.6353006362915,
                "back_translation_time": 1.971015453338623,
                "bertscore_times": 1.1076219081878662
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Iwọle si iṣẹ́ àṣàyàn yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ́ ọ̀pọ̀lọpọ̀ ti àwọn àgbáta àgbáta tí ó wọ́n sínú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ́ wọ̀nyí sí àwọn okun àtọ̀tọ̀ àti láti da àtòkọ àwọn wọ̀nyí padà.\n    Àwọn ẹgbẹ́ àtọ̀tọ̀ jẹ́ ìbámu (ẹ̀kọ́kùn kọọkan ní ìparí tó yẹ) àti pé wọn kò wọ sínú ara wọn\n    Fojú kọ àwọn ààlà kankan nínú okun ìwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of parentheses nested within each other. Your task is to\n    separate these groups into distinct strings and return a list of them.\n    The distinct groups are balanced (each parenthesis has a matching end) and do not nest within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.940367782896849,
              "time_taken": {
                "translation_time": 3.5687036514282227,
                "back_translation_time": 1.588155746459961,
                "bertscore_times": 1.0877270698547363
              }
            },
            {
              "translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Ẹ̀bùn sí iṣẹ́ àṣàyàn yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ́ ọ̀pọ̀lọpọ̀ ti àwọn àgbáta àgbáta tó wọ́pọ̀. Ète rẹ ni láti\n    yà àwọn ẹgbẹ́ wọ̀nyí sí àwọn okun lọ́tọ̀ọ̀tọ̀ kí o sì padà ìkànsí àwọn náà.\n    Àwọn ẹgbẹ́ tó yà jẹ́ àwọn tó dọgba (ẹ̀kọ́kùn kọọkan ni a ti pa ní ìtọ́nú) àti pé wọn kò wọ́pọ̀ nínú ara wọn\n    Fara mọ́ àwọn ààyè kankan nínú okun ìbùkún.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "back_translated_text": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The task of this function is a string that contains multiple groups of matching parentheses. Its goal is to\n    separate these groups into distinct strings and return them as a list.\n    The separated groups are those that are balanced (each parenthesis is properly closed) and they do not overlap\n    with each other. Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
              "score": 0.9242288658073833,
              "time_taken": {
                "translation_time": 3.4699461460113525,
                "back_translation_time": 2.0572922229766846,
                "bertscore_times": 1.4196276664733887
              }
            }
          ],
          "best_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Iwọle si iṣẹ́ àṣàyàn yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ́ ọ̀pọ̀lọpọ̀ ti àwọn àgbáta àgbáta tí ó wọ́n sínú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ́ wọ̀nyí sí àwọn okun àtọ̀tọ̀ àti láti da àtòkọ àwọn wọ̀nyí padà.\n    Àwọn ẹgbẹ́ àtọ̀tọ̀ jẹ́ ìbámu (ẹ̀kọ́kùn kọọkan ní ìparí tó yẹ) àti pé wọn kò wọ sínú ara wọn\n    Fojú kọ àwọn ààlà kankan nínú okun ìwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_back_translation": "from typing import List\n \n \ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" The input to this function is a string containing multiple groups of parentheses nested within each other. Your task is to\n    separate these groups into distinct strings and return a list of them.\n    The distinct groups are balanced (each parenthesis has a matching end) and do not nest within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"",
          "best_score": 0.940367782896849
        },
        "instruction": {
          "iterations": [
            {
              "translated_text": "Kọ iṣẹ́ python kan 'def separate_paren_groups(paren_string: str) -> List[str]:' lati yanju iṣoro atẹle:\n  Ẹ̀bùn sí iṣẹ́ yìí ni okun kan tí ó ní ọ̀pọ̀ ẹgbẹ́ ti àwọn agbára àgbáwọlé tí ó wọ́pọ̀. Ète rẹ ni láti\n    yà wọ́n sí àwọn okun lọ́tọ̀ọ̀tọ̀ kí ó sì da àtòkọ àwọn náà padà.\n    Àwọn ẹgbẹ́ tí ó yà lọ́tọ̀ jẹ́ ìwòye (ẹ̀kọ́kó kọọkan ti ṣí ni a ti pa dáadáa) àti pé kò wọ̀pọ̀ ní ara wọn\n    Ṣe àṣeyọrí àwọn ààyè kankan nínú okun ìbòwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input to this function is a string that contains multiple groups of balanced parentheses. Your goal is to\n    separate them into individual strings and return them as a list.\n    The separated groups are balanced (each opening has a matching closing) and do not overlap with each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9359514350049193,
              "time_taken": {
                "translation_time": 5.653084993362427,
                "back_translation_time": 1.6000075340270996,
                "bertscore_times": 1.0438041687011719
              }
            },
            {
              "translated_text": "Kọ iṣẹ́ python kan 'def separate_paren_groups(paren_string: str) -> List[str]:' lati yanju iṣoro atẹle yii:\n  Ẹ̀bùn sí iṣẹ́ yii jẹ́ okun kan tí ó ní ọ̀pọ̀ ẹgbẹ́ àwọn àkọsílẹ̀ tó wọ inú ara wọn. Ète rẹ ni láti\n  yà àwọn ẹgbẹ́ wọ̀nyí sí àwọn okun lọ́tọ̀ọ̀tọ̀ kí o sì da àtòkọ àwọn náà padà.\n  Àwọn ẹgbẹ́ tó yà lọ́tọ̀ jẹ́ ẹni tó dọ́gba (ẹ̀kọ́kọ́ ìṣí sílè ni a ti pa mọ́ dáadáa) àti pé kò wọ inú ara wọn\n  Fara mọ́ àwọn ààyè kankan nínú okun ìbùkún.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input to this function is a string containing multiple groups of parentheses nested within each other. Your goal is to\n  separate these groups into individual strings and return them as a list.\n  The separated groups are balanced (each opening parenthesis is properly closed) and do not nest within each other.\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']",
              "score": 0.9321274029092356,
              "time_taken": {
                "translation_time": 4.803378582000732,
                "back_translation_time": 1.729163646697998,
                "bertscore_times": 1.060753345489502
              }
            },
            {
              "translated_text": "Kọ iṣẹ́ python kan 'def separate_paren_groups(paren_string: str) -> List[str]:' lati yanju iṣoro atẹle:\n  Ẹ̀bùn sí iṣẹ́ yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ̀ ọ̀pọ̀lọpọ̀ ti àwọn àpamọ́ tí ó wà nínú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ̀ wọ̀nyí sí àwọn okun lọ́tọ̀lọ́tọ̀ kí o sì padà fíìlì àwọn wọ̀nyí.\n    Àwọn ẹgbẹ̀ tí a yà lọ́tọ̀ jẹ́ ìwòye (kò sí àpamọ́ tí ó ṣí tí kò tiì ti) àti pé wọn kò wà nínú ara wọn\n    Ṣe àìgbàgbọ́ àwọn ààyè kankan nínú okun ẹ̀bùn.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input to this function is a string that contains multiple groups of parentheses that are nested within each other. Your task is to\n    separate these groups into individual strings and return these.\n    The separated groups are complete (no open parentheses that are not closed) and they are not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9332158973973068,
              "time_taken": {
                "translation_time": 3.8091349601745605,
                "back_translation_time": 1.6025643348693848,
                "bertscore_times": 1.092937707901001
              }
            }
          ],
          "best_translation": "Kọ iṣẹ́ python kan 'def separate_paren_groups(paren_string: str) -> List[str]:' lati yanju iṣoro atẹle:\n  Ẹ̀bùn sí iṣẹ́ yìí ni okun kan tí ó ní ọ̀pọ̀ ẹgbẹ́ ti àwọn agbára àgbáwọlé tí ó wọ́pọ̀. Ète rẹ ni láti\n    yà wọ́n sí àwọn okun lọ́tọ̀ọ̀tọ̀ kí ó sì da àtòkọ àwọn náà padà.\n    Àwọn ẹgbẹ́ tí ó yà lọ́tọ̀ jẹ́ ìwòye (ẹ̀kọ́kó kọọkan ti ṣí ni a ti pa dáadáa) àti pé kò wọ̀pọ̀ ní ara wọn\n    Ṣe àṣeyọrí àwọn ààyè kankan nínú okun ìbòwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Write a Python function 'def separate_paren_groups(paren_string: str) -> List[str]:' to solve the following problem:\n  The input to this function is a string that contains multiple groups of balanced parentheses. Your goal is to\n    separate them into individual strings and return them as a list.\n    The separated groups are balanced (each opening has a matching closing) and do not overlap with each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9359514350049193
        },
        "docstring": {
          "iterations": [
            {
              "translated_text": "Input si iṣẹ́ àṣàyàn yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ́ púpọ̀ ti àwọn àpótí tó wọ ara wọn. Ète rẹ ni láti\nya àwọn ẹgbẹ́ wọ̀nyí sí àwọn okun oníyàtọ̀ àti padà àwọn akojọ àwọn wọ̀nyí.\nÀwọn ẹgbẹ́ oníyàtọ̀ jẹ́ ìwòye (ìlàkòókò kọọkan ní ìparí tó yẹ) àti kò wọ ara wọn\nṢàkíyèsí àwọn ààyè kankan nínú okun ìwọlé.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "back_translated_text": "Input to this task is a string containing multiple nested groups of parentheses. Your goal is to\nseparate these groups into distinct strings and return a list of these.\nDistinct groups are well-formed (each open parenthesis has a matching close) and do not overlap.\nNote any spaces within the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']",
              "score": 0.8251583879193741,
              "time_taken": {
                "translation_time": 5.78092622756958,
                "back_translation_time": 1.521242380142212,
                "bertscore_times": 1.0161571502685547
              }
            },
            {
              "translated_text": "Input si iṣẹ́-ṣiṣe yìí jẹ́ okun ti ó ní àwọn ẹgbẹ̀ ọ̀pọ̀lọpọ̀ ti àwọn àpòòtọ̀ tó wọ inú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ̀ wọ̀nyí sí àwọn okun lọ́tọ̀ọ̀tọ̀ àti padà àwọn akojọ wọ̀nyí.\n    Àwọn ẹgbẹ̀ lọ́tọ̀ọ̀tọ̀ jẹ́ ìwòye (ẹ̀kọ́kùn kọọkan ti ṣí ni a ti pa mọ́ dáadáa) àti kò wọ inú ara wọn\n    Ṣàkíyèsí àwọn ààyè kankan nínú okun ìwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "back_translated_text": "Input for this task is a string containing multiple groups of parentheses nested within each other. Your goal is to\n    separate these groups into individual strings and return these lists.\n    The individual groups are balanced (each open parenthesis is properly closed) and do not overlap\n    Note any spaces within the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
              "score": 0.9276252466926989,
              "time_taken": {
                "translation_time": 3.0339765548706055,
                "back_translation_time": 2.1902050971984863,
                "bertscore_times": 1.1200835704803467
              }
            },
            {
              "translated_text": "Input si iṣẹ́-ṣiṣe yìí jẹ́ okun kan tí ó ní àwọn ẹgbẹ̀ ọ̀pọ̀ ti àwọn àpèjọ àgbáwọlé tí ó wà nínú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ̀ wọ̀nyí sí àwọn okun lọ́tọ̀ọ̀tọ̀ àti láti da àtòkọ àwọn wọ̀nyí padà.\n    Àwọn ẹgbẹ̀ lọ́tọ̀ọ̀tọ̀ jẹ́ ìwòye (ẹ̀kọ́kòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkòkò",
              "back_translated_text": "The input to this task is a string that contains multiple groups of nested parentheses within themselves. Your task is to\n    separate these groups into individual strings and return a list of these.\n    The individual groups are represented by (",
              "score": 0.30395326123573274,
              "time_taken": {
                "translation_time": 114.66659665107727,
                "back_translation_time": 100.30707240104675,
                "bertscore_times": 1.8466010093688965
              }
            }
          ],
          "best_translation": "Input si iṣẹ́-ṣiṣe yìí jẹ́ okun ti ó ní àwọn ẹgbẹ̀ ọ̀pọ̀lọpọ̀ ti àwọn àpòòtọ̀ tó wọ inú ara wọn. Ètò rẹ ni láti\n    yà àwọn ẹgbẹ̀ wọ̀nyí sí àwọn okun lọ́tọ̀ọ̀tọ̀ àti padà àwọn akojọ wọ̀nyí.\n    Àwọn ẹgbẹ̀ lọ́tọ̀ọ̀tọ̀ jẹ́ ìwòye (ẹ̀kọ́kùn kọọkan ti ṣí ni a ti pa mọ́ dáadáa) àti kò wọ inú ara wọn\n    Ṣàkíyèsí àwọn ààyè kankan nínú okun ìwọlé.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_back_translation": "Input for this task is a string containing multiple groups of parentheses nested within each other. Your goal is to\n    separate these groups into individual strings and return these lists.\n    The individual groups are balanced (each open parenthesis is properly closed) and do not overlap\n    Note any spaces within the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']",
          "best_score": 0.9276252466926989
        },
        "best_score": 0.940367782896849
      }
    }
  }
]