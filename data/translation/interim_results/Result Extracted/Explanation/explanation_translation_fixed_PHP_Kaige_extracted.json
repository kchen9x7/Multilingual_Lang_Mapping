[
  {
    "task_id": "PHP/1",
    "prompt": {
      "en": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Check if in given list of numbers, any two numbers are closer to each other than\n    * given threshold.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "sq": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Kontrolloni nëse në listën e dhënë të numrave, ndonjë dy numra janë më afër njëri-tjetrit sesa\n    * pragu i dhënë.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hy": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Ստուգել, արդյոք տրված թվերի ցուցակում որևէ երկու թիվ ավելի մոտ են միմյանց, քան\n    * տրված շեմը։\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "bn": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * প্রদত্ত সংখ্যার তালিকায়, কোনো দুটি সংখ্যা একে অপরের থেকে প্রদত্ত সীমার চেয়ে কাছাকাছি আছে কিনা তা পরীক্ষা করুন।\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "bg": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Проверете дали в дадения списък с числа, някои две числа са по-близо едно до друго от\n    * даден праг.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "zh": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * 检查在给定的数字列表中，是否有任意两个数字之间的距离小于给定的阈值。\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "fr": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Vérifiez si dans une liste de nombres donnée, deux nombres quelconques sont plus proches l'un de l'autre que\n    * le seuil donné.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "de": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Überprüfen, ob in der gegebenen Liste von Zahlen zwei Zahlen näher beieinander liegen als\n    * der gegebene Schwellenwert.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "ha": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Duba idan a cikin jerin lambobi da aka bayar, ko akwai kowanne lambobi biyu da ke kusa da juna fiye da\n    * iyaka da aka bayar.\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hi": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * जाँचें कि दिए गए संख्याओं की सूची में, क्या कोई दो संख्याएँ एक-दूसरे के\n    * जितना निकट हैं उतना दिया गया सीमा।\n*/\nfunction has_close_elements($numbers, $threshold) ",
      "hu": "<?php\nassert_options(ASSERT_ACTIVE, 1);\nassert_options(ASSERT_BAIL, 1);\n/**\n    * Ellenőrzi, hogy a megadott számok listájában van-e bármely két szám, amely közelebb van egymáshoz, mint a megadott küszöbérték.\n*/\nfunction has_close_elements($numbers, $threshold) "
    },
    "prompt_bertscore": {
      "sq": "0.9924593948447725",
      "hy": "0.9788281863158723",
      "bn": "0.9694927570376136",
      "bg": "0.992359682393493",
      "zh": "0.9372947722718582",
      "fr": "0.9900752343812108",
      "de": "0.9872602446211843",
      "ha": "0.9762843270259585",
      "hi": "0.9784319187057077",
      "hu": "0.9623597414242697"
    },
    "canonical_solution": "{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "instruction": {
      "en": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nՏվյալ PHP կոդի համար տրամադրեք հակիրճ բնութագրություն (docstring) հայերեն լեզվով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nBa da takaitaccen bayani a cikin yaren dabi'a (docstring) na lambar PHP a cikin Hausa, ba tare da wuce haruffa 500 ba.",
      "hi": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function has_close_elements($numbers, $threshold)\n{\n    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        for ($j = 0; $j < $count; $j++) {\n            if ($i != $j) {\n                $distance = abs($numbers[$i] - $numbers[$j]);\n                if ($distance < $threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8674116384642587",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9176373166127405",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "// Test cases\nfunction test_has_close_elements() {\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) != true){\n        exit(1);\n    }\n\n    if (has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) != false){\n        exit(1);\n    }\n    if (has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) != true){\n        exit(1);\n    }\n    if (has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) != false){\n        exit(1);\n    }\n}\n\ntest_has_close_elements();\n\n?>",
    "entry_point": "has_close_elements",
    "signature": "function has_close_elements($numbers, $threshold)",
    "docstring": {
      "en": "Check if in given list of numbers, any two numbers are closer to each other than\ngiven threshold.",
      "sq": "Kontrolloni nëse në listën e dhënë të numrave, ndonjë dy numra janë më afër njëri-tjetrit sesa pragu i dhënë.",
      "hy": "Ստուգեք, արդյոք տրված թվերի ցուցակում որևէ երկու թիվ ավելի մոտ է միմյանց, քան տրված շեմը:",
      "bn": "প্রদত্ত সংখ্যার তালিকায়, কোনো দুটি সংখ্যা প্রদত্ত সীমার চেয়ে কাছাকাছি আছে কিনা তা পরীক্ষা করুন।",
      "bg": "Проверете дали в даден списък от числа, някои две числа са по-близо едно до друго от дадения праг.",
      "zh": "检查给定数字列表中是否有任意两个数字之间的距离小于给定的阈值。",
      "fr": "Vérifiez si, dans la liste donnée de nombres, deux nombres quelconques sont plus proches l'un de l'autre que le seuil donné.",
      "de": "Überprüfen Sie, ob in der gegebenen Liste von Zahlen zwei beliebige Zahlen näher beieinander liegen als der angegebene Schwellenwert.",
      "ha": "Duba idan a cikin jerin lambobin da aka bayar, ko akwai wasu lambobi guda biyu da suke kusa da juna fiye da ƙayyadadden tazara.",
      "hi": "दिए गए संख्याओं की सूची में जाँच करें कि क्या कोई दो संख्याएँ दी गई सीमा से अधिक निकट हैं।",
      "hu": "Ellenőrizze, hogy a megadott számok listájában bármely két szám közelebb van-e egymáshoz, mint a megadott küszöbérték."
    },
    "docstring_bertscore": {
      "sq": "0.9754973534562983",
      "hy": "0.913825599600681",
      "bn": "0.8478737582945239",
      "bg": "0.9707691558661438",
      "zh": "0.8307951208723822",
      "fr": "0.9617060488402839",
      "de": "0.9282684118664898",
      "ha": "0.9036424158561653",
      "hi": "0.8477053197314064",
      "hu": "0.9282684118664898"
    }
  },
  {
    "task_id": "PHP/2",
    "prompt": {
      "en": "<?php\n\n\n/**\n    * Determines the outcome of a \"Rock, Paper, Scissors\" game.\n    * In this game, each player selects either rock (0), paper (1), or scissors (2).\n    * The rules are as follows:\n    * - Paper beats rock\n    * - Rock beats scissors\n    * - Scissors beats paper\n    * If both players choose the same item, it's a draw.\n    * Input: Two integers representing the choices of two players.\n    * Output: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "sq": "<?php\n\n\n/**\n    * Përcakton rezultatin e një loje \"Gur, Letër, Gërshërë\".\n    * Në këtë lojë, secili lojtar zgjedh ose gur (0), letër (1), ose gërshërë (2).\n    * Rregullat janë si më poshtë:\n    * - Letra mund gurin\n    * - Guri mund gërshërën\n    * - Gërshëra mund letrën\n    * Nëse të dy lojtarët zgjedhin të njëjtën gjë, është barazim.\n    * Hyrja: Dy numra të plotë që përfaqësojnë zgjedhjet e dy lojtarëve.\n    * Dalja: Kthen 1 nëse lojtari i parë fiton, -1 nëse lojtari i dytë fiton, dhe 0 për barazim.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hy": "<?php\n\n\n/**\n    * Որոշում է \"Քար, Թուղթ, Մկրատ\" խաղի արդյունքը:\n    * Այս խաղում յուրաքանչյուր խաղացող ընտրում է կամ քար (0), կամ թուղթ (1), կամ մկրատ (2):\n    * Կանոններն են հետևյալը.\n    * - Թուղթը հաղթում է քարին\n    * - Քարը հաղթում է մկրատին\n    * - Մկրատը հաղթում է թղթին\n    * Եթե երկու խաղացողներն էլ ընտրում են նույն իրը, դա ոչ-ոքի է:\n    * Մուտք: Երկու ամբողջ թվեր, որոնք ներկայացնում են երկու խաղացողների ընտրությունները:\n    * Ելք: Վերադարձնում է 1, եթե առաջին խաղացողը հաղթում է, -1, եթե երկրորդ խաղացողը հաղթում է, և 0՝ ոչ-ոքիի դեպքում:\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "bn": "<?php\n\n\n/**\n    * \"Rock, Paper, Scissors\" খেলার ফলাফল নির্ধারণ করে।\n    * এই খেলায়, প্রতিটি খেলোয়াড় পাথর (0), কাগজ (1), বা কাঁচি (2) বেছে নেয়।\n    * নিয়মগুলি নিম্নরূপ:\n    * - কাগজ পাথরকে পরাজিত করে\n    * - পাথর কাঁচিকে পরাজিত করে\n    * - কাঁচি কাগজকে পরাজিত করে\n    * যদি উভয় খেলোয়াড় একই বস্তু নির্বাচন করে, তবে এটি ড্র হয়।\n    * ইনপুট: দুই খেলোয়াড়ের পছন্দের প্রতিনিধিত্বকারী দুটি পূর্ণসংখ্যা।\n    * আউটপুট: প্রথম খেলোয়াড় জিতলে 1 ফেরত দেয়, দ্বিতীয় খেলোয়াড় জিতলে -1 ফেরত দেয়, এবং ড্র হলে 0 ফেরত দেয়।\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "bg": "<?php\n\n\n/**\n    * Определя изхода от играта \"Камък, Ножица, Хартия\".\n    * В тази игра всеки играч избира камък (0), хартия (1) или ножица (2).\n    * Правилата са следните:\n    * - Хартия побеждава камък\n    * - Камък побеждава ножица\n    * - Ножица побеждава хартия\n    * Ако и двамата играчи изберат един и същ елемент, това е равенство.\n    * Вход: Две цели числа, представляващи избора на двамата играчи.\n    * Изход: Връща 1, ако първият играч печели, -1 ако вторият играч печели, и 0 за равенство.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "zh": "<?php\n\n\n/**\n    * 确定“石头、剪刀、布”游戏的结果。\n    * 在这个游戏中，每个玩家选择石头 (0)、布 (1) 或剪刀 (2)。\n    * 规则如下：\n    * - 布胜石头\n    * - 石头胜剪刀\n    * - 剪刀胜布\n    * 如果两个玩家选择相同的项目，则为平局。\n    * 输入：两个整数，表示两个玩家的选择。\n    * 输出：如果第一个玩家赢，返回 1；如果第二个玩家赢，返回 -1；平局返回 0。\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "fr": "<?php\n\n\n/**\n    * Détermine le résultat d'un jeu \"Pierre, Papier, Ciseaux\".\n    * Dans ce jeu, chaque joueur choisit soit pierre (0), papier (1), soit ciseaux (2).\n    * Les règles sont les suivantes :\n    * - Le papier bat la pierre\n    * - La pierre bat les ciseaux\n    * - Les ciseaux battent le papier\n    * Si les deux joueurs choisissent le même élément, c'est une égalité.\n    * Entrée : Deux entiers représentant les choix de deux joueurs.\n    * Sortie : Retourne 1 si le premier joueur gagne, -1 si le deuxième joueur gagne, et 0 pour une égalité.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "de": "<?php\n\n\n/**\n    * Bestimmt das Ergebnis eines \"Stein, Papier, Schere\" Spiels.\n    * In diesem Spiel wählt jeder Spieler entweder Stein (0), Papier (1) oder Schere (2).\n    * Die Regeln sind wie folgt:\n    * - Papier schlägt Stein\n    * - Stein schlägt Schere\n    * - Schere schlägt Papier\n    * Wenn beide Spieler dasselbe wählen, ist es ein Unentschieden.\n    * Eingabe: Zwei ganze Zahlen, die die Auswahl der beiden Spieler darstellen.\n    * Ausgabe: Gibt 1 zurück, wenn der erste Spieler gewinnt, -1, wenn der zweite Spieler gewinnt, und 0 für ein Unentschieden.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "ha": "<?php\n\n\n/**\n    * Yana tantance sakamakon wasan \"Dutse, Takarda, Almakashi\".\n    * A cikin wannan wasan, kowanne ɗan wasa yana zaɓar ko dai dutse (0), takarda (1), ko almakashi (2).\n    * Dokokin suna kamar haka:\n    * - Takarda tana doke dutse\n    * - Dutse yana doke almakashi\n    * - Almakashi yana doke takarda\n    * Idan dukkan 'yan wasa sun zaɓi abu ɗaya, wasan ya kasance kunnen doki.\n    * Shigarwa: Lambobi guda biyu da ke wakiltar zaɓin 'yan wasa biyu.\n    * Fitarwa: Yana dawowa da 1 idan ɗan wasa na farko ya ci, -1 idan ɗan wasa na biyu ya ci, da 0 don kunnen doki.\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hi": "<?php\n\n\n/**\n    * \"Rock, Paper, Scissors\" खेल का परिणाम निर्धारित करता है।\n    * इस खेल में, प्रत्येक खिलाड़ी या तो चट्टान (0), कागज (1), या कैंची (2) का चयन करता है।\n    * नियम इस प्रकार हैं:\n    * - कागज चट्टान को हराता है\n    * - चट्टान कैंची को हराता है\n    * - कैंची कागज को हराती है\n    * यदि दोनों खिलाड़ी एक ही वस्तु चुनते हैं, तो यह ड्रॉ होता है।\n    * इनपुट: दो पूर्णांक जो दो खिलाड़ियों के चयन का प्रतिनिधित्व करते हैं।\n    * आउटपुट: 1 लौटाता है यदि पहला खिलाड़ी जीतता है, -1 यदि दूसरा खिलाड़ी जीतता है, और 0 ड्रॉ के लिए।\n*/\n\nfunction determineGameOutcome($player1, $player2) ",
      "hu": "<?php\n\n\n/**\n    * Meghatározza a \"Kő, Papír, Olló\" játék kimenetelét.\n    * Ebben a játékban minden játékos vagy követ (0), papírt (1), vagy ollót (2) választ.\n    * A szabályok a következők:\n    * - A papír legyőzi a követ\n    * - A kő legyőzi az ollót\n    * - Az olló legyőzi a papírt\n    * Ha mindkét játékos ugyanazt az elemet választja, döntetlen az eredmény.\n    * Bemenet: Két egész szám, amelyek a két játékos választásait képviselik.\n    * Kimenet: 1-et ad vissza, ha az első játékos nyer, -1-et, ha a második játékos nyer, és 0-t döntetlen esetén.\n*/\n\nfunction determineGameOutcome($player1, $player2) "
    },
    "prompt_bertscore": {
      "sq": "0.9913097221993427",
      "hy": "0.9890423563998294",
      "bn": "0.9831257532399431",
      "bg": "0.9758280730407214",
      "zh": "0.966648568611575",
      "fr": "0.9869877237384045",
      "de": "0.9744551398470082",
      "ha": "0.9887642738663805",
      "hi": "0.997034051150387",
      "hu": "0.9827974172200925"
    },
    "canonical_solution": "{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}",
    "instruction": {
      "en": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրումը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 знака.",
      "zh": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function determineGameOutcome($player1, $player2)\n{\n    if ($player1 === $player2) {\n        return 0; // Draw\n    } elseif (($player1 === 0 && $player2 === 1) || // Paper beats Rock\n              ($player1 === 1 && $player2 === 2) || // Scissors beats Paper\n              ($player1 === 2 && $player2 === 0)) { // Rock beats Scissors\n        return -1; // Player 2 wins\n    } else {\n        return 1; // Player 1 wins\n    }\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8743148387267452",
      "bg": "0.8358939162203464",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    \n    assert(determineGameOutcome(0, 1) === -1);\n    assert(determineGameOutcome(1, 2) === -1);\n    assert(determineGameOutcome(2, 0) === -1);\n    assert(determineGameOutcome(0, 2) === 1);\n    assert(determineGameOutcome(1, 0) === 1);\n    assert(determineGameOutcome(2, 1) === 1);\n    assert(determineGameOutcome(0, 0) === 0);\n    assert(determineGameOutcome(1, 1) === 0);\n    assert(determineGameOutcome(2, 2) === 0);\n}\nmain();\n// echo \"All test passed!\\n\";\n?>",
    "entry_point": "determineGameOutcome",
    "signature": "function determineGameOutcome($player1, $player2)",
    "docstring": {
      "en": "Determines the outcome of a \"Rock, Paper, Scissors\" game.\nIn this game, each player selects either rock (0), paper (1), or scissors (2).\nThe rules are as follows:\n- Paper beats rock\n- Rock beats scissors\n- Scissors beats paper\nIf both players choose the same item, it's a draw.\nInput: Two integers representing the choices of two players.\nOutput: Returns 1 if the first player wins, -1 if the second player wins, and 0 for a draw.",
      "sq": "Përcakton rezultatin e një loje \"Gur, Letër, Gërshërë\".\nNë këtë lojë, secili lojtar zgjedh ose gurin (0), letrën (1), ose gërshërën (2).\nRregullat janë si më poshtë:\n- Letra mund gurin\n- Guri mund gërshërën\n- Gërshëra mund letrën\nNëse të dy lojtarët zgjedhin të njëjtën gjë, është barazim.\nInput: Dy numra të plotë që përfaqësojnë zgjedhjet e dy lojtarëve.\nOutput: Kthen 1 nëse fiton lojtari i parë, -1 nëse fiton lojtari i dytë, dhe 0 për barazim.",
      "hy": "Վճռում է \"Քար, Թուղթ, Մկրատ\" խաղի արդյունքը։  \nԱյս խաղում յուրաքանչյուր խաղացող ընտրում է կամ քար (0), թուղթ (1), կամ մկրատ (2)։  \nԿանոններն են հետևյալը:  \n- Թուղթը հաղթում է քարին  \n- Քարը հաղթում է մկրատին  \n- Մկրատը հաղթում է թղթին  \nԵթե երկու խաղացողներն էլ ընտրում են նույն առարկան, դա ոչ-ոքի է։  \nՄուտք: Երկու ամբողջ թվեր, որոնք ներկայացնում են երկու խաղացողների ընտրությունները։  \nԵլք: Վերադարձնում է 1, եթե առաջին խաղացողը հաղթում է, -1, եթե երկրորդ խաղացողը հաղթում է, և 0՝ ոչ-ոքիի դեպքում։  ",
      "bn": "\"Rock, Paper, Scissors\" গেমের ফলাফল নির্ধারণ করে। \nএই গেমে, প্রতিটি খেলোয়াড় পাথর (0), কাগজ (1), বা কাঁচি (2) নির্বাচন করে। \nনিয়মগুলি নিম্নরূপ: \n- কাগজ পাথরকে হারায় \n- পাথর কাঁচিকে হারায় \n- কাঁচি কাগজকে হারায় \nযদি উভয় খেলোয়াড় একই আইটেম নির্বাচন করে, তবে এটি একটি ড্র হয়। \nইনপুট: দুটি পূর্ণসংখ্যা যা দুই খেলোয়াড়ের পছন্দকে উপস্থাপন করে। \nআউটপুট: প্রথম খেলোয়াড় জিতলে 1, দ্বিতীয় খেলোয়াড় জিতলে -1, এবং ড্র হলে 0 প্রদান করে।",
      "bg": "Определя изхода от играта \"Камък, Ножица, Хартия\".\nВ тази игра всеки играч избира или камък (0), хартия (1), или ножица (2).\nПравилата са следните:\n- Хартия побеждава камък\n- Камък побеждава ножица\n- Ножица побеждава хартия\nАко и двамата играчи изберат един и същ елемент, това е равенство.\nВход: Две цели числа, представляващи избора на двамата играчи.\nИзход: Връща 1, ако първият играч печели, -1, ако вторият играч печели, и 0 за равенство.",
      "zh": "确定“石头、剪刀、布”游戏的结果。  \n在这个游戏中，每个玩家选择石头 (0)、布 (1) 或剪刀 (2)。  \n规则如下：  \n- 布胜石头  \n- 石头胜剪刀  \n- 剪刀胜布  \n如果两个玩家选择相同的物品，则为平局。  \n输入：两个整数，代表两个玩家的选择。  \n输出：如果第一个玩家获胜，返回 1；如果第二个玩家获胜，返回 -1；平局返回 0。",
      "fr": "Détermine le résultat d'un jeu de \"Pierre, Papier, Ciseaux\".  \nDans ce jeu, chaque joueur choisit soit pierre (0), papier (1), soit ciseaux (2).  \nLes règles sont les suivantes :  \n- Le papier bat la pierre  \n- La pierre bat les ciseaux  \n- Les ciseaux battent le papier  \nSi les deux joueurs choisissent le même objet, c'est une égalité.  \nEntrée : Deux entiers représentant les choix de deux joueurs.  \nSortie : Renvoie 1 si le premier joueur gagne, -1 si le deuxième joueur gagne, et 0 pour une égalité.",
      "de": "Bestimmt das Ergebnis eines \"Stein, Papier, Schere\" Spiels. In diesem Spiel wählt jeder Spieler entweder Stein (0), Papier (1) oder Schere (2). Die Regeln sind wie folgt: \n- Papier schlägt Stein \n- Stein schlägt Schere \n- Schere schlägt Papier \nWenn beide Spieler dasselbe wählen, ist es ein Unentschieden. \nEingabe: Zwei ganze Zahlen, die die Auswahl der beiden Spieler darstellen. \nAusgabe: Gibt 1 zurück, wenn der erste Spieler gewinnt, -1, wenn der zweite Spieler gewinnt, und 0 bei einem Unentschieden.",
      "ha": "Yana tantance sakamakon wasan \"Rock, Paper, Scissors\".\nA cikin wannan wasan, kowane ɗan wasa yana zaɓar dutse (0), takarda (1), ko almakashi (2).  \nDokokin suna kamar haka:  \n- Takarda tana doke dutse  \n- Dutse yana doke almakashi  \n- Almakashi yana doke takarda  \nIdan duka 'yan wasan biyu suka zaɓi abu ɗaya, wasan ya tashi kunnen doki.  \nInput: Lambobi guda biyu da ke wakiltar zaɓin 'yan wasa biyu.  \nOutput: Yana dawowa da 1 idan ɗan wasa na farko ya ci, -1 idan ɗan wasa na biyu ya ci, da 0 idan wasan ya tashi kunnen doki.  ",
      "hi": "\"Rock, Paper, Scissors\" खेल का परिणाम निर्धारित करता है।  \nइस खेल में, प्रत्येक खिलाड़ी चट्टान (0), कागज (1), या कैंची (2) में से एक का चयन करता है।  \nनियम इस प्रकार हैं:  \n- कागज चट्टान को हराता है  \n- चट्टान कैंची को हराता है  \n- कैंची कागज को हराती है  \nयदि दोनों खिलाड़ी एक ही वस्तु चुनते हैं, तो यह ड्रॉ होता है।  \nइनपुट: दो पूर्णांक जो दो खिलाड़ियों की पसंद को दर्शाते हैं।  \nआउटपुट: 1 लौटाता है यदि पहला खिलाड़ी जीतता है, -1 यदि दूसरा खिलाड़ी जीतता है, और ड्रॉ के लिए 0।  ",
      "hu": "Meghatározza a \"Kő, Papír, Olló\" játék kimenetelét.  \nEbben a játékban minden játékos kiválasztja a következők egyikét: kő (0), papír (1) vagy olló (2).  \nA szabályok a következők:  \n- A papír üti a követ  \n- A kő üti az ollót  \n- Az olló üti a papírt  \nHa mindkét játékos ugyanazt az elemet választja, döntetlen az eredmény.  \nBemenet: Két egész szám, amelyek a két játékos választásait képviselik.  \nKimenet: 1-et ad vissza, ha az első játékos nyer, -1-et, ha a második játékos nyer, és 0-t döntetlen esetén.  "
    },
    "docstring_bertscore": {
      "sq": "0.9968773317797506",
      "hy": "0.9802464072364614",
      "bn": "0.9673306653400489",
      "bg": "0.9820225601036754",
      "zh": "0.967519364202032",
      "fr": "0.9790864058112176",
      "de": "0.9685848175659031",
      "ha": "0.985408214948415",
      "hi": "0.9896652612747547",
      "hu": "0.9706207789715108"
    }
  },
  {
    "task_id": "PHP/3",
    "prompt": {
      "en": "<?php\n\n/**\n    * Removes all asterisks (*) from a string except those at the beginning.\n    * This function takes a string that may contain alphabetic characters and asterisks.\n    * It will preserve any asterisks that appear at the start of the string but remove all others.\n    * For example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\n    * Input: A single string.\n    * Output: The modified string with only the leading asterisks retained.\n*/\nfunction removeInnerAsterisks($string) ",
      "sq": "<?php\n\n/**\n    * Heq të gjitha yjet (*) nga një varg përveç atyre në fillim.\n    * Kjo funksion merr një varg që mund të përmbajë karaktere alfabetike dhe yje.\n    * Do të ruajë çdo yll që shfaqet në fillim të vargut, por do të heqë të gjithë të tjerët.\n    * Për shembull, një varg si \"***Hello*World**\" do të transformohej në \"***HelloWorld\".\n    * Hyrja: Një varg i vetëm.\n    * Dalja: Vargu i modifikuar me vetëm yjet fillestarë të ruajtur.\n*/\nfunction removeInnerAsterisks($string) ",
      "hy": "<?php\n\n/**\n    * Հեռացնում է բոլոր աստղանիշերը (*) տողից, բացի սկզբում գտնվողներից:\n    * Այս ֆունկցիան ընդունում է տող, որը կարող է պարունակել այբբենական նիշեր և աստղանիշեր:\n    * Այն կպահպանի ցանկացած աստղանիշ, որը հայտնվում է տողի սկզբում, բայց կհեռացնի բոլոր մյուսները:\n    * Օրինակ, \"***Hello*World**\" տողը կվերափոխվի \"***HelloWorld\":\n    * Մուտք: Մեկ տող:\n    * Ելք: Փոփոխված տողը, որտեղ միայն սկզբնական աստղանիշերն են պահպանված:\n*/\nfunction removeInnerAsterisks($string) ",
      "bn": "<?php\n\n/**\n    * একটি স্ট্রিং থেকে সমস্ত তারকা চিহ্ন (*) সরিয়ে দেয় শুধুমাত্র শুরুতে থাকা ছাড়া।\n    * এই ফাংশনটি একটি স্ট্রিং নেয় যা বর্ণমালা অক্ষর এবং তারকা চিহ্ন থাকতে পারে।\n    * এটি স্ট্রিংয়ের শুরুতে উপস্থিত তারকা চিহ্নগুলি সংরক্ষণ করবে কিন্তু অন্য সব সরিয়ে দেবে।\n    * উদাহরণস্বরূপ, \"***Hello*World**\" এর মতো একটি স্ট্রিং \"***HelloWorld\" এ রূপান্তরিত হবে।\n    * ইনপুট: একটি একক স্ট্রিং।\n    * আউটপুট: শুধুমাত্র শুরুর তারকা চিহ্নগুলি সংরক্ষিত সহ পরিবর্তিত স্ট্রিং।\n*/\nfunction removeInnerAsterisks($string) ",
      "bg": "<?php\n\n/**\n    * Премахва всички звездички (*) от низ, с изключение на тези в началото.\n    * Тази функция приема низ, който може да съдържа буквени символи и звездички.\n    * Тя ще запази всички звездички, които се появяват в началото на низа, но ще премахне всички останали.\n    * Например, низ като \"***Hello*World**\" ще бъде трансформиран в \"***HelloWorld\".\n    * Вход: Един низ.\n    * Изход: Модифицираният низ, в който са запазени само водещите звездички.\n*/\nfunction removeInnerAsterisks($string) ",
      "zh": "<?php\n\n/**\n    * 从字符串中移除所有星号 (*)，除了开头的那些。\n    * 此函数接受一个可能包含字母字符和星号的字符串。\n    * 它将保留出现在字符串开头的任何星号，但移除所有其他星号。\n    * 例如，像 \"***Hello*World**\" 这样的字符串将被转换为 \"***HelloWorld\"。\n    * 输入：一个字符串。\n    * 输出：仅保留前导星号的修改后字符串。\n*/\nfunction removeInnerAsterisks($string) ",
      "fr": "<?php\n\n/**\n    * Supprime tous les astérisques (*) d'une chaîne sauf ceux au début.\n    * Cette fonction prend une chaîne qui peut contenir des caractères alphabétiques et des astérisques.\n    * Elle conservera tous les astérisques qui apparaissent au début de la chaîne mais supprimera tous les autres.\n    * Par exemple, une chaîne comme \"***Hello*World**\" serait transformée en \"***HelloWorld\".\n    * Entrée : Une seule chaîne.\n    * Sortie : La chaîne modifiée avec uniquement les astérisques de début conservés.\n*/\nfunction removeInnerAsterisks($string) ",
      "de": "<?php\n\n/**\n    * Entfernt alle Sternchen (*) aus einem String, außer denen am Anfang.\n    * Diese Funktion nimmt einen String, der alphabetische Zeichen und Sternchen enthalten kann.\n    * Sie wird alle Sternchen, die am Anfang des Strings erscheinen, beibehalten, aber alle anderen entfernen.\n    * Zum Beispiel würde ein String wie \"***Hello*World**\" in \"***HelloWorld\" umgewandelt werden.\n    * Eingabe: Ein einzelner String.\n    * Ausgabe: Der modifizierte String, bei dem nur die führenden Sternchen erhalten bleiben.\n*/\nfunction removeInnerAsterisks($string) ",
      "ha": "<?php\n\n/**\n    * Yana cire dukkan taurari (*) daga cikin wani igiyar rubutu sai dai wadanda suke a farkon.\n    * Wannan aikin yana karɓar wani igiyar rubutu wanda zai iya ƙunsar haruffa da taurari.\n    * Zai adana duk wani taurari da ya bayyana a farkon igiyar rubutu amma ya cire duk sauran.\n    * Alal misali, wani igiyar rubutu kamar \"***Hello*World**\" za a canza shi zuwa \"***HelloWorld\".\n    * Shigarwa: Wani igiyar rubutu guda ɗaya.\n    * Fitarwa: Igiyar rubutu da aka gyara tare da taurari na farkon kawai da aka adana.\n*/\nfunction removeInnerAsterisks($string) ",
      "hi": "<?php\n\n/**\n    * एक स्ट्रिंग से सभी तारांकन चिह्न (*) हटाता है सिवाय उनके जो शुरुआत में हैं।\n    * यह फ़ंक्शन एक स्ट्रिंग लेता है जिसमें वर्णमाला के अक्षर और तारांकन चिह्न हो सकते हैं।\n    * यह किसी भी तारांकन चिह्न को संरक्षित करेगा जो स्ट्रिंग की शुरुआत में दिखाई देते हैं लेकिन अन्य सभी को हटा देगा।\n    * उदाहरण के लिए, \"***Hello*World**\" जैसी स्ट्रिंग को \"***HelloWorld\" में परिवर्तित किया जाएगा।\n    * इनपुट: एकल स्ट्रिंग।\n    * आउटपुट: संशोधित स्ट्रिंग जिसमें केवल अग्रणी तारांकन चिह्न संरक्षित होते हैं।\n*/\nfunction removeInnerAsterisks($string) ",
      "hu": "<?php\n\n/**\n    * Eltávolítja az összes csillagot (*) egy karakterláncból, kivéve azokat, amelyek az elején vannak.\n    * Ez a függvény egy olyan karakterláncot vesz, amely tartalmazhat betűket és csillagokat.\n    * Megőrzi azokat a csillagokat, amelyek a karakterlánc elején jelennek meg, de eltávolítja az összes többit.\n    * Például egy \"***Hello*World**\" karakterlánc \"***HelloWorld\" formára alakulna át.\n    * Bemenet: Egyetlen karakterlánc.\n    * Kimenet: A módosított karakterlánc, amely csak a kezdő csillagokat tartalmazza.\n*/\nfunction removeInnerAsterisks($string) "
    },
    "prompt_bertscore": {
      "sq": "0.9863121818125048",
      "hy": "0.9769497388024254",
      "bn": "0.9720101984868498",
      "bg": "0.9745365783032325",
      "zh": "0.9601954647925136",
      "fr": "0.9873551899433191",
      "de": "0.9820118340630994",
      "ha": "0.9699299425062714",
      "hi": "0.9864164627625481",
      "hu": "0.9559711924790446"
    },
    "canonical_solution": "{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}",
    "instruction": {
      "en": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nՏվեք PHP կոդի համառոտ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, সর্বাধিক ৫০০ অক্ষর ব্যবহার করে।",
      "bg": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nBa da takaitaccen bayani a cikin harshen Hausa game da lambar PHP ta amfani da haruffa 500 kacal.",
      "hi": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function removeInnerAsterisks($string)\n{\n    $result = '';\n    $leadingAsterisk = true;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] != '*' || $leadingAsterisk) {\n            $result .= $string[$i];\n        }\n        if ($string[$i] != '*' && $leadingAsterisk) {\n            $leadingAsterisk = false;\n        }\n    }\n    return $result;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9136390856728892",
      "bn": "0.897725018174755",
      "bg": "0.8313258612505074",
      "zh": "0.8531680524706279",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8373896495227405",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    assert(removeInnerAsterisks(\"***Hello*World**\") === \"***HelloWorld\");\n    assert(removeInnerAsterisks(\"****\") === \"****\");\n    assert(removeInnerAsterisks(\"abc*def**ghi\") === \"abcdefghi\");\n    assert(removeInnerAsterisks(\"*a*b*c*\") === \"*abc\");\n    assert(removeInnerAsterisks(\"\") === \"\");\n    \n}\n\nmain();\n?>",
    "entry_point": "removeInnerAsterisks",
    "signature": "function removeInnerAsterisks($string)",
    "docstring": {
      "en": "Removes all asterisks (*) from a string except those at the beginning.\nThis function takes a string that may contain alphabetic characters and asterisks.\nIt will preserve any asterisks that appear at the start of the string but remove all others.\nFor example, a string like \"***Hello*World**\" would be transformed to \"***HelloWorld\".\nInput: A single string.\nOutput: The modified string with only the leading asterisks retained.",
      "sq": "Heq të gjitha yjet (*) nga një varg përveç atyre në fillim.  \nKjo funksion merr një varg që mund të përmbajë karaktere alfabetike dhe yje.  \nDo të ruajë çdo yll që shfaqet në fillim të vargut, por do të heqë të gjithë të tjerët.  \nPër shembull, një varg si \"***Hello*World**\" do të transformohej në \"***HelloWorld\".  \nHyrja: Një varg i vetëm.  \nDalja: Vargu i modifikuar me vetëm yjet kryesore të ruajtura.",
      "hy": "Հեռացնում է բոլոր աստղանիշերը (*) տողից, բացի սկզբում գտնվողներից։  \nԱյս ֆունկցիան ընդունում է տող, որը կարող է պարունակել այբբենական նիշեր և աստղանիշեր։  \nԱյն կպահպանի ցանկացած աստղանիշ, որը հայտնվում է տողի սկզբում, բայց կհեռացնի բոլոր մյուսները։  \nՕրինակ, \"***Hello*World**\" տողը կվերափոխվի \"***HelloWorld\"։  \nՄուտք: Միայն մեկ տող։  \nԵլք: Փոփոխված տող, որտեղ միայն սկզբնական աստղանիշերն են պահպանված։  ",
      "bn": "একটি স্ট্রিং থেকে সমস্ত তারকা চিহ্ন (*) সরিয়ে দেয় শুধুমাত্র শুরুতে থাকা ছাড়া।\nএই ফাংশনটি এমন একটি স্ট্রিং গ্রহণ করে যা বর্ণমালা অক্ষর এবং অ্যাস্টেরিক্স থাকতে পারে।\nএটি স্ট্রিংয়ের শুরুতে উপস্থিত যে কোনও অ্যাস্টেরিক্স সংরক্ষণ করবে কিন্তু অন্য সব সরিয়ে দেবে।\nউদাহরণস্বরূপ, \"***Hello*World**\" এর মতো একটি স্ট্রিং \"***HelloWorld\" এ রূপান্তরিত হবে।\nInput: একটি একক স্ট্রিং।\nOutput: শুধুমাত্র প্রারম্ভিক অ্যাস্টেরিক্স সংরক্ষিত অবস্থায় সংশোধিত স্ট্রিং।",
      "bg": "Премахва всички звездички (*) от низ, с изключение на тези в началото.\nТази функция приема низ, който може да съдържа буквени символи и звездички.\nТя ще запази всички звездички, които се появяват в началото на низа, но ще премахне всички останали.\nНапример, низ като \"***Hello*World**\" ще бъде трансформиран в \"***HelloWorld\".\nВход: Един низ.\nИзход: Модифицираният низ с запазени само водещите звездички.",
      "zh": "移除字符串中除开头以外的所有星号（*）。\n此函数接受一个可能包含字母字符和星号的字符串。\n它将保留出现在字符串开头的任何星号，但会移除所有其他星号。\n例如，像 \"***Hello*World**\" 这样的字符串将被转换为 \"***HelloWorld\"。\n输入：一个字符串。\n输出：仅保留前导星号的修改后字符串。",
      "fr": "Supprime tous les astérisques (*) d'une chaîne sauf ceux au début.  \nCette fonction prend une chaîne qui peut contenir des caractères alphabétiques et des astérisques.  \nElle conservera tous les astérisques qui apparaissent au début de la chaîne mais supprimera tous les autres.  \nPar exemple, une chaîne comme \"***Hello*World**\" serait transformée en \"***HelloWorld\".  \nEntrée : Une seule chaîne.  \nSortie : La chaîne modifiée avec uniquement les astérisques initiaux conservés.",
      "de": "Entfernt alle Sternchen (*) aus einem String, außer denen am Anfang.  \nDiese Funktion nimmt einen String, der alphabetische Zeichen und Sternchen enthalten kann.  \nSie bewahrt alle Sternchen, die am Anfang des Strings erscheinen, entfernt jedoch alle anderen.  \nZum Beispiel würde ein String wie \"***Hello*World**\" in \"***HelloWorld\" umgewandelt.  \nEingabe: Ein einzelner String.  \nAusgabe: Der modifizierte String, bei dem nur die führenden Sternchen beibehalten werden.",
      "ha": "Yana cire dukkan taurari (*) daga cikin kirtani sai dai wadanda suke a farkon.\nWannan aikin yana ɗaukar jere wanda zai iya ƙunsar haruffan alphabetic da asterisks.\nZai adana duk wani asterisk da ya bayyana a farkon jere amma ya cire duk sauran.\nMisali, wata jere kamar \"***Hello*World**\" za a canza shi zuwa \"***HelloWorld\".\nInput: Wata jere guda.\nOutput: Jeren da aka gyara tare da ajiye asterisks na farko kawai.",
      "hi": "एक स्ट्रिंग से सभी तारांकन चिह्न (*) हटाता है, सिवाय उन तारांकन चिह्नों के जो शुरुआत में होते हैं।\nयह फ़ंक्शन एक स्ट्रिंग लेता है जिसमें वर्णमाला के अक्षर और तारांकन चिह्न हो सकते हैं।  \nयह स्ट्रिंग की शुरुआत में दिखाई देने वाले किसी भी तारांकन चिह्न को संरक्षित करेगा लेकिन सभी अन्य को हटा देगा।  \nउदाहरण के लिए, \"***Hello*World**\" जैसी स्ट्रिंग को \"***HelloWorld\" में बदल दिया जाएगा।  \nInput: एक एकल स्ट्रिंग।  \nOutput: परिवर्तित स्ट्रिंग जिसमें केवल अग्रणी तारांकन चिह्न संरक्षित हैं।  ",
      "hu": "Eltávolítja az összes csillagot (*) egy szövegből, kivéve az elején lévőket.\nEz a függvény egy olyan szöveget vesz be, amely tartalmazhat alfabetikus karaktereket és csillagokat.\nMegőrzi azokat a csillagokat, amelyek a szöveg elején jelennek meg, de eltávolítja az összes többit.\nPéldául egy olyan szöveg, mint \"***Hello*World**\", \"***HelloWorld\" formára alakulna át.\nBemenet: Egyetlen szöveg.\nKimenet: A módosított szöveg, amelyben csak a kezdő csillagok maradnak meg."
    },
    "docstring_bertscore": {
      "sq": "0.9444303700801555",
      "hy": "0.9680534812966348",
      "bn": "0.9748986814878591",
      "bg": "0.9776381917030923",
      "zh": "0.9627498514926223",
      "fr": "0.9801766879727182",
      "de": "0.9794052075727786",
      "ha": "0.9855983042230654",
      "hi": "0.9819083476345803",
      "hu": "0.8738200504475873"
    }
  },
  {
    "task_id": "PHP/4",
    "prompt": {
      "en": "<?php\n\n/**\n * Converts a numerical score to its corresponding letter grade.\n * The grading system is as follows:\n * - A score between 90 and 100 (inclusive) is graded as 'A'.\n * - A score between 80 and 89 (inclusive) is graded as 'B'.\n * - A score between 70 and 79 (inclusive) is graded as 'C'.\n * - A score between 60 and 69 (inclusive) is graded as 'D'.\n * - A score below 60 is graded as 'E'.\n * If the score is outside the range of 0 to 100, an error message is returned.\n * Input: A numeric score.\n * Output: Returns the corresponding letter grade or an error message if the score is out of range.\n */\n \nfunction convertScoreToGrade($score) ",
      "sq": "<?php\n\n/**\n * Konverton një rezultat numerik në notën përkatëse me shkronjë.\n * Sistemi i notimit është si më poshtë:\n * - Një rezultat midis 90 dhe 100 (përfshirë) vlerësohet me 'A'.\n * - Një rezultat midis 80 dhe 89 (përfshirë) vlerësohet me 'B'.\n * - Një rezultat midis 70 dhe 79 (përfshirë) vlerësohet me 'C'.\n * - Një rezultat midis 60 dhe 69 (përfshirë) vlerësohet me 'D'.\n * - Një rezultat nën 60 vlerësohet me 'E'.\n * Nëse rezultati është jashtë intervalit nga 0 në 100, kthehet një mesazh gabimi.\n * Input: Një rezultat numerik.\n * Output: Kthen notën përkatëse me shkronjë ose një mesazh gabimi nëse rezultati është jashtë intervalit.\n */\n \nfunction convertScoreToGrade($score) ",
      "hy": "<?php\n\n/**\n * Վերածում է թվային գնահատականը համապատասխան տառային գնահատականի:\n * Գնահատման համակարգը հետևյալն է.\n * - 90-ից 100 (ներառյալ) միջակայքում գտնվող գնահատականը ստանում է 'A' տառային գնահատական:\n * - 80-ից 89 (ներառյալ) միջակայքում գտնվող գնահատականը ստանում է 'B' տառային գնահատական:\n * - 70-ից 79 (ներառյալ) միջակայքում գտնվող գնահատականը ստանում է 'C' տառային գնահատական:\n * - 60-ից 69 (ներառյալ) միջակայքում գտնվող գնահատականը ստանում է 'D' տառային գնահատական:\n * - 60-ից ցածր գնահատականը ստանում է 'E' տառային գնահատական:\n * Եթե գնահատականը 0-ից 100 միջակայքից դուրս է, վերադարձվում է սխալի հաղորդագրություն:\n * Մուտք: Թվային գնահատական:\n * Ելք: Վերադարձնում է համապատասխան տառային գնահատականը կամ սխալի հաղորդագրություն, եթե գնահատականը միջակայքից դուրս է:\n */\n \nfunction convertScoreToGrade($score) ",
      "bn": "<?php\n\n/**\n * একটি সংখ্যাসূচক স্কোরকে তার সংশ্লিষ্ট অক্ষর গ্রেডে রূপান্তর করে।\n * গ্রেডিং সিস্টেমটি নিম্নরূপ:\n * - 90 এবং 100 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'A' হিসাবে গ্রেড করা হয়।\n * - 80 এবং 89 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'B' হিসাবে গ্রেড করা হয়।\n * - 70 এবং 79 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'C' হিসাবে গ্রেড করা হয়।\n * - 60 এবং 69 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'D' হিসাবে গ্রেড করা হয়।\n * - 60 এর নিচে একটি স্কোর 'E' হিসাবে গ্রেড করা হয়।\n * যদি স্কোরটি 0 থেকে 100 এর পরিসরের বাইরে হয়, তবে একটি ত্রুটির বার্তা ফেরত দেওয়া হয়।\n * ইনপুট: একটি সংখ্যাসূচক স্কোর।\n * আউটপুট: সংশ্লিষ্ট অক্ষর গ্রেড বা একটি ত্রুটির বার্তা ফেরত দেয় যদি স্কোরটি পরিসরের বাইরে হয়।\n */\n \nfunction convertScoreToGrade($score) ",
      "bg": "<?php\n\n/**\n * Преобразува числова оценка в съответната буквена оценка.\n * Системата за оценяване е както следва:\n * - Оценка между 90 и 100 (включително) се оценява с 'A'.\n * - Оценка между 80 и 89 (включително) се оценява с 'B'.\n * - Оценка между 70 и 79 (включително) се оценява с 'C'.\n * - Оценка между 60 и 69 (включително) се оценява с 'D'.\n * - Оценка под 60 се оценява с 'E'.\n * Ако оценката е извън диапазона от 0 до 100, се връща съобщение за грешка.\n * Вход: Числова оценка.\n * Изход: Връща съответната буквена оценка или съобщение за грешка, ако оценката е извън обхвата.\n */\n \nfunction convertScoreToGrade($score) ",
      "zh": "<?php\n\n/**\n * 将数值分数转换为相应的字母等级。\n * 评分系统如下：\n * - 分数在90到100之间（包括90和100）被评为'A'。\n * - 分数在80到89之间（包括80和89）被评为'B'。\n * - 分数在70到79之间（包括70和79）被评为'C'。\n * - 分数在60到69之间（包括60和69）被评为'D'。\n * - 分数低于60被评为'E'。\n * 如果分数不在0到100的范围内，则返回错误信息。\n * 输入：一个数值分数。\n * 输出：返回相应的字母等级或如果分数超出范围则返回错误信息。\n */\n \nfunction convertScoreToGrade($score) ",
      "fr": "<?php\n\n/**\n * Convertit un score numérique en sa note correspondante.\n * Le système de notation est le suivant :\n * - Un score entre 90 et 100 (inclus) est noté 'A'.\n * - Un score entre 80 et 89 (inclus) est noté 'B'.\n * - Un score entre 70 et 79 (inclus) est noté 'C'.\n * - Un score entre 60 et 69 (inclus) est noté 'D'.\n * - Un score inférieur à 60 est noté 'E'.\n * Si le score est en dehors de la plage de 0 à 100, un message d'erreur est retourné.\n * Entrée : Un score numérique.\n * Sortie : Retourne la note correspondante ou un message d'erreur si le score est hors plage.\n */\n \nfunction convertScoreToGrade($score) ",
      "de": "<?php\n\n/**\n * Konvertiert eine numerische Punktzahl in die entsprechende Buchstabennote.\n * Das Bewertungssystem ist wie folgt:\n * - Eine Punktzahl zwischen 90 und 100 (einschließlich) wird mit 'A' bewertet.\n * - Eine Punktzahl zwischen 80 und 89 (einschließlich) wird mit 'B' bewertet.\n * - Eine Punktzahl zwischen 70 und 79 (einschließlich) wird mit 'C' bewertet.\n * - Eine Punktzahl zwischen 60 und 69 (einschließlich) wird mit 'D' bewertet.\n * - Eine Punktzahl unter 60 wird mit 'E' bewertet.\n * Wenn die Punktzahl außerhalb des Bereichs von 0 bis 100 liegt, wird eine Fehlermeldung zurückgegeben.\n * Eingabe: Eine numerische Punktzahl.\n * Ausgabe: Gibt die entsprechende Buchstabennote oder eine Fehlermeldung zurück, wenn die Punktzahl außerhalb des Bereichs liegt.\n */\n \nfunction convertScoreToGrade($score) ",
      "ha": "<?php\n\n/**\n * Yana canza maki zuwa harafin da ya dace.\n * Tsarin maki yana kamar haka:\n * - Maki tsakanin 90 da 100 (ciki har da) ana ba shi matsayin 'A'.\n * - Maki tsakanin 80 da 89 (ciki har da) ana ba shi matsayin 'B'.\n * - Maki tsakanin 70 da 79 (ciki har da) ana ba shi matsayin 'C'.\n * - Maki tsakanin 60 da 69 (ciki har da) ana ba shi matsayin 'D'.\n * - Maki kasa da 60 ana ba shi matsayin 'E'.\n * Idan maki ya wuce tsakanin 0 zuwa 100, ana mayar da saƙon kuskure.\n * Shigarwa: Maki na lambobi.\n * Fitarwa: Yana mayar da harafin da ya dace ko saƙon kuskure idan maki ya fita daga kewayon.\n */\n \nfunction convertScoreToGrade($score) ",
      "hi": "<?php\n\n/**\n * एक संख्यात्मक स्कोर को उसके संबंधित अक्षर ग्रेड में परिवर्तित करता है।\n * ग्रेडिंग प्रणाली निम्नलिखित है:\n * - 90 और 100 (समावेशी) के बीच का स्कोर 'A' के रूप में ग्रेड किया जाता है।\n * - 80 और 89 (समावेशी) के बीच का स्कोर 'B' के रूप में ग्रेड किया जाता है।\n * - 70 और 79 (समावेशी) के बीच का स्कोर 'C' के रूप में ग्रेड किया जाता है।\n * - 60 और 69 (समावेशी) के बीच का स्कोर 'D' के रूप में ग्रेड किया जाता है।\n * - 60 से कम का स्कोर 'E' के रूप में ग्रेड किया जाता है।\n * यदि स्कोर 0 से 100 की सीमा के बाहर है, तो एक त्रुटि संदेश लौटाया जाता है।\n * इनपुट: एक संख्यात्मक स्कोर।\n * आउटपुट: संबंधित अक्षर ग्रेड या एक त्रुटि संदेश लौटाता है यदि स्कोर सीमा से बाहर है।\n */\n \nfunction convertScoreToGrade($score) ",
      "hu": "<?php\n\n/**\n * Egy numerikus pontszám átalakítása a megfelelő betűjegyre.\n * Az osztályozási rendszer a következő:\n * - A 90 és 100 közötti (beleértve) pontszám 'A' minősítést kap.\n * - A 80 és 89 közötti (beleértve) pontszám 'B' minősítést kap.\n * - A 70 és 79 közötti (beleértve) pontszám 'C' minősítést kap.\n * - A 60 és 69 közötti (beleértve) pontszám 'D' minősítést kap.\n * - A 60 alatti pontszám 'E' minősítést kap.\n * Ha a pontszám kívül esik a 0 és 100 közötti tartományon, hibaüzenet kerül visszaadásra.\n * Bemenet: Egy numerikus pontszám.\n * Kimenet: Visszaadja a megfelelő betűjegyet vagy egy hibaüzenetet, ha a pontszám kívül esik a tartományon.\n */\n \nfunction convertScoreToGrade($score) "
    },
    "prompt_bertscore": {
      "sq": "0.9923668330872103",
      "hy": "0.9233098030343349",
      "bn": "0.9990269097633101",
      "bg": "0.9924844222727829",
      "zh": "0.9165110823522727",
      "fr": "0.9776391848549975",
      "de": "0.9930570736613065",
      "ha": "0.9422684770129718",
      "hi": "0.9961936460082285",
      "hu": "0.9424720731535325"
    },
    "canonical_solution": "{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}",
    "instruction": {
      "en": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nՏվեք կարճ բնութագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 знака.",
      "zh": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function convertScoreToGrade($score)\n{\n    if ($score < 0 || $score > 100) {\n        return \"Score is error!\";\n    } elseif ($score >= 90) {\n        return 'A';\n    } elseif ($score >= 80) {\n        return 'B';\n    } elseif ($score >= 70) {\n        return 'C';\n    } elseif ($score >= 60) {\n        return 'D';\n    } else {\n        return 'E';\n    }\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8815644503737565",
      "bn": "0.8743148387267452",
      "bg": "0.8358939162203464",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9120311727384118",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(convertScoreToGrade(95) === 'A');\n    assert(convertScoreToGrade(85) === 'B');\n    assert(convertScoreToGrade(75) === 'C');\n    assert(convertScoreToGrade(65) === 'D');\n    assert(convertScoreToGrade(55) === 'E');\n    assert(convertScoreToGrade(-1) === 'Score is error!');\n    assert(convertScoreToGrade(101) === 'Score is error!');\n    \n}\n\nmain();\n?>",
    "entry_point": "convertScoreToGrade",
    "signature": "function convertScoreToGrade($score)",
    "docstring": {
      "en": "Converts a numerical score to its corresponding letter grade.\nThe grading system is as follows:\n- A score between 90 and 100 (inclusive) is graded as 'A'.\n- A score between 80 and 89 (inclusive) is graded as 'B'.\n- A score between 70 and 79 (inclusive) is graded as 'C'.\n- A score between 60 and 69 (inclusive) is graded as 'D'.\n- A score below 60 is graded as 'E'.\nIf the score is outside the range of 0 to 100, an error message is returned.\nInput: A numeric score.\nOutput: Returns the corresponding letter grade or an error message if the score is out of range.",
      "sq": "Konverton një rezultat numerik në notën përkatëse me shkronjë.\nSistemi i notimit është si më poshtë:\n- Një rezultat midis 90 dhe 100 (përfshirë) vlerësohet si 'A'.\n- Një rezultat midis 80 dhe 89 (përfshirë) vlerësohet si 'B'.\n- Një rezultat midis 70 dhe 79 (përfshirë) vlerësohet si 'C'.\n- Një rezultat midis 60 dhe 69 (përfshirë) vlerësohet si 'D'.\n- Një rezultat nën 60 vlerësohet si 'E'.\nNëse rezultati është jashtë intervalit nga 0 në 100, kthehet një mesazh gabimi.\nInput: Një rezultat numerik.\nOutput: Kthen notën përkatëse me shkronjë ose një mesazh gabimi nëse rezultati është jashtë intervalit.",
      "hy": "Վերածում է թվային գնահատականը համապատասխան տառային գնահատականի:  \nԳնահատման համակարգը հետևյալն է.  \n- 90-ից մինչև 100 (ներառյալ) գնահատականը 'A' է:  \n- 80-ից մինչև 89 (ներառյալ) գնահատականը 'B' է:  \n- 70-ից մինչև 79 (ներառյալ) գնահատականը 'C' է:  \n- 60-ից մինչև 69 (ներառյալ) գնահատականը 'D' է:  \n- 60-ից ցածր գնահատականը 'E' է:  \nԵթե գնահատականը 0-ից մինչև 100 միջակայքից դուրս է, վերադարձվում է սխալի հաղորդագրություն:  \nՄուտք: Թվային գնահատական:  \nԵլք: Վերադարձնում է համապատասխան տառային գնահատականը կամ սխալի հաղորդագրություն, եթե գնահատականը միջակայքից դուրս է:",
      "bn": "সংখ্যাসূচক স্কোরকে তার সংশ্লিষ্ট অক্ষর গ্রেডে রূপান্তর করে। \nগ্রেডিং সিস্টেমটি নিম্নরূপ:\n- 90 থেকে 100 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'A' হিসাবে গ্রেড করা হয়।\n- 80 থেকে 89 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'B' হিসাবে গ্রেড করা হয়।\n- 70 থেকে 79 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'C' হিসাবে গ্রেড করা হয়।\n- 60 থেকে 69 (অন্তর্ভুক্ত) এর মধ্যে একটি স্কোর 'D' হিসাবে গ্রেড করা হয়।\n- 60 এর নিচে একটি স্কোর 'E' হিসাবে গ্রেড করা হয়।\nযদি স্কোরটি 0 থেকে 100 এর পরিসরের বাইরে হয়, তবে একটি ত্রুটি বার্তা ফেরত দেওয়া হয়।\nইনপুট: একটি সংখ্যাসূচক স্কোর।\nআউটপুট: সংশ্লিষ্ট অক্ষর গ্রেড বা একটি ত্রুটি বার্তা ফেরত দেয় যদি স্কোরটি পরিসরের বাইরে হয়।",
      "bg": "Преобразува числова оценка в съответстващата й буквена оценка.\nСистемата за оценяване е както следва:\n- Оценка между 90 и 100 (включително) се оценява с 'A'.\n- Оценка между 80 и 89 (включително) се оценява с 'B'.\n- Оценка между 70 и 79 (включително) се оценява с 'C'.\n- Оценка между 60 и 69 (включително) се оценява с 'D'.\n- Оценка под 60 се оценява с 'E'.\nАко оценката е извън диапазона от 0 до 100, се връща съобщение за грешка.\nВход: Числова оценка.\nИзход: Връща съответстващата буквена оценка или съобщение за грешка, ако оценката е извън диапазона.",
      "zh": "将数值分数转换为其对应的字母等级。  \n评分系统如下：  \n- 分数在90到100之间（包括90和100）被评为 'A'。  \n- 分数在80到89之间（包括80和89）被评为 'B'。  \n- 分数在70到79之间（包括70和79）被评为 'C'。  \n- 分数在60到69之间（包括60和69）被评为 'D'。  \n- 分数低于60被评为 'E'。  \n如果分数不在0到100的范围内，则返回错误信息。  \n输入：一个数值分数。  \n输出：返回对应的字母等级或如果分数超出范围则返回错误信息。",
      "fr": "Convertit un score numérique en sa note correspondante en lettres.\nLe système de notation est le suivant :  \n- Un score entre 90 et 100 (inclus) est noté 'A'.  \n- Un score entre 80 et 89 (inclus) est noté 'B'.  \n- Un score entre 70 et 79 (inclus) est noté 'C'.  \n- Un score entre 60 et 69 (inclus) est noté 'D'.  \n- Un score inférieur à 60 est noté 'E'.  \nSi le score est en dehors de la plage de 0 à 100, un message d'erreur est renvoyé.  \nEntrée : Un score numérique.  \nSortie : Renvoie la note correspondante en lettres ou un message d'erreur si le score est hors de portée.",
      "de": "Konvertiert eine numerische Punktzahl in die entsprechende Buchstabennote.\nDas Bewertungssystem ist wie folgt:\n- Eine Punktzahl zwischen 90 und 100 (einschließlich) wird mit 'A' bewertet.\n- Eine Punktzahl zwischen 80 und 89 (einschließlich) wird mit 'B' bewertet.\n- Eine Punktzahl zwischen 70 und 79 (einschließlich) wird mit 'C' bewertet.\n- Eine Punktzahl zwischen 60 und 69 (einschließlich) wird mit 'D' bewertet.\n- Eine Punktzahl unter 60 wird mit 'E' bewertet.\nWenn die Punktzahl außerhalb des Bereichs von 0 bis 100 liegt, wird eine Fehlermeldung zurückgegeben.\nEingabe: Eine numerische Punktzahl.\nAusgabe: Gibt die entsprechende Buchstabennote oder eine Fehlermeldung zurück, wenn die Punktzahl außerhalb des Bereichs liegt.",
      "ha": "Canza maki na lambobi zuwa harafin da ya dace.\nYana sauya maki na lambobi zuwa harafin daraja da ya dace.  \nThe grading system is as follows:  \nTsarin daraja yana kamar haka:  \n- A score between 90 and 100 (inclusive) is graded as 'A'.  \n- Maki tsakanin 90 da 100 (ciki har) ana ba shi darajar 'A'.  \n- A score between 80 and 89 (inclusive) is graded as 'B'.  \n- Maki tsakanin 80 da 89 (ciki har) ana ba shi darajar 'B'.  \n- A score between 70 and 79 (inclusive) is graded as 'C'.  \n- Maki tsakanin 70 da 79 (ciki har) ana ba shi darajar 'C'.  \n- A score between 60 and 69 (inclusive) is graded as 'D'.  \n- Maki tsakanin 60 da 69 (ciki har) ana ba shi darajar 'D'.  \n- A score below 60 is graded as 'E'.  \n- Maki kasa da 60 ana ba shi darajar 'E'.  \nIf the score is outside the range of 0 to 100, an error message is returned.  \nIdan maki ya fita daga zangon 0 zuwa 100, ana mayar da saƙon kuskure.  \nInput: A numeric score.  \nShigarwa: Maki na lambobi.  \nOutput: Returns the corresponding letter grade or an error message if the score is out of range.  \nFitarwa: Yana mayar da harafin daraja da ya dace ko kuma saƙon kuskure idan maki ya fita daga zango.  ",
      "hi": "संख्यात्मक स्कोर को उसके संबंधित अक्षर ग्रेड में परिवर्तित करता है। \nग्रेडिंग प्रणाली इस प्रकार है:\n- 90 और 100 (समावेशी) के बीच का स्कोर 'A' के रूप में ग्रेड किया जाता है।\n- 80 और 89 (समावेशी) के बीच का स्कोर 'B' के रूप में ग्रेड किया जाता है।\n- 70 और 79 (समावेशी) के बीच का स्कोर 'C' के रूप में ग्रेड किया जाता है।\n- 60 और 69 (समावेशी) के बीच का स्कोर 'D' के रूप में ग्रेड किया जाता है।\n- 60 से कम का स्कोर 'E' के रूप में ग्रेड किया जाता है।\nयदि स्कोर 0 से 100 की सीमा के बाहर है, तो एक त्रुटि संदेश लौटाया जाता है।\nइनपुट: एक संख्यात्मक स्कोर।\nआउटपुट: संबंधित अक्षर ग्रेड या एक त्रुटि संदेश लौटाता है यदि स्कोर सीमा से बाहर है।",
      "hu": "Átalakít egy numerikus pontszámot a megfelelő betűjegyre.\nAz osztályozási rendszer a következő:\n- A 90 és 100 közötti (beleértve) pontszám 'A' minősítést kap.\n- A 80 és 89 közötti (beleértve) pontszám 'B' minősítést kap.\n- A 70 és 79 közötti (beleértve) pontszám 'C' minősítést kap.\n- A 60 és 69 közötti (beleértve) pontszám 'D' minősítést kap.\n- A 60 alatti pontszám 'E' minősítést kap.\nHa a pontszám kívül esik a 0 és 100 közötti tartományon, hibaüzenet kerül visszaadásra.\nBemenet: Egy numerikus pontszám.\nKimenet: Visszaadja a megfelelő betűjegyet vagy egy hibaüzenetet, ha a pontszám kívül esik a tartományon."
    },
    "docstring_bertscore": {
      "sq": "0.9952094324702006",
      "hy": "0.953325833064422",
      "bn": "0.9989768549072893",
      "bg": "0.9646084359679656",
      "zh": "0.9432618275485273",
      "fr": "0.9729743503563931",
      "de": "0.9963920777588823",
      "ha": "0.9491464512170669",
      "hi": "1",
      "hu": "0.9377992934396868"
    }
  },
  {
    "task_id": "PHP/5",
    "prompt": {
      "en": "<?php\n/**\n * Calculates the day number of the year for a given date.\n * This function takes a date in the format 'YYYY/MM/DD' and returns the day number\n * in the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\n * while '2024/12/31' would return 366 for a leap year or 365 otherwise.\n * Input: A string representing the date in 'YYYY/MM/DD' format.\n * Output: An integer representing the day number in the year.\n */\n\nfunction getDayOfYear($date): int ",
      "sq": "<?php\n/**\n * Llogarit numrin e ditës së vitit për një datë të caktuar.\n * Kjo funksion merr një datë në formatin 'YYYY/MM/DD' dhe kthen numrin e ditës\n * në vit për atë datë. Për shembull, '2024/01/01' do të kthente 1, pasi është dita e parë e vitit,\n * ndërsa '2024/12/31' do të kthente 366 për një vit të brishtë ose 365 ndryshe.\n * Hyrja: Një varg që përfaqëson datën në formatin 'YYYY/MM/DD'.\n * Dalja: Një numër i plotë që përfaqëson numrin e ditës në vit.\n */\n\nfunction getDayOfYear($date): int ",
      "hy": "<?php\n/**\n * Հաշվում է տարվա օրվա համարը տրված ամսաթվի համար։\n * Այս ֆունկցիան ընդունում է ամսաթիվ 'YYYY/MM/DD' ձևաչափով և վերադարձնում է տարվա օրվա համարը\n * այդ ամսաթվի համար։ Օրինակ, '2024/01/01' կվերադարձնի 1, քանի որ դա տարվա առաջին օրն է,\n * մինչդեռ '2024/12/31' կվերադարձնի 366 նահանջ տարվա համար կամ 365 այլապես։\n * Մուտք: Տող, որը ներկայացնում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով։\n * Ելք: Թիվ, որը ներկայացնում է տարվա օրվա համարը։\n */\n\nfunction getDayOfYear($date): int ",
      "bn": "<?php\n/**\n * প্রদত্ত তারিখের জন্য বছরের দিন সংখ্যা গণনা করে।\n * এই ফাংশনটি 'YYYY/MM/DD' বিন্যাসে একটি তারিখ গ্রহণ করে এবং সেই তারিখের জন্য বছরের দিন সংখ্যা ফেরত দেয়। উদাহরণস্বরূপ, '2024/01/01' 1 ফেরত দেবে, কারণ এটি বছরের প্রথম দিন,\n * যখন '2024/12/31' একটি অধিবর্ষের জন্য 366 বা অন্যথায় 365 ফেরত দেবে।\n * ইনপুট: 'YYYY/MM/DD' বিন্যাসে একটি তারিখ উপস্থাপনকারী একটি স্ট্রিং।\n * আউটপুট: বছরের দিন সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n */\n\nfunction getDayOfYear($date): int ",
      "bg": "<?php\n/**\n * Изчислява номера на деня в годината за дадена дата.\n * Тази функция приема дата във формат 'YYYY/MM/DD' и връща номера на деня\n * в годината за тази дата. Например, '2024/01/01' би върнала 1, тъй като това е първият ден от годината,\n * докато '2024/12/31' би върнала 366 за високосна година или 365 в противен случай.\n * Вход: Низ, представляващ датата във формат 'YYYY/MM/DD'.\n * Изход: Цяло число, представляващо номера на деня в годината.\n */\n\nfunction getDayOfYear($date): int ",
      "zh": "<?php\n/**\n * 计算给定日期在一年中的天数。\n * 此函数接受格式为 'YYYY/MM/DD' 的日期，并返回该日期在一年中的天数。\n * 例如，'2024/01/01' 会返回 1，因为它是一年的第一天，\n * 而 '2024/12/31' 在闰年时会返回 366，否则返回 365。\n * 输入：一个表示日期的字符串，格式为 'YYYY/MM/DD'。\n * 输出：一个整数，表示该日期在一年中的天数。\n */\n\nfunction getDayOfYear($date): int ",
      "fr": "<?php\n/**\n * Calcule le numéro du jour de l'année pour une date donnée.\n * Cette fonction prend une date au format 'AAAA/MM/JJ' et renvoie le numéro du jour\n * dans l'année pour cette date. Par exemple, '2024/01/01' renverrait 1, car c'est le premier jour de l'année,\n * tandis que '2024/12/31' renverrait 366 pour une année bissextile ou 365 sinon.\n * Entrée : Une chaîne représentant la date au format 'AAAA/MM/JJ'.\n * Sortie : Un entier représentant le numéro du jour dans l'année.\n */\n\nfunction getDayOfYear($date): int ",
      "de": "<?php\n/**\n * Berechnet die Tagesnummer des Jahres für ein gegebenes Datum.\n * Diese Funktion nimmt ein Datum im Format 'YYYY/MM/DD' und gibt die Tagesnummer\n * im Jahr für dieses Datum zurück. Zum Beispiel würde '2024/01/01' 1 zurückgeben, da es der erste Tag des Jahres ist,\n * während '2024/12/31' 366 für ein Schaltjahr oder 365 sonst zurückgeben würde.\n * Eingabe: Ein String, der das Datum im Format 'YYYY/MM/DD' darstellt.\n * Ausgabe: Ein Integer, der die Tagesnummer im Jahr darstellt.\n */\n\nfunction getDayOfYear($date): int ",
      "ha": "<?php\n/**\n * Lissafin ranar shekara don wata takamaiman rana.\n * Wannan aikin yana karɓar wata rana a cikin tsarin 'YYYY/MM/DD' kuma yana mayar da lissafin ranar\n * a cikin shekara don wannan ranar. Alal misali, '2024/01/01' zai mayar da 1, domin ita ce ranar farko ta shekara,\n * yayin da '2024/12/31' zai mayar da 366 don shekara mai tsallakewa ko 365 idan ba haka ba.\n * Shigarwa: Wani kirtani da ke wakiltar ranar a cikin tsarin 'YYYY/MM/DD'.\n * Fitarwa: Wani cikakken lamba da ke wakiltar lissafin ranar a cikin shekara.\n */\n\nfunction getDayOfYear($date): int ",
      "hi": "<?php\n/**\n * दिए गए दिनांक के लिए वर्ष का दिनांक संख्या गणना करता है।\n * यह फ़ंक्शन 'YYYY/MM/DD' प्रारूप में एक दिनांक लेता है और उस दिनांक के लिए वर्ष में दिनांक संख्या लौटाता है। उदाहरण के लिए, '2024/01/01' 1 लौटाएगा, क्योंकि यह वर्ष का पहला दिन है,\n * जबकि '2024/12/31' एक लीप वर्ष के लिए 366 या अन्यथा 365 लौटाएगा।\n * इनपुट: 'YYYY/MM/DD' प्रारूप में दिनांक को दर्शाने वाला एक स्ट्रिंग।\n * आउटपुट: वर्ष में दिनांक संख्या को दर्शाने वाला एक पूर्णांक।\n */\n\nfunction getDayOfYear($date): int ",
      "hu": "<?php\n/**\n * Kiszámítja az év napjának számát egy adott dátumhoz.\n * Ez a függvény egy dátumot vesz fel 'YYYY/MM/DD' formátumban, és visszaadja az év napjának\n * számát az adott dátumhoz. Például, '2024/01/01' esetén 1-et ad vissza, mivel ez az év első napja,\n * míg '2024/12/31' esetén 366-ot ad vissza szökőév esetén, vagy 365-öt máskülönben.\n * Bemenet: Egy karakterlánc, amely a dátumot 'YYYY/MM/DD' formátumban képviseli.\n * Kimenet: Egy egész szám, amely az év napjának számát képviseli.\n */\n\nfunction getDayOfYear($date): int "
    },
    "prompt_bertscore": {
      "sq": "0.9941435818455674",
      "hy": "0.9769052455970736",
      "bn": "0.9734723167216476",
      "bg": "0.9883380130686796",
      "zh": "0.9504367541722695",
      "fr": "0.9898861382584656",
      "de": "0.992473100341064",
      "ha": "0.9703740800382654",
      "hi": "0.9700781207705234",
      "hu": "0.964883539045699"
    },
    "canonical_solution": "{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}",
    "instruction": {
      "en": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nPHP կոդի համար տրամադրեք հակիրճ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nBa da gajeriyar bayanin yanayi na zahiri (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function getDayOfYear($date): int\n{\n    $dateParts = explode('/', $date);\n    $year = (int) $dateParts[0];\n    $month = (int) $dateParts[1];\n    $day = (int) $dateParts[2];\n\n    $isLeapYear = ($year % 4 == 0 && $year % 100 != 0) || $year % 400 == 0;\n    $monthDays = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    $dayOfYear = 0;\n    for ($i = 0; $i < $month - 1; $i++) {\n        $dayOfYear += $monthDays[$i];\n    }\n    $dayOfYear += $day;\n\n    return $dayOfYear;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.902450434939575",
      "bn": "0.8680359337518513",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9057671650420956",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(getDayOfYear('2024/01/01') === 1);\n    assert(getDayOfYear('2024/03/01') === 61); // Non-leap year\n    assert(getDayOfYear('2024/12/31') === 366); // Leap year\n    assert(getDayOfYear('2023/12/31') === 365); // Non-leap year\n    \n}\n\nmain();\n?>",
    "entry_point": "getDayOfYear",
    "signature": "function getDayOfYear($date): int",
    "docstring": {
      "en": "Calculates the day number of the year for a given date.\nThis function takes a date in the format 'YYYY/MM/DD' and returns the day number\nin the year for that date. For example, '2024/01/01' would return 1, as it is the first day of the year,\nwhile '2024/12/31' would return 366 for a leap year or 365 otherwise.\nInput: A string representing the date in 'YYYY/MM/DD' format.\nOutput: An integer representing the day number in the year.",
      "sq": "Llogarit numrin e ditës së vitit për një datë të caktuar.\nKjo funksion merr një datë në formatin 'YYYY/MM/DD' dhe kthen numrin e ditës\nnë vit për atë datë. Për shembull, '2024/01/01' do të kthente 1, pasi është dita e parë e vitit,\nndërsa '2024/12/31' do të kthente 366 për një vit të brishtë ose 365 përndryshe.\nInput: Një varg që përfaqëson datën në formatin 'YYYY/MM/DD'.\nOutput: Një numër i plotë që përfaqëson numrin e ditës në vit.",
      "hy": "Հաշվում է տարվա օրվա համարը տրված ամսաթվի համար։  \nԱյս ֆունկցիան ընդունում է ամսաթիվ 'YYYY/MM/DD' ձևաչափով և վերադարձնում է տարվա օրվա համարը այդ ամսաթվի համար։ Օրինակ, '2024/01/01' կվերադարձնի 1, քանի որ դա տարվա առաջին օրն է, մինչդեռ '2024/12/31' կվերադարձնի 366 նահանջ տարվա համար կամ 365 այլապես։  \nՄուտք: Տող, որը ներկայացնում է ամսաթիվը 'YYYY/MM/DD' ձևաչափով։  \nԵլք: Թիվ, որը ներկայացնում է տարվա օրվա համարը։  ",
      "bn": "বছরের একটি নির্দিষ্ট তারিখের জন্য দিনের সংখ্যা গণনা করে।\nএই ফাংশনটি 'YYYY/MM/DD' ফরম্যাটে একটি তারিখ গ্রহণ করে এবং সেই তারিখের জন্য বছরের দিনের সংখ্যা প্রদান করে। উদাহরণস্বরূপ, '2024/01/01' 1 প্রদান করবে, কারণ এটি বছরের প্রথম দিন, যখন '2024/12/31' একটি লিপ ইয়ার হলে 366 বা অন্যথায় 365 প্রদান করবে।\nইনপুট: 'YYYY/MM/DD' ফরম্যাটে তারিখ উপস্থাপনকারী একটি স্ট্রিং।\nআউটপুট: বছরের দিনের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।",
      "bg": "Изчислява номера на деня в годината за дадена дата.  \nТази функция приема дата във формат 'YYYY/MM/DD' и връща номера на деня  \nв годината за тази дата. Например, '2024/01/01' би върнала 1, тъй като това е първият ден от годината,  \nдокато '2024/12/31' би върнала 366 за високосна година или 365 в противен случай.  \nВход: Низ, представляващ датата във формат 'YYYY/MM/DD'.  \nИзход: Цяло число, представляващо номера на деня в годината.  ",
      "zh": "计算给定日期在一年中的天数。\n此函数接受格式为 'YYYY/MM/DD' 的日期，并返回该日期在一年中的天数。例如，'2024/01/01' 将返回 1，因为它是一年的第一天，而 '2024/12/31' 在闰年时将返回 366，否则返回 365。\n输入：一个表示日期的字符串，格式为 'YYYY/MM/DD'。\n输出：一个整数，表示一年中的天数。",
      "fr": "Calcule le numéro du jour de l'année pour une date donnée.\nCette fonction prend une date au format 'YYYY/MM/DD' et renvoie le numéro du jour\ndans l'année pour cette date. Par exemple, '2024/01/01' renverrait 1, car c'est le premier jour de l'année,\ntandis que '2024/12/31' renverrait 366 pour une année bissextile ou 365 sinon.\nEntrée : Une chaîne de caractères représentant la date au format 'YYYY/MM/DD'.\nSortie : Un entier représentant le numéro du jour dans l'année.",
      "de": "Berechnet die Tagesnummer des Jahres für ein gegebenes Datum.\nDiese Funktion nimmt ein Datum im Format 'YYYY/MM/DD' und gibt die Tagesnummer\nim Jahr für dieses Datum zurück. Zum Beispiel würde '2024/01/01' den Wert 1 zurückgeben, da es der erste Tag des Jahres ist,\nwährend '2024/12/31' für ein Schaltjahr 366 oder sonst 365 zurückgeben würde.\nEingabe: Ein String, der das Datum im Format 'YYYY/MM/DD' darstellt.\nAusgabe: Eine ganze Zahl, die die Tagesnummer im Jahr darstellt.",
      "ha": "Yana lissafin lambar ranar shekara don wata kwanan wata da aka bayar.\nWannan aikin yana ɗaukar kwanan wata a cikin tsarin 'YYYY/MM/DD' kuma yana mayar da lambar ranar\na cikin shekarar don wannan kwanan wata. Alal misali, '2024/01/01' zai mayar da 1, domin ita ce ranar farko a cikin shekara,\nyayinda '2024/12/31' zai mayar da 366 don shekara mai tsalle ko 365 idan ba haka ba.\nShigarwa: Wani igiyar rubutu da ke wakiltar kwanan wata a cikin tsarin 'YYYY/MM/DD'.\nFitarwa: Wani cikakken lamba da ke wakiltar lambar ranar a cikin shekara.",
      "hi": "वर्ष के लिए दिए गए दिनांक के लिए दिन संख्या की गणना करता है।\nयह फ़ंक्शन 'YYYY/MM/DD' प्रारूप में एक दिनांक लेता है और उस दिनांक के लिए वर्ष में दिन संख्या लौटाता है। उदाहरण के लिए, '2024/01/01' 1 लौटाएगा, क्योंकि यह वर्ष का पहला दिन है, जबकि '2024/12/31' एक लीप वर्ष के लिए 366 या अन्यथा 365 लौटाएगा।\nइनपुट: 'YYYY/MM/DD' प्रारूप में दिनांक का प्रतिनिधित्व करने वाली एक स्ट्रिंग।\nआउटपुट: वर्ष में दिन संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।",
      "hu": "Számítja az év napjának számát egy adott dátumhoz.\nEz a függvény egy dátumot vesz fel 'ÉÉÉÉ/HH/NN' formátumban, és visszaadja az év napjának számát\naz adott dátumhoz. Például, '2024/01/01' esetén 1-et ad vissza, mivel ez az év első napja,\nmíg '2024/12/31' esetén 366-ot ad vissza szökőévben vagy 365-öt egyébként.\nBemenet: Egy karakterlánc, amely a dátumot 'ÉÉÉÉ/HH/NN' formátumban ábrázolja.\nKimenet: Egy egész szám, amely az év napjának számát jelöli."
    },
    "docstring_bertscore": {
      "sq": "0.9818223406795922",
      "hy": "0.9542836287617722",
      "bn": "0.9524002154887994",
      "bg": "0.9823354029538053",
      "zh": "0.9380604923907477",
      "fr": "0.989877597152081",
      "de": "0.9769217319186995",
      "ha": "0.9798205436995227",
      "hi": "0.9754345862558912",
      "hu": "0.9319929301412749"
    }
  },
  {
    "task_id": "PHP/6",
    "prompt": {
      "en": "<?php\n/**\n    * Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\n    * A number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\n    * For example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\n    * Input: An integer N.\n    * Output: Returns the sum of all integers less than or equal to N that are not related to 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "sq": "<?php\n/**\n    * Llogarit shumën e të gjithë numrave të plotë pozitivë më të vegjël ose të barabartë me një numër të dhënë N që nuk janë 'të lidhur' me numrin 2.\n    * Një numër është 'i lidhur' me 2 nëse është i pjestueshëm me 2 ose nëse ndonjë nga shifrat e tij është 2.\n    * Për shembull, për N = 8, numrat që nuk janë të lidhur me 2 janë 1, 3, 5, dhe 7, dhe shuma e tyre është 16.\n    * Hyrja: Një numër i plotë N.\n    * Dalja: Kthen shumën e të gjithë numrave të plotë më të vegjël ose të barabartë me N që nuk janë të lidhur me 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hy": "<?php\n/**\n    * Հաշվում է տրված N թվից փոքր կամ հավասար բոլոր դրական ամբողջ թվերի գումարը, որոնք 'կապված չեն' 2 թվի հետ:\n    * Թիվը 'կապված է' 2-ի հետ, եթե այն բաժանվում է 2-ի վրա կամ եթե նրա որևէ թվանշան 2 է:\n    * Օրինակ, N = 8-ի համար, 2-ի հետ չկապված թվերն են 1, 3, 5 և 7, և նրանց գումարը 16 է:\n    * Մուտք: Ամբողջ թիվ N:\n    * Ելք: Վերադարձնում է N-ից փոքր կամ հավասար բոլոր թվերի գումարը, որոնք 2-ի հետ կապ չունեն:\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "bn": "<?php\n/**\n    * একটি প্রদত্ত সংখ্যা N এর চেয়ে ছোট বা সমান সমস্ত ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করে যা সংখ্যা 2 এর সাথে 'সম্পর্কিত' নয়।\n    * একটি সংখ্যা 2 এর সাথে 'সম্পর্কিত' যদি এটি 2 দ্বারা বিভাজ্য হয় বা এর কোনো অংক 2 হয়।\n    * উদাহরণস্বরূপ, N = 8 এর জন্য, 2 এর সাথে সম্পর্কিত নয় এমন সংখ্যাগুলি হল 1, 3, 5, এবং 7, এবং তাদের যোগফল হল 16।\n    * ইনপুট: একটি পূর্ণসংখ্যা N।\n    * আউটপুট: 2 এর সাথে সম্পর্কিত নয় এমন N এর চেয়ে ছোট বা সমান সমস্ত পূর্ণসংখ্যার যোগফল প্রদান করে।\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "bg": "<?php\n/**\n    * Изчислява сумата на всички положителни цели числа, по-малки или равни на дадено число N, които не са 'свързани' с числото 2.\n    * Едно число е 'свързано' с 2, ако е делимо на 2 или ако някоя от цифрите му е 2.\n    * Например, за N = 8, числата, които не са свързани с 2, са 1, 3, 5 и 7, и тяхната сума е 16.\n    * Вход: Цяло число N.\n    * Изход: Връща сумата на всички числа, по-малки или равни на N, които не са свързани с 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "zh": "<?php\n/**\n    * 计算小于或等于给定数字 N 的所有正整数之和，这些整数与数字 2 无关。\n    * 如果一个数字能被 2 整除，或者其任何一位数字是 2，则该数字与 2 有关。\n    * 例如，对于 N = 8，与 2 无关的数字是 1、3、5 和 7，它们的和是 16。\n    * 输入：一个整数 N。\n    * 输出：返回小于或等于 N 的所有与 2 无关的整数之和。\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "fr": "<?php\n/**\n    * Calcule la somme de tous les entiers positifs inférieurs ou égaux à un nombre donné N qui ne sont pas 'liés' au nombre 2.\n    * Un nombre est 'lié' à 2 s'il est divisible par 2 ou si l'un de ses chiffres est 2.\n    * Par exemple, pour N = 8, les nombres non liés à 2 sont 1, 3, 5, et 7, et leur somme est 16.\n    * Entrée : Un entier N.\n    * Sortie : Retourne la somme de tous les entiers inférieurs ou égaux à N qui ne sont pas liés à 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "de": "<?php\n/**\n    * Berechnet die Summe aller positiven ganzen Zahlen, die kleiner oder gleich einer gegebenen Zahl N sind und nicht 'verwandt' mit der Zahl 2 sind.\n    * Eine Zahl ist 'verwandt' mit 2, wenn sie durch 2 teilbar ist oder wenn eine ihrer Ziffern eine 2 ist.\n    * Zum Beispiel, für N = 8, sind die Zahlen, die nicht verwandt mit 2 sind, 1, 3, 5 und 7, und ihre Summe ist 16.\n    * Eingabe: Eine ganze Zahl N.\n    * Ausgabe: Gibt die Summe aller ganzen Zahlen zurück, die kleiner oder gleich N sind und nicht verwandt mit 2 sind.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "ha": "<?php\n/**\n    * Lissafin jimillar dukkan lambobin cikakkun lambobi masu kyau waɗanda suka yi ƙasa da ko daidai da wani lamba N da ba su da 'alaƙa' da lamba 2.\n    * Ana cewa lamba tana da 'alaƙa' da 2 idan tana rarrabuwa da 2 ko kuma idan wani daga cikin lambobinta yana da 2.\n    * Alal misali, ga N = 8, lambobin da ba su da alaƙa da 2 sune 1, 3, 5, da 7, kuma jimillarsu ita ce 16.\n    * Shigarwa: Wani cikakken lamba N.\n    * Fitarwa: Yana mayar da jimillar dukkan lambobin da suka yi ƙasa da ko daidai da N da ba su da alaƙa da 2.\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hi": "<?php\n/**\n    * सभी धनात्मक पूर्णांकों का योग गणना करता है जो एक दिए गए संख्या N से कम या उसके बराबर हैं और जो संख्या 2 से 'संबंधित' नहीं हैं।\n    * एक संख्या 2 से 'संबंधित' होती है यदि वह 2 से विभाज्य है या यदि उसके किसी भी अंक में 2 है।\n    * उदाहरण के लिए, N = 8 के लिए, 2 से संबंधित नहीं होने वाली संख्याएँ 1, 3, 5, और 7 हैं, और उनका योग 16 है।\n    * इनपुट: एक पूर्णांक N।\n    * आउटपुट: उन सभी पूर्णांकों का योग लौटाता है जो N से कम या उसके बराबर हैं और 2 से संबंधित नहीं हैं।\n*/\n\nfunction sumOfUnrelatedToTwo($N) ",
      "hu": "<?php\n/**\n    * Kiszámítja az összegét minden pozitív egész számnak, amely kisebb vagy egyenlő egy adott N számmal, és nem 'kapcsolódik' a 2-es számhoz.\n    * Egy szám akkor 'kapcsolódik' a 2-eshez, ha osztható 2-vel, vagy ha bármelyik számjegye 2.\n    * Például, ha N = 8, a 2-höz nem kapcsolódó számok: 1, 3, 5 és 7, és ezek összege 16.\n    * Bemenet: Egy egész szám N.\n    * Kimenet: Visszaadja az összegét minden olyan egész számnak, amely kisebb vagy egyenlő N-nél, és nem kapcsolódik a 2-eshez.\n*/\n\nfunction sumOfUnrelatedToTwo($N) "
    },
    "prompt_bertscore": {
      "sq": "0.9952576996527921",
      "hy": "0.984901111585633",
      "bn": "0.9890898290608967",
      "bg": "0.9826973075080508",
      "zh": "0.9665903699099319",
      "fr": "0.9968376057035435",
      "de": "0.9737460293867136",
      "ha": "0.9549516227331926",
      "hi": "0.9635880717005895",
      "hu": "0.9762807516790999"
    },
    "canonical_solution": "{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}",
    "instruction": {
      "en": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হতে হবে।",
      "bg": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nBayar da kwatancin gajeren harshe na dabi'a (docstring) na lambar PHP cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function sumOfUnrelatedToTwo($N)\n{\n    $sum = 0;\n    for ($i = 1; $i <= $N; $i++) {\n        if ($i % 2 != 0 && strpos((string)$i, '2') === false) {\n            $sum += $i;\n        }\n    }\n    return $sum;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.924762585641224",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8824658350428929",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9405372146118718",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    assert(sumOfUnrelatedToTwo(8) === 16);  // 1 + 3 + 5 + 7\n    assert(sumOfUnrelatedToTwo(10) === 25); // 1 + 3 + 5 + 7 + 9\n    assert(sumOfUnrelatedToTwo(2) === 1);   // 1\n    assert(sumOfUnrelatedToTwo(22) === 100); // Sum of numbers not containing 2 and not even, up to 22\n    assert(sumOfUnrelatedToTwo(0) === 0);   // No numbers to sum\n    \n}\n\n\nmain();\n?>",
    "entry_point": "sumOfUnrelatedToTwo",
    "signature": "function sumOfUnrelatedToTwo($N)",
    "docstring": {
      "en": "Calculates the sum of all positive integers less than or equal to a given number N that are not 'related' to the number 2.\nA number is 'related' to 2 if it is divisible by 2 or if any of its digits is 2.\nFor example, for N = 8, the numbers not related to 2 are 1, 3, 5, and 7, and their sum is 16.\nInput: An integer N.\nOutput: Returns the sum of all integers less than or equal to N that are not related to 2.",
      "sq": "Llogarit shumën e të gjithë numrave të plotë pozitivë më të vegjël ose të barabartë me një numër të dhënë N që nuk janë 'të lidhur' me numrin 2. Një numër është 'i lidhur' me 2 nëse është i pjestueshëm me 2 ose nëse ndonjë nga shifrat e tij është 2. Për shembull, për N = 8, numrat që nuk janë të lidhur me 2 janë 1, 3, 5, dhe 7, dhe shuma e tyre është 16. \n\nArgs:\n    N: Një numër i plotë.\n\nReturns:\n    Kthen shumën e të gjithë numrave të plotë më të vegjël ose të barabartë me N që nuk janë të lidhur me 2.",
      "hy": "Հաշվում է բոլոր դրական ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են տրված N թվին և չեն 'կապված' 2 թվի հետ:\nԹիվը 'կապված' է 2-ի հետ, եթե այն բաժանվում է 2-ի վրա կամ եթե նրա որևէ թվանշանը 2 է:\nՕրինակ, N = 8-ի համար, 2-ի հետ չկապված թվերն են 1, 3, 5 և 7, և նրանց գումարը 16 է:\nՄուտք: Ամբողջ թիվ N:\nԵլք: Վերադարձնում է բոլոր այն ամբողջ թվերի գումարը, որոնք փոքր կամ հավասար են N թվին և չեն կապված 2-ի հետ:",
      "bn": "সমস্ত ধনাত্মক পূর্ণসংখ্যার যোগফল গণনা করে যা একটি প্রদত্ত সংখ্যা N এর চেয়ে ছোট বা সমান এবং যা সংখ্যা 2 এর সাথে 'সম্পর্কিত' নয়।\nএকটি সংখ্যা 2 এর সাথে 'সম্পর্কিত' যদি এটি 2 দ্বারা বিভাজ্য হয় বা যদি এর কোনো অঙ্ক 2 হয়।\nউদাহরণস্বরূপ, N = 8 এর জন্য, 2 এর সাথে সম্পর্কিত নয় এমন সংখ্যাগুলি হল 1, 3, 5, এবং 7, এবং তাদের যোগফল 16।\nইনপুট: একটি পূর্ণসংখ্যা N।\nআউটপুট: সমস্ত পূর্ণসংখ্যার যোগফল প্রদান করে যা N এর চেয়ে ছোট বা সমান এবং 2 এর সাথে সম্পর্কিত নয়।",
      "bg": "Изчислява сумата на всички положителни цели числа, по-малки или равни на дадено число N, които не са 'свързани' с числото 2. Едно число е 'свързано' с 2, ако е делимо на 2 или ако някоя от цифрите му е 2. Например, за N = 8, числата, които не са свързани с 2, са 1, 3, 5 и 7, и тяхната сума е 16. Вход: Цяло число N. Изход: Връща сумата на всички цели числа, по-малки или равни на N, които не са свързани с 2.",
      "zh": "计算小于或等于给定数字 N 的所有正整数的和，这些整数与数字 2 无关。\n如果一个数字可以被 2 整除或者其任何一位数字是 2，则该数字与 2 有关。\n例如，对于 N = 8，与 2 无关的数字是 1、3、5 和 7，它们的和是 16。\n输入：一个整数 N。\n输出：返回小于或等于 N 的所有与 2 无关的整数的和。",
      "fr": "Calcule la somme de tous les entiers positifs inférieurs ou égaux à un nombre donné N qui ne sont pas 'liés' au nombre 2.\nUn nombre est 'lié' à 2 s'il est divisible par 2 ou si l'un de ses chiffres est 2.\nPar exemple, pour N = 8, les nombres non liés à 2 sont 1, 3, 5, et 7, et leur somme est 16.\nEntrée : Un entier N.\nSortie : Renvoie la somme de tous les entiers inférieurs ou égaux à N qui ne sont pas liés à 2.",
      "de": "Berechnet die Summe aller positiven ganzen Zahlen, die kleiner oder gleich einer gegebenen Zahl N sind und nicht 'verwandt' mit der Zahl 2 sind.\nEine Zahl ist 'verwandt' mit 2, wenn sie durch 2 teilbar ist oder wenn eine ihrer Ziffern eine 2 ist.\nZum Beispiel, für N = 8, sind die Zahlen, die nicht mit 2 verwandt sind, 1, 3, 5 und 7, und ihre Summe ist 16.\nEingabe: Eine ganze Zahl N.\nAusgabe: Gibt die Summe aller ganzen Zahlen zurück, die kleiner oder gleich N sind und nicht mit 2 verwandt sind.",
      "ha": "Yana lissafin jimillar dukkan lambobin cikakkun lambobi masu kyau da suka kasa ko daidai da wani adadi N da ba su da 'dangantaka' da lamba 2. \nLamba tana da 'dangantaka' da 2 idan ana iya raba ta da 2 ko kuma idan wani daga cikin lambobinta yana dauke da 2.\nMisali, ga N = 8, lambobin da ba su da dangantaka da 2 sune 1, 3, 5, da 7, kuma jimillarsu ita ce 16.\nShigarwa: Lamba N.\nFitarwa: Yana dawo da jimillar dukkan lambobin da suka kasa ko daidai da N da ba su da dangantaka da 2.",
      "hi": "सभी धनात्मक पूर्णांकों का योग गणना करता है जो एक दिए गए संख्या N से कम या उसके बराबर हैं और जो संख्या 2 से 'संबंधित' नहीं हैं। \nएक संख्या 2 से 'संबंधित' होती है यदि वह 2 से विभाज्य है या यदि उसके किसी भी अंक में 2 है। \nउदाहरण के लिए, N = 8 के लिए, 2 से संबंधित नहीं होने वाली संख्याएँ 1, 3, 5, और 7 हैं, और उनका योग 16 है।\n\nइनपुट: एक पूर्णांक N।\n\nआउटपुट: उन सभी पूर्णांकों का योग लौटाता है जो N से कम या उसके बराबर हैं और जो 2 से संबंधित नहीं हैं।",
      "hu": "Kiszámítja az összes olyan pozitív egész szám összegét, amely kisebb vagy egyenlő egy adott N számmal, és nem 'kapcsolódik' a 2-es számhoz. \nEgy szám 'kapcsolódik' a 2-eshez, ha osztható 2-vel, vagy ha bármelyik számjegye 2.\nPéldául, ha N = 8, a 2-höz nem kapcsolódó számok: 1, 3, 5 és 7, és ezek összege 16.\nBemenet: Egy egész szám N.\nKimenet: Visszaadja az összes olyan egész szám összegét, amely kisebb vagy egyenlő N-nél, és nem kapcsolódik a 2-eshez."
    },
    "docstring_bertscore": {
      "sq": "0.9673098091500402",
      "hy": "0.9875677244510264",
      "bn": "0.9838511513914826",
      "bg": "0.9867217576581988",
      "zh": "0.9724877059228576",
      "fr": "0.9941886709420623",
      "de": "0.970212394908103",
      "ha": "0.9671636171895985",
      "hi": "0.9756989632930487",
      "hu": "0.9708845601175251"
    }
  },
  {
    "task_id": "PHP/7",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the number of different ways to exchange a paper bill into coins.\n    * Given a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\n    * The function determines how many distinct combinations of these coins can sum up to the value of the bill.\n    * Example: For a bill of value 4, there are 5 ways:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Input: An integer representing the bill value.\n    * Output: Returns the number of different ways to exchange the bill into coins.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "sq": "<?php\n\n/**\n    * Llogarit numrin e mënyrave të ndryshme për të shkëmbyer një kartëmonedhë në monedha.\n    * Duke pasur një kartëmonedhë me vlerë N (1 <= N <= 10), ka dy lloje monedhash të disponueshme: 1 dhe 2 njësi.\n    * Funksioni përcakton sa kombinime të ndryshme të këtyre monedhave mund të arrijnë vlerën e kartëmonedhës.\n    * Shembull: Për një kartëmonedhë me vlerë 4, ka 5 mënyra:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Hyrja: Një numër i plotë që përfaqëson vlerën e kartëmonedhës.\n    * Dalja: Kthen numrin e mënyrave të ndryshme për të shkëmbyer kartëmonedhën në monedha.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է թղթադրամը մետաղադրամների փոխանակելու տարբեր եղանակների քանակը։\n    * Տրված է N արժեքով թղթադրամ (1 <= N <= 10), հասանելի են երկու տեսակի մետաղադրամներ՝ 1 և 2 միավոր։\n    * Ֆունկցիան որոշում է, թե այս մետաղադրամների քանի տարբեր կոմբինացիաներ կարող են գումարվել թղթադրամի արժեքին։\n    * Օրինակ: 4 արժեքով թղթադրամի համար կա 5 եղանակ.\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Մուտք: Թղթադրամի արժեքը ներկայացնող ամբողջ թիվ։\n    * Ելք: Վերադարձնում է թղթադրամը մետաղադրամների փոխանակելու տարբեր եղանակների քանակը։\n*/\nfunction countCoinExchangeWays($billValue) ",
      "bn": "<?php\n\n/**\n    * একটি কাগজের নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা গণনা করে।\n    * N মানের একটি কাগজের নোট দেওয়া হয়েছে (1 <= N <= 10), এখানে দুটি প্রকারের কয়েন পাওয়া যায়: 1 এবং 2 ইউনিট।\n    * ফাংশনটি নির্ধারণ করে যে এই কয়েনগুলির কতগুলি ভিন্ন সংমিশ্রণ নোটের মানের সমান হতে পারে।\n    * উদাহরণ: 4 মানের একটি নোটের জন্য, 5টি উপায় রয়েছে:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * ইনপুট: নোটের মানকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n    * আউটপুট: নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা প্রদান করে।\n*/\nfunction countCoinExchangeWays($billValue) ",
      "bg": "<?php\n\n/**\n    * Изчислява броя на различните начини за размяна на хартиена банкнота в монети.\n    * Дадена е хартиена банкнота със стойност N (1 <= N <= 10), като има два вида налични монети: 1 и 2 единици.\n    * Функцията определя колко различни комбинации от тези монети могат да съставят стойността на банкнотата.\n    * Пример: За банкнота със стойност 4, има 5 начина:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Вход: Цяло число, представляващо стойността на банкнотата.\n    * Изход: Връща броя на различните начини за размяна на банкнотата в монети.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "zh": "<?php\n\n/**\n    * 计算将纸币兑换成硬币的不同方式的数量。\n    * 给定面值为 N 的纸币 (1 <= N <= 10)，有两种类型的硬币可用：1 单位和 2 单位。\n    * 该函数确定这些硬币的多少种不同组合可以加起来等于纸币的面值。\n    * 示例：对于面值为 4 的纸币，有 5 种方式：\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * 输入：表示纸币面值的整数。\n    * 输出：返回将纸币兑换成硬币的不同方式的数量。\n*/\nfunction countCoinExchangeWays($billValue) ",
      "fr": "<?php\n\n/**\n    * Calcule le nombre de façons différentes d'échanger un billet en pièces.\n    * Étant donné un billet de valeur N (1 <= N <= 10), il y a deux types de pièces disponibles : 1 et 2 unités.\n    * La fonction détermine combien de combinaisons distinctes de ces pièces peuvent totaliser la valeur du billet.\n    * Exemple : Pour un billet de valeur 4, il y a 5 façons :\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Entrée : Un entier représentant la valeur du billet.\n    * Sortie : Retourne le nombre de façons différentes d'échanger le billet en pièces.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "de": "<?php\n\n/**\n    * Berechnet die Anzahl der verschiedenen Möglichkeiten, einen Geldschein in Münzen zu wechseln.\n    * Gegeben ist ein Geldschein mit dem Wert N (1 <= N <= 10), es stehen zwei Arten von Münzen zur Verfügung: 1 und 2 Einheiten.\n    * Die Funktion bestimmt, wie viele unterschiedliche Kombinationen dieser Münzen den Wert des Scheins ergeben können.\n    * Beispiel: Für einen Schein mit dem Wert 4 gibt es 5 Möglichkeiten:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Eingabe: Eine ganze Zahl, die den Wert des Scheins darstellt.\n    * Ausgabe: Gibt die Anzahl der verschiedenen Möglichkeiten zurück, den Schein in Münzen zu wechseln.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "ha": "<?php\n\n/**\n    * Lissafa adadin hanyoyi daban-daban don musanya takardar kudi zuwa tsabar kudi.\n    * An ba da takardar kudi mai darajar N (1 <= N <= 10), akwai nau'ikan tsabar kudi guda biyu da ake da su: 1 da 2 raka'a.\n    * Aikin yana tantance yawan haɗuwa daban-daban na waɗannan tsabar kudin da za su iya kaiwa ga darajar takardar kudin.\n    * Misali: Don takardar kudi mai darajar 4, akwai hanyoyi 5:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Shigarwa: Lamba ɗaya da ke wakiltar darajar takardar kudin.\n    * Fitarwa: Yana dawo da adadin hanyoyi daban-daban don musanya takardar kudin zuwa tsabar kudi.\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hi": "<?php\n\n/**\n    * कागजी नोट को सिक्कों में बदलने के विभिन्न तरीकों की संख्या की गणना करता है।\n    * दिए गए कागजी नोट का मूल्य N (1 <= N <= 10) है, और दो प्रकार के सिक्के उपलब्ध हैं: 1 और 2 इकाइयाँ।\n    * यह फ़ंक्शन निर्धारित करता है कि इन सिक्कों के कितने भिन्न संयोजन इस नोट के मूल्य के बराबर हो सकते हैं।\n    * उदाहरण: मूल्य 4 के नोट के लिए, 5 तरीके हैं:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * इनपुट: नोट के मूल्य का प्रतिनिधित्व करने वाला एक पूर्णांक।\n    * आउटपुट: नोट को सिक्कों में बदलने के विभिन्न तरीकों की संख्या लौटाता है।\n*/\nfunction countCoinExchangeWays($billValue) ",
      "hu": "<?php\n\n/**\n    * Kiszámítja, hányféleképpen lehet egy papírpénzt érmékre váltani.\n    * Adott egy N értékű papírpénz (1 <= N <= 10), kétféle érme áll rendelkezésre: 1 és 2 egység.\n    * A függvény meghatározza, hogy ezekből az érmékből hány különböző kombináció adja ki a papírpénz értékét.\n    * Példa: Egy 4 értékű papírpénz esetén 5 mód van:\n    * 4 = 1 + 1 + 1 + 1\n    * 4 = 2 + 1 + 1\n    * 4 = 1 + 2 + 1\n    * 4 = 1 + 1 + 2\n    * 4 = 2 + 2\n    * Bemenet: Egy egész szám, amely a papírpénz értékét jelöli.\n    * Kimenet: Visszaadja, hányféleképpen lehet a papírpénzt érmékre váltani.\n*/\nfunction countCoinExchangeWays($billValue) "
    },
    "prompt_bertscore": {
      "sq": "0.9694577980905514",
      "hy": "0.9613131579465969",
      "bn": "0.9543537452862775",
      "bg": "0.9606602598841352",
      "zh": "0.959218799208965",
      "fr": "0.9759528129200112",
      "de": "0.9677493781832703",
      "ha": "0.9548517116515319",
      "hi": "0.949870260325558",
      "hu": "0.9552638696921794"
    },
    "canonical_solution": "{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}",
    "instruction": {
      "en": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nSiguroni një përshkrim të shkurtër në gjuhën natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nՏվեք PHP կոդի հակիրճ բնական լեզվով նկարագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 символа.",
      "zh": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nBa da takaitaccen bayanin yare na halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function countCoinExchangeWays($billValue)\n{\n    // Base case: When bill value is 0\n    if ($billValue == 1) {\n        return 1;\n    }\n\n    // When bill value becomes negative, no valid combination\n    if ($billValue == 2) {\n        return 2;\n    }\n\n    // Count combinations by subtracting 1 and 2 from the current bill value\n    return countCoinExchangeWays($billValue - 1) + countCoinExchangeWays($billValue - 2);\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9608588902651701",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9314149157324635"
    },
    "level": "",
    "test": "function main(){\n    assert(countCoinExchangeWays(4) === 5);\n    assert(countCoinExchangeWays(3) === 3);\n    assert(countCoinExchangeWays(2) === 2);\n    assert(countCoinExchangeWays(1) === 1);\n}\n\nmain();\n?>",
    "entry_point": "countCoinExchangeWays",
    "signature": "function countCoinExchangeWays($billValue)",
    "docstring": {
      "en": "Calculates the number of different ways to exchange a paper bill into coins.\nGiven a paper bill of value N (1 <= N <= 10), there are two types of coins available: 1 and 2 units.\nThe function determines how many distinct combinations of these coins can sum up to the value of the bill.\nExample: For a bill of value 4, there are 5 ways:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nInput: An integer representing the bill value.\nOutput: Returns the number of different ways to exchange the bill into coins.",
      "sq": "Llogarit numrin e mënyrave të ndryshme për të shkëmbyer një kartëmonedhë në monedha.  \nDuke pasur një kartëmonedhë me vlerë N (1 <= N <= 10), ka dy lloje monedhash të disponueshme: 1 dhe 2 njësi.  \nFunksioni përcakton sa kombinime të ndryshme të këtyre monedhave mund të arrijnë vlerën e kartëmonedhës.  \nShembull: Për një kartëmonedhë me vlerë 4, ka 5 mënyra:  \n4 = 1 + 1 + 1 + 1  \n4 = 2 + 1 + 1  \n4 = 1 + 2 + 1  \n4 = 1 + 1 + 2  \n4 = 2 + 2  \nInput: Një numër i plotë që përfaqëson vlerën e kartëmonedhës.  \nOutput: Kthen numrin e mënyrave të ndryshme për të shkëmbyer kartëmonedhën në monedha.  ",
      "hy": "Հաշվում է թղթադրամը մետաղադրամների փոխանակելու տարբեր եղանակների քանակը:\nՏրված է արժեքով N (1 <= N <= 10) թղթադրամ, առկա են երկու տեսակի մետաղադրամներ՝ 1 և 2 միավոր:\nՖունկցիան որոշում է, թե քանի տարբեր կոմբինացիաներ կարող են այդ մետաղադրամներով գումարվել թղթադրամի արժեքին:\nՕրինակ: 4 արժեքով թղթադրամի համար կա 5 եղանակ.\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nՄուտք: Թղթադրամի արժեքը ներկայացնող ամբողջ թիվ:\nԵլք: Վերադարձնում է թղթադրամը մետաղադրամներով փոխանակելու տարբեր եղանակների քանակը:",
      "bn": "কাগজের নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা গণনা করে। \nধরা যাক একটি কাগজের নোটের মান N (1 <= N <= 10), এখানে দুটি প্রকারের কয়েন পাওয়া যায়: 1 এবং 2 ইউনিট। \nএই ফাংশন নির্ধারণ করে যে এই কয়েনগুলির কতগুলি ভিন্ন সংমিশ্রণ নোটের মূল্যের সমান হতে পারে। \nউদাহরণ: 4 মানের একটি নোটের জন্য, 5টি উপায় রয়েছে:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nইনপুট: নোটের মানকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\nআউটপুট: নোটকে কয়েনে বিনিময় করার বিভিন্ন উপায়ের সংখ্যা প্রদান করে।",
      "bg": "Изчислява броя на различните начини за размяна на банкнота в монети.  \nДадена е банкнота със стойност N (1 <= N <= 10), като са налични два вида монети: 1 и 2 единици.  \nФункцията определя колко различни комбинации от тези монети могат да съставят стойността на банкнотата.  \nПример: За банкнота със стойност 4, има 5 начина:  \n4 = 1 + 1 + 1 + 1  \n4 = 2 + 1 + 1  \n4 = 1 + 2 + 1  \n4 = 1 + 1 + 2  \n4 = 2 + 2  \nВход: Цяло число, представляващо стойността на банкнотата.  \nИзход: Връща броя на различните начини за размяна на банкнотата в монети.",
      "zh": "计算将纸币兑换成硬币的不同方式数量。\n给定面值为 N (1 <= N <= 10) 的纸币，有两种类型的硬币可用：1 和 2 单位。\n该函数确定这些硬币可以组合成纸币面值的不同组合数量。\n示例：对于面值为 4 的纸币，有 5 种方式：\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\n输入：一个表示纸币面值的整数。\n输出：返回将纸币兑换成硬币的不同方式数量。",
      "fr": "Calcule le nombre de façons différentes d'échanger un billet en papier en pièces de monnaie.\nÉtant donné un billet en papier de valeur N (1 <= N <= 10), il existe deux types de pièces disponibles : 1 et 2 unités.\nLa fonction détermine combien de combinaisons distinctes de ces pièces peuvent totaliser la valeur du billet.\nExemple : Pour un billet de valeur 4, il y a 5 façons :\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEntrée : Un entier représentant la valeur du billet.\nSortie : Retourne le nombre de façons différentes d'échanger le billet en pièces de monnaie.",
      "de": "Berechnet die Anzahl der verschiedenen Möglichkeiten, einen Geldschein in Münzen zu tauschen.\nGegeben ist ein Geldschein mit dem Wert N (1 <= N <= 10), es stehen zwei Arten von Münzen zur Verfügung: 1 und 2 Einheiten.\nDie Funktion bestimmt, wie viele unterschiedliche Kombinationen dieser Münzen den Wert des Scheins ergeben können.\nBeispiel: Für einen Schein mit dem Wert 4 gibt es 5 Möglichkeiten:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nEingabe: Eine ganze Zahl, die den Wert des Scheins darstellt.\nAusgabe: Gibt die Anzahl der verschiedenen Möglichkeiten zurück, den Schein in Münzen zu tauschen.",
      "ha": "Yana ƙididdige yawan hanyoyin daban-daban don musanya takardar kuɗi zuwa tsabar kuɗi.\nAn ba da takardar kuɗi mai darajar N (1 <= N <= 10), akwai nau'ikan tsabar kuɗi guda biyu da ake da su: 1 da 2 raka'a.\nAikin yana ƙayyade yawan haɗakarwa daban-daban na waɗannan tsabar kuɗi da za su iya kaiwa ga darajar takardar kuɗin.\nMisali: Don takardar kuɗi mai darajar 4, akwai hanyoyi 5:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nShigarwa: Lamba ɗaya da ke wakiltar darajar takardar kuɗi.\nFitarwa: Yana mayar da yawan hanyoyin daban-daban don musanya takardar kuɗin zuwa tsabar kuɗi.",
      "hi": "कागज़ के बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या की गणना करता है।\nदिए गए कागज़ के बिल का मान N (1 <= N <= 10) है, और दो प्रकार के सिक्के उपलब्ध हैं: 1 और 2 इकाइयाँ।\nयह फ़ंक्शन यह निर्धारित करता है कि इन सिक्कों के कितने विशिष्ट संयोजन बिल के मान तक जोड़ सकते हैं।\nउदाहरण: मान 4 के बिल के लिए, 5 तरीके हैं:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nइनपुट: बिल के मान का प्रतिनिधित्व करने वाला एक पूर्णांक।\nआउटपुट: बिल को सिक्कों में बदलने के विभिन्न तरीकों की संख्या लौटाता है।",
      "hu": "Számítja a papírpénz érmékre váltásának különböző módjait.\nAdott egy N értékű papírpénz (1 <= N <= 10), kétféle érme áll rendelkezésre: 1 és 2 egység.\nA függvény meghatározza, hány különböző kombinációja van ezeknek az érméknek, amelyek összege megegyezik a papírpénz értékével.\nPélda: Egy 4 értékű papírpénz esetén 5 mód van:\n4 = 1 + 1 + 1 + 1\n4 = 2 + 1 + 1\n4 = 1 + 2 + 1\n4 = 1 + 1 + 2\n4 = 2 + 2\nBemenet: Egy egész szám, amely a papírpénz értékét jelenti.\nKimenet: Visszaadja a papírpénz érmékre váltásának különböző módjainak számát."
    },
    "docstring_bertscore": {
      "sq": "0.9191890171493851",
      "hy": "0.92516679846663",
      "bn": "0.9270599446282736",
      "bg": "0.9127166461833632",
      "zh": "0.8977041619847463",
      "fr": "0.9812479016176393",
      "de": "0.9297982630612205",
      "ha": "0.9106306299217348",
      "hi": "0.9603581430745811",
      "hu": "0.9379284031873595"
    }
  },
  {
    "task_id": "PHP/8",
    "prompt": {
      "en": "<?php\n\n/**\n * Compares two playing cards to determine which one is higher based on a given trump suit.\n * In this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\n * The trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\n * The rules for comparison are as follows:\n * - If neither card is of the trump suit, the card with the higher rank wins.\n * - If both cards are of the trump suit, the card with the higher rank wins.\n * - If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n * - If both cards have the same rank, the result is a draw.\n * Input: The trump suit and two card strings.\n * Output: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "sq": "<?php\n\n/**\n * Krahason dy letra loje për të përcaktuar se cila është më e lartë bazuar në një ngjyrë të caktuar trumfi.\n * Në këtë lojë, secila letër përfaqësohet nga ngjyra dhe rangu i saj (p.sh., '8D', 'QS').\n * Ngjyra e trumfit është një nga katër ngjyrat: Shpatat (S), Zemrat (H), Diamantet (D), ose Klubet (C).\n * Rregullat për krahasim janë si më poshtë:\n * - Nëse asnjëra letër nuk është e ngjyrës së trumfit, letra me rangun më të lartë fiton.\n * - Nëse të dyja letrat janë të ngjyrës së trumfit, letra me rangun më të lartë fiton.\n * - Nëse njëra letër është e ngjyrës së trumfit dhe tjetra nuk është, letra e ngjyrës së trumfit fiton pavarësisht nga rangu.\n * - Nëse të dyja letrat kanë të njëjtin rang, rezultati është barazim.\n * Input: Ngjyra e trumfit dhe dy vargje letrash.\n * Output: Kthen 1 nëse letra e parë fiton, -1 nëse letra e dytë fiton, dhe 0 për barazim.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hy": "<?php\n\n/**\n * Համեմատում է երկու խաղաթուղթ՝ որոշելու, թե որն է ավելի բարձր՝ հիմնվելով տրված թրոմփի վրա։\n * Այս խաղում յուրաքանչյուր քարտ ներկայացված է իր սյուտով և աստիճանով (օրինակ՝ '8D', 'QS')։\n * Թրոմփի սյուտը չորս սյուտներից մեկն է՝ Սպեյդ (S), Սիրտ (H), Ակն (D) կամ Խաչ (C)։\n * Համեմատման կանոններն են հետևյալը.\n * - Եթե ոչ մի քարտ չի պատկանում թրոմփի սյուտին, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է։\n * - Եթե երկու քարտերն էլ պատկանում են թրոմփի սյուտին, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է։\n * - Եթե մեկ քարտ պատկանում է թրոմփի սյուտին, իսկ մյուսը՝ ոչ, ապա թրոմփի սյուտի քարտը հաղթում է անկախ աստիճանից։\n * - Եթե երկու քարտերն էլ ունեն նույն աստիճանը, ապա արդյունքը ոչ-ոքի է։\n * Մուտք: Թրոմփի սյուտը և երկու քարտի տողեր։\n * Ելք: Վերադարձնում է 1, եթե առաջին քարտը հաղթում է, -1, եթե երկրորդ քարտը հաղթում է, և 0՝ ոչ-ոքիի դեպքում։\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "bn": "<?php\n\n/**\n * দুটি তাসের কার্ড তুলনা করে কোনটি উচ্চতর তা নির্ধারণ করা হয় একটি নির্দিষ্ট ট্রাম্প স্যুটের ভিত্তিতে।\n * এই খেলায়, প্রতিটি কার্ড তার স্যুট এবং র‍্যাঙ্ক দ্বারা উপস্থাপিত হয় (যেমন, '8D', 'QS')।\n * ট্রাম্প স্যুট চারটি স্যুটের একটি: স্পেডস (S), হার্টস (H), ডায়মন্ডস (D), বা ক্লাবস (C)।\n * তুলনার নিয়মাবলী নিম্নরূপ:\n * - যদি কোন কার্ডই ট্রাম্প স্যুটের না হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n * - যদি উভয় কার্ডই ট্রাম্প স্যুটের হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n * - যদি একটি কার্ড ট্রাম্প স্যুটের হয় এবং অন্যটি না হয়, তাহলে ট্রাম্প স্যুটের কার্ডটি র‍্যাঙ্ক নির্বিশেষে জেতে।\n * - যদি উভয় কার্ডের র‍্যাঙ্ক একই হয়, তাহলে ফলাফল ড্র হয়।\n * ইনপুট: ট্রাম্প স্যুট এবং দুটি কার্ড স্ট্রিং।\n * আউটপুট: প্রথম কার্ডটি জিতলে 1 ফেরত দেয়, দ্বিতীয় কার্ডটি জিতলে -1 ফেরত দেয়, এবং ড্র হলে 0 ফেরত দেয়।\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "bg": "<?php\n\n/**\n * Сравнява две игрални карти, за да определи коя е по-висока въз основа на дадена козова боя.\n * В тази игра всяка карта е представена чрез нейната боя и ранг (напр. '8D', 'QS').\n * Козовата боя е една от четирите бои: Пика (S), Купа (H), Каро (D) или Спатия (C).\n * Правилата за сравнение са следните:\n * - Ако нито една от картите не е от козовата боя, картата с по-висок ранг печели.\n * - Ако и двете карти са от козовата боя, картата с по-висок ранг печели.\n * - Ако едната карта е от козовата боя, а другата не е, картата от козовата боя печели независимо от ранга.\n * - Ако и двете карти имат еднакъв ранг, резултатът е равенство.\n * Вход: Козовата боя и два стринга на карти.\n * Изход: Връща 1, ако първата карта печели, -1, ако втората карта печели, и 0 за равенство.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "zh": "<?php\n\n/**\n * 比较两张扑克牌以确定哪一张更大，基于给定的王牌花色。\n * 在这个游戏中，每张牌由其花色和点数表示（例如，'8D', 'QS'）。\n * 王牌花色是四种花色之一：黑桃 (S)，红心 (H)，方块 (D)，或梅花 (C)。\n * 比较规则如下：\n * - 如果两张牌都不是王牌花色，则点数较高的牌获胜。\n * - 如果两张牌都是王牌花色，则点数较高的牌获胜。\n * - 如果一张牌是王牌花色而另一张不是，则无论点数如何，王牌花色的牌获胜。\n * - 如果两张牌点数相同，结果为平局。\n * 输入：王牌花色和两张牌的字符串。\n * 输出：如果第一张牌获胜返回 1，如果第二张牌获胜返回 -1，平局返回 0。\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "fr": "<?php\n\n/**\n * Compare deux cartes à jouer pour déterminer laquelle est la plus haute en fonction d'un atout donné.\n * Dans ce jeu, chaque carte est représentée par sa couleur et son rang (par exemple, '8D', 'QS').\n * L'atout est l'une des quatre couleurs : Piques (S), Cœurs (H), Carreaux (D), ou Trèfles (C).\n * Les règles de comparaison sont les suivantes :\n * - Si aucune des cartes n'est de l'atout, la carte avec le rang le plus élevé gagne.\n * - Si les deux cartes sont de l'atout, la carte avec le rang le plus élevé gagne.\n * - Si une carte est de l'atout et l'autre ne l'est pas, la carte d'atout gagne quel que soit le rang.\n * - Si les deux cartes ont le même rang, le résultat est une égalité.\n * Entrée : L'atout et deux chaînes de caractères représentant les cartes.\n * Sortie : Retourne 1 si la première carte gagne, -1 si la deuxième carte gagne, et 0 pour une égalité.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "de": "<?php\n\n/**\n * Vergleicht zwei Spielkarten, um festzustellen, welche höher ist, basierend auf einer gegebenen Trumpffarbe.\n * In diesem Spiel wird jede Karte durch ihre Farbe und ihren Rang dargestellt (z.B. '8D', 'QS').\n * Die Trumpffarbe ist eine der vier Farben: Pik (S), Herz (H), Karo (D) oder Kreuz (C).\n * Die Regeln für den Vergleich sind wie folgt:\n * - Wenn keine der Karten die Trumpffarbe hat, gewinnt die Karte mit dem höheren Rang.\n * - Wenn beide Karten die Trumpffarbe haben, gewinnt die Karte mit dem höheren Rang.\n * - Wenn eine Karte die Trumpffarbe hat und die andere nicht, gewinnt die Karte mit der Trumpffarbe unabhängig vom Rang.\n * - Wenn beide Karten den gleichen Rang haben, ist das Ergebnis ein Unentschieden.\n * Eingabe: Die Trumpffarbe und zwei Kartenstrings.\n * Ausgabe: Gibt 1 zurück, wenn die erste Karte gewinnt, -1 wenn die zweite Karte gewinnt, und 0 für ein Unentschieden.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "ha": "<?php\n\n/**\n * Kwatanta katunan wasa guda biyu don tantance wanda ya fi girma bisa ga wata alama ta musamman.\n * A cikin wannan wasan, kowane kati yana wakiltar alama da matsayi (misali, '8D', 'QS').\n * Alamar ta musamman tana daya daga cikin alamomi hudu: Spades (S), Hearts (H), Diamonds (D), ko Clubs (C).\n * Dokokin kwatantawa sune kamar haka:\n * - Idan babu wani kati da yake da alamar ta musamman, katin da ke da matsayi mafi girma yana cin nasara.\n * - Idan dukkan katunan suna da alamar ta musamman, katin da ke da matsayi mafi girma yana cin nasara.\n * - Idan kati daya yana da alamar ta musamman kuma dayan ba shi da ita, katin da ke da alamar ta musamman yana cin nasara duk da matsayi.\n * - Idan dukkan katunan suna da matsayi daya, sakamakon shi ne kunnen doki.\n * Shigarwa: Alamar ta musamman da katunan guda biyu.\n * Fitarwa: Yana dawo da 1 idan katin farko ya ci nasara, -1 idan katin na biyu ya ci nasara, kuma 0 idan kunnen doki.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hi": "<?php\n\n/**\n * दो ताश के पत्तों की तुलना करता है यह निर्धारित करने के लिए कि कौन सा पत्ता दिए गए ट्रम्प सूट के आधार पर उच्च है।\n * इस खेल में, प्रत्येक पत्ता उसके सूट और रैंक द्वारा दर्शाया जाता है (जैसे, '8D', 'QS')।\n * ट्रम्प सूट चार सूट में से एक है: स्पेड्स (S), हार्ट्स (H), डायमंड्स (D), या क्लब्स (C)।\n * तुलना के नियम इस प्रकार हैं:\n * - यदि कोई भी पत्ता ट्रम्प सूट का नहीं है, तो उच्च रैंक वाला पत्ता जीतता है।\n * - यदि दोनों पत्ते ट्रम्प सूट के हैं, तो उच्च रैंक वाला पत्ता जीतता है।\n * - यदि एक पत्ता ट्रम्प सूट का है और दूसरा नहीं है, तो ट्रम्प सूट वाला पत्ता रैंक की परवाह किए बिना जीतता है।\n * - यदि दोनों पत्तों की रैंक समान है, तो परिणाम ड्रॉ होता है।\n * इनपुट: ट्रम्प सूट और दो पत्तों की स्ट्रिंग्स।\n * आउटपुट: 1 लौटाता है यदि पहला पत्ता जीतता है, -1 यदि दूसरा पत्ता जीतता है, और 0 ड्रॉ के लिए।\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) ",
      "hu": "<?php\n\n/**\n * Két játékkártyát hasonlít össze annak meghatározására, hogy melyik a magasabb egy adott aduszín alapján.\n * Ebben a játékban minden kártya a színével és rangjával van ábrázolva (pl. '8D', 'QS').\n * Az aduszín a négy szín egyike: Pikk (S), Kőr (H), Káró (D) vagy Treff (C).\n * Az összehasonlítás szabályai a következők:\n * - Ha egyik kártya sem aduszínű, a magasabb rangú kártya nyer.\n * - Ha mindkét kártya aduszínű, a magasabb rangú kártya nyer.\n * - Ha az egyik kártya aduszínű, a másik pedig nem, az aduszínű kártya nyer, függetlenül a rangtól.\n * - Ha mindkét kártya azonos rangú, az eredmény döntetlen.\n * Bemenet: Az aduszín és két kártya string.\n * Kimenet: 1-et ad vissza, ha az első kártya nyer, -1-et, ha a második kártya nyer, és 0-t döntetlen esetén.\n */\n\nfunction compareCards($trumpSuit, $card1, $card2) "
    },
    "prompt_bertscore": {
      "sq": "0.9875949368132281",
      "hy": "0.972541336125737",
      "bn": "0.9797923381854157",
      "bg": "0.9875949368132281",
      "zh": "0.9773128351389572",
      "fr": "0.9582389555393199",
      "de": "0.9767910331279784",
      "ha": "0.9510366179229949",
      "hi": "0.9835130824829612",
      "hu": "0.9892523087125832"
    },
    "canonical_solution": "{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}",
    "instruction": {
      "en": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nՏվյալ PHP կոդի համար տրամադրել հակիրճ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 знака.",
      "zh": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nBa da takaitaccen bayanin yanayi (docstring) na lambar PHP cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function compareCards($trumpSuit, $card1, $card2)\n{\n    // Function to convert card rank to numerical value\n    $getNumericRank = function($card) {\n        $rank = substr($card, 0, -1);\n        switch ($rank) {\n            case 'A': return 14;\n            case 'K': return 13;\n            case 'Q': return 12;\n            case 'J': return 11;\n            default: return intval($rank);\n        }\n    };\n\n    $rank1 = $getNumericRank($card1);\n    $rank2 = $getNumericRank($card2);\n    $suit1 = substr($card1, -1);\n    $suit2 = substr($card2, -1);\n\n    $isTrump1 = $suit1 === $trumpSuit;\n    $isTrump2 = $suit2 === $trumpSuit;\n\n    if ($isTrump1 && !$isTrump2) {\n        return 1;\n    } elseif (!$isTrump1 && $isTrump2) {\n        return -1;\n    } elseif ($rank1 === $rank2) {\n        return 0;\n    } elseif ($rank1 > $rank2) {\n        return 1;\n    } else {\n        return -1;\n    }\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8866621004726359",
      "bn": "0.8743148387267452",
      "bg": "0.8358939162203464",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8392408846739856",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(compareCards('S', '8D', '3S') === -1); \n    assert(compareCards('S', '8D', '9S') === -1); // Non-trump vs trump\n    assert(compareCards('H', '8H', '7H') === 1);  // Both trump, first higher\n    assert(compareCards('D', '9C', '9S') === 0);  // Same rank, non-trump\n    assert(compareCards('C', 'QH', 'JS') === 1);  // Neither trump, first higher\n    assert(compareCards('D', 'KD', 'AD') === -1); // Both trump, second higher\n\n}\nmain();\n?>",
    "entry_point": "compareCards",
    "signature": "function compareCards($trumpSuit, $card1, $card2)",
    "docstring": {
      "en": "Compares two playing cards to determine which one is higher based on a given trump suit.\nIn this game, each card is represented by its suit and rank (e.g., '8D', 'QS').\nThe trump suit is one of the four suits: Spades (S), Hearts (H), Diamonds (D), or Clubs (C).\nThe rules for comparison are as follows:\n- If neither card is of the trump suit, the card with the higher rank wins.\n- If both cards are of the trump suit, the card with the higher rank wins.\n- If one card is of the trump suit and the other is not, the trump suit card wins regardless of rank.\n- If both cards have the same rank, the result is a draw.\nInput: The trump suit and two card strings.\nOutput: Returns 1 if the first card wins, -1 if the second card wins, and 0 for a draw.",
      "sq": "Krahason dy letra loje për të përcaktuar se cila është më e lartë bazuar në një ngjyrë të caktuar trumfi. Në këtë lojë, secila letër përfaqësohet nga ngjyra dhe rangu i saj (p.sh., '8D', 'QS'). Ngjyra e trumfit është një nga katër ngjyrat: Shpata (S), Zemra (H), Karo (D) ose Trefla (C). Rregullat për krahasimin janë si më poshtë: \n- Nëse asnjëra letër nuk është e ngjyrës së trumfit, letra me rangun më të lartë fiton. \n- Nëse të dyja letrat janë të ngjyrës së trumfit, letra me rangun më të lartë fiton. \n- Nëse njëra letër është e ngjyrës së trumfit dhe tjetra nuk është, letra e ngjyrës së trumfit fiton pavarësisht nga rangu. \n- Nëse të dyja letrat kanë të njëjtin rang, rezultati është barazim. \nInput: Ngjyra e trumfit dhe dy vargje letrash. \nOutput: Kthen 1 nëse letra e parë fiton, -1 nëse letra e dytë fiton, dhe 0 për barazim.",
      "hy": "Համեմատում է երկու խաղաթղթեր՝ որոշելու, թե որն է ավելի բարձր՝ հիմնված տրված տրյուֆելային կոստյումի վրա:\nԱյս խաղում յուրաքանչյուր քարտ ներկայացվում է իր կոստյումով և աստիճանով (օրինակ՝ '8D', 'QS'):\nՏրյուֆելային կոստյումը չորս կոստյումներից մեկն է՝ Սպադ (S), Սրտեր (H), Ակն (D) կամ Խաչ (C):\nՀամեմատության կանոններն են հետևյալը.\n- Եթե ոչ մի քարտ տրյուֆելային կոստյումից չէ, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է:\n- Եթե երկու քարտերն էլ տրյուֆելային կոստյումից են, ապա ավելի բարձր աստիճան ունեցող քարտը հաղթում է:\n- Եթե մեկ քարտը տրյուֆելային կոստյումից է, իսկ մյուսը՝ ոչ, ապա տրյուֆելային կոստյումի քարտը հաղթում է անկախ աստիճանից:\n- Եթե երկու քարտերն էլ ունեն նույն աստիճանը, ապա արդյունքը ոչ-ոքի է:\nՄուտք: Տրյուֆելային կոստյումը և երկու քարտի տողեր:\nԵլք: Վերադարձնում է 1, եթե առաջին քարտը հաղթում է, -1, եթե երկրորդ քարտը հաղթում է, և 0՝ ոչ-ոքիի դեպքում:",
      "bn": "দুটি তাসের কার্ড তুলনা করে নির্ধারণ করা হয় কোনটি একটি নির্দিষ্ট ট্রাম্প স্যুটের ভিত্তিতে উচ্চতর।\nএই খেলায়, প্রতিটি কার্ড তার স্যুট এবং র‍্যাঙ্ক দ্বারা উপস্থাপিত হয় (যেমন, '8D', 'QS')।\nট্রাম্প স্যুট চারটি স্যুটের মধ্যে একটি: স্পেডস (S), হার্টস (H), ডায়মন্ডস (D), বা ক্লাবস (C)।\nতুলনার নিয়মগুলি নিম্নরূপ:\n- যদি কোন কার্ডই ট্রাম্প স্যুটের না হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n- যদি উভয় কার্ডই ট্রাম্প স্যুটের হয়, তাহলে উচ্চতর র‍্যাঙ্কের কার্ডটি জেতে।\n- যদি একটি কার্ড ট্রাম্প স্যুটের হয় এবং অন্যটি না হয়, তাহলে ট্রাম্প স্যুটের কার্ডটি র‍্যাঙ্ক নির্বিশেষে জেতে।\n- যদি উভয় কার্ডের র‍্যাঙ্ক একই হয়, তাহলে ফলাফল ড্র হয়।\nইনপুট: ট্রাম্প স্যুট এবং দুটি কার্ড স্ট্রিং।\nআউটপুট: 1 ফেরত দেয় যদি প্রথম কার্ডটি জেতে, -1 যদি দ্বিতীয় কার্ডটি জেতে, এবং 0 ড্র এর জন্য।",
      "bg": "Сравнява две игрални карти, за да определи коя е по-висока въз основа на дадена козова боя. В тази игра всяка карта е представена чрез нейната боя и ранг (например, '8D', 'QS'). Козовата боя е една от четирите бои: Пики (S), Купи (H), Каро (D) или Спатия (C). Правилата за сравнение са следните: - Ако нито една от картите не е от козовата боя, картата с по-висок ранг печели. - Ако и двете карти са от козовата боя, картата с по-висок ранг печели. - Ако едната карта е от козовата боя, а другата не е, картата от козовата боя печели независимо от ранга. - Ако и двете карти имат еднакъв ранг, резултатът е равен. Вход: Козовата боя и два стринга на карти. Изход: Връща 1, ако първата карта печели, -1, ако втората карта печели, и 0 за равенство.",
      "zh": "比较两张扑克牌以确定哪一张更高，基于给定的王牌花色。\n在这个游戏中，每张牌由其花色和点数表示（例如，'8D', 'QS'）。\n王牌花色是四种花色之一：黑桃 (S)、红心 (H)、方块 (D) 或梅花 (C)。\n比较规则如下：\n- 如果两张牌都不是王牌花色，则点数较高的牌获胜。\n- 如果两张牌都是王牌花色，则点数较高的牌获胜。\n- 如果一张牌是王牌花色而另一张不是，则无论点数如何，王牌花色的牌获胜。\n- 如果两张牌点数相同，则结果为平局。\n输入：王牌花色和两个牌字符串。\n输出：如果第一张牌获胜，返回 1；如果第二张牌获胜，返回 -1；平局返回 0。",
      "fr": "Compare deux cartes à jouer pour déterminer laquelle est la plus haute en fonction d'un atout donné.\nDans ce jeu, chaque carte est représentée par sa couleur et sa valeur (par exemple, '8D', 'QS').\nL'atout est l'une des quatre couleurs : Piques (S), Cœurs (H), Carreaux (D) ou Trèfles (C).\nLes règles de comparaison sont les suivantes :\n- Si aucune des cartes n'est de la couleur de l'atout, la carte avec la valeur la plus haute gagne.\n- Si les deux cartes sont de la couleur de l'atout, la carte avec la valeur la plus haute gagne.\n- Si une carte est de la couleur de l'atout et l'autre ne l'est pas, la carte de l'atout gagne indépendamment de la valeur.\n- Si les deux cartes ont la même valeur, le résultat est une égalité.\nEntrée : La couleur de l'atout et deux chaînes de caractères représentant les cartes.\nSortie : Renvoie 1 si la première carte gagne, -1 si la deuxième carte gagne, et 0 pour une égalité.",
      "de": "Vergleicht zwei Spielkarten, um festzustellen, welche höher ist, basierend auf einer gegebenen Trumpffarbe.\nIn diesem Spiel wird jede Karte durch ihre Farbe und ihren Rang dargestellt (z.B. '8D', 'QS').\nDie Trumpffarbe ist eine der vier Farben: Pik (S), Herz (H), Karo (D) oder Kreuz (C).\nDie Regeln für den Vergleich sind wie folgt:\n- Wenn keine der Karten die Trumpffarbe hat, gewinnt die Karte mit dem höheren Rang.\n- Wenn beide Karten die Trumpffarbe haben, gewinnt die Karte mit dem höheren Rang.\n- Wenn eine Karte die Trumpffarbe hat und die andere nicht, gewinnt die Karte mit der Trumpffarbe unabhängig vom Rang.\n- Wenn beide Karten den gleichen Rang haben, ist das Ergebnis ein Unentschieden.\nEingabe: Die Trumpffarbe und zwei Kartenstrings.\nAusgabe: Gibt 1 zurück, wenn die erste Karte gewinnt, -1, wenn die zweite Karte gewinnt, und 0 für ein Unentschieden.",
      "ha": "Kwatanta katunan wasa guda biyu don tantance wanda ya fi girma bisa ga wata alama ta trump da aka bayar.\nA cikin wannan wasan, kowace kati tana wakilta ta hanyar alama da matsayi (misali, '8D', 'QS').  \nAlamar trump ɗin tana ɗaya daga cikin alamomi huɗu: Spades (S), Hearts (H), Diamonds (D), ko Clubs (C).  \nDokokin kwatanta sune kamar haka:  \n- Idan babu kati ɗaya daga cikin alamar trump, katin da ke da matsayi mafi girma ya ci.  \n- Idan duk katunan suna daga cikin alamar trump, katin da ke da matsayi mafi girma ya ci.  \n- Idan kati ɗaya yana daga cikin alamar trump ɗin kuma ɗayan ba haka ba, katin alamar trump ya ci ba tare da la'akari da matsayi ba.  \n- Idan duk katunan suna da matsayi ɗaya, sakamakon shi ne kunnen doki.  \nInput: Alamar trump da katunan guda biyu.  \nOutput: Yana dawowa 1 idan katin farko ya ci, -1 idan katin na biyu ya ci, da 0 don kunnen doki.",
      "hi": "दो ताश के पत्तों की तुलना करता है ताकि यह निर्धारित किया जा सके कि दिए गए ट्रम्प सूट के आधार पर कौन सा पत्ता उच्च है।\nइस खेल में, प्रत्येक पत्ता उसके सूट और रैंक द्वारा दर्शाया जाता है (जैसे, '8D', 'QS')।\nट्रम्प सूट चार सूट में से एक है: स्पेड्स (S), हार्ट्स (H), डायमंड्स (D), या क्लब्स (C)।\nतुलना के नियम निम्नलिखित हैं:\n- यदि कोई भी पत्ता ट्रम्प सूट का नहीं है, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि दोनों पत्ते ट्रम्प सूट के हैं, तो उच्च रैंक वाला पत्ता जीतता है।\n- यदि एक पत्ता ट्रम्प सूट का है और दूसरा नहीं है, तो ट्रम्प सूट वाला पत्ता रैंक की परवाह किए बिना जीतता है।\n- यदि दोनों पत्तों की रैंक समान है, तो परिणाम ड्रॉ होता है।\nइनपुट: ट्रम्प सूट और दो पत्तों की स्ट्रिंग्स।\nआउटपुट: 1 लौटाता है यदि पहला पत्ता जीतता है, -1 यदि दूसरा पत्ता जीतता है, और 0 ड्रॉ के लिए।",
      "hu": "Összehasonlít két játékkártyát annak meghatározására, hogy melyik a magasabb egy adott adu szín alapján.\nEbben a játékban minden kártyát a színe és rangja képvisel (pl. '8D', 'QS').\nAz adu szín a négy szín egyike: pikk (S), kőr (H), káró (D) vagy treff (C).\nAz összehasonlítás szabályai a következők:\n- Ha egyik kártya sem adu színű, a magasabb rangú kártya nyer.\n- Ha mindkét kártya adu színű, a magasabb rangú kártya nyer.\n- Ha az egyik kártya adu színű, a másik pedig nem, az adu színű kártya nyer rangtól függetlenül.\n- Ha mindkét kártya azonos rangú, az eredmény döntetlen.\nBemenet: Az adu szín és két kártya string.\nKimenet: 1-et ad vissza, ha az első kártya nyer, -1-et, ha a második kártya nyer, és 0-t döntetlen esetén."
    },
    "docstring_bertscore": {
      "sq": "0.9901799125920162",
      "hy": "0.9566232960199822",
      "bn": "0.9765624095594073",
      "bg": "0.9835651236427924",
      "zh": "0.9703758677116947",
      "fr": "0.9720819040544033",
      "de": "0.9781627745394055",
      "ha": "0.9812991482559463",
      "hi": "0.9834487262395059",
      "hu": "0.9814667922975397"
    }
  },
  {
    "task_id": "PHP/9",
    "prompt": {
      "en": "<?php\n\n/**\n    * This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\n    * The sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\n    * The goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n    *\n    * Input: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\n    * Output: An integer representing the minimum number of 6x6xh packages required to ship the order.\n    *\n    * Example:\n    * For an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\n    * the function will calculate and return the minimum number of packages needed.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "sq": "<?php\n\n/**\n    * Kjo funksion llogarit numrin minimal të paketave 6x6xh të nevojshme për të dërguar një porosi të produkteve të madhësive të ndryshme.\n    * Madhësitë e produkteve variojnë nga 1x1 deri në 6x6, dhe secili produkt kërkon një sasi të caktuar hapësire në paketë.\n    * Qëllimi është të paketohen këto produkte në mënyrë efikase për të minimizuar numrin e paketave, duke reduktuar kostot e transportit.\n    *\n    * Hyrja: Gjashtë numra të plotë ($a, $b, $c, $d, $e, $f), secili që përfaqëson sasinë e produkteve nga madhësia 1x1 deri në 6x6.\n    * Dalja: Një numër i plotë që përfaqëson numrin minimal të paketave 6x6xh të nevojshme për të dërguar porosinë.\n    *\n    * Shembull:\n    * Për një porosi me 1 produkt të madhësisë 1x1, 2 produkte të madhësisë 2x2, dhe 1 produkt të madhësisë 3x3,\n    * funksioni do të llogarisë dhe kthejë numrin minimal të paketave të nevojshme.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hy": "<?php\n\n/**\n    * Այս ֆունկցիան հաշվարկում է 6x6xh չափսի փաթեթների նվազագույն քանակը, որը պահանջվում է տարբեր չափերի ապրանքների պատվերը առաքելու համար:\n    * Ապրանքների չափերը տատանվում են 1x1-ից մինչև 6x6, և յուրաքանչյուր ապրանք պահանջում է որոշակի տարածք փաթեթում:\n    * Նպատակն է արդյունավետորեն փաթեթավորել այս ապրանքները, որպեսզի նվազեցվի փաթեթների քանակը՝ նվազեցնելով առաքման ծախսերը:\n    *\n    * Մուտք: Վեց ամբողջ թիվ ($a, $b, $c, $d, $e, $f), որոնք ներկայացնում են 1x1-ից մինչև 6x6 չափսի ապրանքների քանակը:\n    * Ելք: Ամբողջ թիվ, որը ներկայացնում է պատվերը առաքելու համար պահանջվող 6x6xh փաթեթների նվազագույն քանակը:\n    *\n    * Օրինակ:\n    * Եթե պատվերը ներառում է 1 ապրանք 1x1 չափսի, 2 ապրանք 2x2 չափսի և 1 ապրանք 3x3 չափսի,\n    * ֆունկցիան կհաշվարկի և կվերադարձնի անհրաժեշտ փաթեթների նվազագույն քանակը:\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "bn": "<?php\n\n/**\n    * এই ফাংশনটি বিভিন্ন আকারের পণ্যের একটি অর্ডার পাঠানোর জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক 6x6xh প্যাকেজ গণনা করে।\n    * পণ্যের আকার 1x1 থেকে 6x6 পর্যন্ত হয়, এবং প্রতিটি পণ্য প্যাকেজে একটি নির্দিষ্ট পরিমাণ স্থান প্রয়োজন।\n    * লক্ষ্য হল এই পণ্যগুলি দক্ষতার সাথে প্যাক করা যাতে প্যাকেজের সংখ্যা কমানো যায়, যা শিপিং খরচ কমায়।\n    *\n    * ইনপুট: ছয়টি পূর্ণসংখ্যা ($a, $b, $c, $d, $e, $f), প্রতিটি 1x1 থেকে 6x6 আকারের পণ্যের পরিমাণ উপস্থাপন করে।\n    * আউটপুট: একটি পূর্ণসংখ্যা যা অর্ডার পাঠানোর জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক 6x6xh প্যাকেজ উপস্থাপন করে।\n    *\n    * উদাহরণ:\n    * যদি অর্ডারে 1x1 আকারের 1টি পণ্য, 2x2 আকারের 2টি পণ্য এবং 3x3 আকারের 1টি পণ্য থাকে,\n    * তাহলে ফাংশনটি প্রয়োজনীয় সর্বনিম্ন প্যাকেজের সংখ্যা গণনা করে এবং ফেরত দেবে।\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "bg": "<?php\n\n/**\n    * Тази функция изчислява минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчка от продукти с различни размери.\n    * Размерите на продуктите варират от 1x1 до 6x6, и всеки продукт изисква определено количество пространство в пакета.\n    * Целта е ефективно да се опаковат тези продукти, за да се минимизира броят на пакетите, намалявайки разходите за доставка.\n    *\n    * Вход: Шест цели числа ($a, $b, $c, $d, $e, $f), всяко представляващо количеството продукти от размер 1x1 до 6x6.\n    * Изход: Цяло число, представляващо минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчката.\n    *\n    * Пример:\n    * За поръчка с 1 продукт с размер 1x1, 2 продукта с размер 2x2 и 1 продукт с размер 3x3,\n    * функцията ще изчисли и върне минималния брой необходими пакети.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "zh": "<?php\n\n/**\n    * 此函数计算所需的最小6x6xh包裹数量，以运送各种尺寸的产品订单。\n    * 产品的尺寸范围从1x1到6x6，每个产品在包裹中需要一定的空间。\n    * 目标是有效地包装这些产品，以最小化包裹数量，从而降低运输成本。\n    *\n    * 输入：六个整数 ($a, $b, $c, $d, $e, $f)，每个整数表示从尺寸1x1到6x6的产品数量。\n    * 输出：一个整数，表示运送订单所需的最小6x6xh包裹数量。\n    *\n    * 示例：\n    * 对于一个包含1个尺寸为1x1的产品、2个尺寸为2x2的产品和1个尺寸为3x3的产品的订单，\n    * 该函数将计算并返回所需的最小包裹数量。\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "fr": "<?php\n\n/**\n    * Cette fonction calcule le nombre minimum de colis 6x6xh nécessaires pour expédier une commande de produits de différentes tailles.\n    * Les tailles des produits varient de 1x1 à 6x6, et chaque produit nécessite une certaine quantité d'espace dans le colis.\n    * L'objectif est d'emballer ces produits de manière efficace pour minimiser le nombre de colis, réduisant ainsi les coûts d'expédition.\n    *\n    * Entrée : Six entiers ($a, $b, $c, $d, $e, $f), chacun représentant la quantité de produits de taille 1x1 à 6x6.\n    * Sortie : Un entier représentant le nombre minimum de colis 6x6xh nécessaires pour expédier la commande.\n    *\n    * Exemple :\n    * Pour une commande avec 1 produit de taille 1x1, 2 produits de taille 2x2, et 1 produit de taille 3x3,\n    * la fonction calculera et renverra le nombre minimum de colis nécessaires.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "de": "<?php\n\n/**\n    * Diese Funktion berechnet die minimale Anzahl von 6x6xh Paketen, die benötigt werden, um eine Bestellung von Produkten verschiedener Größen zu versenden.\n    * Die Größen der Produkte reichen von 1x1 bis 6x6, und jedes Produkt benötigt eine bestimmte Menge an Platz im Paket.\n    * Das Ziel ist es, diese Produkte effizient zu verpacken, um die Anzahl der Pakete zu minimieren und die Versandkosten zu senken.\n    *\n    * Eingabe: Sechs ganze Zahlen ($a, $b, $c, $d, $e, $f), die jeweils die Menge der Produkte von Größe 1x1 bis 6x6 darstellen.\n    * Ausgabe: Eine ganze Zahl, die die minimale Anzahl von 6x6xh Paketen darstellt, die benötigt werden, um die Bestellung zu versenden.\n    *\n    * Beispiel:\n    * Für eine Bestellung mit 1 Produkt der Größe 1x1, 2 Produkten der Größe 2x2 und 1 Produkt der Größe 3x3,\n    * wird die Funktion die minimale Anzahl der benötigten Pakete berechnen und zurückgeben.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "ha": "<?php\n\n/**\n    * Wannan aikin yana ƙididdige mafi ƙarancin adadin fakitoci na 6x6xh da ake buƙata don jigilar oda na samfuran masu girma dabam-dabam.\n    * Girman samfuran yana daga 1x1 zuwa 6x6, kuma kowanne samfur yana buƙatar wani yanki na sarari a cikin fakitin.\n    * Manufar ita ce a cika waɗannan samfuran yadda ya kamata don rage adadin fakitoci, don rage kuɗin jigilar kaya.\n    *\n    * Shigarwa: Lamba shida ($a, $b, $c, $d, $e, $f), kowanne yana wakiltar adadin samfuran daga girman 1x1 zuwa 6x6.\n    * Fitarwa: Lamba daya da ke wakiltar mafi ƙarancin adadin fakitoci na 6x6xh da ake buƙata don jigilar odar.\n    *\n    * Misali:\n    * Don oda da ke da samfur daya na girman 1x1, samfura biyu na girman 2x2, da samfur daya na girman 3x3,\n    * aikin zai ƙididdige kuma ya dawo da mafi ƙarancin adadin fakitoci da ake buƙata.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hi": "<?php\n\n/**\n    * यह फ़ंक्शन विभिन्न आकार के उत्पादों के ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम 6x6xh पैकेजों की संख्या की गणना करता है।\n    * उत्पादों के आकार 1x1 से 6x6 तक होते हैं, और प्रत्येक उत्पाद पैकेज में एक निश्चित मात्रा में स्थान की आवश्यकता होती है।\n    * लक्ष्य इन उत्पादों को कुशलतापूर्वक पैक करना है ताकि पैकेजों की संख्या को कम किया जा सके, जिससे शिपिंग लागत कम हो सके।\n    *\n    * इनपुट: छह पूर्णांक ($a, $b, $c, $d, $e, $f), प्रत्येक 1x1 से 6x6 आकार के उत्पादों की मात्रा का प्रतिनिधित्व करता है।\n    * आउटपुट: एक पूर्णांक जो ऑर्डर को शिप करने के लिए आवश्यक न्यूनतम 6x6xh पैकेजों की संख्या का प्रतिनिधित्व करता है।\n    *\n    * उदाहरण:\n    * 1x1 आकार के 1 उत्पाद, 2x2 आकार के 2 उत्पाद, और 3x3 आकार के 1 उत्पाद के ऑर्डर के लिए,\n    * फ़ंक्शन आवश्यक पैकेजों की न्यूनतम संख्या की गणना करेगा और लौटाएगा।\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int ",
      "hu": "<?php\n\n/**\n    * Ez a függvény kiszámítja a szükséges 6x6xh méretű csomagok minimális számát különböző méretű termékek rendelésének szállításához.\n    * A termékek méretei 1x1-től 6x6-ig terjednek, és minden termék bizonyos helyet igényel a csomagban.\n    * A cél az, hogy hatékonyan csomagoljuk ezeket a termékeket, minimalizálva a csomagok számát, ezzel csökkentve a szállítási költségeket.\n    *\n    * Bemenet: Hat egész szám ($a, $b, $c, $d, $e, $f), amelyek az 1x1-től 6x6-ig terjedő méretű termékek mennyiségét jelölik.\n    * Kimenet: Egy egész szám, amely a rendelés szállításához szükséges 6x6xh méretű csomagok minimális számát jelöli.\n    *\n    * Példa:\n    * Egy rendelés esetén, amely 1 darab 1x1-es méretű, 2 darab 2x2-es méretű és 1 darab 3x3-as méretű terméket tartalmaz,\n    * a függvény kiszámítja és visszaadja a szükséges csomagok minimális számát.\n    */\n\nfunction calculateMinimumPackages($a, $b, $c, $d, $e, $f): int "
    },
    "prompt_bertscore": {
      "sq": "0.9957173303545068",
      "hy": "0.9553776849005123",
      "bn": "0.9781313909392019",
      "bg": "0.977892835851579",
      "zh": "0.9922478534889704",
      "fr": "0.9906218651898188",
      "de": "0.9972366541390426",
      "ha": "0.9845620495252064",
      "hi": "0.9902764469571991",
      "hu": "0.958848750809097"
    },
    "canonical_solution": "{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}",
    "instruction": {
      "en": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në gjuhën shqipe duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nPHP կոդի համար տրամադրեք կարճ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int\n{\n        $need2 = [0, 5, 3, 1];\n        $box = $f + $e + $d + intdiv($c + 3, 4);\n    \n        $need2num = $d * 5 + $need2[$c % 4];\n        if ($need2num < $b) {\n            $box += intdiv($b - $need2num + 8, 9);\n        }\n    \n        $need1num = $box * 36 - ($f * 36 + $e * 25 + $d * 16 + $c * 9 + $b * 4);\n        if ($need1num < $a) {\n            $box += intdiv($a - $need1num + 35, 36);\n        }\n        return $box;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.8827006161532761",
      "bn": "0.8680359337518513",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateMinimumPackages(0, 0, 4, 0, 0, 1) === 2);\n    assert(calculateMinimumPackages(7, 5, 1, 0, 0, 0) === 1);\n    assert(calculateMinimumPackages(0, 0, 0, 0, 0, 0) === 0);\n    assert(calculateMinimumPackages(0, 0, 4, 1, 1, 1) === 4);\n    assert(calculateMinimumPackages(1, 2, 1, 1, 1, 1) === 4);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateMinimumPackages",
    "signature": "function calculateMinimumPackages($a, $b, $c, $d, $e, $f): int",
    "docstring": {
      "en": "This function calculates the minimum number of 6x6xh packages required to ship an order of products of various sizes.\nThe sizes of the products range from 1x1 to 6x6, and each product requires a certain amount of space in the package.\nThe goal is to efficiently pack these products to minimize the number of packages, reducing shipping costs.\n\nInput: Six integers ($a, $b, $c, $d, $e, $f), each representing the quantity of products from size 1x1 to 6x6.\nOutput: An integer representing the minimum number of 6x6xh packages required to ship the order.\n\nExample:\nFor an order with 1 product of size 1x1, 2 products of size 2x2, and 1 product of size 3x3,\nthe function will calculate and return the minimum number of packages needed.",
      "sq": "Kjo funksion llogarit numrin minimal të paketave 6x6xh të nevojshme për të transportuar një porosi të produkteve të madhësive të ndryshme.\nMadhësitë e produkteve variojnë nga 1x1 deri në 6x6, dhe secili produkt kërkon një sasi të caktuar hapësire në paketë.\nQëllimi është të paketohen këto produkte në mënyrë efikase për të minimizuar numrin e paketave, duke reduktuar kostot e transportit.\n\nInput: Gjashtë numra të plotë ($a, $b, $c, $d, $e, $f), secili që përfaqëson sasinë e produkteve nga madhësia 1x1 deri në 6x6.\nOutput: Një numër i plotë që përfaqëson numrin minimal të paketave 6x6xh të nevojshme për të transportuar porosinë.\n\nShembull:\nPër një porosi me 1 produkt të madhësisë 1x1, 2 produkte të madhësisë 2x2, dhe 1 produkt të madhësisë 3x3,\nfunksioni do të llogarisë dhe kthejë numrin minimal të paketave të nevojshme.",
      "hy": "Այս ֆունկցիան հաշվում է 6x6xh փաթեթների նվազագույն քանակը, որը պահանջվում է տարբեր չափերի ապրանքների պատվերը առաքելու համար:\nԱպրանքների չափերը տատանվում են 1x1-ից մինչև 6x6, և յուրաքանչյուր ապրանք պահանջում է որոշակի տարածք փաթեթում:\nՆպատակն է արդյունավետորեն փաթեթավորել այս ապրանքները՝ նվազեցնելու փաթեթների քանակը, ինչը կնվազեցնի առաքման ծախսերը:\n\nՄուտք: Վեց ամբողջ թիվ ($a, $b, $c, $d, $e, $f), որոնք ներկայացնում են 1x1-ից մինչև 6x6 չափի ապրանքների քանակը:\nԵլք: Ամբողջ թիվ, որը ներկայացնում է պատվերը առաքելու համար պահանջվող 6x6xh փաթեթների նվազագույն քանակը:\n\nՕրինակ:\nԵթե պատվերը ներառում է 1 ապրանք 1x1 չափի, 2 ապրանք 2x2 չափի և 1 ապրանք 3x3 չափի,\nֆունկցիան կհաշվի և կվերադարձնի անհրաժեշտ փաթեթների նվազագույն քանակը:",
      "bn": "এই ফাংশনটি বিভিন্ন আকারের পণ্যের একটি অর্ডার প্রেরণের জন্য প্রয়োজনীয় 6x6xh প্যাকেজের সর্বনিম্ন সংখ্যা গণনা করে। পণ্যের আকার 1x1 থেকে 6x6 পর্যন্ত পরিবর্তিত হয়, এবং প্রতিটি পণ্য প্যাকেজে একটি নির্দিষ্ট পরিমাণ স্থান প্রয়োজন। লক্ষ্য হল এই পণ্যগুলি দক্ষতার সাথে প্যাক করা যাতে প্যাকেজের সংখ্যা কমিয়ে, শিপিং খরচ হ্রাস করা যায়।\n\nইনপুট: ছয়টি পূর্ণসংখ্যা ($a, $b, $c, $d, $e, $f), প্রতিটি 1x1 থেকে 6x6 আকারের পণ্যের পরিমাণ নির্দেশ করে।\nআউটপুট: একটি পূর্ণসংখ্যা যা অর্ডারটি প্রেরণের জন্য প্রয়োজনীয় 6x6xh প্যাকেজের সর্বনিম্ন সংখ্যা নির্দেশ করে।\n\nউদাহরণ:\nযদি একটি অর্ডারে 1x1 আকারের 1টি পণ্য, 2x2 আকারের 2টি পণ্য এবং 3x3 আকারের 1টি পণ্য থাকে,\nতাহলে ফাংশনটি প্রয়োজনীয় সর্বনিম্ন প্যাকেজের সংখ্যা গণনা করে এবং ফেরত দেবে।",
      "bg": "Тази функция изчислява минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчка от продукти с различни размери. Размерите на продуктите варират от 1x1 до 6x6, и всеки продукт изисква определено количество пространство в пакета. Целта е да се опаковат тези продукти ефективно, за да се минимизира броят на пакетите и да се намалят разходите за доставка.\n\nВход: Шест цели числа ($a, $b, $c, $d, $e, $f), всяко представляващо количеството продукти от размер 1x1 до 6x6.\nИзход: Цяло число, представляващо минималния брой пакети с размер 6x6xh, необходими за изпращане на поръчката.\n\nПример:\nЗа поръчка с 1 продукт с размер 1x1, 2 продукта с размер 2x2 и 1 продукт с размер 3x3,\nфункцията ще изчисли и върне минималния брой необходими пакети.",
      "zh": "该函数计算运送各种尺寸产品订单所需的最小6x6xh包裹数量。\n产品的尺寸范围从1x1到6x6，每个产品在包裹中需要一定的空间。\n目标是有效地包装这些产品，以最小化包裹数量，从而降低运输成本。\n\n输入：六个整数 ($a, $b, $c, $d, $e, $f)，每个整数代表从尺寸1x1到6x6的产品数量。\n输出：一个整数，表示运送订单所需的最小6x6xh包裹数量。\n\n示例：\n对于一个包含1个1x1尺寸产品、2个2x2尺寸产品和1个3x3尺寸产品的订单，\n该函数将计算并返回所需的最小包裹数量。",
      "fr": "Cette fonction calcule le nombre minimum de colis 6x6xh nécessaires pour expédier une commande de produits de différentes tailles.  \nLes tailles des produits varient de 1x1 à 6x6, et chaque produit nécessite une certaine quantité d'espace dans le colis.  \nL'objectif est d'emballer ces produits de manière efficace pour minimiser le nombre de colis, réduisant ainsi les coûts d'expédition.\n\nEntrée : Six entiers ($a, $b, $c, $d, $e, $f), chacun représentant la quantité de produits de taille 1x1 à 6x6.  \nSortie : Un entier représentant le nombre minimum de colis 6x6xh nécessaires pour expédier la commande.\n\nExemple :  \nPour une commande avec 1 produit de taille 1x1, 2 produits de taille 2x2, et 1 produit de taille 3x3,  \nla fonction calculera et renverra le nombre minimum de colis nécessaires.",
      "de": "Diese Funktion berechnet die minimale Anzahl von 6x6xh Paketen, die erforderlich sind, um eine Bestellung von Produkten verschiedener Größen zu versenden. Die Größen der Produkte reichen von 1x1 bis 6x6, und jedes Produkt benötigt eine bestimmte Menge an Platz im Paket. Das Ziel ist es, diese Produkte effizient zu verpacken, um die Anzahl der Pakete zu minimieren und die Versandkosten zu senken.\n\nEingabe: Sechs ganze Zahlen ($a, $b, $c, $d, $e, $f), die jeweils die Menge der Produkte von Größe 1x1 bis 6x6 darstellen. Ausgabe: Eine ganze Zahl, die die minimale Anzahl von 6x6xh Paketen darstellt, die erforderlich sind, um die Bestellung zu versenden.\n\nBeispiel: Für eine Bestellung mit 1 Produkt der Größe 1x1, 2 Produkten der Größe 2x2 und 1 Produkt der Größe 3x3, wird die Funktion die minimale Anzahl der benötigten Pakete berechnen und zurückgeben.",
      "ha": "Wannan aikin yana lissafin mafi ƙarancin adadin fakiti na 6x6xh da ake buƙata don jigilar oda na samfura masu girma dabam-dabam. \n\nGirman samfuran yana daga 1x1 zuwa 6x6, kuma kowanne samfur yana buƙatar wani adadin sarari a cikin fakitin. \n\nManufar ita ce a shirya waɗannan samfuran yadda ya dace don rage adadin fakiti, ta haka rage kuɗin jigilar kaya.\n\nShigarwa: Lamba shida ($a, $b, $c, $d, $e, $f), kowanne yana wakiltar adadin samfura daga girman 1x1 zuwa 6x6.\n\nFitarwa: Wata lamba da ke wakiltar mafi ƙarancin adadin fakiti na 6x6xh da ake buƙata don jigilar odar.\n\nMisali:\nDon wata oda da ke da samfur guda 1 na girman 1x1, samfura 2 na girman 2x2, da samfur guda 1 na girman 3x3,\naikin zai lissafa kuma ya dawo da mafi ƙarancin adadin fakiti da ake buƙata.",
      "hi": "यह फ़ंक्शन विभिन्न आकार के उत्पादों के ऑर्डर को भेजने के लिए आवश्यक न्यूनतम संख्या में 6x6xh पैकेजों की गणना करता है।  \nउत्पादों के आकार 1x1 से 6x6 तक होते हैं, और प्रत्येक उत्पाद को पैकेज में एक निश्चित मात्रा में स्थान की आवश्यकता होती है।  \nलक्ष्य इन उत्पादों को कुशलतापूर्वक पैक करना है ताकि पैकेजों की संख्या को कम किया जा सके, जिससे शिपिंग लागत कम हो सके।\n\nइनपुट: छह पूर्णांक ($a, $b, $c, $d, $e, $f), प्रत्येक 1x1 से 6x6 आकार के उत्पादों की मात्रा का प्रतिनिधित्व करता है।  \nआउटपुट: एक पूर्णांक जो ऑर्डर को भेजने के लिए आवश्यक न्यूनतम 6x6xh पैकेजों की संख्या का प्रतिनिधित्व करता है।\n\nउदाहरण:  \nयदि ऑर्डर में 1 उत्पाद 1x1 आकार का है, 2 उत्पाद 2x2 आकार के हैं, और 1 उत्पाद 3x3 आकार का है,  \nतो फ़ंक्शन आवश्यक पैकेजों की न्यूनतम संख्या की गणना करेगा और लौटाएगा।",
      "hu": "Ez a függvény kiszámítja a szükséges 6x6xh csomagok minimális számát különböző méretű termékek rendelésének szállításához.\nA termékek méretei 1x1-től 6x6-ig terjednek, és minden termék bizonyos mennyiségű helyet igényel a csomagban.\nA cél az, hogy hatékonyan csomagoljuk ezeket a termékeket, hogy minimalizáljuk a csomagok számát, csökkentve ezzel a szállítási költségeket.\n\nBemenet: Hat egész szám ($a, $b, $c, $d, $e, $f), amelyek az 1x1-től 6x6-ig terjedő méretű termékek mennyiségét jelzik.\nKimenet: Egy egész szám, amely a rendelés szállításához szükséges 6x6xh csomagok minimális számát jelzi.\n\nPélda:\nEgy rendelés esetén, amely 1 db 1x1 méretű, 2 db 2x2 méretű és 1 db 3x3 méretű terméket tartalmaz,\na függvény kiszámítja és visszaadja a szükséges csomagok minimális számát."
    },
    "docstring_bertscore": {
      "sq": "0.9819063613307699",
      "hy": "0.9664334519089143",
      "bn": "0.9801917838816768",
      "bg": "0.9768528071764804",
      "zh": "0.9813188126636687",
      "fr": "0.994505685030194",
      "de": "0.9978659151861612",
      "ha": "0.9754030040253067",
      "hi": "0.9795466324040755",
      "hu": "0.977055410165136"
    }
  },
  {
    "task_id": "PHP/10",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the number of chickens and rabbits in a farm.\n    * Given the total number of animals and the total number of legs, the function determines\n    * how many chickens and rabbits are there. \n    * Assumptions: \n    * - Each chicken has 2 legs.\n    * - Each rabbit has 4 legs.\n    * - The total number of animals and legs are non-negative integers.\n    * \n    * Input: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\n    * Output: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists, \n    *         or \"No answer\" if no valid solution is found.\n    * \n    * Example:\n    * For 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\n    * For 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "sq": "<?php\n\n/**\n    * Llogarit numrin e pulave dhe lepujve në një fermë.\n    * Duke pasur parasysh numrin total të kafshëve dhe numrin total të këmbëve, funksioni përcakton\n    * sa pula dhe lepuj ka. \n    * Supozime: \n    * - Çdo pulë ka 2 këmbë.\n    * - Çdo lepur ka 4 këmbë.\n    * - Numri total i kafshëve dhe këmbëve janë numra të plotë jo-negativë.\n    * \n    * Hyrja: Dy numra të plotë, $totalAnimals (numri total i kafshëve) dhe $totalLegs (numri total i këmbëve).\n    * Dalja: Kthen një varg [number_of_chickens, number_of_rabbits] nëse ekziston një zgjidhje e vlefshme, \n    *         ose \"No answer\" nëse nuk gjendet asnjë zgjidhje e vlefshme.\n    * \n    * Shembull:\n    * Për 5 kafshë dhe 12 këmbë, funksioni do të kthejë [4, 1] (4 pula dhe 1 lepur).\n    * Për 10 kafshë dhe 16 këmbë, funksioni do të kthejë \"No answer\" pasi nuk ekziston asnjë kombinim i vlefshëm.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է ֆերմայում հավերի և ճագարների քանակը։\n    * Տրված է կենդանիների ընդհանուր քանակը և ոտքերի ընդհանուր քանակը, ֆունկցիան որոշում է\n    * քանի հավ և ճագար կա։\n    * Ենթադրություններ:\n    * - Յուրաքանչյուր հավ ունի 2 ոտք։\n    * - Յուրաքանչյուր ճագար ունի 4 ոտք։\n    * - Կենդանիների և ոտքերի ընդհանուր քանակները ոչ բացասական ամբողջ թվեր են։\n    * \n    * Մուտք: Երկու ամբողջ թիվ, $totalAnimals (կենդանիների ընդհանուր քանակը) և $totalLegs (ոտքերի ընդհանուր քանակը)։\n    * Ելք: Վերադարձնում է զանգված [հավերի_քանակը, ճագարների_քանակը], եթե գոյություն ունի վավեր լուծում,\n    *         կամ \"No answer\", եթե վավեր լուծում չի գտնվել։\n    * \n    * Օրինակ:\n    * 5 կենդանիների և 12 ոտքերի դեպքում, ֆունկցիան կվերադարձնի [4, 1] (4 հավ և 1 ճագար)։\n    * 10 կենդանիների և 16 ոտքերի դեպքում, ֆունկցիան կվերադարձնի \"No answer\", քանի որ վավեր համակցություն չկա։\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "bn": "<?php\n\n/**\n    * একটি খামারে মুরগি এবং খরগোশের সংখ্যা গণনা করে।\n    * প্রাণীর মোট সংখ্যা এবং পায়ের মোট সংখ্যা দেওয়া হলে, ফাংশনটি নির্ধারণ করে\n    * সেখানে কতগুলি মুরগি এবং খরগোশ আছে।\n    * অনুমান:\n    * - প্রতিটি মুরগির ২টি পা থাকে।\n    * - প্রতিটি খরগোশের ৪টি পা থাকে।\n    * - প্রাণী এবং পায়ের মোট সংখ্যা অ-ঋণাত্মক পূর্ণসংখ্যা।\n    * \n    * ইনপুট: দুটি পূর্ণসংখ্যা, $totalAnimals (প্রাণীর মোট সংখ্যা) এবং $totalLegs (পায়ের মোট সংখ্যা)।\n    * আউটপুট: একটি অ্যারে [number_of_chickens, number_of_rabbits] ফেরত দেয় যদি একটি বৈধ সমাধান থাকে,\n    *         অথবা \"No answer\" ফেরত দেয় যদি কোন বৈধ সমাধান পাওয়া না যায়।\n    * \n    * উদাহরণ:\n    * ৫টি প্রাণী এবং ১২টি পায়ের জন্য, ফাংশনটি [4, 1] (৪টি মুরগি এবং ১টি খরগোশ) ফেরত দেবে।\n    * ১০টি প্রাণী এবং ১৬টি পায়ের জন্য, ফাংশনটি \"No answer\" ফেরত দেবে কারণ কোন বৈধ সংমিশ্রণ নেই।\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "bg": "<?php\n\n/**\n    * Изчислява броя на пилетата и зайците във фермата.\n    * Като се даде общият брой на животните и общият брой на краката, функцията определя\n    * колко пилета и зайци има.\n    * Предположения:\n    * - Всяко пиле има 2 крака.\n    * - Всеки заек има 4 крака.\n    * - Общият брой на животните и краката са неотрицателни цели числа.\n    * \n    * Вход: Две цели числа, $totalAnimals (общ брой на животните) и $totalLegs (общ брой на краката).\n    * Изход: Връща масив [number_of_chickens, number_of_rabbits] ако съществува валидно решение,\n    *         или \"No answer\" ако не се намери валидно решение.\n    * \n    * Пример:\n    * За 5 животни и 12 крака, функцията ще върне [4, 1] (4 пилета и 1 заек).\n    * За 10 животни и 16 крака, функцията ще върне \"No answer\", тъй като не съществува валидна комбинация.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "zh": "<?php\n\n/**\n    * 计算农场中的鸡和兔子的数量。\n    * 给定动物的总数和腿的总数，该函数确定有多少只鸡和兔子。\n    * 假设：\n    * - 每只鸡有2条腿。\n    * - 每只兔子有4条腿。\n    * - 动物和腿的总数是非负整数。\n    * \n    * 输入：两个整数，$totalAnimals（动物的总数）和 $totalLegs（腿的总数）。\n    * 输出：如果存在有效解，返回一个数组 [number_of_chickens, number_of_rabbits]，\n    *         如果没有找到有效解，则返回 \"No answer\"。\n    * \n    * 示例：\n    * 对于 5 只动物和 12 条腿，该函数将返回 [4, 1]（4 只鸡和 1 只兔子）。\n    * 对于 10 只动物和 16 条腿，该函数将返回 \"No answer\"，因为不存在有效组合。\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "fr": "<?php\n\n/**\n    * Calcule le nombre de poulets et de lapins dans une ferme.\n    * Étant donné le nombre total d'animaux et le nombre total de pattes, la fonction détermine\n    * combien de poulets et de lapins il y a.\n    * Hypothèses :\n    * - Chaque poulet a 2 pattes.\n    * - Chaque lapin a 4 pattes.\n    * - Le nombre total d'animaux et de pattes sont des entiers non négatifs.\n    * \n    * Entrée : Deux entiers, $totalAnimals (nombre total d'animaux) et $totalLegs (nombre total de pattes).\n    * Sortie : Retourne un tableau [number_of_chickens, number_of_rabbits] si une solution valide existe,\n    *          ou \"No answer\" si aucune solution valide n'est trouvée.\n    * \n    * Exemple :\n    * Pour 5 animaux et 12 pattes, la fonction retournera [4, 1] (4 poulets et 1 lapin).\n    * Pour 10 animaux et 16 pattes, la fonction retournera \"No answer\" car aucune combinaison valide n'existe.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "de": "<?php\n\n/**\n    * Berechnet die Anzahl der Hühner und Kaninchen auf einem Bauernhof.\n    * Gegeben die Gesamtanzahl der Tiere und die Gesamtanzahl der Beine, bestimmt die Funktion,\n    * wie viele Hühner und Kaninchen es gibt.\n    * Annahmen:\n    * - Jedes Huhn hat 2 Beine.\n    * - Jedes Kaninchen hat 4 Beine.\n    * - Die Gesamtanzahl der Tiere und Beine sind nicht-negative ganze Zahlen.\n    * \n    * Eingabe: Zwei ganze Zahlen, $totalAnimals (Gesamtanzahl der Tiere) und $totalLegs (Gesamtanzahl der Beine).\n    * Ausgabe: Gibt ein Array [number_of_chickens, number_of_rabbits] zurück, wenn eine gültige Lösung existiert,\n    *          oder \"No answer\", wenn keine gültige Lösung gefunden wird.\n    * \n    * Beispiel:\n    * Für 5 Tiere und 12 Beine wird die Funktion [4, 1] zurückgeben (4 Hühner und 1 Kaninchen).\n    * Für 10 Tiere und 16 Beine wird die Funktion \"No answer\" zurückgeben, da keine gültige Kombination existiert.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "ha": "<?php\n\n/**\n    * Lissafa adadin kaji da zomo a gona.\n    * An ba da jimillar adadin dabbobi da jimillar adadin ƙafafu, aikin yana tantance\n    * yawan kaji da zomo da ke akwai. \n    * Tsammani: \n    * - Kowace kaza tana da ƙafa 2.\n    * - Kowanne zomo yana da ƙafa 4.\n    * - Jimillar adadin dabbobi da ƙafafu lambobi ne marasa kyau.\n    * \n    * Shigarwa: Lambobi guda biyu, $totalAnimals (jimillar adadin dabbobi) da $totalLegs (jimillar adadin ƙafafu).\n    * Fitarwa: Yana mayar da jerin [number_of_chickens, number_of_rabbits] idan akwai ingantaccen bayani, \n    *         ko \"Babu amsa\" idan ba a sami ingantaccen bayani ba.\n    * \n    * Misali:\n    * Don dabbobi 5 da ƙafafu 12, aikin zai mayar da [4, 1] (kaji 4 da zomo 1).\n    * Don dabbobi 10 da ƙafafu 16, aikin zai mayar da \"Babu amsa\" saboda babu ingantaccen haɗin.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hi": "<?php\n\n/**\n    * एक फार्म में मुर्गियों और खरगोशों की संख्या की गणना करता है।\n    * जानवरों की कुल संख्या और पैरों की कुल संख्या दी गई है, यह फ़ंक्शन निर्धारित करता है\n    * कि कितनी मुर्गियाँ और खरगोश हैं।\n    * धारणाएँ:\n    * - प्रत्येक मुर्गी के 2 पैर होते हैं।\n    * - प्रत्येक खरगोश के 4 पैर होते हैं।\n    * - जानवरों और पैरों की कुल संख्या गैर-ऋणात्मक पूर्णांक हैं।\n    * \n    * इनपुट: दो पूर्णांक, $totalAnimals (जानवरों की कुल संख्या) और $totalLegs (पैरों की कुल संख्या)।\n    * आउटपुट: एक सरणी [number_of_chickens, number_of_rabbits] लौटाता है यदि कोई मान्य समाधान मौजूद है,\n    *         या \"No answer\" लौटाता है यदि कोई मान्य समाधान नहीं मिलता है।\n    * \n    * उदाहरण:\n    * 5 जानवरों और 12 पैरों के लिए, फ़ंक्शन [4, 1] (4 मुर्गियाँ और 1 खरगोश) लौटाएगा।\n    * 10 जानवरों और 16 पैरों के लिए, फ़ंक्शन \"No answer\" लौटाएगा क्योंकि कोई मान्य संयोजन मौजूद नहीं है।\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) ",
      "hu": "<?php\n\n/**\n    * Kiszámítja a csirkék és nyulak számát egy farmon.\n    * A megadott állatok teljes száma és a lábak teljes száma alapján a függvény meghatározza,\n    * hány csirke és nyúl van. \n    * Feltételezések: \n    * - Minden csirkének 2 lába van.\n    * - Minden nyúlnak 4 lába van.\n    * - Az állatok és a lábak teljes száma nemnegatív egész számok.\n    * \n    * Bemenet: Két egész szám, $totalAnimals (az állatok teljes száma) és $totalLegs (a lábak teljes száma).\n    * Kimenet: Egy tömböt ad vissza [number_of_chickens, number_of_rabbits], ha létezik érvényes megoldás,\n    *          vagy \"No answer\", ha nem található érvényes megoldás.\n    * \n    * Példa:\n    * 5 állat és 12 láb esetén a függvény visszaadja [4, 1] (4 csirke és 1 nyúl).\n    * 10 állat és 16 láb esetén a függvény \"No answer\" eredményt ad vissza, mivel nem létezik érvényes kombináció.\n    */\n\n    function calculateAnimals($totalAnimals, $totalLegs) "
    },
    "prompt_bertscore": {
      "sq": "0.9884176638514747",
      "hy": "0.9813970730337965",
      "bn": "0.9891776236893142",
      "bg": "0.9958313441932208",
      "zh": "0.9766909234159369",
      "fr": "0.9973836406210085",
      "de": "0.9980069427566959",
      "ha": "0.9807622503360091",
      "hi": "0.9940754516248724",
      "hu": "0.9824857661522487"
    },
    "canonical_solution": "{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }",
    "instruction": {
      "en": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nՏվեք PHP կոդի համառոտ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\n请用最多500个字符的中文，为以下PHP代码提供一个简洁的自然语言描述（文档字符串）。",
      "fr": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function calculateAnimals($totalAnimals, $totalLegs)\n{\n        // Check if the total number of legs is even\n        if ($totalLegs % 2 != 0) {\n            return \"No answer\";\n        }\n    \n        // Calculate the number of rabbits\n        $rabbits = ($totalLegs - 2 * $totalAnimals) / 2;\n    \n        // Calculate the number of chickens\n        $chickens = $totalAnimals - $rabbits;\n    \n        // Check if the number of rabbits and chickens are non-negative integers\n        if ($rabbits < 0 || $chickens < 0 || $rabbits != (int)$rabbits || $chickens != (int)$chickens) {\n            return \"No answer\";\n        }\n    \n        return [$chickens, $rabbits];\n    }\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9361854215937784",
      "hy": "0.9136390856728892",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8790082760002186",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9234037552045643",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateAnimals(14, 32) === [12, 2]);\n    assert(calculateAnimals(10, 16) === \"No answer\");\n    assert(calculateAnimals(5, 12) === [4, 1]);\n    assert(calculateAnimals(3, 10) === [1, 2]);\n    assert(calculateAnimals(0, 0) === [0, 0]);\n}\n\n\nmain();\n?>",
    "entry_point": "calculateAnimals",
    "signature": "function calculateAnimals($totalAnimals, $totalLegs)",
    "docstring": {
      "en": "Calculates the number of chickens and rabbits in a farm.\nGiven the total number of animals and the total number of legs, the function determines\nhow many chickens and rabbits are there.\nAssumptions:\n- Each chicken has 2 legs.\n- Each rabbit has 4 legs.\n- The total number of animals and legs are non-negative integers.\n\nInput: Two integers, $totalAnimals (total number of animals) and $totalLegs (total number of legs).\nOutput: Returns an array [number_of_chickens, number_of_rabbits] if a valid solution exists,\nor \"No answer\" if no valid solution is found.\n\nExample:\nFor 5 animals and 12 legs, the function will return [4, 1] (4 chickens and 1 rabbit).\nFor 10 animals and 16 legs, the function will return \"No answer\" as no valid combination exists.",
      "sq": "Llogarit numrin e pulave dhe lepujve në një fermë. Duke pasur parasysh numrin total të kafshëve dhe numrin total të këmbëve, funksioni përcakton sa pula dhe lepuj ka. Supozime: - Çdo pulë ka 2 këmbë. - Çdo lepur ka 4 këmbë. - Numri total i kafshëve dhe këmbëve janë numra të plotë jo-negativë.\n\nInput: Dy numra të plotë, $totalAnimals (numri total i kafshëve) dhe $totalLegs (numri total i këmbëve). Output: Kthen një varg [number_of_chickens, number_of_rabbits] nëse ekziston një zgjidhje e vlefshme, ose \"No answer\" nëse nuk gjendet asnjë zgjidhje e vlefshme.\n\nShembull: Për 5 kafshë dhe 12 këmbë, funksioni do të kthejë [4, 1] (4 pula dhe 1 lepur). Për 10 kafshë dhe 16 këmbë, funksioni do të kthejë \"No answer\" pasi nuk ekziston asnjë kombinim i vlefshëm.",
      "hy": "Հաշվում է ֆերմայում հավերի և նապաստակների քանակը։  \nՏրված է կենդանիների ընդհանուր քանակը և ոտքերի ընդհանուր քանակը, ֆունկցիան որոշում է, թե քանի հավ և նապաստակ կա։  \nԵնթադրություններ՝  \n- Յուրաքանչյուր հավ ունի 2 ոտք։  \n- Յուրաքանչյուր նապաստակ ունի 4 ոտք։  \n- Կենդանիների և ոտքերի ընդհանուր քանակը ոչ բացասական ամբողջ թվեր են։  \n\nՄուտք՝ երկու ամբողջ թիվ՝ $totalAnimals (կենդանիների ընդհանուր քանակը) և $totalLegs (ոտքերի ընդհանուր քանակը)։  \nԵլք՝ վերադարձնում է զանգված [number_of_chickens, number_of_rabbits], եթե գոյություն ունի վավեր լուծում,  \nկամ \"Պատասխան չկա\", եթե վավեր լուծում չի գտնվել։  \n\nՕրինակ՝  \n5 կենդանիների և 12 ոտքերի դեպքում ֆունկցիան կվերադարձնի [4, 1] (4 հավ և 1 նապաստակ)։  \n10 կենդանիների և 16 ոտքերի դեպքում ֆունկցիան կվերադարձնի \"Պատասխան չկա\", քանի որ վավեր համակցություն չկա։  ",
      "bn": "মুরগি এবং খরগোশের সংখ্যা গণনা করে একটি খামারে।  \nপ্রাণীর মোট সংখ্যা এবং মোট পায়ের সংখ্যা দেওয়া হলে, ফাংশনটি নির্ধারণ করে  \nকতগুলি মুরগি এবং খরগোশ আছে।  \nঅনুমান:  \n- প্রতিটি মুরগির ২টি পা আছে।  \n- প্রতিটি খরগোশের ৪টি পা আছে।  \n- প্রাণী এবং পায়ের মোট সংখ্যা অ-ঋণাত্মক পূর্ণসংখ্যা।  \n\nইনপুট: দুটি পূর্ণসংখ্যা, $totalAnimals (প্রাণীর মোট সংখ্যা) এবং $totalLegs (পায়ের মোট সংখ্যা)।  \nআউটপুট: একটি অ্যারে [number_of_chickens, number_of_rabbits] ফেরত দেয় যদি একটি বৈধ সমাধান থাকে,  \nঅথবা \"No answer\" যদি কোনো বৈধ সমাধান পাওয়া না যায়।  \n\nউদাহরণ:  \n5টি প্রাণী এবং 12টি পায়ের জন্য, ফাংশনটি [4, 1] (4টি মুরগি এবং 1টি খরগোশ) ফেরত দেবে।  \n10টি প্রাণী এবং 16টি পায়ের জন্য, ফাংশনটি \"No answer\" ফেরত দেবে কারণ কোনো বৈধ সংমিশ্রণ নেই।  ",
      "bg": "Изчислява броя на пилетата и зайците във фермата.  \nКато се даде общият брой на животните и общият брой на краката, функцията определя  \nколко пилета и зайци има.  \nПредположения:  \n- Всяко пиле има 2 крака.  \n- Всеки заек има 4 крака.  \n- Общият брой на животните и краката са неотрицателни цели числа.  \n\nВход: Две цели числа, $totalAnimals (общ брой на животните) и $totalLegs (общ брой на краката).  \nИзход: Връща масив [number_of_chickens, number_of_rabbits], ако съществува валидно решение,  \nили \"No answer\", ако не е намерено валидно решение.  \n\nПример:  \nЗа 5 животни и 12 крака, функцията ще върне [4, 1] (4 пилета и 1 заек).  \nЗа 10 животни и 16 крака, функцията ще върне \"No answer\", тъй като не съществува валидна комбинация.",
      "zh": "计算农场中的鸡和兔子的数量。\n给定动物的总数和腿的总数，该函数确定有多少只鸡和兔子。\n假设：\n- 每只鸡有2条腿。\n- 每只兔子有4条腿。\n- 动物和腿的总数是非负整数。\n\n输入：两个整数，$totalAnimals（动物的总数）和 $totalLegs（腿的总数）。\n输出：如果存在有效的解决方案，则返回一个数组 [number_of_chickens, number_of_rabbits]，\n如果没有找到有效的解决方案，则返回 \"No answer\"。\n\n示例：\n对于5只动物和12条腿，函数将返回 [4, 1]（4只鸡和1只兔子）。\n对于10只动物和16条腿，函数将返回 \"No answer\"，因为不存在有效的组合。",
      "fr": "Calcule le nombre de poulets et de lapins dans une ferme.  \nÉtant donné le nombre total d'animaux et le nombre total de pattes, la fonction détermine combien il y a de poulets et de lapins.  \nHypothèses :  \n- Chaque poulet a 2 pattes.  \n- Chaque lapin a 4 pattes.  \n- Le nombre total d'animaux et de pattes sont des entiers non négatifs.  \n\nInput: Deux entiers, $totalAnimals (nombre total d'animaux) et $totalLegs (nombre total de pattes).  \nOutput: Renvoie un tableau [number_of_chickens, number_of_rabbits] si une solution valide existe, ou \"No answer\" si aucune solution valide n'est trouvée.  \n\nExemple :  \nPour 5 animaux et 12 pattes, la fonction renverra [4, 1] (4 poulets et 1 lapin).  \nPour 10 animaux et 16 pattes, la fonction renverra \"No answer\" car aucune combinaison valide n'existe.",
      "de": "Berechnet die Anzahl der Hühner und Kaninchen auf einem Bauernhof.\nAngesichts der Gesamtzahl der Tiere und der Gesamtzahl der Beine bestimmt die Funktion,\nwie viele Hühner und Kaninchen es gibt.\nAnnahmen:\n- Jedes Huhn hat 2 Beine.\n- Jedes Kaninchen hat 4 Beine.\n- Die Gesamtzahl der Tiere und Beine sind nicht-negative ganze Zahlen.\n\nEingabe: Zwei ganze Zahlen, $totalAnimals (Gesamtzahl der Tiere) und $totalLegs (Gesamtzahl der Beine).\nAusgabe: Gibt ein Array [number_of_chickens, number_of_rabbits] zurück, wenn eine gültige Lösung existiert,\noder \"Keine Antwort\", wenn keine gültige Lösung gefunden wird.\n\nBeispiel:\nFür 5 Tiere und 12 Beine wird die Funktion [4, 1] zurückgeben (4 Hühner und 1 Kaninchen).\nFür 10 Tiere und 16 Beine wird die Funktion \"Keine Antwort\" zurückgeben, da keine gültige Kombination existiert.",
      "ha": "Ƙididdige yawan kaji da zomaye a gona.\nAn ba da jimillar adadin dabbobi da jimillar adadin ƙafafu, aikin yana tantance\nnawa ne kaji da zomaye a can.\nHasashe:\n- Kowace kaza tana da ƙafafu 2.\n- Kowanne zomo yana da ƙafafu 4.\n- Jimillar adadin dabbobi da ƙafafu lambobi ne marasa kyau.\n\nShigarwa: Lambobi biyu, $totalAnimals (jimillar adadin dabbobi) da $totalLegs (jimillar adadin ƙafafu).\nFitarwa: Yana dawowa da jerin [number_of_chickens, number_of_rabbits] idan akwai ingantaccen bayani,\nko \"Babu amsa\" idan ba a sami ingantaccen bayani ba.\n\nMisali:\nDon dabbobi 5 da ƙafafu 12, aikin zai dawo da [4, 1] (kaji 4 da zomo 1).\nDon dabbobi 10 da ƙafafu 16, aikin zai dawo da \"Babu amsa\" saboda babu ingantaccen haɗuwa.",
      "hi": "मुर्गियों और खरगोशों की संख्या की गणना करता है एक फार्म में।\nकुल जानवरों की संख्या और कुल पैरों की संख्या को ध्यान में रखते हुए, यह फ़ंक्शन निर्धारित करता है\nकि कितनी मुर्गियाँ और खरगोश हैं।\nअनुमान:\n- प्रत्येक मुर्गी के 2 पैर होते हैं।\n- प्रत्येक खरगोश के 4 पैर होते हैं।\n- जानवरों और पैरों की कुल संख्या गैर-ऋणात्मक पूर्णांक हैं।\n\nइनपुट: दो पूर्णांक, $totalAnimals (जानवरों की कुल संख्या) और $totalLegs (पैरों की कुल संख्या)।\nआउटपुट: यदि कोई मान्य समाधान मौजूद है, तो एक array [number_of_chickens, number_of_rabbits] लौटाता है,\nया \"No answer\" लौटाता है यदि कोई मान्य समाधान नहीं मिलता है।\n\nउदाहरण:\n5 जानवरों और 12 पैरों के लिए, फ़ंक्शन [4, 1] (4 मुर्गियाँ और 1 खरगोश) लौटाएगा।\n10 जानवरों और 16 पैरों के लिए, फ़ंक्शन \"No answer\" लौटाएगा क्योंकि कोई मान्य संयोजन मौजूद नहीं है।",
      "hu": "Kiszámítja a csirkék és nyulak számát egy farmon.\nAdott az állatok összlétszáma és a lábak összlétszáma, a függvény meghatározza,\nhány csirke és nyúl van.\nFeltételezések:\n- Minden csirkének 2 lába van.\n- Minden nyúlnak 4 lába van.\n- Az állatok és lábak összlétszáma nemnegatív egész számok.\n\nBemenet: Két egész szám, $totalAnimals (az állatok összlétszáma) és $totalLegs (a lábak összlétszáma).\nKimenet: Visszaad egy tömböt [number_of_chickens, number_of_rabbits], ha létezik érvényes megoldás,\nvagy \"Nincs megoldás\", ha nem található érvényes megoldás.\n\nPélda:\n5 állat és 12 láb esetén a függvény visszaadja a [4, 1] értéket (4 csirke és 1 nyúl).\n10 állat és 16 láb esetén a függvény visszaadja a \"Nincs megoldás\" értéket, mivel nem létezik érvényes kombináció."
    },
    "docstring_bertscore": {
      "sq": "0.9917639898807694",
      "hy": "0.9852095845673802",
      "bn": "0.985863475781747",
      "bg": "0.9913395167564978",
      "zh": "0.9706638817641953",
      "fr": "0.9945191918961044",
      "de": "0.9975522778145071",
      "ha": "0.9384108763828932",
      "hi": "0.9753469902578549",
      "hu": "0.9837613704592548"
    }
  },
  {
    "task_id": "PHP/11",
    "prompt": {
      "en": "<?php\n\n/**\n * Identifies the most frequently occurring character in a given string.\n * The string is composed of lowercase letters from 'a' to 'z'.\n * If there are multiple characters with the same highest frequency,\n * the character with the smallest ASCII value is returned.\n * \n * Example:\n * Input: \"apple\"\n * Output: \"p 2\" (The character 'p' appears twice)\n * \n * Input: \"environment\"\n * Output: \"n 3\" (The character 'n' appears three times, the most frequent)\n */\n\nfunction findMostFrequentChar($string) ",
      "sq": "<?php\n\n/**\n * Identifikon karakterin që ndodh më shpesh në një varg të dhënë.\n * Vargu përbëhet nga shkronjat e vogla nga 'a' deri te 'z'.\n * Nëse ka disa karaktere me të njëjtën frekuencë më të lartë,\n * kthehet karakteri me vlerën më të vogël ASCII.\n * \n * Shembull:\n * Input: \"apple\"\n * Output: \"p 2\" (Karakteri 'p' shfaqet dy herë)\n * \n * Input: \"environment\"\n * Output: \"n 3\" (Karakteri 'n' shfaqet tre herë, më i shpeshti)\n */\n\nfunction findMostFrequentChar($string) ",
      "hy": "<?php\n\n/**\n * Հայտնաբերում է տրված տողում ամենահաճախ հանդիպող սիմվոլը։\n * Տողը կազմված է փոքրատառ տառերից՝ 'a'-ից 'z'։\n * Եթե կան մի քանի սիմվոլներ նույն ամենաբարձր հաճախականությամբ,\n * վերադարձվում է ամենափոքր ASCII արժեքով սիմվոլը։\n * \n * Օրինակ:\n * Մուտք: \"apple\"\n * Ելք: \"p 2\" (Սիմվոլը 'p' հայտնվում է երկու անգամ)\n * \n * Մուտք: \"environment\"\n * Ելք: \"n 3\" (Սիմվոլը 'n' հայտնվում է երեք անգամ, ամենահաճախը)\n */\n\nfunction findMostFrequentChar($string) ",
      "bn": "<?php\n\n/**\n * প্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন উপস্থিত চরিত্রটি সনাক্ত করে।\n * স্ট্রিংটি 'a' থেকে 'z' পর্যন্ত ছোট হাতের অক্ষর নিয়ে গঠিত।\n * যদি একাধিক চরিত্র একই সর্বোচ্চ ফ্রিকোয়েন্সি থাকে,\n * তবে সবচেয়ে ছোট ASCII মানের চরিত্রটি ফেরত দেওয়া হয়।\n * \n * উদাহরণ:\n * ইনপুট: \"apple\"\n * আউটপুট: \"p 2\" (চরিত্র 'p' দুটি বার উপস্থিত)\n * \n * ইনপুট: \"environment\"\n * আউটপুট: \"n 3\" (চরিত্র 'n' তিনবার উপস্থিত, সবচেয়ে ঘন ঘন)\n */\n\nfunction findMostFrequentChar($string) ",
      "bg": "<?php\n\n/**\n * Идентифицира най-често срещания символ в даден низ.\n * Низът се състои от малки букви от 'a' до 'z'.\n * Ако има няколко символа с една и съща най-висока честота,\n * се връща символът с най-малка ASCII стойност.\n * \n * Пример:\n * Вход: \"apple\"\n * Изход: \"p 2\" (Символът 'p' се появява два пъти)\n * \n * Вход: \"environment\"\n * Изход: \"n 3\" (Символът 'n' се появява три пъти, най-често срещаният)\n */\n\nfunction findMostFrequentChar($string) ",
      "zh": "<?php\n\n/**\n * 确定给定字符串中出现频率最高的字符。\n * 字符串由从 'a' 到 'z' 的小写字母组成。\n * 如果有多个字符具有相同的最高频率，\n * 则返回 ASCII 值最小的字符。\n * \n * 示例：\n * 输入: \"apple\"\n * 输出: \"p 2\" (字符 'p' 出现了两次)\n * \n * 输入: \"environment\"\n * 输出: \"n 3\" (字符 'n' 出现了三次，最频繁)\n */\n\nfunction findMostFrequentChar($string) ",
      "fr": "<?php\n\n/**\n * Identifie le caractère le plus fréquent dans une chaîne donnée.\n * La chaîne est composée de lettres minuscules de 'a' à 'z'.\n * S'il y a plusieurs caractères avec la même fréquence la plus élevée,\n * le caractère avec la plus petite valeur ASCII est retourné.\n * \n * Exemple :\n * Entrée : \"apple\"\n * Sortie : \"p 2\" (Le caractère 'p' apparaît deux fois)\n * \n * Entrée : \"environment\"\n * Sortie : \"n 3\" (Le caractère 'n' apparaît trois fois, le plus fréquent)\n */\n\nfunction findMostFrequentChar($string) ",
      "de": "<?php\n\n/**\n * Identifiziert das am häufigsten vorkommende Zeichen in einem gegebenen String.\n * Der String besteht aus Kleinbuchstaben von 'a' bis 'z'.\n * Wenn es mehrere Zeichen mit der gleichen höchsten Häufigkeit gibt,\n * wird das Zeichen mit dem kleinsten ASCII-Wert zurückgegeben.\n * \n * Beispiel:\n * Eingabe: \"apple\"\n * Ausgabe: \"p 2\" (Das Zeichen 'p' erscheint zweimal)\n * \n * Eingabe: \"environment\"\n * Ausgabe: \"n 3\" (Das Zeichen 'n' erscheint dreimal, am häufigsten)\n */\n\nfunction findMostFrequentChar($string) ",
      "ha": "<?php\n\n/**\n * Gano mafi yawan harafin da ya fi yawan faruwa a cikin wani igiyar rubutu.\n * Igiyar rubutun tana kunshe da ƙananan haruffa daga 'a' zuwa 'z'.\n * Idan akwai haruffa da yawa da suke da yawan faruwa iri ɗaya,\n * ana mayar da harafin da ke da ƙananan ƙimar ASCII.\n * \n * Misali:\n * Input: \"apple\"\n * Output: \"p 2\" (Harafin 'p' ya bayyana sau biyu)\n * \n * Input: \"environment\"\n * Output: \"n 3\" (Harafin 'n' ya bayyana sau uku, mafi yawa)\n */\n\nfunction findMostFrequentChar($string) ",
      "hi": "<?php\n\n/**\n * दिए गए स्ट्रिंग में सबसे अधिक बार आने वाले वर्ण की पहचान करता है।\n * स्ट्रिंग 'a' से 'z' तक के छोटे अक्षरों से बनी होती है।\n * यदि कई वर्ण समान उच्चतम आवृत्ति के साथ होते हैं,\n * तो सबसे छोटे ASCII मान वाला वर्ण लौटाया जाता है।\n * \n * उदाहरण:\n * इनपुट: \"apple\"\n * आउटपुट: \"p 2\" (वर्ण 'p' दो बार आता है)\n * \n * इनपुट: \"environment\"\n * आउटपुट: \"n 3\" (वर्ण 'n' तीन बार आता है, सबसे अधिक बार)\n */\n\nfunction findMostFrequentChar($string) ",
      "hu": "<?php\n\n/**\n * Azonosítja a leggyakrabban előforduló karaktert egy adott szövegben.\n * A szöveg kisbetűkből áll, 'a'-tól 'z'-ig.\n * Ha több karakter is azonos legmagasabb gyakorisággal rendelkezik,\n * akkor a legkisebb ASCII értékű karakter kerül visszaadásra.\n * \n * Példa:\n * Bemenet: \"apple\"\n * Kimenet: \"p 2\" (A 'p' karakter kétszer jelenik meg)\n * \n * Bemenet: \"environment\"\n * Kimenet: \"n 3\" (Az 'n' karakter háromszor jelenik meg, a leggyakoribb)\n */\n\nfunction findMostFrequentChar($string) "
    },
    "prompt_bertscore": {
      "sq": "0.982714588351201",
      "hy": "0.9813392715929153",
      "bn": "0.9693785445685186",
      "bg": "0.9954916862416512",
      "zh": "0.9564939876419284",
      "fr": "0.9947786031737359",
      "de": "0.9888854383988118",
      "ha": "0.9678298234875895",
      "hi": "0.9712915537682656",
      "hu": "0.9738989747801106"
    },
    "canonical_solution": "{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}",
    "instruction": {
      "en": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nՏվեք կարճ բնութագիր (docstring) PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা ৫০০ অক্ষরের মধ্যে সীমাবদ্ধ।",
      "bg": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nBayar da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function findMostFrequentChar($string)\n{\n    $frequency = [];\n    $maxFreq = 0;\n    $resultChar = '';\n\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (!isset($frequency[$char])) {\n            $frequency[$char] = 0;\n        }\n        $frequency[$char]++;\n\n        if ($frequency[$char] > $maxFreq || \n            ($frequency[$char] == $maxFreq && $char < $resultChar)) {\n            $maxFreq = $frequency[$char];\n            $resultChar = $char;\n        }\n    }\n\n    return $resultChar . \" \" . $maxFreq;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8880983967578991",
      "bn": "0.8839110696953028",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(findMostFrequentChar(\"abbccc\") === \"c 3\");\n    assert(findMostFrequentChar(\"adfadffasdf\") === \"f 4\");\n    assert(findMostFrequentChar(\"environment\") === \"n 3\");\n    assert(findMostFrequentChar(\"apple\") === \"p 2\");\n    assert(findMostFrequentChar(\"banana\") === \"a 3\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMostFrequentChar",
    "signature": "function findMostFrequentChar($string)",
    "docstring": {
      "en": "Identifies the most frequently occurring character in a given string.\nThe string is composed of lowercase letters from 'a' to 'z'.\nIf there are multiple characters with the same highest frequency,\nthe character with the smallest ASCII value is returned.\n\nExample:\nInput: \"apple\"\nOutput: \"p 2\" (The character 'p' appears twice)\n\nInput: \"environment\"\nOutput: \"n 3\" (The character 'n' appears three times, the most frequent)",
      "sq": "Identifikon karakterin që shfaqet më shpesh në një varg të dhënë.\nVargu përbëhet nga shkronja të vogla nga 'a' deri në 'z'.\nNëse ka disa karaktere me të njëjtën frekuencë më të lartë,\nkthen karakterin me vlerën më të vogël ASCII.\n\nShembull:\nInput: \"apple\"\nOutput: \"p 2\" (Karakteri 'p' shfaqet dy herë)\n\nInput: \"environment\"\nOutput: \"n 3\" (Karakteri 'n' shfaqet tre herë, më shpesh)",
      "hy": "Հայտնաբերում է տրված տողում ամենահաճախ հանդիպող սիմվոլը։  \nՏողը կազմված է փոքրատառերից՝ 'a'-ից 'z'։  \nԵթե կան մի քանի սիմվոլներ նույն ամենաբարձր հաճախականությամբ,  \nվերադարձվում է ամենափոքր ASCII արժեք ունեցող սիմվոլը։  \n\nՕրինակ:  \nՄուտք: \"apple\"  \nԵլք: \"p 2\" (Սիմվոլը 'p' հայտնվում է երկու անգամ)  \n\nՄուտք: \"environment\"  \nԵլք: \"n 3\" (Սիմվոլը 'n' հայտնվում է երեք անգամ, ամենահաճախը)",
      "bn": "একটি প্রদত্ত স্ট্রিং-এ সবচেয়ে ঘন ঘন ঘটে এমন অক্ষরটি সনাক্ত করে। \nস্ট্রিংটি 'a' থেকে 'z' পর্যন্ত ছোট হাতের অক্ষর নিয়ে গঠিত। \nযদি একই সর্বোচ্চ ফ্রিকোয়েন্সি সহ একাধিক অক্ষর থাকে, \nতাহলে সবচেয়ে ছোট ASCII মান সহ অক্ষরটি ফেরত দেওয়া হয়।\n\nউদাহরণ:\nইনপুট: \"apple\"\nআউটপুট: \"p 2\" (অক্ষর 'p' দুটি বার উপস্থিত হয়েছে)\n\nইনপুট: \"environment\"\nআউটপুট: \"n 3\" (অক্ষর 'n' তিনবার উপস্থিত হয়েছে, সবচেয়ে ঘন ঘন)",
      "bg": "Идентифицира най-често срещания символ в даден низ.  \nНизът се състои от малки букви от 'a' до 'z'.  \nАко има няколко символа с еднаква най-висока честота,  \nсе връща символът с най-малка ASCII стойност.  \n\nПример:  \nВход: \"apple\"  \nИзход: \"p 2\" (Символът 'p' се появява два пъти)  \n\nВход: \"environment\"  \nИзход: \"n 3\" (Символът 'n' се появява три пъти, най-често)",
      "zh": "识别给定字符串中出现频率最高的字符。\n字符串由从 'a' 到 'z' 的小写字母组成。\n如果有多个字符具有相同的最高频率，\n则返回 ASCII 值最小的字符。\n\n示例：\n输入: \"apple\"\n输出: \"p 2\" (字符 'p' 出现了两次)\n\n输入: \"environment\"\n输出: \"n 3\" (字符 'n' 出现了三次，最频繁)",
      "fr": "Identifie le caractère le plus fréquent dans une chaîne de caractères donnée.  \nLa chaîne est composée de lettres minuscules de 'a' à 'z'.  \nS'il y a plusieurs caractères avec la même fréquence la plus élevée,  \nle caractère avec la plus petite valeur ASCII est retourné.\n\nExemple :  \nEntrée : \"apple\"  \nSortie : \"p 2\" (Le caractère 'p' apparaît deux fois)\n\nEntrée : \"environment\"  \nSortie : \"n 3\" (Le caractère 'n' apparaît trois fois, le plus fréquent)",
      "de": "Identifiziert das am häufigsten vorkommende Zeichen in einem gegebenen String. Der String besteht aus Kleinbuchstaben von 'a' bis 'z'. Wenn es mehrere Zeichen mit der gleichen höchsten Häufigkeit gibt, wird das Zeichen mit dem kleinsten ASCII-Wert zurückgegeben.\n\nBeispiel:\nEingabe: \"apple\"\nAusgabe: \"p 2\" (Das Zeichen 'p' erscheint zweimal)\n\nEingabe: \"environment\"\nAusgabe: \"n 3\" (Das Zeichen 'n' erscheint dreimal, am häufigsten)",
      "ha": "Gano mafi yawan harafin da ke faruwa a cikin kirtani da aka bayar.  \nKirtani yana kunshe da ƙananan haruffa daga 'a' zuwa 'z'.  \nIdan akwai haruffa da yawa tare da yawan faruwa iri ɗaya,  \nana mayar da harafin da ke da ƙaramin ƙimar ASCII.  \n\nMisali:  \nShigar: \"apple\"  \nFitarwa: \"p 2\" (Harafin 'p' ya bayyana sau biyu)  \n\nShigar: \"environment\"  \nFitarwa: \"n 3\" (Harafin 'n' ya bayyana sau uku, mafi yawa)  ",
      "hi": "सबसे अधिक बार प्रकट होने वाले वर्ण की पहचान करता है एक दिए गए स्ट्रिंग में।  \nस्ट्रिंग छोटे अक्षरों से बनी होती है 'a' से 'z' तक।  \nयदि कई वर्ण समान उच्चतम आवृत्ति के साथ होते हैं,  \nतो सबसे छोटे ASCII मान वाला वर्ण लौटाया जाता है।  \n\nउदाहरण:  \nइनपुट: \"apple\"  \nआउटपुट: \"p 2\" (वर्ण 'p' दो बार प्रकट होता है)  \n\nइनपुट: \"environment\"  \nआउटपुट: \"n 3\" (वर्ण 'n' तीन बार प्रकट होता है, सबसे अधिक बार)  ",
      "hu": "Azonosítja a leggyakrabban előforduló karaktert egy adott sztringben.\nA sztring kisbetűkből áll, 'a'-tól 'z'-ig.\nHa több karakter is ugyanazzal a legmagasabb gyakorisággal rendelkezik,\nakkor a legkisebb ASCII értékű karakter kerül visszaadásra.\n\nPélda:\nBemenet: \"apple\"\nKimenet: \"p 2\" (A 'p' karakter kétszer fordul elő)\n\nBemenet: \"environment\"\nKimenet: \"n 3\" (Az 'n' karakter háromszor fordul elő, a leggyakoribb)"
    },
    "docstring_bertscore": {
      "sq": "0.9724205688540678",
      "hy": "0.97401596807454",
      "bn": "0.9702775456730824",
      "bg": "0.9877939644550251",
      "zh": "0.950513226868968",
      "fr": "0.9892096031806608",
      "de": "0.9877939644550251",
      "ha": "0.9560053569045827",
      "hi": "0.9654103068162035",
      "hu": "0.9813899223400793"
    }
  },
  {
    "task_id": "PHP/12",
    "prompt": {
      "en": "<?php\n\n\n/**\n    * Finds the fractional element in a diagonally arranged sequence.\n    * In this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\n    * For example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * The function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\n    * Input: An integer 'n' (n < 20000).\n    * Output: A string representing the 'n'th element in the sequence.\n    * Examples:\n    * - Input: 3, Output: \"2/1\"\n    * - Input: 14, Output: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "sq": "<?php\n\n\n/**\n    * Gjen elementin fraksional në një sekuencë të rregulluar diagonal.\n    * Në këtë sekuencë, fraksionet janë të rregulluara në një model diagonal. Rreshti i parë përmban fraksione me numëruesin 1 dhe emëruesit në rritje. Çdo rresht pasues rrit numëruesin dhe zvogëlon emëruesin derisa të arrijë në 1.\n    * Për shembull, sekuenca fillon me 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Funksioni merr një numër të plotë 'n' dhe kthen elementin e 'n'-të në këtë sekuencë si një varg në formën 'numërues/emërues'.\n    * Hyrja: Një numër i plotë 'n' (n < 20000).\n    * Dalja: Një varg që përfaqëson elementin e 'n'-të në sekuencë.\n    * Shembuj:\n    * - Hyrja: 3, Dalja: \"2/1\"\n    * - Hyrja: 14, Dalja: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hy": "<?php\n\n\n/**\n    * Գտնում է կոտորակային տարրը անկյունագծորեն դասավորված հաջորդականությունում:\n    * Այս հաջորդականությունում կոտորակները դասավորված են անկյունագծային օրինակով: Առաջին տողը պարունակում է կոտորակներ, որոնց համարիչը 1 է, իսկ հայտարարը աճում է: Յուրաքանչյուր հաջորդ տողում համարիչը աճում է, իսկ հայտարարը նվազում է մինչև հասնում է 1-ի:\n    * Օրինակ, հաջորդականությունը սկսվում է 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Ֆունկցիան ընդունում է ամբողջ թիվ 'n' և վերադարձնում է այս հաջորդականության 'n'-րդ տարրը որպես տող 'համարիչ/հայտարար' ձևով:\n    * Մուտք: Ամբողջ թիվ 'n' (n < 20000):\n    * Ելք: Տող, որը ներկայացնում է հաջորդականության 'n'-րդ տարրը:\n    * Օրինակներ:\n    * - Մուտք: 3, Ելք: \"2/1\"\n    * - Մուտք: 14, Ելք: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "bn": "<?php\n\n\n/**\n    * একটি ত্রিভুজাকৃতি বিন্যাসে ভগ্নাংশীয় উপাদান খুঁজে বের করে।\n    * এই বিন্যাসে, ভগ্নাংশগুলি ত্রিভুজাকৃতি প্যাটার্নে সাজানো থাকে। প্রথম সারিতে ভগ্নাংশগুলি 1 লব্ধাংশ এবং ক্রমবর্ধমান হর দিয়ে থাকে। প্রতিটি পরবর্তী সারি লব্ধাংশ বৃদ্ধি করে এবং হর হ্রাস করে যতক্ষণ না এটি 1 এ পৌঁছায়।\n    * উদাহরণস্বরূপ, বিন্যাসটি শুরু হয় 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * ফাংশনটি একটি পূর্ণসংখ্যা 'n' গ্রহণ করে এবং এই বিন্যাসের 'n' তম উপাদানকে একটি স্ট্রিং আকারে 'লব্ধাংশ/হর' আকারে ফেরত দেয়।\n    * ইনপুট: একটি পূর্ণসংখ্যা 'n' (n < 20000)।\n    * আউটপুট: একটি স্ট্রিং যা বিন্যাসের 'n' তম উপাদানকে উপস্থাপন করে।\n    * উদাহরণ:\n    * - ইনপুট: 3, আউটপুট: \"2/1\"\n    * - ইনপুট: 14, আউটপুট: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "bg": "<?php\n\n\n/**\n    * Намира дробния елемент в диагонално подредена последователност.\n    * В тази последователност дробите са подредени в диагонален модел. Първият ред съдържа дроби с числител 1 и увеличаващи се знаменатели. Всеки следващ ред увеличава числителя и намалява знаменателя, докато достигне 1.\n    * Например, последователността започва с 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Функцията приема цяло число 'n' и връща 'n'-тия елемент в тази последователност като низ във формата 'числител/знаменател'.\n    * Вход: Цяло число 'n' (n < 20000).\n    * Изход: Низ, представляващ 'n'-тия елемент в последователността.\n    * Примери:\n    * - Вход: 3, Изход: \"2/1\"\n    * - Вход: 14, Изход: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "zh": "<?php\n\n\n/**\n    * 在对角排列的序列中查找分数元素。\n    * 在这个序列中，分数以对角线模式排列。第一行包含分子为1且分母递增的分数。每一行的分子增加，分母减少，直到达到1。\n    * 例如，序列以1/1, 1/2, 2/1, 3/1, 2/2, ... 开始\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * 该函数接受一个整数 'n' 并返回该序列中的第 'n' 个元素，格式为 'numerator/denominator' 的字符串。\n    * 输入: 一个整数 'n' (n < 20000)。\n    * 输出: 表示序列中第 'n' 个元素的字符串。\n    * 示例:\n    * - 输入: 3, 输出: \"2/1\"\n    * - 输入: 14, 输出: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "fr": "<?php\n\n\n/**\n    * Trouve l'élément fractionnaire dans une séquence disposée en diagonale.\n    * Dans cette séquence, les fractions sont disposées en diagonale. La première ligne contient des fractions avec le numérateur 1 et des dénominateurs croissants. Chaque ligne suivante augmente le numérateur et diminue le dénominateur jusqu'à atteindre 1.\n    * Par exemple, la séquence commence par 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * La fonction prend un entier 'n' et renvoie le 'nième' élément dans cette séquence sous forme de chaîne de caractères sous la forme 'numérateur/dénominateur'.\n    * Entrée : Un entier 'n' (n < 20000).\n    * Sortie : Une chaîne de caractères représentant le 'nième' élément dans la séquence.\n    * Exemples :\n    * - Entrée : 3, Sortie : \"2/1\"\n    * - Entrée : 14, Sortie : \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "de": "<?php\n\n\n/**\n    * Findet das Bruch-Element in einer diagonal angeordneten Sequenz.\n    * In dieser Sequenz sind Brüche in einem diagonalen Muster angeordnet. Die erste Zeile enthält Brüche mit dem Zähler 1 und steigenden Nennern. Jede nachfolgende Zeile erhöht den Zähler und verringert den Nenner, bis er 1 erreicht.\n    * Zum Beispiel beginnt die Sequenz mit 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Die Funktion nimmt eine ganze Zahl 'n' und gibt das 'n'-te Element in dieser Sequenz als String in der Form 'Zähler/Nenner' zurück.\n    * Eingabe: Eine ganze Zahl 'n' (n < 20000).\n    * Ausgabe: Ein String, der das 'n'-te Element in der Sequenz darstellt.\n    * Beispiele:\n    * - Eingabe: 3, Ausgabe: \"2/1\"\n    * - Eingabe: 14, Ausgabe: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "ha": "<?php\n\n\n/**\n    * Nemi abin da aka raba a cikin jerin da aka shirya a diagonal.\n    * A cikin wannan jerin, an shirya abubuwan da aka raba a cikin tsarin diagonal. Layin farko yana dauke da abubuwan da aka raba tare da mai rarrabawa 1 da masu rarrabawa masu karuwa. Kowanne layi na gaba yana kara mai rarrabawa kuma yana rage mai rarrabawa har sai ya kai 1.\n    * Alal misali, jerin yana farawa da 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * Aikin yana daukar cikakken lamba 'n' kuma yana dawo da 'n'th abu a cikin wannan jerin a matsayin kirtani a cikin tsarin 'mai rarrabawa/mai rarrabawa'.\n    * Shigar: Cikakken lamba 'n' (n < 20000).\n    * Fitarwa: Kirtani da ke wakiltar 'n'th abu a cikin jerin.\n    * Misalai:\n    * - Shigar: 3, Fitarwa: \"2/1\"\n    * - Shigar: 14, Fitarwa: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hi": "<?php\n\n\n/**\n    * एक विकर्ण रूप से व्यवस्थित अनुक्रम में भिन्नात्मक तत्व ढूंढता है।\n    * इस अनुक्रम में, भिन्नों को एक विकर्ण पैटर्न में व्यवस्थित किया जाता है। पहली पंक्ति में अंश 1 और बढ़ते हर के साथ भिन्न होते हैं। प्रत्येक अगली पंक्ति में अंश बढ़ता है और हर घटता है जब तक कि यह 1 तक नहीं पहुंच जाता।\n    * उदाहरण के लिए, अनुक्रम 1/1, 1/2, 2/1, 3/1, 2/2, ... से शुरू होता है\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * फ़ंक्शन एक पूर्णांक 'n' लेता है और इस अनुक्रम में 'n'th तत्व को एक स्ट्रिंग के रूप में 'अंश/हर' के रूप में लौटाता है।\n    * इनपुट: एक पूर्णांक 'n' (n < 20000)।\n    * आउटपुट: अनुक्रम में 'n'th तत्व को दर्शाने वाली एक स्ट्रिंग।\n    * उदाहरण:\n    * - इनपुट: 3, आउटपुट: \"2/1\"\n    * - इनपुट: 14, आउटपुट: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) ",
      "hu": "<?php\n\n\n/**\n    * Megkeresi a tört elemet egy átlósan elrendezett sorozatban.\n    * Ebben a sorozatban a törtek átlós mintázatban vannak elrendezve. Az első sor olyan törteket tartalmaz, amelyek számlálója 1, és a nevezők növekednek. Minden következő sor növeli a számlálót és csökkenti a nevezőt, amíg el nem éri az 1-et.\n    * Például a sorozat így kezdődik: 1/1, 1/2, 2/1, 3/1, 2/2, ...\n        1/1   1/2   1/3   1/4   1/5\n\n        2/1   2/2   2/3   2/4\n\n        3/1   3/2   3/3\n\n        4/1   4/2\n\n        5/1\n\n    * A függvény egy egész számot 'n' vesz át, és visszaadja az 'n'-edik elemet ebben a sorozatban egy karakterláncként a 'számláló/nevező' formában.\n    * Bemenet: Egy egész szám 'n' (n < 20000).\n    * Kimenet: Egy karakterlánc, amely az 'n'-edik elemet reprezentálja a sorozatban.\n    * Példák:\n    * - Bemenet: 3, Kimenet: \"2/1\"\n    * - Bemenet: 14, Kimenet: \"2/4\"\n*/\n\n\nfunction findFractionalElement($n) "
    },
    "prompt_bertscore": {
      "sq": "0.978308569239085",
      "hy": "0.9469595307218728",
      "bn": "0.963739229420557",
      "bg": "0.9738205157796017",
      "zh": "0.9608880889311823",
      "fr": "0.9569607690373604",
      "de": "0.9821449164183929",
      "ha": "0.956610980936358",
      "hi": "0.9899628095855451",
      "hu": "0.9457929744940549"
    },
    "canonical_solution": "{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}",
    "instruction": {
      "en": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nՏվեք PHP կոդի հակիրճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, সর্বাধিক ৫০০ অক্ষরের মধ্যে।",
      "bg": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nBa da takaitaccen bayani a cikin yare na halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findFractionalElement($n)\n{\n    // Find the diagonal this element is on\n    $d = 1;\n    while ($d * ($d + 1) / 2 < $n) {\n        $d++;\n    }\n\n    // Position within the diagonal\n    $p = $n - ($d * ($d - 1) / 2);\n\n    // Check if the diagonal is even or odd\n    if ($d % 2 == 0) {\n        // Even diagonal: numerator increases, denominator decreases\n        $numerator = $p;\n        $denominator = $d - $p + 1;\n    } else {\n        // Odd diagonal: numerator decreases, denominator increases\n        $numerator = $d - $p + 1;\n        $denominator = $p;\n    }\n\n    return \"$numerator/$denominator\";\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9353905028088767",
      "bn": "0.8850309477835774",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(findFractionalElement(3) === \"2/1\");\n    assert(findFractionalElement(14) === \"2/4\");\n    assert(findFractionalElement(7) === \"1/4\");\n    assert(findFractionalElement(12345) === \"59/99\");\n    \n}\n\nmain();\n?>",
    "entry_point": "findFractionalElement",
    "signature": "function findFractionalElement($n)",
    "docstring": {
      "en": "Finds the fractional element in a diagonally arranged sequence.\nIn this sequence, fractions are arranged in a diagonal pattern. The first row contains fractions with the numerator 1 and increasing denominators. Each subsequent row increases the numerator and decreases the denominator until it reaches 1.\nFor example, the sequence starts with 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nInput: An integer 'n' (n < 20000).\nOutput: A string representing the 'n'th element in the sequence.\nExamples:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"",
      "sq": "Gjen elementin fraksional në një sekuencë të rregulluar diagonal.\nNë këtë sekuencë, fraksionet janë të rregulluara në një model diagonal. Rreshti i parë përmban fraksione me numëruesin 1 dhe emëruesit në rritje. Çdo rresht i mëvonshëm rrit numëruesin dhe zvogëlon emëruesin derisa të arrijë 1.\nPër shembull, sekuenca fillon me 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nFunksioni merr një numër të plotë 'n' dhe kthen elementin e 'n'-të në këtë sekuencë si një varg në formën 'numërues/emërues'.\nInput: Një numër i plotë 'n' (n < 20000).\nOutput: Një varg që përfaqëson elementin e 'n'-të në sekuencë.\nShembuj:\n- Input: 3, Output: \"2/1\"\n- Input: 14, Output: \"2/4\"",
      "hy": "Գտնում է կոտորակային տարրը անկյունագծորեն դասավորված հաջորդականության մեջ:\nԱյս հաջորդականության մեջ կոտորակները դասավորված են անկյունագծային նախշով: Առաջին տողը պարունակում է կոտորակներ, որոնց համարիչը 1 է և հայտարարը մեծանում է: Յուրաքանչյուր հաջորդ տողում համարիչը մեծանում է և հայտարարը փոքրանում է մինչև հասնում է 1:\nՕրինակ, հաջորդականությունը սկսվում է 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nՖունկցիան ընդունում է ամբողջ թիվ 'n' և վերադարձնում է այս հաջորդականության 'n'-րդ տարրը որպես տող 'համարիչ/հայտարար' ձևով:\nՄուտք: Ամբողջ թիվ 'n' (n < 20000):\nԵլք: Տող, որը ներկայացնում է հաջորդականության 'n'-րդ տարրը:\nՕրինակներ:\n- Մուտք: 3, Ելք: \"2/1\"\n- Մուտք: 14, Ելք: \"2/4\"",
      "bn": "ডায়াগোনালভাবে সাজানো একটি ক্রমে ভগ্নাংশীয় উপাদান খুঁজে বের করে।\nএই ক্রমে, ভগ্নাংশগুলি একটি ডায়াগোনাল প্যাটার্নে সাজানো থাকে। প্রথম সারিতে লব্ধাংশ ১ এবং ক্রমবর্ধমান হর সহ ভগ্নাংশ থাকে। প্রতিটি পরবর্তী সারি লব্ধাংশ বাড়ায় এবং হর কমায় যতক্ষণ না এটি ১ এ পৌঁছায়।\nউদাহরণস্বরূপ, ক্রমটি শুরু হয় 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nফাংশনটি একটি পূর্ণসংখ্যা 'n' গ্রহণ করে এবং এই ক্রমের 'n' তম উপাদানটি একটি স্ট্রিং আকারে 'লব্ধাংশ/হর' রূপে ফেরত দেয়।\nইনপুট: একটি পূর্ণসংখ্যা 'n' (n < 20000)।\nআউটপুট: ক্রমের 'n' তম উপাদানটি উপস্থাপনকারী একটি স্ট্রিং।\nউদাহরণ:\n- ইনপুট: 3, আউটপুট: \"2/1\"\n- ইনপুট: 14, আউটপুট: \"2/4\"",
      "bg": "Намира дробния елемент в диагонално подредена последователност.\nВ тази последователност дробите са подредени в диагонален модел. Първият ред съдържа дроби с числител 1 и увеличаващи се знаменатели. Всеки следващ ред увеличава числителя и намалява знаменателя, докато достигне 1.\nНапример, последователността започва с 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nФункцията приема цяло число 'n' и връща 'n'-тия елемент в тази последователност като низ във формата 'числител/знаменател'.\nВход: Цяло число 'n' (n < 20000).\nИзход: Низ, представляващ 'n'-тия елемент в последователността.\nПримери:\n- Вход: 3, Изход: \"2/1\"\n- Вход: 14, Изход: \"2/4\"",
      "zh": "找到对角排列序列中的分数元素。\n在这个序列中，分数以对角线模式排列。第一行包含分子为1且分母递增的分数。每一行后续行增加分子并减少分母，直到分母达到1。\n例如，序列以1/1, 1/2, 2/1, 3/1, 2/2, ... 开始。\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\n函数接受一个整数 'n' 并返回该序列中的第 'n' 个元素，形式为 'numerator/denominator' 的字符串。\n输入：一个整数 'n' (n < 20000)。\n输出：表示序列中第 'n' 个元素的字符串。\n示例：\n- 输入: 3, 输出: \"2/1\"\n- 输入: 14, 输出: \"2/4\"",
      "fr": "Trouve l'élément fractionnaire dans une séquence disposée en diagonale.\nDans cette séquence, les fractions sont disposées selon un motif diagonal. La première ligne contient des fractions avec le numérateur 1 et des dénominateurs croissants. Chaque ligne suivante augmente le numérateur et diminue le dénominateur jusqu'à ce qu'il atteigne 1.\nPar exemple, la séquence commence par 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nLa fonction prend un entier 'n' et renvoie le 'nième' élément de cette séquence sous forme de chaîne de caractères sous la forme 'numérateur/dénominateur'.\nEntrée : Un entier 'n' (n < 20000).\nSortie : Une chaîne représentant le 'nième' élément de la séquence.\nExemples :\n- Entrée : 3, Sortie : \"2/1\"\n- Entrée : 14, Sortie : \"2/4\"",
      "de": "Findet das Bruch-Element in einer diagonal angeordneten Sequenz.\nIn dieser Sequenz sind Brüche in einem diagonalen Muster angeordnet. Die erste Zeile enthält Brüche mit dem Zähler 1 und zunehmenden Nennern. Jede nachfolgende Zeile erhöht den Zähler und verringert den Nenner, bis er 1 erreicht.\nZum Beispiel beginnt die Sequenz mit 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nDie Funktion nimmt eine ganze Zahl 'n' und gibt das 'n'-te Element in dieser Sequenz als Zeichenkette in der Form 'Zähler/Nenner' zurück.\nEingabe: Eine ganze Zahl 'n' (n < 20000).\nAusgabe: Eine Zeichenkette, die das 'n'-te Element in der Sequenz darstellt.\nBeispiele:\n- Eingabe: 3, Ausgabe: \"2/1\"\n- Eingabe: 14, Ausgabe: \"2/4\"",
      "ha": "Nemi abin kason a cikin jerin da aka shirya a diagonal.\nA cikin wannan jerin, an shirya kason a cikin tsarin diagonal. Layin farko yana dauke da kason da ke da mai kidayar 1 da kuma masu rarrabewa masu karuwa. Kowanne layi na gaba yana kara mai kidayar kuma yana rage mai rarrabewa har sai ya kai 1.  \nMisali, jerin yana farawa da 1/1, 1/2, 2/1, 3/1, 2/2, ...  \n1/1   1/2   1/3   1/4   1/5  \n\n2/1   2/2   2/3   2/4  \n\n3/1   3/2   3/3  \n\n4/1   4/2  \n\n5/1  \n\nAikin yana daukar cikakken lamba 'n' kuma yana mayar da abu na 'n' a cikin wannan jerin a matsayin kirtani a cikin nau'i na 'mai kidayar/mai rarrabewa'.  \nShigarwa: Cikakken lamba 'n' (n < 20000).  \nFitarwa: Kirtani da ke wakiltar abu na 'n' a cikin jerin.  \nMisalai:  \n- Shigarwa: 3, Fitarwa: \"2/1\"  \n- Shigarwa: 14, Fitarwa: \"2/4\"  ",
      "hi": "एक विकर्ण रूप से व्यवस्थित अनुक्रम में भिन्नात्मक तत्व खोजता है।\nइस अनुक्रम में, भिन्नों को एक विकर्ण पैटर्न में व्यवस्थित किया गया है। पहली पंक्ति में अंश 1 के साथ भिन्न होते हैं और हर बढ़ते हर में हर बढ़ता है। प्रत्येक बाद की पंक्ति में अंश बढ़ता है और हर घटता है जब तक कि यह 1 तक नहीं पहुंच जाता।\nउदाहरण के लिए, अनुक्रम 1/1, 1/2, 2/1, 3/1, 2/2, ... से शुरू होता है।\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nThe function takes an integer 'n' and returns the 'n'th element in this sequence as a string in the form 'numerator/denominator'.\nयह फ़ंक्शन एक पूर्णांक 'n' लेता है और इस अनुक्रम में 'n'th तत्व को 'अंश/हर' के रूप में एक स्ट्रिंग के रूप में लौटाता है।\nInput: An integer 'n' (n < 20000).\nइनपुट: एक पूर्णांक 'n' (n < 20000)।\nOutput: A string representing the 'n'th element in the sequence.\nआउटपुट: अनुक्रम में 'n'th तत्व को दर्शाने वाली एक स्ट्रिंग।\nExamples:\nउदाहरण:\n- Input: 3, Output: \"2/1\"\n- इनपुट: 3, आउटपुट: \"2/1\"\n- Input: 14, Output: \"2/4\"\n- इनपुट: 14, आउटपुट: \"2/4\"",
      "hu": "Megkeresi a tört elemet egy átlósan elrendezett sorozatban.\nEbben a sorozatban a törtek átlós mintában vannak elrendezve. Az első sor olyan törteket tartalmaz, amelyek számlálója 1, és a nevezők növekvőek. Minden egyes következő sor növeli a számlálót és csökkenti a nevezőt, amíg el nem éri az 1-et.\nPéldául a sorozat így kezdődik: 1/1, 1/2, 2/1, 3/1, 2/2, ...\n1/1   1/2   1/3   1/4   1/5\n\n2/1   2/2   2/3   2/4\n\n3/1   3/2   3/3\n\n4/1   4/2\n\n5/1\n\nA függvény egy 'n' egész számot vesz be, és visszaadja az 'n'-edik elemet ebben a sorozatban egy 'számláló/nevező' formájú sztringként.\nBemenet: Egy 'n' egész szám (n < 20000).\nKimenet: Egy sztring, amely az 'n'-edik elemet képviseli a sorozatban.\nPéldák:\n- Bemenet: 3, Kimenet: \"2/1\"\n- Bemenet: 14, Kimenet: \"2/4\""
    },
    "docstring_bertscore": {
      "sq": "0.9722745755240072",
      "hy": "0.9621287342911261",
      "bn": "0.9866383328981642",
      "bg": "0.9712879784214069",
      "zh": "0.9439298215199476",
      "fr": "0.9570223444554813",
      "de": "0.9770607731854238",
      "ha": "0.9547124717544265",
      "hi": "0.895965550259548",
      "hu": "0.9368935389021678"
    }
  },
  {
    "task_id": "PHP/13",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the monthly repayment amount for an equal principal repayment loan.\n    * In this repayment model, each month's repayment amount consists of two parts:\n    * - A constant principal payment, which is the total loan amount divided by the total number of months.\n    * - The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\n    * Input: \n    * - $loanAmount (int): The total loan amount in ten-thousands.\n    * - $monthlyInterestRate (float): The monthly interest rate.\n    * - $totalMonths (int): The total number of months for loan repayment.\n    * Output: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\n    * Example: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "sq": "<?php\n\n/**\n    * Llogarit shumën mujore të pagesës për një kredi me shlyerje të barabartë të principalit.\n    * Në këtë model shlyerjeje, shuma e pagesës mujore përbëhet nga dy pjesë:\n    * - Një pagesë konstante e principalit, e cila është shuma totale e kredisë e ndarë me numrin total të muajve.\n    * - Pagesa e interesit, e cila është shuma e mbetur e kredisë e shumëzuar me normën mujore të interesit.\n    * Hyrja: \n    * - $loanAmount (int): Shuma totale e kredisë në dhjetë-mijëra.\n    * - $monthlyInterestRate (float): Norma mujore e interesit.\n    * - $totalMonths (int): Numri total i muajve për shlyerjen e kredisë.\n    * Dalja: Kthen shumën e pagesës së muajit të parë si një numër i plotë (në Yuan). Injoroni pikën dhjetore dhe mos rrumbullakosni\n    * Shembull: calculateMonthlyRepayment(500, 0.004, 360) duhet të kthejë 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hy": "<?php\n\n/**\n    * Հաշվում է ամսական մարումների գումարը հավասար հիմնական մարումների վարկի համար:\n    * Այս մարումների մոդելում յուրաքանչյուր ամսվա մարումների գումարը բաղկացած է երկու մասից.\n    * - Հիմնական մարումների հաստատուն վճար, որը ընդհանուր վարկի գումարը բաժանված է ամիսների ընդհանուր քանակով:\n    * - Տոկոսադրույքի վճար, որը չմարված վարկի գումարը բազմապատկված է ամսական տոկոսադրույքով:\n    * Մուտք: \n    * - $loanAmount (int): Ընդհանուր վարկի գումարը տասնյակ հազարներով:\n    * - $monthlyInterestRate (float): Ամսական տոկոսադրույքը:\n    * - $totalMonths (int): Վարկի մարումների ամիսների ընդհանուր քանակը:\n    * Ելք: Վերադարձնում է առաջին ամսվա մարումների գումարը որպես ամբողջ թիվ (Յուանով): Անտեսեք տասնորդական կետը և մի կլորացրեք\n    * Օրինակ: calculateMonthlyRepayment(500, 0.004, 360) պետք է վերադարձնի 33889:\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "bn": "<?php\n\n/**\n    * সমান মূলধন পরিশোধ ঋণের জন্য মাসিক পরিশোধের পরিমাণ গণনা করে।\n    * এই পরিশোধ মডেলে, প্রতিটি মাসের পরিশোধের পরিমাণ দুটি অংশে বিভক্ত:\n    * - একটি ধ্রুবক মূলধন পরিশোধ, যা মোট ঋণের পরিমাণকে মোট মাসের সংখ্যা দ্বারা ভাগ করে।\n    * - সুদ পরিশোধ, যা বাকি ঋণের পরিমাণকে মাসিক সুদের হার দ্বারা গুণ করে।\n    * ইনপুট: \n    * - $loanAmount (int): মোট ঋণের পরিমাণ দশ-হাজারে।\n    * - $monthlyInterestRate (float): মাসিক সুদের হার।\n    * - $totalMonths (int): ঋণ পরিশোধের মোট মাসের সংখ্যা।\n    * আউটপুট: প্রথম মাসের পরিশোধের পরিমাণ একটি পূর্ণসংখ্যা হিসাবে ফেরত দেয় (ইউয়ানে)। দশমিক বিন্দু বাদ দিন এবং রাউন্ড করবেন না\n    * উদাহরণ: calculateMonthlyRepayment(500, 0.004, 360) 33889 ফেরত দেবে।\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "bg": "<?php\n\n/**\n    * Изчислява месечната сума за погасяване на заем с равни вноски по главницата.\n    * В този модел на погасяване, сумата за погасяване всеки месец се състои от две части:\n    * - Постоянно плащане по главницата, което е общата сума на заема, разделена на общия брой месеци.\n    * - Плащане на лихва, което е остатъчната сума на заема, умножена по месечния лихвен процент.\n    * Вход:\n    * - $loanAmount (int): Общата сума на заема в десетки хиляди.\n    * - $monthlyInterestRate (float): Месечният лихвен процент.\n    * - $totalMonths (int): Общият брой месеци за погасяване на заема.\n    * Изход: Връща сумата за погасяване за първия месец като цяло число (в юани). Изхвърлете десетичната точка и не закръгляйте\n    * Пример: calculateMonthlyRepayment(500, 0.004, 360) трябва да върне 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "zh": "<?php\n\n/**\n    * 计算等额本金还款贷款的每月还款金额。\n    * 在这种还款模式中，每个月的还款金额由两部分组成：\n    * - 固定的本金还款，即总贷款金额除以总月数。\n    * - 利息还款，即剩余贷款金额乘以月利率。\n    * 输入: \n    * - $loanAmount (int): 贷款总金额，单位为万元。\n    * - $monthlyInterestRate (float): 月利率。\n    * - $totalMonths (int): 贷款还款的总月数。\n    * 输出: 返回第一个月的还款金额，单位为元。去掉小数点，不进行四舍五入\n    * 示例: calculateMonthlyRepayment(500, 0.004, 360) 应返回 33889。\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "fr": "<?php\n\n/**\n    * Calcule le montant du remboursement mensuel pour un prêt à remboursement de capital égal.\n    * Dans ce modèle de remboursement, le montant du remboursement de chaque mois se compose de deux parties :\n    * - Un paiement de capital constant, qui est le montant total du prêt divisé par le nombre total de mois.\n    * - Le paiement des intérêts, qui est le montant du prêt restant multiplié par le taux d'intérêt mensuel.\n    * Entrée : \n    * - $loanAmount (int) : Le montant total du prêt en dizaines de milliers.\n    * - $monthlyInterestRate (float) : Le taux d'intérêt mensuel.\n    * - $totalMonths (int) : Le nombre total de mois pour le remboursement du prêt.\n    * Sortie : Renvoie le montant du remboursement du premier mois en tant qu'entier (en Yuan). Supprimez le point décimal et ne pas arrondir.\n    * Exemple : calculateMonthlyRepayment(500, 0.004, 360) devrait renvoyer 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "de": "<?php\n\n/**\n    * Berechnet den monatlichen Rückzahlungsbetrag für ein Darlehen mit gleichbleibender Tilgung.\n    * In diesem Rückzahlungsmodell besteht der monatliche Rückzahlungsbetrag aus zwei Teilen:\n    * - Eine konstante Tilgungszahlung, die der gesamten Darlehenssumme geteilt durch die Gesamtanzahl der Monate entspricht.\n    * - Die Zinszahlung, die dem ausstehenden Darlehensbetrag multipliziert mit dem monatlichen Zinssatz entspricht.\n    * Eingabe: \n    * - $loanAmount (int): Die gesamte Darlehenssumme in Zehntausend.\n    * - $monthlyInterestRate (float): Der monatliche Zinssatz.\n    * - $totalMonths (int): Die Gesamtanzahl der Monate für die Darlehensrückzahlung.\n    * Ausgabe: Gibt den Rückzahlungsbetrag des ersten Monats als Ganzzahl (in Yuan) zurück. Den Dezimalpunkt verwerfen und nicht runden.\n    * Beispiel: calculateMonthlyRepayment(500, 0.004, 360) sollte 33889 zurückgeben.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "ha": "<?php\n\n/**\n    * Lissafi na adadin biyan kudin wata-wata don lamuni da aka biya daidai da babban birni.\n    * A cikin wannan tsarin biyan, adadin biyan kowane wata ya ƙunshi sassa biyu:\n    * - Biyan babban birni mai tsayayye, wanda shine jimlar adadin lamuni da aka raba da jimlar adadin watanni.\n    * - Biyan riba, wanda shine adadin lamuni da bai biya ba ninka ta hanyar ribar wata-wata.\n    * Shigarwa: \n    * - $loanAmount (int): Jimlar adadin lamuni a cikin dubu goma.\n    * - $monthlyInterestRate (float): Ribar wata-wata.\n    * - $totalMonths (int): Jimlar adadin watanni don biyan lamuni.\n    * Fitarwa: Yana dawowa da adadin biyan wata na farko a matsayin cikakken lamba (a cikin Yuan). Yi watsi da maƙasudin lamba kuma kada ka yi zagaye\n    * Misali: calculateMonthlyRepayment(500, 0.004, 360) ya kamata ya dawo da 33889.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hi": "<?php\n\n/**\n    * समान मूलधन पुनर्भुगतान ऋण के लिए मासिक पुनर्भुगतान राशि की गणना करता है।\n    * इस पुनर्भुगतान मॉडल में, प्रत्येक महीने की पुनर्भुगतान राशि दो भागों में होती है:\n    * - एक स्थिर मूलधन भुगतान, जो कुल ऋण राशि को कुल महीनों की संख्या से विभाजित करके प्राप्त होता है।\n    * - ब्याज भुगतान, जो बकाया ऋण राशि को मासिक ब्याज दर से गुणा करके प्राप्त होता है।\n    * इनपुट: \n    * - $loanAmount (int): दस-हजारों में कुल ऋण राशि।\n    * - $monthlyInterestRate (float): मासिक ब्याज दर।\n    * - $totalMonths (int): ऋण पुनर्भुगतान के लिए कुल महीनों की संख्या।\n    * आउटपुट: पहले महीने की पुनर्भुगतान राशि को एक पूर्णांक के रूप में लौटाता है (युआन में)। दशमलव बिंदु को हटा दें और गोल न करें\n    * उदाहरण: calculateMonthlyRepayment(500, 0.004, 360) को 33889 लौटाना चाहिए।\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int ",
      "hu": "<?php\n\n/**\n    * Kiszámítja az egyenlő tőketörlesztésű kölcsön havi törlesztőrészletét.\n    * Ebben a törlesztési modellben minden hónap törlesztőrészlete két részből áll:\n    * - Egy állandó tőketörlesztés, amely a teljes kölcsönösszeg osztva a hónapok teljes számával.\n    * - A kamattörlesztés, amely a fennálló kölcsönösszeg szorozva a havi kamatlábbal.\n    * Bemenet: \n    * - $loanAmount (int): A teljes kölcsönösszeg tízezerben.\n    * - $monthlyInterestRate (float): A havi kamatláb.\n    * - $totalMonths (int): A kölcsön törlesztésének teljes hónapjainak száma.\n    * Kimenet: Visszaadja az első hónap törlesztőrészletét egész számként (jüanban). El kell hagyni a tizedesjegyet és nem kell kerekíteni\n    * Példa: calculateMonthlyRepayment(500, 0.004, 360) vissza kell adja a 33889-et.\n*/\n\nfunction calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int "
    },
    "prompt_bertscore": {
      "sq": "0.9788913507770414",
      "hy": "0.9594597378611603",
      "bn": "0.9626493445198185",
      "bg": "0.9742680300280734",
      "zh": "0.9397663301030753",
      "fr": "0.9594327241293397",
      "de": "0.9626964199201239",
      "ha": "0.9509277684741878",
      "hi": "0.9575149478004478",
      "hu": "0.9625486389166339"
    },
    "canonical_solution": "{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}",
    "instruction": {
      "en": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nՏվեք PHP կոդի հակիրճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\n请用不超过500个字符的中文提供该PHP代码的简洁自然语言描述（文档字符串）。",
      "fr": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nBa da takaitaccen bayani a cikin yare na halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int\n{\n    $principalPayment = ($loanAmount * 10000) / $totalMonths;\n    $interestPayment = $loanAmount * 10000 * $monthlyInterestRate;\n    return (int) $principalPayment + $interestPayment;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9608588902651701",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8464503729840279",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateMonthlyRepayment(500, 0.004, 360) === 33888);\n    assert(calculateMonthlyRepayment(300, 0.005, 180) === 31666); // Example test case\n\n}\n\nmain();\n?>",
    "entry_point": "calculateMonthlyRepayment",
    "signature": "function calculateMonthlyRepayment($loanAmount, $monthlyInterestRate, $totalMonths): int",
    "docstring": {
      "en": "Calculates the monthly repayment amount for an equal principal repayment loan.\nIn this repayment model, each month's repayment amount consists of two parts:\n- A constant principal payment, which is the total loan amount divided by the total number of months.\n- The interest payment, which is the outstanding loan amount multiplied by the monthly interest rate.\nInput:\n- $loanAmount (int): The total loan amount in ten-thousands.\n- $monthlyInterestRate (float): The monthly interest rate.\n- $totalMonths (int): The total number of months for loan repayment.\nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round\nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.",
      "sq": "Llogarit shumën e pagesës mujore për një hua me shlyerje të barabartë të principalit. Në këtë model shlyerjeje, shuma e pagesës mujore përbëhet nga dy pjesë:\n- Një pagesë konstante e principalit, e cila është shuma totale e huasë e ndarë me numrin total të muajve.\n- Pagesa e interesit, e cila është shuma e mbetur e huasë e shumëzuar me normën mujore të interesit.\nInput:\n- $loanAmount (int): Shuma totale e huasë në dhjetë-mijëra.\n- $monthlyInterestRate (float): Norma mujore e interesit.\n- $totalMonths (int): Numri total i muajve për shlyerjen e huasë.\nOutput: Kthen shumën e pagesës së muajit të parë si një numër i plotë (në Yuan). Injoroni pikën dhjetore dhe mos e rrumbullakosni.\nShembull: calculateMonthlyRepayment(500, 0.004, 360) duhet të kthejë 33889.",
      "hy": "Հաշվում է հավասար հիմնական մարումների վարկի ամսական մարումների գումարը։ Այս մարումների մոդելում յուրաքանչյուր ամսվա մարումների գումարը բաղկացած է երկու մասից՝ \n- Հիմնական վճարումը, որը վարկի ընդհանուր գումարը բաժանված է ամիսների ընդհանուր քանակի վրա։\n- Տոկոսավճարը, որը չվճարված վարկի գումարը բազմապատկված է ամսական տոկոսադրույքով։\nՄուտք՝\n- $loanAmount (int): Վարկի ընդհանուր գումարը տասնյակ հազարներով։\n- $monthlyInterestRate (float): Ամսական տոկոսադրույքը։\n- $totalMonths (int): Վարկի մարումների ամիսների ընդհանուր քանակը։\nԵլք՝ Վերադարձնում է առաջին ամսվա մարումների գումարը որպես ամբողջ թիվ (Յուանով)։ Անտեսեք տասնորդական կետը և մի կլորացրեք։\nՕրինակ՝ calculateMonthlyRepayment(500, 0.004, 360) պետք է վերադարձնի 33889։",
      "bn": "সমান মূলধন পরিশোধ ঋণের জন্য মাসিক পরিশোধের পরিমাণ গণনা করে। \nএই পরিশোধ মডেলে, প্রতিটি মাসের পরিশোধের পরিমাণ দুটি অংশ নিয়ে গঠিত:\n- একটি ধ্রুবক মূলধন পরিশোধ, যা মোট ঋণের পরিমাণকে মোট মাসের সংখ্যা দ্বারা ভাগ করে পাওয়া যায়।\n- সুদের পরিশোধ, যা বকেয়া ঋণের পরিমাণকে মাসিক সুদের হার দ্বারা গুণ করে পাওয়া যায়।\nইনপুট:\n- $loanAmount (int): মোট ঋণের পরিমাণ দশ হাজারে।\n- $monthlyInterestRate (float): মাসিক সুদের হার।\n- $totalMonths (int): ঋণ পরিশোধের মোট মাসের সংখ্যা।\nআউটপুট: প্রথম মাসের পরিশোধের পরিমাণ একটি পূর্ণসংখ্যা হিসাবে (ইউয়ানে) ফেরত দেয়। দশমিক বিন্দু বাদ দিন এবং রাউন্ড করবেন না\nউদাহরণ: calculateMonthlyRepayment(500, 0.004, 360) 33889 ফেরত দেবে।",
      "bg": "Изчислява месечната сума за погасяване на заем с равни вноски по главницата. В този модел на погасяване, месечната сума за погасяване се състои от две части:\n- Постоянно плащане по главницата, което е общата сума на заема, разделена на общия брой месеци.\n- Плащане на лихвата, което е оставащата сума на заема, умножена по месечния лихвен процент.\nВход:\n- $loanAmount (int): Общата сума на заема в десетки хиляди.\n- $monthlyInterestRate (float): Месечният лихвен процент.\n- $totalMonths (int): Общият брой месеци за погасяване на заема.\nИзход: Връща сумата за погасяване за първия месец като цяло число (в юани). Изхвърлете десетичната точка и не закръгляйте.\nПример: calculateMonthlyRepayment(500, 0.004, 360) трябва да върне 33889.",
      "zh": "计算等额本金贷款的每月还款金额。\n在这种还款模式中，每月的还款金额由两部分组成：\n- 固定的本金支付，即总贷款金额除以总月数。\n- 利息支付，即未偿还贷款金额乘以月利率。\n输入：\n- $loanAmount (int): 以万元为单位的总贷款金额。\n- $monthlyInterestRate (float): 月利率。\n- $totalMonths (int): 贷款还款的总月数。\n输出：返回第一个月的还款金额，作为整数（以元为单位）。舍弃小数点，不进行四舍五入。\n示例：calculateMonthlyRepayment(500, 0.004, 360) 应返回 33889。",
      "fr": "Calcule le montant du remboursement mensuel pour un prêt à remboursement de capital égal.  \nDans ce modèle de remboursement, le montant du remboursement de chaque mois se compose de deux parties :  \n- Un paiement de capital constant, qui est le montant total du prêt divisé par le nombre total de mois.  \n- Le paiement des intérêts, qui est le montant du prêt restant multiplié par le taux d'intérêt mensuel.  \nEntrée :  \n- $loanAmount (int): Le montant total du prêt en dizaines de milliers.  \n- $monthlyInterestRate (float): Le taux d'intérêt mensuel.  \n- $totalMonths (int): Le nombre total de mois pour le remboursement du prêt.  \nSortie : Renvoie le montant du remboursement du premier mois en tant qu'entier (en Yuan). Supprimez le point décimal et ne pas arrondir  \nExemple : calculateMonthlyRepayment(500, 0.004, 360) devrait renvoyer 33889.",
      "de": "Berechnet den monatlichen Rückzahlungsbetrag für ein Darlehen mit gleichbleibender Tilgung.\nIn diesem Rückzahlungsmodell besteht der monatliche Rückzahlungsbetrag aus zwei Teilen:\n- Einer konstanten Tilgungszahlung, die dem gesamten Darlehensbetrag geteilt durch die Gesamtzahl der Monate entspricht.\n- Der Zinszahlung, die dem ausstehenden Darlehensbetrag multipliziert mit dem monatlichen Zinssatz entspricht.\nEingabe:\n- $loanAmount (int): Der gesamte Darlehensbetrag in Zehntausend.\n- $monthlyInterestRate (float): Der monatliche Zinssatz.\n- $totalMonths (int): Die Gesamtzahl der Monate für die Darlehensrückzahlung.\nAusgabe: Gibt den Rückzahlungsbetrag des ersten Monats als Ganzzahl (in Yuan) zurück. Den Dezimalpunkt verwerfen und nicht runden.\nBeispiel: calculateMonthlyRepayment(500, 0.004, 360) sollte 33889 zurückgeben.",
      "ha": "Lissafin adadin biyan kuɗi na wata-wata don lamunin biyan kuɗi na babban jari daidai.\nA cikin wannan samfurin biyan, adadin biyan kowane wata ya ƙunshi sassa biyu:  \n- Biyan babban jari mai ɗorewa, wanda shine jimillar adadin rancen da aka raba da jimillar adadin watanni.  \n- Biyan riba, wanda shine adadin rancen da bai biya ba wanda aka ninka da yawan ribar wata-wata.  \nInput:  \n- $loanAmount (int): Jimillar adadin rancen a cikin dubu goma.  \n- $monthlyInterestRate (float): Yawan ribar wata-wata.  \n- $totalMonths (int): Jimillar adadin watanni don biyan rance.  \nOutput: Returns the first month's repayment amount as an integer (in Yuan). Discard the decimal point and do not round  \nExample: calculateMonthlyRepayment(500, 0.004, 360) should return 33889.",
      "hi": "मासिक पुनर्भुगतान राशि की गणना एक समान मूलधन पुनर्भुगतान ऋण के लिए करता है। इस पुनर्भुगतान मॉडल में, प्रत्येक महीने की पुनर्भुगतान राशि दो भागों में होती है:\n- एक स्थिर मूलधन भुगतान, जो कुल ऋण राशि को कुल महीनों की संख्या से विभाजित करता है।\n- ब्याज भुगतान, जो बकाया ऋण राशि को मासिक ब्याज दर से गुणा करता है।\nइनपुट:\n- $loanAmount (int): कुल ऋण राशि दस-हजारों में।\n- $monthlyInterestRate (float): मासिक ब्याज दर।\n- $totalMonths (int): ऋण पुनर्भुगतान के लिए कुल महीनों की संख्या।\nआउटपुट: पहले महीने की पुनर्भुगतान राशि को पूर्णांक (युआन में) के रूप में लौटाता है। दशमलव बिंदु को हटा दें और राउंड न करें।\nउदाहरण: calculateMonthlyRepayment(500, 0.004, 360) को 33889 लौटाना चाहिए।",
      "hu": "Kiszámítja az egyenlő tőketörlesztésű kölcsön havi törlesztőrészletét.\nEbben a törlesztési modellben minden havi törlesztőrészlet két részből áll:\n- Egy állandó tőketörlesztés, amely a teljes kölcsönösszeg elosztva a hónapok teljes számával.\n- A kamattörlesztés, amely a fennálló kölcsönösszeg szorozva a havi kamatlábbal.\nBemenet:\n- $loanAmount (int): A teljes kölcsönösszeg tízezerben.\n- $monthlyInterestRate (float): A havi kamatláb.\n- $totalMonths (int): A kölcsön törlesztésének teljes hónapszáma.\nKimenet: Visszaadja az első havi törlesztőrészlet összegét egész számként (jüanban). Elveti a tizedesjegyet és nem kerekít\nPélda: calculateMonthlyRepayment(500, 0.004, 360) vissza kell adnia 33889."
    },
    "docstring_bertscore": {
      "sq": "0.975057784423068",
      "hy": "0.9512042619645883",
      "bn": "0.9541110189606529",
      "bg": "0.9767381974466232",
      "zh": "0.9526489007258551",
      "fr": "0.9545627044471262",
      "de": "0.9498505959178356",
      "ha": "0.97649765605519",
      "hi": "0.9694166816016773",
      "hu": "0.9522077426495766"
    }
  },
  {
    "task_id": "PHP/14",
    "prompt": {
      "en": "<?php\n/**\n * Converts a decimal number into a sum of powers of 2.\n * This function is useful for understanding the binary representation of a decimal number.\n * It breaks down the number into a sum of powers of 2, which are easier to understand and work with,\n * especially in contexts where binary calculations are frequent.\n * \n * For example:\n * - Input: 7\n * - Output: \"7=4+2+1\"\n * - Input: 43\n * - Output: \"43=32+8+2+1\"\n * \n * Input: A single integer ($number), where 0 < $number < 1000000.\n * Output: A string representing the equation of the sum of powers of 2 that equals the input number.\n */\n\nfunction decimalToBinarySum($number) ",
      "sq": "<?php\n/**\n * Konverton një numër dhjetor në një shumë të fuqive të 2.\n * Kjo funksion është i dobishëm për të kuptuar përfaqësimin binar të një numri dhjetor.\n * Ai e ndan numrin në një shumë të fuqive të 2, të cilat janë më të lehta për t'u kuptuar dhe punuar me to,\n * sidomos në kontekste ku llogaritjet binare janë të shpeshta.\n * \n * Për shembull:\n * - Hyrja: 7\n * - Dalja: \"7=4+2+1\"\n * - Hyrja: 43\n * - Dalja: \"43=32+8+2+1\"\n * \n * Hyrja: Një numër i vetëm ($number), ku 0 < $number < 1000000.\n * Dalja: Një varg që përfaqëson ekuacionin e shumës së fuqive të 2 që është e barabartë me numrin e hyrjes.\n */\n\nfunction decimalToBinarySum($number) ",
      "hy": "<?php\n/**\n * Վերածում է տասնորդական թիվը 2-ի աստիճանների գումարի:\n * Այս ֆունկցիան օգտակար է տասնորդական թվի բինար ներկայացումը հասկանալու համար:\n * Այն բաժանում է թիվը 2-ի աստիճանների գումարի, որոնք ավելի հեշտ են հասկանալ և աշխատել,\n * հատկապես այն համատեքստերում, որտեղ բինար հաշվարկները հաճախակի են:\n * \n * Օրինակ:\n * - Մուտք: 7\n * - Ելք: \"7=4+2+1\"\n * - Մուտք: 43\n * - Ելք: \"43=32+8+2+1\"\n * \n * Մուտք: Միայն մեկ ամբողջ թիվ ($number), որտեղ 0 < $number < 1000000:\n * Ելք: Տող, որը ներկայացնում է 2-ի աստիճանների գումարի հավասարումը, որը հավասար է մուտքի թվին:\n */\n\nfunction decimalToBinarySum($number) ",
      "bn": "<?php\n/**\n * একটি দশমিক সংখ্যাকে ২ এর ঘাতের যোগফলে রূপান্তর করে।\n * এই ফাংশনটি একটি দশমিক সংখ্যার বাইনারি উপস্থাপন বোঝার জন্য উপকারী।\n * এটি সংখ্যাটিকে ২ এর ঘাতের যোগফলে ভেঙে দেয়, যা বোঝা এবং কাজ করার জন্য সহজ,\n * বিশেষ করে সেই প্রসঙ্গে যেখানে বাইনারি গণনা প্রায়শই ঘটে।\n * \n * উদাহরণস্বরূপ:\n * - ইনপুট: 7\n * - আউটপুট: \"7=4+2+1\"\n * - ইনপুট: 43\n * - আউটপুট: \"43=32+8+2+1\"\n * \n * ইনপুট: একটি একক পূর্ণসংখ্যা ($number), যেখানে 0 < $number < 1000000।\n * আউটপুট: একটি স্ট্রিং যা ইনপুট সংখ্যার সমান ২ এর ঘাতের যোগফলের সমীকরণ উপস্থাপন করে।\n */\n\nfunction decimalToBinarySum($number) ",
      "bg": "<?php\n/**\n * Преобразува десетично число в сума от степени на 2.\n * Тази функция е полезна за разбиране на двоичното представяне на десетично число.\n * Разбива числото на сума от степени на 2, които са по-лесни за разбиране и работа,\n * особено в контексти, където двоичните изчисления са чести.\n * \n * Например:\n * - Вход: 7\n * - Изход: \"7=4+2+1\"\n * - Вход: 43\n * - Изход: \"43=32+8+2+1\"\n * \n * Вход: Едно цяло число ($number), където 0 < $number < 1000000.\n * Изход: Низ, представляващ уравнението на сумата от степени на 2, която е равна на входното число.\n */\n\nfunction decimalToBinarySum($number) ",
      "zh": "<?php\n/**\n * 将十进制数转换为2的幂之和。\n * 此函数对于理解十进制数的二进制表示非常有用。\n * 它将数字分解为2的幂之和，这样更容易理解和处理，\n * 特别是在二进制计算频繁的情况下。\n * \n * 例如:\n * - 输入: 7\n * - 输出: \"7=4+2+1\"\n * - 输入: 43\n * - 输出: \"43=32+8+2+1\"\n * \n * 输入: 一个整数 ($number)，其中 0 < $number < 1000000。\n * 输出: 一个字符串，表示等于输入数字的2的幂之和的方程。\n */\n\nfunction decimalToBinarySum($number) ",
      "fr": "<?php\n/**\n * Convertit un nombre décimal en une somme de puissances de 2.\n * Cette fonction est utile pour comprendre la représentation binaire d'un nombre décimal.\n * Elle décompose le nombre en une somme de puissances de 2, ce qui est plus facile à comprendre et à manipuler,\n * surtout dans des contextes où les calculs binaires sont fréquents.\n * \n * Par exemple :\n * - Entrée : 7\n * - Sortie : \"7=4+2+1\"\n * - Entrée : 43\n * - Sortie : \"43=32+8+2+1\"\n * \n * Entrée : Un entier ($number), où 0 < $number < 1000000.\n * Sortie : Une chaîne représentant l'équation de la somme des puissances de 2 qui est égale au nombre d'entrée.\n */\n\nfunction decimalToBinarySum($number) ",
      "de": "<?php\n/**\n * Konvertiert eine Dezimalzahl in eine Summe von Zweierpotenzen.\n * Diese Funktion ist nützlich, um die binäre Darstellung einer Dezimalzahl zu verstehen.\n * Sie zerlegt die Zahl in eine Summe von Zweierpotenzen, die leichter zu verstehen und zu bearbeiten sind,\n * insbesondere in Kontexten, in denen binäre Berechnungen häufig vorkommen.\n * \n * Zum Beispiel:\n * - Eingabe: 7\n * - Ausgabe: \"7=4+2+1\"\n * - Eingabe: 43\n * - Ausgabe: \"43=32+8+2+1\"\n * \n * Eingabe: Eine einzelne ganze Zahl ($number), wobei 0 < $number < 1000000.\n * Ausgabe: Ein String, der die Gleichung der Summe von Zweierpotenzen darstellt, die der Eingabezahl entspricht.\n */\n\nfunction decimalToBinarySum($number) ",
      "ha": "<?php\n/**\n * Yana canza lambar decimal zuwa jumlar ikon 2.\n * Wannan aikin yana da amfani don fahimtar wakilcin binary na lambar decimal.\n * Yana raba lambar zuwa jumlar ikon 2, wanda ya fi sauƙi a fahimta da aiki da shi,\n * musamman a cikin yanayi inda lissafin binary ya zama ruwan dare.\n * \n * Alal misali:\n * - Shigarwa: 7\n * - Fitarwa: \"7=4+2+1\"\n * - Shigarwa: 43\n * - Fitarwa: \"43=32+8+2+1\"\n * \n * Shigarwa: Wani lamba guda ɗaya ($number), inda 0 < $number < 1000000.\n * Fitarwa: Wani jere da ke wakiltar daidaiton jumlar ikon 2 wanda ya yi daidai da lambar shigarwa.\n */\n\nfunction decimalToBinarySum($number) ",
      "hi": "<?php\n/**\n * एक दशमलव संख्या को 2 की शक्तियों के योग में परिवर्तित करता है।\n * यह फ़ंक्शन एक दशमलव संख्या के बाइनरी प्रतिनिधित्व को समझने के लिए उपयोगी है।\n * यह संख्या को 2 की शक्तियों के योग में तोड़ता है, जो समझने और काम करने में आसान होते हैं,\n * विशेष रूप से उन संदर्भों में जहां बाइनरी गणनाएँ बार-बार होती हैं।\n * \n * उदाहरण के लिए:\n * - इनपुट: 7\n * - आउटपुट: \"7=4+2+1\"\n * - इनपुट: 43\n * - आउटपुट: \"43=32+8+2+1\"\n * \n * इनपुट: एक एकल पूर्णांक ($number), जहां 0 < $number < 1000000।\n * आउटपुट: एक स्ट्रिंग जो उस समीकरण का प्रतिनिधित्व करती है जो इनपुट संख्या के बराबर 2 की शक्तियों के योग को दर्शाती है।\n */\n\nfunction decimalToBinarySum($number) ",
      "hu": "<?php\n/**\n * Átalakít egy decimális számot a 2 hatványainak összegévé.\n * Ez a függvény hasznos a decimális szám bináris reprezentációjának megértéséhez.\n * A számot a 2 hatványainak összegére bontja le, amelyeket könnyebb megérteni és kezelni,\n * különösen olyan környezetekben, ahol gyakoriak a bináris számítások.\n * \n * Például:\n * - Bemenet: 7\n * - Kimenet: \"7=4+2+1\"\n * - Bemenet: 43\n * - Kimenet: \"43=32+8+2+1\"\n * \n * Bemenet: Egyetlen egész szám ($number), ahol 0 < $number < 1000000.\n * Kimenet: Egy karakterlánc, amely az input számnak megfelelő 2 hatványainak összegét ábrázoló egyenletet képviseli.\n */\n\nfunction decimalToBinarySum($number) "
    },
    "prompt_bertscore": {
      "sq": "0.9935510674189403",
      "hy": "0.9828454857723029",
      "bn": "0.9881334237762137",
      "bg": "0.9840293228432708",
      "zh": "0.9632223931691043",
      "fr": "0.9813364907675809",
      "de": "0.9861588391583459",
      "ha": "0.9790174810689986",
      "hi": "0.9864651272059017",
      "hu": "0.9830917874447862"
    },
    "canonical_solution": "{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}",
    "instruction": {
      "en": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\n请用最多500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function decimalToBinarySum($number)\n{\n    $result = $number . \"=\";\n    $power = 0;\n\n    while ((1 << $power) <= $number) {\n        $power++;\n    }\n\n    while ($number > 0) {\n        $power--;\n        $currentPowerOfTwo = 1 << $power;\n        if ($currentPowerOfTwo <= $number) {\n            $number -= $currentPowerOfTwo;\n            $result .= $currentPowerOfTwo . \"+\";\n        }\n    }\n\n    return rtrim($result, \"+\");\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.924762585641224",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8790082760002186",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9234037552045643",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(decimalToBinarySum(7) === \"7=4+2+1\");\n    assert(decimalToBinarySum(43) === \"43=32+8+2+1\");\n    assert(decimalToBinarySum(15) === \"15=8+4+2+1\");\n    assert(decimalToBinarySum(1) === \"1=1\");\n    assert(decimalToBinarySum(32) === \"32=32\");\n    \n}\n\nmain();\n?>",
    "entry_point": "decimalToBinarySum",
    "signature": "function decimalToBinarySum($number)",
    "docstring": {
      "en": "Converts a decimal number into a sum of powers of 2.\nThis function is useful for understanding the binary representation of a decimal number.\nIt breaks down the number into a sum of powers of 2, which are easier to understand and work with,\nespecially in contexts where binary calculations are frequent.\n\nFor example:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: A single integer ($number), where 0 < $number < 1000000.\nOutput: A string representing the equation of the sum of powers of 2 that equals the input number.",
      "sq": "Konverton një numër dhjetor në një shumë të fuqive të 2.\nKjo funksion është e dobishme për të kuptuar përfaqësimin binar të një numri dhjetor.\nAjo e ndan numrin në një shumë të fuqive të 2, të cilat janë më të lehta për t'u kuptuar dhe punuar me to,\nsidomos në kontekste ku llogaritjet binare janë të shpeshta.\n\nPër shembull:\n- Input: 7\n- Output: \"7=4+2+1\"\n- Input: 43\n- Output: \"43=32+8+2+1\"\n\nInput: Një numër i vetëm i plotë ($number), ku 0 < $number < 1000000.\nOutput: Një varg që përfaqëson ekuacionin e shumës së fuqive të 2 që është e barabartë me numrin e dhënë si input.",
      "hy": "Վերափոխում է տասնորդական թիվը 2-ի աստիճանների գումարի:\nԱյս ֆունկցիան օգտակար է տասնորդական թվի երկբայնային ներկայացումը հասկանալու համար:\nԱյն բաժանում է թիվը 2-ի աստիճանների գումարի, որոնք ավելի հեշտ են հասկանալ և աշխատել,\nհատկապես այն համատեքստերում, որտեղ երկբայնային հաշվարկները հաճախակի են:\n\nՕրինակ:\n- Մուտքագրում: 7\n- Ելք: \"7=4+2+1\"\n- Մուտքագրում: 43\n- Ելք: \"43=32+8+2+1\"\n\nՄուտքագրում: Միակ ամբողջ թիվ ($number), որտեղ 0 < $number < 1000000:\nԵլք: Տող, որը ներկայացնում է 2-ի աստիճանների գումարի հավասարումը, որը հավասար է մուտքագրված թվին:",
      "bn": "দশমিক সংখ্যাকে ২ এর ঘাতের যোগফলে রূপান্তর করে।\nএই ফাংশনটি একটি দশমিক সংখ্যার বাইনারি উপস্থাপন বোঝার জন্য উপকারী।\nএটি সংখ্যাটিকে ২ এর ঘাতের যোগফলে ভেঙে দেয়, যা বোঝা এবং কাজ করা সহজ,\nবিশেষত সেই প্রসঙ্গে যেখানে বাইনারি গণনা ঘন ঘন হয়।\n\nউদাহরণস্বরূপ:\n- ইনপুট: 7\n- আউটপুট: \"7=4+2+1\"\n- ইনপুট: 43\n- আউটপুট: \"43=32+8+2+1\"\n\nইনপুট: একটি একক পূর্ণসংখ্যা ($number), যেখানে 0 < $number < 1000000।\nআউটপুট: একটি স্ট্রিং যা ইনপুট সংখ্যার সমান ২ এর ঘাতের যোগফলের সমীকরণ উপস্থাপন করে।",
      "bg": "Преобразува десетично число в сума от степени на 2.  \nТази функция е полезна за разбиране на двоичното представяне на десетично число.  \nРазбива числото на сума от степени на 2, които са по-лесни за разбиране и работа,  \nособено в контексти, където двоичните изчисления са чести.\n\nНапример:  \n- Вход: 7  \n- Изход: \"7=4+2+1\"  \n- Вход: 43  \n- Изход: \"43=32+8+2+1\"  \n\nВход: Едно цяло число ($number), където 0 < $number < 1000000.  \nИзход: Низ, представляващ уравнението на сумата от степени на 2, което е равно на входното число.",
      "zh": "将十进制数转换为2的幂之和。\n此函数对于理解十进制数的二进制表示非常有用。\n它将数字分解为2的幂之和，这样更容易理解和处理，\n特别是在二进制计算频繁的情况下。\n\n例如：\n- 输入: 7\n- 输出: \"7=4+2+1\"\n- 输入: 43\n- 输出: \"43=32+8+2+1\"\n\n输入: 一个整数 ($number)，其中 0 < $number < 1000000。\n输出: 一个字符串，表示等于输入数字的2的幂之和的方程。",
      "fr": "Convertit un nombre décimal en une somme de puissances de 2.  \nCette fonction est utile pour comprendre la représentation binaire d'un nombre décimal.  \nElle décompose le nombre en une somme de puissances de 2, ce qui est plus facile à comprendre et à manipuler,  \nsurtout dans des contextes où les calculs binaires sont fréquents.\n\nPar exemple :  \n- Entrée : 7  \n- Sortie : \"7=4+2+1\"  \n- Entrée : 43  \n- Sortie : \"43=32+8+2+1\"\n\nEntrée : Un seul entier ($number), où 0 < $number < 1000000.  \nSortie : Une chaîne de caractères représentant l'équation de la somme des puissances de 2 qui est égale au nombre d'entrée.",
      "de": "Konvertiert eine Dezimalzahl in eine Summe von Zweierpotenzen.\nDiese Funktion ist nützlich, um die binäre Darstellung einer Dezimalzahl zu verstehen.\nSie zerlegt die Zahl in eine Summe von Zweierpotenzen, die leichter zu verstehen und zu bearbeiten sind,\ninsbesondere in Kontexten, in denen binäre Berechnungen häufig vorkommen.\n\nZum Beispiel:\n- Eingabe: 7\n- Ausgabe: \"7=4+2+1\"\n- Eingabe: 43\n- Ausgabe: \"43=32+8+2+1\"\n\nEingabe: Eine einzelne ganze Zahl ($number), wobei 0 < $number < 1000000.\nAusgabe: Ein String, der die Gleichung der Summe von Zweierpotenzen darstellt, die der Eingabezahl entspricht.",
      "ha": "Yana canza lambar decimal zuwa jumlar karfin 2.\nWannan aikin yana da amfani don fahimtar wakilcin binary na lambar decimal.  \nYana rarraba lambar zuwa jumlar ikon 2, wanda ya fi sauƙi a fahimta da aiki da shi,  \nmusamman a cikin yanayi inda lissafin binary ya zama ruwan dare.  \n\nMisali:  \n- Shigarwa: 7  \n- Fitarwa: \"7=4+2+1\"  \n- Shigarwa: 43  \n- Fitarwa: \"43=32+8+2+1\"  \n\nShigarwa: Lamba guda ɗaya ($number), inda 0 < $number < 1000000.  \nFitarwa: Wani rubutu mai wakiltar daidaiton jumlar ikon 2 wanda yayi daidai da lambar shigarwa.",
      "hi": "दशमलव संख्या को 2 की शक्तियों के योग में परिवर्तित करता है।\nयह फ़ंक्शन एक दशमलव संख्या के द्विआधारी निरूपण को समझने के लिए उपयोगी है।  \nयह संख्या को 2 की शक्तियों के योग में विभाजित करता है, जो समझने और काम करने में आसान होते हैं,  \nविशेष रूप से उन संदर्भों में जहाँ द्विआधारी गणनाएँ बार-बार होती हैं।\n\nउदाहरण के लिए:  \n- इनपुट: 7  \n- आउटपुट: \"7=4+2+1\"  \n- इनपुट: 43  \n- आउटपुट: \"43=32+8+2+1\"  \n\nइनपुट: एकल पूर्णांक ($number), जहाँ 0 < $number < 1000000।  \nआउटपुट: एक स्ट्रिंग जो 2 की शक्तियों के योग का समीकरण दर्शाती है जो इनपुट संख्या के बराबर है।",
      "hu": "Átalakít egy decimális számot a 2 hatványainak összegévé.\nEz a függvény hasznos a decimális szám bináris reprezentációjának megértéséhez.\nA számot a 2 hatványainak összegére bontja le, amelyek könnyebben érthetők és kezelhetők,\nkülönösen olyan kontextusokban, ahol a bináris számítások gyakoriak.\n\nPéldául:\n- Bemenet: 7\n- Kimenet: \"7=4+2+1\"\n- Bemenet: 43\n- Kimenet: \"43=32+8+2+1\"\n\nBemenet: Egyetlen egész szám ($number), ahol 0 < $number < 1000000.\nKimenet: Egy karakterlánc, amely az input számnak megfelelő 2 hatványainak összegének egyenletét ábrázolja."
    },
    "docstring_bertscore": {
      "sq": "0.9897228640852549",
      "hy": "0.9919961887961992",
      "bn": "0.9769604648430013",
      "bg": "0.9953490696280681",
      "zh": "0.9594341145420069",
      "fr": "0.9791267277785677",
      "de": "0.9790923647226487",
      "ha": "0.9668068770252598",
      "hi": "0.9882220129261553",
      "hu": "0.9726186033439597"
    }
  },
  {
    "task_id": "PHP/15",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the rectangle with the largest area that includes a given point.\n * In this task, we are given a list of rectangles, each defined by two opposite corner points,\n * and a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\n * The goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\n * Input: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\n *        and a needle point [x, y].\n * Output: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\n * Example: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\n *          the function should return 2, as the second rectangle is larger and contains the needle.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "sq": "<?php\n\n\n/**\n * Gjen drejtkëndëshin me sipërfaqen më të madhe që përfshin një pikë të dhënë.\n * Në këtë detyrë, na jepet një listë drejtkëndëshash, secili i përcaktuar nga dy pika këndore të kundërta,\n * dhe një pikë e referuar si \"gjilpëra\". Anët e drejtkëndëshave janë paralele me boshtet e koordinatave.\n * Qëllimi është të gjendet drejtkëndëshi me sipërfaqen maksimale që përmban gjilpërën (duke përfshirë kufirin e saj).\n * Hyrja: Një varg drejtkëndëshash (çdo drejtkëndësh është një varg me dy pika [x1, y1, x2, y2]),\n *        dhe një pikë gjilpërë [x, y].\n * Dalja: Kthen indeksin (bazuar në 1) të drejtkëndëshit me sipërfaqen më të madhe që përmban gjilpërën.\n * Shembull: Për drejtkëndëshat [[1,1,4,4], [2,2,6,6]] dhe pikën gjilpërë [3,3],\n *          funksioni duhet të kthejë 2, pasi drejtkëndëshi i dytë është më i madh dhe përmban gjilpërën.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hy": "<?php\n\n\n/**\n * Գտնում է ամենամեծ մակերես ունեցող ուղղանկյունը, որը ներառում է տրված կետը։\n * Այս առաջադրանքում մեզ տրված է ուղղանկյունների ցուցակ, որոնցից յուրաքանչյուրը սահմանվում է երկու հակադիր անկյունային կետերով,\n * և կետ, որը կոչվում է \"ասեղ\"։ Ուղղանկյունների կողմերը զուգահեռ են կոորդինատային առանցքներին։\n * Նպատակն է գտնել ամենամեծ մակերես ունեցող ուղղանկյունը, որը պարունակում է ասեղը (ներառյալ նրա սահմանը)։\n * Մուտք: Ուղղանկյունների զանգված (յուրաքանչյուր ուղղանկյունը երկու կետերի զանգված է [x1, y1, x2, y2]),\n *        և ասեղ կետը [x, y]։\n * Ելք: Վերադարձնում է ամենամեծ մակերես ունեցող ուղղանկյան ինդեքսը (1-ից սկսած), որը պարունակում է ասեղը։\n * Օրինակ: Ուղղանկյունների համար [[1,1,4,4], [2,2,6,6]] և ասեղ կետը [3,3],\n *          ֆունկցիան պետք է վերադարձնի 2, քանի որ երկրորդ ուղղանկյունը մեծ է և պարունակում է ասեղը։\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "bn": "<?php\n\n\n/**\n * এমন একটি আয়তক্ষেত্র খুঁজে বের করে যার ক্ষেত্রফল সবচেয়ে বড় এবং যা একটি নির্দিষ্ট বিন্দু অন্তর্ভুক্ত করে।\n * এই কাজটিতে, আমাদের একটি আয়তক্ষেত্রের তালিকা দেওয়া হয়েছে, প্রতিটি আয়তক্ষেত্র দুটি বিপরীত কোণ বিন্দু দ্বারা সংজ্ঞায়িত,\n * এবং একটি বিন্দু যা \"সুই\" হিসাবে উল্লেখ করা হয়েছে। আয়তক্ষেত্রের পার্শ্বগুলি স্থানাঙ্ক অক্ষের সমান্তরাল।\n * লক্ষ্য হল সবচেয়ে বড় ক্ষেত্রফল সহ আয়তক্ষেত্র খুঁজে বের করা যা সুই অন্তর্ভুক্ত করে (এর সীমানা সহ)।\n * ইনপুট: আয়তক্ষেত্রের একটি অ্যারে (প্রতিটি আয়তক্ষেত্র দুটি বিন্দুর একটি অ্যারে [x1, y1, x2, y2]),\n *        এবং একটি সুই বিন্দু [x, y]।\n * আউটপুট: সবচেয়ে বড় ক্ষেত্রফল সহ আয়তক্ষেত্রের সূচক (১-ভিত্তিক) ফেরত দেয় যা সুই অন্তর্ভুক্ত করে।\n * উদাহরণ: আয়তক্ষেত্র [[1,1,4,4], [2,2,6,6]] এবং সুই বিন্দু [3,3] এর জন্য,\n *          ফাংশনটি ২ ফেরত দেবে, কারণ দ্বিতীয় আয়তক্ষেত্রটি বড় এবং সুই অন্তর্ভুক্ত করে।\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "bg": "<?php\n\n\n/**\n * Намира правоъгълника с най-голяма площ, който включва дадена точка.\n * В тази задача ни е даден списък от правоъгълници, всеки от които е определен от две противоположни ъглови точки,\n * и точка, наречена \"игла\". Страните на правоъгълниците са успоредни на координатните оси.\n * Целта е да се намери правоъгълникът с максимална площ, който съдържа иглата (включително и границата й).\n * Вход: Масив от правоъгълници (всеки правоъгълник е масив от две точки [x1, y1, x2, y2]),\n *        и точка игла [x, y].\n * Изход: Връща индекса (базиран на 1) на правоъгълника с най-голяма площ, който съдържа иглата.\n * Пример: За правоъгълници [[1,1,4,4], [2,2,6,6]] и точка игла [3,3],\n *          функцията трябва да върне 2, тъй като вторият правоъгълник е по-голям и съдържа иглата.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "zh": "<?php\n\n\n/**\n * 查找包含给定点的最大面积的矩形。\n * 在这个任务中，我们给定一个矩形列表，每个矩形由两个相对的角点定义，\n * 以及一个被称为“针”的点。矩形的边与坐标轴平行。\n * 目标是找到包含针（包括其边界）的最大面积矩形。\n * 输入：一个矩形数组（每个矩形是由两个点[x1, y1, x2, y2]组成的数组），\n *        和一个针点[x, y]。\n * 输出：返回包含针的最大面积矩形的索引（从1开始）。\n * 示例：对于矩形[[1,1,4,4], [2,2,6,6]]和针点[3,3]，\n *          函数应返回2，因为第二个矩形更大并且包含针。\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "fr": "<?php\n\n\n/**\n * Trouve le rectangle avec la plus grande aire qui inclut un point donné.\n * Dans cette tâche, on nous donne une liste de rectangles, chacun défini par deux points de coin opposés,\n * et un point appelé \"aiguille\". Les côtés des rectangles sont parallèles aux axes de coordonnées.\n * Le but est de trouver le rectangle avec l'aire maximale qui contient l'aiguille (y compris sa frontière).\n * Entrée : Un tableau de rectangles (chaque rectangle est un tableau de deux points [x1, y1, x2, y2]),\n *          et un point aiguille [x, y].\n * Sortie : Retourne l'indice (basé sur 1) du rectangle avec la plus grande aire qui contient l'aiguille.\n * Exemple : Pour les rectangles [[1,1,4,4], [2,2,6,6]] et le point aiguille [3,3],\n *           la fonction doit retourner 2, car le deuxième rectangle est plus grand et contient l'aiguille.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "de": "<?php\n\n\n/**\n * Findet das Rechteck mit der größten Fläche, das einen gegebenen Punkt enthält.\n * In dieser Aufgabe haben wir eine Liste von Rechtecken, die jeweils durch zwei gegenüberliegende Eckpunkte definiert sind,\n * und einen Punkt, der als \"Nadel\" bezeichnet wird. Die Seiten der Rechtecke sind parallel zu den Koordinatenachsen.\n * Das Ziel ist es, das Rechteck mit der maximalen Fläche zu finden, das die Nadel enthält (einschließlich seiner Grenze).\n * Eingabe: Ein Array von Rechtecken (jedes Rechteck ist ein Array von zwei Punkten [x1, y1, x2, y2]),\n *          und ein Nadelpunkt [x, y].\n * Ausgabe: Gibt den Index (1-basiert) des Rechtecks mit der größten Fläche zurück, das die Nadel enthält.\n * Beispiel: Für Rechtecke [[1,1,4,4], [2,2,6,6]] und Nadelpunkt [3,3],\n *           sollte die Funktion 2 zurückgeben, da das zweite Rechteck größer ist und die Nadel enthält.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "ha": "<?php\n\n\n/**\n * Nemi rectangle mai mafi girman yanki wanda ya haɗa da wani maki.\n * A wannan aikin, an ba mu jerin rectangles, kowanne an ayyana shi da maki biyu masu kishiyoyi,\n * da maki wanda ake kira \"needle\". Gefen rectangles suna daidai da axes na tsarawa.\n * Manufar ita ce a nemo rectangle mai yanki mafi girma wanda ya ƙunshi needle (ciki har da iyakarsa).\n * Shigarwa: Jeri na rectangles (kowanne rectangle jeri ne na maki biyu [x1, y1, x2, y2]),\n *        da maki needle [x, y].\n * Fitarwa: Mayar da lamba (dangane da 1) na rectangle mai yanki mafi girma wanda ya ƙunshi needle.\n * Misali: Don rectangles [[1,1,4,4], [2,2,6,6]] da maki needle [3,3],\n *          aikin ya kamata ya mayar da 2, domin rectangle na biyu ya fi girma kuma ya ƙunshi needle.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hi": "<?php\n\n\n/**\n * उस आयत को खोजें जिसका क्षेत्रफल सबसे बड़ा है और जिसमें एक दिया गया बिंदु शामिल है।\n * इस कार्य में, हमें आयतों की एक सूची दी गई है, प्रत्येक को दो विपरीत कोने के बिंदुओं द्वारा परिभाषित किया गया है,\n * और एक बिंदु जिसे \"सुई\" कहा जाता है। आयतों के किनारे समन्वय अक्षों के समानांतर होते हैं।\n * लक्ष्य यह है कि उस आयत को खोजा जाए जिसका अधिकतम क्षेत्रफल है और जो सुई को शामिल करता है (उसकी सीमा सहित)।\n * इनपुट: आयतों की एक सरणी (प्रत्येक आयत दो बिंदुओं की एक सरणी है [x1, y1, x2, y2]),\n *        और एक सुई बिंदु [x, y]।\n * आउटपुट: उस आयत का सूचकांक (1-आधारित) लौटाता है जिसका सबसे बड़ा क्षेत्रफल है और जो सुई को शामिल करता है।\n * उदाहरण: आयतों के लिए [[1,1,4,4], [2,2,6,6]] और सुई बिंदु [3,3],\n *          फ़ंक्शन को 2 लौटाना चाहिए, क्योंकि दूसरा आयत बड़ा है और सुई को शामिल करता है।\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)",
      "hu": "<?php\n\n\n/**\n * Megkeresi azt a téglalapot, amely a legnagyobb területű és tartalmaz egy adott pontot.\n * Ebben a feladatban kapunk egy listát téglalapokról, amelyeket két szemközti sarokpont határoz meg,\n * és egy pontot, amelyet \"tűnek\" nevezünk. A téglalapok oldalai párhuzamosak a koordinátatengelyekkel.\n * A cél az, hogy megtaláljuk azt a téglalapot, amely a maximális területű és tartalmazza a tűt (beleértve a határát is).\n * Bemenet: Téglalapok tömbje (minden téglalap egy két pontból álló tömb [x1, y1, x2, y2]),\n *          és egy tűpont [x, y].\n * Kimenet: Visszaadja annak a téglalapnak az indexét (1-alapú), amely a legnagyobb területű és tartalmazza a tűt.\n * Példa: Téglalapok [[1,1,4,4], [2,2,6,6]] és tűpont [3,3] esetén\n *         a függvénynek 2-t kell visszaadnia, mivel a második téglalap nagyobb és tartalmazza a tűt.\n */\n\n\nfunction findMaxAreaRectangle($rectangles, $needle)"
    },
    "prompt_bertscore": {
      "sq": "0.9937929992230408",
      "hy": "0.9792314059893731",
      "bn": "0.982754910318551",
      "bg": "0.9939356158366238",
      "zh": "0.9775728423077318",
      "fr": "0.9870794909744426",
      "de": "0.9915717156719276",
      "ha": "0.965230744951748",
      "hi": "0.9840056858279277",
      "hu": "0.9893091170015592"
    },
    "canonical_solution": "{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}",
    "instruction": {
      "en": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրումը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হতে হবে।",
      "bg": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 символа.",
      "zh": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nBayar da takaitaccen bayanin yanayi na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findMaxAreaRectangle($rectangles, $needle)\n{\n    $maxArea = 0;\n    $maxRectIndex = -1;\n\n    for ($i = 0; $i < count($rectangles); $i++) {\n        $rect = $rectangles[$i];\n        if ($needle[0] >= min($rect[0], $rect[2]) && $needle[0] <= max($rect[0], $rect[2]) &&\n            $needle[1] >= min($rect[1], $rect[3]) && $needle[1] <= max($rect[1], $rect[3])) {\n            $area = abs($rect[2] - $rect[0]) * abs($rect[3] - $rect[1]);\n            if ($area > $maxArea) {\n                $maxArea = $area;\n                $maxRectIndex = $i + 1;\n            }\n        }\n    }\n    \n    return $maxRectIndex;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8680359337518513",
      "bg": "0.8358939162203464",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8356945378509888",
      "hi": "0.9032886551475423",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(findMaxAreaRectangle([[2,3,6,8], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[6,8,2,3], [1,3,5,6], [8, 2, 1, 9]], [4,4]) === 3);\n    assert(findMaxAreaRectangle([[1,1,4,4], [2,2,6,6]], [3,3]) === 2);\n    assert(findMaxAreaRectangle([[0,0,5,5], [1,1,3,3]], [2,2]) === 1);\n    assert(findMaxAreaRectangle([[1,1,2,2], [2,2,4,4]], [5,5]) === -1); // Needle is outside all rectangles\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMaxAreaRectangle",
    "signature": "function findMaxAreaRectangle($rectangles, $needle)",
    "docstring": {
      "en": "Finds the rectangle with the largest area that includes a given point.\nIn this task, we are given a list of rectangles, each defined by two opposite corner points,\nand a point referred to as the \"needle\". The rectangles' sides are parallel to the coordinate axes.\nThe goal is to find the rectangle with the maximum area that contains the needle (including its boundary).\nInput: An array of rectangles (each rectangle is an array of two points [x1, y1, x2, y2]),\nand a needle point [x, y].\nOutput: Returns the index (1-based) of the rectangle with the largest area that contains the needle.\nExample: For rectangles [[1,1,4,4], [2,2,6,6]] and needle point [3,3],\nthe function should return 2, as the second rectangle is larger and contains the needle.",
      "sq": "Gjen drejtkëndëshin me sipërfaqen më të madhe që përfshin një pikë të dhënë. Në këtë detyrë, na jepet një listë drejtkëndëshash, secili i përcaktuar nga dy pika të kundërta të qosheve, dhe një pikë e referuar si \"gjilpëra\". Anët e drejtkëndëshave janë paralele me boshtet e koordinatave. Qëllimi është të gjendet drejtkëndëshi me sipërfaqen maksimale që përmban gjilpërën (duke përfshirë kufirin e saj). Hyrja: Një varg drejtkëndëshash (çdo drejtkëndësh është një varg me dy pika [x1, y1, x2, y2]), dhe një pikë gjilpërë [x, y]. Dalja: Kthen indeksin (bazuar në 1) të drejtkëndëshit me sipërfaqen më të madhe që përmban gjilpërën. Shembull: Për drejtkëndëshat [[1,1,4,4], [2,2,6,6]] dhe pikën e gjilpërës [3,3], funksioni duhet të kthejë 2, pasi drejtkëndëshi i dytë është më i madh dhe përmban gjilpërën.",
      "hy": "Գտնում է ամենամեծ մակերեսով ուղղանկյունը, որը ներառում է տրված կետը։\nԱյս առաջադրանքում մեզ տրված է ուղղանկյունների ցուցակ, որոնցից յուրաքանչյուրը սահմանված է երկու հակադիր անկյունային կետերով,\nև կետ, որը կոչվում է \"ասեղ\": Ուղղանկյունների կողմերը զուգահեռ են կոորդինատային առանցքներին։\nՆպատակն է գտնել ամենամեծ մակերեսով ուղղանկյունը, որը պարունակում է ասեղը (ներառյալ նրա սահմանը)։\nՄուտք: Ուղղանկյունների զանգված (յուրաքանչյուր ուղղանկյունը երկու կետերի զանգված է [x1, y1, x2, y2]),\nև ասեղ կետ [x, y]։\nԵլք: Վերադարձնում է ամենամեծ մակերեսով ուղղանկյան ինդեքսը (1-ից սկսվող), որը պարունակում է ասեղը։\nՕրինակ: Ուղղանկյունների համար [[1,1,4,4], [2,2,6,6]] և ասեղ կետ [3,3],\nֆունկցիան պետք է վերադարձնի 2, քանի որ երկրորդ ուղղանկյունը ավելի մեծ է և պարունակում է ասեղը։",
      "bn": "দেওয়া বিন্দুটি অন্তর্ভুক্ত করে এমন বৃহত্তম ক্ষেত্রফল বিশিষ্ট আয়তক্ষেত্রটি খুঁজে বের করে।\nএই কাজে, আমাদের একটি আয়তক্ষেত্রের তালিকা দেওয়া হয়, প্রতিটি আয়তক্ষেত্র দুটি বিপরীত কোণার বিন্দু দ্বারা সংজ্ঞায়িত,\nএবং একটি বিন্দু যা \"সুঁই\" হিসাবে উল্লেখ করা হয়। আয়তক্ষেত্রগুলির পার্শ্বগুলি স্থানাঙ্ক অক্ষের সমান্তরাল।\nলক্ষ্য হল সর্বাধিক ক্ষেত্রফল বিশিষ্ট আয়তক্ষেত্রটি খুঁজে বের করা যা সুঁইটিকে অন্তর্ভুক্ত করে (এর সীমানা সহ)।\nইনপুট: আয়তক্ষেত্রগুলির একটি অ্যারে (প্রতিটি আয়তক্ষেত্র দুটি বিন্দুর একটি অ্যারে [x1, y1, x2, y2]),\nএবং একটি সুঁই বিন্দু [x, y]।\nআউটপুট: বৃহত্তম ক্ষেত্রফল বিশিষ্ট আয়তক্ষেত্রটির সূচক (১-ভিত্তিক) প্রদান করে যা সুঁইটিকে অন্তর্ভুক্ত করে।\nউদাহরণ: আয়তক্ষেত্রগুলির জন্য [[1,1,4,4], [2,2,6,6]] এবং সুঁই বিন্দু [3,3],\nফাংশনটি ২ ফেরত দেবে, কারণ দ্বিতীয় আয়তক্ষেত্রটি বড় এবং সুঁইটিকে অন্তর্ভুক্ত করে।",
      "bg": "Намира правоъгълника с най-голяма площ, който включва дадена точка.\nВ тази задача ни е даден списък от правоъгълници, всеки от които е определен от две противоположни ъглови точки, и точка, наречена \"игла\". Страните на правоъгълниците са успоредни на координатните оси. Целта е да се намери правоъгълникът с максимална площ, който съдържа иглата (включително и границата ѝ).\nВход: Масив от правоъгълници (всеки правоъгълник е масив от две точки [x1, y1, x2, y2]), и точка игла [x, y].\nИзход: Връща индекса (базиран на 1) на правоъгълника с най-голяма площ, който съдържа иглата.\nПример: За правоъгълници [[1,1,4,4], [2,2,6,6]] и точка игла [3,3], функцията трябва да върне 2, тъй като вторият правоъгълник е по-голям и съдържа иглата.",
      "zh": "找到包含给定点的最大面积矩形。\n在这个任务中，我们给定一个矩形列表，每个矩形由两个对角点定义，\n以及一个称为“针”的点。矩形的边是与坐标轴平行的。\n目标是找到包含针（包括其边界）的最大面积的矩形。\n输入：一个矩形数组（每个矩形是由两个点 [x1, y1, x2, y2] 组成的数组），\n和一个针点 [x, y]。\n输出：返回包含针的最大面积矩形的索引（从1开始）。\n示例：对于矩形 [[1,1,4,4], [2,2,6,6]] 和针点 [3,3]，\n函数应返回 2，因为第二个矩形更大并且包含针。",
      "fr": "Trouve le rectangle avec la plus grande aire qui inclut un point donné.\nDans cette tâche, on nous donne une liste de rectangles, chacun défini par deux points de coin opposés,\net un point appelé \"aiguille\". Les côtés des rectangles sont parallèles aux axes de coordonnées.\nL'objectif est de trouver le rectangle avec l'aire maximale qui contient l'aiguille (y compris sa frontière).\nEntrée : Un tableau de rectangles (chaque rectangle est un tableau de deux points [x1, y1, x2, y2]),\net un point aiguille [x, y].\nSortie : Renvoie l'indice (basé sur 1) du rectangle avec la plus grande aire qui contient l'aiguille.\nExemple : Pour les rectangles [[1,1,4,4], [2,2,6,6]] et le point aiguille [3,3],\nla fonction doit renvoyer 2, car le deuxième rectangle est plus grand et contient l'aiguille.",
      "de": "Findet das Rechteck mit der größten Fläche, das einen gegebenen Punkt einschließt.\nIn dieser Aufgabe haben wir eine Liste von Rechtecken, die jeweils durch zwei gegenüberliegende Eckpunkte definiert sind,\nund einen Punkt, der als \"Nadel\" bezeichnet wird. Die Seiten der Rechtecke sind parallel zu den Koordinatenachsen.\nDas Ziel ist es, das Rechteck mit der maximalen Fläche zu finden, das die Nadel enthält (einschließlich seiner Grenze).\nEingabe: Ein Array von Rechtecken (jedes Rechteck ist ein Array von zwei Punkten [x1, y1, x2, y2]),\nund ein Nadelpunkt [x, y].\nAusgabe: Gibt den Index (1-basiert) des Rechtecks mit der größten Fläche zurück, das die Nadel enthält.\nBeispiel: Für die Rechtecke [[1,1,4,4], [2,2,6,6]] und den Nadelpunkt [3,3],\nsollte die Funktion 2 zurückgeben, da das zweite Rechteck größer ist und die Nadel enthält.",
      "ha": "Yana gano rectangle tare da mafi girman yanki wanda ya haɗa da wata takamaiman maki. \n\nA cikin wannan aikin, an ba mu jerin rectangles, kowanne an ayyana shi ta wurin maki biyu masu kishiyoyi, da kuma maki da ake kira \"needle\". Gefen rectangles suna daidai da axises na tsarawa. Manufar ita ce a sami rectangle tare da mafi girman yanki wanda ya ƙunshi needle (ciki har da iyakarsa).\n\nShigarwa: Wani tsararren jerin rectangles (kowanne rectangle tsararren jerin maki biyu [x1, y1, x2, y2]), da kuma maki na needle [x, y].\n\nFitarwa: Yana mayar da index (1-tushe) na rectangle tare da mafi girman yanki wanda ya ƙunshi needle.\n\nMisali: Ga rectangles [[1,1,4,4], [2,2,6,6]] da maki na needle [3,3], aikin ya kamata ya mayar da 2, domin rectangle na biyu ya fi girma kuma ya ƙunshi needle.",
      "hi": "सबसे बड़े क्षेत्रफल वाला आयत खोजता है जिसमें एक दिया गया बिंदु शामिल हो।\nइस कार्य में, हमें आयतों की एक सूची दी गई है, प्रत्येक को दो विपरीत कोने के बिंदुओं द्वारा परिभाषित किया गया है,\nऔर एक बिंदु जिसे \"सुई\" कहा जाता है। आयतों के किनारे निर्देशांक अक्षों के समानांतर होते हैं।\nलक्ष्य यह है कि सुई को शामिल करने वाले (उसकी सीमा सहित) अधिकतम क्षेत्रफल वाले आयत को खोजा जाए।\nइनपुट: आयतों का एक एरे (प्रत्येक आयत दो बिंदुओं का एक एरे है [x1, y1, x2, y2]),\nऔर एक सुई बिंदु [x, y]।\nआउटपुट: उस आयत का इंडेक्स (1-आधारित) लौटाता है जिसमें सबसे बड़ा क्षेत्रफल है और जो सुई को शामिल करता है।\nउदाहरण: आयतों के लिए [[1,1,4,4], [2,2,6,6]] और सुई बिंदु [3,3],\nफंक्शन को 2 लौटाना चाहिए, क्योंकि दूसरा आयत बड़ा है और सुई को शामिल करता है।",
      "hu": "Megkeresi a legnagyobb területű téglalapot, amely tartalmaz egy adott pontot.\nEbben a feladatban adott egy téglalapokból álló lista, amelyek mindegyike két szemközti sarokponttal van meghatározva,\nés egy pont, amelyet \"tűnek\" nevezünk. A téglalapok oldalai párhuzamosak a koordinátatengelyekkel.\nA cél az, hogy megtaláljuk azt a téglalapot, amelyik a legnagyobb területű és tartalmazza a tűt (beleértve a határát is).\nBemenet: Téglalapok tömbje (minden téglalap két pontból álló tömb [x1, y1, x2, y2]),\nés egy tűpont [x, y].\nKimenet: Visszaadja annak a téglalapnak az indexét (1-alapú), amelyik a legnagyobb területű és tartalmazza a tűt.\nPélda: Téglalapok [[1,1,4,4], [2,2,6,6]] és tűpont [3,3] esetén\na függvénynek 2-t kell visszaadnia, mivel a második téglalap nagyobb és tartalmazza a tűt."
    },
    "docstring_bertscore": {
      "sq": "0.9930681969626445",
      "hy": "0.9890314317288724",
      "bn": "0.972592582764044",
      "bg": "0.984388645202563",
      "zh": "0.946897955303752",
      "fr": "0.9771614787886086",
      "de": "0.9859109484428143",
      "ha": "0.9572837420369231",
      "hi": "0.9902033509769783",
      "hu": "0.9732947411610023"
    }
  },
  {
    "task_id": "PHP/16",
    "prompt": {
      "en": "<?php\n\n/**\n * Calculates the maximum value of a segment from a given array of values.\n * Imagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\n * The goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\n * This is akin to finding the most valuable portion of the ribbon to sell or use.\n *\n * Input: \n * An array $values of integers representing the value of each segment of the ribbon.\n *\n * Output:\n * Returns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n *\n * Example:\n * For a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5, \n * as the segment [3, 2] gives the maximum value.\n */\n\n function maxSegmentValue($values)",
      "sq": "<?php\n\n/**\n * Llogarit vlerën maksimale të një segmenti nga një varg i dhënë vlerash.\n * Imagjinoni një rrobaqepës që ka një shirit me segmente të ndryshme, secili me një vlerë të ndryshme, pozitive ose negative.\n * Qëllimi është të gjendet vlera totale maksimale që mund të merret duke prerë një segment të vazhdueshëm të shiritit.\n * Kjo është e ngjashme me gjetjen e pjesës më të vlefshme të shiritit për ta shitur ose përdorur.\n *\n * Hyrja:\n * Një varg $values i numrave të plotë që përfaqësojnë vlerën e secilit segment të shiritit.\n *\n * Dalja:\n * Kthen një numër të plotë që përfaqëson vlerën maksimale që mund të merret nga çdo segment i vazhdueshëm i shiritit.\n *\n * Shembull:\n * Për një shirit me gjatësi 4 me vlera [-1, 3, 2, -4], funksioni duhet të kthejë 5,\n * pasi segmenti [3, 2] jep vlerën maksimale.\n */\n\n function maxSegmentValue($values)",
      "hy": "<?php\n\n/**\n * Հաշվարկում է հատվածի առավելագույն արժեքը տրված արժեքների զանգվածից:\n * Պատկերացրեք, որ դերձակը ունի ժապավեն տարբեր հատվածներով, որոնցից յուրաքանչյուրն ունի տարբեր արժեք, դրական կամ բացասական:\n * Նպատակն է գտնել առավելագույն ընդհանուր արժեքը, որը կարելի է ստանալ ժապավենի շարունակական հատվածը կտրելով:\n * Սա նման է ժապավենի ամենաարժեքավոր հատվածը վաճառելու կամ օգտագործելու գտնելուն:\n *\n * Մուտք: \n * Ամբողջ թվերի զանգված $values, որը ներկայացնում է ժապավենի յուրաքանչյուր հատվածի արժեքը:\n *\n * Ելք:\n * Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է ժապավենի ցանկացած շարունակական հատվածից ստացվող առավելագույն արժեքը:\n *\n * Օրինակ:\n * Եթե ժապավենի երկարությունը 4 է և արժեքները [-1, 3, 2, -4] են, ֆունկցիան պետք է վերադարձնի 5, \n * քանի որ հատվածը [3, 2] տալիս է առավելագույն արժեքը:\n */\n\n function maxSegmentValue($values)",
      "bn": "<?php\n\n/**\n * একটি প্রদত্ত মানের অ্যারের একটি অংশের সর্বাধিক মান গণনা করে।\n * কল্পনা করুন একটি দর্জির কাছে বিভিন্ন অংশ সহ একটি ফিতা আছে, প্রতিটি অংশের মান আলাদা, ধনাত্মক বা ঋণাত্মক।\n * লক্ষ্য হল ফিতার একটি ধারাবাহিক অংশ কেটে সর্বাধিক মোট মান খুঁজে বের করা।\n * এটি ফিতার সবচেয়ে মূল্যবান অংশ বিক্রি বা ব্যবহারের জন্য খুঁজে বের করার মতো।\n *\n * ইনপুট:\n * একটি পূর্ণসংখ্যার অ্যারে $values যা ফিতার প্রতিটি অংশের মান উপস্থাপন করে।\n *\n * আউটপুট:\n * একটি পূর্ণসংখ্যা যা ফিতার যেকোনো ধারাবাহিক অংশ থেকে প্রাপ্ত সর্বাধিক মান উপস্থাপন করে।\n *\n * উদাহরণ:\n * 4 দৈর্ঘ্যের একটি ফিতার জন্য যার মান [-1, 3, 2, -4], ফাংশনটি 5 ফেরত দেওয়া উচিত,\n * কারণ অংশ [3, 2] সর্বাধিক মান প্রদান করে।\n */\n\n function maxSegmentValue($values)",
      "bg": "<?php\n\n/**\n * Изчислява максималната стойност на сегмент от даден масив от стойности.\n * Представете си, че шивач има лента с различни сегменти, всеки от които има различна стойност, положителна или отрицателна.\n * Целта е да се намери максималната обща стойност, която може да се получи чрез изрязване на непрекъснат сегмент от лентата.\n * Това е подобно на намирането на най-ценната част от лентата за продажба или употреба.\n *\n * Вход: \n * Масив $values от цели числа, представляващи стойността на всеки сегмент от лентата.\n *\n * Изход:\n * Връща цяло число, представляващо максималната стойност, която може да се получи от който и да е непрекъснат сегмент от лентата.\n *\n * Пример:\n * За лента с дължина 4 със стойности [-1, 3, 2, -4], функцията трябва да върне 5, \n * тъй като сегментът [3, 2] дава максималната стойност.\n */\n\n function maxSegmentValue($values)",
      "zh": "<?php\n\n/**\n * 计算给定数组中某段的最大值。\n * 想象一下，一个裁缝有一条带有各种段的缎带，每段都有不同的值，可以是正数或负数。\n * 目标是通过切割缎带的连续段来获得最大总值。\n * 这类似于寻找缎带中最有价值的部分来出售或使用。\n *\n * 输入:\n * 一个整数数组 $values，表示缎带每段的值。\n *\n * 输出:\n * 返回一个整数，表示从缎带的任何连续段中可以获得的最大值。\n *\n * 示例:\n * 对于长度为 4 的缎带，值为 [-1, 3, 2, -4]，函数应返回 5，\n * 因为段 [3, 2] 提供了最大值。\n */\n\n function maxSegmentValue($values)",
      "fr": "<?php\n\n/**\n * Calcule la valeur maximale d'un segment à partir d'un tableau donné de valeurs.\n * Imaginez qu'un tailleur a un ruban avec divers segments, chacun ayant une valeur différente, positive ou négative.\n * L'objectif est de trouver la valeur totale maximale qui peut être obtenue en coupant un segment continu du ruban.\n * Cela revient à trouver la portion la plus précieuse du ruban à vendre ou à utiliser.\n *\n * Entrée :\n * Un tableau $values d'entiers représentant la valeur de chaque segment du ruban.\n *\n * Sortie :\n * Retourne un entier représentant la valeur maximale qui peut être obtenue à partir de n'importe quel segment continu du ruban.\n *\n * Exemple :\n * Pour un ruban de longueur 4 avec des valeurs [-1, 3, 2, -4], la fonction doit retourner 5,\n * car le segment [3, 2] donne la valeur maximale.\n */\n\n function maxSegmentValue($values)",
      "de": "<?php\n\n/**\n * Berechnet den maximalen Wert eines Segments aus einem gegebenen Array von Werten.\n * Stellen Sie sich vor, ein Schneider hat ein Band mit verschiedenen Segmenten, von denen jedes einen unterschiedlichen Wert hat, positiv oder negativ.\n * Das Ziel ist es, den maximalen Gesamtwert zu finden, der durch das Schneiden eines kontinuierlichen Segments des Bandes erzielt werden kann.\n * Dies ist vergleichbar mit dem Finden des wertvollsten Teils des Bandes, um ihn zu verkaufen oder zu verwenden.\n *\n * Eingabe: \n * Ein Array $values von ganzen Zahlen, das den Wert jedes Segments des Bandes darstellt.\n *\n * Ausgabe:\n * Gibt eine ganze Zahl zurück, die den maximalen Wert darstellt, der aus einem beliebigen kontinuierlichen Segment des Bandes erzielt werden kann.\n *\n * Beispiel:\n * Für ein Band der Länge 4 mit den Werten [-1, 3, 2, -4] sollte die Funktion 5 zurückgeben, \n * da das Segment [3, 2] den maximalen Wert ergibt.\n */\n\n function maxSegmentValue($values)",
      "ha": "<?php\n\n/**\n * Lissafi mafi girman darajar wani yanki daga jerin darajoji da aka bayar.\n * Ka yi tunanin wani ɗan dinki yana da zare mai yanki daban-daban, kowanne yana da daraja daban, mai kyau ko mara kyau.\n * Manufar ita ce a nemo mafi girman jimillar darajar da za a iya samu ta hanyar yanke wani yanki mai ci gaba na zaren.\n * Wannan yana kama da nemo mafi darajar ɓangaren zaren don sayarwa ko amfani.\n *\n * Shigarwa: \n * Wani jerin $values na lambobin tsintsiya da ke wakiltar darajar kowanne yanki na zaren.\n *\n * Fitarwa:\n * Yana mayar da lamba tsintsiya da ke wakiltar mafi girman darajar da za a iya samu daga kowanne yanki mai ci gaba na zaren.\n *\n * Misali:\n * Don zaren da tsawonsa 4 tare da darajoji [-1, 3, 2, -4], aikin ya kamata ya mayar da 5, \n * domin yanki [3, 2] yana bayar da mafi girman daraja.\n */\n\n function maxSegmentValue($values)",
      "hi": "<?php\n\n/**\n * दिए गए मानों की एक array से एक खंड का अधिकतम मान गणना करता है।\n * कल्पना करें कि एक दर्जी के पास एक रिबन है जिसमें विभिन्न खंड हैं, प्रत्येक का एक अलग मान है, सकारात्मक या नकारात्मक।\n * लक्ष्य यह है कि रिबन के एक निरंतर खंड को काटकर प्राप्त किया जा सकने वाला अधिकतम कुल मान खोजा जाए।\n * यह रिबन के सबसे मूल्यवान हिस्से को बेचने या उपयोग करने के समान है।\n *\n * इनपुट: \n * पूर्णांकों की एक array $values जो रिबन के प्रत्येक खंड का मान दर्शाती है।\n *\n * आउटपुट:\n * एक पूर्णांक लौटाता है जो रिबन के किसी भी निरंतर खंड से प्राप्त किया जा सकने वाला अधिकतम मान दर्शाता है।\n *\n * उदाहरण:\n * यदि रिबन की लंबाई 4 है और मान [-1, 3, 2, -4] हैं, तो फ़ंक्शन को 5 लौटाना चाहिए,\n * क्योंकि खंड [3, 2] अधिकतम मान देता है।\n */\n\n function maxSegmentValue($values)",
      "hu": "<?php\n\n/**\n * Kiszámítja egy adott értéktömb egy szegmensének maximális értékét.\n * Képzelj el egy szabót, akinek van egy szalagja különböző szegmensekkel, amelyek mindegyike különböző, pozitív vagy negatív értékkel rendelkezik.\n * A cél az, hogy megtaláljuk azt a maximális összértéket, amelyet a szalag egy folyamatos szegmensének levágásával lehet elérni.\n * Ez hasonló ahhoz, hogy megtaláljuk a szalag legértékesebb részét, amelyet el lehet adni vagy felhasználni.\n *\n * Bemenet: \n * Egy egész számokat tartalmazó $values tömb, amely a szalag minden szegmensének értékét képviseli.\n *\n * Kimenet:\n * Visszaad egy egész számot, amely a szalag bármely folyamatos szegmenséből elérhető maximális értéket képviseli.\n *\n * Példa:\n * Egy 4 hosszúságú szalag esetén, amelynek értékei [-1, 3, 2, -4], a függvénynek 5-öt kell visszaadnia, \n * mivel a [3, 2] szegmens adja a maximális értéket.\n */\n\n function maxSegmentValue($values)"
    },
    "prompt_bertscore": {
      "sq": "0.9632881398252268",
      "hy": "0.9751340584893855",
      "bn": "0.9514634746118389",
      "bg": "0.984007672131738",
      "zh": "0.9598693137068542",
      "fr": "0.9949108910075052",
      "de": "0.987229854172886",
      "ha": "0.9525386608643807",
      "hi": "0.9741909614402318",
      "hu": "0.9710073136930046"
    },
    "canonical_solution": "  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}",
    "instruction": {
      "en": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nՏվեք հակիրճ բնական լեզվով նկարագրություն (docstring) PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\n请为以下PHP代码提供简洁的自然语言描述（文档字符串），使用中文且不超过500个字符。",
      "fr": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function maxSegmentValue($values)\n  {\n    $maxSoFar = PHP_INT_MIN;\n    $maxEndingHere = 0;\n\n    foreach ($values as $value) {\n        $maxEndingHere += $value;\n        if ($maxSoFar < $maxEndingHere) {\n            $maxSoFar = $maxEndingHere;\n        }\n\n        if ($maxEndingHere < 0) {\n            $maxEndingHere = 0;\n        }\n    }\n\n    return $maxSoFar;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9501479455982448",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.870943882530202",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(maxSegmentValue([-1, 3, 2, -4]) === 5);\n    assert(maxSegmentValue([-2, -3, 4, -1, -2, 1, 5, -3]) === 7);\n    assert(maxSegmentValue([-1, -2, -3]) === -1);\n    assert(maxSegmentValue([10]) === 10);\n    assert(maxSegmentValue([1, -3]) === 1);\n    \n    \n}\n\n\nmain();\n?>",
    "entry_point": "maxSegmentValue",
    "signature": "function maxSegmentValue($values)",
    "docstring": {
      "en": "Calculates the maximum value of a segment from a given array of values.\nImagine a tailor has a ribbon with various segments, each having a different value, positive or negative.\nThe goal is to find the maximum total value that can be obtained by cutting a continuous segment of the ribbon.\nThis is akin to finding the most valuable portion of the ribbon to sell or use.\n\nInput:\nAn array $values of integers representing the value of each segment of the ribbon.\n\nOutput:\nReturns an integer representing the maximum value that can be obtained from any continuous segment of the ribbon.\n\nExample:\nFor a ribbon of length 4 with values [-1, 3, 2, -4], the function should return 5,\nas the segment [3, 2] gives the maximum value.",
      "sq": "Llogarit vlerën maksimale të një segmenti nga një varg i dhënë vlerash.\nImagjinoni një rrobaqepës që ka një shirit me segmente të ndryshme, secili me një vlerë të ndryshme, pozitive ose negative.\nQëllimi është të gjendet vlera totale maksimale që mund të merret duke prerë një segment të vazhdueshëm të shiritit.\nKjo është e ngjashme me gjetjen e pjesës më të vlefshme të shiritit për ta shitur ose përdorur.\n\nInput:\nNjë varg $values i numrave të plotë që përfaqësojnë vlerën e secilit segment të shiritit.\n\nOutput:\nKthen një numër të plotë që përfaqëson vlerën maksimale që mund të merret nga çdo segment i vazhdueshëm i shiritit.\n\nShembull:\nPër një shirit me gjatësi 4 me vlera [-1, 3, 2, -4], funksioni duhet të kthejë 5,\npasi segmenti [3, 2] jep vlerën maksimale.",
      "hy": "Հաշվում է տրված արժեքների զանգվածից հատվածի առավելագույն արժեքը:\nՊատկերացրեք, որ դերձակը ունի ժապավեն տարբեր հատվածներով, որոնցից յուրաքանչյուրը ունի տարբեր արժեք, դրական կամ բացասական:\nՆպատակն է գտնել առավելագույն ընդհանուր արժեքը, որը կարելի է ստանալ ժապավենի շարունակական հատվածը կտրելով:\nՍա նման է ժապավենի առավել արժեքավոր մասը վաճառելու կամ օգտագործելու համար գտնելուն:\n\nՄուտք:\nԱրժեքների ամբողջ թվերի զանգված, որը ներկայացնում է ժապավենի յուրաքանչյուր հատվածի արժեքը:\n\nԵլք:\nՎերադարձնում է ամբողջ թիվ, որը ներկայացնում է ժապավենի ցանկացած շարունակական հատվածից ստացված առավելագույն արժեքը:\n\nՕրինակ:\nԵթե ժապավենի երկարությունը 4 է և արժեքները [-1, 3, 2, -4] են, ֆունկցիան պետք է վերադարձնի 5,\nքանի որ հատվածը [3, 2] տալիս է առավելագույն արժեքը:",
      "bn": "একটি প্রদত্ত মানের অ্যারের একটি অংশের সর্বাধিক মান গণনা করে।\nধরা যাক একটি দর্জির কাছে একটি ফিতা আছে যার বিভিন্ন অংশ রয়েছে, প্রতিটি অংশের মান ভিন্ন, ইতিবাচক বা নেতিবাচক হতে পারে।\nলক্ষ্য হল ফিতার একটি ধারাবাহিক অংশ কেটে সর্বাধিক মোট মান খুঁজে বের করা।\nএটি ফিতার সবচেয়ে মূল্যবান অংশ বিক্রি বা ব্যবহারের জন্য খুঁজে বের করার মতো।\n\nইনপুট:\nএকটি পূর্ণসংখ্যার অ্যারে $values যা ফিতার প্রতিটি অংশের মান উপস্থাপন করে।\n\nআউটপুট:\nএকটি পূর্ণসংখ্যা প্রদান করে যা ফিতার যেকোনো ধারাবাহিক অংশ থেকে প্রাপ্ত সর্বাধিক মান উপস্থাপন করে।\n\nউদাহরণ:\nযদি ফিতার দৈর্ঘ্য 4 হয় এবং মান [-1, 3, 2, -4] হয়, তাহলে ফাংশনটি 5 প্রদান করা উচিত,\nকারণ অংশ [3, 2] সর্বাধিক মান প্রদান করে।",
      "bg": "Изчислява максималната стойност на сегмент от даден масив от стойности.\nПредставете си, че шивач има лента с различни сегменти, всеки от които има различна стойност, положителна или отрицателна.\nЦелта е да се намери максималната обща стойност, която може да се получи чрез изрязване на непрекъснат сегмент от лентата.\nТова е подобно на намирането на най-ценната част от лентата за продажба или употреба.\n\nВход:\nМасив $values от цели числа, представляващи стойността на всеки сегмент от лентата.\n\nИзход:\nВръща цяло число, представляващо максималната стойност, която може да се получи от който и да е непрекъснат сегмент от лентата.\n\nПример:\nЗа лента с дължина 4 със стойности [-1, 3, 2, -4], функцията трябва да върне 5,\nтъй като сегментът [3, 2] дава максималната стойност.",
      "zh": "计算给定数组中某个片段的最大值。\n想象一下，一个裁缝有一条带有不同片段的丝带，每个片段都有不同的值，可能是正数也可能是负数。\n目标是通过剪下一段连续的丝带来找到可以获得的最大总价值。\n这类似于寻找丝带中最有价值的部分进行出售或使用。\n\n输入：\n一个整数数组 $values，表示丝带每个片段的价值。\n\n输出：\n返回一个整数，表示从丝带的任何连续片段中可以获得的最大值。\n\n示例：\n对于长度为4的丝带，值为 [-1, 3, 2, -4]，函数应返回5，\n因为片段 [3, 2] 给出了最大值。",
      "fr": "Calcule la valeur maximale d'un segment à partir d'un tableau donné de valeurs.\nImaginez qu'un tailleur a un ruban avec divers segments, chacun ayant une valeur différente, positive ou négative.\nL'objectif est de trouver la valeur totale maximale qui peut être obtenue en coupant un segment continu du ruban.\nC'est comme trouver la portion la plus précieuse du ruban à vendre ou à utiliser.\n\nEntrée :\nUn tableau $values d'entiers représentant la valeur de chaque segment du ruban.\n\nSortie :\nRenvoie un entier représentant la valeur maximale qui peut être obtenue à partir de n'importe quel segment continu du ruban.\n\nExemple :\nPour un ruban de longueur 4 avec des valeurs [-1, 3, 2, -4], la fonction doit renvoyer 5,\ncar le segment [3, 2] donne la valeur maximale.",
      "de": "Berechnet den maximalen Wert eines Segments aus einem gegebenen Array von Werten.\nStellen Sie sich vor, ein Schneider hat ein Band mit verschiedenen Segmenten, von denen jedes einen anderen Wert hat, positiv oder negativ.\nDas Ziel ist es, den maximalen Gesamtwert zu finden, der durch Schneiden eines kontinuierlichen Segments des Bandes erzielt werden kann.\nDies ist vergleichbar mit dem Finden des wertvollsten Teils des Bandes zum Verkauf oder zur Nutzung.\n\nEingabe:\nEin Array $values von Ganzzahlen, das den Wert jedes Segments des Bandes darstellt.\n\nAusgabe:\nGibt eine Ganzzahl zurück, die den maximalen Wert darstellt, der aus einem beliebigen kontinuierlichen Segment des Bandes erzielt werden kann.\n\nBeispiel:\nFür ein Band der Länge 4 mit den Werten [-1, 3, 2, -4] sollte die Funktion 5 zurückgeben,\nda das Segment [3, 2] den maximalen Wert liefert.",
      "ha": "Yana ƙididdige matsakaicin ƙimar wani yanki daga wani jerin ƙimomi da aka bayar.\nKa yi tunanin wani ɗinki yana da zare mai yanki daban-daban, kowanne yana da ƙima daban-daban, mai kyau ko mara kyau.\nManufar ita ce samun jimillar ƙima mafi girma da za a iya samu ta hanyar yanke wani yanki mai ci gaba na zaren.\nWannan yana kama da neman mafi daraja na zaren don sayarwa ko amfani.\n\nShigar:\nWani jerin $values na lambobi masu nuna ƙimar kowane yanki na zaren.\n\nFita:\nYana dawo da lamba mai nuna matsakaicin ƙima da za a iya samu daga kowane yanki mai ci gaba na zaren.\n\nMisali:\nDon zaren da tsawonsa ya kai 4 tare da ƙimomi [-1, 3, 2, -4], aikin ya kamata ya dawo da 5,\ndomin yankin [3, 2] yana bayar da matsakaicin ƙima.",
      "hi": "दिए गए मानों की एक सरणी से एक खंड का अधिकतम मान गणना करता है।\nकल्पना करें कि एक दर्जी के पास विभिन्न खंडों के साथ एक रिबन है, जिनमें से प्रत्येक का एक अलग मूल्य है, सकारात्मक या नकारात्मक।\nउद्देश्य यह है कि रिबन के एक निरंतर खंड को काटकर अधिकतम कुल मूल्य प्राप्त किया जा सके।\nयह रिबन के सबसे मूल्यवान हिस्से को बेचने या उपयोग करने के समान है।\n\nInput:\nएक array $values जिसमें रिबन के प्रत्येक खंड का मूल्य दर्शाने वाले पूर्णांक होते हैं।\n\nOutput:\nएक पूर्णांक लौटाता है जो रिबन के किसी भी निरंतर खंड से प्राप्त किया जा सकने वाला अधिकतम मूल्य दर्शाता है।\n\nExample:\nलंबाई 4 के रिबन के लिए जिसमें मान [-1, 3, 2, -4] हैं, फ़ंक्शन को 5 लौटाना चाहिए,\nक्योंकि खंड [3, 2] अधिकतम मूल्य देता है।",
      "hu": "Kiszámítja egy adott értéktömb szegmensének maximális értékét. \nKépzeljük el, hogy egy szabónak van egy szalagja különböző szegmensekkel, amelyek mindegyikének más-más értéke van, lehet pozitív vagy negatív. \nA cél az, hogy megtaláljuk azt a maximális összértéket, amelyet a szalag egy folytonos szegmensének elvágásával kaphatunk meg. \nEz hasonló ahhoz, hogy megtaláljuk a szalag legértékesebb részét, amelyet eladhatunk vagy felhasználhatunk.\n\nBemenet:\nEgy $values tömb egész számokkal, amely a szalag minden szegmensének értékét képviseli.\n\nKimenet:\nEgy egész számot ad vissza, amely a szalag bármely folytonos szegmenséből nyerhető maximális értéket képviseli.\n\nPélda:\nEgy 4 hosszúságú szalag esetén, amelynek értékei [-1, 3, 2, -4], a függvénynek 5-öt kell visszaadnia, \nmivel a [3, 2] szegmens adja a maximális értéket."
    },
    "docstring_bertscore": {
      "sq": "0.9854256944219462",
      "hy": "0.9836739730915994",
      "bn": "0.9855917494204913",
      "bg": "0.981017887636401",
      "zh": "0.964536134509269",
      "fr": "0.9939807049331187",
      "de": "0.9877155054545163",
      "ha": "0.9409040849256431",
      "hi": "0.981331723638436",
      "hu": "0.9637435992889398"
    }
  },
  {
    "task_id": "PHP/17",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines the position of a new student in a choir formation.\n * The choir is arranged with the shortest members on the sides and the tallest in the center.\n * The new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\n * If the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n *\n * Input:\n * - $newStudentHeight (int): The height of the new student.\n * - $heights (array): An array of integers representing the heights of the current choir members from left to right.\n * - $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n *\n * Output:\n * - Returns an integer representing the position (1-indexed) where the new student will stand.\n *\n * Examples:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "sq": "<?php\n\n/**\n * Përcakton pozicionin e një studenti të ri në një formacion kori.\n * Kori është i rregulluar me anëtarët më të shkurtër në anët dhe më të gjatët në qendër.\n * Studenti i ri mund të qëndrojë në anën e majtë ose të djathtë, ose, nëse është më i gjati, në të djathtë të studentit aktual më të gjatë.\n * Nëse studenti i ri nuk është më i gjati, pozicioni i tij bazohet në preferencën e mësuesit: ana e majtë ose e djathtë.\n *\n * Hyrja:\n * - $newStudentHeight (int): Lartësia e studentit të ri.\n * - $heights (array): Një varg i numrave të plotë që përfaqësojnë lartësitë e anëtarëve aktualë të korit nga e majta në të djathtë.\n * - $teacherPreference (int): Preferenca e mësuesit për pozicionin e studentit të ri (1 për majtas, 2 për djathtas).\n *\n * Dalja:\n * - Kthen një numër të plotë që përfaqëson pozicionin (i indeksuar me 1) ku studenti i ri do të qëndrojë.\n *\n * Shembuj:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) duhet të kthejë 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) duhet të kthejë 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "hy": "<?php\n\n/**\n * Սահմանում է նոր ուսանողի դիրքը երգչախմբի կազմում:\n * Երգչախումբը դասավորված է այնպես, որ ամենակարճ անդամները լինեն կողմերում, իսկ ամենաբարձրերը՝ կենտրոնում:\n * Նոր ուսանողը կարող է կանգնել ձախ կամ աջ կողմում, կամ, եթե նա ամենաբարձրն է, ամենաբարձր ուսանողի աջ կողմում:\n * Եթե նոր ուսանողը ամենաբարձրը չէ, նրա դիրքը որոշվում է ուսուցչի նախընտրությամբ՝ ձախ կամ աջ կողմում:\n *\n * Մուտք:\n * - $newStudentHeight (int): Նոր ուսանողի բարձրությունը:\n * - $heights (array): Թվերի զանգված, որը ներկայացնում է երգչախմբի ներկա անդամների բարձրությունները ձախից աջ:\n * - $teacherPreference (int): Ուսուցչի նախընտրությունը նոր ուսանողի դիրքի համար (1՝ ձախ, 2՝ աջ):\n *\n * Ելք:\n * - Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է դիրքը (1-ից սկսած), որտեղ նոր ուսանողը կկանգնի:\n *\n * Օրինակներ:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) պետք է վերադարձնի 8:\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) պետք է վերադարձնի 3:\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "bn": "<?php\n\n/**\n * একটি নতুন ছাত্রের গায়কদলের বিন্যাসে অবস্থান নির্ধারণ করে।\n * গায়কদলটি এমনভাবে সাজানো হয় যে সবচেয়ে ছোট সদস্যরা পাশে এবং সবচেয়ে লম্বা সদস্যরা কেন্দ্রে থাকে।\n * নতুন ছাত্রটি বাম বা ডান পাশে দাঁড়াতে পারে, অথবা যদি সে সবচেয়ে লম্বা হয়, তবে বর্তমান সবচেয়ে লম্বা ছাত্রের ডান পাশে দাঁড়াতে পারে।\n * যদি নতুন ছাত্রটি সবচেয়ে লম্বা না হয়, তবে তার অবস্থান শিক্ষকের পছন্দের উপর নির্ভর করে: বাম বা ডান পাশে।\n *\n * ইনপুট:\n * - $newStudentHeight (int): নতুন ছাত্রের উচ্চতা।\n * - $heights (array): বাম থেকে ডান পর্যন্ত বর্তমান গায়কদল সদস্যদের উচ্চতা প্রতিনিধিত্বকারী পূর্ণসংখ্যার একটি অ্যারে।\n * - $teacherPreference (int): নতুন ছাত্রের অবস্থানের জন্য শিক্ষকের পছন্দ (বামের জন্য 1, ডানের জন্য 2)।\n *\n * আউটপুট:\n * - একটি পূর্ণসংখ্যা ফেরত দেয় যা নতুন ছাত্রটি যেখানে দাঁড়াবে সেই অবস্থান (1-সূচক) প্রতিনিধিত্ব করে।\n *\n * উদাহরণ:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 ফেরত দেবে।\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 ফেরত দেবে।\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "bg": "<?php\n\n/**\n * Определя позицията на нов ученик в хорова формация.\n * Хорът е подреден с най-ниските членове отстрани и най-високите в центъра.\n * Новият ученик може да застане от лявата или дясната страна, или, ако е най-високият, вдясно от настоящия най-висок ученик.\n * Ако новият ученик не е най-високият, неговата позиция се определя според предпочитанията на учителя: лява или дясна страна.\n *\n * Вход:\n * - $newStudentHeight (int): Височината на новия ученик.\n * - $heights (array): Масив от цели числа, представляващи височините на настоящите членове на хора отляво надясно.\n * - $teacherPreference (int): Предпочитанието на учителя за позицията на новия ученик (1 за ляво, 2 за дясно).\n *\n * Изход:\n * - Връща цяло число, представляващо позицията (индексирана от 1), където новият ученик ще застане.\n *\n * Примери:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) трябва да върне 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) трябва да върне 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "zh": "<?php\n\n/**\n * 确定新学生在合唱队形中的位置。\n * 合唱队的排列方式是两侧是最矮的成员，中间是最高的。\n * 新学生可以站在左侧或右侧，或者如果他们是最高的，可以站在当前最高学生的右侧。\n * 如果新学生不是最高的，他们的位置取决于老师的偏好：左侧或右侧。\n *\n * 输入:\n * - $newStudentHeight (int): 新学生的身高。\n * - $heights (array): 一个整数数组，表示当前合唱队成员从左到右的身高。\n * - $teacherPreference (int): 老师对新学生位置的偏好（1表示左侧，2表示右侧）。\n *\n * 输出:\n * - 返回一个整数，表示新学生将站立的位置（从1开始计数）。\n *\n * 示例:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 应返回 8。\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 应返回 3。\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "fr": "<?php\n\n/**\n * Détermine la position d'un nouvel élève dans une formation de chorale.\n * La chorale est disposée avec les membres les plus petits sur les côtés et les plus grands au centre.\n * Le nouvel élève peut se tenir sur le côté gauche ou droit, ou, s'il est le plus grand, à droite de l'élève actuellement le plus grand.\n * Si le nouvel élève n'est pas le plus grand, sa position est basée sur la préférence de l'enseignant : côté gauche ou droit.\n *\n * Entrée :\n * - $newStudentHeight (int) : La taille du nouvel élève.\n * - $heights (array) : Un tableau d'entiers représentant les tailles des membres actuels de la chorale de gauche à droite.\n * - $teacherPreference (int) : La préférence de l'enseignant pour la position du nouvel élève (1 pour gauche, 2 pour droite).\n *\n * Sortie :\n * - Retourne un entier représentant la position (indexée à partir de 1) où le nouvel élève se tiendra.\n *\n * Exemples :\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) devrait retourner 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) devrait retourner 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "de": "<?php\n\n/**\n * Bestimmt die Position eines neuen Schülers in einer Choraufstellung.\n * Der Chor ist so angeordnet, dass die kleinsten Mitglieder an den Seiten und die größten in der Mitte stehen.\n * Der neue Schüler kann auf der linken oder rechten Seite stehen oder, wenn er der größte ist, rechts vom derzeit größten Schüler.\n * Wenn der neue Schüler nicht der größte ist, basiert seine Position auf der Präferenz des Lehrers: linke oder rechte Seite.\n *\n * Eingabe:\n * - $newStudentHeight (int): Die Größe des neuen Schülers.\n * - $heights (array): Ein Array von ganzen Zahlen, das die Größen der aktuellen Chormitglieder von links nach rechts darstellt.\n * - $teacherPreference (int): Die Präferenz des Lehrers für die Position des neuen Schülers (1 für links, 2 für rechts).\n *\n * Ausgabe:\n * - Gibt eine ganze Zahl zurück, die die Position (1-indexiert) darstellt, an der der neue Schüler stehen wird.\n *\n * Beispiele:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) sollte 8 zurückgeben.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) sollte 3 zurückgeben.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "ha": "<?php\n\n/**\n * Yana tantance matsayi na sabon ɗalibi a cikin tsarin ƙungiyar raira waƙa.\n * An shirya ƙungiyar raira waƙa tare da mafi guntu a gefuna kuma mafi tsawo a tsakiya.\n * Sabon ɗalibi na iya tsayawa a gefen hagu ko dama, ko kuma, idan sun fi kowa tsawo, a dama na ɗalibin da ya fi tsawo a yanzu.\n * Idan sabon ɗalibi ba su fi kowa tsawo ba, matsayinsu yana dogara ne akan zaɓin malamin: gefen hagu ko dama.\n *\n * Shigarwa:\n * - $newStudentHeight (int): Tsawon sabon ɗalibi.\n * - $heights (array): Jeri na lambobi masu nuna tsayin mambobin ƙungiyar raira waƙa na yanzu daga hagu zuwa dama.\n * - $teacherPreference (int): Zaɓin malamin don matsayi na sabon ɗalibi (1 don hagu, 2 don dama).\n *\n * Fitarwa:\n * - Yana dawo da lamba mai nuna matsayi (1-indexed) inda sabon ɗalibi zai tsaya.\n *\n * Misalai:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) ya kamata ya dawo da 8.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) ya kamata ya dawo da 3.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "hi": "<?php\n\n/**\n * एक नए छात्र की गायक मंडली में स्थिति निर्धारित करता है।\n * गायक मंडली को इस प्रकार व्यवस्थित किया जाता है कि सबसे छोटे सदस्य किनारों पर होते हैं और सबसे लंबे सदस्य बीच में होते हैं।\n * नया छात्र बाएँ या दाएँ किनारे पर खड़ा हो सकता है, या यदि वह सबसे लंबा है, तो वर्तमान सबसे लंबे छात्र के दाएँ खड़ा हो सकता है।\n * यदि नया छात्र सबसे लंबा नहीं है, तो उसकी स्थिति शिक्षक की पसंद पर आधारित होती है: बाएँ या दाएँ किनारे पर।\n *\n * इनपुट:\n * - $newStudentHeight (int): नए छात्र की ऊँचाई।\n * - $heights (array): बाएँ से दाएँ तक वर्तमान गायक मंडली के सदस्यों की ऊँचाइयों का एक सरणी।\n * - $teacherPreference (int): नए छात्र की स्थिति के लिए शिक्षक की पसंद (1 बाएँ के लिए, 2 दाएँ के लिए)।\n *\n * आउटपुट:\n * - एक पूर्णांक लौटाता है जो उस स्थिति का प्रतिनिधित्व करता है (1-सूचीबद्ध) जहाँ नया छात्र खड़ा होगा।\n *\n * उदाहरण:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 लौटाना चाहिए।\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 लौटाना चाहिए।\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int ",
      "hu": "<?php\n\n/**\n * Meghatározza egy új diák helyzetét egy kórusformációban.\n * A kórus úgy van elrendezve, hogy a legalacsonyabb tagok a széleken, a legmagasabbak pedig középen állnak.\n * Az új diák állhat a bal vagy a jobb oldalon, vagy ha ő a legmagasabb, akkor a jelenlegi legmagasabb diák jobb oldalán.\n * Ha az új diák nem a legmagasabb, akkor a helyzetét a tanár preferenciája határozza meg: bal vagy jobb oldal.\n *\n * Bemenet:\n * - $newStudentHeight (int): Az új diák magassága.\n * - $heights (array): Egész számokat tartalmazó tömb, amely a jelenlegi kórustagok magasságát jelképezi balról jobbra.\n * - $teacherPreference (int): A tanár preferenciája az új diák helyzetére (1 a bal oldalra, 2 a jobb oldalra).\n *\n * Kimenet:\n * - Visszaad egy egész számot, amely azt a pozíciót jelképezi (1-indexelt), ahol az új diák állni fog.\n *\n * Példák:\n * - determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) vissza kell adnia 8-at.\n * - determineChoirPosition(15, [5, 10, 20, 10, 5], 3) vissza kell adnia 3-at.\n */\n\nfunction determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int "
    },
    "prompt_bertscore": {
      "sq": "0.9897304120397342",
      "hy": "0.9726515759872114",
      "bn": "0.9772737049538933",
      "bg": "0.9916910925309296",
      "zh": "0.9713755744194433",
      "fr": "0.9988302656860856",
      "de": "0.9865984081915761",
      "ha": "0.9612776031083916",
      "hi": "0.970992217784046",
      "hu": "0.973765097903293"
    },
    "canonical_solution": "{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}",
    "instruction": {
      "en": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nPHP կոդի համար տրամադրեք կարճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int\n{\n    // Check if the new student is the tallest\n    if ($newStudentHeight > max($heights)) {\n        return count($heights) + 1; // Tallest student goes to the right of the current tallest\n    }\n\n    // If the new student is not the tallest, find their position based on teacher's preference\n    if ($teacherPreference == 1) { // Teacher prefers left side\n        for ($i = 0; $i < count($heights); $i++) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 1; // 1-indexed position\n            }\n        }\n    } else { // Teacher prefers right side\n        for ($i = count($heights) - 1; $i >= 0; $i--) {\n            if ($newStudentHeight < $heights[$i]) {\n                return $i + 2; // 1-indexed position\n            }\n        }\n    }\n    // If the new student is the shortest, they go to the left or right side based on teacher's preference\n    return $teacherPreference == 1 ? 1 : count($heights) + 1;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9209377590240162",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    \n    assert(determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) === 8);\n    assert(determineChoirPosition(15, [5, 10, 20, 10, 5], 1) === 3);\n    assert(determineChoirPosition(12, [10, 15, 20, 15], 2) === 5);\n    assert(determineChoirPosition(18, [6, 9, 12, 15, 17, 21], 1) === 6);\n    assert(determineChoirPosition(18, [6, 9, 12, 15], 1) === 5);\n    assert(determineChoirPosition(10, [5, 8, 12], 2) === 4);   \n}\n\n\nmain();\n?>",
    "entry_point": "determineChoirPosition",
    "signature": "function determineChoirPosition(int $newStudentHeight, array $heights, int $teacherPreference): int",
    "docstring": {
      "en": "Determines the position of a new student in a choir formation.\nThe choir is arranged with the shortest members on the sides and the tallest in the center.\nThe new student may stand on the left or right side, or, if they are the tallest, to the right of the current tallest student.\nIf the new student is not the tallest, their position is based on the teacher's preference: left or right side.\n\nInput:\n- $newStudentHeight (int): The height of the new student.\n- $heights (array): An array of integers representing the heights of the current choir members from left to right.\n- $teacherPreference (int): The teacher's preference for the new student's position (1 for left, 2 for right).\n\nOutput:\n- Returns an integer representing the position (1-indexed) where the new student will stand.\n\nExamples:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) should return 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) should return 3.",
      "sq": "Përcakton pozicionin e një studenti të ri në një formacion kori.  \nKori është i rregulluar me anëtarët më të shkurtër në anët dhe më të gjatët në qendër.  \nStudenti i ri mund të qëndrojë në anën e majtë ose të djathtë, ose, nëse është më i gjati, në të djathtë të studentit aktual më të gjatë.  \nNëse studenti i ri nuk është më i gjati, pozicioni i tij bazohet në preferencën e mësuesit: anën e majtë ose të djathtë.\n\nHyrja:\n- $newStudentHeight (int): Gjatësia e studentit të ri.\n- $heights (array): Një varg me numra të plotë që përfaqëson gjatësitë e anëtarëve aktualë të korit nga e majta në të djathtë.\n- $teacherPreference (int): Preferenca e mësuesit për pozicionin e studentit të ri (1 për majtas, 2 për djathtas).\n\nDalja:\n- Kthen një numër të plotë që përfaqëson pozicionin (i indeksuar me 1) ku studenti i ri do të qëndrojë.\n\nShembuj:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) duhet të kthejë 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) duhet të kthejë 3.",
      "hy": "Սահմանում է նոր ուսանողի դիրքը երգչախմբի կազմավորման մեջ։  \nԵրգչախումբը դասավորված է այնպես, որ ամենակարճ անդամները լինեն կողմերում, իսկ ամենաբարձրերը՝ կենտրոնում։  \nՆոր ուսանողը կարող է կանգնել ձախ կամ աջ կողմում, կամ, եթե նրանք ամենաբարձրն են, ամենաբարձր ուսանողի աջ կողմում։  \nԵթե նոր ուսանողը ամենաբարձրը չէ, նրանց դիրքը հիմնված է ուսուցչի նախընտրության վրա՝ ձախ կամ աջ կողմում։\n\nՄուտք․  \n- $newStudentHeight (int): Նոր ուսանողի բարձրությունը։  \n- $heights (array): Թվերի զանգված, որը ներկայացնում է ընթացիկ երգչախմբի անդամների բարձրությունները ձախից աջ։  \n- $teacherPreference (int): Ուսուցչի նախընտրությունը նոր ուսանողի դիրքի համար (1՝ ձախ, 2՝ աջ)։  \n\nԵլք․  \n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է դիրքը (1-ինդեքսավորված), որտեղ նոր ուսանողը կկանգնի։\n\nՕրինակներ․  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) պետք է վերադարձնի 8։  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) պետք է վերադարձնի 3։",
      "bn": "নতুন ছাত্রের গায়কদলের বিন্যাসে অবস্থান নির্ধারণ করে।  \nগায়কদলটি এমনভাবে সাজানো হয় যাতে সবচেয়ে ছোট সদস্যরা পাশে থাকে এবং সবচেয়ে লম্বা সদস্যরা কেন্দ্রে থাকে।  \nনতুন ছাত্র বাম বা ডান পাশে দাঁড়াতে পারে, অথবা যদি সে সবচেয়ে লম্বা হয়, তাহলে বর্তমান সবচেয়ে লম্বা ছাত্রের ডান পাশে দাঁড়াতে পারে।  \nযদি নতুন ছাত্র সবচেয়ে লম্বা না হয়, তাহলে তার অবস্থান শিক্ষকের পছন্দের উপর ভিত্তি করে নির্ধারিত হয়: বাম বা ডান পাশে।\n\nইনপুট:  \n- $newStudentHeight (int): নতুন ছাত্রের উচ্চতা।  \n- $heights (array): একটি পূর্ণসংখ্যার অ্যারে যা বাম থেকে ডানে বর্তমান গায়কদলের সদস্যদের উচ্চতা উপস্থাপন করে।  \n- $teacherPreference (int): নতুন ছাত্রের অবস্থানের জন্য শিক্ষকের পছন্দ (বামের জন্য 1, ডানের জন্য 2)।\n\nআউটপুট:  \n- একটি পূর্ণসংখ্যা প্রদান করে যা 1-সূচককৃত অবস্থানকে উপস্থাপন করে যেখানে নতুন ছাত্র দাঁড়াবে।\n\nউদাহরণ:  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 8 প্রদান করা উচিত।  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 3 প্রদান করা উচিত।",
      "bg": "Определя позицията на нов ученик в хорова формация.\nХорът е подреден с най-ниските членове отстрани и най-високите в центъра.\nНовият ученик може да застане от лявата или дясната страна, или, ако е най-високият, вдясно от настоящия най-висок ученик.\nАко новият ученик не е най-високият, неговата позиция се основава на предпочитанието на учителя: лява или дясна страна.\n\nВход:\n- $newStudentHeight (int): Височината на новия ученик.\n- $heights (array): Масив от цели числа, представляващи височините на настоящите членове на хора отляво надясно.\n- $teacherPreference (int): Предпочитанието на учителя за позицията на новия ученик (1 за ляво, 2 за дясно).\n\nИзход:\n- Връща цяло число, представляващо позицията (индексирана от 1), където новият ученик ще застане.\n\nПримери:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) трябва да върне 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) трябва да върне 3.",
      "zh": "确定新学生在合唱队形中的位置。  \n合唱队的排列方式是两侧是最矮的成员，中间是最高的成员。  \n新学生可以站在左侧或右侧，或者如果他们是最高的，则站在当前最高学生的右侧。  \n如果新学生不是最高的，他们的位置取决于老师的偏好：左侧或右侧。  \n\n输入：  \n- $newStudentHeight (int): 新学生的身高。  \n- $heights (array): 一个整数数组，表示当前合唱团成员从左到右的身高。  \n- $teacherPreference (int): 老师对新学生位置的偏好（1表示左侧，2表示右侧）。  \n\n输出：  \n- 返回一个整数，表示新学生将站立的位置（从1开始计数）。  \n\n示例：  \n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) 应返回 8。  \n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) 应返回 3。",
      "fr": "Détermine la position d'un nouvel élève dans une formation de chorale.\nLa chorale est arrangée avec les membres les plus petits sur les côtés et les plus grands au centre.\nLe nouvel élève peut se tenir sur le côté gauche ou droit, ou, s'il est le plus grand, à droite de l'élève le plus grand actuel.\nSi le nouvel élève n'est pas le plus grand, sa position est basée sur la préférence de l'enseignant : côté gauche ou droit.\n\nEntrée :\n- $newStudentHeight (int) : La taille du nouvel élève.\n- $heights (array) : Un tableau d'entiers représentant les tailles des membres actuels de la chorale de gauche à droite.\n- $teacherPreference (int) : La préférence de l'enseignant pour la position du nouvel élève (1 pour gauche, 2 pour droite).\n\nSortie :\n- Retourne un entier représentant la position (indexée à partir de 1) où le nouvel élève se tiendra.\n\nExemples :\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) devrait retourner 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) devrait retourner 3.",
      "de": "Bestimmt die Position eines neuen Schülers in einer Choraufstellung.\nDer Chor ist so angeordnet, dass die kleinsten Mitglieder an den Seiten und die größten in der Mitte stehen.\nDer neue Schüler kann auf der linken oder rechten Seite stehen oder, wenn er der größte ist, rechts vom derzeit größten Schüler.\nWenn der neue Schüler nicht der größte ist, basiert seine Position auf der Präferenz des Lehrers: linke oder rechte Seite.\n\nEingabe:\n- $newStudentHeight (int): Die Größe des neuen Schülers.\n- $heights (array): Ein Array von ganzen Zahlen, das die Größen der aktuellen Chormitglieder von links nach rechts darstellt.\n- $teacherPreference (int): Die Präferenz des Lehrers für die Position des neuen Schülers (1 für links, 2 für rechts).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die Position (1-basiert) angibt, an der der neue Schüler stehen wird.\n\nBeispiele:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) sollte 8 zurückgeben.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) sollte 3 zurückgeben.",
      "ha": "Yana tantance matsayin sabon ɗalibi a cikin tsarin ƙungiyar rera waka. \nAna shirya ƙungiyar rera waka tare da mambobi mafi guntu a gefuna da mafi tsawo a tsakiya. \nSabon ɗalibi na iya tsayawa a gefen hagu ko dama, ko kuma, idan sun fi tsawo, zuwa dama na ɗalibin da ya fi tsawo a yanzu. \nIdan sabon ɗalibi ba shi ne mafi tsawo ba, matsayin su yana dogara ne akan zaɓin malamin: gefen hagu ko dama.\n\nShigarwa:\n- $newStudentHeight (int): Tsawon sabon ɗalibi.\n- $heights (array): Jeri na lambobi masu wakiltar tsayin mambobin ƙungiyar rera waka na yanzu daga hagu zuwa dama.\n- $teacherPreference (int): Zaɓin malamin don matsayin sabon ɗalibi (1 don hagu, 2 don dama).\n\nFitarwa:\n- Yana mayar da lamba mai nuna matsayin (1-indexed) inda sabon ɗalibi zai tsaya.\n\nMisalai:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) ya kamata ya mayar da 8.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) ya kamata ya mayar da 3.",
      "hi": "नए छात्र की एक गायक मंडली में स्थिति निर्धारित करता है।\nगायक मंडली को सबसे छोटे सदस्यों को किनारों पर और सबसे लंबे को केंद्र में रखा जाता है।\nनया छात्र बाईं या दाईं ओर खड़ा हो सकता है, या, यदि वे सबसे लंबे हैं, तो वर्तमान सबसे लंबे छात्र के दाईं ओर।\nयदि नया छात्र सबसे लंबा नहीं है, तो उनकी स्थिति शिक्षक की पसंद पर आधारित होती है: बाईं या दाईं ओर।\n\nइनपुट:\n- $newStudentHeight (int): नए छात्र की ऊँचाई।\n- $heights (array): एक पूर्णांकों की array जो बाएँ से दाएँ तक वर्तमान गायक मंडली के सदस्यों की ऊँचाई का प्रतिनिधित्व करती है।\n- $teacherPreference (int): नए छात्र की स्थिति के लिए शिक्षक की पसंद (1 बाएँ के लिए, 2 दाएँ के लिए)।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है जो उस स्थिति का प्रतिनिधित्व करता है (1-इंडेक्स्ड) जहाँ नया छात्र खड़ा होगा।\n\nउदाहरण:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) को 8 लौटाना चाहिए।\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) को 3 लौटाना चाहिए।",
      "hu": "Meghatározza egy új diák helyét egy kórus formációban.\nA kórus úgy van elrendezve, hogy a legalacsonyabb tagok a széleken, a legmagasabbak pedig középen állnak.\nAz új diák állhat a bal vagy jobb oldalon, vagy ha ő a legmagasabb, akkor a jelenlegi legmagasabb diák jobb oldalán.\nHa az új diák nem a legmagasabb, akkor a helyét a tanár preferenciája alapján határozzák meg: bal vagy jobb oldal.\n\nBemenet:\n- $newStudentHeight (int): Az új diák magassága.\n- $heights (array): Egész számokat tartalmazó tömb, amely a jelenlegi kórustagok magasságát jelöli balról jobbra.\n- $teacherPreference (int): A tanár preferenciája az új diák helyére (1 a bal oldalra, 2 a jobb oldalra).\n\nKimenet:\n- Egy egész számot ad vissza, amely azt a pozíciót jelöli (1-indexelt), ahol az új diák állni fog.\n\nPéldák:\n- determineChoirPosition(20, [1, 3, 8, 10, 14, 40, 22, 16, 8], 2) vissza kell adja a 8-at.\n- determineChoirPosition(15, [5, 10, 20, 10, 5], 3) vissza kell adja a 3-at."
    },
    "docstring_bertscore": {
      "sq": "0.9892310552618125",
      "hy": "0.9676011999190184",
      "bn": "0.9587959151277418",
      "bg": "0.9954805629403132",
      "zh": "0.959930293233832",
      "fr": "0.9879888208588203",
      "de": "0.975974265001163",
      "ha": "0.9609270204858651",
      "hi": "0.9801367632661302",
      "hu": "0.9735464058537736"
    }
  },
  {
    "task_id": "PHP/18",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines the exact price of an item within a specified range based on a series of hints.\n * The item's price is within the range [1, maxPrice].\n * Hints are given in a string where:\n * - 'u' indicates the actual price is higher than the current guess.\n * - 'd' indicates the actual price is lower than the current guess.\n * - 'y' indicates the current guess is correct.\n * The function uses a binary search approach to narrow down the possible price.\n * Input: The maximum price (maxPrice) and a string of hints.\n * Output: Returns the exact price of the item.\n * Example: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "sq": "<?php\n\n/**\n * Përcakton çmimin e saktë të një artikulli brenda një diapazoni të specifikuar bazuar në një seri udhëzimesh.\n * Çmimi i artikullit është brenda diapazonit [1, maxPrice].\n * Udhëzimet jepen në një varg ku:\n * - 'u' tregon se çmimi aktual është më i lartë se supozimi aktual.\n * - 'd' tregon se çmimi aktual është më i ulët se supozimi aktual.\n * - 'y' tregon se supozimi aktual është i saktë.\n * Funksioni përdor një qasje kërkimi binar për të ngushtuar çmimin e mundshëm.\n * Hyrja: Çmimi maksimal (maxPrice) dhe një varg udhëzimesh.\n * Dalja: Kthen çmimin e saktë të artikullit.\n * Shembull: Për maxPrice = 1000000 dhe udhëzime = \"uddy\", funksioni kthen 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hy": "<?php\n\n/**\n * Սահմանում է ապրանքի ճշգրիտ գինը որոշված միջակայքում հիմնված հուշումների շարքի վրա:\n * Ապրանքի գինը գտնվում է [1, maxPrice] միջակայքում:\n * Հուշումները տրվում են տողի տեսքով, որտեղ՝\n * - 'u' նշանակում է, որ իրական գինը ավելի բարձր է, քան ընթացիկ գուշակությունը:\n * - 'd' նշանակում է, որ իրական գինը ավելի ցածր է, քան ընթացիկ գուշակությունը:\n * - 'y' նշանակում է, որ ընթացիկ գուշակությունը ճիշտ է:\n * Ֆունկցիան օգտագործում է երկակի որոնման մոտեցում՝ հնարավոր գինը նեղացնելու համար:\n * Մուտք: Առավելագույն գինը (maxPrice) և հուշումների տող:\n * Ելք: Վերադարձնում է ապրանքի ճշգրիտ գինը:\n * Օրինակ: maxPrice = 1000000 և hints = \"uddy\" դեպքում, ֆունկցիան վերադարձնում է 562500:\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "bn": "<?php\n\n/**\n * একটি নির্দিষ্ট সীমার মধ্যে একটি আইটেমের সঠিক মূল্য নির্ধারণ করে বিভিন্ন সংকেতের ভিত্তিতে।\n * আইটেমের মূল্য সীমার মধ্যে [1, maxPrice]।\n * সংকেতগুলি একটি স্ট্রিংয়ে দেওয়া হয় যেখানে:\n * - 'u' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে বেশি।\n * - 'd' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে কম।\n * - 'y' নির্দেশ করে যে বর্তমান অনুমান সঠিক।\n * ফাংশনটি একটি বাইনারি সার্চ পদ্ধতি ব্যবহার করে সম্ভাব্য মূল্য সংকুচিত করে।\n * ইনপুট: সর্বাধিক মূল্য (maxPrice) এবং সংকেতের একটি স্ট্রিং।\n * আউটপুট: আইটেমের সঠিক মূল্য প্রদান করে।\n * উদাহরণ: maxPrice = 1000000 এবং hints = \"uddy\" এর জন্য, ফাংশনটি 562500 প্রদান করে।\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "bg": "<?php\n\n/**\n * Определя точната цена на артикул в рамките на определен диапазон въз основа на серия от подсказки.\n * Цената на артикула е в диапазона [1, maxPrice].\n * Подсказките са дадени в низ, където:\n * - 'u' означава, че действителната цена е по-висока от текущото предположение.\n * - 'd' означава, че действителната цена е по-ниска от текущото предположение.\n * - 'y' означава, че текущото предположение е правилно.\n * Функцията използва подход на двоично търсене, за да стесни възможната цена.\n * Вход: Максималната цена (maxPrice) и низ от подсказки.\n * Изход: Връща точната цена на артикула.\n * Пример: За maxPrice = 1000000 и hints = \"uddy\", функцията връща 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "zh": "<?php\n\n/**\n * 根据一系列提示确定指定范围内物品的确切价格。\n * 物品的价格在范围 [1, maxPrice] 内。\n * 提示以字符串形式给出，其中：\n * - 'u' 表示实际价格高于当前猜测。\n * - 'd' 表示实际价格低于当前猜测。\n * - 'y' 表示当前猜测正确。\n * 该函数使用二分查找方法来缩小可能的价格范围。\n * 输入：最大价格 (maxPrice) 和提示字符串。\n * 输出：返回物品的确切价格。\n * 示例：对于 maxPrice = 1000000 和 hints = \"uddy\"，函数返回 562500。\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "fr": "<?php\n\n/**\n * Détermine le prix exact d'un article dans une plage spécifiée basée sur une série d'indices.\n * Le prix de l'article est dans la plage [1, maxPrice].\n * Les indices sont donnés dans une chaîne où :\n * - 'u' indique que le prix réel est supérieur à la supposition actuelle.\n * - 'd' indique que le prix réel est inférieur à la supposition actuelle.\n * - 'y' indique que la supposition actuelle est correcte.\n * La fonction utilise une approche de recherche binaire pour réduire les possibilités de prix.\n * Entrée : Le prix maximum (maxPrice) et une chaîne d'indices.\n * Sortie : Retourne le prix exact de l'article.\n * Exemple : Pour maxPrice = 1000000 et hints = \"uddy\", la fonction retourne 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "de": "<?php\n\n/**\n * Bestimmt den genauen Preis eines Artikels innerhalb eines angegebenen Bereichs basierend auf einer Reihe von Hinweisen.\n * Der Preis des Artikels liegt im Bereich [1, maxPrice].\n * Hinweise werden in einem String gegeben, wobei:\n * - 'u' anzeigt, dass der tatsächliche Preis höher ist als der aktuelle Schätzwert.\n * - 'd' anzeigt, dass der tatsächliche Preis niedriger ist als der aktuelle Schätzwert.\n * - 'y' anzeigt, dass der aktuelle Schätzwert korrekt ist.\n * Die Funktion verwendet einen binären Suchansatz, um den möglichen Preis einzugrenzen.\n * Eingabe: Der maximale Preis (maxPrice) und ein String von Hinweisen.\n * Ausgabe: Gibt den genauen Preis des Artikels zurück.\n * Beispiel: Für maxPrice = 1000000 und hints = \"uddy\" gibt die Funktion 562500 zurück.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "ha": "<?php\n\n/**\n * Yana tantance ainihin farashin wani abu a cikin kewayon da aka fayyace bisa jerin shawarwari.\n * Farashin abu yana cikin kewayon [1, maxPrice].\n * Ana bayar da shawarwari a cikin wani igiya inda:\n * - 'u' yana nuna cewa ainihin farashin ya fi na yanzu girma.\n * - 'd' yana nuna cewa ainihin farashin ya fi na yanzu ƙasa.\n * - 'y' yana nuna cewa farashin na yanzu daidai ne.\n * Aikin yana amfani da hanyar bincike ta binary don rage yuwuwar farashi.\n * Shigarwa: Matsakaicin farashi (maxPrice) da igiyar shawarwari.\n * Fitarwa: Yana mayar da ainihin farashin abu.\n * Misali: Don maxPrice = 1000000 da shawarwari = \"uddy\", aikin yana mayar da 562500.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hi": "<?php\n\n/**\n * एक निर्दिष्ट सीमा के भीतर किसी वस्तु की सटीक कीमत निर्धारित करता है जो संकेतों की एक श्रृंखला पर आधारित होती है।\n * वस्तु की कीमत सीमा [1, maxPrice] के भीतर है।\n * संकेत एक स्ट्रिंग में दिए जाते हैं जहाँ:\n * - 'u' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से अधिक है।\n * - 'd' इंगित करता है कि वास्तविक कीमत वर्तमान अनुमान से कम है।\n * - 'y' इंगित करता है कि वर्तमान अनुमान सही है।\n * यह फ़ंक्शन संभावित कीमत को सीमित करने के लिए बाइनरी सर्च दृष्टिकोण का उपयोग करता है।\n * इनपुट: अधिकतम कीमत (maxPrice) और संकेतों की एक स्ट्रिंग।\n * आउटपुट: वस्तु की सटीक कीमत लौटाता है।\n * उदाहरण: maxPrice = 1000000 और hints = \"uddy\" के लिए, फ़ंक्शन 562500 लौटाता है।\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int ",
      "hu": "<?php\n\n/**\n * Meghatározza egy elem pontos árát egy megadott tartományon belül, egy sor utalás alapján.\n * Az elem ára a [1, maxPrice] tartományban van.\n * Az utalásokat egy olyan stringben adják meg, ahol:\n * - 'u' jelzi, hogy a tényleges ár magasabb, mint a jelenlegi tipp.\n * - 'd' jelzi, hogy a tényleges ár alacsonyabb, mint a jelenlegi tipp.\n * - 'y' jelzi, hogy a jelenlegi tipp helyes.\n * A függvény bináris keresési megközelítést alkalmaz a lehetséges ár szűkítésére.\n * Bemenet: A maximális ár (maxPrice) és egy utalásokat tartalmazó string.\n * Kimenet: Visszaadja az elem pontos árát.\n * Példa: Ha maxPrice = 1000000 és hints = \"uddy\", a függvény 562500-at ad vissza.\n */\n\nfunction guessItemPrice(int $maxPrice, string $hints): int "
    },
    "prompt_bertscore": {
      "sq": "0.9932757657108259",
      "hy": "0.9730265901466053",
      "bn": "0.9816950186053488",
      "bg": "0.9868592098818749",
      "zh": "0.9759375183806716",
      "fr": "0.9810170931148767",
      "de": "0.9732941452698592",
      "ha": "0.9639702365537006",
      "hi": "0.9885082393052266",
      "hu": "0.978041212746212"
    },
    "canonical_solution": "{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}",
    "instruction": {
      "en": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\n请为以下PHP代码提供简洁的自然语言描述（文档字符串），使用中文且不超过500个字符。",
      "fr": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa, ba tare da wuce haruffa 500 ba.",
      "hi": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function guessItemPrice(int $maxPrice, string $hints): int\n{\n    $low = 1;\n    $high = $maxPrice;\n\n    foreach (str_split($hints) as $hint) {\n        $mid = intdiv($low + $high, 2);\n\n        if ($hint === 'u') {\n            $low = $mid + 1;\n        } elseif ($hint === 'd') {\n            $high = $mid - 1;\n        } elseif ($hint === 'y') {\n            return $mid;\n        }\n    }\n\n    // In case the hints do not determine the price correctly, return an error or a default value\n    return -1; // or any other appropriate error handling\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.924762585641224",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.870943882530202",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.9320197452427147",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(guessItemPrice(1000000, \"uddy\") === 562500);\n    assert(guessItemPrice(500, \"ududy\") === 327);\n    assert(guessItemPrice(100, \"uuudy\") === 91);\n    assert(guessItemPrice(1000, \"ddduy\") === 93);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "guessItemPrice",
    "signature": "function guessItemPrice(int $maxPrice, string $hints): int",
    "docstring": {
      "en": "Determines the exact price of an item within a specified range based on a series of hints.\nThe item's price is within the range [1, maxPrice].\nHints are given in a string where:\n- 'u' indicates the actual price is higher than the current guess.\n- 'd' indicates the actual price is lower than the current guess.\n- 'y' indicates the current guess is correct.\nThe function uses a binary search approach to narrow down the possible price.\nInput: The maximum price (maxPrice) and a string of hints.\nOutput: Returns the exact price of the item.\nExample: For maxPrice = 1000000 and hints = \"uddy\", the function returns 562500.",
      "sq": "Përcakton çmimin e saktë të një artikulli brenda një diapazoni të specifikuar bazuar në një seri të dhënash. \nÇmimi i artikullit është brenda diapazonit [1, maxPrice]. \nTë dhënat jepen në një varg ku: \n- 'u' tregon se çmimi aktual është më i lartë se supozimi aktual. \n- 'd' tregon se çmimi aktual është më i ulët se supozimi aktual. \n- 'y' tregon se supozimi aktual është i saktë. \nFunksioni përdor një qasje kërkimi binar për të ngushtuar çmimin e mundshëm. \nHyrja: Çmimi maksimal (maxPrice) dhe një varg të dhënash. \nDalja: Kthen çmimin e saktë të artikullit. \nShembull: Për maxPrice = 1000000 dhe hints = \"uddy\", funksioni kthen 562500.",
      "hy": "Որոշում է ապրանքի ճշգրիտ գինը որոշված միջակայքում հիմնված հուշումների շարքի վրա։  \nԱպրանքի գինը գտնվում է [1, maxPrice] միջակայքում։  \nՀուշումները տրվում են տողի տեսքով, որտեղ՝  \n- 'u' ցույց է տալիս, որ իրական գինը բարձր է ընթացիկ գուշակությունից։  \n- 'd' ցույց է տալիս, որ իրական գինը ցածր է ընթացիկ գուշակությունից։  \n- 'y' ցույց է տալիս, որ ընթացիկ գուշակությունը ճիշտ է։  \nՖունկցիան օգտագործում է երկբաղադրիչ որոնման մոտեցում՝ հնարավոր գինը նեղացնելու համար։  \nՄուտք: Առավելագույն գինը (maxPrice) և հուշումների տող։  \nԵլք: Վերադարձնում է ապրանքի ճշգրիտ գինը։  \nՕրինակ: maxPrice = 1000000 և hints = \"uddy\" դեպքում, ֆունկցիան վերադարձնում է 562500։",
      "bn": "নির্দিষ্ট সীমার মধ্যে একটি আইটেমের সঠিক মূল্য নির্ধারণ করে একটি সিরিজ সংকেতের ভিত্তিতে। \nআইটেমের মূল্য [1, maxPrice] সীমার মধ্যে রয়েছে। \nসংকেতগুলি একটি স্ট্রিংয়ে দেওয়া হয় যেখানে:\n- 'u' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে বেশি।\n- 'd' নির্দেশ করে যে প্রকৃত মূল্য বর্তমান অনুমানের চেয়ে কম।\n- 'y' নির্দেশ করে যে বর্তমান অনুমান সঠিক।\nফাংশনটি সম্ভাব্য মূল্য সংকীর্ণ করার জন্য একটি বাইনারি সার্চ পদ্ধতি ব্যবহার করে।\nইনপুট: সর্বাধিক মূল্য (maxPrice) এবং সংকেতের একটি স্ট্রিং।\nআউটপুট: আইটেমের সঠিক মূল্য প্রদান করে।\nউদাহরণ: maxPrice = 1000000 এবং hints = \"uddy\" এর জন্য, ফাংশনটি 562500 প্রদান করে।",
      "bg": "Определя точната цена на артикул в рамките на определен диапазон въз основа на серия от подсказки. Цената на артикула е в диапазона [1, maxPrice]. Подсказките са дадени в низ, където:\n- 'u' показва, че действителната цена е по-висока от текущата предположение.\n- 'd' показва, че действителната цена е по-ниска от текущата предположение.\n- 'y' показва, че текущата предположение е правилна.\nФункцията използва подхода на двоично търсене, за да стесни възможната цена.\nВход: Максималната цена (maxPrice) и низ от подсказки.\nИзход: Връща точната цена на артикула.\nПример: За maxPrice = 1000000 и hints = \"uddy\", функцията връща 562500.",
      "zh": "确定物品在指定范围内的确切价格，基于一系列提示。\n物品的价格在范围 [1, maxPrice] 内。\n提示以字符串形式给出，其中：\n- 'u' 表示实际价格高于当前猜测。\n- 'd' 表示实际价格低于当前猜测。\n- 'y' 表示当前猜测正确。\n该函数使用二分查找方法来缩小可能的价格范围。\n输入：最大价格 (maxPrice) 和提示字符串。\n输出：返回物品的确切价格。\n示例：对于 maxPrice = 1000000 和 hints = \"uddy\"，函数返回 562500。",
      "fr": "Détermine le prix exact d'un article dans une plage spécifiée en fonction d'une série d'indices. Le prix de l'article est dans la plage [1, maxPrice]. Les indices sont donnés dans une chaîne où :\n- 'u' indique que le prix réel est supérieur à la supposition actuelle.\n- 'd' indique que le prix réel est inférieur à la supposition actuelle.\n- 'y' indique que la supposition actuelle est correcte.\nLa fonction utilise une approche de recherche binaire pour réduire le prix possible.\nEntrée : Le prix maximum (maxPrice) et une chaîne d'indices.\nSortie : Retourne le prix exact de l'article.\nExemple : Pour maxPrice = 1000000 et hints = \"uddy\", la fonction retourne 562500.",
      "de": "Bestimmt den genauen Preis eines Artikels innerhalb eines angegebenen Bereichs basierend auf einer Reihe von Hinweisen.\nDer Preis des Artikels liegt im Bereich [1, maxPrice].\nHinweise werden in einem String gegeben, wobei:\n- 'u' anzeigt, dass der tatsächliche Preis höher als der aktuelle Schätzwert ist.\n- 'd' anzeigt, dass der tatsächliche Preis niedriger als der aktuelle Schätzwert ist.\n- 'y' anzeigt, dass der aktuelle Schätzwert korrekt ist.\nDie Funktion verwendet einen binären Suchansatz, um den möglichen Preis einzugrenzen.\nEingabe: Der maximale Preis (maxPrice) und ein String von Hinweisen.\nAusgabe: Gibt den genauen Preis des Artikels zurück.\nBeispiel: Für maxPrice = 1000000 und hints = \"uddy\" gibt die Funktion 562500 zurück.",
      "ha": "Yana tantance ainihin farashin wani abu a cikin kewayon da aka kayyade bisa jerin alamu.\nFarashin abu yana cikin kewayon [1, maxPrice].\nAna bayar da alamu a cikin wani kirtani inda:\n- 'u' yana nuna cewa ainihin farashin ya fi na yanzu yawa.\n- 'd' yana nuna cewa ainihin farashin ya fi na yanzu ƙasa.\n- 'y' yana nuna cewa farashin yanzu daidai ne.\nAikin yana amfani da hanyar bincike ta binary don rage yiwuwar farashin.\nShigarwa: Matsakaicin farashi (maxPrice) da kirtanin alamu.\nFitarwa: Yana dawowa da ainihin farashin abu.\nMisali: Don maxPrice = 1000000 da alamu = \"uddy\", aikin yana dawowa 562500.",
      "hi": "सटीक मूल्य निर्धारण करता है जो एक निर्दिष्ट सीमा के भीतर एक श्रृंखला के संकेतों के आधार पर होता है। \nवस्तु की कीमत सीमा [1, maxPrice] के भीतर है। \nसंकेत एक स्ट्रिंग में दिए जाते हैं जहाँ:\n- 'u' इंगित करता है कि वास्तविक मूल्य वर्तमान अनुमान से अधिक है।\n- 'd' इंगित करता है कि वास्तविक मूल्य वर्तमान अनुमान से कम है।\n- 'y' इंगित करता है कि वर्तमान अनुमान सही है।\nयह फ़ंक्शन संभावित मूल्य को संकीर्ण करने के लिए एक द्विआधारी खोज दृष्टिकोण का उपयोग करता है।\nइनपुट: अधिकतम मूल्य (maxPrice) और संकेतों की एक स्ट्रिंग।\nआउटपुट: वस्तु का सटीक मूल्य लौटाता है।\nउदाहरण: maxPrice = 1000000 और hints = \"uddy\" के लिए, फ़ंक्शन 562500 लौटाता है।",
      "hu": "Meghatározza egy elem pontos árát egy megadott tartományon belül, egy sor utalás alapján.\nAz elem ára a [1, maxPrice] tartományban van.\nAz utalások egy olyan stringben vannak megadva, ahol:\n- 'u' azt jelzi, hogy a tényleges ár magasabb, mint a jelenlegi tipp.\n- 'd' azt jelzi, hogy a tényleges ár alacsonyabb, mint a jelenlegi tipp.\n- 'y' azt jelzi, hogy a jelenlegi tipp helyes.\nA függvény bináris keresési megközelítést használ a lehetséges ár szűkítésére.\nBemenet: A maximális ár (maxPrice) és egy utalásokat tartalmazó string.\nKimenet: Visszaadja az elem pontos árát.\nPélda: Ha maxPrice = 1000000 és hints = \"uddy\", a függvény 562500-at ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9631117560468678",
      "hy": "0.9634406879578615",
      "bn": "0.9585168394423877",
      "bg": "0.9823945948073537",
      "zh": "0.9712826154011189",
      "fr": "0.9810431136947924",
      "de": "0.9726577335290235",
      "ha": "0.9795627214649393",
      "hi": "0.9709834780472805",
      "hu": "0.9778002740940167"
    }
  },
  {
    "task_id": "PHP/19",
    "prompt": {
      "en": "<?php\n\n/**\n * Calculates the total effort required to sort a list of disordered elements.\n * In this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order. \n * The effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\n * Input: An array of integers representing the unsorted container numbers.\n * Output: Returns an integer representing the total effort required to sort the containers.\n * Example: For input [3, 1, 4, 2], the output is 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "sq": "<?php\n\n/**\n * Llogarit përpjekjen totale të kërkuar për të renditur një listë elementësh të çrregullt.\n * Në këtë skenar, imagjinoni një seri kontejnerësh të numëruar në një depo. Çdo kontejner duhet të renditet në rend rritës.\n * Përpjekja për të shkëmbyer dy kontejnerë është proporcionale me distancën midis tyre, e matur si dyfishi i diferencës së tyre pozicionale.\n * Hyrja: Një varg me numra të plotë që përfaqëson numrat e kontejnerëve të parenditur.\n * Dalja: Kthen një numër të plotë që përfaqëson përpjekjen totale të kërkuar për të renditur kontejnerët.\n * Shembull: Për hyrjen [3, 1, 4, 2], dalja është 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hy": "<?php\n\n/**\n * Հաշվում է ընդհանուր ջանքերը, որոնք անհրաժեշտ են անկանոն տարրերի ցուցակը դասավորելու համար:\n * Այս սցենարում պատկերացրեք համարակալված տարաների շարք պահեստում: Յուրաքանչյուր տարա պետք է դասավորվի աճման կարգով:\n * Երկու տարաները փոխանակելու ջանքերը համեմատական են նրանց միջև եղած հեռավորությանը, որը չափվում է որպես նրանց դիրքային տարբերության կրկնապատիկը:\n * Մուտքագրում: Անկազմակերպ տարաների համարները ներկայացնող ամբողջ թվերի զանգված:\n * Ելք: Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է տարաների դասավորման համար անհրաժեշտ ընդհանուր ջանքերը:\n * Օրինակ: Մուտքագրման համար [3, 1, 4, 2], ելքը 8 է:\n */\n\nfunction calculateEffort($horseNumbers) ",
      "bn": "<?php\n\n/**\n * এলোমেলো উপাদানগুলির একটি তালিকা সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা গণনা করে।\n * এই পরিস্থিতিতে, একটি গুদামে নম্বরযুক্ত ধারকগুলির একটি সিরিজ কল্পনা করুন। প্রতিটি ধারককে ক্রমবর্ধমান ক্রমে সাজানো আবশ্যক।\n * দুটি ধারক অদলবদল করার প্রচেষ্টা তাদের মধ্যে দূরত্বের সমানুপাতিক, যা তাদের অবস্থানগত পার্থক্যের দ্বিগুণ হিসাবে পরিমাপ করা হয়।\n * ইনপুট: এলোমেলো ধারক নম্বরগুলি উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n * আউটপুট: ধারকগুলি সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা উপস্থাপনকারী একটি পূর্ণসংখ্যা প্রদান করে।\n * উদাহরণ: ইনপুট [3, 1, 4, 2] এর জন্য, আউটপুট 8।\n */\n\nfunction calculateEffort($horseNumbers) ",
      "bg": "<?php\n\n/**\n * Изчислява общото усилие, необходимо за сортиране на списък от неупорядъчени елементи.\n * В този сценарий си представете серия от номерирани контейнери в склад. Всеки контейнер трябва да бъде подреден във възходящ ред.\n * Усилието за размяна на два контейнера е пропорционално на разстоянието между тях, измерено като двойно на тяхната позиционна разлика.\n * Вход: Масив от цели числа, представляващи несортираните номера на контейнерите.\n * Изход: Връща цяло число, представляващо общото усилие, необходимо за сортиране на контейнерите.\n * Пример: За вход [3, 1, 4, 2], изходът е 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "zh": "<?php\n\n/**\n * 计算对一组无序元素进行排序所需的总努力。\n * 在这种情况下，想象一个仓库中的一系列编号容器。每个容器必须按升序排列。\n * 交换两个容器的努力与它们之间的距离成正比，距离测量为它们位置差的两倍。\n * 输入：一个整数数组，表示未排序的容器编号。\n * 输出：返回一个整数，表示对容器进行排序所需的总努力。\n * 示例：对于输入 [3, 1, 4, 2]，输出是 8。\n */\n\nfunction calculateEffort($horseNumbers) ",
      "fr": "<?php\n\n/**\n * Calcule l'effort total nécessaire pour trier une liste d'éléments désordonnés.\n * Dans ce scénario, imaginez une série de conteneurs numérotés dans un entrepôt. Chaque conteneur doit être arrangé dans l'ordre croissant.\n * L'effort pour échanger deux conteneurs est proportionnel à la distance entre eux, mesurée comme le double de leur différence de position.\n * Entrée : Un tableau d'entiers représentant les numéros de conteneurs non triés.\n * Sortie : Retourne un entier représentant l'effort total nécessaire pour trier les conteneurs.\n * Exemple : Pour l'entrée [3, 1, 4, 2], la sortie est 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "de": "<?php\n\n/**\n * Berechnet den gesamten Aufwand, der erforderlich ist, um eine Liste ungeordneter Elemente zu sortieren.\n * In diesem Szenario stellen Sie sich eine Reihe nummerierter Container in einem Lager vor. Jeder Container muss in aufsteigender Reihenfolge angeordnet werden.\n * Der Aufwand, zwei Container zu tauschen, ist proportional zu der Entfernung zwischen ihnen, gemessen als das Doppelte ihrer Positionsdifferenz.\n * Eingabe: Ein Array von ganzen Zahlen, das die unsortierten Container-Nummern darstellt.\n * Ausgabe: Gibt eine ganze Zahl zurück, die den gesamten Aufwand darstellt, der erforderlich ist, um die Container zu sortieren.\n * Beispiel: Für die Eingabe [3, 1, 4, 2] ist die Ausgabe 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "ha": "<?php\n\n/**\n * Lissafin jimillar ƙoƙari da ake buƙata don tsara jerin abubuwan da ba su da tsari.\n * A wannan yanayin, yi tunanin jerin kwantena masu lamba a cikin sito. Dole ne a shirya kowanne kwantena a cikin tsari mai tashi. \n * Ƙoƙarin musanya kwantena biyu yana da alaƙa da nisan dake tsakaninsu, wanda aka auna sau biyu na bambancin matsayinsu.\n * Shigarwa: Wani jerin lambobin cikakkun lambobi da ke wakiltar lambobin kwantena da ba a tsara ba.\n * Fitarwa: Yana mayar da cikakken lamba wanda ke wakiltar jimillar ƙoƙari da ake buƙata don tsara kwantenan.\n * Misali: Don shigarwa [3, 1, 4, 2], fitarwar ita ce 8.\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hi": "<?php\n\n/**\n * अव्यवस्थित तत्वों की सूची को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास की गणना करता है।\n * इस परिदृश्य में, एक गोदाम में क्रमांकित कंटेनरों की एक श्रृंखला की कल्पना करें। प्रत्येक कंटेनर को आरोही क्रम में व्यवस्थित किया जाना चाहिए।\n * दो कंटेनरों को अदला-बदली करने का प्रयास उनके बीच की दूरी के अनुपात में होता है, जिसे उनके स्थितिगत अंतर का दोगुना मापा जाता है।\n * इनपुट: पूर्णांकों की एक array जो अव्यवस्थित कंटेनर नंबरों का प्रतिनिधित्व करती है।\n * आउटपुट: एक पूर्णांक लौटाता है जो कंटेनरों को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास का प्रतिनिधित्व करता है।\n * उदाहरण: इनपुट [3, 1, 4, 2] के लिए, आउटपुट 8 है।\n */\n\nfunction calculateEffort($horseNumbers) ",
      "hu": "<?php\n\n/**\n * Kiszámítja a rendezetlen elemek listájának rendezéséhez szükséges teljes erőfeszítést.\n * Ebben a szcenárióban képzeljünk el egy sor számozott konténert egy raktárban. Minden konténert növekvő sorrendbe kell rendezni. \n * Két konténer felcserélésének erőfeszítése arányos a köztük lévő távolsággal, amelyet a pozícióbeli különbségük kétszereseként mérünk.\n * Bemenet: Egész számokat tartalmazó tömb, amely a rendezetlen konténerszámokat jelenti.\n * Kimenet: Visszaad egy egész számot, amely a konténerek rendezéséhez szükséges teljes erőfeszítést jelenti.\n * Példa: A [3, 1, 4, 2] bemenetre a kimenet 8.\n */\n\nfunction calculateEffort($horseNumbers) "
    },
    "prompt_bertscore": {
      "sq": "0.9715122321215953",
      "hy": "0.9764050942976277",
      "bn": "0.9879773002967203",
      "bg": "0.9952221448145868",
      "zh": "0.9553117396140088",
      "fr": "0.9906453035747809",
      "de": "0.9914445922280652",
      "ha": "0.9455436933658561",
      "hi": "0.9879773002967203",
      "hu": "0.9736153305959927"
    },
    "canonical_solution": "{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}",
    "instruction": {
      "en": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nGeben Sie eine prägnante Beschreibung des PHP-Codes in natürlicher Sprache auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nBa da takaitaccen bayani a cikin yare na halitta (docstring) na lambar PHP a cikin Hausa, ba tare da wuce haruffa 500 ba.",
      "hi": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function calculateEffort($horseNumbers)\n{\n    $effort = 0;\n    $n = count($horseNumbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if ($horseNumbers[$i] > $horseNumbers[$j]) {\n                // Swapping\n                $temp = $horseNumbers[$i];\n                $horseNumbers[$i] = $horseNumbers[$j];\n                $horseNumbers[$j] = $temp;\n                // Calculating effort\n                $effort += ($j - $i) * 2;\n            }\n        }\n    }\n    return $effort;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8531680524706279",
      "fr": "0.9692393046714131",
      "de": "0.873226344238674",
      "ha": "0.9176373166127405",
      "hi": "0.8891028705947926",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateEffort([2, 3, 6, 5, 8, 4]) === 14);\n    assert(calculateEffort([3, 1, 4, 2]) === 8);\n    assert(calculateEffort([1, 2, 3, 4]) === 0); // Already sorted\n    assert(calculateEffort([4, 3, 2, 1]) === 20); // Reverse order\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateEffort",
    "signature": "function calculateEffort($horseNumbers)",
    "docstring": {
      "en": "Calculates the total effort required to sort a list of disordered elements.\nIn this scenario, imagine a series of numbered containers in a warehouse. Each container must be arranged in ascending order.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Returns an integer representing the total effort required to sort the containers.\nExample: For input [3, 1, 4, 2], the output is 8.",
      "sq": "Llogarit përpjekjen totale të nevojshme për të renditur një listë elementesh të çrregullta.\nNë këtë skenar, imagjinoni një seri kontejnerësh të numëruar në një depo. Çdo kontejner duhet të renditet në rritje.\nPërpjekja për të shkëmbyer dy kontejnerë është proporcionale me distancën midis tyre, e matur si dyfishi i ndryshimit të tyre pozicional.\nInput: Një varg i numrave të plotë që përfaqësojnë numrat e kontejnerëve të parenditur.\nOutput: Kthen një numër të plotë që përfaqëson përpjekjen totale të nevojshme për të renditur kontejnerët.\nShembull: Për inputin [3, 1, 4, 2], outputi është 8.",
      "hy": "Հաշվում է անշարունակ տարրերի ցուցակը դասավորելու համար պահանջվող ընդհանուր ջանքերը:\nԱյս սցենարում պատկերացրեք համարակալված տարաների շարք պահեստում: Յուրաքանչյուր տարա պետք է դասավորվի աճման կարգով:\nԵրկու տարաների փոխանակման ջանքը համեմատական է նրանց միջև եղած հեռավորությանը, որը չափվում է որպես նրանց դիրքային տարբերության կրկնապատիկ:\nՄուտք: Անկարգ տարաների համարները ներկայացնող ամբողջ թվերի զանգված:\nԵլք: Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է տարաների դասավորության համար պահանջվող ընդհանուր ջանքը:\nՕրինակ: Մուտքի համար [3, 1, 4, 2], ելքը 8 է:",
      "bn": "এলোমেলো উপাদানগুলির একটি তালিকা সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা গণনা করে।\nএই পরিস্থিতিতে, একটি গুদামে নম্বরযুক্ত কন্টেইনারগুলির একটি সিরিজ কল্পনা করুন। প্রতিটি কন্টেইনারকে ক্রমবর্ধমান ক্রমে সাজাতে হবে।\nদুটি কন্টেইনার অদলবদল করার প্রচেষ্টা তাদের মধ্যে দূরত্বের সমানুপাতিক, যা তাদের অবস্থানগত পার্থক্যের দ্বিগুণ হিসাবে পরিমাপ করা হয়।\nInput: একটি পূর্ণসংখ্যার অ্যারে যা অসম্ভব কন্টেইনার নম্বরগুলি উপস্থাপন করে।\nOutput: একটি পূর্ণসংখ্যা প্রদান করে যা কন্টেইনারগুলি সাজানোর জন্য প্রয়োজনীয় মোট প্রচেষ্টা উপস্থাপন করে।\nExample: ইনপুট [3, 1, 4, 2] এর জন্য, আউটপুট 8।",
      "bg": "Изчислява общото усилие, необходимо за сортиране на списък от неупорядъчени елементи.  \nВ този сценарий, си представете серия от номерирани контейнери в склад. Всеки контейнер трябва да бъде подреден във възходящ ред.  \nУсилието за размяна на два контейнера е пропорционално на разстоянието между тях, измерено като двойно на тяхната позиционна разлика.  \nВход: Масив от цели числа, представляващи несортираните номера на контейнерите.  \nИзход: Връща цяло число, представляващо общото усилие, необходимо за сортиране на контейнерите.  \nПример: За вход [3, 1, 4, 2], изходът е 8.",
      "zh": "计算对一组无序元素进行排序所需的总努力。\n\n在这种情况下，想象一个仓库中的一系列编号容器。每个容器必须按升序排列。\n\n交换两个容器的努力与它们之间的距离成比例，距离被测量为它们位置差的两倍。\n\n输入：一个整数数组，表示未排序的容器编号。\n\n输出：返回一个整数，表示对容器进行排序所需的总努力。\n\n示例：对于输入 [3, 1, 4, 2]，输出是 8。",
      "fr": "Calcule l'effort total nécessaire pour trier une liste d'éléments désordonnés.  \nDans ce scénario, imaginez une série de conteneurs numérotés dans un entrepôt. Chaque conteneur doit être arrangé dans l'ordre croissant.  \nL'effort pour échanger deux conteneurs est proportionnel à la distance entre eux, mesurée comme le double de leur différence de position.  \nEntrée : Un tableau d'entiers représentant les numéros des conteneurs non triés.  \nSortie : Renvoie un entier représentant l'effort total nécessaire pour trier les conteneurs.  \nExemple : Pour l'entrée [3, 1, 4, 2], la sortie est 8.",
      "de": "Berechnet den gesamten Aufwand, der erforderlich ist, um eine Liste ungeordneter Elemente zu sortieren.\nIn diesem Szenario stellen Sie sich eine Reihe von nummerierten Containern in einem Lagerhaus vor. Jeder Container muss in aufsteigender Reihenfolge angeordnet werden.\nDer Aufwand, zwei Container zu vertauschen, ist proportional zur Entfernung zwischen ihnen, gemessen als das Doppelte ihrer Positionsdifferenz.\nEingabe: Ein Array von ganzen Zahlen, das die unsortierten Container-Nummern darstellt.\nAusgabe: Gibt eine ganze Zahl zurück, die den gesamten Aufwand darstellt, der erforderlich ist, um die Container zu sortieren.\nBeispiel: Für die Eingabe [3, 1, 4, 2] beträgt die Ausgabe 8.",
      "ha": "Lissafa jimillar ƙoƙari da ake buƙata don tsara jerin abubuwa marasa tsari.\nA wannan yanayi, yi tunanin jerin kwantena masu lamba a cikin sito. Dole ne a shirya kowanne kwantena a cikin tsari mai hawa.\nThe effort to swap two containers is proportional to the distance between them, measured as double their positional difference.\nInput: An array of integers representing the unsorted container numbers.\nOutput: Ya dawo da integer wanda ke wakiltar jimlar ƙoƙari da ake buƙata don tsara kwantenan.\nExample: Ga shigarwa [3, 1, 4, 2], fitarwa shine 8.",
      "hi": "अव्यवस्थित तत्वों की सूची को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास की गणना करता है।\nइस परिदृश्य में, एक गोदाम में क्रमांकित कंटेनरों की एक श्रृंखला की कल्पना करें। प्रत्येक कंटेनर को आरोही क्रम में व्यवस्थित किया जाना चाहिए।\nArgs:\n    Input: पूर्णांकों की एक सूची जो अव्यवस्थित कंटेनर संख्याओं का प्रतिनिधित्व करती है।\nReturns:\n    Output: एक पूर्णांक लौटाता है जो कंटेनरों को क्रमबद्ध करने के लिए आवश्यक कुल प्रयास का प्रतिनिधित्व करता है।\nExamples:\n    Example: For input [3, 1, 4, 2], the output is 8.",
      "hu": "Kiszámítja a rendezetlen elemek listájának rendezéséhez szükséges teljes erőfeszítést.\nEbben a helyzetben képzeljünk el egy sorozatot számozott konténerekkel egy raktárban. Minden konténert növekvő sorrendbe kell rendezni.\nKét konténer felcserélésének erőfeszítése arányos a közöttük lévő távolsággal, amelyet a pozícióbeli különbségük kétszereseként mérünk.\nBemenet: Egész számokat tartalmazó tömb, amely a rendezetlen konténerszámokat képviseli.\nKimenet: Egy egész számot ad vissza, amely a konténerek rendezéséhez szükséges teljes erőfeszítést képviseli.\nPélda: A [3, 1, 4, 2] bemenetre a kimenet 8."
    },
    "docstring_bertscore": {
      "sq": "0.9698183122321298",
      "hy": "0.966170068023662",
      "bn": "0.977835828932222",
      "bg": "0.9804440444655911",
      "zh": "0.9525722293987756",
      "fr": "0.9813452305043464",
      "de": "0.9909795985060627",
      "ha": "0.961387644339485",
      "hi": "0.9797339408533914",
      "hu": "0.9715749993220023"
    }
  },
  {
    "task_id": "PHP/20",
    "prompt": {
      "en": "<?php\n/**\n * Determines the ranking of a player at the time of their entry in a competition.\n * \n * In this competition, scores are announced one after another, updating the leaderboard each time.\n * This function calculates the rank of a specific player at the time they were added to the leaderboard.\n * \n * Input: \n * - $scores: An array of integers representing the scores of each player.\n * - $playerIndex: An integer representing the index of the player (1-based index).\n * \n * Output: \n * - Returns an integer, the rank of the player at the time of their entry.\n * \n * Example: \n * For scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "sq": "<?php\n/**\n * Përcakton renditjen e një lojtari në momentin e hyrjes së tyre në një garë.\n * \n * Në këtë garë, pikët shpallen njëra pas tjetrës, duke përditësuar tabelën e renditjes çdo herë.\n * Kjo funksion llogarit renditjen e një lojtari specifik në momentin kur ata u shtuan në tabelën e renditjes.\n * \n * Hyrja: \n * - $scores: Një varg me numra të plotë që përfaqësojnë pikët e secilit lojtar.\n * - $playerIndex: Një numër i plotë që përfaqëson indeksin e lojtarit (indeksi i bazuar në 1).\n * \n * Dalja: \n * - Kthen një numër të plotë, renditjen e lojtarit në momentin e hyrjes së tyre.\n * \n * Shembull: \n * Për pikët [95, 92, 93, 100, 102, 99] dhe playerIndex 3, funksioni duhet të kthejë 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hy": "<?php\n/**\n * Որոշում է խաղացողի վարկանիշը մրցույթի մուտքի պահին:\n * \n * Այս մրցույթում միավորները հայտարարվում են մեկը մյուսի հետևից՝ ամեն անգամ թարմացնելով առաջատարների ցուցակը:\n * Այս ֆունկցիան հաշվարկում է կոնկրետ խաղացողի վարկանիշը այն պահին, երբ նրանք ավելացվել են առաջատարների ցուցակում:\n * \n * Մուտք: \n * - $scores: Թվերի զանգված, որը ներկայացնում է յուրաքանչյուր խաղացողի միավորները:\n * - $playerIndex: Թիվ, որը ներկայացնում է խաղացողի ինդեքսը (1-ով սկսվող ինդեքս):\n * \n * Ելք: \n * - Վերադարձնում է թիվ, խաղացողի վարկանիշը մուտքի պահին:\n * \n * Օրինակ: \n * Եթե միավորներն են [95, 92, 93, 100, 102, 99] և playerIndex 3, ապա ֆունկցիան պետք է վերադարձնի 2:\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "bn": "<?php\n/**\n * প্রতিযোগিতায় প্রবেশের সময় একজন খেলোয়াড়ের র‌্যাঙ্ক নির্ধারণ করে।\n * \n * এই প্রতিযোগিতায়, স্কোরগুলি একের পর এক ঘোষণা করা হয়, প্রতিবার লিডারবোর্ড আপডেট হয়।\n * এই ফাংশনটি নির্দিষ্ট খেলোয়াড়ের র‌্যাঙ্ক গণনা করে যখন তারা লিডারবোর্ডে যোগ করা হয়েছিল।\n * \n * ইনপুট: \n * - $scores: প্রতিটি খেলোয়াড়ের স্কোরগুলি উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n * - $playerIndex: খেলোয়াড়ের সূচক উপস্থাপনকারী একটি পূর্ণসংখ্যা (১-ভিত্তিক সূচক)।\n * \n * আউটপুট: \n * - একটি পূর্ণসংখ্যা প্রদান করে, খেলোয়াড়ের প্রবেশের সময় তাদের র‌্যাঙ্ক।\n * \n * উদাহরণ: \n * স্কোর [95, 92, 93, 100, 102, 99] এবং playerIndex 3 এর জন্য, ফাংশনটি 2 প্রদান করা উচিত।\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "bg": "<?php\n/**\n * Определя класирането на играч по време на неговото влизане в състезание.\n * \n * В това състезание резултатите се обявяват един след друг, като всеки път се актуализира класацията.\n * Тази функция изчислява ранга на конкретен играч в момента, в който е добавен към класацията.\n * \n * Вход: \n * - $scores: Масив от цели числа, представляващи резултатите на всеки играч.\n * - $playerIndex: Цяло число, представляващо индекса на играча (индексът започва от 1).\n * \n * Изход: \n * - Връща цяло число, ранга на играча в момента на неговото влизане.\n * \n * Пример: \n * За резултати [95, 92, 93, 100, 102, 99] и playerIndex 3, функцията трябва да върне 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "zh": "<?php\n/**\n * 确定玩家在比赛中进入时的排名。\n * \n * 在这场比赛中，分数一个接一个地公布，每次更新排行榜。\n * 此函数计算特定玩家在被添加到排行榜时的排名。\n * \n * 输入: \n * - $scores: 一个整数数组，表示每个玩家的分数。\n * - $playerIndex: 一个整数，表示玩家的索引（从1开始的索引）。\n * \n * 输出: \n * - 返回一个整数，即玩家进入时的排名。\n * \n * 示例: \n * 对于分数 [95, 92, 93, 100, 102, 99] 和 playerIndex 3，函数应返回 2。\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "fr": "<?php\n/**\n * Détermine le classement d'un joueur au moment de son entrée dans une compétition.\n * \n * Dans cette compétition, les scores sont annoncés un par un, mettant à jour le classement à chaque fois.\n * Cette fonction calcule le rang d'un joueur spécifique au moment où il a été ajouté au classement.\n * \n * Entrée : \n * - $scores : Un tableau d'entiers représentant les scores de chaque joueur.\n * - $playerIndex : Un entier représentant l'indice du joueur (indice basé sur 1).\n * \n * Sortie : \n * - Renvoie un entier, le rang du joueur au moment de son entrée.\n * \n * Exemple : \n * Pour les scores [95, 92, 93, 100, 102, 99] et playerIndex 3, la fonction doit renvoyer 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "de": "<?php\n/**\n * Bestimmt die Platzierung eines Spielers zum Zeitpunkt seines Eintritts in einen Wettbewerb.\n * \n * In diesem Wettbewerb werden die Punktzahlen nacheinander bekannt gegeben und aktualisieren jedes Mal die Rangliste.\n * Diese Funktion berechnet den Rang eines bestimmten Spielers zum Zeitpunkt, an dem er zur Rangliste hinzugefügt wurde.\n * \n * Eingabe: \n * - $scores: Ein Array von ganzen Zahlen, das die Punktzahlen jedes Spielers darstellt.\n * - $playerIndex: Eine ganze Zahl, die den Index des Spielers darstellt (1-basierter Index).\n * \n * Ausgabe: \n * - Gibt eine ganze Zahl zurück, den Rang des Spielers zum Zeitpunkt seines Eintritts.\n * \n * Beispiel: \n * Für Punktzahlen [95, 92, 93, 100, 102, 99] und playerIndex 3 sollte die Funktion 2 zurückgeben.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "ha": "<?php\n/**\n * Yana tantance matsayi na ɗan wasa a lokacin shigarsa cikin gasa.\n * \n * A cikin wannan gasa, ana sanar da maki ɗaya bayan ɗaya, suna sabunta jerin jagorori a kowane lokaci.\n * Wannan aikin yana ƙididdige matsayi na wani ɗan wasa a lokacin da aka ƙara su cikin jerin jagorori.\n * \n * Shigarwa: \n * - $scores: Jeri na lambobi masu wakiltar maki na kowane ɗan wasa.\n * - $playerIndex: Lamba mai wakiltar alamar ɗan wasa (1-tushen alama).\n * \n * Fitarwa: \n * - Yana dawowa da lamba, matsayi na ɗan wasa a lokacin shigarsa.\n * \n * Misali: \n * Don maki [95, 92, 93, 100, 102, 99] da playerIndex 3, aikin ya kamata ya dawo da 2.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hi": "<?php\n/**\n * यह निर्धारित करता है कि प्रतियोगिता में प्रवेश के समय खिलाड़ी की रैंकिंग क्या है।\n * \n * इस प्रतियोगिता में, स्कोर एक के बाद एक घोषित किए जाते हैं, प्रत्येक बार लीडरबोर्ड को अपडेट करते हुए।\n * यह फ़ंक्शन उस समय खिलाड़ी की रैंक की गणना करता है जब उन्हें लीडरबोर्ड में जोड़ा गया था।\n * \n * इनपुट: \n * - $scores: प्रत्येक खिलाड़ी के स्कोर का प्रतिनिधित्व करने वाले पूर्णांकों की एक array।\n * - $playerIndex: खिलाड़ी का इंडेक्स (1-आधारित इंडेक्स) का प्रतिनिधित्व करने वाला पूर्णांक।\n * \n * आउटपुट: \n * - एक पूर्णांक लौटाता है, खिलाड़ी की रैंक उनके प्रवेश के समय।\n * \n * उदाहरण: \n * स्कोर [95, 92, 93, 100, 102, 99] और playerIndex 3 के लिए, फ़ंक्शन को 2 लौटाना चाहिए।\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) ",
      "hu": "<?php\n/**\n * Meghatározza egy játékos rangsorát a versenybe való belépésük időpontjában.\n * \n * Ebben a versenyben a pontszámokat egymás után jelentik be, minden alkalommal frissítve a ranglistát.\n * Ez a függvény kiszámítja egy adott játékos rangját abban az időpontban, amikor hozzáadták a ranglistához.\n * \n * Bemenet: \n * - $scores: Egész számokat tartalmazó tömb, amely az egyes játékosok pontszámait jelöli.\n * - $playerIndex: Egy egész szám, amely a játékos indexét jelöli (1-alapú index).\n * \n * Kimenet: \n * - Visszaad egy egész számot, a játékos rangját a belépésük időpontjában.\n * \n * Példa: \n * A [95, 92, 93, 100, 102, 99] pontszámok és a 3-as playerIndex esetén a függvénynek 2-t kell visszaadnia.\n */\n\n\nfunction getPlayerRankingAtEntry($scores, $playerIndex) "
    },
    "prompt_bertscore": {
      "sq": "0.9830161092696119",
      "hy": "0.9486693410418211",
      "bn": "0.9656836222205075",
      "bg": "0.9675239327007957",
      "zh": "0.9623295496063524",
      "fr": "0.976179450184772",
      "de": "0.9906925776054673",
      "ha": "0.9601595126935463",
      "hi": "0.9778707878792842",
      "hu": "0.9715118348608333"
    },
    "canonical_solution": "{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}",
    "instruction": {
      "en": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nՏվեք PHP կոդի համառոտ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nДайте кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nBa da takaitaccen bayani a cikin harshen dabi'a (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function getPlayerRankingAtEntry($scores, $playerIndex)\n{\n    $playerScore = $scores[$playerIndex - 1];\n    $rank = 1;\n\n    for ($i = 0; $i < $playerIndex - 1; $i++) {\n        if ($scores[$i] >= $playerScore) {\n            $rank++;\n        }\n    }\n\n    return $rank;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9136390856728892",
      "bn": "0.8743148387267452",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(getPlayerRankingAtEntry([95, 92, 93, 100, 102, 99], 3) === 2);\n    assert(getPlayerRankingAtEntry([90, 85, 95, 88, 92], 5) === 2);\n    assert(getPlayerRankingAtEntry([100, 105, 95, 110, 90], 1) === 1);\n    assert(getPlayerRankingAtEntry([70, 80, 60, 90, 85], 4) === 1);\n    assert(getPlayerRankingAtEntry([95, 95, 95, 95, 95], 3) === 3);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "getPlayerRankingAtEntry",
    "signature": "function getPlayerRankingAtEntry($scores, $playerIndex)",
    "docstring": {
      "en": "Determines the ranking of a player at the time of their entry in a competition.\n\nIn this competition, scores are announced one after another, updating the leaderboard each time.\nThis function calculates the rank of a specific player at the time they were added to the leaderboard.\n\nInput:\n- $scores: An array of integers representing the scores of each player.\n- $playerIndex: An integer representing the index of the player (1-based index).\n\nOutput:\n- Returns an integer, the rank of the player at the time of their entry.\n\nExample:\nFor scores [95, 92, 93, 100, 102, 99] and playerIndex 3, the function should return 2.",
      "sq": "Përcakton renditjen e një lojtari në momentin e hyrjes së tij në një garë.\n\nNë këtë garë, pikët shpallen njëra pas tjetrës, duke përditësuar tabelën e renditjes çdo herë.\nKjo funksion llogarit renditjen e një lojtari specifik në momentin kur ai u shtua në tabelën e renditjes.\n\nHyrja:\n- $scores: Një varg i numrave të plotë që përfaqësojnë pikët e secilit lojtar.\n- $playerIndex: Një numër i plotë që përfaqëson indeksin e lojtarit (indeksi i bazuar në 1).\n\nDalja:\n- Kthen një numër të plotë, renditjen e lojtarit në momentin e hyrjes së tij.\n\nShembull:\nPër pikët [95, 92, 93, 100, 102, 99] dhe playerIndex 3, funksioni duhet të kthejë 2.",
      "hy": "Սահմանում է խաղացողի վարկանիշը մրցույթի մուտքի պահին:\n\nԱյս մրցույթում միավորները հայտարարվում են մեկը մյուսի հետևից՝ ամեն անգամ թարմացնելով առաջատարների ցուցակը: Այս ֆունկցիան հաշվարկում է կոնկրետ խաղացողի վարկանիշը այն պահին, երբ նա ավելացվել է առաջատարների ցուցակում:\n\nՄուտք:\n- $scores: Ամբողջ թվերի զանգված, որը ներկայացնում է յուրաքանչյուր խաղացողի միավորները:\n- $playerIndex: Ամբողջ թիվ, որը ներկայացնում է խաղացողի ինդեքսը (1-բազային ինդեքս):\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, խաղացողի վարկանիշը մուտքի պահին:\n\nՕրինակ:\nԵթե scores [95, 92, 93, 100, 102, 99] և playerIndex 3, ֆունկցիան պետք է վերադարձնի 2:",
      "bn": "প্রতিযোগিতায় প্রবেশের সময় একজন খেলোয়াড়ের র‌্যাঙ্ক নির্ধারণ করে।\n\nএই প্রতিযোগিতায়, স্কোরগুলি একের পর এক ঘোষণা করা হয়, প্রতিবার লিডারবোর্ড আপডেট হয়।\nএই ফাংশনটি নির্দিষ্ট খেলোয়াড়ের র‌্যাঙ্ক গণনা করে যখন তারা লিডারবোর্ডে যোগ করা হয়।\n\nইনপুট:\n- $scores: প্রতিটি খেলোয়াড়ের স্কোর উপস্থাপনকারী পূর্ণসংখ্যার একটি অ্যারে।\n- $playerIndex: খেলোয়াড়ের সূচক উপস্থাপনকারী একটি পূর্ণসংখ্যা (১-ভিত্তিক সূচক)।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা প্রদান করে, খেলোয়াড়ের প্রবেশের সময় তাদের র‌্যাঙ্ক।\n\nউদাহরণ:\nস্কোর [95, 92, 93, 100, 102, 99] এবং playerIndex 3 এর জন্য, ফাংশনটি 2 প্রদান করা উচিত।",
      "bg": "Определя класирането на играч в момента на влизането му в състезание.\n\nВ това състезание резултатите се обявяват един след друг, като всеки път се актуализира класацията.\nТази функция изчислява ранга на конкретен играч в момента, в който е добавен към класацията.\n\nВход:\n- $scores: Масив от цели числа, представляващи резултатите на всеки играч.\n- $playerIndex: Цяло число, представляващо индекса на играча (индекс, започващ от 1).\n\nИзход:\n- Връща цяло число, ранга на играча в момента на влизането му.\n\nПример:\nЗа резултати [95, 92, 93, 100, 102, 99] и playerIndex 3, функцията трябва да върне 2.",
      "zh": "确定玩家在比赛中进入时的排名。\n\n在这场比赛中，分数一个接一个地公布，每次更新排行榜。\n此函数计算特定玩家在被添加到排行榜时的排名。\n\n输入：\n- $scores: 一个整数数组，表示每个玩家的分数。\n- $playerIndex: 一个整数，表示玩家的索引（基于1的索引）。\n\n输出：\n- 返回一个整数，表示玩家在进入时的排名。\n\n示例：\n对于分数 [95, 92, 93, 100, 102, 99] 和 playerIndex 3，函数应返回 2。",
      "fr": "Détermine le classement d'un joueur au moment de son entrée dans une compétition.\n\nDans cette compétition, les scores sont annoncés les uns après les autres, mettant à jour le classement à chaque fois.\nCette fonction calcule le rang d'un joueur spécifique au moment où il a été ajouté au classement.\n\nEntrée:\n- $scores: Un tableau d'entiers représentant les scores de chaque joueur.\n- $playerIndex: Un entier représentant l'indice du joueur (indice basé sur 1).\n\nSortie:\n- Retourne un entier, le rang du joueur au moment de son entrée.\n\nExemple:\nPour les scores [95, 92, 93, 100, 102, 99] et playerIndex 3, la fonction doit retourner 2.",
      "de": "Bestimmt das Ranking eines Spielers zum Zeitpunkt seines Eintritts in einen Wettbewerb.\n\nIn diesem Wettbewerb werden die Punktzahlen nacheinander bekannt gegeben und aktualisieren jedes Mal die Rangliste.\nDiese Funktion berechnet den Rang eines bestimmten Spielers zum Zeitpunkt seiner Aufnahme in die Rangliste.\n\nEingabe:\n- $scores: Ein Array von ganzen Zahlen, das die Punktzahlen jedes Spielers darstellt.\n- $playerIndex: Eine ganze Zahl, die den Index des Spielers darstellt (1-basierter Index).\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, den Rang des Spielers zum Zeitpunkt seines Eintritts.\n\nBeispiel:\nFür scores [95, 92, 93, 100, 102, 99] und playerIndex 3 sollte die Funktion 2 zurückgeben.",
      "ha": "Yana tantance matsayi na ɗan wasa a lokacin shigarsu cikin gasa.\n\nA cikin wannan gasa, ana sanar da maki ɗaya bayan ɗaya, suna sabunta jerin sunayen shugabanni a kowane lokaci.\nWannan aikin yana ƙididdige matsayi na ɗan wasa na musamman a lokacin da aka ƙara su cikin jerin shugabanni.\n\nShigarwa:\n- $scores: Jerin lambobi masu nuna maki na kowane ɗan wasa.\n- $playerIndex: Lamba mai nuna alamar ɗan wasa (1-tushe alamar).\n\nFitarwa:\n- Yana dawowa da lamba, matsayi na ɗan wasa a lokacin shigarwarsu.\n\nMisali:\nGa scores [95, 92, 93, 100, 102, 99] da playerIndex 3, aikin ya kamata ya dawo da 2.",
      "hi": "खिलाड़ी की प्रविष्टि के समय प्रतियोगिता में उसकी रैंकिंग निर्धारित करता है।\n\nइस प्रतियोगिता में, स्कोर एक के बाद एक घोषित किए जाते हैं, प्रत्येक बार लीडरबोर्ड को अपडेट करते हुए। यह फ़ंक्शन लीडरबोर्ड में जोड़े जाने के समय एक विशेष खिलाड़ी की रैंक की गणना करता है।\n\nइनपुट:\n- $scores: प्रत्येक खिलाड़ी के स्कोर का एक पूर्णांक सरणी।\n- $playerIndex: खिलाड़ी का सूचकांक दर्शाने वाला एक पूर्णांक (1-आधारित सूचकांक)।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है, खिलाड़ी की प्रविष्टि के समय उसकी रैंक।\n\nउदाहरण:\nस्कोर [95, 92, 93, 100, 102, 99] और playerIndex 3 के लिए, फ़ंक्शन को 2 लौटाना चाहिए।",
      "hu": "Meghatározza egy játékos rangsorát a versenybe való belépésük idején.\n\nEbben a versenyben az eredményeket egymás után jelentik be, minden alkalommal frissítve a ranglistát.\nEz a függvény kiszámítja egy adott játékos rangját abban az időpontban, amikor felkerültek a ranglistára.\n\nBemenet:\n- $scores: Egész számokat tartalmazó tömb, amely az egyes játékosok pontszámait jelöli.\n- $playerIndex: Egész szám, amely a játékos indexét jelöli (1-alapú index).\n\nKimenet:\n- Egész számot ad vissza, a játékos rangját a belépésük idején.\n\nPélda:\nAz [95, 92, 93, 100, 102, 99] pontszámok és a playerIndex 3 esetén a függvénynek 2-t kell visszaadnia."
    },
    "docstring_bertscore": {
      "sq": "0.985311084692089",
      "hy": "0.9466099412512514",
      "bn": "0.9407483587069119",
      "bg": "0.9422907236156477",
      "zh": "0.9507460216755409",
      "fr": "0.9658069716871303",
      "de": "0.9819699230527011",
      "ha": "0.9535167168605965",
      "hi": "0.9506296242722544",
      "hu": "0.9819029846142924"
    }
  },
  {
    "task_id": "PHP/21",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Determines if two months in a given year are \"related\".\n * Two months are considered related if the first day of each month falls on the same day of the week.\n * This condition is true if the difference in days between the first day of these months is divisible by 7.\n * Leap years are taken into account, as February has 29 days in a leap year.\n *\n * Input: \n * - $year: An integer representing the year.\n * - $month1: An integer representing the first month.\n * - $month2: An integer representing the second month.\n *\n * Output: \n * - Returns 'YES' if the months are related; 'NO' otherwise.\n *\n * Examples:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "sq": "<?php\n\n\n/**\n * Përcakton nëse dy muaj në një vit të caktuar janë \"të lidhur\".\n * Dy muaj konsiderohen të lidhur nëse dita e parë e secilit muaj bie në të njëjtën ditë të javës.\n * Ky kusht është i vërtetë nëse diferenca në ditë midis ditës së parë të këtyre muajve është e pjestueshme me 7.\n * Vitet e brishtë merren parasysh, pasi Shkurti ka 29 ditë në një vit të brishtë.\n *\n * Hyrja: \n * - $year: Një numër i plotë që përfaqëson vitin.\n * - $month1: Një numër i plotë që përfaqëson muajin e parë.\n * - $month2: Një numër i plotë që përfaqëson muajin e dytë.\n *\n * Dalja: \n * - Kthen 'YES' nëse muajt janë të lidhur; 'NO' përndryshe.\n *\n * Shembuj:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hy": "<?php\n\n\n/**\n * Որոշում է՝ արդյոք տրված տարվա երկու ամիս \"կապակցվա՞ծ\" են։\n * Երկու ամիս համարվում են կապակցված, եթե յուրաքանչյուր ամսվա առաջին օրը շաբաթվա նույն օրն է։\n * Այս պայմանը ճիշտ է, եթե այս ամիսների առաջին օրվա միջև օրերի տարբերությունը բաժանվում է 7-ի։\n * Նահանջ տարիները հաշվի են առնվում, քանի որ փետրվարը նահանջ տարում ունի 29 օր։\n *\n * Մուտք: \n * - $year: Տարվա ներկայացնող ամբողջ թիվ։\n * - $month1: Առաջին ամսվա ներկայացնող ամբողջ թիվ։\n * - $month2: Երկրորդ ամսվա ներկայացնող ամբողջ թիվ։\n *\n * Ելք: \n * - Վերադարձնում է 'YES', եթե ամիսները կապակցված են; 'NO' հակառակ դեպքում։\n *\n * Օրինակներ:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "bn": "<?php\n\n\n/**\n * একটি প্রদত্ত বছরে দুটি মাস \"সম্পর্কিত\" কিনা তা নির্ধারণ করে।\n * দুটি মাসকে সম্পর্কিত মনে করা হয় যদি প্রতিটি মাসের প্রথম দিনটি সপ্তাহের একই দিনে পড়ে।\n * এই শর্তটি সত্য হয় যদি এই মাসগুলির প্রথম দিনের মধ্যে দিনের পার্থক্য 7 দ্বারা বিভাজ্য হয়।\n * অধিবর্ষের বছরগুলিকে বিবেচনায় নেওয়া হয়, কারণ অধিবর্ষে ফেব্রুয়ারি মাসে 29 দিন থাকে।\n *\n * ইনপুট: \n * - $year: একটি পূর্ণসংখ্যা যা বছরকে উপস্থাপন করে।\n * - $month1: একটি পূর্ণসংখ্যা যা প্রথম মাসকে উপস্থাপন করে।\n * - $month2: একটি পূর্ণসংখ্যা যা দ্বিতীয় মাসকে উপস্থাপন করে।\n *\n * আউটপুট: \n * - মাসগুলি সম্পর্কিত হলে 'YES' ফেরত দেয়; অন্যথায় 'NO'।\n *\n * উদাহরণ:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "bg": "<?php\n\n\n/**\n * Определя дали два месеца в дадена година са \"свързани\".\n * Два месеца се считат за свързани, ако първият ден на всеки месец се пада на същия ден от седмицата.\n * Това условие е изпълнено, ако разликата в дните между първия ден на тези месеци е делима на 7.\n * Високосните години се вземат предвид, тъй като февруари има 29 дни във високосна година.\n *\n * Вход: \n * - $year: Цяло число, представляващо годината.\n * - $month1: Цяло число, представляващо първия месец.\n * - $month2: Цяло число, представляващо втория месец.\n *\n * Изход: \n * - Връща 'YES', ако месеците са свързани; 'NO' в противен случай.\n *\n * Примери:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "zh": "<?php\n\n\n/**\n * 确定给定年份中的两个月是否“相关”。\n * 如果每个月的第一天是同一星期几，则认为这两个月是相关的。\n * 如果这些月份的第一天之间的天数差可以被7整除，则此条件为真。\n * 闰年会被考虑在内，因为闰年的二月有29天。\n *\n * 输入: \n * - $year: 表示年份的整数。\n * - $month1: 表示第一个月份的整数。\n * - $month2: 表示第二个月份的整数。\n *\n * 输出: \n * - 如果月份相关，则返回 'YES'；否则返回 'NO'。\n *\n * 示例:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "fr": "<?php\n\n\n/**\n * Détermine si deux mois d'une année donnée sont \"liés\".\n * Deux mois sont considérés comme liés si le premier jour de chaque mois tombe le même jour de la semaine.\n * Cette condition est vraie si la différence en jours entre le premier jour de ces mois est divisible par 7.\n * Les années bissextiles sont prises en compte, car février a 29 jours dans une année bissextile.\n *\n * Entrée : \n * - $year : Un entier représentant l'année.\n * - $month1 : Un entier représentant le premier mois.\n * - $month2 : Un entier représentant le second mois.\n *\n * Sortie : \n * - Retourne 'YES' si les mois sont liés ; 'NO' sinon.\n *\n * Exemples :\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "de": "<?php\n\n\n/**\n * Bestimmt, ob zwei Monate in einem gegebenen Jahr \"verwandt\" sind.\n * Zwei Monate gelten als verwandt, wenn der erste Tag jedes Monats auf denselben Wochentag fällt.\n * Diese Bedingung ist erfüllt, wenn der Unterschied in Tagen zwischen dem ersten Tag dieser Monate durch 7 teilbar ist.\n * Schaltjahre werden berücksichtigt, da der Februar in einem Schaltjahr 29 Tage hat.\n *\n * Eingabe: \n * - $year: Eine ganze Zahl, die das Jahr darstellt.\n * - $month1: Eine ganze Zahl, die den ersten Monat darstellt.\n * - $month2: Eine ganze Zahl, die den zweiten Monat darstellt.\n *\n * Ausgabe: \n * - Gibt 'YES' zurück, wenn die Monate verwandt sind; andernfalls 'NO'.\n *\n * Beispiele:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "ha": "<?php\n\n\n/**\n * Yana tantancewa idan watanni biyu a cikin shekara da aka bayar suna da \"dangantaka\".\n * Ana ɗaukar watanni biyu suna da dangantaka idan ranar farko ta kowanne wata ta faɗi a rana ɗaya na mako.\n * Wannan yanayin gaskiya ne idan bambancin kwanaki tsakanin ranar farko ta waɗannan watanni ana iya rabawa da 7.\n * Shekaru masu ƙabari ana la'akari da su, kamar yadda Fabrairu ke da kwanaki 29 a shekara mai ƙabari.\n *\n * Shigarwa: \n * - $year: Lamba mai nuna shekarar.\n * - $month1: Lamba mai nuna wata na farko.\n * - $month2: Lamba mai nuna wata na biyu.\n *\n * Fitarwa: \n * - Yana dawo da 'YES' idan watannin suna da dangantaka; 'NO' in ba haka ba.\n *\n * Misalai:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hi": "<?php\n\n\n/**\n * निर्धारित करता है कि दिए गए वर्ष में दो महीने \"संबंधित\" हैं या नहीं।\n * दो महीने संबंधित माने जाते हैं यदि प्रत्येक महीने का पहला दिन सप्ताह के उसी दिन पर पड़ता है।\n * यह स्थिति सत्य होती है यदि इन महीनों के पहले दिन के बीच का दिन का अंतर 7 से विभाज्य होता है।\n * लीप वर्षों को ध्यान में रखा जाता है, क्योंकि लीप वर्ष में फरवरी में 29 दिन होते हैं।\n *\n * इनपुट: \n * - $year: एक पूर्णांक जो वर्ष का प्रतिनिधित्व करता है।\n * - $month1: एक पूर्णांक जो पहले महीने का प्रतिनिधित्व करता है।\n * - $month2: एक पूर्णांक जो दूसरे महीने का प्रतिनिधित्व करता है।\n *\n * आउटपुट: \n * - 'YES' लौटाता है यदि महीने संबंधित हैं; अन्यथा 'NO'।\n *\n * उदाहरण:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string ",
      "hu": "<?php\n\n\n/**\n * Meghatározza, hogy egy adott év két hónapja \"kapcsolódik-e\" egymáshoz.\n * Két hónap akkor tekinthető kapcsolódónak, ha az adott hónapok első napja ugyanarra a hét napjára esik.\n * Ez a feltétel akkor igaz, ha az adott hónapok első napja közötti napok különbsége osztható 7-tel.\n * A szökőéveket figyelembe vesszük, mivel februárban 29 nap van szökőévben.\n *\n * Bemenet: \n * - $year: Egy egész szám, amely az évet jelöli.\n * - $month1: Egy egész szám, amely az első hónapot jelöli.\n * - $month2: Egy egész szám, amely a második hónapot jelöli.\n *\n * Kimenet: \n * - 'YES'-t ad vissza, ha a hónapok kapcsolódnak; különben 'NO'-t.\n *\n * Példák:\n * - areRelatedMonths(1994, 10, 9) -> 'NO'\n * - areRelatedMonths(1948, 1, 4) -> 'YES'\n */\nfunction areRelatedMonths($year, $month1, $month2): string "
    },
    "prompt_bertscore": {
      "sq": "1",
      "hy": "0.9877886014347371",
      "bn": "0.9930550873574961",
      "bg": "0.9908580367128693",
      "zh": "0.9817119021877369",
      "fr": "0.998724594323375",
      "de": "0.9736050018161789",
      "ha": "1",
      "hi": "0.992638162187704",
      "hu": "0.9779522263355085"
    },
    "canonical_solution": "{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}",
    "instruction": {
      "en": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nপিএইচপি কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nBa da takaitaccen bayanin yanayi (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function areRelatedMonths($year, $month1, $month2): string\n{\n    // Check for leap year\n    $isLeapYear = ($year % 4 == 0) && ($year % 100 != 0 || $year % 400 == 0);\n\n    // Days in each month\n    $daysInMonth = [31, $isLeapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    // Calculate the day of the year for the first day of each month\n    $dayOfYear1 = array_sum(array_slice($daysInMonth, 0, $month1 - 1));\n    $dayOfYear2 = array_sum(array_slice($daysInMonth, 0, $month2 - 1));\n\n    // Check if the difference in days is divisible by 7\n    return abs($dayOfYear1 - $dayOfYear2) % 7 == 0 ? 'YES' : 'NO';\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9195475449871531",
      "bn": "0.8850309477835774",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8899116935063667",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(areRelatedMonths(1994, 10, 9) === 'NO');\n    assert(areRelatedMonths(1935, 12, 1) === 'NO');\n    assert(areRelatedMonths(1957, 1, 9) === 'NO');\n    assert(areRelatedMonths(1917, 9, 12) === 'YES');\n    assert(areRelatedMonths(1948, 1, 4) === 'YES');\n    \n}\n\nmain();\n?>",
    "entry_point": "areRelatedMonths",
    "signature": "function areRelatedMonths($year, $month1, $month2): string",
    "docstring": {
      "en": "Determines if two months in a given year are \"related\".\nTwo months are considered related if the first day of each month falls on the same day of the week.\nThis condition is true if the difference in days between the first day of these months is divisible by 7.\nLeap years are taken into account, as February has 29 days in a leap year.\n\nInput:\n- $year: An integer representing the year.\n- $month1: An integer representing the first month.\n- $month2: An integer representing the second month.\n\nOutput:\n- Returns 'YES' if the months are related; 'NO' otherwise.\n\nExamples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "sq": "Përcakton nëse dy muaj në një vit të caktuar janë \"të lidhur\".\nDy muaj konsiderohen të lidhur nëse dita e parë e secilit muaj bie në të njëjtën ditë të javës.\nKjo kusht është e vërtetë nëse diferenca në ditë midis ditës së parë të këtyre muajve është e pjesëtueshme me 7.\nVitet e brishtë merren parasysh, pasi shkurti ka 29 ditë në një vit të brishtë.\n\nInput:\n- $year: Një numër i plotë që përfaqëson vitin.\n- $month1: Një numër i plotë që përfaqëson muajin e parë.\n- $month2: Një numër i plotë që përfaqëson muajin e dytë.\n\nOutput:\n- Kthen 'YES' nëse muajt janë të lidhur; 'NO' përndryshe.\n\nShembuj:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hy": "Սահմանում է՝ արդյոք տրված տարվա երկու ամիսները \"կապված\" են։\nԵրկու ամիսները համարվում են կապված, եթե յուրաքանչյուր ամսվա առաջին օրը շաբաթվա նույն օրն է։\nԱյս պայմանը ճիշտ է, եթե այդ ամիսների առաջին օրվա միջև օրերի տարբերությունը բաժանվում է 7-ի։\nՆահանջ տարիները հաշվի են առնվում, քանի որ փետրվարը նահանջ տարում ունի 29 օր։\n\nՄուտք:\n- $year: Թիվ, որը ներկայացնում է տարին։\n- $month1: Թիվ, որը ներկայացնում է առաջին ամիսը։\n- $month2: Թիվ, որը ներկայացնում է երկրորդ ամիսը։\n\nԵլք:\n- Վերադարձնում է 'YES', եթե ամիսները կապված են; 'NO' հակառակ դեպքում։\n\nՕրինակներ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bn": "নির্ধারণ করে একটি প্রদত্ত বছরে দুটি মাস \"সম্পর্কিত\" কিনা।\nদুটি মাসকে সম্পর্কিত মনে করা হয় যদি প্রতিটি মাসের প্রথম দিনটি সপ্তাহের একই দিনে পড়ে।\nএই শর্তটি সত্য হয় যদি এই মাসগুলির প্রথম দিনের মধ্যে দিনের পার্থক্য ৭ দ্বারা বিভাজ্য হয়।\nঅধিবর্ষ বিবেচনায় নেওয়া হয়, কারণ অধিবর্ষে ফেব্রুয়ারি মাসে ২৯ দিন থাকে।\n\nইনপুট:\n- $year: একটি পূর্ণসংখ্যা যা বছরকে উপস্থাপন করে।\n- $month1: একটি পূর্ণসংখ্যা যা প্রথম মাসকে উপস্থাপন করে।\n- $month2: একটি পূর্ণসংখ্যা যা দ্বিতীয় মাসকে উপস্থাপন করে।\n\nআউটপুট:\n- মাসগুলি সম্পর্কিত হলে 'YES' ফেরত দেয়; অন্যথায় 'NO'।\n\nউদাহরণ:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "bg": "Определя дали два месеца в дадена година са \"свързани\".\nДва месеца се считат за свързани, ако първият ден на всеки месец се пада на същия ден от седмицата.\nТова условие е изпълнено, ако разликата в дните между първия ден на тези месеци е делима на 7.\nВисокосните години се вземат предвид, тъй като февруари има 29 дни във високосна година.\n\nВход:\n- $year: Цяло число, представляващо годината.\n- $month1: Цяло число, представляващо първия месец.\n- $month2: Цяло число, представляващо втория месец.\n\nИзход:\n- Връща 'YES', ако месеците са свързани; 'NO' в противен случай.\n\nПримери:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "zh": "确定给定年份中的两个月是否“相关”。\n如果每个月的第一天是同一星期几，则认为这两个月是相关的。\n如果这些月份的第一天之间的天数差可以被7整除，则此条件为真。\n闰年被考虑在内，因为在闰年二月有29天。\n\n输入：\n- $year: 表示年份的整数。\n- $month1: 表示第一个月份的整数。\n- $month2: 表示第二个月份的整数。\n\n输出：\n- 如果月份相关，则返回 'YES'；否则返回 'NO'。\n\n例子：\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "fr": "Détermine si deux mois d'une année donnée sont \"liés\".\nDeux mois sont considérés comme liés si le premier jour de chaque mois tombe le même jour de la semaine.\nCette condition est vraie si la différence en jours entre le premier jour de ces mois est divisible par 7.\nLes années bissextiles sont prises en compte, car février a 29 jours dans une année bissextile.\n\nEntrée:\n- $year: Un entier représentant l'année.\n- $month1: Un entier représentant le premier mois.\n- $month2: Un entier représentant le deuxième mois.\n\nSortie:\n- Renvoie 'YES' si les mois sont liés ; 'NO' sinon.\n\nExemples:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "de": "Bestimmt, ob zwei Monate in einem gegebenen Jahr \"verwandt\" sind.  \nZwei Monate gelten als verwandt, wenn der erste Tag jedes Monats auf denselben Wochentag fällt.  \nDiese Bedingung ist erfüllt, wenn der Unterschied in Tagen zwischen dem ersten Tag dieser Monate durch 7 teilbar ist.  \nSchaltjahre werden berücksichtigt, da der Februar in einem Schaltjahr 29 Tage hat.\n\nEingabe:  \n- $year: Eine ganze Zahl, die das Jahr darstellt.  \n- $month1: Eine ganze Zahl, die den ersten Monat darstellt.  \n- $month2: Eine ganze Zahl, die den zweiten Monat darstellt.  \n\nAusgabe:  \n- Gibt 'YES' zurück, wenn die Monate verwandt sind; 'NO' andernfalls.\n\nBeispiele:  \n- areRelatedMonths(1994, 10, 9) -> 'NO'  \n- areRelatedMonths(1948, 1, 4) -> 'YES'  ",
      "ha": "Yana tantancewa idan watanni biyu a cikin shekara daya suna da \"dangantaka\".\nAna ɗaukar watanni biyu a matsayin masu alaƙa idan ranar farko ta kowanne wata ta faɗi a rana ɗaya na mako.  \nWannan yanayin yana daidai idan bambancin kwanaki tsakanin ranar farko ta waɗannan watanni ana iya rabawa da 7.  \nAna la'akari da shekarun ƙabis, saboda watan Fabrairu yana da kwanaki 29 a shekarar ƙabis.\n\nInput:  \n- $year: Lamba mai nuna shekarar.  \n- $month1: Lamba mai nuna wata na farko.  \n- $month2: Lamba mai nuna wata na biyu.  \n\nOutput:  \n- Yana dawowa 'YES' idan watannin suna da alaƙa; 'NO' in ba haka ba.\n\nMisalai:  \n- areRelatedMonths(1994, 10, 9) -> 'NO'  \n- areRelatedMonths(1948, 1, 4) -> 'YES'  ",
      "hi": "यह निर्धारित करता है कि दिए गए वर्ष में दो महीने \"संबंधित\" हैं या नहीं।  \nदो महीने तब संबंधित माने जाते हैं जब प्रत्येक महीने का पहला दिन सप्ताह के एक ही दिन पर पड़ता है।  \nयह स्थिति तब सही होती है जब इन महीनों के पहले दिन के बीच का दिन का अंतर 7 से विभाज्य होता है।  \nलीप वर्षों को ध्यान में रखा जाता है, क्योंकि लीप वर्ष में फरवरी में 29 दिन होते हैं।\n\nइनपुट:\n- $year: वर्ष को दर्शाने वाला एक पूर्णांक।\n- $month1: पहले महीने को दर्शाने वाला एक पूर्णांक।\n- $month2: दूसरे महीने को दर्शाने वाला एक पूर्णांक।\n\nआउटपुट:\n- यदि महीने संबंधित हैं तो 'YES' लौटाता है; अन्यथा 'NO'।\n\nउदाहरण:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'",
      "hu": "Meghatározza, hogy két hónap egy adott évben \"kapcsolódik\"-e.\nKét hónap akkor tekinthető kapcsolódónak, ha mindkét hónap első napja a hét ugyanazon napjára esik.\nEz a feltétel igaz, ha a hónapok első napja közötti napok különbsége osztható 7-tel.\nA szökőéveket figyelembe vesszük, mivel februárnak 29 napja van szökőévben.\n\nBemenet:\n- $year: Egy egész szám, amely az évet jelöli.\n- $month1: Egy egész szám, amely az első hónapot jelöli.\n- $month2: Egy egész szám, amely a második hónapot jelöli.\n\nKimenet:\n- 'YES'-t ad vissza, ha a hónapok kapcsolódnak; 'NO'-t egyébként.\n\nPéldák:\n- areRelatedMonths(1994, 10, 9) -> 'NO'\n- areRelatedMonths(1948, 1, 4) -> 'YES'"
    },
    "docstring_bertscore": {
      "sq": "0.9993528622185883",
      "hy": "0.9902484400734732",
      "bn": "0.981456860778488",
      "bg": "0.9938414650360133",
      "zh": "0.9819818408755632",
      "fr": "0.9909972766099747",
      "de": "0.9688293315649571",
      "ha": "0.9673616516794903",
      "hi": "0.999999801369619",
      "hu": "0.9723506509599436"
    }
  },
  {
    "task_id": "PHP/22",
    "prompt": {
      "en": "<?php\n/**\n    * Converts a number from one base to another.\n    * The function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\n    * The bases can range from 2 to 36.\n    * The number is assumed to be a string to accommodate larger bases and values.\n    * Characters in the number may include 0-9 and A-Z, representing values 0 through 35.\n    * Input: A string representing the number, an integer for the current base, and an integer for the target base.\n    * Output: The number converted to the target base as a string.\n    * Example: convertBase(\"123AB\", 16, 10) returns \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "sq": "<?php\n/**\n    * Konverton një numër nga një bazë në një tjetër.\n    * Funksioni pranon tre parametra: numrin për të konvertuar, bazën në të cilën është aktualisht, dhe bazën në të cilën do të konvertohet.\n    * Bazat mund të variojnë nga 2 deri në 36.\n    * Numri supozohet të jetë një varg për të akomoduar baza dhe vlera më të mëdha.\n    * Karakteret në numër mund të përfshijnë 0-9 dhe A-Z, që përfaqësojnë vlerat nga 0 deri në 35.\n    * Input: Një varg që përfaqëson numrin, një numër i plotë për bazën aktuale, dhe një numër i plotë për bazën e synuar.\n    * Output: Numri i konvertuar në bazën e synuar si një varg.\n    * Shembull: convertBase(\"123AB\", 16, 10) kthen \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hy": "<?php\n/**\n    * Թվին փոխակերպում է մի հիմքից մյուսը:\n    * Ֆունկցիան ընդունում է երեք պարամետր՝ փոխակերպվող թիվը, հիմքը, որում այն ներկայումս գտնվում է, և հիմքը, որին պետք է փոխակերպել:\n    * Հիմքերը կարող են լինել 2-ից 36:\n    * Թիվը ենթադրվում է, որ տող է՝ ավելի մեծ հիմքեր և արժեքներ տեղավորելու համար:\n    * Թվի մեջ կարող են լինել 0-9 և A-Z սիմվոլներ, որոնք ներկայացնում են արժեքներ 0-ից մինչև 35:\n    * Մուտք: Տող, որը ներկայացնում է թիվը, ամբողջ թիվ՝ ներկայիս հիմքի համար, և ամբողջ թիվ՝ նպատակային հիմքի համար:\n    * Ելք: Թիվը, փոխակերպված նպատակային հիմքին որպես տող:\n    * Օրինակ: convertBase(\"123AB\", 16, 10) վերադարձնում է \"74667\":\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "bn": "<?php\n/**\n    * একটি সংখ্যা এক ভিত্তি থেকে অন্য ভিত্তিতে রূপান্তর করে।\n    * ফাংশনটি তিনটি প্যারামিটার গ্রহণ করে: রূপান্তর করার সংখ্যা, এটি বর্তমানে যে ভিত্তিতে আছে, এবং যে ভিত্তিতে এটি রূপান্তর করতে হবে।\n    * ভিত্তিগুলি 2 থেকে 36 পর্যন্ত হতে পারে।\n    * সংখ্যাটি একটি স্ট্রিং হিসাবে ধরা হয় যাতে বড় ভিত্তি এবং মানগুলি সামঞ্জস্য করা যায়।\n    * সংখ্যার মধ্যে অক্ষরগুলি 0-9 এবং A-Z অন্তর্ভুক্ত থাকতে পারে, যা 0 থেকে 35 পর্যন্ত মান উপস্থাপন করে।\n    * ইনপুট: সংখ্যাটি উপস্থাপনকারী একটি স্ট্রিং, বর্তমান ভিত্তির জন্য একটি পূর্ণসংখ্যা, এবং লক্ষ্য ভিত্তির জন্য একটি পূর্ণসংখ্যা।\n    * আউটপুট: লক্ষ্য ভিত্তিতে রূপান্তরিত সংখ্যা একটি স্ট্রিং হিসাবে।\n    * উদাহরণ: convertBase(\"123AB\", 16, 10) \"74667\" রিটার্ন করে।\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "bg": "<?php\n/**\n    * Преобразува число от една база в друга.\n    * Функцията приема три параметъра: числото за преобразуване, базата, в която се намира в момента, и базата, в която да се преобразува.\n    * Базите могат да варират от 2 до 36.\n    * Предполага се, че числото е низ, за да се поберат по-големи бази и стойности.\n    * Знаците в числото могат да включват 0-9 и A-Z, представляващи стойности от 0 до 35.\n    * Вход: Низ, представляващ числото, цяло число за текущата база и цяло число за целевата база.\n    * Изход: Числото, преобразувано в целевата база като низ.\n    * Пример: convertBase(\"123AB\", 16, 10) връща \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "zh": "<?php\n/**\n    * 将一个数字从一个进制转换为另一个进制。\n    * 该函数接受三个参数：要转换的数字、当前的进制和要转换到的进制。\n    * 进制可以在2到36之间。\n    * 假设数字是一个字符串以适应更大的进制和数值。\n    * 数字中的字符可以包括0-9和A-Z，表示值0到35。\n    * 输入：表示数字的字符串、当前进制的整数和目标进制的整数。\n    * 输出：转换为目标进制的数字作为字符串。\n    * 示例：convertBase(\"123AB\", 16, 10) 返回 \"74667\"。\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "fr": "<?php\n/**\n    * Convertit un nombre d'une base à une autre.\n    * La fonction accepte trois paramètres : le nombre à convertir, la base dans laquelle il se trouve actuellement, et la base vers laquelle le convertir.\n    * Les bases peuvent varier de 2 à 36.\n    * Le nombre est supposé être une chaîne de caractères pour accommoder des bases et des valeurs plus grandes.\n    * Les caractères dans le nombre peuvent inclure 0-9 et A-Z, représentant les valeurs de 0 à 35.\n    * Entrée : Une chaîne de caractères représentant le nombre, un entier pour la base actuelle, et un entier pour la base cible.\n    * Sortie : Le nombre converti à la base cible sous forme de chaîne de caractères.\n    * Exemple : convertBase(\"123AB\", 16, 10) retourne \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "de": "<?php\n/**\n    * Konvertiert eine Zahl von einer Basis in eine andere.\n    * Die Funktion akzeptiert drei Parameter: die zu konvertierende Zahl, die Basis, in der sie sich derzeit befindet, und die Basis, in die sie konvertiert werden soll.\n    * Die Basen können von 2 bis 36 reichen.\n    * Es wird angenommen, dass die Zahl ein String ist, um größere Basen und Werte zu unterstützen.\n    * Zeichen in der Zahl können 0-9 und A-Z umfassen, die Werte von 0 bis 35 darstellen.\n    * Eingabe: Ein String, der die Zahl darstellt, ein Integer für die aktuelle Basis und ein Integer für die Zielbasis.\n    * Ausgabe: Die Zahl, konvertiert in die Zielbasis als String.\n    * Beispiel: convertBase(\"123AB\", 16, 10) gibt \"74667\" zurück.\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "ha": "<?php\n/**\n    * Yana canza lamba daga wata tushe zuwa wata.\n    * Aiki yana karɓar abubuwa uku: lambar da za a canza, tushen da take ciki a halin yanzu, da tushen da za a canza ta zuwa.\n    * Tushen na iya zama daga 2 zuwa 36.\n    * Ana ɗauka lambar a matsayin kirtani don ɗaukar manyan tushe da ƙimomi.\n    * Haruffa a cikin lambar na iya haɗawa da 0-9 da A-Z, suna wakiltar ƙimomi daga 0 zuwa 35.\n    * Shigarwa: Kirtani da ke wakiltar lambar, cikakken lamba don tushen yanzu, da cikakken lamba don tushen da ake nufi.\n    * Fitarwa: Lambar da aka canza zuwa tushen da ake nufi a matsayin kirtani.\n    * Misali: convertBase(\"123AB\", 16, 10) yana dawo da \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hi": "<?php\n/**\n    * एक संख्या को एक आधार से दूसरे आधार में परिवर्तित करता है।\n    * यह फ़ंक्शन तीन पैरामीटर स्वीकार करता है: परिवर्तित करने के लिए संख्या, वह आधार जिसमें यह वर्तमान में है, और वह आधार जिसमें इसे परिवर्तित करना है।\n    * आधार 2 से 36 तक हो सकते हैं।\n    * संख्या को एक स्ट्रिंग माना जाता है ताकि बड़े आधार और मानों को समायोजित किया जा सके।\n    * संख्या में वर्ण 0-9 और A-Z शामिल हो सकते हैं, जो 0 से 35 तक के मानों का प्रतिनिधित्व करते हैं।\n    * इनपुट: संख्या का प्रतिनिधित्व करने वाली एक स्ट्रिंग, वर्तमान आधार के लिए एक पूर्णांक, और लक्ष्य आधार के लिए एक पूर्णांक।\n    * आउटपुट: लक्ष्य आधार में परिवर्तित संख्या एक स्ट्रिंग के रूप में।\n    * उदाहरण: convertBase(\"123AB\", 16, 10) \"74667\" लौटाता है।\n*/\n\nfunction convertBase($number, $fromBase, $toBase) ",
      "hu": "<?php\n/**\n    * Átalakít egy számot egyik számrendszerből a másikba.\n    * A függvény három paramétert fogad el: az átalakítandó számot, a jelenlegi számrendszerét, és a cél számrendszert.\n    * A számrendszerek 2-től 36-ig terjedhetnek.\n    * A számot feltételezzük, hogy egy karakterlánc, hogy nagyobb számrendszereket és értékeket is kezelni lehessen.\n    * A szám karakterei tartalmazhatják a 0-9 és A-Z karaktereket, amelyek a 0-tól 35-ig terjedő értékeket képviselik.\n    * Bemenet: Egy karakterlánc, amely a számot képviseli, egy egész szám a jelenlegi számrendszerhez, és egy egész szám a cél számrendszerhez.\n    * Kimenet: A szám, amely a cél számrendszerbe lett átalakítva, mint karakterlánc.\n    * Példa: convertBase(\"123AB\", 16, 10) visszaadja \"74667\".\n*/\n\nfunction convertBase($number, $fromBase, $toBase) "
    },
    "prompt_bertscore": {
      "sq": "0.975649504328171",
      "hy": "0.9548960062265027",
      "bn": "0.9711636358028791",
      "bg": "0.9845394056617685",
      "zh": "0.9604681843056745",
      "fr": "0.9744050849909874",
      "de": "0.9709147519354424",
      "ha": "0.9866848124073263",
      "hi": "0.9633894413195546",
      "hu": "0.9065642687611886"
    },
    "canonical_solution": "{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}",
    "instruction": {
      "en": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nՏվեք կարճ բնութագիր (docstring) PHP կոդի մասին հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nBa da takaitaccen bayani a cikin harshen Hausa game da lambar PHP ta amfani da haruffa 500 kacal.",
      "hi": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function convertBase($number, $fromBase, $toBase)\n{\n    // Check if the bases are within the valid range\n    if ($fromBase < 2 || $fromBase > 36 || $toBase < 2 || $toBase > 36) {\n        return \"Invalid base. Bases must be between 2 and 36.\";\n    }\n\n    // Convert the number from the original base to base 10\n    $decValue = base_convert($number, $fromBase, 10);\n\n    // Convert the base 10 number to the target base\n\n    return strtoupper(base_convert($decValue, 10, $toBase));\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9361854215937784",
      "hy": "0.8956713786652353",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.846678400661456",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(convertBase('2345678A123', 18, 18) === '2345678A123');\n    assert(convertBase('23456', 15, 18) === '114E0');\n    assert(convertBase('2345678', 12, 20) === '22B7A4');\n    assert(convertBase('12345678', 16, 23) === '21A976L');\n    assert(convertBase('3456AB', 25, 21) === '7C2136');\n    assert(convertBase('AB1234567', 18, 22) === '22JF0G367');\n    \n}\n\nmain();\n?>",
    "entry_point": "convertBase",
    "signature": "function convertBase($number, $fromBase, $toBase)",
    "docstring": {
      "en": "Converts a number from one base to another.\nThe function accepts three parameters: the number to convert, the base it's currently in, and the base to convert it to.\nThe bases can range from 2 to 36.\nThe number is assumed to be a string to accommodate larger bases and values.\nCharacters in the number may include 0-9 and A-Z, representing values 0 through 35.\nInput: A string representing the number, an integer for the current base, and an integer for the target base.\nOutput: The number converted to the target base as a string.\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".",
      "sq": "Konverton një numër nga një bazë në një tjetër.  \nFunksioni pranon tre parametra: numrin për të konvertuar, bazën në të cilën ndodhet aktualisht dhe bazën në të cilën do të konvertohet.  \nBazat mund të variojnë nga 2 deri në 36.  \nNumri supozohet të jetë një varg për të akomoduar baza dhe vlera më të mëdha.  \nKarakteret në numër mund të përfshijnë 0-9 dhe A-Z, duke përfaqësuar vlerat 0 deri në 35.  \n\nArgs:  \n    numri: Një varg që përfaqëson numrin.  \n    baza_aktuale: Një numër i plotë për bazën aktuale.  \n    baza_objektive: Një numër i plotë për bazën objektive.  \n\nReturns:  \n    Numri i konvertuar në bazën objektive si një varg.  \n\nExample:  \n    convertBase(\"123AB\", 16, 10) kthen \"74667\".",
      "hy": "Վերածում է թիվը մեկ հիմքից մյուսին:  \nՖունկցիան ընդունում է երեք պարամետր՝ փոխարկվող թիվը, հիմքը, որում այն ներկայումս գտնվում է, և հիմքը, որին պետք է փոխարկել:  \nՀիմքերը կարող են տատանվել 2-ից մինչև 36:  \nԹիվը ենթադրվում է, որ տող է՝ ավելի մեծ հիմքեր և արժեքներ տեղավորելու համար:  \nԹվի մեջ գտնվող սիմվոլները կարող են ներառել 0-9 և A-Z, որոնք ներկայացնում են արժեքներ 0-ից մինչև 35:  \nՄուտք: Տող, որը ներկայացնում է թիվը, ամբողջ թիվ՝ ընթացիկ հիմքի համար, և ամբողջ թիվ՝ նպատակային հիմքի համար:  \nԵլք: Թիվը, որը փոխարկված է նպատակային հիմքին որպես տող:  \nՕրինակ: convertBase(\"123AB\", 16, 10) վերադարձնում է \"74667\":",
      "bn": "একটি সংখ্যাকে এক ভিত্তি থেকে অন্য ভিত্তিতে রূপান্তর করে। \nফাংশনটি তিনটি প্যারামিটার গ্রহণ করে: রূপান্তর করার সংখ্যা, এটি বর্তমানে যে ভিত্তিতে আছে, এবং যে ভিত্তিতে এটি রূপান্তর করতে হবে। \nভিত্তিগুলি 2 থেকে 36 পর্যন্ত হতে পারে। \nসংখ্যাটি একটি স্ট্রিং হিসেবে ধরা হয় যাতে বড় ভিত্তি এবং মানগুলিকে সামঞ্জস্য করা যায়। \nসংখ্যার অক্ষরগুলিতে 0-9 এবং A-Z অন্তর্ভুক্ত থাকতে পারে, যা 0 থেকে 35 পর্যন্ত মান উপস্থাপন করে। \nইনপুট: সংখ্যাকে উপস্থাপনকারী একটি স্ট্রিং, বর্তমান ভিত্তির জন্য একটি পূর্ণসংখ্যা, এবং লক্ষ্য ভিত্তির জন্য একটি পূর্ণসংখ্যা। \nআউটপুট: লক্ষ্য ভিত্তিতে রূপান্তরিত সংখ্যা একটি স্ট্রিং হিসেবে। \nউদাহরণ: convertBase(\"123AB\", 16, 10) \"74667\" রিটার্ন করে।",
      "bg": "Преобразува число от една база в друга.  \nФункцията приема три параметъра: числото, което да се преобразува, базата, в която се намира в момента, и базата, в която да се преобразува.  \nБазите могат да варират от 2 до 36.  \nПредполага се, че числото е низ, за да се приспособят по-големи бази и стойности.  \nСимволите в числото могат да включват 0-9 и A-Z, представляващи стойности от 0 до 35.  \nВход: Низ, представляващ числото, цяло число за текущата база и цяло число за целевата база.  \nИзход: Числото, преобразувано в целевата база като низ.  \nПример: convertBase(\"123AB\", 16, 10) връща \"74667\".",
      "zh": "将一个数字从一个进制转换为另一个进制。  \n该函数接受三个参数：要转换的数字、它当前所在的进制以及要转换到的进制。  \n进制可以从2到36。  \n假设数字是一个字符串，以适应更大的进制和数值。  \n数字中的字符可以包括0-9和A-Z，表示值0到35。  \n输入：一个表示数字的字符串，一个表示当前进制的整数，以及一个表示目标进制的整数。  \n输出：转换为目标进制的数字，作为字符串。  \n示例：convertBase(\"123AB\", 16, 10) 返回 \"74667\"。",
      "fr": "Convertit un nombre d'une base à une autre.\nLa fonction accepte trois paramètres : le nombre à convertir, la base dans laquelle il se trouve actuellement, et la base vers laquelle le convertir.\nLes bases peuvent aller de 2 à 36.\nLe nombre est supposé être une chaîne de caractères pour accommoder des bases et des valeurs plus grandes.\nLes caractères dans le nombre peuvent inclure 0-9 et A-Z, représentant les valeurs de 0 à 35.\nEntrée : Une chaîne de caractères représentant le nombre, un entier pour la base actuelle, et un entier pour la base cible.\nSortie : Le nombre converti dans la base cible sous forme de chaîne de caractères.\nExemple : convertBase(\"123AB\", 16, 10) retourne \"74667\".",
      "de": "Konvertiert eine Zahl von einer Basis in eine andere.\nDie Funktion akzeptiert drei Parameter: die zu konvertierende Zahl, die Basis, in der sie sich derzeit befindet, und die Basis, in die sie konvertiert werden soll.\nDie Basen können von 2 bis 36 reichen.\nEs wird angenommen, dass die Zahl ein String ist, um größere Basen und Werte zu berücksichtigen.\nZeichen in der Zahl können 0-9 und A-Z umfassen, die Werte von 0 bis 35 darstellen.\nEingabe: Ein String, der die Zahl darstellt, ein Integer für die aktuelle Basis und ein Integer für die Zielbasis.\nAusgabe: Die Zahl, konvertiert in die Zielbasis als String.\nBeispiel: convertBase(\"123AB\", 16, 10) gibt \"74667\" zurück.",
      "ha": "Canza lamba daga wata tushe zuwa wata.\n\nAikin yana karɓar abubuwa guda uku: lambar da za a canza, tushen da yake ciki a halin yanzu, da tushen da za a canza shi zuwa.\n\nTushen na iya zama daga 2 zuwa 36.\n\nAna ɗaukar lambar a matsayin kirtani don dacewa da manyan tushe da ƙima.\n\nHaruffa a cikin lambar na iya haɗawa da 0-9 da A-Z, suna wakiltar ƙima daga 0 zuwa 35.\n\nInput: Kirtani da ke wakiltar lambar, cikakken lamba don tushen yanzu, da cikakken lamba don tushen da ake nufi.\n\nOutput: Lambar da aka canza zuwa tushen da ake nufi a matsayin kirtani.\n\nExample: convertBase(\"123AB\", 16, 10) returns \"74667\".",
      "hi": "एक संख्या को एक आधार से दूसरे आधार में परिवर्तित करता है।\nयह फ़ंक्शन तीन पैरामीटर स्वीकार करता है: परिवर्तित करने के लिए संख्या, वह आधार जिसमें यह वर्तमान में है, और वह आधार जिसमें इसे परिवर्तित करना है।\nआधार 2 से 36 तक हो सकते हैं।\nसंख्या को एक स्ट्रिंग माना जाता है ताकि बड़े आधार और मान समायोजित हो सकें।\nसंख्या में वर्णों में 0-9 और A-Z शामिल हो सकते हैं, जो 0 से 35 तक के मान का प्रतिनिधित्व करते हैं।\nइनपुट: संख्या का प्रतिनिधित्व करने वाली एक स्ट्रिंग, वर्तमान आधार के लिए एक पूर्णांक, और लक्ष्य आधार के लिए एक पूर्णांक।\nआउटपुट: लक्ष्य आधार में परिवर्तित संख्या एक स्ट्रिंग के रूप में।\nउदाहरण: convertBase(\"123AB\", 16, 10) \"74667\" लौटाता है।",
      "hu": "Átalakít egy számot egyik számrendszerből a másikba.\nA függvény három paramétert fogad el: az átalakítandó számot, az alapot, amelyben jelenleg van, és az alapot, amelyre át kell alakítani.\nAz alapok 2-től 36-ig terjedhetnek.\nA számot feltételezhetően karakterláncként adjuk meg, hogy nagyobb alapokat és értékeket is kezelni lehessen.\nA szám karakterei tartalmazhatják a 0-9 és A-Z karaktereket, amelyek a 0-tól 35-ig terjedő értékeket képviselik.\nBemenet: Egy karakterlánc, amely a számot képviseli, egy egész szám a jelenlegi alaphoz, és egy egész szám a cél alaphoz.\nKimenet: A szám átalakítva a cél alapra, karakterláncként.\nPélda: convertBase(\"123AB\", 16, 10) visszaadja \"74667\"."
    },
    "docstring_bertscore": {
      "sq": "0.9724531442365576",
      "hy": "0.9651099776800788",
      "bn": "0.9590835319194803",
      "bg": "0.977073088269048",
      "zh": "0.9672951105018436",
      "fr": "0.9772739035842744",
      "de": "0.9720187395932343",
      "ha": "0.9862198186853236",
      "hi": "0.9634130783348978",
      "hu": "0.8892585968135239"
    }
  },
  {
    "task_id": "PHP/23",
    "prompt": {
      "en": "<?php\n\n/**\n * Performs division of two large numbers provided as strings.\n * This function handles division of large numbers that may exceed the integer\n * or float limit in PHP. It only returns the integer part of the quotient.\n * \n * Inputs:\n * - $dividend: String representing the dividend (the number to be divided).\n * - $divisor: String representing the divisor (the number by which we divide).\n * \n * Output:\n * - Returns a string representing the integer part of the quotient.\n * \n * Example Cases:\n * - largeNumberDivision(\"2376\", \"24\") returns \"99\"\n * - largeNumberDivision(\"1000\", \"10\") returns \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "sq": "<?php\n\n/**\n * Kryen pjesëtimin e dy numrave të mëdhenj të dhënë si vargje.\n * Kjo funksion trajton pjesëtimin e numrave të mëdhenj që mund të tejkalojnë kufirin e numrave të plotë\n * ose kufirin e numrave me presje lëvizëse në PHP. Ai kthen vetëm pjesën e plotë të koeficientit.\n * \n * Hyrjet:\n * - $dividend: Varg që përfaqëson dividendin (numri që do të pjesëtohet).\n * - $divisor: Varg që përfaqëson divisorin (numri me të cilin pjesëtojmë).\n * \n * Dalja:\n * - Kthen një varg që përfaqëson pjesën e plotë të koeficientit.\n * \n * Shembuj Rastesh:\n * - largeNumberDivision(\"2376\", \"24\") kthen \"99\"\n * - largeNumberDivision(\"1000\", \"10\") kthen \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hy": "<?php\n\n/**\n * Կատարում է երկու մեծ թվերի բաժանում, որոնք տրված են որպես տողեր։\n * Այս ֆունկցիան մշակվում է մեծ թվերի բաժանումը, որոնք կարող են գերազանցել PHP-ի\n * ամբողջ թվի կամ լողացող կետի սահմանը։ Այն վերադարձնում է միայն բաժանման ամբողջ մասը։\n * \n * Մուտքեր:\n * - $dividend: Տող, որը ներկայացնում է բաժանարարը (թիվը, որը պետք է բաժանել)։\n * - $divisor: Տող, որը ներկայացնում է բաժանարարը (թիվը, որով բաժանում ենք)։\n * \n * Ելք:\n * - Վերադարձնում է տող, որը ներկայացնում է բաժանման ամբողջ մասը։\n * \n * Օրինակներ:\n * - largeNumberDivision(\"2376\", \"24\") վերադարձնում է \"99\"\n * - largeNumberDivision(\"1000\", \"10\") վերադարձնում է \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "bn": "<?php\n\n/**\n * দুটি বড় সংখ্যার ভাগফল প্রদান করে যা স্ট্রিং হিসেবে দেওয়া হয়।\n * এই ফাংশনটি বড় সংখ্যার ভাগফল প্রদান করে যা PHP তে integer\n * বা float সীমা অতিক্রম করতে পারে। এটি কেবল ভাগফলের পূর্ণসংখ্যা অংশ প্রদান করে।\n * \n * ইনপুটসমূহ:\n * - $dividend: স্ট্রিং যা ভাজক (যে সংখ্যাটি ভাগ করা হবে) নির্দেশ করে।\n * - $divisor: স্ট্রিং যা ভাগকারী (যে সংখ্যা দ্বারা ভাগ করা হবে) নির্দেশ করে।\n * \n * আউটপুট:\n * - একটি স্ট্রিং প্রদান করে যা ভাগফলের পূর্ণসংখ্যা অংশ নির্দেশ করে।\n * \n * উদাহরণ কেস:\n * - largeNumberDivision(\"2376\", \"24\") প্রদান করে \"99\"\n * - largeNumberDivision(\"1000\", \"10\") প্রদান করে \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "bg": "<?php\n\n/**\n * Извършва деление на две големи числа, предоставени като низове.\n * Тази функция обработва деление на големи числа, които могат да надхвърлят\n * лимита за цели числа или числа с плаваща запетая в PHP. Връща само\n * цялата част на частното.\n * \n * Входни данни:\n * - $dividend: Низ, представляващ делимото (числото, което ще бъде разделено).\n * - $divisor: Низ, представляващ делителя (числото, с което делим).\n * \n * Изход:\n * - Връща низ, представляващ цялата част на частното.\n * \n * Примерни случаи:\n * - largeNumberDivision(\"2376\", \"24\") връща \"99\"\n * - largeNumberDivision(\"1000\", \"10\") връща \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "zh": "<?php\n\n/**\n * 执行两个以字符串形式提供的大数的除法。\n * 此函数处理可能超过PHP中整数或浮点数限制的大数除法。它仅返回商的整数部分。\n * \n * 输入:\n * - $dividend: 表示被除数的字符串（要被除的数字）。\n * - $divisor: 表示除数的字符串（我们用来除的数字）。\n * \n * 输出:\n * - 返回一个表示商的整数部分的字符串。\n * \n * 示例案例:\n * - largeNumberDivision(\"2376\", \"24\") 返回 \"99\"\n * - largeNumberDivision(\"1000\", \"10\") 返回 \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "fr": "<?php\n\n/**\n * Effectue la division de deux grands nombres fournis sous forme de chaînes.\n * Cette fonction gère la division de grands nombres qui peuvent dépasser la limite\n * d'entiers ou de flottants en PHP. Elle ne renvoie que la partie entière du quotient.\n * \n * Entrées :\n * - $dividend : Chaîne représentant le dividende (le nombre à diviser).\n * - $divisor : Chaîne représentant le diviseur (le nombre par lequel nous divisons).\n * \n * Sortie :\n * - Renvoie une chaîne représentant la partie entière du quotient.\n * \n * Cas d'exemple :\n * - largeNumberDivision(\"2376\", \"24\") renvoie \"99\"\n * - largeNumberDivision(\"1000\", \"10\") renvoie \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "de": "<?php\n\n/**\n * Führt die Division von zwei großen Zahlen durch, die als Zeichenketten angegeben sind.\n * Diese Funktion behandelt die Division von großen Zahlen, die das Integer-\n * oder Float-Limit in PHP überschreiten können. Sie gibt nur den ganzzahligen Teil des Quotienten zurück.\n * \n * Eingaben:\n * - $dividend: Zeichenkette, die den Dividend darstellt (die zu teilende Zahl).\n * - $divisor: Zeichenkette, die den Divisor darstellt (die Zahl, durch die wir teilen).\n * \n * Ausgabe:\n * - Gibt eine Zeichenkette zurück, die den ganzzahligen Teil des Quotienten darstellt.\n * \n * Beispiel Fälle:\n * - largeNumberDivision(\"2376\", \"24\") gibt \"99\" zurück\n * - largeNumberDivision(\"1000\", \"10\") gibt \"100\" zurück\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "ha": "<?php\n\n/**\n * Yana yin rabon lambobi masu yawa da aka bayar a matsayin kirtani.\n * Wannan aiki yana sarrafa rabon lambobi masu yawa waɗanda na iya wuce iyakar integer\n * ko iyakar float a cikin PHP. Yana dawo da ɓangaren cikakken adadi na maki kawai.\n * \n * Shigarwa:\n * - $dividend: Kirtani da ke wakiltar abin da za a raba (lambar da za a raba).\n * - $divisor: Kirtani da ke wakiltar mai raba (lambar da za mu raba da ita).\n * \n * Fitarwa:\n * - Yana dawo da kirtani da ke wakiltar ɓangaren cikakken adadi na maki.\n * \n * Misalan Shari'o'i:\n * - largeNumberDivision(\"2376\", \"24\") returns \"99\"\n * - largeNumberDivision(\"1000\", \"10\") returns \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hi": "<?php\n\n/**\n * दो बड़े संख्याओं का विभाजन करता है जिन्हें स्ट्रिंग के रूप में दिया गया है।\n * यह फ़ंक्शन उन बड़े संख्याओं के विभाजन को संभालता है जो PHP में पूर्णांक\n * या फ्लोट सीमा से अधिक हो सकते हैं। यह केवल भागफल के पूर्णांक भाग को लौटाता है।\n * \n * इनपुट:\n * - $dividend: स्ट्रिंग जो लाभांश का प्रतिनिधित्व करती है (वह संख्या जिसे विभाजित किया जाना है)।\n * - $divisor: स्ट्रिंग जो भाजक का प्रतिनिधित्व करती है (वह संख्या जिससे हम विभाजित करते हैं)।\n * \n * आउटपुट:\n * - एक स्ट्रिंग लौटाता है जो भागफल के पूर्णांक भाग का प्रतिनिधित्व करती है।\n * \n * उदाहरण मामले:\n * - largeNumberDivision(\"2376\", \"24\") \"99\" लौटाता है\n * - largeNumberDivision(\"1000\", \"10\") \"100\" लौटाता है\n */\n\n function largeNumberDivision($dividend, $divisor) ",
      "hu": "<?php\n\n/**\n * Két nagy szám osztását végzi el, amelyeket karakterláncként adunk meg.\n * Ez a függvény kezeli a nagy számok osztását, amelyek meghaladhatják a PHP\n * egész vagy lebegőpontos határát. Csak az osztási hányados egész részét adja vissza.\n * \n * Bemenetek:\n * - $dividend: Karakterlánc, amely az osztandót jelöli (a szám, amit osztunk).\n * - $divisor: Karakterlánc, amely az osztót jelöli (a szám, amivel osztunk).\n * \n * Kimenet:\n * - Egy karakterláncot ad vissza, amely az osztási hányados egész részét jelöli.\n * \n * Példa esetek:\n * - largeNumberDivision(\"2376\", \"24\") visszaadja \"99\"\n * - largeNumberDivision(\"1000\", \"10\") visszaadja \"100\"\n */\n\n function largeNumberDivision($dividend, $divisor) "
    },
    "prompt_bertscore": {
      "sq": "0.9791022962417004",
      "hy": "0.9651552654069547",
      "bn": "0.9518490161814276",
      "bg": "0.9712353413704327",
      "zh": "0.9742298929949147",
      "fr": "0.9829064652992806",
      "de": "0.9910167423873162",
      "ha": "0.9816314568834177",
      "hi": "0.9809634629119973",
      "hu": "0.9689097768692762"
    },
    "canonical_solution": " {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}",
    "instruction": {
      "en": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nՏվյալ PHP կոդի համար տրամադրեք հակիրճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\n请为以下PHP代码提供简洁的自然语言描述（文档字符串），使用中文且不超过500个字符。",
      "fr": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function largeNumberDivision($dividend, $divisor)\n {\n    // Handle division by zero\n    if ($divisor === \"0\") {\n        throw new Exception(\"Division by zero.\");\n    }\n\n    // Initialize variables\n    $quotient = \"\";\n    $remainder = \"\";\n\n    // Loop through each digit of the dividend\n    for ($i = 0; $i < strlen($dividend); $i++) {\n        $remainder .= $dividend[$i];\n        $partialQuotient = 0;\n\n        // Find the maximum quotient for this partial dividend\n        while ((int)$remainder >= (int)$divisor) {\n            $remainder = (string)((int)$remainder - (int)$divisor);\n            $partialQuotient++;\n        }\n\n        $quotient .= (string)$partialQuotient;\n    }\n\n    // Remove leading zeros and return the quotient\n    return ltrim($quotient, \"0\") ?: \"0\";\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9361854215937784",
      "hy": "0.8991243692091458",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.870943882530202",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(largeNumberDivision(\"2376\", \"24\") === \"99\");\n    assert(largeNumberDivision(\"1000\", \"10\") === \"100\");\n    assert(largeNumberDivision(\"5000\", \"25\") === \"200\");\n    assert(largeNumberDivision(\"123456789\", \"12345\") === \"10000\");\n    assert(largeNumberDivision(\"102030\", \"5101\") === \"20\");\n    assert(largeNumberDivision(\"1020300000000000000000000000000000000000000000000\", \"10\") === \"102030000000000000000000000000000000000000000000\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "largeNumberDivision",
    "signature": "function largeNumberDivision($dividend, $divisor)",
    "docstring": {
      "en": "Performs division of two large numbers provided as strings.\nThis function handles division of large numbers that may exceed the integer\nor float limit in PHP. It only returns the integer part of the quotient.\n\nInputs:\n- $dividend: String representing the dividend (the number to be divided).\n- $divisor: String representing the divisor (the number by which we divide).\n\nOutput:\n- Returns a string representing the integer part of the quotient.\n\nExample Cases:\n- largeNumberDivision(\"2376\", \"24\") returns \"99\"\n- largeNumberDivision(\"1000\", \"10\") returns \"100\"",
      "sq": "Kryen pjesëtimin e dy numrave të mëdhenj të dhënë si vargje.\nKjo funksion trajton pjesëtimin e numrave të mëdhenj që mund të tejkalojnë kufirin e integer ose float në PHP. Ajo kthen vetëm pjesën e plotë të koeficientit.\n\nHyrjet:\n- $dividend: Varg që përfaqëson dividendin (numri që do të pjesëtohet).\n- $divisor: Varg që përfaqëson divisorin (numri me të cilin pjesëtojmë).\n\nDalja:\n- Kthen një varg që përfaqëson pjesën e plotë të koeficientit.\n\nShembuj Rastesh:\n- largeNumberDivision(\"2376\", \"24\") kthen \"99\"\n- largeNumberDivision(\"1000\", \"10\") kthen \"100\"",
      "hy": "Կատարում է երկու մեծ թվերի բաժանում, որոնք տրամադրված են որպես տողեր։  \nԱյս ֆունկցիան կատարում է մեծ թվերի բաժանում, որոնք կարող են գերազանցել PHP-ի ամբողջ թվի կամ լողացող կետի սահմանը։ Այն վերադարձնում է միայն մասնակի ամբողջ թվային մասը։\n\nՄուտքեր՝  \n- $dividend: Տող, որը ներկայացնում է բաժանարարը (թիվը, որը պետք է բաժանել)։  \n- $divisor: Տող, որը ներկայացնում է բաժանարարը (թիվը, որով բաժանում ենք)։\n\nԵլք՝  \n- Վերադարձնում է տող, որը ներկայացնում է մասնակի ամբողջ թվային մասը։\n\nՕրինակային դեպքեր՝  \n- largeNumberDivision(\"2376\", \"24\") վերադարձնում է \"99\"  \n- largeNumberDivision(\"1000\", \"10\") վերադարձնում է \"100\"",
      "bn": "দুটি বড় সংখ্যার ভাগফল প্রদান করে যা স্ট্রিং হিসেবে দেওয়া হয়।\nএই ফাংশনটি বড় সংখ্যার ভাগফল প্রদান করে যা PHP-তে ইন্টিজার বা ফ্লোট সীমা অতিক্রম করতে পারে। এটি কেবল ভাগফলের পূর্ণসংখ্যা অংশটি প্রদান করে।\n\nইনপুট:\n- $dividend: স্ট্রিং যা লভ্যাংশকে উপস্থাপন করে (যে সংখ্যাটি ভাগ করা হবে)।\n- $divisor: স্ট্রিং যা ভাজককে উপস্থাপন করে (যে সংখ্যাটি দ্বারা আমরা ভাগ করি)।\n\nআউটপুট:\n- একটি স্ট্রিং প্রদান করে যা ভাগফলের পূর্ণসংখ্যা অংশকে উপস্থাপন করে।\n\nউদাহরণ কেস:\n- largeNumberDivision(\"2376\", \"24\") প্রদান করে \"99\"\n- largeNumberDivision(\"1000\", \"10\") প্রদান করে \"100\"",
      "bg": "Извършва деление на две големи числа, предоставени като низове.  \nТази функция обработва деление на големи числа, които могат да надхвърлят лимита на цяло число или плаваща запетая в PHP. Тя връща само цялата част на частното.\n\nВходове:  \n- $dividend: Низ, представляващ делимото (числото, което ще бъде разделено).  \n- $divisor: Низ, представляващ делителя (числото, с което делим).\n\nИзход:  \n- Връща низ, представляващ цялата част на частното.\n\nПримерни случаи:  \n- largeNumberDivision(\"2376\", \"24\") връща \"99\"  \n- largeNumberDivision(\"1000\", \"10\") връща \"100\"  ",
      "zh": "执行两个以字符串形式提供的大数的除法。  \n此函数处理可能超过 PHP 中整数或浮点数限制的大数除法。它仅返回商的整数部分。\n\n输入：  \n- $dividend: 表示被除数的字符串（要被除的数字）。  \n- $divisor: 表示除数的字符串（我们用来除的数字）。  \n\n输出：  \n- 返回表示商的整数部分的字符串。\n\n示例案例：  \n- largeNumberDivision(\"2376\", \"24\") 返回 \"99\"  \n- largeNumberDivision(\"1000\", \"10\") 返回 \"100\"  ",
      "fr": "Effectue la division de deux grands nombres fournis sous forme de chaînes.\nCette fonction gère la division de grands nombres qui peuvent dépasser la limite des entiers\nou des flottants en PHP. Elle ne renvoie que la partie entière du quotient.\n\nEntrées :\n- $dividend : Chaîne représentant le dividende (le nombre à diviser).\n- $divisor : Chaîne représentant le diviseur (le nombre par lequel nous divisons).\n\nSortie :\n- Renvoie une chaîne représentant la partie entière du quotient.\n\nCas d'exemple :\n- largeNumberDivision(\"2376\", \"24\") renvoie \"99\"\n- largeNumberDivision(\"1000\", \"10\") renvoie \"100\"",
      "de": "Führt die Division von zwei großen Zahlen durch, die als Zeichenfolgen angegeben sind.  \nDiese Funktion behandelt die Division von großen Zahlen, die das Integer- oder Float-Limit in PHP überschreiten können. Sie gibt nur den ganzzahligen Teil des Quotienten zurück.\n\nEingaben:\n- $dividend: Zeichenfolge, die den Dividenden darstellt (die Zahl, die geteilt werden soll).\n- $divisor: Zeichenfolge, die den Divisor darstellt (die Zahl, durch die wir teilen).\n\nAusgabe:\n- Gibt eine Zeichenfolge zurück, die den ganzzahligen Teil des Quotienten darstellt.\n\nBeispiel-Fälle:\n- largeNumberDivision(\"2376\", \"24\") gibt \"99\" zurück\n- largeNumberDivision(\"1000\", \"10\") gibt \"100\" zurück",
      "ha": "Yana yin rabon lambobi masu girma guda biyu da aka bayar a matsayin igiyoyi.\nWannan aikin yana kula da rabon lambobi masu girma waɗanda na iya wuce iyakar integer\nko iyakar float a cikin PHP. Yana dawo da ɓangaren cikakken lambar kawai na sakamakon rabo.\n\nShigarwa:\n- $dividend: Igiya mai wakiltar abin da za a raba (lambar da za a raba).\n- $divisor: Igiya mai wakiltar abin da za a raba da shi (lambar da za mu raba da ita).\n\nFitarwa:\n- Yana dawo da igiya mai wakiltar ɓangaren cikakken lambar na sakamakon rabo.\n\nMisalan Lokuta:\n- largeNumberDivision(\"2376\", \"24\") yana dawo da \"99\"\n- largeNumberDivision(\"1000\", \"10\") yana dawo da \"100\"",
      "hi": "दो बड़े संख्याओं का विभाजन करता है जो स्ट्रिंग्स के रूप में दी गई हैं।\nयह फ़ंक्शन बड़े संख्याओं के विभाजन को संभालता है जो PHP में पूर्णांक या फ्लोट सीमा को पार कर सकती हैं। यह केवल भाजक के पूर्णांक भाग को लौटाता है।\n\nइनपुट्स:\n- $dividend: स्ट्रिंग जो लाभांश का प्रतिनिधित्व करती है (वह संख्या जिसे विभाजित किया जाना है)।\n- $divisor: स्ट्रिंग जो भाजक का प्रतिनिधित्व करती है (वह संख्या जिससे हम विभाजित करते हैं)।\n\nआउटपुट:\n- एक स्ट्रिंग लौटाता है जो भाजक के पूर्णांक भाग का प्रतिनिधित्व करती है।\n\nउदाहरण मामले:\n- largeNumberDivision(\"2376\", \"24\") \"99\" लौटाता है\n- largeNumberDivision(\"1000\", \"10\") \"100\" लौटाता है",
      "hu": "Elvégzi két nagy szám osztását, amelyeket karakterláncként adnak meg.\nEz a függvény kezeli a nagy számok osztását, amelyek meghaladhatják a PHP-ben az egész vagy lebegőpontos határt. Csak az osztási hányados egész részét adja vissza.\n\nBemenetek:\n- $dividend: Karakterlánc, amely az osztandót (a számot, amelyet osztunk) képviseli.\n- $divisor: Karakterlánc, amely az osztót (a számot, amellyel osztunk) képviseli.\n\nKimenet:\n- Visszaad egy karakterláncot, amely az osztási hányados egész részét képviseli.\n\nPélda esetek:\n- largeNumberDivision(\"2376\", \"24\") visszaadja \"99\"\n- largeNumberDivision(\"1000\", \"10\") visszaadja \"100\""
    },
    "docstring_bertscore": {
      "sq": "0.991175050801001",
      "hy": "0.9681984814747903",
      "bn": "0.9536839636414278",
      "bg": "0.9988429780304717",
      "zh": "0.9583716406338513",
      "fr": "0.983233013645702",
      "de": "0.9911766398440492",
      "ha": "0.9603166293249449",
      "hi": "0.9840422338180381",
      "hu": "0.970172867462277"
    }
  },
  {
    "task_id": "PHP/24",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\n * This function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n * - The function takes two positive integers 'a' and 'b' as inputs.\n * - It finds the largest integer 'x' that satisfies the conditions mentioned above.\n * \n * Args:\n *      $a (int): The base number, must be greater than 1.\n *      $b (int): The comparison number.\n * \n * Returns:\n *      int: The largest integer x satisfying the conditions.\n * \n * Examples:\n *      - If a = 10000 and b = 1000000000001, then the output should be 3.\n *      - If a = 3 and b = 27, then the output should be 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin më të madh të plotë x të tillë që ax <= b < ax+1 ose x <= logab < x + 1.\n * Kjo funksion ndihmon në kuptimin e marrëdhënies midis dy numrave në terma të logaritmeve dhe eksponenteve.\n * - Funksioni merr dy numra të plotë pozitivë 'a' dhe 'b' si hyrje.\n * - Ai gjen numrin më të madh të plotë 'x' që plotëson kushtet e përmendura më sipër.\n * \n * Args:\n *      $a (int): Numri bazë, duhet të jetë më i madh se 1.\n *      $b (int): Numri për krahasim.\n * \n * Returns:\n *      int: Numri më i madh i plotë x që plotëson kushtet.\n * \n * Shembuj:\n *      - Nëse a = 10000 dhe b = 1000000000001, atëherë rezultati duhet të jetë 3.\n *      - Nëse a = 3 dhe b = 27, atëherë rezultati duhet të jetë 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է ամենամեծ ամբողջ թիվը x, այնպես, որ ax <= b < ax+1 կամ x <= logab < x + 1:\n * Այս ֆունկցիան օգնում է հասկանալ երկու թվերի միջև կապը լոգարիթմների և աստիճանների առումով:\n * - Ֆունկցիան ընդունում է երկու դրական ամբողջ թվեր 'a' և 'b' որպես մուտք:\n * - Այն գտնում է ամենամեծ ամբողջ թիվը 'x', որը բավարարում է վերը նշված պայմանները:\n * \n * Արգումենտներ:\n *      $a (int): Հիմնական թիվը, պետք է լինի 1-ից մեծ:\n *      $b (int): Համեմատվող թիվը:\n * \n * Վերադարձնում է:\n *      int: Ամենամեծ ամբողջ թիվը x, որը բավարարում է պայմանները:\n * \n * Օրինակներ:\n *      - Եթե a = 10000 և b = 1000000000001, ապա արդյունքը պետք է լինի 3:\n *      - Եթե a = 3 և b = 27, ապա արդյունքը պետք է լինի 3:\n */\n\nfunction calculateLogLimit($a, $b) ",
      "bn": "<?php\n\n\n/**\n * এমন বৃহত্তম পূর্ণসংখ্যা x গণনা করে যা ax <= b < ax+1 অথবা x <= logab < x + 1।\n * এই ফাংশনটি লগারিদম এবং সূচকের দিক থেকে দুটি সংখ্যার সম্পর্ক বোঝাতে সাহায্য করে।\n * - ফাংশনটি দুটি ধনাত্মক পূর্ণসংখ্যা 'a' এবং 'b' ইনপুট হিসেবে গ্রহণ করে।\n * - এটি এমন বৃহত্তম পূর্ণসংখ্যা 'x' খুঁজে বের করে যা উপরে উল্লিখিত শর্তগুলি পূরণ করে।\n * \n * Args:\n *      $a (int): ভিত্তি সংখ্যা, যা অবশ্যই 1 এর চেয়ে বড় হতে হবে।\n *      $b (int): তুলনা সংখ্যা।\n * \n * Returns:\n *      int: শর্তগুলি পূরণকারী বৃহত্তম পূর্ণসংখ্যা x।\n * \n * উদাহরণ:\n *      - যদি a = 10000 এবং b = 1000000000001 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n *      - যদি a = 3 এবং b = 27 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n */\n\nfunction calculateLogLimit($a, $b) ",
      "bg": "<?php\n\n\n/**\n * Изчислява най-голямото цяло число x, такова че ax <= b < ax+1 или x <= logab < x + 1.\n * Тази функция помага за разбирането на връзката между две числа в термини на логаритми и експоненти.\n * - Функцията приема два положителни цели числа 'a' и 'b' като входни параметри.\n * - Тя намира най-голямото цяло число 'x', което удовлетворява гореспоменатите условия.\n * \n * Args:\n *      $a (int): Основното число, трябва да бъде по-голямо от 1.\n *      $b (int): Числото за сравнение.\n * \n * Returns:\n *      int: Най-голямото цяло число x, което удовлетворява условията.\n * \n * Примери:\n *      - Ако a = 10000 и b = 1000000000001, тогава изходът трябва да бъде 3.\n *      - Ако a = 3 и b = 27, тогава изходът трябва да бъде 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "zh": "<?php\n\n\n/**\n * 计算最大的整数 x，使得 ax <= b < ax+1 或 x <= logab < x + 1。\n * 这个函数有助于理解两个数字之间在对数和指数方面的关系。\n * - 该函数接受两个正整数 'a' 和 'b' 作为输入。\n * - 它找到满足上述条件的最大整数 'x'。\n * \n * 参数:\n *      $a (int): 基数，必须大于 1。\n *      $b (int): 比较数。\n * \n * 返回:\n *      int: 满足条件的最大整数 x。\n * \n * 示例:\n *      - 如果 a = 10000 且 b = 1000000000001，则输出应为 3。\n *      - 如果 a = 3 且 b = 27，则输出应为 3。\n */\n\nfunction calculateLogLimit($a, $b) ",
      "fr": "<?php\n\n\n/**\n * Calcule le plus grand entier x tel que ax <= b < ax+1 ou x <= logab < x + 1.\n * Cette fonction aide à comprendre la relation entre deux nombres en termes de logarithmes et d'exposants.\n * - La fonction prend deux entiers positifs 'a' et 'b' en entrée.\n * - Elle trouve le plus grand entier 'x' qui satisfait les conditions mentionnées ci-dessus.\n * \n * Args:\n *      $a (int): Le nombre de base, doit être supérieur à 1.\n *      $b (int): Le nombre de comparaison.\n * \n * Returns:\n *      int: Le plus grand entier x satisfaisant les conditions.\n * \n * Examples:\n *      - Si a = 10000 et b = 1000000000001, alors le résultat devrait être 3.\n *      - Si a = 3 et b = 27, alors le résultat devrait être 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "de": "<?php\n\n\n/**\n * Berechnet die größte ganze Zahl x, so dass ax <= b < ax+1 oder x <= logab < x + 1.\n * Diese Funktion hilft, die Beziehung zwischen zwei Zahlen in Bezug auf Logarithmen und Exponenten zu verstehen.\n * - Die Funktion nimmt zwei positive ganze Zahlen 'a' und 'b' als Eingaben.\n * - Sie findet die größte ganze Zahl 'x', die die oben genannten Bedingungen erfüllt.\n * \n * Args:\n *      $a (int): Die Basiszahl, muss größer als 1 sein.\n *      $b (int): Die Vergleichszahl.\n * \n * Returns:\n *      int: Die größte ganze Zahl x, die die Bedingungen erfüllt.\n * \n * Beispiele:\n *      - Wenn a = 10000 und b = 1000000000001, dann sollte die Ausgabe 3 sein.\n *      - Wenn a = 3 und b = 27, dann sollte die Ausgabe 3 sein.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "ha": "<?php\n\n\n/**\n * Lissafi mafi girman cikakken lamba x wanda ax <= b < ax+1 ko x <= logab < x + 1.\n * Wannan aikin yana taimakawa wajen fahimtar dangantaka tsakanin lambobi biyu dangane da logaritms da kuma exponents.\n * - Aikin yana karɓar lambobi biyu masu kyau 'a' da 'b' a matsayin shigarwa.\n * - Yana nemo mafi girman cikakken lamba 'x' wanda ya cika sharuɗɗan da aka ambata a sama.\n * \n * Args:\n *      $a (int): Lambar tushe, dole ne ya zama mafi girma fiye da 1.\n *      $b (int): Lambar kwatance.\n * \n * Returns:\n *      int: Mafi girman cikakken lamba x da ke cika sharuɗɗan.\n * \n * Misalai:\n *      - Idan a = 10000 da b = 1000000000001, to fitarwa ya kamata ya zama 3.\n *      - Idan a = 3 da b = 27, to fitarwa ya kamata ya zama 3.\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hi": "<?php\n\n\n/**\n * सबसे बड़ा पूर्णांक x गणना करता है जिससे ax <= b < ax+1 या x <= logab < x + 1.\n * यह फ़ंक्शन लॉगरिदम और घातांक के संदर्भ में दो संख्याओं के बीच संबंध को समझने में मदद करता है।\n * - फ़ंक्शन दो धनात्मक पूर्णांक 'a' और 'b' को इनपुट के रूप में लेता है।\n * - यह सबसे बड़ा पूर्णांक 'x' खोजता है जो ऊपर उल्लिखित शर्तों को पूरा करता है।\n * \n * तर्क:\n *      $a (int): आधार संख्या, 1 से अधिक होनी चाहिए।\n *      $b (int): तुलना संख्या।\n * \n * वापसी:\n *      int: सबसे बड़ा पूर्णांक x जो शर्तों को पूरा करता है।\n * \n * उदाहरण:\n *      - यदि a = 10000 और b = 1000000000001, तो आउटपुट 3 होना चाहिए।\n *      - यदि a = 3 और b = 27, तो आउटपुट 3 होना चाहिए।\n */\n\nfunction calculateLogLimit($a, $b) ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a legnagyobb x egész számot, amelyre ax <= b < ax+1 vagy x <= logab < x + 1.\n * Ez a függvény segít megérteni két szám közötti kapcsolatot logaritmusok és hatványok tekintetében.\n * - A függvény két pozitív egész számot, 'a'-t és 'b'-t vesz bemenetként.\n * - Megtalálja a legnagyobb 'x' egész számot, amely kielégíti a fent említett feltételeket.\n * \n * Argumentumok:\n *      $a (int): Az alap szám, nagyobbnak kell lennie, mint 1.\n *      $b (int): Az összehasonlító szám.\n * \n * Visszatér:\n *      int: A legnagyobb x egész szám, amely kielégíti a feltételeket.\n * \n * Példák:\n *      - Ha a = 10000 és b = 1000000000001, akkor a kimenet 3 kell legyen.\n *      - Ha a = 3 és b = 27, akkor a kimenet 3 kell legyen.\n */\n\nfunction calculateLogLimit($a, $b) "
    },
    "prompt_bertscore": {
      "sq": "0.9863652161242411",
      "hy": "0.9516545570383944",
      "bn": "0.9859556402785472",
      "bg": "0.9875834162511281",
      "zh": "0.9627669337053912",
      "fr": "0.9916219691583295",
      "de": "0.9931138819502825",
      "ha": "0.9894946377774458",
      "hi": "0.9774504859930143",
      "hu": "0.973919235078976"
    },
    "canonical_solution": "{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}",
    "instruction": {
      "en": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nՏվեք PHP կոդի համառոտ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\n请用不超过500个字符的中文提供该PHP代码的简洁自然语言描述（文档字符串）。",
      "fr": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function calculateLogLimit($a, $b)\n{\n    $x = 0;\n    while (pow($a, $x) <= $b) {\n        $x++;\n    }\n    return $x - 1;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.9240208997984397",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateLogLimit(10000, 1000000000001) === 3);\n    assert(calculateLogLimit(3, 27) === 3);\n    assert(calculateLogLimit(2, 32) === 5);\n    assert(calculateLogLimit(5, 3125) === 5);\n   \n    \n}\n\nmain();\n?>",
    "entry_point": "calculateLogLimit",
    "signature": "function calculateLogLimit($a, $b)",
    "docstring": {
      "en": "Calculates the largest integer x such that ax <= b < ax+1 or x <= logab < x + 1.\nThis function helps in understanding the relationship between two numbers in terms of logarithms and exponents.\n- The function takes two positive integers 'a' and 'b' as inputs.\n- It finds the largest integer 'x' that satisfies the conditions mentioned above.\n\nArgs:\n$a (int): The base number, must be greater than 1.\n$b (int): The comparison number.\n\nReturns:\nint: The largest integer x satisfying the conditions.\n\nExamples:\n- If a = 10000 and b = 1000000000001, then the output should be 3.\n- If a = 3 and b = 27, then the output should be 3.",
      "sq": "Llogarit numrin më të madh të plotë x të tillë që ax <= b < ax+1 ose x <= logab < x + 1.\nKjo funksion ndihmon në kuptimin e marrëdhënies midis dy numrave në terma të logaritmeve dhe eksponentëve.\n- Funksioni merr dy numra të plotë pozitivë 'a' dhe 'b' si hyrje.\n- Ai gjen numrin më të madh të plotë 'x' që plotëson kushtet e përmendura më sipër.\n\nArgumentet:\n$a (int): Numri bazë, duhet të jetë më i madh se 1.\n$b (int): Numri krahasues.\n\nKthen:\nint: Numri më i madh i plotë x që plotëson kushtet.\n\nShembuj:\n- Nëse a = 10000 dhe b = 1000000000001, atëherë rezultati duhet të jetë 3.\n- Nëse a = 3 dhe b = 27, atëherë rezultati duhet të jetë 3.",
      "hy": "Հաշվում է ամենամեծ ամբողջ թիվը x, այնպես, որ ax <= b < ax+1 կամ x <= logab < x + 1:\nԱյս ֆունկցիան օգնում է հասկանալ երկու թվերի միջև հարաբերությունը լոգարիթմների և աստիճանների առումով։\n- Ֆունկցիան ընդունում է երկու դրական ամբողջ թիվ՝ 'a' և 'b' որպես մուտքային տվյալներ։\n- Այն գտնում է ամենամեծ ամբողջ թիվը 'x', որը բավարարում է վերոնշյալ պայմաններին։\n\nԱրգումենտներ:\n$a (int): Հիմնական թիվը, պետք է լինի 1-ից մեծ։\n$b (int): Համեմատման թիվը։\n\nՎերադարձնում է:\nint: Ամենամեծ ամբողջ թիվը x, որը բավարարում է պայմաններին։\n\nՕրինակներ:\n- Եթե a = 10000 և b = 1000000000001, ապա արդյունքը պետք է լինի 3։\n- Եթե a = 3 և b = 27, ապա արդյունքը պետք է լինի 3։",
      "bn": "এমন বৃহত্তম পূর্ণসংখ্যা x গণনা করে যা ax <= b < ax+1 বা x <= logab < x + 1।\nএই ফাংশনটি লগারিদম এবং সূচকের দিক থেকে দুটি সংখ্যার মধ্যে সম্পর্ক বোঝাতে সাহায্য করে।\n- ফাংশনটি দুটি ধনাত্মক পূর্ণসংখ্যা 'a' এবং 'b' কে ইনপুট হিসেবে নেয়।\n- এটি সবচেয়ে বড় পূর্ণসংখ্যা 'x' খুঁজে বের করে যা উপরে উল্লেখিত শর্তগুলি পূরণ করে।\n\nArgs:\n$a (int): ভিত্তি সংখ্যা, যা 1 এর চেয়ে বড় হতে হবে।\n$b (int): তুলনা সংখ্যা।\n\nReturns:\nint: সবচেয়ে বড় পূর্ণসংখ্যা x যা শর্তগুলি পূরণ করে।\n\nExamples:\n- যদি a = 10000 এবং b = 1000000000001 হয়, তাহলে আউটপুট হওয়া উচিত 3।\n- যদি a = 3 এবং b = 27 হয়, তাহলে আউটপুট হওয়া উচিত 3।",
      "bg": "Изчислява най-голямото цяло число x, такова че ax <= b < ax+1 или x <= logab < x + 1.\nТази функция помага за разбиране на връзката между две числа в термини на логаритми и степени.\n- Функцията приема две положителни цели числа 'a' и 'b' като вход.\n- Тя намира най-голямото цяло число 'x', което удовлетворява гореспоменатите условия.\n\nАргументи:\n$a (int): Основното число, трябва да бъде по-голямо от 1.\n$b (int): Числото за сравнение.\n\nВръща:\nint: Най-голямото цяло число x, което удовлетворява условията.\n\nПримери:\n- Ако a = 10000 и b = 1000000000001, тогава изходът трябва да бъде 3.\n- Ако a = 3 и b = 27, тогава изходът трябва да бъде 3.",
      "zh": "计算最大的整数 x，使得 ax <= b < ax+1 或 x <= logab < x + 1。\n此函数有助于理解两个数字之间在对数和指数方面的关系。  \n- 该函数接受两个正整数 'a' 和 'b' 作为输入。  \n- 它找到满足上述条件的最大整数 'x'。  \n\n参数：  \n$a (int): 基数，必须大于 1。  \n$b (int): 比较数。  \n\n返回：  \nint: 满足条件的最大整数 x。  \n\n示例：  \n- 如果 a = 10000 且 b = 1000000000001，则输出应为 3。  \n- 如果 a = 3 且 b = 27，则输出应为 3。",
      "fr": "Calcule le plus grand entier x tel que ax <= b < ax+1 ou x <= logab < x + 1.\nCette fonction aide à comprendre la relation entre deux nombres en termes de logarithmes et d'exposants.\n- La fonction prend deux entiers positifs 'a' et 'b' en entrée.\n- Elle trouve le plus grand entier 'x' qui satisfait les conditions mentionnées ci-dessus.\n\nArgs:\n$a (int): Le nombre de base, doit être supérieur à 1.\n$b (int): Le nombre de comparaison.\n\nReturns:\nint: Le plus grand entier x satisfaisant les conditions.\n\nExamples:\n- Si a = 10000 et b = 1000000000001, alors le résultat devrait être 3.\n- Si a = 3 et b = 27, alors le résultat devrait être 3.",
      "de": "Berechnet die größte ganze Zahl x, so dass ax <= b < ax+1 oder x <= logab < x + 1.\nDiese Funktion hilft, die Beziehung zwischen zwei Zahlen in Bezug auf Logarithmen und Exponenten zu verstehen.\n- Die Funktion nimmt zwei positive ganze Zahlen 'a' und 'b' als Eingaben.\n- Sie findet die größte ganze Zahl 'x', die die oben genannten Bedingungen erfüllt.\n\nArgumente:\n$a (int): Die Basiszahl, muss größer als 1 sein.\n$b (int): Die Vergleichszahl.\n\nRückgabe:\nint: Die größte ganze Zahl x, die die Bedingungen erfüllt.\n\nBeispiele:\n- Wenn a = 10000 und b = 1000000000001, dann sollte die Ausgabe 3 sein.\n- Wenn a = 3 und b = 27, dann sollte die Ausgabe 3 sein.",
      "ha": "Yana ƙididdige mafi girman cikakken lamba x wanda ax <= b < ax+1 ko x <= logab < x + 1.\nWannan aikin yana taimakawa wajen fahimtar dangantaka tsakanin lambobi biyu ta fuskar logaritm da ƙididdiga.\n- Aikin yana karɓar lambobi guda biyu masu kyau 'a' da 'b' a matsayin shigarwa.\n- Yana nemo mafi girman cikakken lamba 'x' wanda ya cika sharuɗɗan da aka ambata a sama.\n\nArgs:\n$a (int): Lambar tushe, dole ne ta zama mafi girma fiye da 1.\n$b (int): Lambar kwatanci.\n\nReturns:\nint: Mafi girman cikakken lamba x da ke cika sharuɗɗan.\n\nExamples:\n- Idan a = 10000 kuma b = 1000000000001, to sakamakon ya zama 3.\n- Idan a = 3 kuma b = 27, to sakamakon ya zama 3.",
      "hi": "सबसे बड़ा पूर्णांक x गणना करता है जिससे ax <= b < ax+1 या x <= logab < x + 1.\nयह फ़ंक्शन लघुगणक और घातांक के संदर्भ में दो संख्याओं के बीच संबंध को समझने में मदद करता है।\n- फ़ंक्शन दो धनात्मक पूर्णांक 'a' और 'b' को इनपुट के रूप में लेता है।\n- यह सबसे बड़ा पूर्णांक 'x' ढूंढता है जो ऊपर उल्लिखित शर्तों को संतुष्ट करता है।\n\nArgs:\n$a (int): आधार संख्या, 1 से अधिक होनी चाहिए।\n$b (int): तुलना संख्या।\n\nReturns:\nint: सबसे बड़ा पूर्णांक x जो शर्तों को संतुष्ट करता है।\n\nExamples:\n- यदि a = 10000 और b = 1000000000001, तो आउटपुट 3 होना चाहिए।\n- यदि a = 3 और b = 27, तो आउटपुट 3 होना चाहिए।",
      "hu": "Kiszámítja a legnagyobb x egész számot úgy, hogy ax <= b < ax+1 vagy x <= logab < x + 1.\nEz a függvény segít megérteni két szám közötti kapcsolatot logaritmusok és hatványok szempontjából.\n- A függvény két pozitív egész számot, 'a'-t és 'b'-t vesz bemenetként.\n- Megtalálja a legnagyobb 'x' egész számot, amely kielégíti a fent említett feltételeket.\n\nArgs:\n$a (int): Az alap szám, nagyobbnak kell lennie, mint 1.\n$b (int): Az összehasonlító szám.\n\nReturns:\nint: A legnagyobb x egész szám, amely kielégíti a feltételeket.\n\nExamples:\n- Ha a = 10000 és b = 1000000000001, akkor a kimenet 3 kell legyen.\n- Ha a = 3 és b = 27, akkor a kimenet 3 kell legyen."
    },
    "docstring_bertscore": {
      "sq": "0.9818435941303629",
      "hy": "0.9598291903698852",
      "bn": "0.9831424381919501",
      "bg": "0.9653354231625534",
      "zh": "0.9711121905341911",
      "fr": "0.9875057517721435",
      "de": "0.9796258859261084",
      "ha": "0.9771962391052896",
      "hi": "0.9757619291238367",
      "hu": "0.9863276749822255"
    }
  },
  {
    "task_id": "PHP/25",
    "prompt": {
      "en": "<?php\n\n/**\n   * Distribute candy to five children sitting around a round table.\n   *Each child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\n   * Input: An array of five integers representing the number of candies each child has.\n   * Output: An array of five integers representing the number of candies each child has after playing the game.\n   */\n\n function distributeCandies(array $candies): array",
      "sq": "<?php\n\n/**\n   * Shpërndani karamele për pesë fëmijë që janë ulur rreth një tavoline të rrumbullakët.\n   * Çdo fëmijë fillimisht ka një numër të caktuar karamelesh. Ata luajnë një lojë ku, duke filluar me një fëmijë dhe duke shkuar në drejtim të akrepave të orës, çdo fëmijë ndan karamelet e tij në tre pjesë të barabarta, dhe nëse ka karamele të tepërta që nuk mund të ndahen në mënyrë të barabartë, fëmija i ha ato. Çdo fëmijë mban një kopje dhe u jep dy kopjet e tjera fqinjëve të tij. Pesë fëmijët përfunduan operacionet e mësipërme me radhë.\n   * Hyrja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë.\n   * Dalja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë pas lojës.\n   */\n\n function distributeCandies(array $candies): array",
      "hy": "<?php\n\n/**\n   * Բաշխել կոնֆետները հինգ երեխայի միջև, ովքեր նստած են կլոր սեղանի շուրջ:\n   *Յուրաքանչյուր երեխա սկզբում ունի որոշակի քանակությամբ կոնֆետներ։ Նրանք խաղում են խաղ, որտեղ, սկսելով մեկ երեխայից և շարժվելով ժամացույցի սլաքի ուղղությամբ, յուրաքանչյուր երեխա բաժանում է իր կոնֆետները երեք հավասար մասի, և եթե կան ավելորդ կոնֆետներ, որոնք հնարավոր չէ հավասարապես բաժանել, երեխան ուտում է դրանք։ Յուրաքանչյուր երեխա պահում է մեկ օրինակ և տալիս է մյուս երկու օրինակները իր հարևաններին։ Հինգ երեխաները հերթով կատարեցին վերոնշյալ գործողությունները։\n   * Մուտք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է, թե որքան կոնֆետ ունի յուրաքանչյուր երեխա։\n   * Ելք: Հինգ ամբողջ թվերից բաղկացած զանգված, որը ներկայացնում է, թե որքան կոնֆետ ունի յուրաքանչյուր երեխա խաղը խաղալուց հետո։\n   */\n\n function distributeCandies(array $candies): array",
      "bn": "<?php\n\n/**\n   * পাঁচটি শিশুকে গোল টেবিলের চারপাশে ক্যান্ডি বিতরণ করুন।\n   *প্রতিটি শিশুর প্রাথমিকভাবে নির্দিষ্ট সংখ্যক ক্যান্ডি থাকে। তারা একটি খেলা খেলে যেখানে, একটি শিশুর সাথে শুরু করে, এবং ঘড়ির কাঁটার দিকে, প্রতিটি শিশু তাদের ক্যান্ডি তিনটি সমান অংশে ভাগ করে, এবং যদি অতিরিক্ত ক্যান্ডি থাকে যা সমানভাবে ভাগ করা যায় না, তাহলে শিশু সেগুলি খেয়ে ফেলে। প্রতিটি শিশু একটি কপি রাখে এবং অন্য দুটি কপি তাদের প্রতিবেশীদের দেয়। পাঁচটি শিশু পালাক্রমে উপরের অপারেশনগুলি সম্পন্ন করে।\n   * ইনপুট: একটি পাঁচটি পূর্ণসংখ্যার অ্যারে যা প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।\n   * আউটপুট: একটি পাঁচটি পূর্ণসংখ্যার অ্যারে যা খেলা খেলার পরে প্রতিটি শিশুর কাছে থাকা ক্যান্ডির সংখ্যা উপস্থাপন করে।\n   */\n\n function distributeCandies(array $candies): array",
      "bg": "<?php\n\n/**\n   * Разпределете бонбони на пет деца, седящи около кръгла маса.\n   * Всяко дете първоначално има определен брой бонбони. Те играят игра, в която, започвайки с едно дете и вървейки по посока на часовниковата стрелка, всяко дете разделя своите бонбони на три равни части и ако има допълнителни бонбони, които не могат да бъдат разделени равномерно, детето ги изяжда. Всяко дете запазва едно копие и дава другите две копия на своите съседи. Петте деца завършват гореописаните операции последователно.\n   * Вход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има.\n   * Изход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има след играта.\n   */\n\n function distributeCandies(array $candies): array",
      "zh": "<?php\n\n/**\n   * 将糖果分给围坐在圆桌旁的五个孩子。\n   * 每个孩子最初都有一定数量的糖果。他们玩一个游戏，从一个孩子开始，顺时针方向，每个孩子将他们的糖果分成三等份，如果有多余的糖果不能被平分，孩子就吃掉它们。每个孩子保留一份，并将另外两份给他们的邻居。五个孩子依次完成上述操作。\n   * 输入：一个包含五个整数的数组，表示每个孩子拥有的糖果数量。\n   * 输出：一个包含五个整数的数组，表示游戏结束后每个孩子拥有的糖果数量。\n   */\n\n function distributeCandies(array $candies): array",
      "fr": "<?php\n\n/**\n   * Distribuer des bonbons à cinq enfants assis autour d'une table ronde.\n   * Chaque enfant a initialement un certain nombre de bonbons. Ils jouent à un jeu où, en commençant par un enfant et en allant dans le sens des aiguilles d'une montre, chaque enfant divise ses bonbons en trois parts égales, et s'il y a des bonbons supplémentaires qui ne peuvent pas être divisés également, l'enfant les mange. Chaque enfant garde une copie et donne les deux autres copies à ses voisins. Les cinq enfants ont complété les opérations ci-dessus à tour de rôle.\n   * Entrée : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a.\n   * Sortie : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a après avoir joué au jeu.\n   */\n\n function distributeCandies(array $candies): array",
      "de": "<?php\n\n/**\n   * Verteile Süßigkeiten an fünf Kinder, die um einen runden Tisch sitzen.\n   * Jedes Kind hat anfangs eine bestimmte Anzahl an Süßigkeiten. Sie spielen ein Spiel, bei dem jedes Kind, beginnend mit einem Kind und im Uhrzeigersinn gehend, seine Süßigkeiten in drei gleiche Teile aufteilt, und wenn es zusätzliche Süßigkeiten gibt, die nicht gleichmäßig aufgeteilt werden können, isst das Kind sie. Jedes Kind behält eine Kopie und gibt die anderen zwei Kopien an seine Nachbarn. Die fünf Kinder haben die oben genannten Operationen der Reihe nach abgeschlossen.\n   * Eingabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind hat.\n   * Ausgabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind nach dem Spiel hat.\n   */\n\n function distributeCandies(array $candies): array",
      "ha": "<?php\n\n/**\n   * Rarraba alewa ga yara biyar da ke zaune a kusa da tebur mai zagaye.\n   * Kowane yaro yana da wani adadin alewa a farko. Suna yin wasa inda, farawa da yaro daya, kuma suna tafiya a agogo, kowane yaro yana raba alewarsa zuwa kashi uku daidai, kuma idan akwai karin alewa da ba za a iya raba su daidai ba, yaron yana cin su. Kowane yaro yana riƙe da kwafi daya kuma yana ba da sauran kwafi biyu ga makwabtansa. Yara biyar sun kammala ayyukan da ke sama a jere.\n   * Shigarwa: Jerin lambobi guda biyar da ke wakiltar adadin alewa da kowane yaro ke da shi.\n   * Fitarwa: Jerin lambobi guda biyar da ke wakiltar adadin alewa da kowane yaro ke da shi bayan sun yi wasan.\n   */\n\n function distributeCandies(array $candies): array",
      "hi": "<?php\n\n/**\n   * पांच बच्चों को गोल मेज के चारों ओर कैंडी वितरित करें।\n   *प्रत्येक बच्चे के पास शुरू में कुछ निश्चित संख्या में कैंडी होती है। वे एक खेल खेलते हैं जिसमें, एक बच्चे से शुरू होकर, और घड़ी की दिशा में चलते हुए, प्रत्येक बच्चा अपनी कैंडी को तीन बराबर भागों में विभाजित करता है, और यदि कोई अतिरिक्त कैंडी होती है जिसे समान रूप से विभाजित नहीं किया जा सकता है, तो बच्चा उन्हें खा लेता है। प्रत्येक बच्चा एक प्रति अपने पास रखता है और अन्य दो प्रतियां अपने पड़ोसियों को देता है। पांचों बच्चों ने बारी-बारी से उपरोक्त संचालन पूरा किया।\n   * इनपुट: पांच पूर्णांकों की एक सरणी जो प्रत्येक बच्चे के पास मौजूद कैंडी की संख्या को दर्शाती है।\n   * आउटपुट: पांच पूर्णांकों की एक सरणी जो खेल खेलने के बाद प्रत्येक बच्चे के पास मौजूद कैंडी की संख्या को दर्शाती है।\n   */\n\n function distributeCandies(array $candies): array",
      "hu": "<?php\n\n/**\n   * Osszunk szét cukorkát öt gyerek között, akik egy kerek asztal körül ülnek.\n   * Minden gyerek kezdetben egy bizonyos számú cukorkával rendelkezik. Játszanak egy játékot, ahol az egyik gyerektől kezdve, az óramutató járásával megegyező irányban, minden gyerek három egyenlő részre osztja a cukorkáit, és ha vannak olyan extra cukorkák, amelyeket nem lehet egyenlően elosztani, a gyerek megeszi azokat. Minden gyerek megtart egy példányt, és a másik két példányt odaadja a szomszédainak. Az öt gyerek egymás után végrehajtja a fenti műveleteket.\n   * Bemenet: Egy öt egész számot tartalmazó tömb, amely az egyes gyerekeknél lévő cukorkák számát jelenti.\n   * Kimenet: Egy öt egész számot tartalmazó tömb, amely az egyes gyerekeknél lévő cukorkák számát jelenti a játék után.\n   */\n\n function distributeCandies(array $candies): array"
    },
    "prompt_bertscore": {
      "sq": "0.9678687550422723",
      "hy": "0.9598925534614354",
      "bn": "0.9673169598437574",
      "bg": "0.9646849086646642",
      "zh": "0.957357036647525",
      "fr": "0.9799198588900401",
      "de": "0.9761119158552202",
      "ha": "0.9489980743224339",
      "hi": "0.9646755730367554",
      "hu": "0.9462335366791903"
    },
    "canonical_solution": " {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}",
    "instruction": {
      "en": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nՏվեք PHP կոդի համառոտ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nBa da takaitaccen bayanin yare na halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function distributeCandies(array $candies): array\n {\n    $n = count($candies);\n    if ($n != 5) {\n        throw new InvalidArgumentException(\"Input must be an array of five integers.\");\n    }\n\n    // Calculate the candies to give and the new count for each child\n    for ($i = 0; $i < $n; $i++) {\n        $divided = intdiv($candies[$i], 3);\n  \n        $candies[$i] = $divided;\n        $leftNeighbor = ($i + $n - 1) % $n;\n        $rightNeighbor = ($i + 1) % $n;\n        $candies[$leftNeighbor]  += $divided;\n        $candies[$rightNeighbor] += $divided;\n    }\n    return $candies;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9458315087879756",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9032886551475423",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    $candies = distributeCandies([8, 9, 10, 11, 12]);\n    assert($candies === [11, 7, 9, 11, 6]);\n    \n    \n}\n\nmain();\n?>",
    "entry_point": "distributeCandies",
    "signature": "function distributeCandies(array $candies): array",
    "docstring": {
      "en": "Distribute candy to five children sitting around a round table.\nEach child initially has a certain number of candies. They play a game where, starting with one child, and going clockwise, each child divides their candy into three equal parts, and if there are extra candies that cannot be divided equally, the child eats them. Each child keeps one copy and gives the other two copies to their neighbors. The five children completed the above operations in turn.\nInput: An array of five integers representing the number of candies each child has.\nOutput: An array of five integers representing the number of candies each child has after playing the game.",
      "sq": "Shpërndani karamele për pesë fëmijë të ulur rreth një tryeze të rrumbullakët. \nSecili fëmijë fillimisht ka një numër të caktuar karamelesh. Ata luajnë një lojë ku, duke filluar me një fëmijë dhe duke shkuar në drejtim të akrepave të orës, secili fëmijë ndan karamelet e tij në tre pjesë të barabarta, dhe nëse ka karamele shtesë që nuk mund të ndahen në mënyrë të barabartë, fëmija i ha ato. Secili fëmijë mban një kopje dhe u jep dy kopjet e tjera fqinjëve të tij. Pesë fëmijët përfunduan operacionet e mësipërme me radhë.\nHyrja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë.\nDalja: Një varg me pesë numra të plotë që përfaqësojnë numrin e karameleve që ka secili fëmijë pasi të kenë luajtur lojën.",
      "hy": "Կոնֆետներ բաժանել հինգ երեխաներին, որոնք նստած են կլոր սեղանի շուրջ։  \nՅուրաքանչյուր երեխա սկզբում ունի որոշակի քանակությամբ կոնֆետներ։ Նրանք խաղ են խաղում, որտեղ, սկսելով մեկ երեխայից և շարժվելով ժամացույցի սլաքի ուղղությամբ, յուրաքանչյուր երեխա իր կոնֆետները բաժանում է երեք հավասար մասի, և եթե կան ավելորդ կոնֆետներ, որոնք հնարավոր չէ հավասարապես բաժանել, երեխան ուտում է դրանք։ Յուրաքանչյուր երեխա պահում է մեկ օրինակ և տալիս է մյուս երկու օրինակները իր հարևաններին։ Հինգ երեխաները հերթով կատարեցին վերը նշված գործողությունները։  \nՄուտք: Հինգ ամբողջ թվերից կազմված զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը։  \nԵլք: Հինգ ամբողջ թվերից կազմված զանգված, որը ներկայացնում է յուրաքանչյուր երեխայի ունեցած կոնֆետների քանակը խաղը խաղալուց հետո։",
      "bn": "পাঁচটি শিশুর মধ্যে মিষ্টি বিতরণ করুন যারা একটি গোল টেবিলের চারপাশে বসে আছে। \nপ্রত্যেক শিশুর প্রাথমিকভাবে নির্দিষ্ট সংখ্যক মিষ্টি থাকে। তারা একটি খেলা খেলে যেখানে, একটি শিশুর থেকে শুরু করে, এবং ঘড়ির কাঁটার দিকে ঘুরে, প্রত্যেক শিশু তাদের মিষ্টি তিনটি সমান অংশে ভাগ করে, এবং যদি অতিরিক্ত মিষ্টি থাকে যা সমানভাবে ভাগ করা যায় না, তবে শিশু সেগুলি খেয়ে ফেলে। প্রত্যেক শিশু একটি কপি রাখে এবং অন্য দুটি কপি তাদের প্রতিবেশীদের দেয়। পাঁচটি শিশু উপরের অপারেশনগুলি পালাক্রমে সম্পন্ন করে।\nInput: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা প্রতিটি শিশুর কাছে থাকা মিষ্টির সংখ্যা উপস্থাপন করে।\nOutput: পাঁচটি পূর্ণসংখ্যার একটি অ্যারে যা খেলা খেলার পর প্রতিটি শিশুর কাছে থাকা মিষ্টির সংখ্যা উপস্থাপন করে।",
      "bg": "Разпределете бонбони на пет деца, седящи около кръгла маса.  \nВсяко дете първоначално има определен брой бонбони. Те играят игра, в която, започвайки с едно дете и вървейки по часовниковата стрелка, всяко дете разделя своите бонбони на три равни части, и ако има излишни бонбони, които не могат да бъдат разделени равномерно, детето ги изяжда. Всяко дете запазва едно копие и дава другите две копия на своите съседи. Петте деца завършват гореописаните операции по ред.  \nВход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има.  \nИзход: Масив от пет цели числа, представляващи броя на бонбоните, които всяко дете има след играта.",
      "zh": "将糖果分发给围坐在圆桌旁的五个孩子。  \n每个孩子最初都有一定数量的糖果。他们玩一个游戏，从一个孩子开始，顺时针方向，每个孩子将他们的糖果分成三等份，如果有多余的糖果无法平均分配，孩子就吃掉它们。每个孩子保留一份，并将另外两份给他们的邻居。五个孩子依次完成上述操作。  \n输入：一个包含五个整数的数组，表示每个孩子拥有的糖果数量。  \n输出：一个包含五个整数的数组，表示游戏结束后每个孩子拥有的糖果数量。",
      "fr": "Distribuer des bonbons à cinq enfants assis autour d'une table ronde.  \nChaque enfant a initialement un certain nombre de bonbons. Ils jouent à un jeu où, en commençant par un enfant et en allant dans le sens des aiguilles d'une montre, chaque enfant divise ses bonbons en trois parts égales, et s'il reste des bonbons qui ne peuvent pas être divisés également, l'enfant les mange. Chaque enfant garde une copie et donne les deux autres copies à ses voisins. Les cinq enfants ont complété les opérations ci-dessus à tour de rôle.  \nEntrée : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a.  \nSortie : Un tableau de cinq entiers représentant le nombre de bonbons que chaque enfant a après avoir joué au jeu.",
      "de": "Verteile Süßigkeiten an fünf Kinder, die um einen runden Tisch sitzen. Jedes Kind hat anfangs eine bestimmte Anzahl von Süßigkeiten. Sie spielen ein Spiel, bei dem jedes Kind, beginnend mit einem Kind und im Uhrzeigersinn, seine Süßigkeiten in drei gleiche Teile aufteilt, und wenn es zusätzliche Süßigkeiten gibt, die nicht gleichmäßig verteilt werden können, isst das Kind sie. Jedes Kind behält eine Kopie und gibt die anderen zwei Kopien an seine Nachbarn. Die fünf Kinder führen die obigen Operationen der Reihe nach durch.\nEingabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind hat.\nAusgabe: Ein Array von fünf ganzen Zahlen, das die Anzahl der Süßigkeiten darstellt, die jedes Kind nach dem Spielen des Spiels hat.",
      "ha": "Raba alewa ga yara biyar da ke zaune a kusa da tebur mai zagaye. Kowane yaro a farko yana da wani adadin alewa. Suna yin wasa inda, farawa da yaro daya, kuma suna tafiya a agogo, kowane yaro yana raba alewarsa zuwa kashi uku daidai, kuma idan akwai karin alewa da ba za a iya raba su daidai ba, yaron yana cin su. Kowane yaro yana ajiye kwafin daya kuma yana ba da sauran kwafin biyu ga makwabtansa. Yaran biyar sun kammala ayyukan da ke sama a jere. \n\nShigarwa: Jerin lambobi guda biyar da ke wakiltar adadin alewa da kowane yaro ke da shi. \n\nFitarwa: Jerin lambobi guda biyar da ke wakiltar adadin alewa da kowane yaro ke da shi bayan sun buga wasan.",
      "hi": "पाँच बच्चों को गोल मेज के चारों ओर बैठाकर कैंडी वितरित करें।  \nप्रत्येक बच्चे के पास शुरू में कैंडी की एक निश्चित संख्या होती है। वे एक खेल खेलते हैं जिसमें, एक बच्चे से शुरू करके, और घड़ी की दिशा में चलते हुए, प्रत्येक बच्चा अपनी कैंडी को तीन समान भागों में विभाजित करता है, और यदि कुछ अतिरिक्त कैंडी हैं जिन्हें समान रूप से विभाजित नहीं किया जा सकता, तो बच्चा उन्हें खा लेता है। प्रत्येक बच्चा एक प्रति अपने पास रखता है और अन्य दो प्रतियाँ अपने पड़ोसियों को दे देता है। पाँच बच्चों ने बारी-बारी से उपरोक्त क्रियाएँ पूरी कीं।  \nइनपुट: पाँच पूर्णांकों की एक श्रृंखला जो प्रत्येक बच्चे के पास कैंडी की संख्या को दर्शाती है।  \nआउटपुट: पाँच पूर्णांकों की एक श्रृंखला जो खेल खेलने के बाद प्रत्येक बच्चे के पास कैंडी की संख्या को दर्शाती है।",
      "hu": "Osszunk szét cukorkát öt gyerek között, akik egy kerek asztal körül ülnek.\nMindegyik gyerek kezdetben egy bizonyos számú cukorkával rendelkezik. Egy játékot játszanak, ahol az egyik gyerekkel kezdve, és az óramutató járásával megegyező irányban haladva, minden gyerek három egyenlő részre osztja a cukorkáit, és ha vannak olyan cukorkák, amelyeket nem lehet egyenlően elosztani, akkor a gyerek megeszi azokat. Minden gyerek megtart egy példányt, és a másik két példányt odaadja a szomszédainak. Az öt gyerek sorban végrehajtotta a fenti műveleteket.\nBemenet: Egy öt egész számot tartalmazó tömb, amely azt jelzi, hogy hány cukorkája van kezdetben minden gyereknek.\nKimenet: Egy öt egész számot tartalmazó tömb, amely azt jelzi, hogy hány cukorkája van minden gyereknek a játék után."
    },
    "docstring_bertscore": {
      "sq": "0.968231454118042",
      "hy": "0.9586497231673001",
      "bn": "0.9456594948779994",
      "bg": "0.9732587890620351",
      "zh": "0.9263122998740582",
      "fr": "0.9818576968874164",
      "de": "0.9615088088719163",
      "ha": "0.9598995055247715",
      "hi": "0.9413212087258165",
      "hu": "0.952312818121144"
    }
  },
  {
    "task_id": "PHP/26",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\n * There are three types of pens available at prices of 6, 5, and 4 units respectively.\n * The objective is to buy as many pens as possible without any remaining class fund.\n * \n * Input: An integer representing the total class fund available.\n * Output: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n * \n * Example:\n * findPenPurchasePlan(10)\n * Output: [1, 0, 1] (One pen of 6 units and one pen of 4 units)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "sq": "<?php\n\n/**\n * Përcakton një plan për blerjen e stilolapsave për të maksimizuar numrin e stilolapsave të blerë me një shumë të caktuar fondi klase.\n * Ka tre lloje stilolapsash të disponueshme me çmime prej 6, 5 dhe 4 njësi përkatësisht.\n * Qëllimi është të blihen sa më shumë stilolapsa të jetë e mundur pa mbetur asnjë fond klase.\n * \n * Hyrja: Një numër i plotë që përfaqëson totalin e fondit të klasës në dispozicion.\n * Dalja: Një varg me tre numra të plotë që përfaqësojnë numrin e stilolapsave të blerë me 6 njësi, 5 njësi dhe 4 njësi, në atë renditje.\n * \n * Shembull:\n * findPenPurchasePlan(10)\n * Dalja: [1, 0, 1] (Një stilolaps prej 6 njësive dhe një stilolaps prej 4 njësive)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hy": "<?php\n\n/**\n * Որոշում է գրիչների գնման պլան՝ առավելագույն թվով գրիչներ գնելու համար տրված դասարանի ֆոնդով:\n * Առկա են երեք տեսակի գրիչներ՝ համապատասխանաբար 6, 5 և 4 միավոր գներով:\n * Նպատակն է գնել որքան հնարավոր է շատ գրիչներ՝ առանց մնացորդի դասարանի ֆոնդից:\n * \n * Մուտք: Ամբողջ թիվ, որը ներկայացնում է հասանելի դասարանի ընդհանուր ֆոնդը:\n * Ելք: Զանգված՝ երեք ամբողջ թվերով, որոնք ներկայացնում են գնված գրիչների քանակը 6, 5 և 4 միավորներով, այդ կարգով:\n * \n * Օրինակ:\n * findPenPurchasePlan(10)\n * Ելք: [1, 0, 1] (Մեկ գրիչ՝ 6 միավորով և մեկ գրիչ՝ 4 միավորով)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "bn": "<?php\n\n/**\n * একটি কলম ক্রয় পরিকল্পনা নির্ধারণ করে যা প্রদত্ত ক্লাস ফান্ডের পরিমাণ দিয়ে সর্বাধিক সংখ্যক কলম কেনা যায়।\n * এখানে তিন ধরনের কলম পাওয়া যায় যাদের দাম যথাক্রমে 6, 5, এবং 4 ইউনিট।\n * উদ্দেশ্য হল যত বেশি সম্ভব কলম কেনা যাতে কোনো ক্লাস ফান্ড অবশিষ্ট না থাকে।\n * \n * ইনপুট: উপলব্ধ মোট ক্লাস ফান্ডকে উপস্থাপনকারী একটি পূর্ণসংখ্যা।\n * আউটপুট: একটি অ্যারে যা তিনটি পূর্ণসংখ্যা নিয়ে গঠিত, যা 6 ইউনিট, 5 ইউনিট, এবং 4 ইউনিট মূল্যের কলমের ক্রয় সংখ্যা উপস্থাপন করে, এই ক্রমে।\n * \n * উদাহরণ:\n * findPenPurchasePlan(10)\n * আউটপুট: [1, 0, 1] (একটি 6 ইউনিটের কলম এবং একটি 4 ইউনিটের কলম)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "bg": "<?php\n\n/**\n * Определя план за покупка на химикалки, за да се максимизира броят на закупените химикалки с дадена сума от класния фонд.\n * Има три вида химикалки, налични на цени от 6, 5 и 4 единици съответно.\n * Целта е да се купят възможно най-много химикалки без да остава остатък от класния фонд.\n * \n * Вход: Цяло число, представляващо общата налична сума от класния фонд.\n * Изход: Масив с три цели числа, представляващи броя на закупените химикалки на 6 единици, 5 единици и 4 единици, в този ред.\n * \n * Пример:\n * findPenPurchasePlan(10)\n * Изход: [1, 0, 1] (Една химикалка от 6 единици и една химикалка от 4 единици)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "zh": "<?php\n\n/**\n * 确定一个购买钢笔的计划，以最大化使用给定的班级资金购买的钢笔数量。\n * 有三种类型的钢笔，价格分别为6、5和4单位。\n * 目标是在不剩余任何班级资金的情况下购买尽可能多的钢笔。\n * \n * 输入：一个整数，表示可用的班级资金总额。\n * 输出：一个包含三个整数的数组，分别表示以6单位、5单位和4单位价格购买的钢笔数量。\n * \n * 示例:\n * findPenPurchasePlan(10)\n * 输出: [1, 0, 1] (一支6单位的钢笔和一支4单位的钢笔)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "fr": "<?php\n\n/**\n * Détermine un plan d'achat de stylos pour maximiser le nombre de stylos achetés avec un montant donné du fonds de classe.\n * Il y a trois types de stylos disponibles aux prix de 6, 5 et 4 unités respectivement.\n * L'objectif est d'acheter autant de stylos que possible sans aucun reste du fonds de classe.\n * \n * Entrée : Un entier représentant le fonds total de classe disponible.\n * Sortie : Un tableau avec trois entiers représentant le nombre de stylos achetés à 6 unités, 5 unités, et 4 unités, dans cet ordre.\n * \n * Exemple :\n * findPenPurchasePlan(10)\n * Sortie : [1, 0, 1] (Un stylo de 6 unités et un stylo de 4 unités)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "de": "<?php\n\n/**\n * Bestimmt einen Kaufplan für Stifte, um die maximale Anzahl von Stiften mit einem gegebenen Klassengeldbetrag zu kaufen.\n * Es gibt drei Arten von Stiften, die zu Preisen von 6, 5 und 4 Einheiten erhältlich sind.\n * Das Ziel ist es, so viele Stifte wie möglich zu kaufen, ohne dass Klassengeld übrig bleibt.\n * \n * Eingabe: Eine ganze Zahl, die das verfügbare gesamte Klassengeld darstellt.\n * Ausgabe: Ein Array mit drei ganzen Zahlen, das die Anzahl der gekauften Stifte zu 6 Einheiten, 5 Einheiten und 4 Einheiten in dieser Reihenfolge darstellt.\n * \n * Beispiel:\n * findPenPurchasePlan(10)\n * Ausgabe: [1, 0, 1] (Ein Stift zu 6 Einheiten und ein Stift zu 4 Einheiten)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "ha": "<?php\n\n/**\n * Yana tantance shirin sayen alƙalami don samun mafi yawan adadin alƙaluma da za a saya da wani adadin kuɗin aji.\n * Akwai nau'ikan alƙaluma guda uku da ake dasu a farashin raka'a 6, 5, da 4 bi da bi.\n * Manufar ita ce a sayi alƙaluma da yawa gwargwadon iko ba tare da saura kuɗin aji ba.\n * \n * Shigarwa: Wani cikakken lamba wanda ke wakiltar jimillar kuɗin aji da ake da shi.\n * Fitarwa: Wani tsari tare da cikakkun lambobi uku da ke wakiltar adadin alƙaluman da aka saya a 6 raka'a, 5 raka'a, da 4 raka'a, a wannan tsari.\n * \n * Misali:\n * findPenPurchasePlan(10)\n * Fitarwa: [1, 0, 1] (Alƙalami ɗaya na 6 raka'a da alƙalami ɗaya na 4 raka'a)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hi": "<?php\n\n/**\n * एक पेन खरीद योजना निर्धारित करता है ताकि दिए गए कक्षा निधि के साथ खरीदे गए पेन की संख्या अधिकतम हो सके।\n * तीन प्रकार के पेन उपलब्ध हैं जिनकी कीमत क्रमशः 6, 5, और 4 यूनिट है।\n * उद्देश्य यह है कि जितने अधिक पेन खरीदे जा सकें बिना किसी शेष कक्षा निधि के।\n * \n * इनपुट: एक पूर्णांक जो उपलब्ध कुल कक्षा निधि का प्रतिनिधित्व करता है।\n * आउटपुट: एक सरणी जिसमें तीन पूर्णांक होते हैं जो क्रमशः 6 यूनिट, 5 यूनिट, और 4 यूनिट पर खरीदे गए पेन की गिनती का प्रतिनिधित्व करते हैं।\n * \n * उदाहरण:\n * findPenPurchasePlan(10)\n * आउटपुट: [1, 0, 1] (एक पेन 6 यूनिट का और एक पेन 4 यूनिट का)\n */\nfunction findPenPurchasePlan(int $totalFund): array ",
      "hu": "<?php\n\n/**\n * Meghatározza a tollvásárlási tervet, hogy a lehető legtöbb tollat vásároljuk meg a rendelkezésre álló osztálypénzből.\n * Háromféle toll érhető el, amelyek ára rendre 6, 5 és 4 egység.\n * A cél az, hogy a lehető legtöbb tollat vásároljuk meg úgy, hogy ne maradjon meg osztálypénz.\n * \n * Bemenet: Egy egész szám, amely a rendelkezésre álló teljes osztálypénzt jelképezi.\n * Kimenet: Egy tömb három egész számmal, amelyek rendre a 6 egység, 5 egység és 4 egység áron vásárolt tollak számát jelzik.\n * \n * Példa:\n * findPenPurchasePlan(10)\n * Kimenet: [1, 0, 1] (Egy toll 6 egységért és egy toll 4 egységért)\n */\nfunction findPenPurchasePlan(int $totalFund): array "
    },
    "prompt_bertscore": {
      "sq": "0.9807874763944004",
      "hy": "0.955335575259733",
      "bn": "0.9466510577401256",
      "bg": "0.9675352546325148",
      "zh": "0.945189932657233",
      "fr": "0.9827221363056803",
      "de": "0.9647309909130642",
      "ha": "0.9520063314432072",
      "hi": "0.9667055755309321",
      "hu": "0.9334687538723642"
    },
    "canonical_solution": "{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}",
    "instruction": {
      "en": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字符数不超过500个。",
      "fr": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nBa da takaitaccen bayani a cikin yaren halitta (docstring) na lambar PHP a Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findPenPurchasePlan(int $totalFund): array\n{\n    $pensAt6Units = 0;\n    $pensAt5Units = 0;\n    $pensAt4Units = 0;\n\n    switch ($totalFund % 4) {\n        case 0:\n            $pensAt4Units = $totalFund / 4;\n            break;\n        case 1:\n            if ($totalFund >= 9) { // To avoid negative counts\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 9) / 4;\n            }\n            break;\n        case 2:\n            if ($totalFund >= 6) { // To avoid negative counts\n                $pensAt6Units = 1;\n                $pensAt4Units = ($totalFund - 6) / 4;\n            }\n            break;\n        case 3:\n            if ($totalFund >= 15) { // Ensures no negative counts\n                $pensAt6Units = 1;\n                $pensAt5Units = 1;\n                $pensAt4Units = ($totalFund - 15) / 4;\n            }\n            break;\n    }\n    echo $pensAt6Units;\n    echo \"\\n\";\n    echo $pensAt5Units;\n    echo \"\\n\";\n    echo $pensAt4Units;\n    echo \"\\n\";\n    return [$pensAt6Units, $pensAt5Units, $pensAt4Units];\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9195475449871531",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(findPenPurchasePlan(10) === [1, 0, 1]);\n    assert(findPenPurchasePlan(14) === [1, 0, 2]);\n    assert(findPenPurchasePlan(24) === [0, 0, 6]);\n    \n}\n\nmain();\n?>",
    "entry_point": "findPenPurchasePlan",
    "signature": "function findPenPurchasePlan(int $totalFund): array",
    "docstring": {
      "en": "Determines a pen purchase plan to maximize the number of pens bought with a given amount of class fund.\nThere are three types of pens available at prices of 6, 5, and 4 units respectively.\nThe objective is to buy as many pens as possible without any remaining class fund.\n\nInput: An integer representing the total class fund available.\nOutput: An array with three integers representing the count of pens bought at 6 units, 5 units, and 4 units, in that order.\n\nExample:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (One pen of 6 units and one pen of 4 units)",
      "sq": "Përcakton një plan blerjeje për stilolapsa për të maksimizuar numrin e stilolapsave të blerë me një shumë të caktuar fondi të klasës.\nKa tre lloje stilolapsash të disponueshëm me çmime përkatësisht 6, 5 dhe 4 njësi.\nObjektivi është të blihen sa më shumë stilolapsa të jetë e mundur pa mbetur asnjë fond i klasës.\n\nInput: Një numër i plotë që përfaqëson totalin e fondit të klasës të disponueshëm.\nOutput: Një varg me tre numra të plotë që përfaqësojnë numrin e stilolapsave të blerë me 6 njësi, 5 njësi dhe 4 njësi, në atë rend.\n\nShembull:\nfindPenPurchasePlan(10)\nOutput: [1, 0, 1] (Një stilolaps prej 6 njësish dhe një stilolaps prej 4 njësish)",
      "hy": "Գտնում է գրիչների գնման պլան՝ առավելագույն քանակությամբ գրիչներ գնելու համար տրված դասարանի ֆոնդով:\nԿա երեք տեսակի գրիչ՝ համապատասխանաբար 6, 5 և 4 միավոր գներով:\nՆպատակն է գնել հնարավորինս շատ գրիչներ՝ առանց մնացորդային դասարանի ֆոնդի:\n\nՄուտք: Ամբողջ թիվ, որը ներկայացնում է հասանելի դասարանի ֆոնդի ընդհանուր գումարը:\nԵլք: Զանգված երեք ամբողջ թվերով, որոնք ներկայացնում են գնված գրիչների քանակը՝ 6 միավոր, 5 միավոր և 4 միավոր, այդ կարգով:\n\nՕրինակ:\nfindPenPurchasePlan(10)\nԵլք: [1, 0, 1] (Մեկ գրիչ 6 միավորով և մեկ գրիչ 4 միավորով)",
      "bn": "ক্লাসের তহবিলের একটি নির্দিষ্ট পরিমাণ দিয়ে যত বেশি সম্ভব কলম কেনার জন্য একটি কলম ক্রয় পরিকল্পনা নির্ধারণ করে। \n৬, ৫, এবং ৪ ইউনিট মূল্যের তিন ধরনের কলম পাওয়া যায়। \nউদ্দেশ্য হল কোনো অবশিষ্ট ক্লাস তহবিল ছাড়াই যত বেশি সম্ভব কলম কেনা।\n\nইনপুট: উপলব্ধ মোট ক্লাস তহবিলের প্রতিনিধিত্বকারী একটি পূর্ণসংখ্যা।\nআউটপুট: তিনটি পূর্ণসংখ্যার একটি অ্যারে যা ৬ ইউনিট, ৫ ইউনিট এবং ৪ ইউনিটে কেনা কলমের সংখ্যা যথাক্রমে উপস্থাপন করে।\n\nউদাহরণ:\nfindPenPurchasePlan(10)\nআউটপুট: [1, 0, 1] (৬ ইউনিটের একটি কলম এবং ৪ ইউনিটের একটি কলম)",
      "bg": "Определя план за покупка на химикалки, за да се максимизира броят на закупените химикалки с дадена сума от класния фонд. Има три вида химикалки, налични на цени съответно от 6, 5 и 4 единици. Целта е да се купят възможно най-много химикалки без да остава остатък от класния фонд.\n\nВход: Цяло число, представляващо общия наличен класен фонд.\nИзход: Масив с три цели числа, представляващи броя на закупените химикалки на 6 единици, 5 единици и 4 единици, в този ред.\n\nПример:\nfindPenPurchasePlan(10)\nИзход: [1, 0, 1] (Една химикалка от 6 единици и една химикалка от 4 единици)",
      "zh": "确定购买钢笔的计划，以最大化用给定的班级基金购买的钢笔数量。\n有三种类型的钢笔，价格分别为6、5和4单位。\n目标是在没有剩余班级基金的情况下购买尽可能多的钢笔。\n\n输入：一个整数，表示可用的班级基金总额。\n输出：一个包含三个整数的数组，分别表示以6单位、5单位和4单位购买的钢笔数量。\n\n示例：\nfindPenPurchasePlan(10)\n输出：[1, 0, 1] （一支6单位的钢笔和一支4单位的钢笔）",
      "fr": "Détermine un plan d'achat de stylos pour maximiser le nombre de stylos achetés avec un montant donné du fonds de classe.\nIl y a trois types de stylos disponibles aux prix de 6, 5 et 4 unités respectivement.\nL'objectif est d'acheter autant de stylos que possible sans aucun reste du fonds de classe.\n\nEntrée : Un entier représentant le fonds de classe total disponible.\nSortie : Un tableau avec trois entiers représentant le nombre de stylos achetés à 6 unités, 5 unités et 4 unités, dans cet ordre.\n\nExemple :\nfindPenPurchasePlan(10)\nSortie : [1, 0, 1] (Un stylo de 6 unités et un stylo de 4 unités)",
      "de": "Bestimmt einen Kaufplan für Stifte, um die maximale Anzahl an Stiften mit einem gegebenen Klassenbudget zu kaufen.\nEs gibt drei Arten von Stiften, die zu Preisen von 6, 5 und 4 Einheiten erhältlich sind.\nDas Ziel ist, so viele Stifte wie möglich zu kaufen, ohne dass ein Restbetrag des Klassenbudgets übrig bleibt.\n\nEingabe: Eine ganze Zahl, die das verfügbare Gesamtbudget der Klasse darstellt.\nAusgabe: Ein Array mit drei ganzen Zahlen, die die Anzahl der gekauften Stifte zu 6 Einheiten, 5 Einheiten und 4 Einheiten in dieser Reihenfolge darstellen.\n\nBeispiel:\nfindPenPurchasePlan(10)\nAusgabe: [1, 0, 1] (Ein Stift zu 6 Einheiten und ein Stift zu 4 Einheiten)",
      "ha": "Yana ƙayyade shirin sayen alƙalami don haɓaka yawan alƙaluma da aka saya tare da adadin kuɗin aji da aka bayar.\nAkwai nau'ikan alƙaluma guda uku da ake dasu a farashin raka'a 6, 5, da 4 bi da bi.\nManufar ita ce a sayi alƙaluma da yawa gwargwadon iko ba tare da wani saura na kuɗin aji ba.\n\nShigar: Wani cikakken lamba da ke wakiltar jimillar kuɗin aji da ake da shi.\nFitarwa: Wani tsari tare da cikakkun lambobi uku da ke wakiltar adadin alƙaluma da aka saya a farashin raka'a 6, 5, da 4, a wannan tsari.\n\nMisali:\nfindPenPurchasePlan(10)\nFitarwa: [1, 0, 1] (Ɗaya daga cikin alƙaluma na raka'a 6 da ɗaya daga cikin alƙaluma na raka'a 4)",
      "hi": "कक्षा निधि की एक निर्धारित राशि के साथ खरीदे गए पेन की संख्या को अधिकतम करने के लिए एक पेन खरीद योजना निर्धारित करता है। \nतीन प्रकार के पेन उपलब्ध हैं जिनकी कीमत क्रमशः 6, 5, और 4 इकाइयाँ हैं। \nउद्देश्य यह है कि बिना कोई शेष कक्षा निधि के जितने अधिक पेन खरीदे जा सकें, उतने खरीदें।\n\nइनपुट: एक पूर्णांक जो उपलब्ध कुल कक्षा निधि का प्रतिनिधित्व करता है।\nआउटपुट: तीन पूर्णांकों की एक सरणी जो क्रमशः 6 इकाइयों, 5 इकाइयों, और 4 इकाइयों पर खरीदे गए पेन की संख्या का प्रतिनिधित्व करती है।\n\nउदाहरण:\nfindPenPurchasePlan(10)\nआउटपुट: [1, 0, 1] (छह इकाइयों का एक पेन और चार इकाइयों का एक पेन)",
      "hu": "Meghatározza a tollvásárlási tervet, hogy maximalizálja a megvásárolt tollak számát a rendelkezésre álló osztálypénzből.\nHáromféle toll érhető el, amelyek ára rendre 6, 5 és 4 egység.\nA cél, hogy a lehető legtöbb tollat vásároljuk meg úgy, hogy ne maradjon fennmaradó osztálypénz.\n\nBemenet: Egy egész szám, amely a rendelkezésre álló teljes osztálypénzt jelképezi.\nKimenet: Egy tömb három egész számmal, amelyek az egyes tollak számát jelölik, amelyeket 6, 5 és 4 egységért vásároltak, ebben a sorrendben.\n\nPélda:\nfindPenPurchasePlan(10)\nKimenet: [1, 0, 1] (Egy toll 6 egységért és egy toll 4 egységért)"
    },
    "docstring_bertscore": {
      "sq": "0.9743363588791494",
      "hy": "0.9511937345543935",
      "bn": "0.9381097527252443",
      "bg": "0.9610164041573308",
      "zh": "0.9345802894846355",
      "fr": "0.9732113164009677",
      "de": "0.94394948592767",
      "ha": "0.905353616588781",
      "hi": "0.9450433434360292",
      "hu": "0.9237380501358461"
    }
  },
  {
    "task_id": "PHP/27",
    "prompt": {
      "en": "<?php\n\n/**\n    * Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\n    * This problem involves finding the minimum value of x (where x > 1) such that when x divides each of the \n    * three integers a, b, and c, the remainders are the same.\n    * Input: Three positive integers a, b, and c, each not exceeding 1,000,000.\n    * Output: Returns the smallest integer value of x that satisfies the condition.\n    * Example: For a = 300, b = 262, c = 205, the function returns 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "sq": "<?php\n\n/**\n    * Gjen pjesëtuesin më të vogël të plotë më të madh se 1 që jep të njëjtin mbetje kur pjesëton tre numra të dhënë.\n    * Ky problem përfshin gjetjen e vlerës minimale të x (ku x > 1) të tillë që kur x pjesëton secilin nga \n    * tre numrat e plotë a, b, dhe c, mbetjet janë të njëjta.\n    * Hyrja: Tre numra të plotë pozitivë a, b, dhe c, secili nuk e kalon 1,000,000.\n    * Dalja: Kthen vlerën më të vogël të plotë të x që plotëson kushtin.\n    * Shembull: Për a = 300, b = 262, c = 205, funksioni kthen 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hy": "<?php\n\n/**\n    * Գտնում է ամենափոքր ամբողջ թվային բաժանարարը, որն ավելի մեծ է 1-ից և տալիս է նույն մնացորդը երեք տրված թվերը բաժանելիս։\n    * Այս խնդիրը ներառում է x-ի նվազագույն արժեքի գտնումը (որտեղ x > 1), այնպես, որ երբ x-ը բաժանում է \n    * երեք ամբողջ թվերը՝ a, b և c, մնացորդները լինեն նույնը։\n    * Մուտք: Երեք դրական ամբողջ թվեր՝ a, b և c, որոնցից յուրաքանչյուրը չի գերազանցում 1,000,000-ը։\n    * Ելք: Վերադարձնում է x-ի ամենափոքր ամբողջ թվային արժեքը, որը բավարարում է պայմանը։\n    * Օրինակ: a = 300, b = 262, c = 205 համար, ֆունկցիան վերադարձնում է 19։\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "bn": "<?php\n\n/**\n    * তিনটি প্রদত্ত সংখ্যাকে ভাগ করার সময় একই অবশিষ্টাংশ প্রদানকারী 1 এর চেয়ে বড় ক্ষুদ্রতম পূর্ণসংখ্যা বিভাজক খুঁজে বের করে।\n    * এই সমস্যাটি x এর সর্বনিম্ন মান খুঁজে বের করার সাথে সম্পর্কিত (যেখানে x > 1) যাতে করে x দ্বারা \n    * তিনটি পূর্ণসংখ্যা a, b, এবং c কে ভাগ করলে অবশিষ্টাংশ একই হয়।\n    * ইনপুট: তিনটি ধনাত্মক পূর্ণসংখ্যা a, b, এবং c, প্রতিটি 1,000,000 এর বেশি নয়।\n    * আউটপুট: x এর ক্ষুদ্রতম পূর্ণসংখ্যা মান প্রদান করে যা শর্তটি পূরণ করে।\n    * উদাহরণ: a = 300, b = 262, c = 205 এর জন্য, ফাংশনটি 19 প্রদান করে।\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "bg": "<?php\n\n/**\n    * Намира най-малкия делител, по-голям от 1, който дава същия остатък при деление на три дадени числа.\n    * Този проблем включва намирането на минималната стойност на x (където x > 1), така че когато x дели \n    * трите цели числа a, b и c, остатъците да са еднакви.\n    * Вход: Три положителни цели числа a, b и c, всяко от които не надвишава 1,000,000.\n    * Изход: Връща най-малката целочислена стойност на x, която удовлетворява условието.\n    * Пример: За a = 300, b = 262, c = 205, функцията връща 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "zh": "<?php\n\n/**\n    * 查找大于1的最小整数除数，该除数在除以三个给定数字时产生相同的余数。\n    * 这个问题涉及找到最小的x值（其中x > 1），使得当x分别除以三个整数a, b和c时，余数相同。\n    * 输入：三个正整数a, b和c，每个不超过1,000,000。\n    * 输出：返回满足条件的最小整数x值。\n    * 示例：对于a = 300, b = 262, c = 205，函数返回19。\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "fr": "<?php\n\n/**\n    * Trouve le plus petit diviseur entier supérieur à 1 qui donne le même reste lors de la division de trois nombres donnés.\n    * Ce problème consiste à trouver la valeur minimale de x (où x > 1) telle que lorsque x divise chacun des \n    * trois entiers a, b et c, les restes sont les mêmes.\n    * Entrée : Trois entiers positifs a, b et c, chacun ne dépassant pas 1 000 000.\n    * Sortie : Renvoie la plus petite valeur entière de x qui satisfait la condition.\n    * Exemple : Pour a = 300, b = 262, c = 205, la fonction renvoie 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "de": "<?php\n\n/**\n    * Findet den kleinsten ganzzahligen Teiler größer als 1, der beim Teilen von drei gegebenen Zahlen denselben Rest ergibt.\n    * Dieses Problem beinhaltet das Finden des minimalen Wertes von x (wobei x > 1), sodass, wenn x jede der \n    * drei ganzen Zahlen a, b und c teilt, die Reste gleich sind.\n    * Eingabe: Drei positive ganze Zahlen a, b und c, die jeweils 1.000.000 nicht überschreiten.\n    * Ausgabe: Gibt den kleinsten ganzzahligen Wert von x zurück, der die Bedingung erfüllt.\n    * Beispiel: Für a = 300, b = 262, c = 205 gibt die Funktion 19 zurück.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "ha": "<?php\n\n/**\n    * Nemi mafi ƙarancin mai raba lamba mai girma fiye da 1 wanda ke ba da saura iri ɗaya lokacin da aka raba lambobi guda uku da aka bayar.\n    * Wannan matsalar tana da alaƙa da neman mafi ƙarancin ƙimar x (inda x > 1) ta yadda lokacin da x ya raba kowanne daga cikin \n    * lambobi uku a, b, da c, saura iri ɗaya ne.\n    * Shigarwa: Lambobi uku masu kyau a, b, da c, kowanne ba ya wuce 1,000,000.\n    * Fitarwa: Mayar da mafi ƙarancin ƙimar x da ke cika yanayin.\n    * Misali: Don a = 300, b = 262, c = 205, aikin yana mayar da 19.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hi": "<?php\n\n/**\n    * तीन दिए गए संख्याओं को विभाजित करने पर समान शेषफल देने वाला 1 से बड़ा सबसे छोटा पूर्णांक भाजक खोजता है।\n    * इस समस्या में x का न्यूनतम मान खोजना शामिल है (जहाँ x > 1) ताकि जब x तीन पूर्णांक a, b, और c में से प्रत्येक को विभाजित करता है, तो शेषफल समान होते हैं।\n    * इनपुट: तीन धनात्मक पूर्णांक a, b, और c, प्रत्येक 1,000,000 से अधिक नहीं।\n    * आउटपुट: x के सबसे छोटे पूर्णांक मान को लौटाता है जो शर्त को पूरा करता है।\n    * उदाहरण: a = 300, b = 262, c = 205 के लिए, फ़ंक्शन 19 लौटाता है।\n*/\n\nfunction findMinimumDivisor($a, $b, $c)",
      "hu": "<?php\n\n/**\n    * Megkeresi a legkisebb 1-nél nagyobb egész számú osztót, amely ugyanazt a maradékot adja, amikor három adott számot osztunk vele.\n    * Ez a probléma annak a minimális x értéknek a megtalálását jelenti (ahol x > 1), amely esetén, ha x osztja az \n    * a, b és c három egész számot, a maradékok azonosak.\n    * Bemenet: Három pozitív egész szám, a, b és c, amelyek mindegyike nem haladja meg az 1 000 000-t.\n    * Kimenet: Visszaadja az x legkisebb egész értékét, amely kielégíti a feltételt.\n    * Példa: Ha a = 300, b = 262, c = 205, a függvény 19-et ad vissza.\n*/\n\nfunction findMinimumDivisor($a, $b, $c)"
    },
    "prompt_bertscore": {
      "sq": "0.9965231738103654",
      "hy": "0.9871962856384912",
      "bn": "0.9616800282603684",
      "bg": "0.9849416321833641",
      "zh": "0.9649820597146923",
      "fr": "0.994221246324552",
      "de": "0.9871241828101754",
      "ha": "0.9620772890224382",
      "hi": "0.9922979083449912",
      "hu": "0.9806289693503346"
    },
    "canonical_solution": " {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}",
    "instruction": {
      "en": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nBa da taƙaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 अक्षर हों।",
      "hu": "function findMinimumDivisor($a, $b, $c)\n {\n    $minDiff = min(abs($a - $b), abs($b - $c), abs($c - $a));\n\n    for ($x = 2; $x <= $minDiff; $x++) {\n        if ($a % $x === $b % $x && $b % $x === $c % $x) {\n            return $x;\n        }\n    }\n\n    // In case no common divisor is found, which should not happen as per the problem's guarantee.\n    return -1;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9195475449871531",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    assert(findMinimumDivisor(300, 262, 205) === 19);\n    assert(findMinimumDivisor(100, 200, 300) === 2);\n    assert(findMinimumDivisor(15, 25, 35) === 2);\n    assert(findMinimumDivisor(7, 14, 21) === 7);\n    assert(findMinimumDivisor(9, 18, 27) === 3);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMinimumDivisor",
    "signature": "function findMinimumDivisor($a, $b, $c)",
    "docstring": {
      "en": "Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nThis problem involves finding the minimum value of x (where x > 1) such that when x divides each of the\nthree integers a, b, and c, the remainders are the same.\nInput: Three positive integers a, b, and c, each not exceeding 1,000,000.\nOutput: Returns the smallest integer value of x that satisfies the condition.\nExample: For a = 300, b = 262, c = 205, the function returns 19.",
      "sq": "Gjen pjestuesin më të vogël të plotë më të madh se 1 që jep të njëjtin mbetje kur ndan tre numra të dhënë.\nKy problem përfshin gjetjen e vlerës minimale të x (ku x > 1) të tillë që kur x ndan secilin nga\ntre numrat e plotë a, b, dhe c, mbetjet janë të njëjta.\nInput: Tre numra të plotë pozitivë a, b, dhe c, secili që nuk e kalon 1,000,000.\nOutput: Kthen vlerën më të vogël të plotë të x që plotëson kushtin.\nShembull: Për a = 300, b = 262, c = 205, funksioni kthen 19.",
      "hy": "Գտնում է ամենափոքր ամբողջ թվային բաժանարարը, որը մեծ է 1-ից և տալիս է նույն մնացորդը, երբ բաժանում է երեք տրված թվերը:\nԱյս խնդիրը ներառում է x-ի նվազագույն արժեքը գտնելը (որտեղ x > 1), այնպես, որ երբ x-ը բաժանում է\nերեք ամբողջ թվերը՝ a, b և c, մնացորդները նույնն են:\nՄուտք: Երեք դրական ամբողջ թվեր՝ a, b և c, յուրաքանչյուրը չգերազանցող 1,000,000:\nԵլք: Վերադարձնում է x-ի ամենափոքր ամբողջ թվային արժեքը, որը բավարարում է պայմանը:\nՕրինակ: a = 300, b = 262, c = 205 համար, ֆունկցիան վերադարձնում է 19:",
      "bn": "Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers.\nএই সমস্যাটি এমন একটি x এর সর্বনিম্ন মান খুঁজে বের করার সাথে সম্পর্কিত (যেখানে x > 1) যাতে x দ্বারা তিনটি পূর্ণসংখ্যা a, b, এবং c ভাগ করলে অবশিষ্টাংশ একই হয়।\nInput: তিনটি ধনাত্মক পূর্ণসংখ্যা a, b, এবং c, প্রতিটি 1,000,000 এর বেশি নয়।\nOutput: এমন x এর সর্বনিম্ন পূর্ণসংখ্যা মান প্রদান করে যা শর্তটি পূরণ করে।\nExample: a = 300, b = 262, c = 205 এর জন্য, ফাংশনটি 19 প্রদান করে।",
      "bg": "Намира най-малкия делител, по-голям от 1, който дава същия остатък при деление на три дадени числа.\nТози проблем включва намирането на минималната стойност на x (където x > 1), така че когато x дели всяко от трите цели числа a, b и c, остатъците да са еднакви.\nВход: Три положителни цели числа a, b и c, всяко от които не надвишава 1,000,000.\nИзход: Връща най-малката целочислена стойност на x, която удовлетворява условието.\nПример: За a = 300, b = 262, c = 205, функцията връща 19.",
      "zh": "找到大于1的最小整数除数，使其在除以三个给定数字时产生相同的余数。\n这个问题涉及找到最小的x值（其中x > 1），使得当x分别除以三个整数a、b和c时，余数相同。\n输入：三个正整数a、b和c，每个数不超过1,000,000。\n输出：返回满足条件的最小整数x值。\n示例：对于a = 300, b = 262, c = 205，函数返回19。",
      "fr": "Trouve le plus petit diviseur entier supérieur à 1 qui donne le même reste lors de la division de trois nombres donnés.\nCe problème consiste à trouver la valeur minimale de x (où x > 1) telle que lorsque x divise chacun des trois entiers a, b, et c, les restes soient les mêmes.\nEntrée : Trois entiers positifs a, b, et c, chacun ne dépassant pas 1 000 000.\nSortie : Renvoie la plus petite valeur entière de x qui satisfait la condition.\nExemple : Pour a = 300, b = 262, c = 205, la fonction renvoie 19.",
      "de": "Findet den kleinsten ganzzahligen Teiler größer als 1, der beim Teilen von drei gegebenen Zahlen denselben Rest ergibt. Dieses Problem beinhaltet das Finden des minimalen Werts von x (wobei x > 1), sodass beim Teilen von x durch jede der drei ganzen Zahlen a, b und c die Reste gleich sind.\n\nEingabe: Drei positive ganze Zahlen a, b und c, die jeweils 1.000.000 nicht überschreiten.\n\nAusgabe: Gibt den kleinsten ganzzahligen Wert von x zurück, der die Bedingung erfüllt.\n\nBeispiel: Für a = 300, b = 262, c = 205 gibt die Funktion 19 zurück.",
      "ha": "Finds the smallest integer divisor greater than 1 that yields the same remainder when dividing three given numbers. Wannan matsalar tana da nasaba da neman ƙimar x mafi ƙaranci (inda x > 1) ta yadda lokacin da x ya raba kowanne daga cikin lambobi uku a, b, da c, ragowar suna daidai. \n\nInput: Lambobi uku masu kyau a, b, da c, kowanne ba ya wuce 1,000,000. \n\nOutput: Yana dawowa da ƙimar x mafi ƙaranci wanda ya cika yanayin. \n\nExample: Ga a = 300, b = 262, c = 205, aikin yana dawowa da 19.",
      "hi": "तीन दिए गए संख्याओं को विभाजित करते समय समान शेषफल देने वाला 1 से बड़ा सबसे छोटा पूर्णांक भाजक खोजता है।\nयह समस्या x का न्यूनतम मान खोजने से संबंधित है (जहां x > 1) ताकि जब x तीन पूर्णांकों a, b, और c में से प्रत्येक को विभाजित करता है, तो शेषफल समान होते हैं।\nइनपुट: तीन धनात्मक पूर्णांक a, b, और c, प्रत्येक 1,000,000 से अधिक नहीं।\nआउटपुट: वह सबसे छोटा पूर्णांक मान x लौटाता है जो शर्त को संतुष्ट करता है।\nउदाहरण: a = 300, b = 262, c = 205 के लिए, फ़ंक्शन 19 लौटाता है।",
      "hu": "Megtalálja a legkisebb 1-nél nagyobb egész számú osztót, amely ugyanazt a maradékot adja, amikor három adott számot osztunk el vele.\nEz a probléma az x minimális értékének megtalálását jelenti (ahol x > 1), úgy, hogy amikor x osztja a három egész számot, a-t, b-t és c-t, a maradékok megegyeznek.\nBemenet: Három pozitív egész szám, a, b és c, amelyek mindegyike nem haladja meg az 1 000 000-t.\nKimenet: Visszaadja az x legkisebb egész értékét, amely kielégíti a feltételt.\nPélda: Ha a = 300, b = 262, c = 205, a függvény 19-et ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9908520778014382",
      "hy": "0.9891907332944624",
      "bn": "0.9464450780349924",
      "bg": "0.9948107812954635",
      "zh": "0.9591190867576855",
      "fr": "0.9893182539990868",
      "de": "0.9716888145303353",
      "ha": "0.9908069887049433",
      "hi": "0.9761137035286496",
      "hu": "0.9731441793321779"
    }
  },
  {
    "task_id": "PHP/28",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the minimum number of apples required to be distributed among children.\n * Each child should receive a different number of apples and every child must receive at least one apple.\n * The total count of children is a positive integer not greater than 1000.\n * Input: An integer representing the number of children.\n * Output: An integer representing the minimum number of apples required.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin minimal të mollëve që duhet të shpërndahen ndërmjet fëmijëve.\n * Çdo fëmijë duhet të marrë një numër të ndryshëm mollësh dhe çdo fëmijë duhet të marrë të paktën një mollë.\n * Numri total i fëmijëve është një numër i plotë pozitiv jo më i madh se 1000.\n * Input: Një numër i plotë që përfaqëson numrin e fëmijëve.\n * Output: Një numër i plotë që përfaqëson numrin minimal të mollëve të kërkuara.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է երեխաների միջև բաշխվող խնձորների նվազագույն քանակը:\n * Յուրաքանչյուր երեխա պետք է ստանա տարբեր քանակությամբ խնձոր և յուրաքանչյուր երեխա պետք է ստանա առնվազն մեկ խնձոր:\n * Երեխաների ընդհանուր քանակը դրական ամբողջ թիվ է, որը չի գերազանցում 1000-ը:\n * Մուտք: Ամբողջ թիվ, որը ներկայացնում է երեխաների քանակը:\n * Ելք: Ամբողջ թիվ, որը ներկայացնում է պահանջվող խնձորների նվազագույն քանակը:\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "bn": "<?php\n\n\n/**\n * বাচ্চাদের মধ্যে বিতরণের জন্য প্রয়োজনীয় সর্বনিম্ন সংখ্যক আপেল গণনা করে।\n * প্রতিটি শিশু ভিন্ন সংখ্যক আপেল পাবে এবং প্রতিটি শিশুকে অন্তত একটি আপেল পেতেই হবে।\n * শিশুদের মোট সংখ্যা একটি ধনাত্মক পূর্ণসংখ্যা যা 1000 এর বেশি নয়।\n * ইনপুট: বাচ্চাদের সংখ্যা নির্দেশকারী একটি পূর্ণসংখ্যা।\n * আউটপুট: প্রয়োজনীয় সর্বনিম্ন সংখ্যক আপেল নির্দেশকারী একটি পূর্ণসংখ্যা।\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява минималния брой ябълки, които трябва да бъдат разпределени между децата.\n * Всяко дете трябва да получи различен брой ябълки и всяко дете трябва да получи поне една ябълка.\n * Общият брой на децата е положително цяло число, не по-голямо от 1000.\n * Вход: Цяло число, представляващо броя на децата.\n * Изход: Цяло число, представляващо минималния брой необходими ябълки.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "zh": "<?php\n\n\n/**\n * 计算分配给孩子们所需的最少苹果数量。\n * 每个孩子应该收到不同数量的苹果，并且每个孩子至少要收到一个苹果。\n * 孩子的总数是一个不大于1000的正整数。\n * 输入：一个整数，表示孩子的数量。\n * 输出：一个整数，表示所需的最少苹果数量。\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre minimum de pommes à distribuer parmi les enfants.\n * Chaque enfant doit recevoir un nombre différent de pommes et chaque enfant doit recevoir au moins une pomme.\n * Le nombre total d'enfants est un entier positif ne dépassant pas 1000.\n * Entrée : Un entier représentant le nombre d'enfants.\n * Sortie : Un entier représentant le nombre minimum de pommes requis.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die minimale Anzahl von Äpfeln, die unter Kindern verteilt werden müssen.\n * Jedes Kind sollte eine unterschiedliche Anzahl von Äpfeln erhalten und jedes Kind muss mindestens einen Apfel bekommen.\n * Die Gesamtzahl der Kinder ist eine positive ganze Zahl, die nicht größer als 1000 ist.\n * Eingabe: Eine ganze Zahl, die die Anzahl der Kinder darstellt.\n * Ausgabe: Eine ganze Zahl, die die minimale Anzahl von benötigten Äpfeln darstellt.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "ha": "<?php\n\n\n/**\n * Lissafin ƙaramar adadin tuffa da ake buƙatar rarrabawa tsakanin yara.\n * Kowanne yaro ya kamata ya sami adadin tuffa daban-daban kuma kowanne yaro dole ne ya sami aƙalla tuffa ɗaya.\n * Jimillar adadin yara lamba ce mai kyau ba fiye da 1000 ba.\n * Shigarwa: Lamba mai nuna adadin yara.\n * Fitarwa: Lamba mai nuna ƙaramar adadin tuffa da ake buƙata.\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hi": "<?php\n\n\n/**\n * बच्चों के बीच वितरित किए जाने वाले सेबों की न्यूनतम संख्या की गणना करता है।\n * प्रत्येक बच्चे को अलग-अलग संख्या में सेब मिलने चाहिए और हर बच्चे को कम से कम एक सेब अवश्य मिलना चाहिए।\n * बच्चों की कुल संख्या एक सकारात्मक पूर्णांक है जो 1000 से अधिक नहीं है।\n * इनपुट: बच्चों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\n * आउटपुट: आवश्यक सेबों की न्यूनतम संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\n */\n\n function minimumApplesForChildren(int $childrenCount): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a minimálisan szükséges almák számát, amelyeket szét kell osztani a gyerekek között.\n * Minden gyereknek különböző számú almát kell kapnia, és minden gyereknek legalább egy almát kell kapnia.\n * A gyerekek teljes száma egy pozitív egész szám, amely nem nagyobb, mint 1000.\n * Bemenet: Egy egész szám, amely a gyerekek számát jelenti.\n * Kimenet: Egy egész szám, amely a minimálisan szükséges almák számát jelenti.\n */\n\n function minimumApplesForChildren(int $childrenCount): int "
    },
    "prompt_bertscore": {
      "sq": "0.9748889485991884",
      "hy": "0.9757982784835662",
      "bn": "0.9744223658341374",
      "bg": "0.9701220180847321",
      "zh": "0.9722354453389433",
      "fr": "0.9744118384239426",
      "de": "0.9847793511620586",
      "ha": "0.9416465652899516",
      "hi": "0.9828987187144202",
      "hu": "0.9721847945917794"
    },
    "canonical_solution": "{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}",
    "instruction": {
      "en": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function minimumApplesForChildren(int $childrenCount): int\n{\n    // Sum of first n natural numbers\n    return ($childrenCount * ($childrenCount + 1)) / 2;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9195475449871531",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.9234037552045643",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(minimumApplesForChildren(1) === 1);\n    assert(minimumApplesForChildren(2) === 3);\n    assert(minimumApplesForChildren(3) === 6);\n    assert(minimumApplesForChildren(8) === 36);\n    assert(minimumApplesForChildren(10) === 55);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "minimumApplesForChildren",
    "signature": "function minimumApplesForChildren(int $childrenCount): int",
    "docstring": {
      "en": "Calculates the minimum number of apples required to be distributed among children.\nEach child should receive a different number of apples and every child must receive at least one apple.\nThe total count of children is a positive integer not greater than 1000.\nInput: An integer representing the number of children.\nOutput: An integer representing the minimum number of apples required.",
      "sq": "Llogarit numrin minimal të mollëve që duhen shpërndarë midis fëmijëve.\nÇdo fëmijë duhet të marrë një numër të ndryshëm mollësh dhe çdo fëmijë duhet të marrë të paktën një mollë.  \nNumri total i fëmijëve është një numër i plotë pozitiv jo më i madh se 1000.  \nInput: Një numër i plotë që përfaqëson numrin e fëmijëve.  \nOutput: Një numër i plotë që përfaqëson numrin minimal të mollëve të kërkuara.",
      "hy": "Հաշվում է երեխաների միջև բաժանվող խնձորների նվազագույն քանակը:\nՅուրաքանչյուր երեխա պետք է ստանա տարբեր քանակությամբ խնձորներ, և յուրաքանչյուր երեխա պետք է ստանա առնվազն մեկ խնձոր:  \nԵրեխաների ընդհանուր քանակը դրական ամբողջ թիվ է, որը չի գերազանցում 1000-ը:  \nՄուտք: Ամբողջ թիվ, որը ներկայացնում է երեխաների քանակը:  \nԵլք: Ամբողջ թիվ, որը ներկայացնում է անհրաժեշտ խնձորների նվազագույն քանակը:  ",
      "bn": "শিশুদের মধ্যে বিতরণের জন্য প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা গণনা করে।\nপ্রতিটি শিশুকে ভিন্ন সংখ্যক আপেল পেতে হবে এবং প্রতিটি শিশুকে অন্তত একটি আপেল পেতে হবে।  \nThe total count of children is a positive integer not greater than 1000.  \nশিশুদের মোট সংখ্যা একটি ধনাত্মক পূর্ণসংখ্যা যা ১০০০ এর বেশি নয়।  \nInput: An integer representing the number of children.  \nইনপুট: শিশুদের সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।  \nOutput: An integer representing the minimum number of apples required.  \nআউটপুট: প্রয়োজনীয় আপেলের সর্বনিম্ন সংখ্যা উপস্থাপনকারী একটি পূর্ণসংখ্যা।  ",
      "bg": "Изчислява минималния брой ябълки, които трябва да бъдат разпределени между децата.\nВсяко дете трябва да получи различен брой ябълки и всяко дете трябва да получи поне една ябълка.  \nОбщият брой на децата е положително цяло число, което не е по-голямо от 1000.  \nВход: Цяло число, представляващо броя на децата.  \nИзход: Цяло число, представляващо минималния брой необходими ябълки.",
      "zh": "计算分配给儿童的最少苹果数量。\n每个孩子应收到不同数量的苹果，并且每个孩子必须至少收到一个苹果。\n儿童的总数是一个不大于1000的正整数。  \n输入：表示儿童数量的整数。  \n输出：表示所需最少苹果数量的整数。",
      "fr": "Calcule le nombre minimum de pommes à distribuer parmi les enfants.\nChaque enfant doit recevoir un nombre différent de pommes et chaque enfant doit recevoir au moins une pomme.  \nLe nombre total d'enfants est un entier positif ne dépassant pas 1000.  \nEntrée : Un entier représentant le nombre d'enfants.  \nSortie : Un entier représentant le nombre minimum de pommes requis.",
      "de": "Berechnet die minimale Anzahl an Äpfeln, die unter Kindern verteilt werden muss.\nJedes Kind sollte eine unterschiedliche Anzahl von Äpfeln erhalten und jedes Kind muss mindestens einen Apfel bekommen.\nDie Gesamtanzahl der Kinder ist eine positive ganze Zahl, die nicht größer als 1000 ist.\nEingabe: Eine ganze Zahl, die die Anzahl der Kinder darstellt.\nAusgabe: Eine ganze Zahl, die die minimale Anzahl an benötigten Äpfeln darstellt.",
      "ha": "Lissafi mafi ƙarancin adadin tuffa da ake buƙata don rarraba tsakanin yara.\nKowane yaro ya kamata ya sami adadin tuffa daban-daban kuma kowane yaro dole ne ya sami a kalla tuffa daya.  \nJimillar adadin yara lamba ce mai kyau ba fiye da 1000 ba.  \nInput: Lamba ce mai nuna adadin yara.  \nOutput: Lamba ce mai nuna adadin tuffa mafi karanci da ake bukata.",
      "hi": "बच्चों के बीच वितरित करने के लिए आवश्यक न्यूनतम सेबों की गणना करता है।\nप्रत्येक बच्चे को अलग-अलग संख्या में सेब मिलने चाहिए और हर बच्चे को कम से कम एक सेब अवश्य मिलना चाहिए।  \nबच्चों की कुल संख्या एक धनात्मक पूर्णांक है जो 1000 से अधिक नहीं है।  \nInput: बच्चों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।  \nOutput: आवश्यक न्यूनतम सेबों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।  ",
      "hu": "Kiszámítja a minimálisan szükséges almák számát, amelyeket szét kell osztani a gyerekek között.\nMinden gyereknek különböző számú almát kell kapnia, és minden gyereknek legalább egy almát kell kapnia.\nA gyerekek teljes száma egy pozitív egész szám, amely nem nagyobb, mint 1000.\nBemenet: Egy egész szám, amely a gyerekek számát jelenti.\nKimenet: Egy egész szám, amely a minimálisan szükséges almák számát jelenti."
    },
    "docstring_bertscore": {
      "sq": "0.9698006341282177",
      "hy": "0.9734367618834423",
      "bn": "0.9921183464805357",
      "bg": "0.966557198636299",
      "zh": "0.957721722027105",
      "fr": "0.9607003832211043",
      "de": "0.9806565789732985",
      "ha": "0.966403458721378",
      "hi": "0.9803677703992737",
      "hu": "0.9651242790675133"
    }
  },
  {
    "task_id": "PHP/29",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\n * The function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\n * Conditions: 0 < a < b < 100, 1 <= n <= 10000.\n * The function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n * \n * Example:\n * Input: a = 1, b = 2, n = 1\n * Output: 5 (since 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "sq": "<?php\n\n\n/**\n * Gjen shifrën e n-të pas pikës dhjetore në përfaqësimin dhjetor të thyesës a/b.\n * Funksioni merr tre numra të plotë si input: a (numëruesi), b (emëruesi), dhe n (pozicioni i shifrës pas pikës dhjetore).\n * Kushtet: 0 < a < b < 100, 1 <= n <= 10000.\n * Funksioni llogarit përfaqësimin dhjetor të a/b dhe kthen shifrën e n-të pas pikës dhjetore.\n * \n * Shembull:\n * Input: a = 1, b = 2, n = 1\n * Output: 5 (meqenëse 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hy": "<?php\n\n\n/**\n * Գտնում է տասնորդական կետից հետո n-րդ թվանշանը կոտորակի a/b տասնորդական ներկայացման մեջ:\n * Ֆունկցիան ընդունում է երեք ամբողջ թիվ՝ a (թվիչ), b (հավասարիչ) և n (թվանշանի դիրքը տասնորդական կետից հետո):\n * Պայմաններ՝ 0 < a < b < 100, 1 <= n <= 10000:\n * Ֆունկցիան հաշվարկում է a/b-ի տասնորդական ներկայացումը և վերադարձնում է տասնորդական կետից հետո n-րդ թվանշանը:\n * \n * Օրինակ:\n * Մուտք: a = 1, b = 2, n = 1\n * Ելք: 5 (քանի որ 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "bn": "<?php\n\n\n/**\n * ভগ্নাংশ a/b এর দশমিক রূপে দশমিক বিন্দুর পরে nth অঙ্কটি খুঁজে বের করে।\n * ফাংশনটি তিনটি পূর্ণসংখ্যা ইনপুট হিসেবে গ্রহণ করে: a (লব), b (হর), এবং n (দশমিক বিন্দুর পরে অঙ্কের অবস্থান)।\n * শর্তাবলী: 0 < a < b < 100, 1 <= n <= 10000।\n * ফাংশনটি a/b এর দশমিক রূপ হিসাব করে এবং দশমিক বিন্দুর পরে nth অঙ্কটি প্রদান করে।\n * \n * উদাহরণ:\n * ইনপুট: a = 1, b = 2, n = 1\n * আউটপুট: 5 (কারণ 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "bg": "<?php\n\n\n/**\n * Намира n-тата цифра след десетичната запетая в десетичното представяне на дробта a/b.\n * Функцията приема три цели числа като вход: a (числител), b (знаменател) и n (позиция на цифрата след десетичната запетая).\n * Условия: 0 < a < b < 100, 1 <= n <= 10000.\n * Функцията изчислява десетичното представяне на a/b и връща n-тата цифра след десетичната запетая.\n * \n * Пример:\n * Вход: a = 1, b = 2, n = 1\n * Изход: 5 (тъй като 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "zh": "<?php\n\n\n/**\n * 查找分数 a/b 的小数表示中小数点后的第 n 位数字。\n * 该函数接受三个整数作为输入：a（分子）、b（分母）和 n（小数点后的位置）。\n * 条件：0 < a < b < 100, 1 <= n <= 10000。\n * 该函数计算 a/b 的小数表示并返回小数点后的第 n 位数字。\n * \n * 示例：\n * 输入: a = 1, b = 2, n = 1\n * 输出: 5 (因为 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "fr": "<?php\n\n\n/**\n * Trouve le nième chiffre après le point décimal dans la représentation décimale de la fraction a/b.\n * La fonction prend trois entiers en entrée : a (numérateur), b (dénominateur), et n (position du chiffre après le point décimal).\n * Conditions : 0 < a < b < 100, 1 <= n <= 10000.\n * La fonction calcule la représentation décimale de a/b et renvoie le nième chiffre après le point décimal.\n * \n * Exemple :\n * Entrée : a = 1, b = 2, n = 1\n * Sortie : 5 (puisque 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "de": "<?php\n\n\n/**\n * Findet die n-te Ziffer nach dem Dezimalpunkt in der Dezimaldarstellung des Bruchs a/b.\n * Die Funktion nimmt drei ganze Zahlen als Eingabe: a (Zähler), b (Nenner) und n (Position der Ziffer nach dem Dezimalpunkt).\n * Bedingungen: 0 < a < b < 100, 1 <= n <= 10000.\n * Die Funktion berechnet die Dezimaldarstellung von a/b und gibt die n-te Ziffer nach dem Dezimalpunkt zurück.\n * \n * Beispiel:\n * Eingabe: a = 1, b = 2, n = 1\n * Ausgabe: 5 (da 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "ha": "<?php\n\n\n/**\n * Nemi lamba ta n bayan alamar kashi a wakilcin lambar kashi na a/b.\n * Aikin yana daukar lambobi guda uku a matsayin shigarwa: a (mai kashi), b (mai kasa), da n (matsayi na lamba bayan alamar kashi).\n * Sharuɗɗa: 0 < a < b < 100, 1 <= n <= 10000.\n * Aikin yana ƙididdige wakilcin lambar kashi na a/b kuma yana mayar da lamba ta n bayan alamar kashi.\n * \n * Misali:\n * Shigarwa: a = 1, b = 2, n = 1\n * Fitarwa: 5 (saboda 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hi": "<?php\n\n\n/**\n * भिन्न a/b के दशमलव रूप में दशमलव बिंदु के बाद का nth अंक खोजता है।\n * यह फ़ंक्शन तीन पूर्णांक इनपुट के रूप में लेता है: a (अंश), b (हर), और n (दशमलव बिंदु के बाद अंक की स्थिति)।\n * शर्तें: 0 < a < b < 100, 1 <= n <= 10000।\n * यह फ़ंक्शन a/b का दशमलव रूप निकालता है और दशमलव बिंदु के बाद का nth अंक लौटाता है।\n * \n * उदाहरण:\n * इनपुट: a = 1, b = 2, n = 1\n * आउटपुट: 5 (क्योंकि 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int",
      "hu": "<?php\n\n\n/**\n * Megkeresi az a/b tört tizedesjegy utáni n-edik számjegyét a tizedes ábrázolásban.\n * A függvény három egész számot vesz be bemenetként: a (számláló), b (nevező), és n (a tizedesjegy utáni számjegy pozíciója).\n * Feltételek: 0 < a < b < 100, 1 <= n <= 10000.\n * A függvény kiszámítja az a/b tizedes ábrázolását és visszaadja az n-edik számjegyet a tizedesjegy után.\n * \n * Példa:\n * Bemenet: a = 1, b = 2, n = 1\n * Kimenet: 5 (mivel 1/2 = 0.5)\n */\n\n function getDecimalDigit($a, $b, $n): int"
    },
    "prompt_bertscore": {
      "sq": "0.990730913269007",
      "hy": "0.9829446023324393",
      "bn": "0.9920776272524234",
      "bg": "0.990730913269007",
      "zh": "0.9756937989031418",
      "fr": "0.999999801369619",
      "de": "0.990730913269007",
      "ha": "0.9753060723993616",
      "hi": "0.9831732259010105",
      "hu": "0.990730913269007"
    },
    "canonical_solution": "  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}",
    "instruction": {
      "en": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nPHP կոդի համար տրամադրեք հակիրճ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\n请用最多500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nFournir une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nBa da taƙaitaccen bayani a cikin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function getDecimalDigit($a, $b, $n): int\n  {\n    if ($a <= 0 || $a >= $b || $b >= 100 || $n < 1 || $n > 10000) {\n        // Handle invalid input\n        return -1;\n    }\n\n    $decimal = $a / $b;\n    $decimalString = (string)$decimal;\n    $decimalPointPosition = strpos($decimalString, '.');\n\n    if ($decimalPointPosition === false || $decimalPointPosition + $n >= strlen($decimalString)) {\n        // Decimal point not found or n is beyond the length of the decimal part\n        return -1;\n    }\n\n    return (int)$decimalString[$decimalPointPosition + $n];\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.902450434939575",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8790082760002186",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(getDecimalDigit(1, 2, 1) === 5);\n    assert(getDecimalDigit(1, 3, 1) === 3);\n    assert(getDecimalDigit(1, 4, 2) === 5);\n    assert(getDecimalDigit(3, 7, 3) === 8);\n    assert(getDecimalDigit(50, 99, 4) === 0);   \n}\n\n\nmain();\n?>",
    "entry_point": "getDecimalDigit",
    "signature": "function getDecimalDigit($a, $b, $n): int",
    "docstring": {
      "en": "Finds the nth digit after the decimal point in the decimal representation of the fraction a/b.\nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).\nConditions: 0 < a < b < 100, 1 <= n <= 10000.\nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.\n\nExample:\nInput: a = 1, b = 2, n = 1\nOutput: 5 (since 1/2 = 0.5)",
      "sq": "Gjen shifrën e n-të pas pikës dhjetore në paraqitjen dhjetore të thyesës a/b.  \nFunksioni merr tre numra të plotë si hyrje: a (numëruesi), b (emëruesi), dhe n (pozicioni i shifrës pas pikës dhjetore).  \nKushtet: 0 < a < b < 100, 1 <= n <= 10000.  \nFunksioni llogarit paraqitjen dhjetore të a/b dhe kthen shifrën e n-të pas pikës dhjetore.\n\nShembull:  \nHyrja: a = 1, b = 2, n = 1  \nDalja: 5 (pasi 1/2 = 0.5)",
      "hy": "Գտնում է a/b կոտորակի տասնորդական ներկայացման մեջ տասնորդական կետի n-րդ թվանշանը:\nՖունկցիան ընդունում է երեք ամբողջ թիվ՝ a (թվիչ), b (հատարար) և n (թվանշանի դիրքը տասնորդական կետից հետո):\nՊայմաններ: 0 < a < b < 100, 1 <= n <= 10000:\nՖունկցիան հաշվարկում է a/b-ի տասնորդական ներկայացումը և վերադարձնում է տասնորդական կետի n-րդ թվանշանը:\n\nՕրինակ:\nՄուտք: a = 1, b = 2, n = 1\nԵլք: 5 (քանի որ 1/2 = 0.5)",
      "bn": "ভগ্নাংশ a/b এর দশমিক প্রতিনিধিত্বে দশমিক বিন্দুর পরে nth অঙ্ক খুঁজে বের করে।  \nভগ্নাংশ a/b এর দশমিক রূপে দশমিক বিন্দুর পরে nth অঙ্কটি খুঁজে বের করে।  \nThe function takes three integers as input: a (numerator), b (denominator), and n (position of the digit after the decimal point).  \nফাংশনটি তিনটি পূর্ণসংখ্যা ইনপুট হিসেবে গ্রহণ করে: a (উপপাদ্য), b (ভাজক), এবং n (দশমিক বিন্দুর পরে অঙ্কের অবস্থান)।  \nConditions: 0 < a < b < 100, 1 <= n <= 10000.  \nশর্তাবলী: 0 < a < b < 100, 1 <= n <= 10000।  \nThe function calculates the decimal representation of a/b and returns the nth digit after the decimal point.  \nফাংশনটি a/b এর দশমিক রূপ গণনা করে এবং দশমিক বিন্দুর পরে nth অঙ্কটি ফেরত দেয়।  \n\nExample:  \nউদাহরণ:  \nInput: a = 1, b = 2, n = 1  \nইনপুট: a = 1, b = 2, n = 1  \nOutput: 5 (since 1/2 = 0.5)  \nআউটপুট: 5 (কারণ 1/2 = 0.5)",
      "bg": "Намира n-тата цифра след десетичната запетая в десетичното представяне на дробта a/b. \nФункцията приема три цели числа като вход: a (числител), b (знаменател) и n (позиция на цифрата след десетичната запетая). \nУсловия: 0 < a < b < 100, 1 <= n <= 10000. \nФункцията изчислява десетичното представяне на a/b и връща n-тата цифра след десетичната запетая.\n\nПример:\nВход: a = 1, b = 2, n = 1\nИзход: 5 (тъй като 1/2 = 0.5)",
      "zh": "找到分数 a/b 的小数表示中小数点后的第 n 位数字。\n该函数接受三个整数作为输入：a（分子）、b（分母）和 n（小数点后的数字位置）。\n条件：0 < a < b < 100, 1 <= n <= 10000。\n该函数计算 a/b 的小数表示并返回小数点后的第 n 位数字。\n\n示例：\n输入: a = 1, b = 2, n = 1\n输出: 5 (因为 1/2 = 0.5)",
      "fr": "Trouve le nième chiffre après la virgule dans la représentation décimale de la fraction a/b.  \nLa fonction prend trois entiers en entrée : a (numérateur), b (dénominateur), et n (position du chiffre après la virgule).  \nConditions : 0 < a < b < 100, 1 <= n <= 10000.  \nLa fonction calcule la représentation décimale de a/b et renvoie le nième chiffre après la virgule.\n\nExemple :  \nEntrée : a = 1, b = 2, n = 1  \nSortie : 5 (puisque 1/2 = 0.5)",
      "de": "Findet die n-te Ziffer nach dem Dezimalpunkt in der Dezimaldarstellung des Bruchs a/b.\nDie Funktion nimmt drei ganze Zahlen als Eingabe: a (Zähler), b (Nenner) und n (Position der Ziffer nach dem Dezimalpunkt).\nBedingungen: 0 < a < b < 100, 1 <= n <= 10000.\nDie Funktion berechnet die Dezimaldarstellung von a/b und gibt die n-te Ziffer nach dem Dezimalpunkt zurück.\n\nBeispiel:\nEingabe: a = 1, b = 2, n = 1\nAusgabe: 5 (da 1/2 = 0.5)",
      "ha": "Nemi adadi na n bayan alamar kashi a wakilcin kason a/b.\nFungar zai karɓi lambobi guda uku a matsayin shigarwa: a (lambar sama), b (lambar ƙasa), da n (matsayin lambar bayan alamar aya).  \nYanayi: 0 < a < b < 100, 1 <= n <= 10000.  \nFungar zai ƙididdige wakilcin a/b a cikin tsarin lamba kuma ya mayar da lambar n bayan alamar aya.  \n\nMisali:  \nShigarwa: a = 1, b = 2, n = 1  \nFitarwa: 5 (tun da 1/2 = 0.5)",
      "hi": "भिन्न a/b के दशमलव प्रतिनिधित्व में दशमलव बिंदु के बाद का nth अंक ढूंढता है।\nयह फ़ंक्शन तीन पूर्णांक इनपुट के रूप में लेता है: a (अंश), b (हर), और n (दशमलव बिंदु के बाद अंक की स्थिति)।  \nशर्तें: 0 < a < b < 100, 1 <= n <= 10000।  \nयह फ़ंक्शन a/b का दशमलव प्रतिनिधित्व गणना करता है और दशमलव बिंदु के बाद nth अंक लौटाता है।  \n\nउदाहरण:  \nइनपुट: a = 1, b = 2, n = 1  \nआउटपुट: 5 (क्योंकि 1/2 = 0.5)",
      "hu": "Megkeresi az a/b tört tizedes ábrázolásában az n-edik számjegyet a tizedesvessző után.\nA függvény három egész számot vesz be bemenetként: a (számláló), b (nevező), és n (a számjegy pozíciója a tizedesvessző után).\nFeltételek: 0 < a < b < 100, 1 <= n <= 10000.\nA függvény kiszámítja az a/b tizedes ábrázolását, és visszaadja az n-edik számjegyet a tizedesvessző után.\n\nPélda:\nBemenet: a = 1, b = 2, n = 1\nKimenet: 5 (mivel 1/2 = 0.5)"
    },
    "docstring_bertscore": {
      "sq": "0.9863262845695583",
      "hy": "0.9892707813380195",
      "bn": "1",
      "bg": "0.9892707813380195",
      "zh": "0.9690587496550523",
      "fr": "0.9887799656664823",
      "de": "0.9892707813380195",
      "ha": "0.9722805344354383",
      "hi": "1",
      "hu": "0.9850038034926281"
    }
  },
  {
    "task_id": "PHP/30",
    "prompt": {
      "en": "<?php\n/**\n * Solves the Josephus Problem.\n * In this problem, N people are arranged in a circle and eliminated in every Mth position\n * until only one person remains. The function simulates this process and returns the order\n * in which people are eliminated.\n * \n * For example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Input: Two integers, N (number of people in the circle) and M (the elimination step).\n * Output: Returns an array representing the order in which people are eliminated.\n */\n\nfunction josephusProblem($n, $m) ",
      "sq": "<?php\n/**\n * Zgjidh Problemin e Josephus.\n * Në këtë problem, N njerëz janë të rregulluar në një rreth dhe eliminohen në çdo pozicion të M-të\n * derisa të mbetet vetëm një person. Funksioni simulon këtë proces dhe kthen rendin\n * në të cilin njerëzit eliminohen.\n * \n * Për shembull, me N = 8 dhe M = 5, rendi i eliminimit është 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Hyrja: Dy numra të plotë, N (numri i njerëzve në rreth) dhe M (hapi i eliminimit).\n * Dalja: Kthen një varg që përfaqëson rendin në të cilin njerëzit eliminohen.\n */\n\nfunction josephusProblem($n, $m) ",
      "hy": "<?php\n/**\n * Լուծում է Josephus խնդիրը:\n * Այս խնդրում, N մարդիկ դասավորված են շրջանաձև և վերացվում են ամեն M-րդ դիրքում,\n * մինչև միայն մեկ մարդ մնա: Ֆունկցիան սիմուլացնում է այս գործընթացը և վերադարձնում է\n * այն կարգը, որով մարդիկ վերացվում են:\n * \n * Օրինակ, N = 8 և M = 5 դեպքում, վերացման կարգը 5, 2, 8, 7, 1, 4, 6, 3 է:\n * \n * Մուտք: Երկու ամբողջ թիվ, N (մարդկանց քանակը շրջանագծում) և M (վերացման քայլը):\n * Ելք: Վերադարձնում է զանգված, որը ներկայացնում է այն կարգը, որով մարդիկ վերացվում են:\n */\n\nfunction josephusProblem($n, $m) ",
      "bn": "<?php\n/**\n * জোসেফাস সমস্যা সমাধান করে।\n * এই সমস্যায়, N জন মানুষ একটি বৃত্তে সাজানো থাকে এবং প্রতি M তম অবস্থানে তাদের বাদ দেওয়া হয়\n * যতক্ষণ না শুধুমাত্র একজন ব্যক্তি অবশিষ্ট থাকে। ফাংশনটি এই প্রক্রিয়াটি অনুকরণ করে এবং কোন ক্রমে\n * মানুষকে বাদ দেওয়া হয় তা ফেরত দেয়।\n * \n * উদাহরণস্বরূপ, N = 8 এবং M = 5 হলে, বাদ দেওয়ার ক্রম হল 5, 2, 8, 7, 1, 4, 6, 3।\n * \n * ইনপুট: দুটি পূর্ণসংখ্যা, N (বৃত্তে মানুষের সংখ্যা) এবং M (বাদ দেওয়ার ধাপ)।\n * আউটপুট: একটি অ্যারে ফেরত দেয় যা কোন ক্রমে মানুষকে বাদ দেওয়া হয় তা উপস্থাপন করে।\n */\n\nfunction josephusProblem($n, $m) ",
      "bg": "<?php\n/**\n * Решава проблема на Йосиф Флавий.\n * В този проблем, N хора са подредени в кръг и се елиминират на всяка M-та позиция\n * докато остане само един човек. Функцията симулира този процес и връща реда\n * в който хората са елиминирани.\n * \n * Например, с N = 8 и M = 5, редът на елиминиране е 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Вход: Две цели числа, N (брой хора в кръга) и M (стъпка на елиминиране).\n * Изход: Връща масив, представляващ реда, в който хората са елиминирани.\n */\n\nfunction josephusProblem($n, $m) ",
      "zh": "<?php\n/**\n * 解决约瑟夫问题。\n * 在这个问题中，N个人被安排成一个圆圈，并在每第M个位置被淘汰，\n * 直到只剩下一个人。该函数模拟这个过程并返回人们被淘汰的顺序。\n * \n * 例如，对于N = 8和M = 5，淘汰顺序是5, 2, 8, 7, 1, 4, 6, 3。\n * \n * 输入：两个整数，N（圆圈中的人数）和M（淘汰步长）。\n * 输出：返回一个数组，表示人们被淘汰的顺序。\n */\n\nfunction josephusProblem($n, $m) ",
      "fr": "<?php\n/**\n * Résout le problème de Josephus.\n * Dans ce problème, N personnes sont disposées en cercle et éliminées à chaque Mème position\n * jusqu'à ce qu'il ne reste qu'une seule personne. La fonction simule ce processus et renvoie l'ordre\n * dans lequel les personnes sont éliminées.\n * \n * Par exemple, avec N = 8 et M = 5, l'ordre d'élimination est 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Entrée : Deux entiers, N (nombre de personnes dans le cercle) et M (le pas d'élimination).\n * Sortie : Renvoie un tableau représentant l'ordre dans lequel les personnes sont éliminées.\n */\n\nfunction josephusProblem($n, $m) ",
      "de": "<?php\n/**\n * Löst das Josephus-Problem.\n * In diesem Problem sind N Personen in einem Kreis angeordnet und werden an jeder M-ten Position\n * eliminiert, bis nur noch eine Person übrig bleibt. Die Funktion simuliert diesen Prozess und gibt die Reihenfolge zurück,\n * in der die Personen eliminiert werden.\n * \n * Zum Beispiel, mit N = 8 und M = 5, ist die Eliminierungsreihenfolge 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Eingabe: Zwei ganze Zahlen, N (Anzahl der Personen im Kreis) und M (der Eliminierungsschritt).\n * Ausgabe: Gibt ein Array zurück, das die Reihenfolge darstellt, in der die Personen eliminiert werden.\n */\n\nfunction josephusProblem($n, $m) ",
      "ha": "<?php\n/**\n * Yana warware Matsalar Josephus.\n * A cikin wannan matsalar, mutane N suna cikin kewaye kuma ana kawar da su a kowane matsayi na M\n * har sai mutum guda ya rage. Aikin yana kwaikwayon wannan tsari kuma yana dawo da tsarin\n * inda mutane suke kawar da su.\n * \n * Alal misali, tare da N = 8 da M = 5, tsarin kawarwa shine 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Shigarwa: Lambobi guda biyu, N (yawan mutanen da ke cikin kewaye) da M (matakin kawarwa).\n * Fitarwa: Yana dawo da jerin lambobi da ke wakiltar tsarin inda mutane suke kawar da su.\n */\n\nfunction josephusProblem($n, $m) ",
      "hi": "<?php\n/**\n * जोसेफस समस्या को हल करता है।\n * इस समस्या में, N लोग एक वृत्त में व्यवस्थित होते हैं और हर Mवें स्थान पर समाप्त कर दिए जाते हैं\n * जब तक कि केवल एक व्यक्ति शेष नहीं रह जाता। यह फ़ंक्शन इस प्रक्रिया का अनुकरण करता है और उस क्रम को लौटाता है\n * जिसमें लोग समाप्त होते हैं।\n * \n * उदाहरण के लिए, N = 8 और M = 5 के साथ, समाप्ति क्रम है 5, 2, 8, 7, 1, 4, 6, 3।\n * \n * इनपुट: दो पूर्णांक, N (वृत्त में लोगों की संख्या) और M (समाप्ति चरण)।\n * आउटपुट: एक ऐरे लौटाता है जो उस क्रम का प्रतिनिधित्व करता है जिसमें लोग समाप्त होते हैं।\n */\n\nfunction josephusProblem($n, $m) ",
      "hu": "<?php\n/**\n * Megoldja a Josephus problémát.\n * Ebben a problémában N ember van körben elrendezve, és minden M-edik pozícióban eliminálódnak,\n * amíg csak egy ember marad. A függvény szimulálja ezt a folyamatot, és visszaadja az eliminálás\n * sorrendjét.\n * \n * Például, ha N = 8 és M = 5, az eliminálás sorrendje: 5, 2, 8, 7, 1, 4, 6, 3.\n * \n * Bemenet: Két egész szám, N (az emberek száma a körben) és M (az eliminálási lépés).\n * Kimenet: Visszaad egy tömböt, amely az emberek eliminálásának sorrendjét reprezentálja.\n */\n\nfunction josephusProblem($n, $m) "
    },
    "prompt_bertscore": {
      "sq": "0.9852352078865336",
      "hy": "0.9649413404865802",
      "bn": "0.9787606519863205",
      "bg": "0.9764346902244019",
      "zh": "0.9756318262242589",
      "fr": "0.9980379290961374",
      "de": "0.9812677646557428",
      "ha": "0.9592207855127753",
      "hi": "0.9834443563711232",
      "hu": "0.9593850528378912"
    },
    "canonical_solution": "{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}",
    "instruction": {
      "en": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nՏվեք PHP կոդի հակիրճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nনিচের PHP কোডটির জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nBa da takaitaccen bayani na yanayi (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function josephusProblem($n, $m)\n{\n    $people = range(1, $n);\n    $result = [];\n    $i = 0;\n\n    while (count($people) > 0) {\n        $i = ($i + $m - 1) % count($people);\n        $result[] = $people[$i];\n        array_splice($people, $i, 1);\n    }\n\n    return $result;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9608588902651701",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8913177979737127",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(josephusProblem(8, 5) === [5, 2, 8, 7, 1, 4, 6, 3]);\n    assert(josephusProblem(4, 2) === [2, 4, 3, 1]);\n    assert(josephusProblem(6, 3) === [3, 6, 4, 2, 5, 1]);    \n}\n\n\nmain();\n?>",
    "entry_point": "josephusProblem",
    "signature": "function josephusProblem($n, $m)",
    "docstring": {
      "en": "Solves the Josephus Problem.\nIn this problem, N people are arranged in a circle and eliminated in every Mth position\nuntil only one person remains. The function simulates this process and returns the order\nin which people are eliminated.\n\nFor example, with N = 8 and M = 5, the elimination order is 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Two integers, N (number of people in the circle) and M (the elimination step).\nOutput: Returns an array representing the order in which people are eliminated.",
      "sq": "Zgjidh Problemin e Josephus.\nNë këtë problem, N njerëz janë të rregulluar në një rreth dhe eliminohen në çdo pozicion të M-të\nderisa të mbetet vetëm një person. Funksioni simulon këtë proces dhe kthen rendin\nnë të cilin njerëzit eliminohen.\n\nPër shembull, me N = 8 dhe M = 5, rendi i eliminimit është 5, 2, 8, 7, 1, 4, 6, 3.\n\nInput: Dy numra të plotë, N (numri i njerëzve në rreth) dhe M (hapi i eliminimit).\nOutput: Kthen një varg që përfaqëson rendin në të cilin njerëzit eliminohen.",
      "hy": "Լուծում է Ջոզեֆուսի խնդիրը։  \nԱյս խնդրում N մարդիկ դասավորված են շրջանաձև և յուրաքանչյուր M-րդ դիրքում հեռացվում են  \nմինչև միայն մեկ մարդ մնա։ Ֆունկցիան մոդելավորում է այս գործընթացը և վերադարձնում է  \nմարդկանց հեռացման կարգը։  \n\nՕրինակ, երբ N = 8 և M = 5, հեռացման կարգը 5, 2, 8, 7, 1, 4, 6, 3 է։  \n\nՄուտք: Երկու ամբողջ թիվ՝ N (մարդկանց քանակը շրջանաձև) և M (հեռացման քայլը)։  \nԵլք: Վերադարձնում է զանգված, որը ներկայացնում է մարդկանց հեռացման կարգը։  ",
      "bn": "জোসেফাস সমস্যা সমাধান করে। \nএই সমস্যায়, N জন মানুষ একটি বৃত্তে সাজানো থাকে এবং প্রতি M তম অবস্থানে তাদের বাদ দেওয়া হয় \nযতক্ষণ না শুধুমাত্র একজন ব্যক্তি অবশিষ্ট থাকে। ফাংশনটি এই প্রক্রিয়াটি অনুকরণ করে এবং \nমানুষদের বাদ দেওয়ার ক্রমটি ফেরত দেয়।\n\nউদাহরণস্বরূপ, N = 8 এবং M = 5 হলে, বাদ দেওয়ার ক্রম হল 5, 2, 8, 7, 1, 4, 6, 3।\n\nইনপুট: দুটি পূর্ণসংখ্যা, N (বৃত্তে মানুষের সংখ্যা) এবং M (বাদ দেওয়ার ধাপ)। \nআউটপুট: একটি অ্যারে ফেরত দেয় যা মানুষদের বাদ দেওয়ার ক্রম উপস্থাপন করে।",
      "bg": "Решава проблема на Йосиф.  \nВ този проблем N души са подредени в кръг и се елиминират на всяка M-та позиция,  \nдокато остане само един човек. Функцията симулира този процес и връща реда,  \nв който хората са елиминирани.\n\nНапример, при N = 8 и M = 5, редът на елиминиране е 5, 2, 8, 7, 1, 4, 6, 3.\n\nВход: Две цели числа, N (брой на хората в кръга) и M (стъпка на елиминиране).  \nИзход: Връща масив, представляващ реда, в който хората са елиминирани.",
      "zh": "解决约瑟夫问题。  \n在这个问题中，N个人被安排成一个圆圈，并在每M个位置上被淘汰，直到只剩下一个人。该函数模拟此过程并返回人被淘汰的顺序。\n\n例如，当N = 8且M = 5时，淘汰顺序为5, 2, 8, 7, 1, 4, 6, 3。\n\n输入：两个整数，N（圆圈中的人数）和M（淘汰步长）。  \n输出：返回一个数组，表示人被淘汰的顺序。",
      "fr": "Résout le problème de Josephus.  \nDans ce problème, N personnes sont disposées en cercle et éliminées à chaque Mème position jusqu'à ce qu'il ne reste qu'une seule personne. La fonction simule ce processus et renvoie l'ordre dans lequel les personnes sont éliminées.\n\nPar exemple, avec N = 8 et M = 5, l'ordre d'élimination est 5, 2, 8, 7, 1, 4, 6, 3.\n\nEntrée : Deux entiers, N (nombre de personnes dans le cercle) et M (le pas d'élimination).  \nSortie : Renvoie un tableau représentant l'ordre dans lequel les personnes sont éliminées.",
      "de": "Löst das Josephus-Problem.\nIn diesem Problem sind N Personen in einem Kreis angeordnet und werden in jeder M-ten Position eliminiert, bis nur noch eine Person übrig bleibt. Die Funktion simuliert diesen Prozess und gibt die Reihenfolge zurück, in der Personen eliminiert werden.\n\nZum Beispiel, mit N = 8 und M = 5, ist die Eliminierungsreihenfolge 5, 2, 8, 7, 1, 4, 6, 3.\n\nEingabe: Zwei ganze Zahlen, N (Anzahl der Personen im Kreis) und M (der Eliminierungsschritt).\nAusgabe: Gibt ein Array zurück, das die Reihenfolge darstellt, in der Personen eliminiert werden.",
      "ha": "Yana warware Matsalar Josephus.  \nA cikin wannan matsalar, mutane N suna cikin kewaye kuma ana kawar da su a kowane matsayi na M har sai mutum daya ya rage. Aikin yana kwaikwayon wannan tsari kuma yana dawo da oda inda aka kawar da mutane.\n\nMisali, tare da N = 8 da M = 5, tsarin kawarwa shine 5, 2, 8, 7, 1, 4, 6, 3.\n\nShigarwa: Lambobi guda biyu, N (yawan mutanen da ke cikin kewaye) da M (matakin kawarwa).  \nFitarwa: Yana dawo da jerin da ke wakiltar tsarin inda aka kawar da mutane.",
      "hi": "Josephus समस्या का समाधान करता है। \nइस समस्या में, N लोग एक वृत्त में व्यवस्थित होते हैं और हर Mवें स्थान पर समाप्त कर दिए जाते हैं \nजब तक कि केवल एक व्यक्ति शेष न रह जाए। यह फ़ंक्शन इस प्रक्रिया का अनुकरण करता है और उस क्रम को लौटाता है \nजिसमें लोग समाप्त होते हैं।\n\nउदाहरण के लिए, N = 8 और M = 5 के साथ, समाप्ति क्रम 5, 2, 8, 7, 1, 4, 6, 3 है।\n\nइनपुट: दो पूर्णांक, N (वृत्त में लोगों की संख्या) और M (समाप्ति चरण)।\nआउटपुट: एक सरणी लौटाता है जो उस क्रम का प्रतिनिधित्व करती है जिसमें लोग समाप्त होते हैं।",
      "hu": "Megoldja a Josephus-problémát.\nEbben a problémában N ember van körben elrendezve, és minden M-edik pozícióban eliminálódnak,\namíg csak egy ember marad. A függvény szimulálja ezt a folyamatot, és visszaadja azt a sorrendet,\namelyben az emberek eliminálódnak.\n\nPéldául, ha N = 8 és M = 5, az eliminálási sorrend 5, 2, 8, 7, 1, 4, 6, 3.\n\nBemenet: Két egész szám, N (az emberek száma a körben) és M (az eliminálási lépés).\nKimenet: Visszaad egy tömböt, amely az emberek eliminálási sorrendjét képviseli."
    },
    "docstring_bertscore": {
      "sq": "0.9806390994997674",
      "hy": "0.9472676064428579",
      "bn": "0.9433909372961999",
      "bg": "0.9773694447975521",
      "zh": "0.9677273302109755",
      "fr": "0.9976990656660919",
      "de": "0.9871605321699048",
      "ha": "0.9702964155592807",
      "hi": "0.9692242087624544",
      "hu": "0.9606940270489112"
    }
  },
  {
    "task_id": "PHP/31",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds the positions of the k-th largest number in an array.\n * This function takes an array of integers and an integer k, \n * and returns the positions of the k-th largest number in the array. \n * If there are duplicates of the k-th largest number, it returns all positions.\n * If k is greater than the array's length or the array is empty, it returns an empty array.\n *\n * Example:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "sq": "<?php\n\n\n/**\n * Gjen pozicionet e numrit të k-të më të madh në një varg.\n * Kjo funksion merr një varg të numrave të plotë dhe një numër të plotë k,\n * dhe kthen pozicionet e numrit të k-të më të madh në varg.\n * Nëse ka dublikatë të numrit të k-të më të madh, i kthen të gjitha pozicionet.\n * Nëse k është më i madh se gjatësia e vargut ose vargu është bosh, kthen një varg bosh.\n *\n * Shembull:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hy": "<?php\n\n\n/**\n * Գտնում է զանգվածի k-րդ ամենամեծ թվի դիրքերը։\n * Այս ֆունկցիան ընդունում է ամբողջ թվերի զանգված և ամբողջ թիվ k,\n * և վերադարձնում է զանգվածի k-րդ ամենամեծ թվի դիրքերը։\n * Եթե k-րդ ամենամեծ թվի կրկնօրինակներ կան, այն վերադարձնում է բոլոր դիրքերը։\n * Եթե k-ն մեծ է զանգվածի երկարությունից կամ զանգվածը դատարկ է, այն վերադարձնում է դատարկ զանգված։\n *\n * Օրինակ:\n * Մուտք: numbers = [67, 43, 90, 78, 32], k = 1\n * Ելք: [3]\n * \n * Մուտք: numbers = [1, 2, 3, 4, 5], k = 3\n * Ելք: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "bn": "<?php\n\n\n/**\n * একটি অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থান খুঁজে বের করে।\n * এই ফাংশনটি পূর্ণসংখ্যার একটি অ্যারে এবং একটি পূর্ণসংখ্যা k গ্রহণ করে,\n * এবং অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি ফেরত দেয়।\n * যদি k-তম বৃহত্তম সংখ্যার ডুপ্লিকেট থাকে, তবে এটি সমস্ত অবস্থান ফেরত দেয়।\n * যদি k অ্যারের দৈর্ঘ্যের চেয়ে বড় হয় বা অ্যারেটি খালি হয়, তবে এটি একটি খালি অ্যারে ফেরত দেয়।\n *\n * উদাহরণ:\n * ইনপুট: numbers = [67, 43, 90, 78, 32], k = 1\n * আউটপুট: [3]\n * \n * ইনপুট: numbers = [1, 2, 3, 4, 5], k = 3\n * আউটপুট: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "bg": "<?php\n\n\n/**\n * Намира позициите на k-тото по големина число в масив.\n * Тази функция приема масив от цели числа и цяло число k,\n * и връща позициите на k-тото по големина число в масива.\n * Ако има дубликати на k-тото по големина число, връща всички позиции.\n * Ако k е по-голямо от дължината на масива или масивът е празен, връща празен масив.\n *\n * Пример:\n * Вход: numbers = [67, 43, 90, 78, 32], k = 1\n * Изход: [3]\n * \n * Вход: numbers = [1, 2, 3, 4, 5], k = 3\n * Изход: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "zh": "<?php\n\n\n/**\n * 查找数组中第k大的数字的位置。\n * 此函数接受一个整数数组和一个整数k，并返回数组中第k大的数字的位置。\n * 如果第k大的数字有重复，它将返回所有位置。\n * 如果k大于数组的长度或数组为空，它将返回一个空数组。\n *\n * 示例:\n * 输入: numbers = [67, 43, 90, 78, 32], k = 1\n * 输出: [3]\n * \n * 输入: numbers = [1, 2, 3, 4, 5], k = 3\n * 输出: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "fr": "<?php\n\n\n/**\n * Trouve les positions du k-ième plus grand nombre dans un tableau.\n * Cette fonction prend un tableau d'entiers et un entier k,\n * et renvoie les positions du k-ième plus grand nombre dans le tableau.\n * S'il y a des doublons du k-ième plus grand nombre, elle renvoie toutes les positions.\n * Si k est supérieur à la longueur du tableau ou si le tableau est vide, elle renvoie un tableau vide.\n *\n * Exemple:\n * Input: numbers = [67, 43, 90, 78, 32], k = 1\n * Output: [3]\n * \n * Input: numbers = [1, 2, 3, 4, 5], k = 3\n * Output: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "de": "<?php\n\n\n/**\n * Findet die Positionen der k-t größten Zahl in einem Array.\n * Diese Funktion nimmt ein Array von ganzen Zahlen und eine ganze Zahl k,\n * und gibt die Positionen der k-t größten Zahl im Array zurück.\n * Wenn es Duplikate der k-t größten Zahl gibt, gibt sie alle Positionen zurück.\n * Wenn k größer als die Länge des Arrays ist oder das Array leer ist, gibt sie ein leeres Array zurück.\n *\n * Beispiel:\n * Eingabe: numbers = [67, 43, 90, 78, 32], k = 1\n * Ausgabe: [3]\n * \n * Eingabe: numbers = [1, 2, 3, 4, 5], k = 3\n * Ausgabe: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "ha": "<?php\n\n\n/**\n * Nemi wuraren lamba ta k mafi girma a cikin jerin.\n * Wannan aikin yana ɗaukar jerin lambobi da lamba k,\n * kuma yana dawo da wuraren lamba ta k mafi girma a cikin jerin.\n * Idan akwai maimaita lamba ta k mafi girma, yana dawo da duk wuraren.\n * Idan k ya fi tsawon jerin ko jerin babu komai, yana dawo da jerin babu komai.\n *\n * Misali:\n * Shigarwa: numbers = [67, 43, 90, 78, 32], k = 1\n * Fitarwa: [3]\n * \n * Shigarwa: numbers = [1, 2, 3, 4, 5], k = 3\n * Fitarwa: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hi": "<?php\n\n\n/**\n * एक array में k-वें सबसे बड़े संख्या के स्थानों को खोजता है।\n * यह फ़ंक्शन पूर्णांकों के array और एक पूर्णांक k लेता है,\n * और array में k-वें सबसे बड़े संख्या के स्थानों को लौटाता है।\n * यदि k-वें सबसे बड़े संख्या के डुप्लिकेट हैं, तो यह सभी स्थानों को लौटाता है।\n * यदि k array की लंबाई से बड़ा है या array खाली है, तो यह एक खाली array लौटाता है।\n *\n * उदाहरण:\n * इनपुट: numbers = [67, 43, 90, 78, 32], k = 1\n * आउटपुट: [3]\n * \n * इनपुट: numbers = [1, 2, 3, 4, 5], k = 3\n * आउटपुट: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array ",
      "hu": "<?php\n\n\n/**\n * Megkeresi a k-adik legnagyobb szám pozícióit egy tömbben.\n * Ez a függvény egy egész számokat tartalmazó tömböt és egy egész számot (k) vesz át,\n * és visszaadja a k-adik legnagyobb szám pozícióit a tömbben.\n * Ha a k-adik legnagyobb szám többször is előfordul, akkor az összes pozíciót visszaadja.\n * Ha k nagyobb, mint a tömb hossza, vagy a tömb üres, akkor üres tömböt ad vissza.\n *\n * Példa:\n * Bemenet: numbers = [67, 43, 90, 78, 32], k = 1\n * Kimenet: [3]\n * \n * Bemenet: numbers = [1, 2, 3, 4, 5], k = 3\n * Kimenet: [3]\n */\n function findKthLargestPositions(array $numbers, int $k): array "
    },
    "prompt_bertscore": {
      "sq": "0.9955751110016858",
      "hy": "0.9935359715099816",
      "bn": "0.9933266150883708",
      "bg": "0.9955751110016858",
      "zh": "0.9715320951596987",
      "fr": "0.9910415711849455",
      "de": "0.9955751110016858",
      "ha": "0.9529998806091438",
      "hi": "0.9955751110016858",
      "hu": "0.9777206233112218"
    },
    "canonical_solution": " {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}",
    "instruction": {
      "en": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nՏրամադրել PHP կոդի հակիրճ բնութագիր (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হতে হবে।",
      "bg": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\n请提供一段简洁的自然语言描述（文档字符串），用中文描述以下 PHP 代码，字数不超过 500 个字符。",
      "fr": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nBa da takaitaccen bayani a cikin harshen dabi'a (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findKthLargestPositions(array $numbers, int $k): array\n {\n    $length = count($numbers);\n    if ($length === 0 || $k > $length) {\n        return [];\n    }\n\n    $indexedNumbers = array_combine(range(1, $length), $numbers);\n    arsort($indexedNumbers);\n    $sortedNumbers = array_values($indexedNumbers);\n    $kthLargest = $sortedNumbers[$k - 1];\n\n    return array_keys($indexedNumbers, $kthLargest);\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.924762585641224",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    // Test case 1: k-th largest is unique\n    assert(findKthLargestPositions([67, 43, 90, 78, 32], 1) === [3]);\n\n    // Test case 2: k-th largest has duplicates\n    assert(findKthLargestPositions([20, 50, 20, 40], 3) === [1, 3]);\n\n    // Test case 3: k is larger than the array length\n    assert(findKthLargestPositions([10, 20, 30], 4) === []);\n\n    // Test case 4: Array is empty\n    assert(findKthLargestPositions([], 1) === []);\n\n    // Test case 5: k-th largest in the middle\n    assert(findKthLargestPositions([1, 2, 3, 4, 5], 3) === [3]);\n}\n\n\nmain();\n?>",
    "entry_point": "findKthLargestPositions",
    "signature": "function findKthLargestPositions(array $numbers, int $k): array",
    "docstring": {
      "en": "Finds the positions of the k-th largest number in an array.\nThis function takes an array of integers and an integer k,\nand returns the positions of the k-th largest number in the array.\nIf there are duplicates of the k-th largest number, it returns all positions.\nIf k is greater than the array's length or the array is empty, it returns an empty array.\n\nExample:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "sq": "Gjen pozicionet e numrit të k-të më të madh në një varg.\nKjo funksion merr një varg me numra të plotë dhe një numër të plotë k,\ndhe kthen pozicionet e numrit të k-të më të madh në varg.\nNëse ka dublikatë të numrit të k-të më të madh, kthen të gjitha pozicionet.\nNëse k është më i madh se gjatësia e vargut ose vargu është bosh, kthen një varg bosh.\n\nShembull:\nInput: numbers = [67, 43, 90, 78, 32], k = 1\nOutput: [3]\n\nInput: numbers = [1, 2, 3, 4, 5], k = 3\nOutput: [3]",
      "hy": "Գտնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԱյս ֆունկցիան ընդունում է ամբողջ թվերի զանգված և ամբողջ թիվ k,\nև վերադարձնում է զանգվածում k-րդ ամենամեծ թվի դիրքերը։\nԵթե k-րդ ամենամեծ թվի կրկնօրինակներ կան, այն վերադարձնում է բոլոր դիրքերը։\nԵթե k-ն մեծ է զանգվածի երկարությունից կամ զանգվածը դատարկ է, այն վերադարձնում է դատարկ զանգված։\n\nՕրինակ:\nՄուտք: numbers = [67, 43, 90, 78, 32], k = 1\nԵլք: [3]\n\nՄուտք: numbers = [1, 2, 3, 4, 5], k = 3\nԵլք: [3]",
      "bn": "k-তম বৃহত্তম সংখ্যার অবস্থানগুলি খুঁজে বের করে একটি অ্যারেতে।\nএই ফাংশনটি পূর্ণসংখ্যার একটি অ্যারে এবং একটি পূর্ণসংখ্যা k গ্রহণ করে,\nএবং অ্যারেতে k-তম বৃহত্তম সংখ্যার অবস্থানগুলি ফেরত দেয়।\nযদি k-তম বৃহত্তম সংখ্যার সদৃশ থাকে, এটি সমস্ত অবস্থান ফেরত দেয়।\nযদি k অ্যারের দৈর্ঘ্যের চেয়ে বড় হয় বা অ্যারে খালি হয়, এটি একটি খালি অ্যারে ফেরত দেয়।\n\nউদাহরণ:\nইনপুট: numbers = [67, 43, 90, 78, 32], k = 1\nআউটপুট: [3]\n\nইনপুট: numbers = [1, 2, 3, 4, 5], k = 3\nআউটপুট: [3]",
      "bg": "Намира позициите на k-тото по големина число в масив.  \nТази функция приема масив от цели числа и цяло число k,  \nи връща позициите на k-тото по големина число в масива.  \nАко има дубликати на k-тото по големина число, връща всички позиции.  \nАко k е по-голямо от дължината на масива или масивът е празен, връща празен масив.\n\nПример:  \nВход: numbers = [67, 43, 90, 78, 32], k = 1  \nИзход: [3]\n\nВход: numbers = [1, 2, 3, 4, 5], k = 3  \nИзход: [3]",
      "zh": "查找数组中第k大数字的位置。\n此函数接收一个整数数组和一个整数k，并返回数组中第k大数字的位置。\n如果第k大数字有重复，它将返回所有位置。\n如果k大于数组的长度或数组为空，则返回一个空数组。\n\n示例：\n输入: numbers = [67, 43, 90, 78, 32], k = 1\n输出: [3]\n\n输入: numbers = [1, 2, 3, 4, 5], k = 3\n输出: [3]",
      "fr": "Trouve les positions du k-ième plus grand nombre dans un tableau.\nCette fonction prend un tableau d'entiers et un entier k,\net renvoie les positions du k-ième plus grand nombre dans le tableau.\nS'il y a des doublons du k-ième plus grand nombre, elle renvoie toutes les positions.\nSi k est supérieur à la longueur du tableau ou si le tableau est vide, elle renvoie un tableau vide.\n\nExemple :\nEntrée : numbers = [67, 43, 90, 78, 32], k = 1\nSortie : [3]\n\nEntrée : numbers = [1, 2, 3, 4, 5], k = 3\nSortie : [3]",
      "de": "Findet die Positionen der k-größten Zahl in einem Array.  \nDiese Funktion nimmt ein Array von ganzen Zahlen und eine ganze Zahl k und gibt die Positionen der k-größten Zahl im Array zurück.  \nWenn es Duplikate der k-größten Zahl gibt, werden alle Positionen zurückgegeben.  \nWenn k größer als die Länge des Arrays ist oder das Array leer ist, wird ein leeres Array zurückgegeben.  \n\nBeispiel:  \nEingabe: numbers = [67, 43, 90, 78, 32], k = 1  \nAusgabe: [3]  \n\nEingabe: numbers = [1, 2, 3, 4, 5], k = 3  \nAusgabe: [3]  ",
      "ha": "Yana nemo matsayi na lamba ta k mafi girma a cikin jerin.\nWannan aikin yana ɗaukar jerin lambobi da lamba k,\nkuma yana mayar da matsayi na lamba ta k mafi girma a cikin jerin.\nIdan akwai maimaitawa na lamba ta k mafi girma, yana mayar da duk matsayi.\nIdan k ya fi tsawon jerin ko jerin babu komai, yana mayar da jerin babu komai.\n\nMisali:\nShigarwa: numbers = [67, 43, 90, 78, 32], k = 1\nFitarwa: [3]\n\nShigarwa: numbers = [1, 2, 3, 4, 5], k = 3\nFitarwa: [3]",
      "hi": "k-वां सबसे बड़े संख्या के स्थानों को एक array में ढूँढता है।\nयह फ़ंक्शन पूर्णांकों की एक array और एक पूर्णांक k लेता है,\nऔर array में k-वां सबसे बड़े संख्या के स्थानों को लौटाता है।\nयदि k-वां सबसे बड़ा संख्या के डुप्लिकेट हैं, तो यह सभी स्थानों को लौटाता है।\nयदि k array की लंबाई से बड़ा है या array खाली है, तो यह एक खाली array लौटाता है।\n\nउदाहरण:\nइनपुट: numbers = [67, 43, 90, 78, 32], k = 1\nआउटपुट: [3]\n\nइनपुट: numbers = [1, 2, 3, 4, 5], k = 3\nआउटपुट: [3]",
      "hu": "Megkeresi a k-adik legnagyobb szám pozícióit egy tömbben.\nEz a függvény egy egész számokat tartalmazó tömböt és egy egész számot, k-t vesz át,\nés visszaadja a k-adik legnagyobb szám pozícióit a tömbben.\nHa a k-adik legnagyobb szám többször is előfordul, akkor az összes pozíciót visszaadja.\nHa k nagyobb, mint a tömb hossza, vagy a tömb üres, akkor üres tömböt ad vissza.\n\nPélda:\nBemenet: numbers = [67, 43, 90, 78, 32], k = 1\nKimenet: [3]\n\nBemenet: numbers = [1, 2, 3, 4, 5], k = 3\nKimenet: [3]"
    },
    "docstring_bertscore": {
      "sq": "0.9919177297956904",
      "hy": "0.9923817303657879",
      "bn": "0.9798298793274313",
      "bg": "0.9952684256933679",
      "zh": "0.9662358146797845",
      "fr": "0.9888403493023169",
      "de": "0.9701261893227339",
      "ha": "0.9565005424445026",
      "hi": "0.9679821729898432",
      "hu": "0.9780378360297345"
    }
  },
  {
    "task_id": "PHP/32",
    "prompt": {
      "en": "<?php\n\n/**\n    * Calculates the k-th term of the Pell sequence modulo 32767.\n    * The Pell sequence is defined as follows:\n    *   a[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\n    * This function computes the k-th term of this sequence modulo 32767.\n    * Input: An integer $k (1 ≤ $k < 1000000), representing the position in the sequence.\n    * Output: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\n    * Example:\n    *   For $k = 1, the function returns 1.\n    *   For $k = 8, the function returns 408.\n    */\n\n    function getPellNumberModulo($k)",
      "sq": "<?php\n\n/**\n    * Llogarit termin e k-të të vargut Pell modulo 32767.\n    * Vargu Pell përkufizohet si më poshtë:\n    *   a[1] = 1, a[2] = 2, dhe a[n] = 2*a[n-1] + a[n-2] për n > 2.\n    * Kjo funksion llogarit termin e k-të të këtij vargu modulo 32767.\n    * Hyrja: Një numër i plotë $k (1 ≤ $k < 1000000), që përfaqëson pozicionin në varg.\n    * Dalja: Kthen termin e k-të të vargut Pell modulo 32767 si një numër i plotë.\n    * Shembull:\n    *   Për $k = 1, funksioni kthen 1.\n    *   Për $k = 8, funksioni kthen 408.\n    */\n\n    function getPellNumberModulo($k)",
      "hy": "<?php\n\n/**\n    * Հաշվում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով։\n    * Պելլի հաջորդականությունը սահմանվում է հետևյալ կերպ.\n    *   a[1] = 1, a[2] = 2, և a[n] = 2*a[n-1] + a[n-2] n > 2-ի համար։\n    * Այս ֆունկցիան հաշվում է այս հաջորդականության k-րդ անդամը 32767 մոդուլով։\n    * Մուտք: Անվերջ թիվ $k (1 ≤ $k < 1000000), որը ներկայացնում է հաջորդականության դիրքը։\n    * Ելք: Վերադարձնում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով որպես ամբողջ թիվ։\n    * Օրինակ:\n    *   $k = 1-ի համար, ֆունկցիան վերադարձնում է 1։\n    *   $k = 8-ի համար, ֆունկցիան վերադարձնում է 408։\n    */\n\n    function getPellNumberModulo($k)",
      "bn": "<?php\n\n/**\n    * Pell ধারা মডুলো 32767 এর k-তম পদ গণনা করে।\n    * Pell ধারা নিম্নরূপ সংজ্ঞায়িত:\n    *   a[1] = 1, a[2] = 2, এবং a[n] = 2*a[n-1] + a[n-2] n > 2 এর জন্য।\n    * এই ফাংশনটি এই ধারার k-তম পদ মডুলো 32767 গণনা করে।\n    * ইনপুট: একটি পূর্ণসংখ্যা $k (1 ≤ $k < 1000000), যা ধারার অবস্থান নির্দেশ করে।\n    * আউটপুট: Pell ধারার k-তম পদ মডুলো 32767 একটি পূর্ণসংখ্যা হিসাবে ফেরত দেয়।\n    * উদাহরণ:\n    *   $k = 1 এর জন্য, ফাংশনটি 1 ফেরত দেয়।\n    *   $k = 8 এর জন্য, ফাংশনটি 408 ফেরত দেয়।\n    */\n\n    function getPellNumberModulo($k)",
      "bg": "<?php\n\n/**\n    * Изчислява k-тия член на редицата на Пел по модул 32767.\n    * Редицата на Пел е дефинирана по следния начин:\n    *   a[1] = 1, a[2] = 2, и a[n] = 2*a[n-1] + a[n-2] за n > 2.\n    * Тази функция изчислява k-тия член на тази редица по модул 32767.\n    * Вход: Цяло число $k (1 ≤ $k < 1000000), представляващо позицията в редицата.\n    * Изход: Връща k-тия член на редицата на Пел по модул 32767 като цяло число.\n    * Пример:\n    *   За $k = 1, функцията връща 1.\n    *   За $k = 8, функцията връща 408.\n    */\n\n    function getPellNumberModulo($k)",
      "zh": "<?php\n\n/**\n    * 计算 Pell 序列的第 k 项模 32767。\n    * Pell 序列定义如下：\n    *   a[1] = 1, a[2] = 2, 且 a[n] = 2*a[n-1] + a[n-2] 对于 n > 2。\n    * 此函数计算该序列的第 k 项模 32767。\n    * 输入: 一个整数 $k (1 ≤ $k < 1000000)，表示序列中的位置。\n    * 输出: 返回 Pell 序列的第 k 项模 32767 作为一个整数。\n    * 示例:\n    *   对于 $k = 1，函数返回 1。\n    *   对于 $k = 8，函数返回 408。\n    */\n\n    function getPellNumberModulo($k)",
      "fr": "<?php\n\n/**\n    * Calcule le k-ième terme de la séquence de Pell modulo 32767.\n    * La séquence de Pell est définie comme suit :\n    *   a[1] = 1, a[2] = 2, et a[n] = 2*a[n-1] + a[n-2] pour n > 2.\n    * Cette fonction calcule le k-ième terme de cette séquence modulo 32767.\n    * Entrée : Un entier $k (1 ≤ $k < 1000000), représentant la position dans la séquence.\n    * Sortie : Retourne le k-ième terme de la séquence de Pell modulo 32767 en tant qu'entier.\n    * Exemple :\n    *   Pour $k = 1, la fonction retourne 1.\n    *   Pour $k = 8, la fonction retourne 408.\n    */\n\n    function getPellNumberModulo($k)",
      "de": "<?php\n\n/**\n    * Berechnet das k-te Glied der Pell-Folge modulo 32767.\n    * Die Pell-Folge ist wie folgt definiert:\n    *   a[1] = 1, a[2] = 2, und a[n] = 2*a[n-1] + a[n-2] für n > 2.\n    * Diese Funktion berechnet das k-te Glied dieser Folge modulo 32767.\n    * Eingabe: Eine ganze Zahl $k (1 ≤ $k < 1000000), die die Position in der Folge darstellt.\n    * Ausgabe: Gibt das k-te Glied der Pell-Folge modulo 32767 als ganze Zahl zurück.\n    * Beispiel:\n    *   Für $k = 1, gibt die Funktion 1 zurück.\n    *   Für $k = 8, gibt die Funktion 408 zurück.\n    */\n\n    function getPellNumberModulo($k)",
      "ha": "<?php\n\n/**\n    * Lissafa k-th kalma na jerin Pell modulo 32767.\n    * An bayyana jerin Pell kamar haka:\n    *   a[1] = 1, a[2] = 2, kuma a[n] = 2*a[n-1] + a[n-2] don n > 2.\n    * Wannan aikin yana lissafa k-th kalma na wannan jerin modulo 32767.\n    * Shigarwa: Lamba $k (1 ≤ $k < 1000000), wanda ke wakiltar matsayi a cikin jerin.\n    * Fitarwa: Yana mayar da k-th kalma na jerin Pell modulo 32767 a matsayin lamba.\n    * Misali:\n    *   Don $k = 1, aikin yana mayar da 1.\n    *   Don $k = 8, aikin yana mayar da 408.\n    */\n\n    function getPellNumberModulo($k)",
      "hi": "<?php\n\n/**\n    * Pell अनुक्रम का k-वां पद 32767 के मापांक में गणना करता है।\n    * Pell अनुक्रम निम्नलिखित रूप से परिभाषित है:\n    *   a[1] = 1, a[2] = 2, और a[n] = 2*a[n-1] + a[n-2] जहाँ n > 2.\n    * यह फ़ंक्शन इस अनुक्रम के k-वां पद 32767 के मापांक में गणना करता है।\n    * इनपुट: एक पूर्णांक $k (1 ≤ $k < 1000000), जो अनुक्रम में स्थिति का प्रतिनिधित्व करता है।\n    * आउटपुट: Pell अनुक्रम का k-वां पद 32767 के मापांक में एक पूर्णांक के रूप में लौटाता है।\n    * उदाहरण:\n    *   जब $k = 1, फ़ंक्शन 1 लौटाता है।\n    *   जब $k = 8, फ़ंक्शन 408 लौटाता है।\n    */\n\n    function getPellNumberModulo($k)",
      "hu": "<?php\n\n/**\n    * Kiszámítja a Pell-sorozat k-adik tagját modulo 32767.\n    * A Pell-sorozat a következőképpen van definiálva:\n    *   a[1] = 1, a[2] = 2, és a[n] = 2*a[n-1] + a[n-2] ha n > 2.\n    * Ez a függvény kiszámítja a sorozat k-adik tagját modulo 32767.\n    * Bemenet: Egy egész szám $k (1 ≤ $k < 1000000), amely a sorozatbeli pozíciót jelöli.\n    * Kimenet: Visszaadja a Pell-sorozat k-adik tagját modulo 32767 egész számként.\n    * Példa:\n    *   Ha $k = 1, a függvény 1-et ad vissza.\n    *   Ha $k = 8, a függvény 408-at ad vissza.\n    */\n\n    function getPellNumberModulo($k)"
    },
    "prompt_bertscore": {
      "sq": "0.9951510351381763",
      "hy": "0.9958678921833313",
      "bn": "0.9938772185045995",
      "bg": "0.9958802072669554",
      "zh": "0.9951510351381763",
      "fr": "0.9958802072669554",
      "de": "0.9958678921833313",
      "ha": "0.9842480148927902",
      "hi": "0.9870437375058563",
      "hu": "0.9822056973149895"
    },
    "canonical_solution": "{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }",
    "instruction": {
      "en": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nJepni një përshkrim të shkurtër në gjuhën natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nՏվեք PHP կոդի հակիրճ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nBa da takaitaccen bayani a cikin yaren dabi'a (docstring) na lambar PHP a cikin Hausa, ba tare da wucewa haruffa 500 ba.",
      "hi": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function getPellNumberModulo($k)\n{\n        if ($k === 1) return 1;\n        if ($k === 2) return 2;\n    \n        $a = 1; // a[1]\n        $b = 2; // a[2]\n    \n        for ($i = 3; $i <= $k; $i++) {\n            $temp = (2 * $b + $a) % 32767;\n            $a = $b;\n            $b = $temp;\n        }\n    \n        return $b;\n    }\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9176373166127405",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    assert(getPellNumberModulo(1) === 1);\n    assert(getPellNumberModulo(8) === 408);\n    assert(getPellNumberModulo(3) === 5);\n    assert(getPellNumberModulo(5) === 29);\n    assert(getPellNumberModulo(10) === 2378);\n    assert(getPellNumberModulo(100000) === 27550);\n    assert(getPellNumberModulo(999999) === 21600);\n    \n}",
    "entry_point": "getPellNumberModulo",
    "signature": "function getPellNumberModulo($k)",
    "docstring": {
      "en": "Calculates the k-th term of the Pell sequence modulo 32767.\nThe Pell sequence is defined as follows:\na[1] = 1, a[2] = 2, and a[n] = 2*a[n-1] + a[n-2] for n > 2.\nThis function computes the k-th term of this sequence modulo 32767.\nInput: An integer $k (1 ≤ $k < 1000000), representing the position in the sequence.\nOutput: Returns the k-th term of the Pell sequence modulo 32767 as an integer.\nExample:\nFor $k = 1, the function returns 1.\nFor $k = 8, the function returns 408.",
      "sq": "Llogarit termin e k-të të sekuencës Pell modulo 32767.  \nSekuenca Pell përcaktohet si më poshtë:  \na[1] = 1, a[2] = 2, dhe a[n] = 2*a[n-1] + a[n-2] për n > 2.  \nKjo funksion llogarit termin e k-të të kësaj sekuence modulo 32767.  \nHyrja: Një numër i plotë $k (1 ≤ $k < 1000000), që përfaqëson pozicionin në sekuencë.  \nDalja: Kthen termin e k-të të sekuencës Pell modulo 32767 si një numër i plotë.  \nShembull:  \nPër $k = 1, funksioni kthen 1.  \nPër $k = 8, funksioni kthen 408.",
      "hy": "Հաշվում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով։\nՊելլի հաջորդականությունը սահմանվում է հետևյալ կերպ.\na[1] = 1, a[2] = 2, և a[n] = 2*a[n-1] + a[n-2] n > 2-ի համար։\nԱյս ֆունկցիան հաշվում է այս հաջորդականության k-րդ անդամը 32767 մոդուլով։\nՄուտք: Անկյուն $k (1 ≤ $k < 1000000), որը ներկայացնում է հաջորդականության դիրքը։\nԵլք: Վերադարձնում է Պելլի հաջորդականության k-րդ անդամը 32767 մոդուլով որպես ամբողջ թիվ։\nՕրինակ:\n$k = 1-ի համար, ֆունկցիան վերադարձնում է 1։\n$k = 8-ի համար, ֆունկցիան վերադարձնում է 408։",
      "bn": "Pell ক্রমের k-তম পদ 32767 মডুলো গণনা করে।  \nPell ক্রম নিম্নরূপ সংজ্ঞায়িত করা হয়েছে:  \na[1] = 1, a[2] = 2, এবং a[n] = 2*a[n-1] + a[n-2] n > 2 এর জন্য।  \nএই ফাংশনটি এই ক্রমের k-তম পদ 32767 মডুলো গণনা করে।  \nইনপুট: একটি পূর্ণসংখ্যা $k (1 ≤ $k < 1000000), যা ক্রমের অবস্থানকে উপস্থাপন করে।  \nআউটপুট: Pell ক্রমের k-তম পদ 32767 মডুলো একটি পূর্ণসংখ্যা হিসাবে রিটার্ন করে।  \nউদাহরণ:  \n$k = 1 এর জন্য, ফাংশনটি 1 রিটার্ন করে।  \n$k = 8 এর জন্য, ফাংশনটি 408 রিটার্ন করে।  ",
      "bg": "Изчислява k-тия член на Пелова последователност по модул 32767.  \nПеловата последователност е дефинирана по следния начин:  \na[1] = 1, a[2] = 2, и a[n] = 2*a[n-1] + a[n-2] за n > 2.  \nТази функция изчислява k-тия член на тази последователност по модул 32767.  \nВход: Цяло число $k (1 ≤ $k < 1000000), представляващо позицията в последователността.  \nИзход: Връща k-тия член на Пелова последователност по модул 32767 като цяло число.  \nПример:  \nЗа $k = 1, функцията връща 1.  \nЗа $k = 8, функцията връща 408.",
      "zh": "计算 Pell 序列的第 k 项模 32767。\nPell 序列定义如下：\na[1] = 1, a[2] = 2, 且 a[n] = 2*a[n-1] + a[n-2] 对于 n > 2。\n此函数计算该序列的第 k 项模 32767。\n输入：一个整数 $k (1 ≤ $k < 1000000)，表示序列中的位置。\n输出：返回 Pell 序列的第 k 项模 32767 作为一个整数。\n示例：\n对于 $k = 1，函数返回 1。\n对于 $k = 8，函数返回 408。",
      "fr": "Calcule le k-ème terme de la suite de Pell modulo 32767.  \nLa suite de Pell est définie comme suit :  \na[1] = 1, a[2] = 2, et a[n] = 2*a[n-1] + a[n-2] pour n > 2.  \nCette fonction calcule le k-ème terme de cette suite modulo 32767.  \nEntrée : Un entier $k (1 ≤ $k < 1000000), représentant la position dans la suite.  \nSortie : Renvoie le k-ème terme de la suite de Pell modulo 32767 en tant qu'entier.  \nExemple :  \nPour $k = 1, la fonction renvoie 1.  \nPour $k = 8, la fonction renvoie 408.",
      "de": "Berechnet das k-te Glied der Pell-Folge modulo 32767.\nDie Pell-Folge ist wie folgt definiert:\na[1] = 1, a[2] = 2, und a[n] = 2*a[n-1] + a[n-2] für n > 2.\nDiese Funktion berechnet das k-te Glied dieser Folge modulo 32767.\nEingabe: Eine ganze Zahl $k (1 ≤ $k < 1000000), die die Position in der Folge darstellt.\nAusgabe: Gibt das k-te Glied der Pell-Folge modulo 32767 als ganze Zahl zurück.\nBeispiel:\nFür $k = 1 gibt die Funktion 1 zurück.\nFür $k = 8 gibt die Funktion 408 zurück.",
      "ha": "Yana ƙididdige k-th kalma na jerin Pell modulo 32767. \n\nJerin Pell ana ayyana shi kamar haka: \na[1] = 1, a[2] = 2, kuma a[n] = 2*a[n-1] + a[n-2] don n > 2. \n\nWannan aikin yana ƙididdige k-th kalma na wannan jerin modulo 32767. \n\nShigarwa: Wani cikakken lamba $k (1 ≤ $k < 1000000), wanda ke wakiltar matsayi a cikin jerin. \n\nFitarwa: Yana mayar da k-th kalma na jerin Pell modulo 32767 a matsayin cikakken lamba. \n\nMisali: \nDon $k = 1, aikin yana mayar da 1. \nDon $k = 8, aikin yana mayar da 408.",
      "hi": "Pell अनुक्रम के k-वें पद की गणना 32767 के मापांक में करता है।\nPell अनुक्रम को निम्नलिखित रूप में परिभाषित किया गया है:\na[1] = 1, a[2] = 2, और a[n] = 2*a[n-1] + a[n-2] जब n > 2 हो।\nयह फ़ंक्शन इस अनुक्रम के k-वें पद की गणना 32767 के मापांक में करता है।\nइनपुट: एक पूर्णांक $k (1 ≤ $k < 1000000), जो अनुक्रम में स्थिति का प्रतिनिधित्व करता है।\nआउटपुट: Pell अनुक्रम के k-वें पद को 32767 के मापांक में एक पूर्णांक के रूप में लौटाता है।\nउदाहरण:\nजब $k = 1, तो फ़ंक्शन 1 लौटाता है।\nजब $k = 8, तो फ़ंक्शन 408 लौटाता है।",
      "hu": "Kiszámítja a Pell-sorozat k-adik tagját modulo 32767.\nA Pell-sorozat a következőképpen van definiálva:\na[1] = 1, a[2] = 2, és a[n] = 2*a[n-1] + a[n-2] minden n > 2 esetén.\nEz a függvény kiszámítja ennek a sorozatnak a k-adik tagját modulo 32767.\nBemenet: Egy egész szám $k (1 ≤ $k < 1000000), amely a sorozatbeli pozíciót jelöli.\nKimenet: Visszaadja a Pell-sorozat k-adik tagját modulo 32767 egész számként.\nPélda:\nHa $k = 1, a függvény 1-et ad vissza.\nHa $k = 8, a függvény 408-at ad vissza."
    },
    "docstring_bertscore": {
      "sq": "0.9880503962769411",
      "hy": "0.9705862172852107",
      "bn": "0.9621426384177986",
      "bg": "0.9909384820171884",
      "zh": "0.9842257682901143",
      "fr": "0.9880503962769411",
      "de": "0.990753557132445",
      "ha": "0.9835702880326992",
      "hi": "0.9394107817210229",
      "hu": "0.9809302916383645"
    }
  },
  {
    "task_id": "PHP/33",
    "prompt": {
      "en": "<?php\n\n/**\n    * Counts the number of flu infections in a dormitory grid after a certain number of days.\n    * The dormitory is represented as an n*n grid where each cell can have:\n    * - '.' representing a healthy person\n    * - '#' representing an empty room\n    * - '@' representing a person infected with the flu\n    * Each day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\n    * The function calculates the total number of infected individuals after 'm' days.\n    * Input: \n    *   - $dormitory: A 2D array representing the n*n dormitory grid.\n    *   - $days: An integer representing the number of days.\n    * Output: Returns the total number of flu infections after 'm' days.\n    * Example:\n    *   Input: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Output: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "sq": "<?php\n\n/**\n    * Numëron numrin e infeksioneve të gripit në një rrjet konvikti pas një numri të caktuar ditësh.\n    * Konvikti përfaqësohet si një rrjet n*n ku çdo qelizë mund të ketë:\n    * - '.' që përfaqëson një person të shëndetshëm\n    * - '#' që përfaqëson një dhomë bosh\n    * - '@' që përfaqëson një person të infektuar me grip\n    * Çdo ditë, individët e infektuar përhapin gripin te individët e shëndetshëm ngjitur (lart, poshtë, majtas, djathtas).\n    * Funksioni llogarit numrin total të individëve të infektuar pas 'm' ditësh.\n    * Hyrja: \n    *   - $dormitory: Një varg 2D që përfaqëson rrjetin n*n të konviktit.\n    *   - $days: Një numër i plotë që përfaqëson numrin e ditëve.\n    * Dalja: Kthen numrin total të infeksioneve të gripit pas 'm' ditësh.\n    * Shembull:\n    *   Hyrja: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Dalja: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hy": "<?php\n\n/**\n    * Հաշվում է գրիպի վարակների քանակը հանրակացարանի ցանցում որոշակի օրերի անցնելուց հետո։\n    * Հանրակացարանը ներկայացված է որպես n*n ցանց, որտեղ յուրաքանչյուր բջիջ կարող է ունենալ.\n    * - '.' ներկայացնում է առողջ անձ\n    * - '#' ներկայացնում է դատարկ սենյակ\n    * - '@' ներկայացնում է գրիպով վարակված անձ\n    * Ամեն օր, վարակված անձինք տարածում են գրիպը հարակից (վերև, ներքև, ձախ, աջ) առողջ անձանց։\n    * Ֆունկցիան հաշվարկում է վարակված անձանց ընդհանուր քանակը 'm' օրերի անցնելուց հետո։\n    * Մուտք: \n    *   - $dormitory: 2D զանգված, որը ներկայացնում է n*n հանրակացարանի ցանցը։\n    *   - $days: ամբողջ թիվ, որը ներկայացնում է օրերի քանակը։\n    * Ելք: Վերադարձնում է գրիպի վարակների ընդհանուր քանակը 'm' օրերի անցնելուց հետո։\n    * Օրինակ:\n    *   Մուտք: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Ելք: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "bn": "<?php\n\n/**\n    * একটি নির্দিষ্ট সংখ্যক দিনের পর একটি ডরমিটরি গ্রিডে ফ্লু সংক্রমণের সংখ্যা গণনা করে।\n    * ডরমিটরিটি একটি n*n গ্রিড হিসাবে উপস্থাপিত হয় যেখানে প্রতিটি কোষে থাকতে পারে:\n    * - '.' একটি সুস্থ ব্যক্তিকে উপস্থাপন করে\n    * - '#' একটি খালি ঘরকে উপস্থাপন করে\n    * - '@' ফ্লু দ্বারা সংক্রামিত একজন ব্যক্তিকে উপস্থাপন করে\n    * প্রতিদিন, সংক্রামিত ব্যক্তিরা সংলগ্ন (উপরে, নিচে, বাম, ডান) সুস্থ ব্যক্তিদের মধ্যে ফ্লু ছড়ায়।\n    * ফাংশনটি 'm' দিনের পর মোট সংক্রামিত ব্যক্তির সংখ্যা গণনা করে।\n    * ইনপুট: \n    *   - $dormitory: একটি 2D অ্যারে যা n*n ডরমিটরি গ্রিড উপস্থাপন করে।\n    *   - $days: একটি পূর্ণসংখ্যা যা দিনের সংখ্যা উপস্থাপন করে।\n    * আউটপুট: 'm' দিনের পর মোট ফ্লু সংক্রমণের সংখ্যা প্রদান করে।\n    * উদাহরণ:\n    *   ইনপুট: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   আউটপুট: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "bg": "<?php\n\n/**\n    * Брои броя на грипните инфекции в мрежа на общежитие след определен брой дни.\n    * Общежитието е представено като n*n мрежа, където всяка клетка може да има:\n    * - '.' представлява здрав човек\n    * - '#' представлява празна стая\n    * - '@' представлява човек, заразен с грип\n    * Всеки ден заразените индивиди разпространяват грипа към съседни (нагоре, надолу, наляво, надясно) здрави индивиди.\n    * Функцията изчислява общия брой на заразените индивиди след 'm' дни.\n    * Вход: \n    *   - $dormitory: Двуизмерен масив, представляващ n*n мрежата на общежитието.\n    *   - $days: Цяло число, представляващо броя на дните.\n    * Изход: Връща общия брой на грипните инфекции след 'm' дни.\n    * Пример:\n    *   Вход: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Изход: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "zh": "<?php\n\n/**\n    * 计算宿舍网格中在若干天后流感感染的人数。\n    * 宿舍被表示为一个 n*n 的网格，其中每个单元格可以是：\n    * - '.' 表示一个健康的人\n    * - '#' 表示一个空房间\n    * - '@' 表示一个感染流感的人\n    * 每天，感染者将流感传播给相邻（上、下、左、右）的健康人。\n    * 该函数计算 'm' 天后感染者的总人数。\n    * 输入: \n    *   - $dormitory: 一个表示 n*n 宿舍网格的二维数组。\n    *   - $days: 一个表示天数的整数。\n    * 输出: 返回 'm' 天后流感感染的总人数。\n    * 示例:\n    *   输入: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   输出: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "fr": "<?php\n\n/**\n    * Compte le nombre d'infections grippales dans une grille de dortoir après un certain nombre de jours.\n    * Le dortoir est représenté comme une grille n*n où chaque cellule peut avoir :\n    * - '.' représentant une personne en bonne santé\n    * - '#' représentant une chambre vide\n    * - '@' représentant une personne infectée par la grippe\n    * Chaque jour, les individus infectés propagent la grippe aux individus sains adjacents (haut, bas, gauche, droite).\n    * La fonction calcule le nombre total d'individus infectés après 'm' jours.\n    * Entrée : \n    *   - $dormitory : Un tableau 2D représentant la grille de dortoir n*n.\n    *   - $days : Un entier représentant le nombre de jours.\n    * Sortie : Retourne le nombre total d'infections grippales après 'm' jours.\n    * Exemple :\n    *   Entrée : [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Sortie : 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "de": "<?php\n\n/**\n    * Zählt die Anzahl der Grippeinfektionen in einem Wohnheimraster nach einer bestimmten Anzahl von Tagen.\n    * Das Wohnheim wird als n*n Raster dargestellt, wobei jede Zelle folgendes enthalten kann:\n    * - '.' repräsentiert eine gesunde Person\n    * - '#' repräsentiert ein leeres Zimmer\n    * - '@' repräsentiert eine mit der Grippe infizierte Person\n    * Jeden Tag verbreiten infizierte Personen die Grippe an benachbarte (oben, unten, links, rechts) gesunde Personen.\n    * Die Funktion berechnet die Gesamtanzahl der infizierten Personen nach 'm' Tagen.\n    * Eingabe: \n    *   - $dormitory: Ein 2D-Array, das das n*n Wohnheimraster darstellt.\n    *   - $days: Ein ganzzahliger Wert, der die Anzahl der Tage darstellt.\n    * Ausgabe: Gibt die Gesamtanzahl der Grippeinfektionen nach 'm' Tagen zurück.\n    * Beispiel:\n    *   Eingabe: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Ausgabe: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "ha": "<?php\n\n/**\n    * Yana ƙidayar adadin kamuwa da mura a cikin grid ɗin ɗakin kwanan dalibai bayan wasu kwanaki.\n    * Ana wakiltar ɗakin kwanan dalibai a matsayin grid n*n inda kowace cell na iya kasancewa da:\n    * - '.' yana wakiltar mutum lafiyayye\n    * - '#' yana wakiltar ɗaki babu kowa\n    * - '@' yana wakiltar mutum da ya kamu da mura\n    * Kowace rana, mutanen da suka kamu suna yada mura ga mutanen da ke kusa (sama, ƙasa, hagu, dama) da ke lafiyayyu.\n    * Aikin yana ƙididdige jimlar adadin mutanen da suka kamu bayan kwanaki 'm'.\n    * Shiga: \n    *   - $dormitory: Wani array 2D da ke wakiltar grid ɗin ɗakin kwanan dalibai n*n.\n    *   - $days: Wani lamba da ke wakiltar adadin kwanaki.\n    * Fita: Yana mayar da jimlar adadin kamuwa da mura bayan kwanaki 'm'.\n    * Misali:\n    *   Shiga: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Fita: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hi": "<?php\n\n/**\n    * एक छात्रावास ग्रिड में फ्लू संक्रमणों की संख्या कुछ दिनों के बाद गिनता है।\n    * छात्रावास को एक n*n ग्रिड के रूप में दर्शाया गया है जहाँ प्रत्येक सेल में हो सकता है:\n    * - '.' एक स्वस्थ व्यक्ति का प्रतिनिधित्व करता है\n    * - '#' एक खाली कमरे का प्रतिनिधित्व करता है\n    * - '@' फ्लू से संक्रमित व्यक्ति का प्रतिनिधित्व करता है\n    * प्रत्येक दिन, संक्रमित व्यक्ति आस-पास के (ऊपर, नीचे, बाएँ, दाएँ) स्वस्थ व्यक्तियों में फ्लू फैलाते हैं।\n    * यह फ़ंक्शन 'm' दिनों के बाद कुल संक्रमित व्यक्तियों की संख्या की गणना करता है।\n    * इनपुट: \n    *   - $dormitory: एक 2D ऐरे जो n*n छात्रावास ग्रिड का प्रतिनिधित्व करता है।\n    *   - $days: एक पूर्णांक जो दिनों की संख्या का प्रतिनिधित्व करता है।\n    * आउटपुट: 'm' दिनों के बाद फ्लू संक्रमणों की कुल संख्या लौटाता है।\n    * उदाहरण:\n    *   इनपुट: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   आउटपुट: 16\n*/\nfunction countFluInfections($dormitory, $days) ",
      "hu": "<?php\n\n/**\n    * Megszámolja az influenza fertőzések számát egy kollégiumi rácsban bizonyos napok elteltével.\n    * A kollégiumot egy n*n-es rács képviseli, ahol minden cella lehet:\n    * - '.' ami egy egészséges személyt jelöl\n    * - '#' ami egy üres szobát jelöl\n    * - '@' ami egy influenzával fertőzött személyt jelöl\n    * Minden nap a fertőzött egyének átterjesztik az influenzát a szomszédos (fel, le, balra, jobbra) egészséges egyénekre.\n    * A függvény kiszámítja a fertőzött egyének teljes számát 'm' nap elteltével.\n    * Bemenet: \n    *   - $dormitory: Egy 2D tömb, amely az n*n-es kollégiumi rácsot képviseli.\n    *   - $days: Egy egész szám, amely a napok számát jelöli.\n    * Kimenet: Visszaadja az influenza fertőzések teljes számát 'm' nap elteltével.\n    * Példa:\n    *   Bemenet: [['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 4\n    *   Kimenet: 16\n*/\nfunction countFluInfections($dormitory, $days) "
    },
    "prompt_bertscore": {
      "sq": "0.98668938090609",
      "hy": "0.9857065577807295",
      "bn": "0.9916678527763485",
      "bg": "0.9901717687463938",
      "zh": "0.9728668913202533",
      "fr": "0.9937367868252079",
      "de": "0.9720886574873585",
      "ha": "0.9808335586428005",
      "hi": "0.9788629466325534",
      "hu": "0.973138617681509"
    },
    "canonical_solution": "{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}",
    "instruction": {
      "en": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nJepni një përshkrim të shkurtër në gjuhën natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nՏվեք կարճ բնութագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 ko ƙasa da haka.",
      "hi": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function countFluInfections($dormitory, $days)\n{\n    $n = count($dormitory);\n    $directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n    $b = $dormitory;\n\n    for ($k = 2; $k <= $days; $k++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($dormitory[$i][$j] == '@') {\n                    foreach ($directions as $dir) {\n                        $xx = $i + $dir[0];\n                        $yy = $j + $dir[1];\n                        if ($xx >= 0 && $xx < $n && $yy >= 0 && $yy < $n && $b[$xx][$yy] == '.') {\n                            $b[$xx][$yy] = '@';\n                        }\n                    }\n                }\n            }\n        }\n        $dormitory = $b;\n    }\n\n    $ans = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($dormitory[$i][$j] == '@') {\n                $ans++;\n            }\n        }\n    }\n    // echo $ans;\n    return $ans;\n}\n\nAdj meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8963886329711523",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9405372146118718",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(countFluInfections([\n        ['.','.','.','.','#'], \n        ['.','#','.','@','.'], \n        ['.','#','@','.','.'], \n        ['#','.','.','.','.'], \n        ['#','.','.','.','.']], 4) === 16);\n    \n\n    assert(countFluInfections([\n            ['.','.','.','.','#'], \n            ['.','#','.','@','.'], \n            ['.','#','@','.','.'], \n            ['#','.','.','.','.'], \n            ['#','.','.','.','.']], 1) === 2);\n    \n\n    assert(countFluInfections([\n                ['.','.','.','.','#'], \n                ['.','#','.','@','.'], \n                ['.','#','@','.','.'], \n                ['#','.','.','.','.'], \n                ['#','.','.','.','.']], 2) === 7);\n\n    assert(countFluInfections([\n                    ['.','.','.','.','#'], \n                    ['.','#','.','#','.'], \n                    ['.','#','#','.','.'], \n                    ['#','.','.','.','.'], \n                    ['#','.','.','.','.']], 100) === 0);\n}\n\n\nmain();\n?>",
    "entry_point": "countFluInfections",
    "signature": "function countFluInfections($dormitory, $days)",
    "docstring": {
      "en": "Counts the number of flu infections in a dormitory grid after a certain number of days.\nThe dormitory is represented as an n*n grid where each cell can have:\n- '.' representing a healthy person\n- '#' representing an empty room\n- '@' representing a person infected with the flu\nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.\nThe function calculates the total number of infected individuals after 'm' days.\nInput:\n- $dormitory: A 2D array representing the n*n dormitory grid.\n- $days: An integer representing the number of days.\nOutput: Returns the total number of flu infections after 'm' days.\nExample:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16",
      "sq": "Numëron numrin e infeksioneve të gripit në një rrjet konvikti pas një numri të caktuar ditësh. Konvikti përfaqësohet si një rrjet n*n ku çdo qelizë mund të ketë:\n- '.' që përfaqëson një person të shëndetshëm\n- '#' që përfaqëson një dhomë bosh\n- '@' që përfaqëson një person të infektuar me grip\nÇdo ditë, individët e infektuar përhapin gripin te individët e shëndetshëm ngjitur (lart, poshtë, majtas, djathtas).\nFunksioni llogarit numrin total të individëve të infektuar pas 'm' ditësh.\nInput:\n- $dormitory: Një varg 2D që përfaqëson rrjetin n*n të konviktit.\n- $days: Një numër i plotë që përfaqëson numrin e ditëve.\nOutput: Kthen numrin total të infeksioneve të gripit pas 'm' ditësh.\nShembull:\nInput: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nOutput: 16",
      "hy": "Հաշվում է գրիպի վարակների քանակը հանրակացարանի ցանցում որոշակի օրերի ընթացքում:\nՀանրակացարանը ներկայացված է որպես n*n ցանց, որտեղ յուրաքանչյուր բջիջ կարող է ունենալ.\n- '.' ներկայացնում է առողջ մարդ\n- '#' ներկայացնում է դատարկ սենյակ\n- '@' ներկայացնում է գրիպով վարակված մարդ\nԱմեն օր վարակված անձինք տարածում են գրիպը հարակից (վերև, ներքև, ձախ, աջ) առողջ անձանց:\nՖունկցիան հաշվում է վարակված անձանց ընդհանուր քանակը 'm' օրից հետո:\nՄուտք:\n- $dormitory: 2D զանգված, որը ներկայացնում է n*n հանրակացարանի ցանցը:\n- $days: Ամբողջ թիվ, որը ներկայացնում է օրերի քանակը:\nԵլք: Վերադարձնում է գրիպի վարակների ընդհանուր քանակը 'm' օրից հետո:\nՕրինակ:\nՄուտք: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nԵլք: 16",
      "bn": "একটি ডরমিটরি গ্রিডে নির্দিষ্ট সংখ্যক দিনের পর ফ্লু সংক্রমণের সংখ্যা গণনা করে।\nডরমিটরির গ্রিডে নির্দিষ্ট সংখ্যক দিনের পর ফ্লু সংক্রমণের সংখ্যা গণনা করে।  \nThe dormitory is represented as an n*n grid where each cell can have:  \nডরমিটরিটি একটি n*n গ্রিড হিসেবে উপস্থাপিত হয় যেখানে প্রতিটি সেলে থাকতে পারে:  \n- '.' representing a healthy person  \n  - '.' একটি সুস্থ ব্যক্তিকে উপস্থাপন করে  \n- '#' representing an empty room  \n  - '#' একটি খালি ঘরকে উপস্থাপন করে  \n- '@' representing a person infected with the flu  \n  - '@' ফ্লু দ্বারা সংক্রমিত একজন ব্যক্তিকে উপস্থাপন করে  \nEach day, infected individuals spread the flu to adjacent (up, down, left, right) healthy individuals.  \nপ্রতিদিন, সংক্রমিত ব্যক্তিরা সংলগ্ন (উপরে, নিচে, বামে, ডানে) সুস্থ ব্যক্তিদের মধ্যে ফ্লু ছড়ায়।  \nThe function calculates the total number of infected individuals after 'm' days.  \nফাংশনটি 'm' দিনের পর মোট সংক্রমিত ব্যক্তির সংখ্যা গণনা করে।  \nInput:  \nইনপুট:  \n- $dormitory: A 2D array representing the n*n dormitory grid.  \n  - $dormitory: একটি 2D অ্যারে যা n*n ডরমিটরি গ্রিড উপস্থাপন করে।  \n- $days: An integer representing the number of days.  \n  - $days: একটি পূর্ণসংখ্যা যা দিনের সংখ্যা উপস্থাপন করে।  \nOutput: Returns the total number of flu infections after 'm' days.  \nআউটপুট: 'm' দিনের পর মোট ফ্লু সংক্রমণের সংখ্যা প্রদান করে।  \nExample:  \nউদাহরণ:  \nInput: [['.','.','.','.','#'],  \nইনপুট: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nOutput: 16  \nআউটপুট: 16  ",
      "bg": "Брои броя на заразените с грип в мрежа на общежитие след определен брой дни.\nОбщежитието е представено като n*n мрежа, където всяка клетка може да има:\n- '.' представлява здрав човек\n- '#' представлява празна стая\n- '@' представлява човек, заразен с грип\nВсеки ден заразените индивиди разпространяват грипа към съседни (нагоре, надолу, наляво, надясно) здрави индивиди.\nФункцията изчислява общия брой на заразените индивиди след 'm' дни.\nВход:\n- $dormitory: 2D масив, представляващ n*n мрежа на общежитието.\n- $days: Цяло число, представляващо броя на дните.\nИзход: Връща общия брой на заразените с грип след 'm' дни.\nПример:\nВход: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nИзход: 16",
      "zh": "计算宿舍网格中经过若干天后的流感感染人数。\n宿舍被表示为一个 n*n 的网格，其中每个单元格可以是：\n- '.' 表示健康的人\n- '#' 表示空房间\n- '@' 表示感染流感的人\n每天，感染者会将流感传播给相邻（上、下、左、右）的健康人。\n该函数计算经过 'm' 天后感染者的总人数。\n输入：\n- $dormitory: 一个表示 n*n 宿舍网格的二维数组。\n- $days: 一个表示天数的整数。\n输出：返回经过 'm' 天后的流感感染总人数。\n示例：\n输入: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\n输出: 16",
      "fr": "Compte le nombre d'infections grippales dans une grille de dortoir après un certain nombre de jours.  \nLe dortoir est représenté comme une grille n*n où chaque cellule peut contenir :  \n- '.' représentant une personne en bonne santé  \n- '#' représentant une chambre vide  \n- '@' représentant une personne infectée par la grippe  \nChaque jour, les individus infectés propagent la grippe aux individus en bonne santé adjacents (haut, bas, gauche, droite).  \nLa fonction calcule le nombre total d'individus infectés après 'm' jours.  \nEntrée :  \n- $dormitory : Un tableau 2D représentant la grille du dortoir n*n.  \n- $days : Un entier représentant le nombre de jours.  \nSortie : Renvoie le nombre total d'infections grippales après 'm' jours.  \nExemple :  \nEntrée : [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nSortie : 16  ",
      "de": "Zählt die Anzahl der Grippeinfektionen in einem Wohnheimraster nach einer bestimmten Anzahl von Tagen.  \nDas Wohnheim wird als ein n*n Raster dargestellt, wobei jede Zelle enthalten kann:  \n- '.' steht für eine gesunde Person  \n- '#' steht für ein leeres Zimmer  \n- '@' steht für eine mit der Grippe infizierte Person  \nJeden Tag verbreiten infizierte Personen die Grippe an benachbarte (oben, unten, links, rechts) gesunde Personen.  \nDie Funktion berechnet die Gesamtzahl der infizierten Personen nach 'm' Tagen.  \nEingabe:  \n- $dormitory: Ein 2D-Array, das das n*n Wohnheimraster darstellt.  \n- $days: Eine ganze Zahl, die die Anzahl der Tage darstellt.  \nAusgabe: Gibt die Gesamtzahl der Grippeinfektionen nach 'm' Tagen zurück.  \nBeispiel:  \nEingabe: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nAusgabe: 16  ",
      "ha": "Yana ƙidaya adadin kamuwa da mura a cikin grid ɗin ɗakin kwanan dalibai bayan wasu kwanaki.\n\nAna wakilta ɗakin kwanan dalibai a matsayin grid n*n inda kowace cell na iya samun:\n\n- '.' yana wakiltar mutum lafiyayye\n- '#' yana wakiltar daki mara kowa\n- '@' yana wakiltar mutum da ya kamu da mura\n\nKowace rana, mutanen da suka kamu suna yada mura ga mutanen da ke kusa (sama, ƙasa, hagu, dama) da ba su kamu ba.\n\nAikin yana ƙididdige jimillar mutanen da suka kamu bayan kwanaki 'm'.\n\nShigarwa:\n\n- $dormitory: Wani tsari na 2D da ke wakiltar grid ɗin ɗakin kwanan dalibai n*n.\n- $days: Wani lamba mai nuna adadin kwanaki.\n\nFitarwa: Yana mayar da jimillar adadin kamuwa da mura bayan kwanaki 'm'.\n\nMisali:\n\nShigarwa: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\n\nFitarwa: 16",
      "hi": "किसी छात्रावास ग्रिड में निश्चित संख्या में दिनों के बाद फ्लू संक्रमणों की संख्या की गणना करता है।\nहॉस्टल को n*n ग्रिड के रूप में दर्शाया गया है जहाँ प्रत्येक सेल में हो सकता है:\n- '.' एक स्वस्थ व्यक्ति को दर्शाता है\n- '#' एक खाली कमरे को दर्शाता है\n- '@' एक फ्लू संक्रमित व्यक्ति को दर्शाता है\nप्रत्येक दिन, संक्रमित व्यक्ति फ्लू को आस-पास (ऊपर, नीचे, बाएँ, दाएँ) के स्वस्थ व्यक्तियों में फैलाते हैं।\nयह फ़ंक्शन 'm' दिनों के बाद कुल संक्रमित व्यक्तियों की संख्या की गणना करता है।\nइनपुट:\n- $dormitory: एक 2D ऐरे जो n*n हॉस्टल ग्रिड का प्रतिनिधित्व करता है।\n- $days: एक पूर्णांक जो दिनों की संख्या का प्रतिनिधित्व करता है।\nआउटपुट: 'm' दिनों के बाद फ्लू संक्रमणों की कुल संख्या लौटाता है।\nउदाहरण:\nइनपुट: [['.','.','.','.','#'],\n['.','#','.','@','.'],\n['.','#','@','.','.'],\n['#','.','.','.','.'],\n['#','.','.','.','.']], 4\nआउटपुट: 16",
      "hu": "Számolja meg az influenza fertőzések számát egy kollégiumi rácsban bizonyos napok elteltével.  \nA kollégiumot egy n*n rács képviseli, ahol minden cella lehet:  \n- '.' egy egészséges személyt képvisel  \n- '#' egy üres szobát képvisel  \n- '@' egy influenzával fertőzött személyt képvisel  \nMinden nap a fertőzött egyének az influenzát a szomszédos (fel, le, balra, jobbra) egészséges egyénekre terjesztik.  \nA függvény kiszámítja a fertőzött egyének teljes számát 'm' nap elteltével.  \nBemenet:  \n- $dormitory: Egy 2D tömb, amely az n*n kollégiumi rácsot képviseli.  \n- $days: Egy egész szám, amely a napok számát képviseli.  \nKimenet: Visszaadja az influenza fertőzések teljes számát 'm' nap elteltével.  \nPélda:  \nBemenet: [['.','.','.','.','#'],  \n['.','#','.','@','.'],  \n['.','#','@','.','.'],  \n['#','.','.','.','.'],  \n['#','.','.','.','.']], 4  \nKimenet: 16  "
    },
    "docstring_bertscore": {
      "sq": "0.9852052146989974",
      "hy": "0.9580403251582851",
      "bn": "0.9841302270768366",
      "bg": "0.9755237712969759",
      "zh": "0.9713747798979192",
      "fr": "0.9929591488834563",
      "de": "0.9594794022688828",
      "ha": "0.9764545532625054",
      "hi": "0.9890824797367984",
      "hu": "0.9654647315406071"
    }
  },
  {
    "task_id": "PHP/34",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\n * The grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n * - For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n * - For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\n * Input: Two integers, m and n, representing the number of rows and columns of the grid.\n * Output: Returns the count of unique paths from (1,1) to (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e shtigjeve unike që një milingonë mund të ndjekë për të lëvizur nga këndi i poshtëm-majtë në këndin e sipërm-djathtë të një rrjeti.\n * Rrjeti përcaktohet nga m rreshta dhe n kolona. Milingona fillon në (1,1) dhe mund të lëvizë vetëm djathtas ose lart për shkak të një dëmtimi.\n * - Për një rrjet 1x1 (m = 1, n = 1), ka vetëm 1 shteg.\n * - Për një rrjet 2x3 (m = 2, n = 3), ka 3 shtigje të mundshme.\n * Hyrja: Dy numra të plotë, m dhe n, që përfaqësojnë numrin e rreshtave dhe kolonave të rrjetit.\n * Dalja: Kthen numrin e shtigjeve unike nga (1,1) në (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է եզակի ուղիների քանակը, որով մրջյունը կարող է շարժվել ցանցի ներքևի ձախից վերևի աջ անկյուն:\n * Ցանցը սահմանվում է m տողերով և n սյունակներով: Մրջյունը սկսում է (1,1) կետից և կարող է շարժվել միայն աջ կամ վերև վնասվածքի պատճառով:\n * - 1x1 ցանցի համար (m = 1, n = 1), կա միայն 1 ուղի:\n * - 2x3 ցանցի համար (m = 2, n = 3), կան 3 հնարավոր ուղիներ:\n * Մուտք: Երկու ամբողջ թիվ, m և n, որոնք ներկայացնում են ցանցի տողերի և սյունակների քանակը:\n * Ելք: Վերադարձնում է եզակի ուղիների քանակը (1,1)-ից (m,n):\n */\n\n function countAntPaths($m, $n): int ",
      "bn": "<?php\n\n\n/**\n * একটি পিপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে যা একটি গ্রিডের নিচের-বাম থেকে উপরের-ডান কোণে যেতে পারে।\n * গ্রিডটি m সারি এবং n কলাম দ্বারা সংজ্ঞায়িত করা হয়। পিপড়ে (1,1) এ শুরু করে এবং শুধুমাত্র ডান বা উপরে যেতে পারে একটি আঘাতের কারণে।\n * - একটি 1x1 গ্রিডের জন্য (m = 1, n = 1), শুধুমাত্র 1টি পথ আছে।\n * - একটি 2x3 গ্রিডের জন্য (m = 2, n = 3), 3টি সম্ভাব্য পথ আছে।\n * ইনপুট: দুটি পূর্ণসংখ্যা, m এবং n, যা গ্রিডের সারি এবং কলামের সংখ্যা প্রতিনিধিত্ব করে।\n * আউটপুট: (1,1) থেকে (m,n) পর্যন্ত অনন্য পথের সংখ্যা ফেরত দেয়।\n */\n\n function countAntPaths($m, $n): int ",
      "bg": "<?php\n\n\n/**\n * Брои броя на уникалните пътища, които една мравка може да измине, за да се премести от долния ляв до горния десен ъгъл на мрежа.\n * Мрежата е определена от m реда и n колони. Мравката започва от (1,1) и може да се движи само надясно или нагоре поради нараняване.\n * - За мрежа 1x1 (m = 1, n = 1), има само 1 път.\n * - За мрежа 2x3 (m = 2, n = 3), има 3 възможни пътища.\n * Вход: Две цели числа, m и n, представляващи броя на редовете и колоните на мрежата.\n * Изход: Връща броя на уникалните пътища от (1,1) до (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "zh": "<?php\n\n\n/**\n * 计算蚂蚁从网格的左下角移动到右上角的唯一路径数量。\n * 网格由 m 行和 n 列定义。蚂蚁从 (1,1) 开始，由于受伤只能向右或向上移动。\n * - 对于 1x1 网格 (m = 1, n = 1)，只有 1 条路径。\n * - 对于 2x3 网格 (m = 2, n = 3)，有 3 条可能的路径。\n * 输入：两个整数，m 和 n，表示网格的行数和列数。\n * 输出：返回从 (1,1) 到 (m,n) 的唯一路径数量。\n */\n\n function countAntPaths($m, $n): int ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre de chemins uniques qu'une fourmi peut emprunter pour se déplacer du coin inférieur gauche au coin supérieur droit d'une grille.\n * La grille est définie par m lignes et n colonnes. La fourmi commence à (1,1) et ne peut se déplacer que vers la droite ou vers le haut en raison d'une blessure.\n * - Pour une grille 1x1 (m = 1, n = 1), il n'y a qu'un seul chemin.\n * - Pour une grille 2x3 (m = 2, n = 3), il y a 3 chemins possibles.\n * Entrée : Deux entiers, m et n, représentant le nombre de lignes et de colonnes de la grille.\n * Sortie : Retourne le compte des chemins uniques de (1,1) à (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der einzigartigen Wege, die eine Ameise nehmen kann, um sich von der unteren linken zur oberen rechten Ecke eines Gitters zu bewegen.\n * Das Gitter wird durch m Zeilen und n Spalten definiert. Die Ameise startet bei (1,1) und kann aufgrund einer Verletzung nur nach rechts oder oben gehen.\n * - Für ein 1x1 Gitter (m = 1, n = 1) gibt es nur 1 Weg.\n * - Für ein 2x3 Gitter (m = 2, n = 3) gibt es 3 mögliche Wege.\n * Eingabe: Zwei ganze Zahlen, m und n, die die Anzahl der Zeilen und Spalten des Gitters darstellen.\n * Ausgabe: Gibt die Anzahl der einzigartigen Wege von (1,1) nach (m,n) zurück.\n */\n\n function countAntPaths($m, $n): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙirga adadin hanyoyin musamman da ƙudan zuma zai iya bi don motsawa daga ƙasan hagu zuwa saman dama na grid.\n * Ana ayyana grid ta hanyar m layuka da n ginshiƙai. Ƙudan zuma yana farawa a (1,1) kuma zai iya motsawa kawai dama ko sama saboda rauni.\n * - Don grid 1x1 (m = 1, n = 1), akwai hanya 1 kawai.\n * - Don grid 2x3 (m = 2, n = 3), akwai hanyoyi 3 masu yiwuwa.\n * Shigarwa: Lambobi guda biyu, m da n, suna wakiltar adadin layuka da ginshiƙai na grid.\n * Fitarwa: Yana mayar da ƙididdigar hanyoyin musamman daga (1,1) zuwa (m,n).\n */\n\n function countAntPaths($m, $n): int ",
      "hi": "<?php\n\n\n/**\n * गणना करता है कि एक चींटी कितने अद्वितीय रास्ते ले सकती है ताकि वह ग्रिड के नीचे-बाएँ से ऊपर-दाएँ कोने तक जा सके।\n * ग्रिड m पंक्तियों और n स्तंभों द्वारा परिभाषित है। चींटी (1,1) से शुरू होती है और चोट के कारण केवल दाएँ या ऊपर जा सकती है।\n * - 1x1 ग्रिड के लिए (m = 1, n = 1), केवल 1 रास्ता है।\n * - 2x3 ग्रिड के लिए (m = 2, n = 3), 3 संभावित रास्ते हैं।\n * इनपुट: दो पूर्णांक, m और n, जो ग्रिड की पंक्तियों और स्तंभों की संख्या का प्रतिनिधित्व करते हैं।\n * आउटपुट: (1,1) से (m,n) तक अद्वितीय रास्तों की गणना लौटाता है।\n */\n\n function countAntPaths($m, $n): int ",
      "hu": "<?php\n\n\n/**\n * Megszámolja az egyedi utak számát, amelyeket egy hangya megtehet, hogy a rács bal alsó sarkából a jobb felső sarokba jusson.\n * A rácsot m sor és n oszlop határozza meg. A hangya a (1,1) pontból indul, és csak jobbra vagy felfelé mozoghat egy sérülés miatt.\n * - Egy 1x1-es rács esetén (m = 1, n = 1), csak 1 út van.\n * - Egy 2x3-as rács esetén (m = 2, n = 3), 3 lehetséges út van.\n * Bemenet: Két egész szám, m és n, amelyek a rács sorainak és oszlopainak számát jelölik.\n * Kimenet: Visszaadja az egyedi utak számát a (1,1) ponttól az (m,n) pontig.\n */\n\n function countAntPaths($m, $n): int "
    },
    "prompt_bertscore": {
      "sq": "0.9879514783471858",
      "hy": "0.9802338935224562",
      "bn": "0.986968059330682",
      "bg": "0.9952723983009887",
      "zh": "0.98294857494006",
      "fr": "0.9948034319713652",
      "de": "0.9877866151309268",
      "ha": "0.9726160211490061",
      "hi": "0.9877868137613078",
      "hu": "0.9687323999390121"
    },
    "canonical_solution": " {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}",
    "instruction": {
      "en": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nՏվեք PHP կոդի համառոտ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nBa da takaitaccen bayani a cikin yaren dabi'a (docstring) na lambar PHP a Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function countAntPaths($m, $n): int\n {\n    // Base case\n    if ($m == 1 || $n == 1) {\n        return 1;\n    }\n\n    // Create a 2D array to store path counts\n    $pathCount = array_fill(0, $m, array_fill(0, $n, 0));\n\n    // Initialize the first row and first column\n    for ($i = 0; $i < $m; $i++) {\n        $pathCount[$i][0] = 1;\n    }\n    for ($j = 0; $j < $n; $j++) {\n        $pathCount[0][$j] = 1;\n    }\n\n    // Calculate path counts for other cells\n    for ($i = 1; $i < $m; $i++) {\n        for ($j = 1; $j < $n; $j++) {\n            $pathCount[$i][$j] = $pathCount[$i - 1][$j] + $pathCount[$i][$j - 1];\n        }\n    }\n\n    return $pathCount[$m - 1][$n - 1];\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9136390856728892",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(countAntPaths(1, 1) === 1); // One path in a 1x1 grid\n    assert(countAntPaths(2, 3) === 3); // Three paths in a 2x3 grid\n    assert(countAntPaths(3, 3) === 6); // Six paths in a 3x3 grid    \n    assert(countAntPaths(7, 13) === 18564);    \n}\n\n\nmain();\n?>",
    "entry_point": "countAntPaths",
    "signature": "function countAntPaths($m, $n): int",
    "docstring": {
      "en": "Counts the number of unique paths an ant can take to move from the bottom-left to the top-right corner of a grid.\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nOutput: Returns the count of unique paths from (1,1) to (m,n).",
      "sq": "Numëron numrin e shtigjeve unike që një milingonë mund të ndjekë për të lëvizur nga këndi i poshtëm-majtë në këndin e sipërm-djathtë të një rrjeti.\nRrjeti përcaktohet nga m rreshta dhe n kolona. Milingona fillon në (1,1) dhe mund të lëvizë vetëm djathtas ose lart për shkak të një dëmtimi.\n- Për një rrjet 1x1 (m = 1, n = 1), ekziston vetëm 1 shteg.\n- Për një rrjet 2x3 (m = 2, n = 3), ka 3 shtigje të mundshme.\nInput: Dy numra të plotë, m dhe n, që përfaqësojnë numrin e rreshtave dhe kolonave të rrjetit.\nOutput: Kthen numrin e shtigjeve unike nga (1,1) në (m,n).",
      "hy": "Հաշվում է այն եզակի ուղիների քանակը, որոնցով մրջյունը կարող է շարժվել ցանցի ներքևի ձախ անկյունից դեպի վերևի աջ անկյուն:\nՑանցը սահմանվում է m տողերով և n սյունակներով: Մրջյունը սկսում է (1,1) կետից և կարող է շարժվել միայն աջ կամ վերև վնասվածքի պատճառով:\n- 1x1 ցանցի համար (m = 1, n = 1), կա միայն 1 ուղի:\n- 2x3 ցանցի համար (m = 2, n = 3), կան 3 հնարավոր ուղիներ:\nՄուտք: Երկու ամբողջ թիվ, m և n, որոնք ներկայացնում են ցանցի տողերի և սյունակների քանակը:\nԵլք: Վերադարձնում է եզակի ուղիների քանակը (1,1)-ից (m,n):",
      "bn": "একটি পিপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে যা একটি গ্রিডের নিচের-বাম দিক থেকে উপরের-ডান কোণে যেতে পারে।\nগ্রিডের নিচের-বাম কোণ থেকে উপরের-ডান কোণে যাওয়ার জন্য একটি পিঁপড়ে কতগুলি অনন্য পথ নিতে পারে তা গণনা করে।\nThe grid is defined by m rows and n columns. The ant starts at (1,1) and can only move right or up due to an injury.\nগ্রিডটি m সারি এবং n কলাম দ্বারা সংজ্ঞায়িত করা হয়। পিঁপড়ে (1,1) থেকে শুরু করে এবং শুধুমাত্র ডান বা উপরে যেতে পারে একটি আঘাতের কারণে।\n- For a 1x1 grid (m = 1, n = 1), there is only 1 path.\n- একটি 1x1 গ্রিডের জন্য (m = 1, n = 1), শুধুমাত্র 1টি পথ রয়েছে।\n- For a 2x3 grid (m = 2, n = 3), there are 3 possible paths.\n- একটি 2x3 গ্রিডের জন্য (m = 2, n = 3), 3টি সম্ভাব্য পথ রয়েছে।\nInput: Two integers, m and n, representing the number of rows and columns of the grid.\nইনপুট: দুটি পূর্ণসংখ্যা, m এবং n, যা গ্রিডের সারি এবং কলামের সংখ্যা উপস্থাপন করে।\nOutput: Returns the count of unique paths from (1,1) to (m,n).\nআউটপুট: (1,1) থেকে (m,n) পর্যন্ত অনন্য পথের সংখ্যা ফেরত দেয়।",
      "bg": "Преброява броя на уникалните пътища, които една мравка може да измине, за да се премести от долния ляв до горния десен ъгъл на мрежа. \nМрежата е дефинирана от m реда и n колони. Мравката започва от (1,1) и може да се движи само надясно или нагоре поради нараняване.\n- За мрежа 1x1 (m = 1, n = 1), има само 1 път.\n- За мрежа 2x3 (m = 2, n = 3), има 3 възможни пътища.\nВход: Две цели числа, m и n, представляващи броя на редовете и колоните на мрежата.\nИзход: Връща броя на уникалните пътища от (1,1) до (m,n).",
      "zh": "计算蚂蚁从网格的左下角移动到右上角的唯一路径数量。\n网格由 m 行和 n 列定义。蚂蚁从 (1,1) 开始，由于受伤只能向右或向上移动。  \n- 对于 1x1 网格 (m = 1, n = 1)，只有 1 条路径。  \n- 对于 2x3 网格 (m = 2, n = 3)，有 3 条可能的路径。  \n输入：两个整数，m 和 n，表示网格的行数和列数。  \n输出：返回从 (1,1) 到 (m,n) 的唯一路径数量。",
      "fr": "Compte le nombre de chemins uniques qu'une fourmi peut emprunter pour se déplacer du coin inférieur gauche au coin supérieur droit d'une grille.\nLa grille est définie par m lignes et n colonnes. La fourmi commence à (1,1) et ne peut se déplacer que vers la droite ou vers le haut en raison d'une blessure.\n- Pour une grille de 1x1 (m = 1, n = 1), il n'y a qu'un seul chemin.\n- Pour une grille de 2x3 (m = 2, n = 3), il y a 3 chemins possibles.\nEntrée : Deux entiers, m et n, représentant le nombre de lignes et de colonnes de la grille.\nSortie : Retourne le nombre de chemins uniques de (1,1) à (m,n).",
      "de": "Zählt die Anzahl der einzigartigen Pfade, die eine Ameise nehmen kann, um sich von der unteren linken zur oberen rechten Ecke eines Gitters zu bewegen. Das Gitter wird durch m Zeilen und n Spalten definiert. Die Ameise startet bei (1,1) und kann aufgrund einer Verletzung nur nach rechts oder oben gehen.\n- Für ein 1x1 Gitter (m = 1, n = 1) gibt es nur 1 Pfad.\n- Für ein 2x3 Gitter (m = 2, n = 3) gibt es 3 mögliche Pfade.\nEingabe: Zwei ganze Zahlen, m und n, die die Anzahl der Zeilen und Spalten des Gitters darstellen.\nAusgabe: Gibt die Anzahl der einzigartigen Pfade von (1,1) zu (m,n) zurück.",
      "ha": "Yana ƙididdige adadin hanyoyin musamman da tururuwa za ta iya bi don motsawa daga ƙasan hagu zuwa saman dama na grid.\nGrid ɗin an ayyana shi da m layuka da n ginshiƙai. Tururuwa tana farawa a (1,1) kuma tana iya motsawa dama ko sama kawai saboda rauni.\n- Don grid 1x1 (m = 1, n = 1), akwai hanya 1 kawai.\n- Don grid 2x3 (m = 2, n = 3), akwai hanyoyi 3 masu yiwuwa.\nShigarwa: Lambobi biyu, m da n, suna wakiltar adadin layuka da ginshiƙai na grid.\nFitarwa: Yana dawo da ƙididdigar hanyoyin musamman daga (1,1) zuwa (m,n).",
      "hi": "नीचे-बाएँ से ऊपर-दाएँ कोने तक एक चींटी कितने अनोखे रास्ते ले सकती है, इसकी गिनती करता है।\nग्रिड m पंक्तियों और n स्तंभों द्वारा परिभाषित है। चींटी (1,1) से शुरू होती है और चोट के कारण केवल दाएँ या ऊपर की ओर बढ़ सकती है।\n- 1x1 ग्रिड (m = 1, n = 1) के लिए, केवल 1 रास्ता है।\n- 2x3 ग्रिड (m = 2, n = 3) के लिए, 3 संभावित रास्ते हैं।\nइनपुट: दो पूर्णांक, m और n, जो ग्रिड की पंक्तियों और स्तंभों की संख्या का प्रतिनिधित्व करते हैं।\nआउटपुट: (1,1) से (m,n) तक अनोखे रास्तों की गिनती लौटाता है।",
      "hu": "Számolja meg, hány egyedi útvonalat tehet meg egy hangya, hogy eljusson a rács bal alsó sarkából a jobb felső sarkába.\nA rácsot m sor és n oszlop határozza meg. A hangya az (1,1) pontból indul, és csak jobbra vagy felfelé mozoghat egy sérülés miatt.\n- Egy 1x1-es rács esetén (m = 1, n = 1) csak 1 útvonal létezik.\n- Egy 2x3-as rács esetén (m = 2, n = 3) 3 lehetséges útvonal van.\nBemenet: Két egész szám, m és n, amelyek a rács sorainak és oszlopainak számát jelölik.\nKimenet: Visszaadja az egyedi útvonalak számát az (1,1) és (m,n) között."
    },
    "docstring_bertscore": {
      "sq": "0.9792425292907111",
      "hy": "0.9570888856331279",
      "bn": "1",
      "bg": "0.9914513456610204",
      "zh": "0.9767874577811199",
      "fr": "0.9951125008442555",
      "de": "0.992302874104517",
      "ha": "0.9151053751456888",
      "hi": "0.9709266697583044",
      "hu": "0.9658951635763097"
    }
  },
  {
    "task_id": "PHP/35",
    "prompt": {
      "en": "<?php\n\n/**\n * Determines if there exists at least one permutation of adding '+' or '-' \n * before each number in a sequence such that the sum of the sequence is \n * divisible by a given number k.\n * \n * The function takes two arguments: \n * - $numbers: An array of positive integers representing the sequence.\n * - $k: An integer representing the divisor.\n * \n * The function returns \"YES\" if at least one permutation of the sequence \n * can be divided by $k, otherwise returns \"NO\".\n * \n * Example:\n * Given $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\n * Given $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "sq": "<?php\n\n/**\n * Përcakton nëse ekziston të paktën një renditje e shtimit të '+' ose '-' \n * para çdo numri në një sekuencë të tillë që shuma e sekuencës të jetë \n * e pjesëtueshme me një numër të dhënë k.\n * \n * Funksioni merr dy argumente: \n * - $numbers: Një varg numrash të plotë pozitiv që përfaqësojnë sekuencën.\n * - $k: Një numër i plotë që përfaqëson pjesëtuesin.\n * \n * Funksioni kthen \"YES\" nëse të paktën një renditje e sekuencës \n * mund të pjesëtohet me $k, përndryshe kthen \"NO\".\n * \n * Shembull:\n * Duke pasur $numbers = [1, 2, 4] dhe $k = 2, funksioni do të kthejë \"NO\".\n * Duke pasur $numbers = [1, 2, 4] dhe $k = 3, funksioni do të kthejë \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hy": "<?php\n\n/**\n * Սահմանում է՝ արդյոք գոյություն ունի՞ գոնե մեկ փոխակերպում '+' կամ '-' \n * ավելացնելու յուրաքանչյուր թվի առաջ հաջորդականության մեջ այնպես, որ \n * հաջորդականության գումարը բաժանվի տրված k թվի վրա։\n * \n * Ֆունկցիան ընդունում է երկու արգումենտ՝ \n * - $numbers: Դրական ամբողջ թվերի զանգված, որը ներկայացնում է հաջորդականությունը։\n * - $k: Ամբողջ թիվ, որը ներկայացնում է բաժանարարը։\n * \n * Ֆունկցիան վերադարձնում է \"YES\", եթե հաջորդականության գոնե մեկ փոխակերպում \n * կարող է բաժանվել $k-ի վրա, հակառակ դեպքում վերադարձնում է \"NO\"։\n * \n * Օրինակ:\n * Տրված $numbers = [1, 2, 4] և $k = 2, ֆունկցիան կվերադարձնի \"NO\"։\n * Տրված $numbers = [1, 2, 4] և $k = 3, ֆունկցիան կվերադարձնի \"YES\"։\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "bn": "<?php\n\n/**\n * নির্ধারণ করে যে কোনো একটি বিন্যাসে '+' বা '-' যোগ করার মাধ্যমে \n * একটি ক্রমের প্রতিটি সংখ্যার আগে এমন একটি বিন্যাস আছে কিনা যার ফলে \n * ক্রমের যোগফল একটি প্রদত্ত সংখ্যা k দ্বারা বিভাজ্য হয়।\n * \n * ফাংশনটি দুটি আর্গুমেন্ট গ্রহণ করে: \n * - $numbers: একটি ধনাত্মক পূর্ণসংখ্যার অ্যারে যা ক্রমকে উপস্থাপন করে।\n * - $k: একটি পূর্ণসংখ্যা যা বিভাজককে উপস্থাপন করে।\n * \n * ফাংশনটি \"YES\" ফেরত দেয় যদি ক্রমের অন্তত একটি বিন্যাস $k দ্বারা বিভাজ্য \n * হতে পারে, অন্যথায় \"NO\" ফেরত দেয়।\n * \n * উদাহরণ:\n * প্রদত্ত $numbers = [1, 2, 4] এবং $k = 2, ফাংশনটি \"NO\" ফেরত দেবে।\n * প্রদত্ত $numbers = [1, 2, 4] এবং $k = 3, ফাংশনটি \"YES\" ফেরত দেবে।\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "bg": "<?php\n\n/**\n * Определя дали съществува поне една пермутация на добавяне на '+' или '-' \n * преди всяко число в последователност, така че сумата на последователността \n * да е делима на дадено число k.\n * \n * Функцията приема два аргумента: \n * - $numbers: Масив от положителни цели числа, представляващи последователността.\n * - $k: Цяло число, представляващо делителя.\n * \n * Функцията връща \"YES\", ако поне една пермутация на последователността \n * може да бъде разделена на $k, в противен случай връща \"NO\".\n * \n * Пример:\n * Дадено $numbers = [1, 2, 4] и $k = 2, функцията ще върне \"NO\".\n * Дадено $numbers = [1, 2, 4] и $k = 3, функцията ще върне \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "zh": "<?php\n\n/**\n * 确定是否存在至少一种排列方式，可以在序列中的每个数字前添加 '+' 或 '-'，使得序列的和可以被给定的数字 k 整除。\n * \n * 该函数接受两个参数：\n * - $numbers: 一个正整数数组，表示序列。\n * - $k: 一个整数，表示除数。\n * \n * 如果序列的至少一种排列可以被 $k 整除，函数返回 \"YES\"，否则返回 \"NO\"。\n * \n * 示例：\n * 给定 $numbers = [1, 2, 4] 和 $k = 2，函数将返回 \"NO\"。\n * 给定 $numbers = [1, 2, 4] 和 $k = 3，函数将返回 \"YES\"。\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "fr": "<?php\n\n/**\n * Détermine s'il existe au moins une permutation d'ajout de '+' ou '-' \n * devant chaque nombre dans une séquence telle que la somme de la séquence \n * soit divisible par un nombre donné k.\n * \n * La fonction prend deux arguments : \n * - $numbers : Un tableau d'entiers positifs représentant la séquence.\n * - $k : Un entier représentant le diviseur.\n * \n * La fonction retourne \"YES\" si au moins une permutation de la séquence \n * peut être divisée par $k, sinon retourne \"NO\".\n * \n * Exemple :\n * Étant donné $numbers = [1, 2, 4] et $k = 2, la fonction retournera \"NO\".\n * Étant donné $numbers = [1, 2, 4] et $k = 3, la fonction retournera \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "de": "<?php\n\n/**\n * Bestimmt, ob es mindestens eine Permutation gibt, bei der '+' oder '-' \n * vor jeder Zahl in einer Sequenz hinzugefügt wird, sodass die Summe der \n * Sequenz durch eine gegebene Zahl k teilbar ist.\n * \n * Die Funktion nimmt zwei Argumente entgegen: \n * - $numbers: Ein Array von positiven ganzen Zahlen, das die Sequenz darstellt.\n * - $k: Eine ganze Zahl, die den Divisor darstellt.\n * \n * Die Funktion gibt \"YES\" zurück, wenn mindestens eine Permutation der Sequenz \n * durch $k teilbar ist, andernfalls gibt sie \"NO\" zurück.\n * \n * Beispiel:\n * Gegeben $numbers = [1, 2, 4] und $k = 2, wird die Funktion \"NO\" zurückgeben.\n * Gegeben $numbers = [1, 2, 4] und $k = 3, wird die Funktion \"YES\" zurückgeben.\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "ha": "<?php\n\n/**\n * Yana tantancewa idan akwai aƙalla ɗaya permutation na ƙara '+' ko '-' \n * kafin kowace lamba a cikin jerin lambobi ta yadda jumlar jerin \n * za ta rabu da wata lamba k.\n * \n * Aikin yana ɗaukar hujjoji guda biyu: \n * - $numbers: Wani tsari na lambobi masu kyau da ke wakiltar jerin.\n * - $k: Wata lamba da ke wakiltar mai raba.\n * \n * Aikin yana dawowa \"YES\" idan aƙalla ɗaya permutation na jerin \n * za a iya raba shi da $k, in ba haka ba yana dawowa \"NO\".\n * \n * Misali:\n * Idan aka ba $numbers = [1, 2, 4] da $k = 2, aikin zai dawo \"NO\".\n * Idan aka ba $numbers = [1, 2, 4] da $k = 3, aikin zai dawo \"YES\".\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hi": "<?php\n\n/**\n * यह निर्धारित करता है कि क्या अनुक्रम में प्रत्येक संख्या के आगे '+' या '-' जोड़ने के कम से कम एक क्रमपरिवर्तन मौजूद है \n * ताकि अनुक्रम का योग एक दिए गए संख्या k से विभाजित किया जा सके।\n * \n * फ़ंक्शन दो तर्क लेता है: \n * - $numbers: सकारात्मक पूर्णांकों की एक सरणी जो अनुक्रम का प्रतिनिधित्व करती है।\n * - $k: एक पूर्णांक जो भाजक का प्रतिनिधित्व करता है।\n * \n * फ़ंक्शन \"YES\" लौटाता है यदि अनुक्रम का कम से कम एक क्रमपरिवर्तन $k द्वारा विभाजित किया जा सकता है, अन्यथा \"NO\" लौटाता है।\n * \n * उदाहरण:\n * दिए गए $numbers = [1, 2, 4] और $k = 2, फ़ंक्शन \"NO\" लौटाएगा।\n * दिए गए $numbers = [1, 2, 4] और $k = 3, फ़ंक्शन \"YES\" लौटाएगा।\n */\n\n function canBeDivided(array $numbers, int $k): string ",
      "hu": "<?php\n\n/**\n * Meghatározza, hogy létezik-e legalább egy olyan permutáció, amelyben '+' vagy '-' \n * jelet adunk minden szám elé a sorozatban úgy, hogy a sorozat összege \n * osztható legyen egy adott k számmal.\n * \n * A függvény két argumentumot vesz át: \n * - $numbers: Pozitív egész számokat tartalmazó tömb, amely a sorozatot reprezentálja.\n * - $k: Egy egész szám, amely az osztót reprezentálja.\n * \n * A függvény \"YES\"-t ad vissza, ha a sorozat legalább egy permutációja \n * osztható $k-val, ellenkező esetben \"NO\"-t ad vissza.\n * \n * Példa:\n * Ha $numbers = [1, 2, 4] és $k = 2, a függvény \"NO\"-t ad vissza.\n * Ha $numbers = [1, 2, 4] és $k = 3, a függvény \"YES\"-t ad vissza.\n */\n\n function canBeDivided(array $numbers, int $k): string "
    },
    "prompt_bertscore": {
      "sq": "0.9843060149640525",
      "hy": "0.9739482351146072",
      "bn": "0.9676740972688581",
      "bg": "0.994677103049027",
      "zh": "0.9557735552499149",
      "fr": "0.992507463396983",
      "de": "0.9818167790289233",
      "ha": "0.9753561272553825",
      "hi": "0.9822648891685379",
      "hu": "0.9612899181920158"
    },
    "canonical_solution": " {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}",
    "instruction": {
      "en": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\n请为以下PHP代码提供简明的自然语言描述（文档字符串），使用中文且不超过500个字符。",
      "fr": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function canBeDivided(array $numbers, int $k): string\n {\n    $totalCombinations = pow(2, count($numbers));\n    for ($i = 0; $i < $totalCombinations; $i++) {\n        $sum = 0;\n        for ($j = 0; $j < count($numbers); $j++) {\n            // Check if the jth bit in i is set to decide if to add or subtract\n            if ($i & (1 << $j)) {\n                $sum += $numbers[$j];\n            } else {\n                $sum -= $numbers[$j];\n            }\n        }\n        if ($sum % $k == 0) {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9361854215937784",
      "hy": "0.9072145846286969",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.870943882530202",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(canBeDivided([1, 2, 4], 2) === \"NO\");\n    assert(canBeDivided([1, 2, 4], 3) === \"YES\");\n    assert(canBeDivided([1, 2, 3], 6) === \"YES\");\n    assert(canBeDivided([5, 10, 15], 7) === \"YES\");\n    assert(canBeDivided([10, 20, 30], 10) === \"YES\");\n    \n}\n\n\nmain();\n?>",
    "entry_point": "canBeDivided",
    "signature": "function canBeDivided(array $numbers, int $k): string",
    "docstring": {
      "en": "Determines if there exists at least one permutation of adding '+' or '-'\nbefore each number in a sequence such that the sum of the sequence is\ndivisible by a given number k.\n\nThe function takes two arguments:\n- $numbers: An array of positive integers representing the sequence.\n- $k: An integer representing the divisor.\n\nThe function returns \"YES\" if at least one permutation of the sequence\ncan be divided by $k, otherwise returns \"NO\".\n\nExample:\nGiven $numbers = [1, 2, 4] and $k = 2, the function will return \"NO\".\nGiven $numbers = [1, 2, 4] and $k = 3, the function will return \"YES\".",
      "sq": "Përcakton nëse ekziston të paktën një permutacion i shtimit të '+' ose '-'\npara çdo numri në një sekuencë të tillë që shuma e sekuencës të jetë\ne pjesëtueshme nga një numër i dhënë k.\n\nFunksioni merr dy argumente:\n- $numbers: Një varg i numrave të plotë pozitivë që përfaqësojnë sekuencën.\n- $k: Një numër i plotë që përfaqëson pjesëtuesin.\n\nFunksioni kthen \"YES\" nëse të paktën një permutacion i sekuencës\nmund të pjesëtohet nga $k, përndryshe kthen \"NO\".\n\nShembull:\nDuke pasur $numbers = [1, 2, 4] dhe $k = 2, funksioni do të kthejë \"NO\".\nDuke pasur $numbers = [1, 2, 4] dhe $k = 3, funksioni do të kthejë \"YES\".",
      "hy": "Որոշում է, արդյոք գոյություն ունի գոնե մեկ փոխարկում, երբ '+' կամ '-' նշան է ավելացվում հաջորդականության յուրաքանչյուր թվի առջև, այնպես, որ հաջորդականության գումարը բաժանվի տրված k թվի վրա։\n\nՖունկցիան ընդունում է երկու արգումենտ.\n- $numbers: Դրական ամբողջ թվերի զանգված, որը ներկայացնում է հաջորդականությունը։\n- $k: Ամբողջ թիվ, որը ներկայացնում է բաժանարարը։\n\nՖունկցիան վերադարձնում է \"YES\", եթե հաջորդականության գոնե մեկ փոխարկում կարող է բաժանվել $k-ի վրա, հակառակ դեպքում վերադարձնում է \"NO\"։\n\nՕրինակ:\nԵթե տրված է $numbers = [1, 2, 4] և $k = 2, ապա ֆունկցիան կվերադարձնի \"NO\"։\nԵթե տրված է $numbers = [1, 2, 4] և $k = 3, ապա ֆունկցիան կվերադարձնի \"YES\"։",
      "bn": "নির্ধারণ করে যে একটি ক্রমের প্রতিটি সংখ্যার আগে '+' বা '-' যোগ করার অন্তত একটি বিন্যাস আছে কিনা যাতে ক্রমের যোগফল একটি প্রদত্ত সংখ্যা k দ্বারা বিভাজ্য হয়।\n\nফাংশনটি দুটি আর্গুমেন্ট গ্রহণ করে:\n- $numbers: একটি ধনাত্মক পূর্ণসংখ্যার অ্যারে যা ক্রমকে উপস্থাপন করে।\n- $k: একটি পূর্ণসংখ্যা যা বিভাজককে উপস্থাপন করে।\n\nফাংশনটি \"YES\" ফেরত দেয় যদি ক্রমের অন্তত একটি বিন্যাস $k দ্বারা বিভাজ্য হতে পারে, অন্যথায় \"NO\" ফেরত দেয়।\n\nউদাহরণ:\nযদি $numbers = [1, 2, 4] এবং $k = 2 হয়, তাহলে ফাংশনটি \"NO\" ফেরত দেবে।\nযদি $numbers = [1, 2, 4] এবং $k = 3 হয়, তাহলে ফাংশনটি \"YES\" ফেরত দেবে।",
      "bg": "Определя дали съществува поне една пермутация на добавяне на '+' или '-'\nпреди всяко число в последователността така, че сумата на последователността да е\nделима на дадено число k.\n\nФункцията приема два аргумента:\n- $numbers: Масив от положителни цели числа, представляващи последователността.\n- $k: Цяло число, представляващо делителя.\n\nФункцията връща \"YES\", ако поне една пермутация на последователността\nможе да бъде разделена на $k, в противен случай връща \"NO\".\n\nПример:\nДадено $numbers = [1, 2, 4] и $k = 2, функцията ще върне \"NO\".\nДадено $numbers = [1, 2, 4] и $k = 3, функцията ще върне \"YES\".",
      "zh": "确定是否存在至少一种排列方式，在序列中的每个数字前添加 '+' 或 '-'，使得序列的和可以被给定的数字 k 整除。\n\nArgs:\n- $numbers: 一个正整数数组，表示序列。\n- $k: 一个整数，表示除数。\n\nReturns:\n如果序列的至少一种排列可以被 $k 整除，则返回 \"YES\"，否则返回 \"NO\"。\n\nExamples:\n给定 $numbers = [1, 2, 4] 和 $k = 2，函数将返回 \"NO\"。\n给定 $numbers = [1, 2, 4] 和 $k = 3，函数将返回 \"YES\"。",
      "fr": "Détermine s'il existe au moins une permutation d'ajout de '+' ou '-'\ndevant chaque nombre dans une séquence telle que la somme de la séquence soit\ndivisible par un nombre donné k.\n\nLa fonction prend deux arguments :\n- $numbers : Un tableau d'entiers positifs représentant la séquence.\n- $k : Un entier représentant le diviseur.\n\nLa fonction retourne \"YES\" si au moins une permutation de la séquence\npeut être divisée par $k, sinon retourne \"NO\".\n\nExemple :\nÉtant donné $numbers = [1, 2, 4] et $k = 2, la fonction retournera \"NO\".\nÉtant donné $numbers = [1, 2, 4] et $k = 3, la fonction retournera \"YES\".",
      "de": "Bestimmt, ob es mindestens eine Permutation gibt, bei der vor jeder Zahl in einer Sequenz ein '+' oder '-' hinzugefügt wird, sodass die Summe der Sequenz durch eine gegebene Zahl k teilbar ist.\n\nDie Funktion nimmt zwei Argumente:\n- $numbers: Ein Array von positiven ganzen Zahlen, das die Sequenz darstellt.\n- $k: Ein ganzzahliger Wert, der den Divisor darstellt.\n\nDie Funktion gibt \"YES\" zurück, wenn mindestens eine Permutation der Sequenz durch $k teilbar ist, andernfalls gibt sie \"NO\" zurück.\n\nBeispiel:\nGegeben $numbers = [1, 2, 4] und $k = 2, wird die Funktion \"NO\" zurückgeben.\nGegeben $numbers = [1, 2, 4] und $k = 3, wird die Funktion \"YES\" zurückgeben.",
      "ha": "Determines idan akwai aƙalla ɗaya permutation na ƙara '+' ko '-'\nkafin kowace lamba a cikin jerin lambobi ta yadda jimillar jerin za ta\nkasance mai rarrabewa da wata lamba k da aka bayar.\n\nAikin yana ɗaukar hujjoji biyu:\n- $numbers: Wani tsararren lambobi masu kyau da ke wakiltar jerin.\n- $k: Wata lamba da ke wakiltar mai raba.\n\nAikin yana dawowa \"YES\" idan aƙalla ɗaya permutation na jerin\nza a iya raba shi da $k, in ba haka ba yana dawowa \"NO\".\n\nMisali:\nIdan aka ba $numbers = [1, 2, 4] da $k = 2, aikin zai dawo \"NO\".\nIdan aka ba $numbers = [1, 2, 4] da $k = 3, aikin zai dawo \"YES\".",
      "hi": "यह निर्धारित करता है कि क्या किसी अनुक्रम में प्रत्येक संख्या से पहले '+' या '-' जोड़ने के कम से कम एक क्रमविन्यास का अस्तित्व है ताकि अनुक्रम का योग एक दिए गए संख्या k से विभाज्य हो।\n\nयह फ़ंक्शन दो तर्क लेता है:\n- $numbers: सकारात्मक पूर्णांकों की एक श्रृंखला जो अनुक्रम का प्रतिनिधित्व करती है।\n- $k: एक पूर्णांक जो भाजक का प्रतिनिधित्व करता है।\n\nयदि अनुक्रम के कम से कम एक क्रमविन्यास को $k से विभाजित किया जा सकता है, तो फ़ंक्शन \"YES\" लौटाता है, अन्यथा \"NO\" लौटाता है।\n\nउदाहरण:\nयदि $numbers = [1, 2, 4] और $k = 2, तो फ़ंक्शन \"NO\" लौटाएगा।\nयदि $numbers = [1, 2, 4] और $k = 3, तो फ़ंक्शन \"YES\" लौटाएगा।",
      "hu": "Meghatározza, hogy létezik-e legalább egy olyan permutáció, amely '+' vagy '-' jelet ad minden szám elé egy sorozatban úgy, hogy a sorozat összege osztható legyen egy adott k számmal.\n\nA függvény két argumentumot vesz fel:\n- $numbers: Pozitív egész számokat tartalmazó tömb, amely a sorozatot képviseli.\n- $k: Egy egész szám, amely az osztót képviseli.\n\nA függvény \"YES\"-t ad vissza, ha a sorozatnak legalább egy permutációja osztható $k-val, különben \"NO\"-t ad vissza.\n\nPélda:\nHa $numbers = [1, 2, 4] és $k = 2, a függvény \"NO\"-t ad vissza.\nHa $numbers = [1, 2, 4] és $k = 3, a függvény \"YES\"-t ad vissza."
    },
    "docstring_bertscore": {
      "sq": "1",
      "hy": "0.9611929865660708",
      "bn": "0.9750790378738388",
      "bg": "0.9949325417190379",
      "zh": "0.9657461907905336",
      "fr": "0.9883805199702211",
      "de": "0.9809541272840887",
      "ha": "1",
      "hi": "0.9616122953004355",
      "hu": "0.9602139374179498"
    }
  },
  {
    "task_id": "PHP/36",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Evaluate a Polish expression and return the result.\n * In Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\n * Supported operators are +, -, *, and /.\n * Input: A string containing a valid Polish expression separated by spaces.\n * Output: A float representing the result of evaluating the expression.\n * \n * Example:\n * - For the input \"+ 11.0 12.0\", the function should return 23.0.\n * - For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "sq": "<?php\n\n\n/**\n * Vlerësoni një shprehje polake dhe ktheni rezultatin.\n * Në notacionin polak, operatorët paraprijnë operandët e tyre. Për shembull, shprehja \"+ 11.0 12.0\" është ekuivalente me \"11.0 + 12.0\".\n * Operatorët e mbështetur janë +, -, *, dhe /.\n * Hyrja: Një varg që përmban një shprehje të vlefshme polake të ndarë me hapësira.\n * Dalja: Një numër me presje dhjetore që përfaqëson rezultatin e vlerësimit të shprehjes.\n * \n * Shembull:\n * - Për hyrjen \"+ 11.0 12.0\", funksioni duhet të kthejë 23.0.\n * - Për hyrjen \"* + 2.0 3.0 4.0\", funksioni duhet të kthejë 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hy": "<?php\n\n\n/**\n * Գնահատել լեհական արտահայտությունը և վերադարձնել արդյունքը:\n * Լեհական նշման մեջ օպերատորները նախորդում են իրենց օպերանդներին: Օրինակ, արտահայտությունը \"+ 11.0 12.0\" համարժեք է \"11.0 + 12.0\"-ին:\n * Աջակցվող օպերատորներն են +, -, *, և /:\n * Մուտք: Տող, որը պարունակում է վավեր լեհական արտահայտություն, բաժանված բացատներով:\n * Ելք: Ֆլոատ, որը ներկայացնում է արտահայտության գնահատման արդյունքը:\n * \n * Օրինակ:\n * - Մուտքի համար \"+ 11.0 12.0\", ֆունկցիան պետք է վերադարձնի 23.0:\n * - Մուտքի համար \"* + 2.0 3.0 4.0\", ֆունկցիան պետք է վերադարձնի 20.0:\n */\n\n\n function evaluatePolishExpression($expression) ",
      "bn": "<?php\n\n\n/**\n * একটি পোলিশ অভিব্যক্তি মূল্যায়ন করুন এবং ফলাফল ফেরত দিন।\n * পোলিশ নোটেশনে, অপারেটরগুলি তাদের অপারেন্ডের আগে থাকে। উদাহরণস্বরূপ, \"+ 11.0 12.0\" অভিব্যক্তিটি \"11.0 + 12.0\" এর সমতুল্য।\n * সমর্থিত অপারেটরগুলি হল +, -, *, এবং /।\n * ইনপুট: স্পেস দ্বারা পৃথক একটি বৈধ পোলিশ অভিব্যক্তি ধারণকারী একটি স্ট্রিং।\n * আউটপুট: অভিব্যক্তিটি মূল্যায়ন করার ফলাফল হিসাবে একটি ফ্লোট।\n * \n * উদাহরণ:\n * - ইনপুট \"+ 11.0 12.0\" এর জন্য, ফাংশনটি 23.0 ফেরত দেওয়া উচিত।\n * - ইনপুট \"* + 2.0 3.0 4.0\" এর জন্য, ফাংশনটি 20.0 ফেরত দেওয়া উচিত।\n */\n\n\n function evaluatePolishExpression($expression) ",
      "bg": "<?php\n\n\n/**\n * Оценете полско изразяване и върнете резултата.\n * В полската нотация операторите предхождат техните операнди. Например, изразът \"+ 11.0 12.0\" е еквивалентен на \"11.0 + 12.0\".\n * Поддържаните оператори са +, -, *, и /.\n * Вход: Низ, съдържащ валидно полско изразяване, разделено с интервали.\n * Изход: Число с плаваща запетая, представляващо резултата от оценяването на израза.\n * \n * Пример:\n * - За входа \"+ 11.0 12.0\", функцията трябва да върне 23.0.\n * - За входа \"* + 2.0 3.0 4.0\", функцията трябва да върне 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "zh": "<?php\n\n\n/**\n * 计算一个波兰表达式并返回结果。\n * 在波兰表示法中，运算符位于操作数之前。例如，表达式 \"+ 11.0 12.0\" 等价于 \"11.0 + 12.0\"。\n * 支持的运算符有 +, -, *, 和 /。\n * 输入：一个包含有效波兰表达式的字符串，元素之间用空格分隔。\n * 输出：一个浮点数，表示计算表达式的结果。\n * \n * 示例：\n * - 对于输入 \"+ 11.0 12.0\"，函数应返回 23.0。\n * - 对于输入 \"* + 2.0 3.0 4.0\"，函数应返回 20.0。\n */\n\n\n function evaluatePolishExpression($expression) ",
      "fr": "<?php\n\n\n/**\n * Évaluer une expression polonaise et retourner le résultat.\n * En notation polonaise, les opérateurs précèdent leurs opérandes. Par exemple, l'expression \"+ 11.0 12.0\" est équivalente à \"11.0 + 12.0\".\n * Les opérateurs supportés sont +, -, *, et /.\n * Entrée : Une chaîne contenant une expression polonaise valide séparée par des espaces.\n * Sortie : Un flottant représentant le résultat de l'évaluation de l'expression.\n * \n * Exemple :\n * - Pour l'entrée \"+ 11.0 12.0\", la fonction doit retourner 23.0.\n * - Pour l'entrée \"* + 2.0 3.0 4.0\", la fonction doit retourner 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "de": "<?php\n\n\n/**\n * Evaluieren Sie einen polnischen Ausdruck und geben Sie das Ergebnis zurück.\n * In der polnischen Notation stehen die Operatoren vor ihren Operanden. Zum Beispiel ist der Ausdruck \"+ 11.0 12.0\" gleichbedeutend mit \"11.0 + 12.0\".\n * Unterstützte Operatoren sind +, -, *, und /.\n * Eingabe: Ein String, der einen gültigen polnischen Ausdruck enthält, getrennt durch Leerzeichen.\n * Ausgabe: Ein Float, der das Ergebnis der Auswertung des Ausdrucks darstellt.\n * \n * Beispiel:\n * - Für die Eingabe \"+ 11.0 12.0\" sollte die Funktion 23.0 zurückgeben.\n * - Für die Eingabe \"* + 2.0 3.0 4.0\" sollte die Funktion 20.0 zurückgeben.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "ha": "<?php\n\n\n/**\n * Kimanta wata hanyar lissafi ta Polish kuma dawo da sakamakon.\n * A cikin hanyar Polish, masu aiki suna zuwa kafin abubuwan da suke aiki a kansu. Alal misali, hanyar lissafi \"+ 11.0 12.0\" tana daidai da \"11.0 + 12.0\".\n * Masu aiki da ake tallafawa sune +, -, *, da /.\n * Shigarwa: Wani igiyar rubutu da ke dauke da wata hanyar lissafi ta Polish mai inganci da aka raba ta wurin sarari.\n * Fitarwa: Wani adadin mai lamba mai rai da ke wakiltar sakamakon kimanta hanyar lissafin.\n * \n * Misali:\n * - Don shigarwa \"+ 11.0 12.0\", aikin ya kamata ya dawo da 23.0.\n * - Don shigarwa \"* + 2.0 3.0 4.0\", aikin ya kamata ya dawo da 20.0.\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hi": "<?php\n\n\n/**\n * एक पोलिश अभिव्यक्ति का मूल्यांकन करें और परिणाम लौटाएं।\n * पोलिश संकेतन में, ऑपरेटर अपने ऑपरेन्ड से पहले आते हैं। उदाहरण के लिए, अभिव्यक्ति \"+ 11.0 12.0\" \"11.0 + 12.0\" के समकक्ष है।\n * समर्थित ऑपरेटर +, -, *, और / हैं।\n * इनपुट: एक स्ट्रिंग जिसमें स्पेस द्वारा अलग की गई एक मान्य पोलिश अभिव्यक्ति होती है।\n * आउटपुट: एक फ्लोट जो अभिव्यक्ति के मूल्यांकन का परिणाम दर्शाता है।\n * \n * उदाहरण:\n * - इनपुट \"+ 11.0 12.0\" के लिए, फ़ंक्शन को 23.0 लौटाना चाहिए।\n * - इनपुट \"* + 2.0 3.0 4.0\" के लिए, फ़ंक्शन को 20.0 लौटाना चाहिए।\n */\n\n\n function evaluatePolishExpression($expression) ",
      "hu": "<?php\n\n\n/**\n * Értékeljen ki egy lengyel kifejezést, és adja vissza az eredményt.\n * A lengyel jelölésben az operátorok megelőzik az operandusaikat. Például a \"+ 11.0 12.0\" kifejezés egyenértékű a \"11.0 + 12.0\" kifejezéssel.\n * Támogatott operátorok: +, -, *, és /.\n * Bemenet: Egy karakterlánc, amely egy érvényes lengyel kifejezést tartalmaz, szóközökkel elválasztva.\n * Kimenet: Egy lebegőpontos szám, amely a kifejezés kiértékelésének eredményét képviseli.\n * \n * Példa:\n * - A \"+ 11.0 12.0\" bemenet esetén a függvénynek 23.0-t kell visszaadnia.\n * - A \"* + 2.0 3.0 4.0\" bemenet esetén a függvénynek 20.0-t kell visszaadnia.\n */\n\n\n function evaluatePolishExpression($expression) "
    },
    "prompt_bertscore": {
      "sq": "0.9875343545470124",
      "hy": "0.9916853322498795",
      "bn": "0.9894288911213233",
      "bg": "0.9815851760046366",
      "zh": "0.9657100400611852",
      "fr": "0.9913780510504187",
      "de": "0.989068774240507",
      "ha": "0.9656456838177299",
      "hi": "0.9884714926847351",
      "hu": "0.9756085864696779"
    },
    "canonical_solution": " {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n",
    "instruction": {
      "en": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nՏրամադրել կարճ բնական լեզվով նկարագրություն (docstring) PHP կոդի համար՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nДайте кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\n请用不超过500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nBayar da takaitaccen bayani a cikin harshen hausa (docstring) na lambar PHP da aka bayar, ba tare da wucewa haruffa 500 ba.",
      "hi": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function evaluatePolishExpression($expression)\n {\n    $tokens = explode(' ', $expression);\n    $stack = new SplStack();\n\n    foreach (array_reverse($tokens) as $token) {\n        if (is_numeric($token)) {\n            $stack->push((float)$token);\n        } else {\n            $a = $stack->pop();\n            $b = $stack->pop();\n\n            switch ($token) {\n                case '+':\n                    $stack->push($a + $b);\n                    break;\n                case '-':\n                    $stack->push($a - $b);\n                    break;\n                case '*':\n                    $stack->push($a * $b);\n                    break;\n                case '/':\n                    $stack->push($a / $b);\n                    break;\n            }\n        }\n    }\n\n    return $stack->pop();\n}\n\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.8911799484892744",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8531680524706279",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8609964730479749",
      "hi": "0.9032886551475423",
      "hu": "0.9314149157324635"
    },
    "level": "",
    "test": "function main(){\n    assert(evaluatePolishExpression(\"* + 11.0 12.0 + 24.0 35.0\") === 1357.0);\n    assert(evaluatePolishExpression(\"+ 2.0 2.0\") === 4.0);\n    assert(evaluatePolishExpression(\"- 10.0 5.0\") === 5.0);\n    // Testcase 1\n    $expression1 = \"+ 11.0 12.0\";\n    $result1 = evaluatePolishExpression($expression1);\n    assert($result1 === 23.0);\n\n    // Testcase 2\n    $expression2 = \"* + 2.0 3.0 4.0\";\n    $result2 = evaluatePolishExpression($expression2);\n    assert($result2 === 20.0);\n\n\n\n}\n\nmain();\n?>",
    "entry_point": "evaluatePolishExpression",
    "signature": "function evaluatePolishExpression($expression)",
    "docstring": {
      "en": "Evaluate a Polish expression and return the result.\nIn Polish notation, operators precede their operands. For example, the expression \"+ 11.0 12.0\" is equivalent to \"11.0 + 12.0\".\nSupported operators are +, -, *, and /.\nInput: A string containing a valid Polish expression separated by spaces.\nOutput: A float representing the result of evaluating the expression.\n\nExample:\n- For the input \"+ 11.0 12.0\", the function should return 23.0.\n- For the input \"* + 2.0 3.0 4.0\", the function should return 20.0.",
      "sq": "Vlerësoni një shprehje polake dhe ktheni rezultatin.\nNë notacionin polak, operatorët i paraprijnë operandëve të tyre. Për shembull, shprehja \"+ 11.0 12.0\" është ekuivalente me \"11.0 + 12.0\".\nOperatorët e mbështetur janë +, -, *, dhe /.\nHyrja: Një varg që përmban një shprehje të vlefshme polake të ndarë me hapësira.\nDalja: Një numër me presje dhjetore që përfaqëson rezultatin e vlerësimit të shprehjes.\n\nShembull:\n- Për hyrjen \"+ 11.0 12.0\", funksioni duhet të kthejë 23.0.\n- Për hyrjen \"* + 2.0 3.0 4.0\", funksioni duhet të kthejë 20.0.",
      "hy": "Պոլական արտահայտությունը գնահատել և վերադարձնել արդյունքը։\nՊոլական նշման մեջ օպերատորները նախորդում են իրենց օպերանդներին։ Օրինակ, արտահայտությունը \"+ 11.0 12.0\" համարժեք է \"11.0 + 12.0\"։  \nԱջակցվող օպերատորներն են +, -, *, և /։  \nՄուտք՝ Տող, որը պարունակում է վավեր Պոլական արտահայտություն՝ բաժանված բացատներով։  \nԵլք՝ Թվային արժեք, որը ներկայացնում է արտահայտության գնահատման արդյունքը։  \n\nՕրինակ՝  \n- \"+ 11.0 12.0\" մուտքի համար ֆունկցիան պետք է վերադարձնի 23.0։  \n- \"* + 2.0 3.0 4.0\" մուտքի համար ֆունկցիան պետք է վերադարձնի 20.0։",
      "bn": "পোলিশ অভিব্যক্তি মূল্যায়ন করুন এবং ফলাফল ফেরত দিন।  \nপোলিশ নোটেশনে, অপারেটরগুলি তাদের অপারেন্ডগুলির আগে থাকে। উদাহরণস্বরূপ, \"+ 11.0 12.0\" অভিব্যক্তিটি \"11.0 + 12.0\" এর সমতুল্য।  \nসমর্থিত অপারেটরগুলি হল +, -, *, এবং /।  \nইনপুট: একটি স্ট্রিং যা স্পেস দ্বারা পৃথক একটি বৈধ পোলিশ অভিব্যক্তি ধারণ করে।  \nআউটপুট: একটি ফ্লোট যা অভিব্যক্তি মূল্যায়নের ফলাফল উপস্থাপন করে।  \n\nউদাহরণ:  \n- ইনপুট \"+ 11.0 12.0\" এর জন্য, ফাংশনটি 23.0 ফেরত দেওয়া উচিত।  \n- ইনপুট \"* + 2.0 3.0 4.0\" এর জন্য, ফাংশনটি 20.0 ফেরত দেওয়া উচিত।  ",
      "bg": "Оценете полска нотация и върнете резултата.\nВ полската нотация операторите предхождат техните операнди. Например, изразът \"+ 11.0 12.0\" е еквивалентен на \"11.0 + 12.0\".  \nПоддържаните оператори са +, -, *, и /.  \nВход: Низ, съдържащ валиден израз в полска нотация, разделен с интервали.  \nИзход: Число с плаваща запетая, представляващо резултата от оценката на израза.  \n\nПример:  \n- За входа \"+ 11.0 12.0\", функцията трябва да върне 23.0.  \n- За входа \"* + 2.0 3.0 4.0\", функцията трябва да върне 20.0.",
      "zh": "计算一个波兰表达式并返回结果。\n在波兰表示法中，运算符在操作数之前。例如，表达式 \"+ 11.0 12.0\" 等价于 \"11.0 + 12.0\"。  \n支持的运算符有 +, -, *, 和 /。  \n输入：一个包含有效波兰表达式的字符串，操作数和运算符之间用空格分隔。  \n输出：一个浮点数，表示计算表达式的结果。  \n\n示例：  \n- 对于输入 \"+ 11.0 12.0\"，函数应返回 23.0。  \n- 对于输入 \"* + 2.0 3.0 4.0\"，函数应返回 20.0。",
      "fr": "Évaluer une expression polonaise et retourner le résultat.\nEn notation polonaise, les opérateurs précèdent leurs opérandes. Par exemple, l'expression \"+ 11.0 12.0\" est équivalente à \"11.0 + 12.0\".  \nLes opérateurs pris en charge sont +, -, *, et /.  \nEntrée : Une chaîne contenant une expression polonaise valide séparée par des espaces.  \nSortie : Un flottant représentant le résultat de l'évaluation de l'expression.\n\nExemple :  \n- Pour l'entrée \"+ 11.0 12.0\", la fonction doit retourner 23.0.  \n- Pour l'entrée \"* + 2.0 3.0 4.0\", la fonction doit retourner 20.0.",
      "de": "Eine polnische Ausdruck auswerten und das Ergebnis zurückgeben.\nIn der polnischen Notation stehen die Operatoren vor ihren Operanden. Zum Beispiel ist der Ausdruck \"+ 11.0 12.0\" gleichbedeutend mit \"11.0 + 12.0\".  \nUnterstützte Operatoren sind +, -, * und /.  \nEingabe: Ein String, der einen gültigen polnischen Ausdruck enthält, getrennt durch Leerzeichen.  \nAusgabe: Ein Float, der das Ergebnis der Auswertung des Ausdrucks darstellt.\n\nBeispiel:  \n- Für die Eingabe \"+ 11.0 12.0\" sollte die Funktion 23.0 zurückgeben.  \n- Für die Eingabe \"* + 2.0 3.0 4.0\" sollte die Funktion 20.0 zurückgeben.  ",
      "ha": "Kimanta wata magana ta Polish kuma dawo da sakamakon.\nA cikin tsarin Polish, masu aiki suna gabatar da abubuwan da suke aiki akansu. Alal misali, magana \"+ 11.0 12.0\" tana daidai da \"11.0 + 12.0\".  \nAna goyan bayan masu aiki +, -, *, da /.  \nInput: Wani kirtani da ke dauke da sahihin magana ta Polish da aka raba ta wurin sarari.  \nOutput: Wani adadi mai lamba mai iyo da ke wakiltar sakamakon tantance maganar.  \n\nExample:  \n- Domin shigarwa \"+ 11.0 12.0\", aikin ya kamata ya dawo da 23.0.  \n- Domin shigarwa \"* + 2.0 3.0 4.0\", aikin ya kamata ya dawo da 20.0.  ",
      "hi": "पोलिश अभिव्यक्ति का मूल्यांकन करें और परिणाम लौटाएं।\nपोलिश संकेतन में, ऑपरेटर उनके ऑपरेन्ड से पहले आते हैं। उदाहरण के लिए, अभिव्यक्ति \"+ 11.0 12.0\" \"11.0 + 12.0\" के बराबर है।  \nसमर्थित ऑपरेटर हैं +, -, *, और /।  \nइनपुट: एक स्ट्रिंग जिसमें स्पेस द्वारा अलग की गई एक मान्य पोलिश अभिव्यक्ति होती है।  \nआउटपुट: एक फ्लोट जो अभिव्यक्ति के मूल्यांकन का परिणाम दर्शाता है।  \n\nउदाहरण:  \n- इनपुट \"+ 11.0 12.0\" के लिए, फ़ंक्शन को 23.0 लौटाना चाहिए।  \n- इनपुट \"* + 2.0 3.0 4.0\" के लिए, फ़ंक्शन को 20.0 लौटाना चाहिए।  ",
      "hu": "Értékeljen ki egy lengyel kifejezést, és adja vissza az eredményt.  \nA lengyel jelölésben az operátorok megelőzik az operandusaikat. Például a \"+ 11.0 12.0\" kifejezés egyenértékű a \"11.0 + 12.0\" kifejezéssel.  \nTámogatott operátorok: +, -, * és /.  \nBemenet: Egy karakterlánc, amely egy érvényes lengyel kifejezést tartalmaz, szóközökkel elválasztva.  \nKimenet: Egy lebegőpontos szám, amely a kifejezés kiértékelésének eredményét képviseli.  \n\nPélda:  \n- A \"+ 11.0 12.0\" bemenetre a függvénynek 23.0-t kell visszaadnia.  \n- A \"* + 2.0 3.0 4.0\" bemenetre a függvénynek 20.0-t kell visszaadnia.  "
    },
    "docstring_bertscore": {
      "sq": "0.9880291428261704",
      "hy": "0.9791150085860867",
      "bn": "0.9843916246582785",
      "bg": "0.9726118499110045",
      "zh": "0.9651995599819255",
      "fr": "0.9924023879254156",
      "de": "0.990361262129901",
      "ha": "0.9858136195561072",
      "hi": "0.986740031653254",
      "hu": "0.9683881734886786"
    }
  },
  {
    "task_id": "PHP/37",
    "prompt": {
      "en": "<?php\n/**\n * Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n    $permutations = generatePermutations(\"abc\");\n    $permutations should contain the following array:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "sq": "<?php\n/**\n * Përshkrimi i Pyetjes:\nJu jepet një varg që përbëhet nga shkronja të vogla të dallueshme. Detyra juaj është të shkruani një funksion generatePermutations që gjeneron të gjitha permutacionet e mundshme të vargut hyrës dhe i kthen ato në rend leksikografik.\n\nHyrja:\nNjë varg që përbëhet nga shkronja të vogla të dallueshme, ku gjatësia e vargut është maksimumi 6.\n\nDalja:\nNjë varg që përmban të gjitha permutacionet e vargut hyrës, të renditura në rend leksikografik.\n\nShembull:\n    $permutations = generatePermutations(\"abc\");\n    $permutations duhet të përmbajë vargun e mëposhtëm:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hy": "<?php\n/**\n * Հարցի նկարագրություն:\nՁեզ տրված է տող, որը բաղկացած է տարբեր փոքրատառ տառերից: Ձեր խնդիրն է գրել generatePermutations ֆունկցիա, որը կգեներացնի մուտքային տողի բոլոր հնարավոր փոխատեղումները և կվերադարձնի դրանք բառարանային կարգով:\n\nՄուտք:\nՏող, որը բաղկացած է տարբեր փոքրատառ տառերից, որտեղ տողի երկարությունը առավելագույնը 6 է:\n\nԵլք:\nԶանգված, որը պարունակում է մուտքային տողի բոլոր փոխատեղումները, դասավորված բառարանային կարգով:\n\nՕրինակ:\n    $permutations = generatePermutations(\"abc\");\n    $permutations-ը պետք է պարունակի հետևյալ զանգվածը:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "bn": "<?php\n/**\n * প্রশ্নের বিবরণ:\nআপনাকে ভিন্ন ছোট হাতের অক্ষর নিয়ে গঠিত একটি স্ট্রিং দেওয়া হয়েছে। আপনার কাজ একটি ফাংশন generatePermutations লেখা যা ইনপুট স্ট্রিংয়ের সব সম্ভাব্য বিন্যাস তৈরি করে এবং সেগুলোকে বর্ণানুক্রমিক ক্রমে ফেরত দেয়।\n\nইনপুট:\nভিন্ন ছোট হাতের অক্ষর নিয়ে গঠিত একটি স্ট্রিং, যেখানে স্ট্রিংয়ের দৈর্ঘ্য সর্বাধিক ৬।\n\nআউটপুট:\nইনপুট স্ট্রিংয়ের সব বিন্যাস নিয়ে গঠিত একটি অ্যারে, যা বর্ণানুক্রমিক ক্রমে সাজানো।\n\nউদাহরণ:\n    $permutations = generatePermutations(\"abc\");\n    $permutations নিম্নলিখিত অ্যারে ধারণ করা উচিত:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "bg": "<?php\n/**\n * Описание на задачата:\nДаден е низ, състоящ се от различни малки букви. Вашата задача е да напишете функция generatePermutations, която генерира всички възможни пермутации на входния низ и ги връща в лексикографски ред.\n\nВход:\nНиз, състоящ се от различни малки букви, където дължината на низа е най-много 6.\n\nИзход:\nМасив, съдържащ всички пермутации на входния низ, сортирани в лексикографски ред.\n\nПример:\n    $permutations = generatePermutations(\"abc\");\n    $permutations трябва да съдържа следния масив:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "zh": "<?php\n/**\n * 问题描述：\n您将获得一个由不同小写字母组成的字符串。您的任务是编写一个函数 generatePermutations，该函数生成输入字符串的所有可能排列，并按字典顺序返回它们。\n\n输入：\n一个由不同小写字母组成的字符串，其中字符串的长度最多为6。\n\n输出：\n一个包含输入字符串所有排列的数组，按字典顺序排序。\n\n示例：\n    $permutations = generatePermutations(\"abc\");\n    $permutations 应包含以下数组：\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "fr": "<?php\n/**\n * Description de la question :\nOn vous donne une chaîne de caractères composée de lettres minuscules distinctes. Votre tâche est d'écrire une fonction generatePermutations qui génère toutes les permutations possibles de la chaîne d'entrée et les renvoie dans l'ordre lexicographique.\n\nEntrée :\nUne chaîne de caractères composée de lettres minuscules distinctes, où la longueur de la chaîne est d'au plus 6.\n\nSortie :\nUn tableau contenant toutes les permutations de la chaîne d'entrée, triées dans l'ordre lexicographique.\n\nExemple :\n    $permutations = generatePermutations(\"abc\");\n    $permutations devrait contenir le tableau suivant :\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "de": "<?php\n/**\n * Fragebeschreibung:\nSie erhalten einen String, der aus verschiedenen Kleinbuchstaben besteht. Ihre Aufgabe ist es, eine Funktion generatePermutations zu schreiben, die alle möglichen Permutationen des Eingabestrings erzeugt und diese in lexikographischer Reihenfolge zurückgibt.\n\nEingabe:\nEin String, der aus verschiedenen Kleinbuchstaben besteht, wobei die Länge des Strings höchstens 6 beträgt.\n\nAusgabe:\nEin Array, das alle Permutationen des Eingabestrings enthält, sortiert in lexikographischer Reihenfolge.\n\nBeispiel:\n    $permutations = generatePermutations(\"abc\");\n    $permutations sollte das folgende Array enthalten:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "ha": "<?php\n/**\n * Bayanin Tambaya:\nAn ba ka wani igiya mai ƙunshe da ƙananan haruffa daban-daban. Aikin ka shi ne ka rubuta wata aiki generatePermutations wanda ke samar da dukkan yiwuwar permutations na igiyar shigarwa kuma ya mayar da su a cikin tsari na lexicographical.\n\nShigarwa:\nWani igiya mai ƙunshe da ƙananan haruffa daban-daban, inda tsawon igiyar bai wuce 6 ba.\n\nFitarwa:\nWani array mai ɗauke da duk permutations na igiyar shigarwa, an jera su a cikin tsari na lexicographical.\n\nMisali:\n    $permutations = generatePermutations(\"abc\");\n    $permutations ya kamata ya ƙunshi array mai zuwa:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hi": "<?php\n/**\n * प्रश्न विवरण:\nआपको छोटे अक्षरों से बनी एक स्ट्रिंग दी गई है जिसमें सभी अक्षर भिन्न हैं। आपका कार्य एक फ़ंक्शन generatePermutations लिखना है जो इनपुट स्ट्रिंग के सभी संभावित क्रमचयों को उत्पन्न करता है और उन्हें शब्दकोशीय क्रम में लौटाता है।\n\nइनपुट:\nछोटे अक्षरों से बनी एक स्ट्रिंग, जिसमें सभी अक्षर भिन्न हैं और स्ट्रिंग की लंबाई अधिकतम 6 है।\n\nआउटपुट:\nइनपुट स्ट्रिंग के सभी क्रमचयों को शामिल करने वाली एक array, जो शब्दकोशीय क्रम में व्यवस्थित है।\n\nउदाहरण:\n    $permutations = generatePermutations(\"abc\");\n    $permutations में निम्नलिखित array शामिल होना चाहिए:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) ",
      "hu": "<?php\n/**\n * Kérdés leírása:\nAdott egy karakterlánc, amely különböző kisbetűkből áll. Az Ön feladata, hogy írjon egy generatePermutations függvényt, amely az input karakterlánc összes lehetséges permutációját generálja, és azokat lexikografikus sorrendben adja vissza.\n\nBemenet:\nEgy karakterlánc, amely különböző kisbetűkből áll, ahol a karakterlánc hossza legfeljebb 6.\n\nKimenet:\nEgy tömb, amely az input karakterlánc összes permutációját tartalmazza, lexikografikus sorrendben rendezve.\n\nPélda:\n    $permutations = generatePermutations(\"abc\");\n    A $permutations tömbnek a következő elemeket kell tartalmaznia:\n    [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n */\n\n\n function generatePermutations($str) "
    },
    "prompt_bertscore": {
      "sq": "0.9919431544844629",
      "hy": "0.990543207558929",
      "bn": "0.9825870676465766",
      "bg": "0.9803969690652858",
      "zh": "0.9818843133584751",
      "fr": "0.9863614421470015",
      "de": "0.9886274175338475",
      "ha": "0.9795682831156083",
      "hi": "0.9618907750946464",
      "hu": "0.9770623622284721"
    },
    "canonical_solution": " {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}",
    "instruction": {
      "en": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nPHP կոդի համար տրամադրել հակիրճ բնութագիր (docstring) հայերեն լեզվով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nPHP কোডের একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简明的自然语言描述（文档字符串）。",
      "fr": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nFournir une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nBa da takaitaccen bayani a cikin yaren halitta (docstring) na lambar PHP a Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function generatePermutations($str)\n {\n    // Base case: if the string is empty, return an empty array\n    if (strlen($str) == 0) {\n        return [];\n    }\n\n    // If the string has only one character, return an array with that character\n    if (strlen($str) == 1) {\n        return [$str];\n    }\n\n    $permutations = [];\n\n    // Iterate through each character in the string\n    for ($i = 0; $i < strlen($str); $i++) {\n        // Remove the character at index $i\n        $char = $str[$i];\n        $remaining = substr($str, 0, $i) . substr($str, $i + 1);\n\n        // Generate permutations of the remaining string\n        $remainingPermutations = generatePermutations($remaining);\n\n        // Prepend the removed character to each permutation\n        foreach ($remainingPermutations as $perm) {\n            $permutations[] = $char . $perm;\n        }\n    }\n\n    // Sort the permutations in lexicographical order\n    sort($permutations);\n\n\n    return $permutations;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.902450434939575",
      "bn": "0.9070892488582638",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9358666198322174",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    $permutations = generatePermutations(\"abc\");\n    assert($permutations === [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]);\n    $permutations = generatePermutations(\"abcd\");\n    assert($permutations === [\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"]);\n\n}\n\n\nmain();\n?>",
    "entry_point": "generatePermutations",
    "signature": "function generatePermutations($str)",
    "docstring": {
      "en": "Question Description:\nYou are given a string consisting of distinct lowercase letters. Your task is to write a function generatePermutations that generates all possible permutations of the input string and returns them in lexicographical order.\n\nInput:\nA string consisting of distinct lowercase letters, where the length of the string is at most 6.\n\nOutput:\nAn array containing all permutations of the input string, sorted in lexicographical order.\n\nExample:\n$permutations = generatePermutations(\"abc\");\n$permutations should contain the following array:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "sq": "Përshkrimi i Pyetjes:\nJu jepet një varg që përbëhet nga shkronja të vogla të dallueshme. Detyra juaj është të shkruani një funksion generatePermutations që gjeneron të gjitha permutacionet e mundshme të vargut hyrës dhe i kthen ato në rend leksikografik.\n\nHyrja:\nNjë varg që përbëhet nga shkronja të vogla të dallueshme, ku gjatësia e vargut është maksimumi 6.\n\nDalja:\nNjë varg që përmban të gjitha permutacionet e vargut hyrës, të renditura në rend leksikografik.\n\nShembull:\n$permutations = generatePermutations(\"abc\");\n$permutations duhet të përmbajë vargun e mëposhtëm:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hy": "Հարցի նկարագրություն:\nՁեզ տրված է փոքրատառ տարբերակով տարբեր տառերից կազմված տող: Ձեր խնդիրն է գրել generatePermutations ֆունկցիան, որը կգեներացնի մուտքային տողի բոլոր հնարավոր փոխատեղումները և կվերադարձնի դրանք բառարանային կարգով:\n\nՄուտք:\nՓոքրատառ տարբերակով տարբեր տառերից կազմված տող, որտեղ տողի երկարությունը առավելագույնը 6 է:\n\nԵլք:\nԶանգված, որը պարունակում է մուտքային տողի բոլոր փոխատեղումները, դասավորված բառարանային կարգով:\n\nՕրինակ:\n$permutations = generatePermutations(\"abc\");\n$permutations-ը պետք է պարունակի հետևյալ զանգվածը:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bn": "প্রশ্নের বিবরণ:\nআপনাকে একটি স্ট্রিং দেওয়া হয়েছে যা পৃথক ছোট হাতের অক্ষর নিয়ে গঠিত। আপনার কাজ হল একটি ফাংশন generatePermutations লেখা যা ইনপুট স্ট্রিংয়ের সমস্ত সম্ভাব্য বিন্যাস তৈরি করে এবং সেগুলিকে বর্ণানুক্রমিক ক্রমে ফেরত দেয়।\n\nইনপুট:\nএকটি স্ট্রিং যা পৃথক ছোট হাতের অক্ষর নিয়ে গঠিত, যেখানে স্ট্রিংয়ের দৈর্ঘ্য সর্বাধিক ৬।\n\nআউটপুট:\nএকটি অ্যারে যা ইনপুট স্ট্রিংয়ের সমস্ত বিন্যাস ধারণ করে, বর্ণানুক্রমিক ক্রমে সাজানো।\n\nউদাহরণ:\n$permutations = generatePermutations(\"abc\");\n$permutations নিম্নলিখিত অ্যারে ধারণ করা উচিত:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "bg": "Описание на задачата:\nДаден е низ, състоящ се от различни малки букви. Вашата задача е да напишете функция generatePermutations, която генерира всички възможни пермутации на входния низ и ги връща в лексикографски ред.\n\nВход:\nНиз, състоящ се от различни малки букви, където дължината на низа е най-много 6.\n\nИзход:\nМасив, съдържащ всички пермутации на входния низ, сортирани в лексикографски ред.\n\nПример:\n$permutations = generatePermutations(\"abc\");\n$permutations трябва да съдържа следния масив:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "zh": "问题描述：\n给定一个由不同的小写字母组成的字符串。你的任务是编写一个函数 generatePermutations，生成输入字符串的所有可能排列，并按字典顺序返回它们。\n\n输入：\n一个由不同小写字母组成的字符串，字符串的长度最多为6。\n\n输出：\n一个包含输入字符串所有排列的数组，按字典顺序排序。\n\n示例：\n$permutations = generatePermutations(\"abc\");\n$permutations 应该包含以下数组：\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "fr": "Description de la question :\nVous avez une chaîne composée de lettres minuscules distinctes. Votre tâche est d'écrire une fonction generatePermutations qui génère toutes les permutations possibles de la chaîne d'entrée et les renvoie dans l'ordre lexicographique.\n\nEntrée :\nUne chaîne composée de lettres minuscules distinctes, où la longueur de la chaîne est d'au plus 6.\n\nSortie :\nUn tableau contenant toutes les permutations de la chaîne d'entrée, triées dans l'ordre lexicographique.\n\nExemple :\n$permutations = generatePermutations(\"abc\");\n$permutations devrait contenir le tableau suivant :\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "de": "Fragebeschreibung:\nSie erhalten einen String, der aus verschiedenen Kleinbuchstaben besteht. Ihre Aufgabe ist es, eine Funktion generatePermutations zu schreiben, die alle möglichen Permutationen des Eingabestrings generiert und diese in lexikographischer Reihenfolge zurückgibt.\n\nEingabe:\nEin String, der aus verschiedenen Kleinbuchstaben besteht, wobei die Länge des Strings höchstens 6 beträgt.\n\nAusgabe:\nEin Array, das alle Permutationen des Eingabestrings enthält, sortiert in lexikographischer Reihenfolge.\n\nBeispiel:\n$permutations = generatePermutations(\"abc\");\n$permutations sollte das folgende Array enthalten:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "ha": "Bayanin Tambaya:\nAn ba ku wani kirtani da ya ƙunshi haruffa ƙanana daban-daban. Aikin ku shi ne rubuta wata aikin generatePermutations wanda ke samar da dukkan yiwuwar permutations na kirtanin shigarwa kuma ya dawo da su a cikin tsari na haruffa.\n\nShigarwa:\nWani kirtani da ya ƙunshi haruffa ƙanana daban-daban, inda tsawon kirtanin bai wuce 6 ba.\n\nFitarwa:\nWani jerin da ke ƙunshe da duk permutations na kirtanin shigarwa, an jera su a cikin tsari na haruffa.\n\nMisali:\n$permutations = generatePermutations(\"abc\");\n$permutations ya kamata ya ƙunshi jerin mai zuwa:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hi": "प्रश्न विवरण:\nआपको एक स्ट्रिंग दी गई है जिसमें भिन्न छोटे अक्षर शामिल हैं। आपका कार्य एक फ़ंक्शन generatePermutations लिखना है जो इनपुट स्ट्रिंग के सभी संभावित क्रमपरिवर्तन उत्पन्न करता है और उन्हें शब्दकोश क्रम में लौटाता है।\n\nइनपुट:\nएक स्ट्रिंग जिसमें भिन्न छोटे अक्षर शामिल हैं, जहाँ स्ट्रिंग की लंबाई अधिकतम 6 है।\n\nआउटपुट:\nएक ऐरे जिसमें इनपुट स्ट्रिंग के सभी क्रमपरिवर्तन शामिल हैं, जो शब्दकोश क्रम में व्यवस्थित हैं।\n\nउदाहरण:\n$permutations = generatePermutations(\"abc\");\n$permutations में निम्नलिखित ऐरे शामिल होना चाहिए:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]",
      "hu": "Kérdés leírása:\nAdott egy karakterlánc, amely különböző kisbetűkből áll. Az Ön feladata, hogy írjon egy generatePermutations nevű függvényt, amely az input karakterlánc összes lehetséges permutációját generálja, és azokat lexikografikus sorrendben adja vissza.\n\nBemenet:\nEgy karakterlánc, amely különböző kisbetűkből áll, ahol a karakterlánc hossza legfeljebb 6.\n\nKimenet:\nEgy tömb, amely az input karakterlánc összes permutációját tartalmazza, lexikografikus sorrendben rendezve.\n\nPélda:\n$permutations = generatePermutations(\"abc\");\nA $permutations tömbnek a következő elemeket kell tartalmaznia:\n[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]"
    },
    "docstring_bertscore": {
      "sq": "0.9716500816060335",
      "hy": "0.9712873825302638",
      "bn": "0.9900647069710159",
      "bg": "0.98142269635295",
      "zh": "0.9620230629284156",
      "fr": "0.9784458228323801",
      "de": "0.9921405930832116",
      "ha": "0.9515858309265564",
      "hi": "0.98040928414891",
      "hu": "0.9810107369426837"
    }
  },
  {
    "task_id": "PHP/38",
    "prompt": {
      "en": "<?php\n\n/**\n * Question:\n * You have M identical apples that need to be placed into N identical plates. You are allowed\n * to have some plates empty. How many different ways are there to distribute the apples into the plates?\n * 5,1,1 and 1,5,1 are the same division method.\n *\n * Example:\n * - Input: M = 7, N = 3\n * - Output: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "sq": "<?php\n\n/**\n * Pyetje:\n * Ju keni M mollë identike që duhet të vendosen në N pjata identike. Ju lejohet\n * të keni disa pjata bosh. Sa mënyra të ndryshme ka për të shpërndarë mollët në pjata?\n * 5,1,1 dhe 1,5,1 janë e njëjta metodë ndarjeje.\n *\n * Shembull:\n * - Hyrja: M = 7, N = 3\n * - Dalja: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "hy": "<?php\n\n/**\n * Հարց:\n * Դուք ունեք M նույնական խնձոր, որոնք պետք է տեղադրվեն N նույնական ափսեների մեջ։ Դուք կարող եք\n * ունենալ որոշ ափսեներ դատարկ։ Քանի՞ տարբեր եղանակներ կան խնձորները ափսեների մեջ բաժանելու համար:\n * 5,1,1 և 1,5,1 նույն բաժանման մեթոդն են։\n *\n * Օրինակ:\n * - Մուտքագրում: M = 7, N = 3\n * - Ելք: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "bn": "<?php\n\n/**\n * প্রশ্ন:\n * আপনার কাছে M সংখ্যক অভিন্ন আপেল রয়েছে যা N সংখ্যক অভিন্ন প্লেটে রাখতে হবে। কিছু প্লেট খালি রাখা যেতে পারে।\n * আপেলগুলোকে প্লেটে বিতরণ করার কতগুলি ভিন্ন উপায় রয়েছে?\n * 5,1,1 এবং 1,5,1 একই বিভাজন পদ্ধতি।\n *\n * উদাহরণ:\n * - ইনপুট: M = 7, N = 3\n * - আউটপুট: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "bg": "<?php\n\n/**\n * Въпрос:\n * Имате M еднакви ябълки, които трябва да бъдат поставени в N еднакви чинии. Позволено е\n * някои чинии да останат празни. Колко различни начина има за разпределяне на ябълките в чиниите?\n * 5,1,1 и 1,5,1 са един и същ метод на разпределение.\n *\n * Пример:\n * - Вход: M = 7, N = 3\n * - Изход: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "zh": "<?php\n\n/**\n * 问题：\n * 你有 M 个相同的苹果，需要放入 N 个相同的盘子中。允许有些盘子是空的。将苹果分配到盘子中的不同方法有多少种？\n * 5,1,1 和 1,5,1 是相同的分配方法。\n *\n * 示例：\n * - 输入: M = 7, N = 3\n * - 输出: 8\n */\n\n function countDistributionMethods($M, $N) ",
      "fr": "<?php\n\n/**\n * Question :\n * Vous avez M pommes identiques qui doivent être placées dans N assiettes identiques. Vous êtes autorisé\n * à avoir certaines assiettes vides. Combien de façons différentes y a-t-il de distribuer les pommes dans les assiettes ?\n * 5,1,1 et 1,5,1 sont la même méthode de division.\n *\n * Exemple :\n * - Entrée : M = 7, N = 3\n * - Sortie : 8\n */\n\n function countDistributionMethods($M, $N) ",
      "de": "<?php\n\n/**\n * Frage:\n * Sie haben M identische Äpfel, die auf N identische Teller verteilt werden müssen. Es ist erlaubt,\n * einige Teller leer zu lassen. Wie viele verschiedene Möglichkeiten gibt es, die Äpfel auf die Teller zu verteilen?\n * 5,1,1 und 1,5,1 sind die gleiche Verteilungsmethode.\n *\n * Beispiel:\n * - Eingabe: M = 7, N = 3\n * - Ausgabe: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "ha": "<?php\n\n/**\n * Tambaya:\n * Kana da M na tuffa masu kama da juna waɗanda ake buƙatar a sanya su cikin N faranti masu kama da juna. An yarda\n * a sami wasu faranti babu komai. Ta yaya hanyoyi daban-daban suke don rarraba tuffa cikin faranti?\n * 5,1,1 da 1,5,1 iri ɗaya ne na hanyar rarrabawa.\n *\n * Misali:\n * - Shigarwa: M = 7, N = 3\n * - Fitarwa: 8\n\n */\n\n function countDistributionMethods($M, $N) ",
      "hi": "<?php\n\n/**\n * प्रश्न:\n * आपके पास M समान सेब हैं जिन्हें N समान प्लेटों में रखा जाना है। आपको कुछ प्लेटों को खाली रखने की अनुमति है। सेबों को प्लेटों में वितरित करने के कितने विभिन्न तरीके हैं?\n * 5,1,1 और 1,5,1 एक ही वितरण विधि हैं।\n *\n * उदाहरण:\n * - इनपुट: M = 7, N = 3\n * - आउटपुट: 8\n *\n */\n\n function countDistributionMethods($M, $N) ",
      "hu": "<?php\n\n/**\n * Kérdés:\n * Van M azonos almád, amelyeket N azonos tányérba kell helyezni. Megengedett, hogy néhány tányér üres maradjon. Hány különböző módon lehet elosztani az almákat a tányérokba?\n * 5,1,1 és 1,5,1 ugyanaz az elosztási módszer.\n *\n * Példa:\n * - Bemenet: M = 7, N = 3\n * - Kimenet: 8\n\n */\n\n function countDistributionMethods($M, $N) "
    },
    "prompt_bertscore": {
      "sq": "0.9864587710337086",
      "hy": "0.9786947066998168",
      "bn": "0.9686100436242946",
      "bg": "0.9752830312751616",
      "zh": "0.9682189404040369",
      "fr": "0.9887225614863632",
      "de": "0.970155586619127",
      "ha": "0.9837486581148686",
      "hi": "0.9664028628302349",
      "hu": "0.9687739136886483"
    },
    "canonical_solution": " {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n",
    "instruction": {
      "en": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) այս PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, като използвате не повече от 500 знака.",
      "zh": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function countDistributionMethods($M, $N)\n {\n    // Initialize a 2D array to store the number of ways to distribute M apples into N plates\n    $dp = array_fill(0, $M + 1, array_fill(0, $N + 1, 0));\n\n    // There is one way to distribute 0 apples into any number of plates\n    for ($i = 0; $i <= $N; $i++) {\n        $dp[0][$i] = 1;\n    }\n\n    // Fill the dp array\n    for ($i = 1; $i <= $M; $i++) {\n        for ($j = 1; $j <= $N; $j++) {\n            // If the number of apples is less than the number of plates,\n            // the number of ways is the same as the number of ways to distribute i apples into j - 1 plates\n            if ($i < $j) {\n                $dp[$i][$j] = $dp[$i][$j - 1];\n            } else {\n                // Otherwise, the number of ways is the sum of the number of ways to distribute i apples into j - 1 plates\n                // and the number of ways to distribute i - j apples into j plates\n                $dp[$i][$j] = $dp[$i][$j - 1] + $dp[$i - $j][$j];\n            }\n        }\n    }\n\n    // The number of ways to distribute M apples into N plates is stored in dp[M][N]\n    return $dp[$M][$N];\n}\n\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9195475449871531",
      "bn": "0.8680359337518513",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    // Test cases\n    assert(countDistributionMethods(7, 3) === 8);\n    assert(countDistributionMethods(5, 2) === 3);\n    assert(countDistributionMethods(10, 5) === 30);\n\n}\n\n\nmain();\n?>",
    "entry_point": "countDistributionMethods",
    "signature": "function countDistributionMethods($M, $N)",
    "docstring": {
      "en": "Question:\nYou have M identical apples that need to be placed into N identical plates. You are allowed\nto have some plates empty. How many different ways are there to distribute the apples into the plates?\n5,1,1 and 1,5,1 are the same division method.\n\nExample:\n- Input: M = 7, N = 3\n- Output: 8",
      "sq": "Pyetje:\nJu keni M mollë identike që duhet të vendosen në N pjata identike. Ju lejohet\ntë keni disa pjata bosh. Sa mënyra të ndryshme ka për të shpërndarë mollët në pjata?\n5,1,1 dhe 1,5,1 janë e njëjta metodë ndarjeje.\n\nShembull:\n- Hyrja: M = 7, N = 3\n- Dalja: 8",
      "hy": "Հարց:  \nԴուք ունեք M նույնական խնձորներ, որոնք պետք է տեղադրվեն N նույնական ափսեների մեջ։ Դուք կարող եք ունենալ որոշ ափսեներ դատարկ։ Քանի՞ տարբեր եղանակներ կան խնձորները ափսեների մեջ բաշխելու համար:  \n5,1,1 և 1,5,1 նույն բաժանման մեթոդն են։\n\nՕրինակ:  \n- Մուտքագրում: M = 7, N = 3  \n- Ելք: 8",
      "bn": "প্রশ্ন:\nআপনার কাছে M সংখ্যক অভিন্ন আপেল রয়েছে যা N সংখ্যক অভিন্ন প্লেটে রাখতে হবে। কিছু প্লেট খালি রাখা যেতে পারে। আপেলগুলি প্লেটে বিতরণ করার কতগুলি ভিন্ন উপায় আছে?\n5,1,1 এবং 1,5,1 একই বিভাজন পদ্ধতি।\n\nউদাহরণ:\n- ইনপুট: M = 7, N = 3\n- আউটপুট: 8",
      "bg": "Въпрос:  \nИмате M еднакви ябълки, които трябва да бъдат поставени в N еднакви чинии. Позволено е някои чинии да останат празни. Колко различни начина има за разпределяне на ябълките в чиниите?  \n5,1,1 и 1,5,1 са един и същ метод на разделяне.\n\nПример:  \n- Вход: M = 7, N = 3  \n- Изход: 8",
      "zh": "问题：  \n你有 M 个相同的苹果，需要放入 N 个相同的盘子中。允许有些盘子是空的。将苹果分配到盘子中的不同方法有多少种？5,1,1 和 1,5,1 被视为相同的分配方法。\n\n示例：  \n- 输入: M = 7, N = 3  \n- 输出: 8",
      "fr": "Question:\nVous avez M pommes identiques qui doivent être placées dans N assiettes identiques. Vous êtes autorisé à avoir certaines assiettes vides. Combien y a-t-il de façons différentes de distribuer les pommes dans les assiettes ?\n5,1,1 et 1,5,1 sont la même méthode de division.\n\nExemple:\n- Entrée: M = 7, N = 3\n- Sortie: 8",
      "de": "Frage:\nSie haben M identische Äpfel, die auf N identische Teller verteilt werden müssen. Es ist erlaubt, dass einige Teller leer bleiben. Wie viele verschiedene Möglichkeiten gibt es, die Äpfel auf die Teller zu verteilen?\n5,1,1 und 1,5,1 sind die gleiche Verteilungsmethode.\n\nBeispiel:\n- Eingabe: M = 7, N = 3\n- Ausgabe: 8",
      "ha": "Tambaya:\nKana da M na tuffa iri daya da ake bukatar a sanya su cikin N faranti iri daya. Ana yarda\na bar wasu faranti babu komai. Nawa hanyoyi daban-daban ne ake da su don rarraba tuffa cikin faranti?\n5,1,1 da 1,5,1 iri daya ne hanyar rarrabawa.\n\nMisali:\n- Shigarwa: M = 7, N = 3\n- Fitarwa: 8",
      "hi": "प्रश्न:\nआपके पास M समान सेब हैं जिन्हें N समान प्लेटों में रखा जाना है। आपको कुछ प्लेटों को खाली रखने की अनुमति है। सेबों को प्लेटों में वितरित करने के कितने विभिन्न तरीके हैं?\n5,1,1 और 1,5,1 एक ही विभाजन विधि हैं।\n\nउदाहरण:\n- इनपुट: M = 7, N = 3\n- आउटपुट: 8",
      "hu": "Kérdés:\nVan M azonos almád, amelyeket N azonos tányérba kell helyezni. Megengedett, hogy néhány tányér üres maradjon. Hány különböző módon lehet az almákat elosztani a tányérok között?\n5,1,1 és 1,5,1 ugyanaz az elosztási módszer.\n\nPélda:\n- Bemenet: M = 7, N = 3\n- Kimenet: 8"
    },
    "docstring_bertscore": {
      "sq": "0.9798112080716139",
      "hy": "0.977881712550241",
      "bn": "0.9705071623935587",
      "bg": "0.9672365145394383",
      "zh": "0.9670480143078362",
      "fr": "0.9878533549389545",
      "de": "0.961700884450377",
      "ha": "0.9758962032614164",
      "hi": "0.9857850167812382",
      "hu": "0.9624626319616458"
    }
  },
  {
    "task_id": "PHP/39",
    "prompt": {
      "en": "<?php\n\n/**\n * Generates all possible ways to express a natural number as the sum of smaller natural numbers.\n * For example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\n * This function returns all these expressions in lexicographical (dictionary) order.\n * below is output when n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n The input natural number (greater than 1).\n * @return array An array of strings representing all possible expressions.\n */\n\n function generateNumberExpressions($n) ",
      "sq": "<?php\n\n/**\n * Gjeneron të gjitha mënyrat e mundshme për të shprehur një numër natyror si shumën e numrave natyrorë më të vegjël.\n * Për shembull, kur n=7, ka 14 mënyra të ndryshme për ta shprehur atë si shumën e numrave natyrorë më të vegjël.\n * Kjo funksion kthen të gjitha këto shprehje në rend leksikografik (rend fjalori).\n * më poshtë është prodhimi kur n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Numri natyror i dhënë (më i madh se 1).\n * @return array Një varg i vargjeve që përfaqësojnë të gjitha shprehjet e mundshme.\n */\n\n function generateNumberExpressions($n) ",
      "hy": "<?php\n\n/**\n * Ստեղծում է բոլոր հնարավոր եղանակները բնական թիվը ավելի փոքր բնական թվերի գումարով արտահայտելու համար:\n * Օրինակ, երբ n=7, կա 14 տարբեր եղանակ այն արտահայտելու որպես ավելի փոքր բնական թվերի գումար:\n * Այս ֆունկցիան վերադարձնում է այս բոլոր արտահայտությունները բառարանի (լեքսիկոգրաֆիկ) կարգով:\n * ներքևում ելքն է, երբ n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Մուտքային բնական թիվը (ավելի մեծ քան 1):\n * @return array Տողերի զանգված, որը ներկայացնում է բոլոր հնարավոր արտահայտությունները:\n */\n\n function generateNumberExpressions($n) ",
      "bn": "<?php\n\n/**\n * একটি প্রাকৃতিক সংখ্যা ছোট প্রাকৃতিক সংখ্যার যোগফল হিসাবে প্রকাশ করার সমস্ত সম্ভাব্য উপায় তৈরি করে।\n * উদাহরণস্বরূপ, যখন n=7, তখন এটি ছোট প্রাকৃতিক সংখ্যার যোগফল হিসাবে প্রকাশ করার 14টি ভিন্ন উপায় রয়েছে।\n * এই ফাংশনটি এই সমস্ত প্রকাশগুলি অভিধানিক (অর্থাৎ, অভিধান অনুযায়ী) ক্রমে ফেরত দেয়।\n * নিচে n = 7 হলে আউটপুট দেওয়া হয়েছে\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n ইনপুট প্রাকৃতিক সংখ্যা (১ এর চেয়ে বড়)।\n * @return array একটি স্ট্রিং এর অ্যারে যা সমস্ত সম্ভাব্য প্রকাশগুলি উপস্থাপন করে।\n */\n\n function generateNumberExpressions($n) ",
      "bg": "<?php\n\n/**\n * Генерира всички възможни начини за изразяване на естествено число като сума от по-малки естествени числа.\n * Например, когато n=7, има 14 различни начина да се изрази като сума от по-малки естествени числа.\n * Тази функция връща всички тези изрази в лексикографски (речников) ред.\n * по-долу е изходът, когато n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Входното естествено число (по-голямо от 1).\n * @return array Масив от низове, представляващи всички възможни изрази.\n */\n\n function generateNumberExpressions($n) ",
      "zh": "<?php\n\n/**\n * 生成将一个自然数表示为较小自然数之和的所有可能方式。\n * 例如，当 n=7 时，有 14 种不同的方式将其表示为较小自然数之和。\n * 此函数按字典顺序返回所有这些表达式。\n * 以下是当 n = 7 时的输出\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n 输入的自然数（大于 1）。\n * @return array 一个字符串数组，表示所有可能的表达式。\n */\n\n function generateNumberExpressions($n) ",
      "fr": "<?php\n\n/**\n * Génère toutes les façons possibles d'exprimer un nombre naturel comme la somme de nombres naturels plus petits.\n * Par exemple, lorsque n=7, il y a 14 façons différentes de l'exprimer comme la somme de nombres naturels plus petits.\n * Cette fonction renvoie toutes ces expressions dans l'ordre lexicographique (dictionnaire).\n * ci-dessous est la sortie lorsque n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Le nombre naturel d'entrée (supérieur à 1).\n * @return array Un tableau de chaînes représentant toutes les expressions possibles.\n */\n\n function generateNumberExpressions($n) ",
      "de": "<?php\n\n/**\n * Generiert alle möglichen Arten, eine natürliche Zahl als Summe kleinerer natürlicher Zahlen auszudrücken.\n * Zum Beispiel gibt es, wenn n=7, 14 verschiedene Möglichkeiten, sie als Summe kleinerer natürlicher Zahlen auszudrücken.\n * Diese Funktion gibt all diese Ausdrücke in lexikographischer (Wörterbuch-) Reihenfolge zurück.\n * unten ist die Ausgabe, wenn n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Die Eingabe-Natürliche Zahl (größer als 1).\n * @return array Ein Array von Strings, das alle möglichen Ausdrücke darstellt.\n */\n\n function generateNumberExpressions($n) ",
      "ha": "<?php\n\n/**\n * Yana samar da duk hanyoyin da za a iya bayyana lamba ta dabi'a a matsayin jumlar ƙananan lambobi ta dabi'a.\n * Alal misali, idan n=7, akwai hanyoyi 14 daban-daban don bayyana shi a matsayin jumlar ƙananan lambobi ta dabi'a.\n * Wannan aikin yana dawo da duk waɗannan bayanan a cikin tsari na lexicographical (na ƙamus).\n * a ƙasa shine fitarwa lokacin da n = 7\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n Lambar shigarwa ta dabi'a (fiye da 1).\n * @return array Jerin kirtani da ke wakiltar duk yiwuwar bayanai.\n */\n\n function generateNumberExpressions($n) ",
      "hi": "<?php\n\n/**\n * एक प्राकृतिक संख्या को छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के सभी संभावित तरीकों को उत्पन्न करता है।\n * उदाहरण के लिए, जब n=7 होता है, तो इसे छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के 14 विभिन्न तरीके होते हैं।\n * यह फ़ंक्शन इन सभी अभिव्यक्तियों को शब्दकोशीय (डिक्शनरी) क्रम में लौटाता है।\n * नीचे n = 7 के लिए आउटपुट है\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n इनपुट प्राकृतिक संख्या (1 से अधिक)।\n * @return array सभी संभावित अभिव्यक्तियों का एक स्ट्रिंग्स का एरे।\n */\n\n function generateNumberExpressions($n) ",
      "hu": "<?php\n\n/**\n * Minden lehetséges módot generál, ahogyan egy természetes szám kifejezhető kisebb természetes számok összegeként.\n * Például, amikor n=7, 14 különböző mód van arra, hogy kisebb természetes számok összegeként fejezzük ki.\n * Ez a függvény visszaadja ezeket a kifejezéseket lexikografikus (szótári) sorrendben.\n * alább az n = 7 esetén a kimenet\n *  7=1+1+1+1+1+1+1\n    7=1+1+1+1+1+2\n    7=1+1+1+1+3\n    7=1+1+1+2+2\n    7=1+1+1+4\n    7=1+1+2+3\n    7=1+1+5\n    7=1+2+2+2\n    7=1+2+4\n    7=1+3+3\n    7=1+6\n    7=2+2+3\n    7=2+5\n    7=3+4\n * @param int $n A bemeneti természetes szám (nagyobb, mint 1).\n * @return array Egy tömb, amely az összes lehetséges kifejezést tartalmazza sztringként.\n */\n\n function generateNumberExpressions($n) "
    },
    "prompt_bertscore": {
      "sq": "0.9879055947291667",
      "hy": "0.9756737372346572",
      "bn": "0.9613040209490693",
      "bg": "0.9931762518899274",
      "zh": "0.969016640014273",
      "fr": "0.9945011165314301",
      "de": "0.9921620451643633",
      "ha": "0.9921620451643633",
      "hi": "0.9853788176520218",
      "hu": "0.9853065161933252"
    },
    "canonical_solution": " {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n",
    "instruction": {
      "en": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në gjuhën shqipe duke përdorur maksimumi 500 karaktere.",
      "hy": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nՏվեք PHP կոդի համառոտ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে সীমাবদ্ধ।",
      "bg": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nBa da takaitaccen bayani a cikin harshen halitta (docstring) na lambar PHP a cikin Hausa, ba tare da wucewa haruffa 500 ba.",
      "hi": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function generateNumberExpressions($n)\n {\n    // This function will store the results\n    $results = [];\n\n\n\n    // Initialize the recursion with an empty array for the output\n    findCombinations($n, 1, [], $results);\n\n    // Format the results\n    return array_map(function($expression) use ($n) {\n        return \"$n=$expression\";\n    }, $results);\n}\n\n    // Helper function for recursion\nfunction findCombinations($n, $start, $output, &$results)\n    {\n        if ($n == 0) {\n            // Add to results only if there are more than one number in the combination\n            if (count($output) > 1) {\n                $results[] = implode('+', $output);\n            }\n            return;\n        }\n\n        for ($i = $start; $i <= $n; $i++) {\n            findCombinations($n - $i, $i, array_merge($output, [$i]), $results);\n        }\n}\n\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9458315087879756",
      "bn": "0.8753683742677543",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9176373166127405",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    $result = generateNumberExpressions(7);\n    assert($result===[\"7=1+1+1+1+1+1+1\",\"7=1+1+1+1+1+2\",\"7=1+1+1+1+3\",\"7=1+1+1+2+2\",\"7=1+1+1+4\",\"7=1+1+2+3\",\"7=1+1+5\",\"7=1+2+2+2\",\"7=1+2+4\",\"7=1+3+3\",\"7=1+6\",\"7=2+2+3\",\"7=2+5\",\"7=3+4\"]);\n    $result = generateNumberExpressions(6);\n    assert($result===[  \"6=1+1+1+1+1+1\",\"6=1+1+1+1+2\",\"6=1+1+1+3\",\"6=1+1+2+2\",\"6=1+1+4\",\"6=1+2+3\",\"6=1+5\",\"6=2+2+2\",\"6=2+4\",\"6=3+3\"]);\n  \n  \n}\n\n\nmain();\n?>",
    "entry_point": "generateNumberExpressions",
    "signature": "function generateNumberExpressions($n)",
    "docstring": {
      "en": "Generates all possible ways to express a natural number as the sum of smaller natural numbers.\nFor example, when n=7, there are 14 different ways to express it as the sum of smaller natural numbers.\nThis function returns all these expressions in lexicographical (dictionary) order.\nbelow is output when n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n The input natural number (greater than 1).\n@return array An array of strings representing all possible expressions.",
      "sq": "Gjeneron të gjitha mënyrat e mundshme për të shprehur një numër natyror si shumën e numrave natyrorë më të vegjël. Për shembull, kur n=7, ka 14 mënyra të ndryshme për ta shprehur atë si shumën e numrave natyrorë më të vegjël. Kjo funksion kthen të gjitha këto shprehje në rend leksikografik (rend fjalori). më poshtë është rezultati kur n = 7 7=1+1+1+1+1+1+1 7=1+1+1+1+1+2 7=1+1+1+1+3 7=1+1+1+2+2 7=1+1+1+4 7=1+1+2+3 7=1+1+5 7=1+2+2+2 7=1+2+4 7=1+3+3 7=1+6 7=2+2+3 7=2+5 7=3+4\n@param int $n Numri natyror i dhënë (më i madh se 1).\n@return array Një varg me vargje që përfaqësojnë të gjitha shprehjet e mundshme.",
      "hy": "Ստեղծում է բոլոր հնարավոր եղանակները՝ բնական թիվը ավելի փոքր բնական թվերի գումարի տեսքով արտահայտելու համար։ Օրինակ, երբ n=7, կա 14 տարբեր եղանակ՝ այն ավելի փոքր բնական թվերի գումարի տեսքով արտահայտելու համար։ Այս ֆունկցիան վերադարձնում է բոլոր այդ արտահայտությունները բառարանի կարգով։ Ստորև բերված է արդյունքը, երբ n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Մուտքային բնական թիվը (ավելի մեծ քան 1)։\n@return array Տողերի զանգված, որը ներկայացնում է բոլոր հնարավոր արտահայտությունները։",
      "bn": "প্রাকৃতিক সংখ্যাকে ছোট প্রাকৃতিক সংখ্যার যোগফল হিসেবে প্রকাশ করার সমস্ত সম্ভাব্য উপায় তৈরি করে। উদাহরণস্বরূপ, যখন n=7, তখন এটি ছোট প্রাকৃতিক সংখ্যার যোগফল হিসেবে প্রকাশ করার ১৪টি ভিন্ন উপায় রয়েছে। এই ফাংশনটি এই সমস্ত প্রকাশকে অভিধানক্রমিক (অভিধান) ক্রমে ফেরত দেয়। নিচে n = 7 এর জন্য আউটপুট দেওয়া হলো\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n ইনপুট প্রাকৃতিক সংখ্যা (১ এর চেয়ে বড়)।\n@return array একটি স্ট্রিং এর অ্যারে যা সমস্ত সম্ভাব্য প্রকাশকে উপস্থাপন করে।",
      "bg": "Генерира всички възможни начини за изразяване на естествено число като сума от по-малки естествени числа. Например, когато n=7, има 14 различни начина да се изрази като сума от по-малки естествени числа. Тази функция връща всички тези изрази в лексикографски (речников) ред. по-долу е изходът, когато n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Входното естествено число (по-голямо от 1).\n@return array Масив от низове, представляващи всички възможни изрази.",
      "zh": "生成将一个自然数表示为较小自然数之和的所有可能方式。\n例如，当 n=7 时，有 14 种不同的方式将其表示为较小自然数之和。\n此函数按字典顺序返回所有这些表达式。\n以下是 n = 7 时的输出\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n 输入的自然数（大于1）。\n@return array 一个字符串数组，表示所有可能的表达式。",
      "fr": "Génère toutes les façons possibles d'exprimer un nombre naturel comme la somme de nombres naturels plus petits.  \nPar exemple, lorsque n=7, il existe 14 façons différentes de l'exprimer comme la somme de nombres naturels plus petits.  \nCette fonction renvoie toutes ces expressions dans l'ordre lexicographique (dictionnaire).  \nci-dessous est la sortie lorsque n = 7  \n7=1+1+1+1+1+1+1  \n7=1+1+1+1+1+2  \n7=1+1+1+1+3  \n7=1+1+1+2+2  \n7=1+1+1+4  \n7=1+1+2+3  \n7=1+1+5  \n7=1+2+2+2  \n7=1+2+4  \n7=1+3+3  \n7=1+6  \n7=2+2+3  \n7=2+5  \n7=3+4  \n@param int $n Le nombre naturel d'entrée (supérieur à 1).  \n@return array Un tableau de chaînes représentant toutes les expressions possibles.  ",
      "de": "Erzeugt alle möglichen Arten, eine natürliche Zahl als Summe kleinerer natürlicher Zahlen darzustellen.\nZum Beispiel gibt es, wenn n=7, 14 verschiedene Möglichkeiten, es als Summe kleinerer natürlicher Zahlen darzustellen.\nDiese Funktion gibt all diese Ausdrücke in lexikographischer (Wörterbuch-) Reihenfolge zurück.\nunten ist die Ausgabe, wenn n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n Die Eingabe-Natürliche Zahl (größer als 1).\n@return array Ein Array von Zeichenfolgen, das alle möglichen Ausdrücke darstellt.",
      "ha": "Yana haifar da duk hanyoyin da za a iya bayyana lambar halitta a matsayin jumlar ƙananan lambobin halitta.  \nAlal misali, lokacin da n=7, akwai hanyoyi 14 daban-daban don bayyana shi a matsayin jumlar ƙananan lambobin halitta.  \nWannan aikin yana dawowa da duk waɗannan fassarorin a cikin tsari na haruffa (kamus).  \nƙasa shine fitarwa lokacin n = 7  \n7=1+1+1+1+1+1+1  \n7=1+1+1+1+1+2  \n7=1+1+1+1+3  \n7=1+1+1+2+2  \n7=1+1+1+4  \n7=1+1+2+3  \n7=1+1+5  \n7=1+2+2+2  \n7=1+2+4  \n7=1+3+3  \n7=1+6  \n7=2+2+3  \n7=2+5  \n7=3+4  \n@param int $n Lambar halitta ta shigarwa (fiye da 1).  \n@return array Wani tsari na igiyoyi da ke wakiltar duk yiwuwar fassarori.",
      "hi": "प्राकृतिक संख्या को छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के सभी संभावित तरीकों को उत्पन्न करता है। उदाहरण के लिए, जब n=7 होता है, तो इसे छोटे प्राकृतिक संख्याओं के योग के रूप में व्यक्त करने के 14 विभिन्न तरीके होते हैं। यह फ़ंक्शन इन सभी अभिव्यक्तियों को शब्दकोश क्रम में लौटाता है। नीचे n = 7 के लिए आउटपुट है\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n इनपुट प्राकृतिक संख्या (1 से अधिक)।\n@return array सभी संभावित अभिव्यक्तियों का एक स्ट्रिंग्स का एरे।",
      "hu": "Generálja az összes lehetséges módot arra, hogy egy természetes számot kisebb természetes számok összegével fejezzünk ki.\nPéldául, amikor n=7, 14 különböző mód van arra, hogy ezt kisebb természetes számok összegével fejezzük ki.\nEz a függvény visszaadja ezeket a kifejezéseket lexikografikus (szótári) sorrendben.\nalább látható a kimenet, amikor n = 7\n7=1+1+1+1+1+1+1\n7=1+1+1+1+1+2\n7=1+1+1+1+3\n7=1+1+1+2+2\n7=1+1+1+4\n7=1+1+2+3\n7=1+1+5\n7=1+2+2+2\n7=1+2+4\n7=1+3+3\n7=1+6\n7=2+2+3\n7=2+5\n7=3+4\n@param int $n A bemeneti természetes szám (nagyobb, mint 1).\n@return array Egy tömb, amely az összes lehetséges kifejezést tartalmazza."
    },
    "docstring_bertscore": {
      "sq": "0.98244762911909",
      "hy": "0.9407670299627291",
      "bn": "0.9836413977091097",
      "bg": "0.9913615647287927",
      "zh": "0.9661021364333481",
      "fr": "0.9924727030803019",
      "de": "0.987559779235785",
      "ha": "0.9582760994205735",
      "hi": "0.9636369347743241",
      "hu": "0.9874439777236416"
    }
  },
  {
    "task_id": "PHP/40",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the maximum number of distinct letters one can pass through in a letter matrix.\n * Starting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\n * This function finds the maximum number of distinct letters that can be traversed in the matrix.\n * \n * Inputs:\n * - $rows (int): The number of rows in the matrix.\n * - $cols (int): The number of columns in the matrix.\n * - $matrix (array): A 2D array representing the letter matrix.\n *\n * Output:\n * - Returns an integer representing the maximum number of distinct letters that can be traversed.\n *\n * Example:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin maksimal të shkronjave të ndryshme që mund të kalohen në një matricë shkronjash.\n * Duke filluar nga këndi i sipërm i majtë, mund të lëvizni lart, poshtë, majtas, ose djathtas, por nuk mund të vizitoni një qelizë më shumë se një herë.\n * Kjo funksion gjen numrin maksimal të shkronjave të ndryshme që mund të kalohen në matricë.\n * \n * Hyrjet:\n * - $rows (int): Numri i rreshtave në matricë.\n * - $cols (int): Numri i kolonave në matricë.\n * - $matrix (array): Një varg 2D që përfaqëson matricën e shkronjave.\n *\n * Dalja:\n * - Kthen një numër të plotë që përfaqëson numrin maksimal të shkronjave të ndryshme që mund të kalohen.\n *\n * Shembull:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) duhet të kthejë 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hy": "<?php\n\n\n/**\n * Հաշվարկում է առավելագույն տարբեր տառերի քանակը, որոնցով կարելի է անցնել տառերի մատրիցում:\n * Սկսելով վերևի ձախ անկյունից, դուք կարող եք շարժվել վեր, վար, ձախ կամ աջ, բայց չեք կարող այցելել բջիջը մեկից ավելի անգամ:\n * Այս ֆունկցիան գտնում է մատրիցում անցնելու առավելագույն տարբեր տառերի քանակը:\n * \n * Մուտքեր:\n * - $rows (int): Մատրիցի տողերի քանակը:\n * - $cols (int): Մատրիցի սյուների քանակը:\n * - $matrix (array): 2D զանգված, որը ներկայացնում է տառերի մատրիցը:\n *\n * Ելք:\n * - Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է անցնելու առավելագույն տարբեր տառերի քանակը:\n *\n * Օրինակ:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) պետք է վերադարձնի 9:\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "bn": "<?php\n\n\n/**\n * একটি অক্ষর ম্যাট্রিক্সের মধ্যে দিয়ে যতগুলি ভিন্ন অক্ষর পার হওয়া যায় তার সর্বাধিক সংখ্যা গণনা করে।\n * উপরের-বাম কোণ থেকে শুরু করে, আপনি উপরে, নিচে, বামে বা ডানে যেতে পারেন, কিন্তু একটি সেল একাধিকবার পরিদর্শন করতে পারবেন না।\n * এই ফাংশনটি ম্যাট্রিক্সের মধ্যে দিয়ে পার হওয়া ভিন্ন অক্ষরের সর্বাধিক সংখ্যা খুঁজে বের করে।\n * \n * ইনপুট:\n * - $rows (int): ম্যাট্রিক্সের সারির সংখ্যা।\n * - $cols (int): ম্যাট্রিক্সের কলামের সংখ্যা।\n * - $matrix (array): অক্ষর ম্যাট্রিক্সকে উপস্থাপনকারী একটি 2D অ্যারে।\n *\n * আউটপুট:\n * - একটি পূর্ণসংখ্যা ফেরত দেয় যা ম্যাট্রিক্সের মধ্যে দিয়ে পার হওয়া ভিন্ন অক্ষরের সর্বাধিক সংখ্যা উপস্থাপন করে।\n *\n * উদাহরণ:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9 ফেরত দেবে।\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "bg": "<?php\n\n\n/**\n * Изчислява максималния брой различни букви, през които може да се премине в матрица от букви.\n * Започвайки от горния ляв ъгъл, можете да се движите нагоре, надолу, наляво или надясно, но не можете да посетите клетка повече от веднъж.\n * Тази функция намира максималния брой различни букви, които могат да бъдат обходени в матрицата.\n * \n * Входове:\n * - $rows (int): Броят на редовете в матрицата.\n * - $cols (int): Броят на колоните в матрицата.\n * - $matrix (array): 2D масив, представляващ матрицата от букви.\n *\n * Изход:\n * - Връща цяло число, представляващо максималния брой различни букви, които могат да бъдат обходени.\n *\n * Пример:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) трябва да върне 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "zh": "<?php\n\n\n/**\n * 计算在字母矩阵中可以经过的最大不同字母数。\n * 从左上角开始，你可以向上、向下、向左或向右移动，但不能多次访问同一个单元格。\n * 此函数找到矩阵中可以遍历的最大不同字母数。\n * \n * 输入:\n * - $rows (int): 矩阵的行数。\n * - $cols (int): 矩阵的列数。\n * - $matrix (array): 表示字母矩阵的二维数组。\n *\n * 输出:\n * - 返回一个整数，表示可以遍历的最大不同字母数。\n *\n * 示例:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 应返回 9。\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre maximum de lettres distinctes que l'on peut traverser dans une matrice de lettres.\n * En partant du coin supérieur gauche, vous pouvez vous déplacer vers le haut, le bas, la gauche ou la droite, mais vous ne pouvez pas visiter une cellule plus d'une fois.\n * Cette fonction trouve le nombre maximum de lettres distinctes qui peuvent être traversées dans la matrice.\n * \n * Entrées:\n * - $rows (int) : Le nombre de lignes dans la matrice.\n * - $cols (int) : Le nombre de colonnes dans la matrice.\n * - $matrix (array) : Un tableau 2D représentant la matrice de lettres.\n *\n * Sortie:\n * - Retourne un entier représentant le nombre maximum de lettres distinctes qui peuvent être traversées.\n *\n * Exemple:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) devrait retourner 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "de": "<?php\n\n\n/**\n * Berechnet die maximale Anzahl an verschiedenen Buchstaben, die man in einer Buchstabenmatrix durchqueren kann.\n * Beginnend in der oberen linken Ecke, kann man sich nach oben, unten, links oder rechts bewegen, aber man darf ein Feld nicht mehr als einmal besuchen.\n * Diese Funktion findet die maximale Anzahl an verschiedenen Buchstaben, die in der Matrix durchquert werden können.\n * \n * Eingaben:\n * - $rows (int): Die Anzahl der Zeilen in der Matrix.\n * - $cols (int): Die Anzahl der Spalten in der Matrix.\n * - $matrix (array): Ein 2D-Array, das die Buchstabenmatrix darstellt.\n *\n * Ausgabe:\n * - Gibt eine ganze Zahl zurück, die die maximale Anzahl an verschiedenen Buchstaben darstellt, die durchquert werden können.\n *\n * Beispiel:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) sollte 9 zurückgeben.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige yawan haruffa daban-daban da za a iya wucewa ta cikin matrix na haruffa.\n * Fara daga saman hagu na matrix, za ka iya motsawa sama, ƙasa, hagu, ko dama, amma ba za ka iya ziyartar kowane cell fiye da sau ɗaya ba.\n * Wannan aikin yana nemo yawan haruffa daban-daban da za a iya wucewa a cikin matrix.\n * \n * Shigarwa:\n * - $rows (int): Yawan layuka a cikin matrix.\n * - $cols (int): Yawan ginshikai a cikin matrix.\n * - $matrix (array): Matrix mai girma biyu da ke wakiltar matrix na haruffa.\n *\n * Fitarwa:\n * - Yana dawowa da integer da ke wakiltar yawan haruffa daban-daban da za a iya wucewa.\n *\n * Misali:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) ya kamata ya dawo da 9.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hi": "<?php\n\n\n/**\n * गणना करता है कि अक्षर मैट्रिक्स में अधिकतम कितने भिन्न अक्षरों को पार किया जा सकता है।\n * शीर्ष-बाएँ कोने से शुरू करते हुए, आप ऊपर, नीचे, बाएँ या दाएँ जा सकते हैं, लेकिन किसी सेल पर एक से अधिक बार नहीं जा सकते।\n * यह फ़ंक्शन मैट्रिक्स में पार किए जा सकने वाले अधिकतम भिन्न अक्षरों की संख्या का पता लगाता है।\n * \n * इनपुट:\n * - $rows (int): मैट्रिक्स में पंक्तियों की संख्या।\n * - $cols (int): मैट्रिक्स में स्तंभों की संख्या।\n * - $matrix (array): अक्षर मैट्रिक्स का प्रतिनिधित्व करने वाली एक 2D array।\n *\n * आउटपुट:\n * - एक पूर्णांक लौटाता है जो पार किए जा सकने वाले अधिकतम भिन्न अक्षरों का प्रतिनिधित्व करता है।\n *\n * उदाहरण:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) को 9 लौटाना चाहिए।\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a maximális számú különböző betűt, amelyen át lehet haladni egy betűmátrixban.\n * A bal felső sarokból indulva felfelé, lefelé, balra vagy jobbra lehet mozogni, de egy cellát nem lehet többször meglátogatni.\n * Ez a függvény megkeresi a mátrixban bejárható maximális számú különböző betűt.\n * \n * Bemenetek:\n * - $rows (int): A mátrix sorainak száma.\n * - $cols (int): A mátrix oszlopainak száma.\n * - $matrix (array): Egy 2D tömb, amely a betűmátrixot ábrázolja.\n *\n * Kimenet:\n * - Visszaad egy egész számot, amely a bejárható különböző betűk maximális számát jelenti.\n *\n * Példa:\n * maxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) esetén 9-et kell visszaadnia.\n */\n\nfunction maxDistinctLetters($rows, $cols, $matrix) "
    },
    "prompt_bertscore": {
      "sq": "0.9794677761428047",
      "hy": "0.9823534783184795",
      "bn": "0.9643390931712824",
      "bg": "0.9743647630236373",
      "zh": "0.9750416953622042",
      "fr": "0.9740749612977074",
      "de": "0.9735617003931133",
      "ha": "0.9612746236526761",
      "hi": "0.9857727016976141",
      "hu": "0.9870469155919529"
    },
    "canonical_solution": "{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}",
    "instruction": {
      "en": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në gjuhën shqipe duke përdorur maksimumi 500 karaktere.",
      "hy": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրությունը (docstring) հայերեն լեզվով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে সীমাবদ্ধ।",
      "bg": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），字数不超过500个字符。",
      "fr": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nBa da takaitaccen bayanin yanayi (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function maxDistinctLetters($rows, $cols, $matrix)\n{\n    // Global variables to store the maximum count and visited letters\n    $maxCount = 0;\n    $visited = array_fill(0, 1001, false);\n\n    // Directions for movement (up, down, left, right)\n    $dx = [0, 1, -1, 0, 0];\n    $dy = [0, 0, 0, 1, -1];\n\n    // Inner function to perform DFS\n    $dfs = function($x, $y, $count) use (&$visited, &$maxCount, &$dfs, $matrix, $rows, $cols, $dx, $dy) {\n        $maxCount = max($maxCount, $count);\n        for ($i = 1; $i <= 4; $i++) {\n            $tx = $x + $dx[$i];\n            $ty = $y + $dy[$i];\n\n            // Check boundaries and if the cell is not visited\n            if ($tx > 0 && $tx <= $rows && $ty > 0 && $ty <= $cols && !$visited[ord($matrix[$tx - 1][$ty - 1])]) {\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = true;\n                $dfs($tx, $ty, $count + 1);\n                $visited[ord($matrix[$tx - 1][$ty - 1])] = false;\n            }\n        }\n    };\n\n    // Start DFS from the top-left corner\n    $visited[ord($matrix[0][0])] = true;\n    $dfs(1, 1, 1);\n\n    return $maxCount;\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9315990460956828",
      "bn": "0.8753683742677543",
      "bg": "0.9000926923166909",
      "zh": "0.8880807186539871",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9036219569269188",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    $matrix = [\n        ['H', 'F', 'D', 'F', 'F', 'B'],\n        ['A', 'J', 'H', 'G', 'D', 'H'],\n        ['D', 'G', 'A', 'G', 'E', 'H']\n    ];\n    assert(maxDistinctLetters(3, 6, $matrix) === 6);\n  \n    $matrix = [\n        ['H', 'F', 'Y' ],\n        ['A', 'J', 'Z' ],\n        ['D', 'G', 'A']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 8);\n\n    $matrix = [\n        ['A', 'D', 'G' ],\n        ['B', 'E', 'H' ],\n        ['C', 'F', 'I']\n    ];\n    assert(maxDistinctLetters(3, 3, $matrix) === 9);\n\n}\n\n\nmain();\n?>",
    "entry_point": "maxDistinctLetters",
    "signature": "function maxDistinctLetters($rows, $cols, $matrix)",
    "docstring": {
      "en": "Calculates the maximum number of distinct letters one can pass through in a letter matrix.\nStarting from the top-left corner, you can move up, down, left, or right, but cannot visit a cell more than once.\nThis function finds the maximum number of distinct letters that can be traversed in the matrix.\n\nInputs:\n- $rows (int): The number of rows in the matrix.\n- $cols (int): The number of columns in the matrix.\n- $matrix (array): A 2D array representing the letter matrix.\n\nOutput:\n- Returns an integer representing the maximum number of distinct letters that can be traversed.\n\nExample:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) should return 9.",
      "sq": "Llogarit numrin maksimal të shkronjave të ndryshme që mund të kalohen në një matricë shkronjash. Duke filluar nga këndi i sipërm i majtë, mund të lëvizni lart, poshtë, majtas ose djathtas, por nuk mund të vizitoni një qelizë më shumë se një herë. Kjo funksion gjen numrin maksimal të shkronjave të ndryshme që mund të kalohen në matricë.\n\nHyrjet:\n- $rows (int): Numri i rreshtave në matricë.\n- $cols (int): Numri i kolonave në matricë.\n- $matrix (array): Një varg 2D që përfaqëson matricën e shkronjave.\n\nDalja:\n- Kthen një numër të plotë që përfaqëson numrin maksimal të shkronjave të ndryshme që mund të kalohen.\n\nShembull:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) duhet të kthejë 9.",
      "hy": "Հաշվում է առավելագույն տարբերակիչ տառերի քանակը, որոնք կարելի է անցնել տառերի մատրիցում:\nՍկսելով վերևի ձախ անկյունից, դուք կարող եք շարժվել վեր, վար, ձախ կամ աջ, բայց չեք կարող այցելել նույն բջիջը մեկից ավելի անգամ:\nԱյս ֆունկցիան գտնում է մատրիցում անցնելիք առավելագույն տարբերակիչ տառերի քանակը:\n\nՄուտքեր:\n- $rows (int): Մատրիցի տողերի քանակը:\n- $cols (int): Մատրիցի սյուների քանակը:\n- $matrix (array): Երկչափ զանգված, որը ներկայացնում է տառերի մատրիցը:\n\nԵլք:\n- Վերադարձնում է ամբողջ թիվ, որը ներկայացնում է անցնելիք առավելագույն տարբերակիչ տառերի քանակը:\n\nՕրինակ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) պետք է վերադարձնի 9:",
      "bn": "বর্ণ ম্যাট্রিক্সের মাধ্যমে আপনি যতগুলি ভিন্ন বর্ণ অতিক্রম করতে পারেন তার সর্বাধিক সংখ্যা গণনা করে। উপরের-বাম কোণ থেকে শুরু করে, আপনি উপরে, নিচে, বাম বা ডানে যেতে পারেন, কিন্তু একটি কোষে একাধিকবার যেতে পারবেন না। এই ফাংশনটি ম্যাট্রিক্সে অতিক্রম করা যায় এমন ভিন্ন বর্ণের সর্বাধিক সংখ্যা খুঁজে বের করে।\n\nইনপুটসমূহ:\n- $rows (int): ম্যাট্রিক্সের সারির সংখ্যা।\n- $cols (int): ম্যাট্রিক্সের কলামের সংখ্যা।\n- $matrix (array): বর্ণ ম্যাট্রিক্সকে উপস্থাপনকারী একটি 2D অ্যারে।\n\nআউটপুট:\n- একটি পূর্ণসংখ্যা ফেরত দেয় যা অতিক্রম করা যায় এমন ভিন্ন বর্ণের সর্বাধিক সংখ্যা উপস্থাপন করে।\n\nউদাহরণ:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 9 ফেরত দেবে।",
      "bg": "Изчислява максималния брой различни букви, през които може да се премине в матрица от букви. Започвайки от горния ляв ъгъл, можете да се движите нагоре, надолу, наляво или надясно, но не можете да посетите клетка повече от веднъж. Тази функция намира максималния брой различни букви, които могат да бъдат обходени в матрицата.\n\nВходове:\n- $rows (int): Броят на редовете в матрицата.\n- $cols (int): Броят на колоните в матрицата.\n- $matrix (array): Двуизмерен масив, представляващ матрицата от букви.\n\nИзход:\n- Връща цяло число, представляващо максималния брой различни букви, които могат да бъдат обходени.\n\nПример:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) трябва да върне 9.",
      "zh": "计算在字母矩阵中可以经过的最大不同字母数。  \n从左上角开始，你可以向上、向下、向左或向右移动，但不能多次访问同一个单元格。  \n此函数找到在矩阵中可以遍历的最大不同字母数。  \n\n输入:  \n- $rows (int): 矩阵的行数。  \n- $cols (int): 矩阵的列数。  \n- $matrix (array): 表示字母矩阵的二维数组。  \n\n输出:  \n- 返回一个整数，表示可以遍历的最大不同字母数。  \n\n示例:  \nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) 应返回 9。",
      "fr": "Calcule le nombre maximum de lettres distinctes que l'on peut traverser dans une matrice de lettres. En partant du coin supérieur gauche, vous pouvez vous déplacer vers le haut, le bas, la gauche ou la droite, mais vous ne pouvez pas visiter une cellule plus d'une fois. Cette fonction trouve le nombre maximum de lettres distinctes qui peuvent être traversées dans la matrice.\n\nEntrées:\n- $rows (int): Le nombre de lignes dans la matrice.\n- $cols (int): Le nombre de colonnes dans la matrice.\n- $matrix (array): Un tableau 2D représentant la matrice de lettres.\n\nSortie:\n- Retourne un entier représentant le nombre maximum de lettres distinctes qui peuvent être traversées.\n\nExemple:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) devrait retourner 9.",
      "de": "Berechnet die maximale Anzahl an unterschiedlichen Buchstaben, die man in einer Buchstabenmatrix durchlaufen kann.\nAusgehend von der oberen linken Ecke kann man sich nach oben, unten, links oder rechts bewegen, aber nicht mehr als einmal ein Feld besuchen.\nDiese Funktion findet die maximale Anzahl an unterschiedlichen Buchstaben, die in der Matrix durchlaufen werden können.\n\nEingaben:\n- $rows (int): Die Anzahl der Zeilen in der Matrix.\n- $cols (int): Die Anzahl der Spalten in der Matrix.\n- $matrix (array): Ein 2D-Array, das die Buchstabenmatrix darstellt.\n\nAusgabe:\n- Gibt eine ganze Zahl zurück, die die maximale Anzahl an unterschiedlichen Buchstaben darstellt, die durchlaufen werden können.\n\nBeispiel:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) sollte 9 zurückgeben.",
      "ha": "Yana ƙididdige yawan haruffa daban-daban da za a iya wucewa ta cikin matrix ɗin haruffa.\nFarawa daga kusurwar sama-hagu, za ka iya motsawa sama, ƙasa, hagu, ko dama, amma ba za ka iya ziyartar kowane cell fiye da sau ɗaya ba.\nWannan aikin yana gano yawan haruffa daban-daban da za a iya bi ta cikin matrix ɗin.\n\nShigarwa:\n- $rows (int): Yawan layuka a cikin matrix ɗin.\n- $cols (int): Yawan ginshikai a cikin matrix ɗin.\n- $matrix (array): Tsarin 2D da ke wakiltar matrix ɗin haruffa.\n\nFitarwa:\n- Yana dawowa da lamba mai nuna yawan haruffa daban-daban da za a iya bi ta.\n\nMisali:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) ya kamata ya dawo da 9.",
      "hi": "गणना करता है कि अक्षर मैट्रिक्स में अधिकतम कितने भिन्न अक्षरों को पार किया जा सकता है।\nऊपरी-बाएँ कोने से शुरू करते हुए, आप ऊपर, नीचे, बाएँ या दाएँ जा सकते हैं, लेकिन किसी सेल पर एक से अधिक बार नहीं जा सकते।\nयह फ़ंक्शन मैट्रिक्स में पार किए जा सकने वाले भिन्न अक्षरों की अधिकतम संख्या का पता लगाता है।\n\nइनपुट:\n- $rows (int): मैट्रिक्स में पंक्तियों की संख्या।\n- $cols (int): मैट्रिक्स में स्तंभों की संख्या।\n- $matrix (array): अक्षर मैट्रिक्स का प्रतिनिधित्व करने वाली एक 2D सरणी।\n\nआउटपुट:\n- एक पूर्णांक लौटाता है जो पार किए जा सकने वाले भिन्न अक्षरों की अधिकतम संख्या का प्रतिनिधित्व करता है।\n\nउदाहरण:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) को 9 लौटाना चाहिए।",
      "hu": "Kiszámítja a maximálisan áthaladható különböző betűk számát egy betűmátrixban.\nA bal felső sarokból indulva felfelé, lefelé, balra vagy jobbra mozoghat, de egy cellát nem látogathat meg többször.\nEz a függvény megkeresi a mátrixban bejárható különböző betűk maximális számát.\n\nBemenetek:\n- $rows (int): A mátrix sorainak száma.\n- $cols (int): A mátrix oszlopainak száma.\n- $matrix (array): Egy 2D tömb, amely a betűmátrixot ábrázolja.\n\nKimenet:\n- Visszaad egy egész számot, amely a bejárható különböző betűk maximális számát jelenti.\n\nPélda:\nmaxDistinctLetters(3, 3, [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]) vissza kell adja a 9-et."
    },
    "docstring_bertscore": {
      "sq": "0.970109703001108",
      "hy": "0.970405860899231",
      "bn": "0.985037769287785",
      "bg": "0.973491583868608",
      "zh": "0.9693122020212529",
      "fr": "0.9763596079403707",
      "de": "0.9773511708024969",
      "ha": "0.9619676450521069",
      "hi": "0.986313373594791",
      "hu": "0.9873974982144794"
    }
  },
  {
    "task_id": "PHP/41",
    "prompt": {
      "en": "<?php\n\n/**\n * Counts the number of evenly matched pairs of students based on their exam scores.\n * Two students are considered evenly matched if the difference in each subject's score\n * is not greater than 5 and the total score difference is not greater than 10.\n * Input: An integer N representing the number of students followed by N lines of three integers each\n *         representing the scores of each student in Chinese, Mathematics, and English respectively.\n * Output: An integer representing the number of evenly matched pairs of students.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "sq": "<?php\n\n/**\n * Numëron numrin e çifteve të studentëve që janë të barabartë bazuar në rezultatet e tyre të provimeve.\n * Dy studentë konsiderohen të barabartë nëse diferenca në rezultatin e secilit lëndë\n * nuk është më e madhe se 5 dhe diferenca totale e rezultateve nuk është më e madhe se 10.\n * Hyrja: Një numër i plotë N që përfaqëson numrin e studentëve, ndjekur nga N rreshta me nga tre numra të plotë secili\n *         që përfaqësojnë rezultatet e secilit student në Kinezisht, Matematikë dhe Anglisht respektivisht.\n * Dalja: Një numër i plotë që përfaqëson numrin e çifteve të studentëve që janë të barabartë.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hy": "<?php\n\n/**\n * Հաշվում է հավասարապես համընկնող ուսանողների զույգերի քանակը՝ հիմնված նրանց քննության գնահատականների վրա:\n * Երկու ուսանող համարվում են հավասարապես համընկնող, եթե յուրաքանչյուր առարկայի գնահատականների տարբերությունը\n * չի գերազանցում 5-ը, և ընդհանուր գնահատականների տարբերությունը չի գերազանցում 10-ը:\n * Մուտք: Ամբողջ թիվ N, որը ներկայացնում է ուսանողների քանակը, որին հետևում են N տողեր՝ յուրաքանչյուրը երեք ամբողջ թվերով,\n *         որոնք ներկայացնում են յուրաքանչյուր ուսանողի գնահատականները չինարենում, մաթեմատիկայում և անգլերենում համապատասխանաբար:\n * Ելք: Ամբողջ թիվ, որը ներկայացնում է հավասարապես համընկնող ուսանողների զույգերի քանակը:\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "bn": "<?php\n\n/**\n * শিক্ষার্থীদের পরীক্ষার স্কোরের ভিত্তিতে সমানভাবে মেলানো জোড়ার সংখ্যা গণনা করে।\n * দুটি শিক্ষার্থীকে সমানভাবে মেলানো বিবেচনা করা হয় যদি প্রতিটি বিষয়ের স্কোরের পার্থক্য\n * ৫ এর বেশি না হয় এবং মোট স্কোরের পার্থক্য ১০ এর বেশি না হয়।\n * ইনপুট: একটি পূর্ণসংখ্যা N যা শিক্ষার্থীদের সংখ্যা নির্দেশ করে, এর পরে N লাইন থাকে যেখানে প্রতিটি লাইনে তিনটি পূর্ণসংখ্যা থাকে\n *         যা প্রতিটি শিক্ষার্থীর চীনা, গণিত এবং ইংরেজি বিষয়ের স্কোর নির্দেশ করে।\n * আউটপুট: একটি পূর্ণসংখ্যা যা সমানভাবে মেলানো শিক্ষার্থীদের জোড়ার সংখ্যা নির্দেশ করে।\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "bg": "<?php\n\n/**\n * Брои броя на равномерно съвпадащите двойки ученици на базата на техните резултати от изпити.\n * Двама ученици се считат за равномерно съвпадащи, ако разликата в резултатите по всеки предмет\n * не е по-голяма от 5 и общата разлика в резултатите не е по-голяма от 10.\n * Вход: Цяло число N, представляващо броя на учениците, последвано от N реда с по три цели числа\n *         представляващи резултатите на всеки ученик по китайски, математика и английски съответно.\n * Изход: Цяло число, представляващо броя на равномерно съвпадащите двойки ученици.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "zh": "<?php\n\n/**\n * 计算根据考试成绩均匀匹配的学生对的数量。\n * 如果每个科目的分数差不大于5，并且总分差不大于10，则认为两名学生是均匀匹配的。\n * 输入：一个整数N，表示学生人数，接下来是N行，每行三个整数，分别表示每个学生的语文、数学和英语成绩。\n * 输出：一个整数，表示均匀匹配的学生对的数量。\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "fr": "<?php\n\n/**\n * Compte le nombre de paires d'élèves bien assorties en fonction de leurs scores aux examens.\n * Deux élèves sont considérés comme bien assortis si la différence de score dans chaque matière\n * n'est pas supérieure à 5 et si la différence de score totale n'est pas supérieure à 10.\n * Entrée : Un entier N représentant le nombre d'élèves suivi de N lignes de trois entiers chacun\n *          représentant les scores de chaque élève en Chinois, Mathématiques et Anglais respectivement.\n * Sortie : Un entier représentant le nombre de paires d'élèves bien assorties.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "de": "<?php\n\n/**\n * Zählt die Anzahl der gleichmäßig abgestimmten Paare von Schülern basierend auf ihren Prüfungsergebnissen.\n * Zwei Schüler gelten als gleichmäßig abgestimmt, wenn der Unterschied in den Ergebnissen jedes Fachs\n * nicht größer als 5 ist und der Gesamtergebnisunterschied nicht größer als 10 ist.\n * Eingabe: Eine ganze Zahl N, die die Anzahl der Schüler darstellt, gefolgt von N Zeilen mit jeweils drei ganzen Zahlen,\n *          die die Ergebnisse jedes Schülers in Chinesisch, Mathematik und Englisch darstellen.\n * Ausgabe: Eine ganze Zahl, die die Anzahl der gleichmäßig abgestimmten Paare von Schülern darstellt.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "ha": "<?php\n\n/**\n * Yana ƙidaya adadin ma'aurata na ɗalibai da suka yi daidai bisa ga maki na jarrabawa.\n * Ana ɗaukar ɗalibai biyu sun yi daidai idan bambancin maki a kowace darasi\n * bai fi 5 ba kuma bambancin jimlar maki bai fi 10 ba.\n * Shigarwa: Lamba N da ke wakiltar adadin ɗalibai sannan N layuka na lambobi uku kowanne\n *         suna wakiltar maki na kowanne ɗalibi a cikin Sinanci, Lissafi, da Ingilishi bi da bi.\n * Fitarwa: Lamba da ke wakiltar adadin ma'aurata na ɗalibai da suka yi daidai.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hi": "<?php\n\n/**\n * छात्रों की परीक्षा अंकों के आधार पर समान रूप से मेल खाने वाले जोड़ों की संख्या गिनता है।\n * दो छात्रों को समान रूप से मेल खाता हुआ माना जाता है यदि प्रत्येक विषय के अंक में अंतर\n * 5 से अधिक नहीं है और कुल अंक का अंतर 10 से अधिक नहीं है।\n * इनपुट: छात्रों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक N, जिसके बाद N पंक्तियाँ होती हैं, \n *         प्रत्येक में तीन पूर्णांक होते हैं जो क्रमशः चीनी, गणित और अंग्रेजी में प्रत्येक छात्र के अंक का प्रतिनिधित्व करते हैं।\n * आउटपुट: समान रूप से मेल खाने वाले छात्रों के जोड़ों की संख्या का प्रतिनिधित्व करने वाला एक पूर्णांक।\n */\n\nfunction countEvenlyMatchedPairs($N, $students) ",
      "hu": "<?php\n\n/**\n * Megszámolja a diákok között az egyenlően párosított párok számát a vizsgaeredményeik alapján.\n * Két diák akkor tekinthető egyenlően párosítottnak, ha az egyes tantárgyak eredményeinek különbsége\n * nem nagyobb, mint 5, és az összesített eredménykülönbség nem nagyobb, mint 10.\n * Bemenet: Egy egész szám N, amely a diákok számát jelenti, majd N sor, amely három egész számot tartalmaz,\n *          amelyek a diákok eredményeit jelölik kínai, matematika és angol tantárgyakból.\n * Kimenet: Egy egész szám, amely az egyenlően párosított diákpárok számát jelenti.\n */\n\nfunction countEvenlyMatchedPairs($N, $students) "
    },
    "prompt_bertscore": {
      "sq": "0.9531085314275698",
      "hy": "0.9674462682218111",
      "bn": "0.9582921884814373",
      "bg": "0.9807523188169572",
      "zh": "0.940726310734617",
      "fr": "0.9717140405887268",
      "de": "0.9776000546699336",
      "ha": "0.9382223761512911",
      "hi": "0.9602518758207275",
      "hu": "0.9347554814807082"
    },
    "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}",
    "instruction": {
      "en": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրումը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nনিচের PHP কোডের একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\n请用中文为以下PHP代码提供简洁的自然语言描述（文档字符串），限制在500个字符以内。",
      "fr": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nBa da takaitaccen bayanin yanayi (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function countEvenlyMatchedPairs($N, $students)\n{\n    $count = 0;\n    for ($i = 0; $i < $N - 1; $i++) {\n        for ($j = $i + 1; $j < $N; $j++) {\n            $diff = abs($students[$i][0] - $students[$j][0]) <= 5 &&\n                    abs($students[$i][1] - $students[$j][1]) <= 5 &&\n                    abs($students[$i][2] - $students[$j][2]) <= 5 &&\n                    abs(array_sum($students[$i]) - array_sum($students[$j])) <= 10;\n            if ($diff) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9361854215937784",
      "hy": "0.9315990460956828",
      "bn": "0.8680359337518513",
      "bg": "0.9000926923166909",
      "zh": "0.8871533134049352",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.8913177979737127",
      "hi": "0.9122290085979226",
      "hu": "0.9434048414228724"
    },
    "level": "",
    "test": "function main(){\n    assert(countEvenlyMatchedPairs(3, [[90, 90, 90], [85, 95, 90], [80, 100, 91]]) === 2);\n    assert(countEvenlyMatchedPairs(3, [[100, 100, 100], [85, 95, 90], [80, 100, 91]]) === 1);\n    assert(countEvenlyMatchedPairs(4, [[100, 100, 100],[100, 100, 100],[100, 100, 100],[100, 100, 100]]) === 6);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countEvenlyMatchedPairs",
    "signature": "function countEvenlyMatchedPairs($N, $students)",
    "docstring": {
      "en": "Counts the number of evenly matched pairs of students based on their exam scores.\n  Two students are considered evenly matched if the difference in each subject's score\n  is not greater than 5 and the total score difference is not greater than 10.\n  Input: An integer N representing the number of students followed by N lines of three integers each\n          representing the scores of each student in Chinese, Mathematics, and English respectively.\n  Output: An integer representing the number of evenly matched pairs of students.",
      "sq": "Llogarit numrin e çifteve të studentëve të përputhur në mënyrë të barabartë bazuar në rezultatet e tyre të provimeve.\n  Dy studentë konsiderohen të përputhur në mënyrë të barabartë nëse diferenca në rezultatin e secilit lëndë\n  nuk është më e madhe se 5 dhe diferenca totale e rezultateve nuk është më e madhe se 10.\n  Hyrja: Një numër i plotë N që përfaqëson numrin e studentëve i ndjekur nga N rreshta me nga tre numra të plotë secili\n          që përfaqësojnë rezultatet e secilit student në Kinezisht, Matematikë dhe Anglisht përkatësisht.\n  Dalja: Një numër i plotë që përfaqëson numrin e çifteve të studentëve të përputhur në mënyrë të barabartë.",
      "hy": "Հաշվում է ուսանողների զույգերի քանակը, որոնք հավասարաչափ համընկնում են իրենց քննությունների գնահատականների հիման վրա։\n  Երկու ուսանողներ համարվում են հավասարաչափ համընկնող, եթե յուրաքանչյուր առարկայի գնահատականների տարբերությունը\n  չի գերազանցում 5-ը և ընդհանուր գնահատականների տարբերությունը չի գերազանցում 10-ը։\n  Մուտք: Ամբողջ թիվ N, որը ներկայացնում է ուսանողների քանակը, որին հաջորդում է N տող, որոնցից յուրաքանչյուրը պարունակում է երեք ամբողջ թիվ՝\n          ներկայացնելով յուրաքանչյուր ուսանողի գնահատականները չինարենում, մաթեմատիկայում և անգլերենում համապատասխանաբար։\n  Ելք: Ամբողջ թիվ, որը ներկայացնում է հավասարաչափ համընկնող ուսանողների զույգերի քանակը։",
      "bn": "ছাত্রদের পরীক্ষার স্কোরের ভিত্তিতে সমানভাবে মেলানো জোড়ার সংখ্যা গণনা করে।\n  দুইজন ছাত্রকে সমানভাবে মিলিত বলে বিবেচনা করা হয় যদি প্রতিটি বিষয়ের স্কোরের পার্থক্য 5 এর বেশি না হয় এবং মোট স্কোরের পার্থক্য 10 এর বেশি না হয়।\n  Input: একটি পূর্ণসংখ্যা N যা ছাত্রদের সংখ্যা নির্দেশ করে, এর পরে N লাইন থাকে যেখানে প্রতিটি লাইনে তিনটি পূর্ণসংখ্যা থাকে যা প্রতিটি ছাত্রের চীনা, গণিত এবং ইংরেজি বিষয়ে স্কোর নির্দেশ করে।\n  Output: একটি পূর্ণসংখ্যা যা সমানভাবে মিলিত ছাত্রদের জোড়ার সংখ্যা নির্দেশ করে।",
      "bg": "Брои броя на равномерно съвпадащите двойки ученици въз основа на техните резултати от изпитите.\n  Двама ученици се считат за равномерно съвпадащи, ако разликата в резултатите по всеки предмет\n  не е по-голяма от 5 и разликата в общия резултат не е по-голяма от 10.\n  Вход: Цяло число N, представляващо броя на учениците, последвано от N реда с по три цели числа,\n          представляващи резултатите на всеки ученик по китайски, математика и английски съответно.\n  Изход: Цяло число, представляващо броя на равномерно съвпадащите двойки ученици.",
      "zh": "计算根据考试成绩匹配的学生对数。\n  如果每个科目的分数差不大于5，并且总分差不大于10，则认为两名学生匹配。\n  输入：一个整数N，表示学生人数，接下来是N行，每行有三个整数，分别代表每个学生的语文、数学和英语成绩。\n  输出：一个整数，表示匹配的学生对数。",
      "fr": "Compte le nombre de paires d'étudiants équitablement assorties en fonction de leurs scores d'examen.\n  Deux étudiants sont considérés comme équitablement assortis si la différence de score dans chaque matière\n  n'est pas supérieure à 5 et si la différence de score totale n'est pas supérieure à 10.\n  Entrée : Un entier N représentant le nombre d'étudiants suivi de N lignes de trois entiers chacun\n          représentant les scores de chaque étudiant en Chinois, Mathématiques et Anglais respectivement.\n  Sortie : Un entier représentant le nombre de paires d'étudiants équitablement assorties.",
      "de": "Zählt die Anzahl der gleichmäßig abgestimmten Paare von Schülern basierend auf ihren Prüfungsergebnissen. \nZwei Schüler gelten als gleichmäßig abgestimmt, wenn der Unterschied in jedem Fach nicht größer als 5 ist und der Gesamtnotenunterschied nicht größer als 10 ist. \nEingabe: Eine ganze Zahl N, die die Anzahl der Schüler darstellt, gefolgt von N Zeilen mit jeweils drei ganzen Zahlen, die die Noten jedes Schülers in Chinesisch, Mathematik und Englisch darstellen. \nAusgabe: Eine ganze Zahl, die die Anzahl der gleichmäßig abgestimmten Paare von Schülern darstellt.",
      "ha": "Yana ƙididdige adadin ma'aurata da suka dace da juna na ɗalibai bisa ga maki na jarrabawarsu.\n  Ana ɗaukar dalibai biyu a matsayin waɗanda suka yi daidai idan bambancin maki a kowace darasi\n  ba ya fi 5 ba kuma bambancin jimillar maki ba ya fi 10 ba.\n  Input: Wani lamba N da ke wakiltar adadin dalibai tare da N layuka na lambobi uku kowanne\n          suna wakiltar maki na kowanne dalibi a cikin Sinanci, Lissafi, da Turanci bi da bi.\n  Output: Wani lamba da ke wakiltar adadin ma'aurata na dalibai waɗanda suka yi daidai.",
      "hi": "छात्रों के परीक्षा अंकों के आधार पर समान रूप से मेल खाने वाले जोड़ों की संख्या गिनता है।\n  दो छात्रों को समान रूप से मेल खाता हुआ माना जाता है यदि प्रत्येक विषय के स्कोर में अंतर 5 से अधिक नहीं है और कुल स्कोर अंतर 10 से अधिक नहीं है।\n  Input: एक पूर्णांक N जो छात्रों की संख्या का प्रतिनिधित्व करता है, इसके बाद N पंक्तियाँ जिनमें प्रत्येक में तीन पूर्णांक होते हैं जो क्रमशः चीनी, गणित, और अंग्रेजी में प्रत्येक छात्र के स्कोर का प्रतिनिधित्व करते हैं।\n  Output: एक पूर्णांक जो समान रूप से मेल खाने वाले छात्रों की जोड़ी की संख्या का प्रतिनिधित्व करता है।",
      "hu": "Számolja meg a diákok között az egyenlően illeszkedő párok számát a vizsgaeredményeik alapján.\n  Két diák akkor tekinthető egyenlően illeszkedőnek, ha az egyes tantárgyak eredményeinek különbsége nem nagyobb, mint 5, és a teljes pontszám különbsége nem nagyobb, mint 10.\n  Bemenet: Egy egész szám N, amely a diákok számát jelöli, majd N sor, amelyek mindegyike három egész számot tartalmaz, amelyek a diákok kínai, matematika és angol eredményeit képviselik.\n  Kimenet: Egy egész szám, amely az egyenlően illeszkedő diákpárok számát jelöli."
    },
    "docstring_bertscore": {
      "sq": "0.9284314874093195",
      "hy": "0.9298252767930413",
      "bn": "0.945514693330225",
      "bg": "0.9359889761469349",
      "zh": "0.9044311770992549",
      "fr": "0.9717072871557716",
      "de": "0.9258914020966453",
      "ha": "0.9060273708412513",
      "hi": "0.9701591619659856",
      "hu": "0.9017679409503392"
    }
  },
  {
    "task_id": "PHP/42",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the total number of cigarettes Peter can smoke.\n * Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n * This process repeats until he can no longer exchange butts for new cigarettes.\n *\n * Parameters:\n * - $initialCigarettes (int): The initial number of cigarettes Peter has.\n * - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n *\n * Returns:\n * int: The total number of cigarettes Peter can smoke.\n *\n * Example:\n * - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n * - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin total të cigareve që Peter mund të pijë.\n * Peter fillon me një numër të caktuar cigaresh dhe mund të shkëmbejë një numër të caktuar bishtash cigaresh për një cigare të re.\n * Ky proces përsëritet derisa ai të mos mund të shkëmbejë më bishta për cigare të reja.\n *\n * Parametrat:\n * - $initialCigarettes (int): Numri fillestar i cigareve që Peter ka.\n * - $buttsRequiredForNew (int): Numri i bishtave të cigareve të nevojshme për të shkëmbyer për një cigare të re.\n *\n * Kthen:\n * int: Numri total i cigareve që Peter mund të pijë.\n *\n * Shembull:\n * - Me 4 cigare fillestare dhe 3 bishta të nevojshme për një të re, Peter mund të pijë gjithsej 5 cigare.\n * - Me 10 cigare fillestare dhe 3 bishta të nevojshme për një të re, Peter mund të pijë gjithsej 14 cigare.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է ընդհանուր ծխախոտների քանակը, որ Պետերը կարող է ծխել:\n * Պետերը սկսում է որոշակի քանակի ծխախոտներով և կարող է փոխանակել որոշակի քանակի ծխախոտի մնացորդներ նոր ծխախոտի համար:\n * Այս գործընթացը կրկնվում է, մինչև նա այլևս չի կարող փոխանակել մնացորդները նոր ծխախոտների համար:\n *\n * Պարամետրեր:\n * - $initialCigarettes (int): Սկզբնական ծխախոտների քանակը, որ Պետերը ունի:\n * - $buttsRequiredForNew (int): Ծխախոտի մնացորդների քանակը, որը պահանջվում է նոր ծխախոտի փոխանակման համար:\n *\n * Վերադարձնում է:\n * int: Ընդհանուր ծխախոտների քանակը, որ Պետերը կարող է ծխել:\n *\n * Օրինակ:\n * - 4 սկզբնական ծխախոտներով և 3 մնացորդներով նորի համար, Պետերը կարող է ծխել 5 ծխախոտ ընդհանուր:\n * - 10 սկզբնական ծխախոտներով և 3 մնացորդներով նորի համար, Պետերը կարող է ծխել 14 ծխախոտ ընդհանուր:\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "bn": "<?php\n\n\n/**\n * পিটার মোট কতগুলো সিগারেট খেতে পারে তা গণনা করে।\n * পিটার একটি নির্দিষ্ট সংখ্যক সিগারেট দিয়ে শুরু করে এবং একটি নতুন সিগারেটের জন্য নির্দিষ্ট সংখ্যক সিগারেটের অবশিষ্টাংশ বিনিময় করতে পারে।\n * এই প্রক্রিয়া চলতে থাকে যতক্ষণ না সে আর অবশিষ্টাংশের জন্য নতুন সিগারেট বিনিময় করতে পারে।\n *\n * প্যারামিটার:\n * - $initialCigarettes (int): পিটারের কাছে প্রাথমিকভাবে থাকা সিগারেটের সংখ্যা।\n * - $buttsRequiredForNew (int): একটি নতুন সিগারেটের জন্য বিনিময় করতে প্রয়োজনীয় সিগারেটের অবশিষ্টাংশের সংখ্যা।\n *\n * রিটার্নস:\n * int: পিটার মোট কতগুলো সিগারেট খেতে পারে।\n *\n * উদাহরণ:\n * - 4 প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3 অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট 5 সিগারেট খেতে পারে।\n * - 10 প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3 অবশিষ্টাংশ প্রয়োজন হলে, পিটার মোট 14 সিগারেট খেতে পারে।\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява общия брой цигари, които Петър може да изпуши.\n * Петър започва с определен брой цигари и може да размени определен брой фасове за нова цигара.\n * Този процес се повтаря, докато той не може повече да разменя фасове за нови цигари.\n *\n * Параметри:\n * - $initialCigarettes (int): Началният брой цигари, които Петър има.\n * - $buttsRequiredForNew (int): Броят на фасовете, необходими за размяна за нова цигара.\n *\n * Връща:\n * int: Общият брой цигари, които Петър може да изпуши.\n *\n * Пример:\n * - С 4 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 5 цигари.\n * - С 10 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 14 цигари.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "zh": "<?php\n\n\n/**\n * 计算 Peter 可以抽的香烟总数。\n * Peter 从一定数量的香烟开始，并且可以用一定数量的烟头换取一支新香烟。\n * 这个过程重复进行，直到他不能再用烟头换取新香烟为止。\n *\n * 参数:\n * - $initialCigarettes (int): Peter 拥有的初始香烟数量。\n * - $buttsRequiredForNew (int): 换取一支新香烟所需的烟头数量。\n *\n * 返回:\n * int: Peter 可以抽的香烟总数。\n *\n * 示例:\n * - 拥有 4 支初始香烟并需要 3 个烟头换取一支新香烟，Peter 总共可以抽 5 支香烟。\n * - 拥有 10 支初始香烟并需要 3 个烟头换取一支新香烟，Peter 总共可以抽 14 支香烟。\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre total de cigarettes que Peter peut fumer.\n * Peter commence avec un certain nombre de cigarettes et peut échanger un nombre spécifique de mégots de cigarettes contre une nouvelle cigarette.\n * Ce processus se répète jusqu'à ce qu'il ne puisse plus échanger de mégots contre de nouvelles cigarettes.\n *\n * Paramètres :\n * - $initialCigarettes (int) : Le nombre initial de cigarettes que Peter a.\n * - $buttsRequiredForNew (int) : Le nombre de mégots de cigarettes requis pour échanger contre une nouvelle cigarette.\n *\n * Retourne :\n * int : Le nombre total de cigarettes que Peter peut fumer.\n *\n * Exemple :\n * - Avec 4 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 5 cigarettes au total.\n * - Avec 10 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 14 cigarettes au total.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n * Peter beginnt mit einer bestimmten Anzahl von Zigaretten und kann eine bestimmte Anzahl von Zigarettenstummeln gegen eine neue Zigarette eintauschen.\n * Dieser Vorgang wiederholt sich, bis er keine Stummel mehr gegen neue Zigaretten eintauschen kann.\n *\n * Parameter:\n * - $initialCigarettes (int): Die anfängliche Anzahl der Zigaretten, die Peter hat.\n * - $buttsRequiredForNew (int): Die Anzahl der Zigarettenstummel, die für den Tausch gegen eine neue Zigarette erforderlich sind.\n *\n * Rückgabewert:\n * int: Die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n *\n * Beispiel:\n * - Mit 4 anfänglichen Zigaretten und 3 erforderlichen Stummeln für eine neue kann Peter insgesamt 5 Zigaretten rauchen.\n * - Mit 10 anfänglichen Zigaretten und 3 erforderlichen Stummeln für eine neue kann Peter insgesamt 14 Zigaretten rauchen.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "ha": "<?php\n\n\n/**\n * Lissafa jimillar adadin sigari da Peter zai iya sha.\n * Peter yana farawa da wani adadin sigari kuma zai iya musanya adadin guntun sigari don sabon sigari.\n * Wannan tsari yana maimaitawa har sai ba zai iya musanya guntun don sabbin sigari ba.\n *\n * Sigogi:\n * - $initialCigarettes (int): Adadin sigari na farko da Peter ke da shi.\n * - $buttsRequiredForNew (int): Adadin guntun sigari da ake bukata don musanya don sabon sigari.\n *\n * Komawa:\n * int: Jimillar adadin sigari da Peter zai iya sha.\n *\n * Misali:\n * - Tare da sigari 4 na farko da guntun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 5 a jimilla.\n * - Tare da sigari 10 na farko da guntun 3 da ake bukata don sabon daya, Peter zai iya sha sigari 14 a jimilla.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hi": "<?php\n\n\n/**\n * पीटर कितनी कुल सिगरेट पी सकता है, इसकी गणना करता है।\n * पीटर एक निश्चित संख्या में सिगरेट से शुरू करता है और एक नई सिगरेट के लिए एक निश्चित संख्या में सिगरेट के बट्स का आदान-प्रदान कर सकता है।\n * यह प्रक्रिया तब तक दोहराई जाती है जब तक वह नई सिगरेट के लिए बट्स का आदान-प्रदान नहीं कर सकता।\n *\n * पैरामीटर्स:\n * - $initialCigarettes (int): प्रारंभिक संख्या सिगरेट जो पीटर के पास है।\n * - $buttsRequiredForNew (int): एक नई सिगरेट के लिए आदान-प्रदान करने के लिए आवश्यक सिगरेट बट्स की संख्या।\n *\n * रिटर्न करता है:\n * int: कुल संख्या सिगरेट जो पीटर पी सकता है।\n *\n * उदाहरण:\n * - 4 प्रारंभिक सिगरेट और एक नई के लिए 3 बट्स की आवश्यकता के साथ, पीटर कुल 5 सिगरेट पी सकता है।\n * - 10 प्रारंभिक सिगरेट और एक नई के लिए 3 बट्स की आवश्यकता के साथ, पीटर कुल 14 सिगरेट पी सकता है।\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a cigaretták teljes számát, amit Péter elszívhat.\n * Péter egy bizonyos számú cigarettával kezd, és egy új cigarettáért egy meghatározott számú csikket tud cserélni.\n * Ez a folyamat addig ismétlődik, amíg már nem tud több csikket új cigarettára cserélni.\n *\n * Paraméterek:\n * - $initialCigarettes (int): A kezdeti cigaretták száma, amivel Péter rendelkezik.\n * - $buttsRequiredForNew (int): Az új cigarettáért cserélendő csikkek száma.\n *\n * Visszatérési érték:\n * int: A cigaretták teljes száma, amit Péter elszívhat.\n *\n * Példa:\n * - 4 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 5 cigarettát tud elszívni.\n * - 10 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 14 cigarettát tud elszívni.\n */\nfunction calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int "
    },
    "prompt_bertscore": {
      "sq": "0.9830743079712551",
      "hy": "0.9801077632304991",
      "bn": "0.9852604339449251",
      "bg": "0.9867463878254471",
      "zh": "0.9681611389631557",
      "fr": "0.9918045104785005",
      "de": "0.9878263412071338",
      "ha": "0.9940079172953206",
      "hi": "0.9769554990834753",
      "hu": "0.98448021380822"
    },
    "canonical_solution": "{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}",
    "instruction": {
      "en": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nՏվեք PHP կոդի համառոտ բնութագիրը (docstring) հայերեն՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, като използвате не повече от 500 знака.",
      "zh": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\n请为以下 PHP 代码提供一个简洁的自然语言描述（文档字符串），使用中文且不超过500个字符。",
      "fr": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nBa da takaitaccen bayanin yaren halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kawai.",
      "hi": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int\n{\n    $totalSmoked = $initialCigarettes;\n    $currentButts = $initialCigarettes;\n    \n    while ($currentButts >= $buttsRequiredForNew) {\n        $newCigarettes = intdiv($currentButts, $buttsRequiredForNew);\n        $totalSmoked += $newCigarettes;\n        $currentButts = ($currentButts % $buttsRequiredForNew) + $newCigarettes;\n    }\n    \n    return $totalSmoked;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9136390856728892",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.870943882530202",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9234037552045643",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateTotalCigarettes(4, 3) === 5, 'Test Case 1 Failed');\n    assert(calculateTotalCigarettes(10, 3) === 14, 'Test Case 2 Failed');\n    assert(calculateTotalCigarettes(1, 2) === 1, 'Test Case 3 Failed');\n    assert(calculateTotalCigarettes(20, 5) === 24, 'Test Case 4 Failed');\n    assert(calculateTotalCigarettes(0, 3) === 0, 'Test Case 5 Failed');\n}\n\n\nmain();\n?>",
    "entry_point": "calculateTotalCigarettes",
    "signature": "function calculateTotalCigarettes($initialCigarettes, $buttsRequiredForNew): int",
    "docstring": {
      "en": "Calculates the total number of cigarettes Peter can smoke.\n  Peter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.\n  This process repeats until he can no longer exchange butts for new cigarettes.\n \n  Parameters:\n  - $initialCigarettes (int): The initial number of cigarettes Peter has.\n  - $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.\n \n  Returns:\n  int: The total number of cigarettes Peter can smoke.\n \n  Example:\n  - With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.\n  - With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.",
      "sq": "Llogarit numrin total të cigareve që Peter mund të pijë.  \nPeter fillon me një numër të caktuar cigareve dhe mund të shkëmbejë një numër të caktuar bishtash cigareje për një cigare të re.  \nKy proces përsëritet derisa ai të mos mund të shkëmbejë më bishta për cigare të reja.\n\nParametrat:  \n- $initialCigarettes (int): Numri fillestar i cigareve që Peter ka.  \n- $buttsRequiredForNew (int): Numri i bishtave të cigareve të nevojshëm për të shkëmbyer për një cigare të re.\n\nKthen:  \nint: Numri total i cigareve që Peter mund të pijë.\n\nShembull:  \n- Me 4 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë 5 cigare gjithsej.  \n- Me 10 cigare fillestare dhe 3 bishta të nevojshëm për një të re, Peter mund të pijë 14 cigare gjithsej.",
      "hy": "Հաշվում է ընդհանուր ծխախոտների քանակը, որոնք Պետրոսը կարող է ծխել։  \nՊետրոսը սկսում է որոշակի քանակի ծխախոտներով և կարող է փոխանակել որոշակի քանակի ծխախոտի մնացորդներ նոր ծխախոտի համար։  \nԱյս գործընթացը կրկնվում է, մինչև նա այլևս չի կարող փոխանակել մնացորդները նոր ծխախոտների համար։\n\nՊարամետրեր:  \n- $initialCigarettes (int): Սկզբնական ծխախոտների քանակը, որ Պետրոսը ունի։  \n- $buttsRequiredForNew (int): Ծխախոտի մնացորդների քանակը, որը պահանջվում է նոր ծխախոտի փոխանակման համար։\n\nՎերադարձնում է:  \nint: Ընդհանուր ծխախոտների քանակը, որոնք Պետրոսը կարող է ծխել։\n\nՕրինակ:  \n- 4 սկզբնական ծխախոտներով և 3 մնացորդներով, որոնք պահանջվում են նորի համար, Պետրոսը կարող է ծխել 5 ծխախոտ ընդհանուր։  \n- 10 սկզբնական ծխախոտներով և 3 մնացորդներով, որոնք պահանջվում են նորի համար, Պետրոսը կարող է ծխել 14 ծխախոտ ընդհանուր։",
      "bn": "পিটার মোট কতগুলো সিগারেট খেতে পারে তা গণনা করে।\n  পিটার একটি নির্দিষ্ট সংখ্যক সিগারেট দিয়ে শুরু করে এবং একটি নতুন সিগারেটের জন্য একটি নির্দিষ্ট সংখ্যক সিগারেটের ফিল্টার বিনিময় করতে পারে।\n  এই প্রক্রিয়াটি পুনরাবৃত্তি হয় যতক্ষণ না সে নতুন সিগারেটের জন্য ফিল্টার বিনিময় করতে পারে না।\n\n  Parameters:\n  - $initialCigarettes (int): পিটারের কাছে প্রাথমিক সিগারেটের সংখ্যা।\n  - $buttsRequiredForNew (int): একটি নতুন সিগারেটের জন্য বিনিময় করতে প্রয়োজনীয় সিগারেট ফিল্টারের সংখ্যা।\n\n  Returns:\n  int: পিটার মোট কতগুলো সিগারেট খেতে পারে।\n\n  Example:\n  - 4টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3টি ফিল্টার প্রয়োজন হলে, পিটার মোট 5টি সিগারেট খেতে পারে।\n  - 10টি প্রাথমিক সিগারেট এবং একটি নতুন সিগারেটের জন্য 3টি ফিল্টার প্রয়োজন হলে, পিটার মোট 14টি সিগারেট খেতে পারে।",
      "bg": "Изчислява общия брой цигари, които Петър може да изпуши. Петър започва с определен брой цигари и може да обменя определен брой фасове за нова цигара. Този процес се повтаря, докато той вече не може да обменя фасове за нови цигари.\n\nПараметри:\n- $initialCigarettes (int): Началният брой цигари, които Петър има.\n- $buttsRequiredForNew (int): Броят на фасовете, необходими за обмен за нова цигара.\n\nВръща:\nint: Общият брой цигари, които Петър може да изпуши.\n\nПример:\n- С 4 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 5 цигари.\n- С 10 начални цигари и 3 фасове, необходими за нова, Петър може да изпуши общо 14 цигари.",
      "zh": "计算彼得可以抽的香烟总数。\n彼得从一定数量的香烟开始，并且可以用一定数量的烟头换取一支新香烟。\n这个过程重复进行，直到他无法再用烟头换取新香烟为止。\n\n参数：\n- $initialCigarettes (int): 彼得最初拥有的香烟数量。\n- $buttsRequiredForNew (int): 需要多少个烟头才能换取一支新香烟。\n\n返回：\nint: 彼得可以抽的香烟总数。\n\n示例：\n- 如果最初有4支香烟，并且需要3个烟头换取一支新香烟，彼得总共可以抽5支香烟。\n- 如果最初有10支香烟，并且需要3个烟头换取一支新香烟，彼得总共可以抽14支香烟。",
      "fr": "Calcule le nombre total de cigarettes que Peter peut fumer.  \nPeter commence avec un certain nombre de cigarettes et peut échanger un nombre spécifique de mégots de cigarettes contre une nouvelle cigarette.  \nCe processus se répète jusqu'à ce qu'il ne puisse plus échanger de mégots contre de nouvelles cigarettes.  \n\nParamètres:  \n- $initialCigarettes (int): Le nombre initial de cigarettes que Peter a.  \n- $buttsRequiredForNew (int): Le nombre de mégots de cigarettes requis pour échanger contre une nouvelle cigarette.  \n\nRenvoie:  \nint: Le nombre total de cigarettes que Peter peut fumer.  \n\nExemple:  \n- Avec 4 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 5 cigarettes au total.  \n- Avec 10 cigarettes initiales et 3 mégots requis pour une nouvelle, Peter peut fumer 14 cigarettes au total.  ",
      "de": "Berechnet die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n  Peter beginnt mit einer bestimmten Anzahl von Zigaretten und kann eine bestimmte Anzahl von Zigarettenstummeln gegen eine neue Zigarette eintauschen.\n  Dieser Vorgang wiederholt sich, bis er keine Stummel mehr gegen neue Zigaretten eintauschen kann.\n \n  Parameter:\n  - $initialCigarettes (int): Die anfängliche Anzahl der Zigaretten, die Peter hat.\n  - $buttsRequiredForNew (int): Die Anzahl der Zigarettenstummel, die benötigt werden, um sie gegen eine neue Zigarette einzutauschen.\n \n  Rückgabewert:\n  int: Die Gesamtanzahl der Zigaretten, die Peter rauchen kann.\n \n  Beispiel:\n  - Mit 4 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 5 Zigaretten rauchen.\n  - Mit 10 anfänglichen Zigaretten und 3 benötigten Stummeln für eine neue kann Peter insgesamt 14 Zigaretten rauchen.",
      "ha": "Lissafa jimillar adadin sigari da Peter zai iya sha.\nPeter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.  \nWannan tsari yana maimaitawa har sai ba zai iya musanya butts don sabbin sigari ba.  \n\nParameters:  \n- $initialCigarettes (int): Adadin sigari na farko da Peter ke da shi.  \n- $buttsRequiredForNew (int): Yawan butts na sigari da ake bukata don musanya da sabon sigari.  \n\nReturns:  \nint: Jimillar adadin sigari da Peter zai iya sha.  \n\nExample:  \n- Tare da sigari 4 na farko da butts 3 da ake bukata don sabon daya, Peter zai iya sha sigari 5 a jimla.  \n- Tare da sigari 10 na farko da butts 3 da ake bukata don sabon daya, Peter zai iya sha sigari 14 a jimla.  ",
      "hi": "पीटर कितनी कुल सिगरेट पी सकता है, इसकी गणना करता है।\nपीटर कितनी कुल सिगरेट पी सकता है, यह गणना करता है।  \nPeter starts with a certain number of cigarettes and can exchange a specific number of cigarette butts for a new cigarette.  \nपीटर एक निश्चित संख्या में सिगरेट से शुरू करता है और एक नई सिगरेट के लिए एक विशिष्ट संख्या में सिगरेट के टुकड़े बदल सकता है।  \nThis process repeats until he can no longer exchange butts for new cigarettes.  \nयह प्रक्रिया तब तक दोहराई जाती है जब तक वह टुकड़ों को नई सिगरेट के लिए बदल नहीं सकता।  \n\nParameters:  \n- $initialCigarettes (int): The initial number of cigarettes Peter has.  \n  - $initialCigarettes (int): प्रारंभिक सिगरेट की संख्या जो पीटर के पास है।  \n- $buttsRequiredForNew (int): The number of cigarette butts required to exchange for a new cigarette.  \n  - $buttsRequiredForNew (int): एक नई सिगरेट के लिए बदलने के लिए आवश्यक सिगरेट टुकड़ों की संख्या।  \n\nReturns:  \nint: The total number of cigarettes Peter can smoke.  \nint: कुल सिगरेट की संख्या जो पीटर पी सकता है।  \n\nExample:  \n- With 4 initial cigarettes and 3 butts required for a new one, Peter can smoke 5 cigarettes in total.  \n  - 4 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़ों की आवश्यकता के साथ, पीटर कुल 5 सिगरेट पी सकता है।  \n- With 10 initial cigarettes and 3 butts required for a new one, Peter can smoke 14 cigarettes in total.  \n  - 10 प्रारंभिक सिगरेट और एक नई के लिए 3 टुकड़ों की आवश्यकता के साथ, पीटर कुल 14 सिगरेट पी सकता है।  ",
      "hu": "Kiszámítja, hogy összesen hány cigarettát tud elszívni Péter.\n  Péter egy bizonyos számú cigarettával kezd, és egy új cigarettáért egy meghatározott számú cigarettacsikket tud cserélni.\n  Ez a folyamat addig ismétlődik, amíg már nem tud több csikket új cigarettára cserélni.\n\n  Paraméterek:\n  - $initialCigarettes (int): Az a kezdeti cigarettaszám, amivel Péter rendelkezik.\n  - $buttsRequiredForNew (int): Az új cigarettáért cserélendő cigarettacsikkek száma.\n\n  Visszatérési érték:\n  int: Az összes cigarettaszám, amit Péter el tud szívni.\n\n  Példa:\n  - 4 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 5 cigarettát tud elszívni.\n  - 10 kezdeti cigarettával és 3 csikk szükséges egy újhoz, Péter összesen 14 cigarettát tud elszívni."
    },
    "docstring_bertscore": {
      "sq": "0.9759420868794354",
      "hy": "0.9705008062213657",
      "bn": "0.9668132331974529",
      "bg": "0.9818640530596096",
      "zh": "0.9590847237017665",
      "fr": "0.9976990656660919",
      "de": "0.9847251250680361",
      "ha": "0.9719666984334031",
      "hi": "0.9812337988605858",
      "hu": "0.9831285340652777"
    }
  },
  {
    "task_id": "PHP/43",
    "prompt": {
      "en": "<?php\n\n/**\n * Finds the length of the longest sequence of consecutive numbers in an array.\n * Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n * For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n * Input: An array of integers.\n * Output: The length of the longest sequence of consecutive numbers found in the array.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "sq": "<?php\n\n/**\n * Gjen gjatësinë e sekuencës më të gjatë të numrave të njëpasnjëshëm në një varg.\n * Numrat e njëpasnjëshëm janë numra që vijnë njëri pas tjetrit në sekuencë pa ndonjë hapësirë.\n * Për shembull, në vargun [1, 3, 5, 4, 2, 6], sekuenca më e gjatë e numrave të njëpasnjëshëm është [1, 2, 3, 4, 5, 6], e cila ka një gjatësi prej 6.\n * Hyrja: Një varg i numrave të plotë.\n * Dalja: Gjatësia e sekuencës më të gjatë të numrave të njëpasnjëshëm të gjetur në varg.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hy": "<?php\n\n/**\n * Գտնում է ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը զանգվածում:\n * Հաջորդական թվերը այն թվերն են, որոնք հաջորդում են մեկը մյուսին առանց բացերի:\n * Օրինակ, [1, 3, 5, 4, 2, 6] զանգվածում ամենաերկար հաջորդական թվերի հաջորդականությունը [1, 2, 3, 4, 5, 6] է, որը ունի 6 երկարություն:\n * Մուտք: Ամբողջ թվերի զանգված:\n * Ելք: Ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը, որը գտնվել է զանգվածում:\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "bn": "<?php\n\n/**\n * একটি অ্যারের মধ্যে ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য খুঁজে বের করে।\n * ধারাবাহিক সংখ্যা হল এমন সংখ্যা যা কোনো ফাঁক ছাড়াই একের পর এক আসে।\n * উদাহরণস্বরূপ, অ্যারে [1, 3, 5, 4, 2, 6] এ, ধারাবাহিক সংখ্যার দীর্ঘতম ক্রম হল [1, 2, 3, 4, 5, 6], যার দৈর্ঘ্য 6।\n * ইনপুট: পূর্ণসংখ্যার একটি অ্যারে।\n * আউটপুট: অ্যারেতে পাওয়া ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য।\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "bg": "<?php\n\n/**\n * Намира дължината на най-дългата последователност от поредни числа в масив.\n * Поредни числа са числа, които следват едно след друго в последователност без пропуски.\n * Например, в масива [1, 3, 5, 4, 2, 6], най-дългата последователност от поредни числа е [1, 2, 3, 4, 5, 6], която има дължина 6.\n * Вход: Масив от цели числа.\n * Изход: Дължината на най-дългата последователност от поредни числа, намерена в масива.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "zh": "<?php\n\n/**\n * 查找数组中最长连续数字序列的长度。\n * 连续数字是指在序列中没有间隔地一个接一个出现的数字。\n * 例如，在数组 [1, 3, 5, 4, 2, 6] 中，最长的连续数字序列是 [1, 2, 3, 4, 5, 6]，其长度为 6。\n * 输入：一个整数数组。\n * 输出：在数组中找到的最长连续数字序列的长度。\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "fr": "<?php\n\n/**\n * Trouve la longueur de la plus longue séquence de nombres consécutifs dans un tableau.\n * Les nombres consécutifs sont des nombres qui se suivent dans une séquence sans aucune interruption.\n * Par exemple, dans le tableau [1, 3, 5, 4, 2, 6], la plus longue séquence de nombres consécutifs est [1, 2, 3, 4, 5, 6], qui a une longueur de 6.\n * Entrée : Un tableau d'entiers.\n * Sortie : La longueur de la plus longue séquence de nombres consécutifs trouvée dans le tableau.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "de": "<?php\n\n/**\n * Findet die Länge der längsten Sequenz aufeinanderfolgender Zahlen in einem Array.\n * Aufeinanderfolgende Zahlen sind Zahlen, die ohne Lücken nacheinander in der Sequenz erscheinen.\n * Zum Beispiel ist in dem Array [1, 3, 5, 4, 2, 6] die längste Sequenz aufeinanderfolgender Zahlen [1, 2, 3, 4, 5, 6], die eine Länge von 6 hat.\n * Eingabe: Ein Array von ganzen Zahlen.\n * Ausgabe: Die Länge der längsten Sequenz aufeinanderfolgender Zahlen, die im Array gefunden wurde.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "ha": "<?php\n\n/**\n * Nemi tsawon jerin lambobi masu jere mafi tsawo a cikin wani array.\n * Lambobi masu jere su ne lambobi da ke zuwa daya bayan daya a jere ba tare da wani tazara ba.\n * Alal misali, a cikin array [1, 3, 5, 4, 2, 6], jerin lambobi masu jere mafi tsawo shi ne [1, 2, 3, 4, 5, 6], wanda ke da tsawon 6.\n * Shigarwa: Wani array na lambobi masu duka.\n * Fitarwa: Tsawon jerin lambobi masu jere mafi tsawo da aka samu a cikin array.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hi": "<?php\n\n/**\n * एक array में लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई खोजता है।\n * लगातार संख्याएँ वे संख्याएँ होती हैं जो बिना किसी अंतराल के क्रम में एक के बाद एक आती हैं।\n * उदाहरण के लिए, array [1, 3, 5, 4, 2, 6] में, लगातार संख्याओं का सबसे लंबा अनुक्रम [1, 2, 3, 4, 5, 6] है, जिसकी लंबाई 6 है।\n * इनपुट: पूर्णांकों का एक array।\n * आउटपुट: array में पाई गई लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई।\n */\nfunction findLongestConsecutiveSequence(array $numbers): int ",
      "hu": "<?php\n\n/**\n * Megkeresi a leghosszabb egymást követő számok sorozatának hosszát egy tömbben.\n * Az egymást követő számok olyan számok, amelyek szünet nélkül követik egymást a sorozatban.\n * Például a [1, 3, 5, 4, 2, 6] tömbben a leghosszabb egymást követő számok sorozata [1, 2, 3, 4, 5, 6], amelynek hossza 6.\n * Bemenet: Egész számokat tartalmazó tömb.\n * Kimenet: A tömbben található leghosszabb egymást követő számok sorozatának hossza.\n */\nfunction findLongestConsecutiveSequence(array $numbers): int "
    },
    "prompt_bertscore": {
      "sq": "0.9950586720109951",
      "hy": "0.9658872183610683",
      "bn": "0.982743389756451",
      "bg": "0.9778821098110031",
      "zh": "0.9550785475466739",
      "fr": "0.9804881404101808",
      "de": "0.9698447300728075",
      "ha": "0.9692275854789321",
      "hi": "0.9849851322368107",
      "hu": "0.9600373550092098"
    },
    "canonical_solution": "{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}",
    "instruction": {
      "en": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nՏվեք PHP կոդի համառոտ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nনিচে প্রদত্ত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলা ভাষায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 символа.",
      "zh": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nFournir une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nBa da takaitaccen bayanin yanayi na lamba (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findLongestConsecutiveSequence(array $numbers): int\n{\n    if (empty($numbers)) {\n        return 0;\n    }\n    sort($numbers);\n    $longest = 1;\n    $currentLength = 1;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] == $numbers[$i - 1] + 1) {\n            $currentLength++;\n        } elseif ($numbers[$i] != $numbers[$i - 1]) {\n            $longest = max($longest, $currentLength);\n            $currentLength = 1;\n        }\n    }\n    return max($longest, $currentLength);\n}\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9458315087879756",
      "bn": "0.8634513459271851",
      "bg": "0.8358939162203464",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.8796101260547543",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(findLongestConsecutiveSequence([1, 5, 6, 2, 3, 4, 5, 6, 8, 9]) === 6);\n    assert(findLongestConsecutiveSequence([10, 4, 20, 1, 3, 2]) === 4);\n    assert(findLongestConsecutiveSequence([1, 2, 2, 3]) === 3);\n    assert(findLongestConsecutiveSequence([]) === 0);\n    assert(findLongestConsecutiveSequence([7]) === 1);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findLongestConsecutiveSequence",
    "signature": "function findLongestConsecutiveSequence(array $numbers): int",
    "docstring": {
      "en": "Finds the length of the longest sequence of consecutive numbers in an array.\n  Consecutive numbers are numbers which come one after the other in sequence without any gaps.\n  For example, in the array [1, 3, 5, 4, 2, 6], the longest sequence of consecutive numbers is [1, 2, 3, 4, 5, 6], which has a length of 6.\n  Input: An array of integers.\n  Output: The length of the longest sequence of consecutive numbers found in the array.",
      "sq": "Gjen gjatësinë e sekuencës më të gjatë të numrave radhazi në një varg.\nNumrat radhazi janë numra që vijnë njëri pas tjetrit në sekuencë pa ndonjë ndërprerje.\nPër shembull, në vargun [1, 3, 5, 4, 2, 6], sekuenca më e gjatë e numrave radhazi është [1, 2, 3, 4, 5, 6], e cila ka një gjatësi prej 6.\nInput: Një varg i numrave të plotë.\nOutput: Gjatësia e sekuencës më të gjatë të numrave radhazi të gjetur në varg.",
      "hy": "Գտնում է ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը զանգվածում։  \nՀաջորդական թվերը այն թվերն են, որոնք հաջորդում են միմյանց առանց բացերի։  \nՕրինակ, [1, 3, 5, 4, 2, 6] զանգվածում ամենաերկար հաջորդական թվերի հաջորդականությունը [1, 2, 3, 4, 5, 6] է, որը ունի 6 երկարություն։  \nՄուտք: Թվերի զանգված։  \nԵլք: Ամենաերկար հաջորդական թվերի հաջորդականության երկարությունը, որը գտնվել է զանգվածում։",
      "bn": "একটি অ্যারের মধ্যে ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য খুঁজে বের করে।\n  ধারাবাহিক সংখ্যাগুলি হল এমন সংখ্যা যা কোন ফাঁক ছাড়াই ধারাবাহিকভাবে একটির পর একটি আসে।\n  উদাহরণস্বরূপ, [1, 3, 5, 4, 2, 6] অ্যারেতে, ধারাবাহিক সংখ্যার দীর্ঘতম ক্রম হল [1, 2, 3, 4, 5, 6], যার দৈর্ঘ্য 6।\n  Input: পূর্ণসংখ্যার একটি অ্যারে।\n  Output: অ্যারেতে পাওয়া ধারাবাহিক সংখ্যার দীর্ঘতম ক্রমের দৈর্ঘ্য।",
      "bg": "Намира дължината на най-дългата последователност от последователни числа в масив.\n  Последователни числа са числа, които идват едно след друго в последователност без пропуски.\n  Например, в масива [1, 3, 5, 4, 2, 6], най-дългата последователност от последователни числа е [1, 2, 3, 4, 5, 6], която има дължина 6.\n  Вход: Масив от цели числа.\n  Изход: Дължината на най-дългата последователност от последователни числа, намерена в масива.",
      "zh": "找到数组中最长的连续数字序列的长度。\n  连续数字是指在序列中一个接一个出现且没有间隔的数字。\n  例如，在数组 [1, 3, 5, 4, 2, 6] 中，最长的连续数字序列是 [1, 2, 3, 4, 5, 6]，其长度为 6。\n  输入：一个整数数组。\n  输出：在数组中找到的最长连续数字序列的长度。",
      "fr": "Trouve la longueur de la plus longue séquence de nombres consécutifs dans un tableau.\n  Les nombres consécutifs sont des nombres qui se suivent dans l'ordre sans aucun écart.\n  Par exemple, dans le tableau [1, 3, 5, 4, 2, 6], la plus longue séquence de nombres consécutifs est [1, 2, 3, 4, 5, 6], qui a une longueur de 6.\n  Entrée : Un tableau d'entiers.\n  Sortie : La longueur de la plus longue séquence de nombres consécutifs trouvée dans le tableau.",
      "de": "Findet die Länge der längsten Sequenz aufeinanderfolgender Zahlen in einem Array.\n  Aufeinanderfolgende Zahlen sind Zahlen, die ohne Lücken nacheinander in der Sequenz kommen.\n  Zum Beispiel ist in dem Array [1, 3, 5, 4, 2, 6] die längste Sequenz aufeinanderfolgender Zahlen [1, 2, 3, 4, 5, 6], die eine Länge von 6 hat.\n  Eingabe: Ein Array von ganzen Zahlen.\n  Ausgabe: Die Länge der längsten Sequenz aufeinanderfolgender Zahlen, die im Array gefunden wurde.",
      "ha": "Yana gano tsawon jerin lambobi masu jere mafi tsawo a cikin wani tsararraki.\n  Lambobi masu jere su ne lambobi da ke zuwa daya bayan daya a jere ba tare da wani tazara ba.\n  Alal misali, a cikin tsararraki [1, 3, 5, 4, 2, 6], jerin lambobi masu jere mafi tsawo shi ne [1, 2, 3, 4, 5, 6], wanda ke da tsawon 6.\n  Shigarwa: Wani tsararraki na lambobi masu cikakken lamba.\n  Fitarwa: Tsawon jerin lambobi masu jere mafi tsawo da aka samu a cikin tsararrakin.",
      "hi": "एक array में लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई खोजता है।\n  लगातार संख्याएँ वे संख्याएँ होती हैं जो बिना किसी अंतराल के क्रम में एक के बाद एक आती हैं।\n  उदाहरण के लिए, सरणी [1, 3, 5, 4, 2, 6] में, लगातार संख्याओं का सबसे लंबा अनुक्रम [1, 2, 3, 4, 5, 6] है, जिसकी लंबाई 6 है।\n  Input: पूर्णांकों की एक सरणी।\n  Output: सरणी में पाई गई लगातार संख्याओं के सबसे लंबे अनुक्रम की लंबाई।",
      "hu": "Megkeresi a leghosszabb egymást követő számok sorozatának hosszát egy tömbben.\n  Az egymást követő számok olyan számok, amelyek szünet nélkül követik egymást a sorozatban.\n  Például a [1, 3, 5, 4, 2, 6] tömbben a leghosszabb egymást követő számok sorozata [1, 2, 3, 4, 5, 6], amelynek hossza 6.\n  Bemenet: Egész számokat tartalmazó tömb.\n  Kimenet: A tömbben található leghosszabb egymást követő számok sorozatának hossza."
    },
    "docstring_bertscore": {
      "sq": "0.9875407107192056",
      "hy": "0.9765238752654866",
      "bn": "1",
      "bg": "0.9955345904039546",
      "zh": "0.9473031612810632",
      "fr": "0.9737100772877464",
      "de": "0.9881713621789914",
      "ha": "0.9501562880742482",
      "hi": "0.8630143590889083",
      "hu": "0.9532020863370373"
    }
  },
  {
    "task_id": "PHP/44",
    "prompt": {
      "en": "<?php\n\n/**\n * Compares the area of a square and a rectangle to determine which is larger.\n * The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n * Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n * Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.\n */\nfunction compareArea($a, $b, $c): string ",
      "sq": "<?php\n\n/**\n * Krahason sipërfaqen e një katrori dhe një drejtkëndëshi për të përcaktuar cili është më i madh.\n * Gjatësia e brinjës së katrorit përfaqësohet nga $a, ndërsa dimensionet e drejtkëndëshit përfaqësohen nga $b dhe $c.\n * Hyrja: Tre numra të plotë $a, $b, dhe $c, ku $a është gjatësia e brinjës së katrorit, dhe $b dhe $c janë gjerësia dhe lartësia e drejtkëndëshit, përkatësisht.\n * Dalja: Kthen një varg \"Alice\" nëse sipërfaqja e katrorit është më e madhe, \"Bob\" nëse sipërfaqja e drejtkëndëshit është më e madhe, ose \"Equal\" nëse të dyja sipërfaqet janë të njëjta.\n */\nfunction compareArea($a, $b, $c): string ",
      "hy": "<?php\n\n/**\n * Համեմատում է քառակուսու և ուղղանկյան մակերեսները՝ որոշելու համար, թե որն է ավելի մեծ։\n * Քառակուսու կողի երկարությունը ներկայացված է $a-ով, իսկ ուղղանկյան չափերը ներկայացված են $b և $c-ով։\n * Մուտք: Երեք ամբողջ թիվ $a, $b և $c, որտեղ $a-ն քառակուսու կողի երկարությունն է, իսկ $b և $c-ն ուղղանկյան լայնությունն ու բարձրությունն են, համապատասխանաբար։\n * Ելք: Վերադարձնում է \"Alice\" տողը, եթե քառակուսու մակերեսը մեծ է, \"Bob\", եթե ուղղանկյան մակերեսը մեծ է, կամ \"Equal\", եթե երկու մակերեսներն էլ նույնն են։\n */\nfunction compareArea($a, $b, $c): string ",
      "bn": "<?php\n\n/**\n * একটি বর্গক্ষেত্র এবং একটি আয়তক্ষেত্রের ক্ষেত্রফল তুলনা করে কোনটি বড় তা নির্ধারণ করে।\n * বর্গক্ষেত্রের বাহুর দৈর্ঘ্য $a দ্বারা উপস্থাপিত হয়, যখন আয়তক্ষেত্রের মাত্রা $b এবং $c দ্বারা উপস্থাপিত হয়।\n * ইনপুট: তিনটি পূর্ণসংখ্যা $a, $b, এবং $c, যেখানে $a হল বর্গক্ষেত্রের বাহুর দৈর্ঘ্য, এবং $b এবং $c হল আয়তক্ষেত্রের প্রস্থ এবং উচ্চতা, যথাক্রমে।\n * আউটপুট: একটি স্ট্রিং রিটার্ন করে \"Alice\" যদি বর্গক্ষেত্রের ক্ষেত্রফল বেশি হয়, \"Bob\" যদি আয়তক্ষেত্রের ক্ষেত্রফল বেশি হয়, অথবা \"Equal\" যদি উভয়ের ক্ষেত্রফল সমান হয়।\n */\nfunction compareArea($a, $b, $c): string ",
      "bg": "<?php\n\n/**\n * Сравнява площта на квадрат и правоъгълник, за да определи кой е по-голям.\n * Страната на квадрата е представена от $a, докато размерите на правоъгълника са представени от $b и $c.\n * Вход: Три цели числа $a, $b и $c, където $a е дължината на страната на квадрата, а $b и $c са ширината и височината на правоъгълника, съответно.\n * Изход: Връща низ \"Alice\", ако площта на квадрата е по-голяма, \"Bob\", ако площта на правоъгълника е по-голяма, или \"Equal\", ако и двете площи са еднакви.\n */\nfunction compareArea($a, $b, $c): string ",
      "zh": "<?php\n\n/**\n * 比较正方形和矩形的面积以确定哪个更大。\n * 正方形的边长由 $a 表示，而矩形的尺寸由 $b 和 $c 表示。\n * 输入：三个整数 $a, $b 和 $c，其中 $a 是正方形的边长，$b 和 $c 分别是矩形的宽度和高度。\n * 输出：如果正方形的面积更大，返回字符串 \"Alice\"；如果矩形的面积更大，返回 \"Bob\"；如果两个面积相同，返回 \"Equal\"。\n */\nfunction compareArea($a, $b, $c): string ",
      "fr": "<?php\n\n/**\n * Compare la surface d'un carré et d'un rectangle pour déterminer lequel est plus grand.\n * La longueur du côté du carré est représentée par $a, tandis que les dimensions du rectangle sont représentées par $b et $c.\n * Entrée : Trois entiers $a, $b, et $c, où $a est la longueur du côté du carré, et $b et $c sont la largeur et la hauteur du rectangle, respectivement.\n * Sortie : Retourne une chaîne \"Alice\" si la surface du carré est plus grande, \"Bob\" si la surface du rectangle est plus grande, ou \"Equal\" si les deux surfaces sont identiques.\n */\nfunction compareArea($a, $b, $c): string ",
      "de": "<?php\n\n/**\n * Vergleicht die Fläche eines Quadrats und eines Rechtecks, um festzustellen, welches größer ist.\n * Die Seitenlänge des Quadrats wird durch $a dargestellt, während die Abmessungen des Rechtecks durch $b und $c dargestellt werden.\n * Eingabe: Drei ganze Zahlen $a, $b und $c, wobei $a die Seitenlänge des Quadrats ist und $b und $c die Breite und Höhe des Rechtecks sind.\n * Ausgabe: Gibt einen String \"Alice\" zurück, wenn die Fläche des Quadrats größer ist, \"Bob\", wenn die Fläche des Rechtecks größer ist, oder \"Equal\", wenn beide Flächen gleich sind.\n */\nfunction compareArea($a, $b, $c): string ",
      "ha": "<?php\n\n/**\n * Kwatanta yanki na murabba'i da na murabba'in kusurwa huɗu don tantance wanda ya fi girma.\n * Tsawon gefen murabba'i yana wakilta ta $a, yayin da girman murabba'in kusurwa huɗu yana wakilta ta $b da $c.\n * Shigarwa: Lamba uku $a, $b, da $c, inda $a shine tsawon gefen murabba'i, kuma $b da $c sune faɗi da tsayin murabba'in kusurwa huɗu, bi da bi.\n * Fitarwa: Yana dawowa da igiyar \"Alice\" idan yankin murabba'i ya fi girma, \"Bob\" idan yankin murabba'in kusurwa huɗu ya fi girma, ko \"Equal\" idan duk yankunan suna daidai.\n */\nfunction compareArea($a, $b, $c): string ",
      "hi": "<?php\n\n/**\n * एक वर्ग और एक आयत के क्षेत्रफल की तुलना करता है ताकि यह निर्धारित किया जा सके कि कौन सा बड़ा है।\n * वर्ग की भुजा की लंबाई $a द्वारा दर्शाई जाती है, जबकि आयत के आयाम $b और $c द्वारा दर्शाए जाते हैं।\n * इनपुट: तीन पूर्णांक $a, $b, और $c, जहाँ $a वर्ग की भुजा की लंबाई है, और $b और $c क्रमशः आयत की चौड़ाई और ऊँचाई हैं।\n * आउटपुट: \"Alice\" स्ट्रिंग लौटाता है यदि वर्ग का क्षेत्रफल बड़ा है, \"Bob\" यदि आयत का क्षेत्रफल बड़ा है, या \"Equal\" यदि दोनों क्षेत्रफल समान हैं।\n */\nfunction compareArea($a, $b, $c): string ",
      "hu": "<?php\n\n/**\n * Összehasonlítja egy négyzet és egy téglalap területét annak meghatározására, hogy melyik a nagyobb.\n * A négyzet oldalhosszát az $a, míg a téglalap méreteit a $b és $c jelöli.\n * Bemenet: Három egész szám $a, $b és $c, ahol $a a négyzet oldalhossza, $b és $c pedig a téglalap szélessége és magassága.\n * Kimenet: Visszaad egy \"Alice\" sztringet, ha a négyzet területe nagyobb, \"Bob\"-ot, ha a téglalap területe nagyobb, vagy \"Equal\"-t, ha mindkét terület azonos.\n */\nfunction compareArea($a, $b, $c): string "
    },
    "prompt_bertscore": {
      "sq": "0.9712178618969016",
      "hy": "0.9751447845299613",
      "bn": "0.9805072089267602",
      "bg": "0.9712119029854706",
      "zh": "0.964849374620161",
      "fr": "0.9645565934385156",
      "de": "0.9727818775171703",
      "ha": "0.9677497754440324",
      "hi": "0.9736461183050531",
      "hu": "0.9620180971688898"
    },
    "canonical_solution": "{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}",
    "instruction": {
      "en": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nՏվեք համառոտ բնական լեզվով նկարագրություն (docstring) PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nПредоставете кратко описание на PHP кода на естествен език (docstring) на български, използвайки не повече от 500 знака.",
      "zh": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简明的自然语言描述（文档字符串）。",
      "fr": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nBa da takaitaccen bayani a cikin yaren halitta (docstring) na lambar PHP a cikin Hausa, ba tare da wuce haruffa 500 ba.",
      "hi": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function compareArea($a, $b, $c): string\n{\n    $squareArea = $a * $a;\n    $rectangleArea = $b * $c;\n    if ($squareArea > $rectangleArea) {\n        return \"Alice\";\n    } elseif ($squareArea < $rectangleArea) {\n        return \"Bob\";\n    } else {\n        return \"Equal\";\n    }\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9358257019737242",
      "bn": "0.8743148387267452",
      "bg": "0.9000926923166909",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9176373166127405",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    // Test cases\n    assert(compareArea(5, 4, 6) === \"Alice\"); \n    assert(compareArea(7, 5, 10) === \"Bob\"); \n    assert(compareArea(6, 3, 12) === \"Equal\"); \n\n}\n\n\nmain();\n?>",
    "entry_point": "compareArea",
    "signature": "function compareArea($a, $b, $c): string",
    "docstring": {
      "en": "Compares the area of a square and a rectangle to determine which is larger.\n  The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c.\n  Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively.\n  Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same.",
      "sq": "Krahason sipërfaqen e një katrori dhe një drejtkëndëshi për të përcaktuar cili është më i madh.\n  Gjatësia e brinjës së katrorit përfaqësohet nga $a, ndërsa dimensionet e drejtkëndëshit përfaqësohen nga $b dhe $c.\n  Input: Tre numra të plotë $a, $b, dhe $c, ku $a është gjatësia e brinjës së katrorit, dhe $b dhe $c janë gjerësia dhe lartësia e drejtkëndëshit, përkatësisht.\n  Output: Kthen një varg \"Alice\" nëse sipërfaqja e katrorit është më e madhe, \"Bob\" nëse sipërfaqja e drejtkëndëshit është më e madhe, ose \"Equal\" nëse të dyja sipërfaqet janë të njëjta.",
      "hy": "Համեմատում է քառակուսու և ուղղանկյունի մակերեսները՝ որոշելու, թե որը մեծ է:\n  Քառակուսու կողի երկարությունը ներկայացված է $a-ով, մինչդեռ ուղղանկյունի չափերը ներկայացված են $b և $c-ով:\n  Մուտք: Երեք ամբողջ թիվ $a, $b և $c, որտեղ $a-ն քառակուսու կողի երկարությունն է, իսկ $b և $c-ն ուղղանկյունի լայնությունն ու բարձրությունն են, համապատասխանաբար:\n  Ելք: Վերադարձնում է \"Alice\" տողը, եթե քառակուսու մակերեսը մեծ է, \"Bob\" եթե ուղղանկյունի մակերեսը մեծ է, կամ \"Equal\" եթե երկու մակերեսներն էլ նույնն են:",
      "bn": "বর্গক্ষেত্র এবং আয়তক্ষেত্রের ক্ষেত্রফল তুলনা করে কোনটি বড় তা নির্ধারণ করে।\n  বর্গক্ষেত্রের বাহুর দৈর্ঘ্য $a দ্বারা এবং আয়তক্ষেত্রের মাত্রা $b এবং $c দ্বারা উপস্থাপিত হয়।\n  ইনপুট: তিনটি পূর্ণসংখ্যা $a, $b, এবং $c, যেখানে $a বর্গক্ষেত্রের বাহুর দৈর্ঘ্য, এবং $b এবং $c আয়তক্ষেত্রের প্রস্থ এবং উচ্চতা যথাক্রমে।\n  আউটপুট: একটি স্ট্রিং \"Alice\" ফেরত দেয় যদি বর্গক্ষেত্রের ক্ষেত্রফল বড় হয়, \"Bob\" যদি আয়তক্ষেত্রের ক্ষেত্রফল বড় হয়, অথবা \"Equal\" যদি উভয়ের ক্ষেত্রফল সমান হয়।",
      "bg": "Сравнява площта на квадрат и правоъгълник, за да определи кой е по-голям.\n  Дължината на страната на квадрата е представена от $a, докато размерите на правоъгълника са представени от $b и $c.\n  Вход: Три цели числа $a, $b и $c, където $a е дължината на страната на квадрата, а $b и $c са съответно ширината и височината на правоъгълника.\n  Изход: Връща низ \"Alice\", ако площта на квадрата е по-голяма, \"Bob\", ако площта на правоъгълника е по-голяма, или \"Equal\", ако и двете площи са еднакви.",
      "zh": "比较正方形和矩形的面积以确定哪个更大。\n  正方形的边长由 $a 表示，而矩形的尺寸由 $b 和 $c 表示。\n  输入：三个整数 $a, $b 和 $c，其中 $a 是正方形的边长，$b 和 $c 分别是矩形的宽度和高度。\n  输出：如果正方形的面积更大，返回字符串 \"Alice\"；如果矩形的面积更大，返回 \"Bob\"；如果两个面积相同，返回 \"Equal\"。",
      "fr": "Compare la surface d'un carré et d'un rectangle pour déterminer lequel est plus grand.\n  La longueur du côté du carré est représentée par $a, tandis que les dimensions du rectangle sont représentées par $b et $c.\n  Entrée : Trois entiers $a, $b, et $c, où $a est la longueur du côté du carré, et $b et $c sont la largeur et la hauteur du rectangle, respectivement.\n  Sortie : Renvoie une chaîne \"Alice\" si la surface du carré est plus grande, \"Bob\" si la surface du rectangle est plus grande, ou \"Equal\" si les deux surfaces sont identiques.",
      "de": "Vergleicht die Fläche eines Quadrats und eines Rechtecks, um festzustellen, welches größer ist.\n  Die Seitenlänge des Quadrats wird durch $a dargestellt, während die Abmessungen des Rechtecks durch $b und $c dargestellt werden.\n  Eingabe: Drei ganze Zahlen $a, $b und $c, wobei $a die Seitenlänge des Quadrats ist und $b und $c die Breite und Höhe des Rechtecks sind.\n  Ausgabe: Gibt einen String \"Alice\" zurück, wenn die Fläche des Quadrats größer ist, \"Bob\", wenn die Fläche des Rechtecks größer ist, oder \"Equal\", wenn beide Flächen gleich sind.",
      "ha": "Kwatanta yanki na murabba'i da na rectangle don tantance wanda yafi girma.\nFadin gefen murabba'i yana wakilta ta $a, yayin da girman murabba'in yana wakilta ta $b da $c.\n  Input: Lambobi guda uku $a, $b, da $c, inda $a shi ne fadin gefen murabba'i, kuma $b da $c su ne nisa da tsayin murabba'in, bi da bi.\n  Output: Yana dawowa da igiyar rubutu \"Alice\" idan yankin murabba'i ya fi girma, \"Bob\" idan yankin murabba'in ya fi girma, ko \"Equal\" idan duka yankunan suna daidai.",
      "hi": "एक वर्ग और एक आयत के क्षेत्रफल की तुलना करता है यह निर्धारित करने के लिए कि कौन सा बड़ा है।\nवर्ग के क्षेत्रफल और आयत के क्षेत्रफल की तुलना करता है यह निर्धारित करने के लिए कि कौन सा बड़ा है। The square's side length is represented by $a, while the rectangle's dimensions are represented by $b and $c. वर्ग की भुजा की लंबाई $a द्वारा दर्शाई जाती है, जबकि आयत के आयाम $b और $c द्वारा दर्शाए जाते हैं। Input: Three integers $a, $b, and $c, where $a is the side length of the square, and $b and $c are the width and height of the rectangle, respectively. इनपुट: तीन पूर्णांक $a, $b, और $c, जहाँ $a वर्ग की भुजा की लंबाई है, और $b और $c क्रमशः आयत की चौड़ाई और ऊँचाई हैं। Output: Returns a string \"Alice\" if the square's area is greater, \"Bob\" if the rectangle's area is greater, or \"Equal\" if both areas are the same. आउटपुट: एक स्ट्रिंग \"Alice\" लौटाता है यदि वर्ग का क्षेत्रफल बड़ा है, \"Bob\" यदि आयत का क्षेत्रफल बड़ा है, या \"Equal\" यदि दोनों क्षेत्रफल समान हैं।",
      "hu": "Összehasonlítja egy négyzet és egy téglalap területét annak meghatározására, hogy melyik a nagyobb.\n  A négyzet oldalhosszát $a jelöli, míg a téglalap méreteit $b és $c jelölik.\n  Bemenet: Három egész szám $a, $b és $c, ahol $a a négyzet oldalhossza, $b és $c pedig a téglalap szélessége és magassága.\n  Kimenet: Visszaad egy \"Alice\" sztringet, ha a négyzet területe nagyobb, \"Bob\" sztringet, ha a téglalap területe nagyobb, vagy \"Equal\" sztringet, ha mindkét terület azonos."
    },
    "docstring_bertscore": {
      "sq": "0.9770017799622565",
      "hy": "0.9709280601709717",
      "bn": "0.9749403938678765",
      "bg": "0.9751008872157526",
      "zh": "0.9556323290489991",
      "fr": "0.9568852894925671",
      "de": "0.9726595212024528",
      "ha": "0.9503771650579591",
      "hi": "0.8683366601487381",
      "hu": "0.9572249474441368"
    }
  },
  {
    "task_id": "PHP/45",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Finds M positive integers whose sum is N and whose product is as large as possible.\n * Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n * The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n * \n * Input: Two integers, $N representing the total sum and $M representing the number of parts.\n * Output: An array of integers representing the distribution that maximizes the product.\n * Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "sq": "<?php\n\n\n/**\n * Gjen M numra të plotë pozitivë, shuma e të cilëve është N dhe prodhimi i të cilëve është sa më i madh të jetë e mundur.\n * Jep kombinimin me rendin më të vogël leksikografik nëse ka mundësi të shumta.\n * Funksioni synon të shpërndajë shumën totale N në M pjesë të tilla që prodhimi i këtyre pjesëve të jetë i maksimizuar.\n * \n * Hyrja: Dy numra të plotë, $N që përfaqëson shumën totale dhe $M që përfaqëson numrin e pjesëve.\n * Dalja: Një varg numrash të plotë që përfaqëson shpërndarjen që maksimizon prodhimin.\n * Shembull: Duke dhënë N = 6 dhe M = 3, funksioni kthen [2, 2, 2] pasi ndarja e 6 në tre pjesë nga 2 secila maksimizon prodhimin 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hy": "<?php\n\n\n/**\n * Գտնում է M դրական ամբողջ թվեր, որոնց գումարը N է և որոնց արտադրյալը հնարավորինս մեծ է:\n * Եթե կան բազմաթիվ հնարավորություններ, արդյունք է տալիս ամենափոքր լեքսիկոգրաֆիկ կարգով համադրությունը:\n * Ֆունկցիան նպատակ ունի բաշխել ընդհանուր գումարը N M մասերի այնպես, որ այդ մասերի արտադրյալը առավելագույն լինի:\n * \n * Մուտք: Երկու ամբողջ թիվ, $N ներկայացնում է ընդհանուր գումարը և $M ներկայացնում է մասերի քանակը:\n * Ելք: Ամբողջ թվերի զանգված, որը ներկայացնում է բաշխումը, որը առավելագույնացնում է արտադրյալը:\n * Օրինակ: Տրված N = 6 և M = 3, ֆունկցիան վերադարձնում է [2, 2, 2], քանի որ 6-ը բաժանելով երեք մասի՝ յուրաքանչյուրը 2, առավելագույնացնում է արտադրյալը 2*2*2 = 8:\n */\n\nfunction maxProductDistribution($N, $M) ",
      "bn": "<?php\n\n\n/**\n * এমন M ধনাত্মক পূর্ণসংখ্যা খুঁজে বের করে যাদের যোগফল N এবং যাদের গুণফল যতটা সম্ভব বড় হয়।\n * যদি একাধিক সম্ভাবনা থাকে তবে ছোট লেক্সিকোগ্রাফিক ক্রমের সংমিশ্রণ আউটপুট করে।\n * ফাংশনটি মোট যোগফল N কে M অংশে বিতরণ করার লক্ষ্য রাখে যাতে এই অংশগুলির গুণফল সর্বাধিক হয়।\n * \n * ইনপুট: দুটি পূর্ণসংখ্যা, $N মোট যোগফল উপস্থাপন করে এবং $M অংশের সংখ্যা উপস্থাপন করে।\n * আউটপুট: পূর্ণসংখ্যার একটি অ্যারে যা গুণফল সর্বাধিক করে এমন বিতরণ উপস্থাপন করে।\n * উদাহরণ: N = 6 এবং M = 3 দেওয়া হলে, ফাংশনটি [2, 2, 2] ফেরত দেয় কারণ 6 কে তিনটি অংশে 2 করে ভাগ করলে গুণফল সর্বাধিক হয় 2*2*2 = 8।\n */\n\nfunction maxProductDistribution($N, $M) ",
      "bg": "<?php\n\n\n/**\n * Намира M положителни цели числа, чиято сума е N и чийто произведение е възможно най-голямо.\n * Извежда комбинацията с най-малък лексикографски ред, ако има множество възможности.\n * Функцията цели да разпредели общата сума N на M части така, че произведението на тези части да е максимално.\n * \n * Вход: Две цели числа, $N представлява общата сума и $M представлява броя на частите.\n * Изход: Масив от цели числа, представляващ разпределението, което максимизира произведението.\n * Пример: Дадено N = 6 и M = 3, функцията връща [2, 2, 2], тъй като разделянето на 6 на три части по 2 максимизира произведението 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "zh": "<?php\n\n\n/**\n * 找到 M 个正整数，它们的和为 N，并且它们的乘积尽可能大。\n * 如果有多种可能性，输出字典序最小的组合。\n * 该函数旨在将总和 N 分配为 M 部分，使这些部分的乘积最大化。\n * \n * 输入：两个整数，$N 表示总和，$M 表示部分的数量。\n * 输出：一个整数数组，表示使乘积最大化的分配。\n * 示例：给定 N = 6 和 M = 3，函数返回 [2, 2, 2]，因为将 6 分为三个部分，每部分为 2，可以最大化乘积 2*2*2 = 8。\n */\n\nfunction maxProductDistribution($N, $M) ",
      "fr": "<?php\n\n\n/**\n * Trouve M entiers positifs dont la somme est N et dont le produit est aussi grand que possible.\n * Renvoie la combinaison avec le plus petit ordre lexicographique s'il y a plusieurs possibilités.\n * La fonction vise à distribuer la somme totale N en M parties de sorte que le produit de ces parties soit maximisé.\n * \n * Entrée : Deux entiers, $N représentant la somme totale et $M représentant le nombre de parties.\n * Sortie : Un tableau d'entiers représentant la distribution qui maximise le produit.\n * Exemple : Étant donné N = 6 et M = 3, la fonction renvoie [2, 2, 2] car diviser 6 en trois parties de 2 chacune maximise le produit 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "de": "<?php\n\n\n/**\n * Findet M positive ganze Zahlen, deren Summe N ist und deren Produkt so groß wie möglich ist.\n * Gibt die Kombination mit der kleinsten lexikographischen Ordnung aus, wenn es mehrere Möglichkeiten gibt.\n * Die Funktion zielt darauf ab, die Gesamtsumme N in M Teile zu verteilen, sodass das Produkt dieser Teile maximiert wird.\n * \n * Eingabe: Zwei ganze Zahlen, $N, die die Gesamtsumme darstellt, und $M, die die Anzahl der Teile darstellt.\n * Ausgabe: Ein Array von ganzen Zahlen, das die Verteilung darstellt, die das Produkt maximiert.\n * Beispiel: Gegeben N = 6 und M = 3, gibt die Funktion [2, 2, 2] zurück, da die Aufteilung von 6 in drei Teile von jeweils 2 das Produkt 2*2*2 = 8 maximiert.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "ha": "<?php\n\n\n/**\n * Nemi lambobi masu kyau M waɗanda jimlarsu ita ce N kuma waɗanda samfurin su ya fi girma sosai.\n * Fitar da haɗin tare da mafi ƙarancin tsari na lexicographical idan akwai yuwuwar da yawa.\n * Aikin yana nufin rarraba jimlar N zuwa sassa M ta yadda samfurin waɗannan sassan zai fi girma.\n * \n * Shigarwa: Lambobi biyu, $N suna wakiltar jimlar kuma $M suna wakiltar yawan sassa.\n * Fitarwa: Jerin lambobi suna wakiltar rarraba wanda ke ƙara samfurin.\n * Misali: An ba da N = 6 da M = 3, aikin yana dawowa [2, 2, 2] saboda raba 6 zuwa sassa uku na 2 kowanne yana ƙara samfurin 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hi": "<?php\n\n\n/**\n * ऐसे M धनात्मक पूर्णांक खोजें जिनका योग N हो और जिनका गुणनफल यथासंभव बड़ा हो।\n * यदि कई संभावनाएँ हों, तो सबसे छोटी शब्दकोशीय क्रम वाली संयोजन को आउटपुट करें।\n * यह फ़ंक्शन कुल योग N को M भागों में वितरित करने का लक्ष्य रखता है ताकि इन भागों का गुणनफल अधिकतम हो।\n * \n * इनपुट: दो पूर्णांक, $N जो कुल योग का प्रतिनिधित्व करता है और $M जो भागों की संख्या का प्रतिनिधित्व करता है।\n * आउटपुट: पूर्णांकों की एक सरणी जो उस वितरण का प्रतिनिधित्व करती है जो गुणनफल को अधिकतम करता है।\n * उदाहरण: दिए गए N = 6 और M = 3, फ़ंक्शन [2, 2, 2] लौटाता है क्योंकि 6 को तीन भागों में 2-2 करके विभाजित करने से गुणनफल 2*2*2 = 8 अधिकतम होता है।\n */\n\nfunction maxProductDistribution($N, $M) ",
      "hu": "<?php\n\n\n/**\n * Megkeresi azt az M pozitív egész számot, amelyek összege N, és amelyek szorzata a lehető legnagyobb.\n * Ha több lehetőség van, akkor a lexikografikusan legkisebb kombinációt adja meg.\n * A függvény célja, hogy az összeg N-t M részre ossza úgy, hogy ezeknek a részeknek a szorzata maximális legyen.\n * \n * Bemenet: Két egész szám, $N, amely az összeg, és $M, amely a részek száma.\n * Kimenet: Egy egész számokból álló tömb, amely a szorzatot maximalizáló eloszlást képviseli.\n * Példa: Adott N = 6 és M = 3, a függvény [2, 2, 2]-t ad vissza, mivel a 6 három részre osztása, mindegyik 2, maximalizálja a szorzatot 2*2*2 = 8.\n */\n\nfunction maxProductDistribution($N, $M) "
    },
    "prompt_bertscore": {
      "sq": "0.9886278147946096",
      "hy": "0.9717422461028337",
      "bn": "0.9752446956116219",
      "bg": "0.9894072404097904",
      "zh": "0.9454938371402163",
      "fr": "0.9866977233820935",
      "de": "0.9824144578454572",
      "ha": "0.9336945966156008",
      "hi": "0.9684853037450046",
      "hu": "0.9278566510866044"
    },
    "canonical_solution": "{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}",
    "instruction": {
      "en": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nՏրամադրել PHP կոդի հակիրճ բնութագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nনিম্নলিখিত PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে সীমাবদ্ধ।",
      "bg": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nBa da takaitaccen bayani a cikin harshen halitta (docstring) na lambar PHP a Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रींग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function maxProductDistribution($N, $M)\n{\n    // Initial equal distribution\n    $baseValue = intdiv($N, $M);\n    $remainder = $N % $M;\n    \n    $result = array_fill(0, $M, $baseValue);\n    \n    // Adjust the distribution to distribute the remainder, enhancing the product\n    for ($i = 0; $i < $remainder; $i++) {\n        $result[$i]++;\n    }\n    \n    // Ensure lexicographical order is smallest by distributing remainder from the start\n    sort($result);\n    \n    return $result;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9545793893991331",
      "hy": "0.9136390856728892",
      "bn": "0.8753683742677543",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9225754665156488",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    // Test Case 1: Simple distribution\n    assert(maxProductDistribution(6, 3) === [2, 2, 2]);\n\n    // Test Case 2: When distribution is not perfectly even\n    assert(maxProductDistribution(7, 3) === [2, 2, 3]);\n\n    // Test Case 3: Larger numbers with an even distribution\n    assert(maxProductDistribution(10, 2) === [5, 5]);\n\n    // Test Case 4: Larger numbers with a remainder\n    assert(maxProductDistribution(9, 4) === [2, 2, 2, 3]);\n    assert(maxProductDistribution(9, 3) === [3,3, 3]);\n\n    // Test Case 5: Single part (edge case)\n    assert(maxProductDistribution(5, 1) === [5]);\n\n}\n\n\nmain();\n?>",
    "entry_point": "maxProductDistribution",
    "signature": "function maxProductDistribution($N, $M)",
    "docstring": {
      "en": "Finds M positive integers whose sum is N and whose product is as large as possible.\n  Outputs the combination with the smallest lexicographical order if there are multiple possibilities.\n  The function aims to distribute the total sum N into M parts such that the product of these parts is maximized.\n  \n  Input: Two integers, $N representing the total sum and $M representing the number of parts.\n  Output: An array of integers representing the distribution that maximizes the product.\n  Example: Given N = 6 and M = 3, the function returns [2, 2, 2] as dividing 6 into three parts of 2 each maximizes the product 222 = 8.",
      "sq": "Gjen M numra të plotë pozitivë, shuma e të cilëve është N dhe prodhimi i të cilëve është sa më i madh të jetë e mundur.\n  Jep kombinimin me rendin më të vogël leksikografik nëse ka mundësi të shumta.\n  Funksioni synon të shpërndajë shumën totale N në M pjesë të tilla që prodhimi i këtyre pjesëve të maksimizohet.\n  \n  Hyrja: Dy numra të plotë, $N që përfaqëson shumën totale dhe $M që përfaqëson numrin e pjesëve.\n  Dalja: Një varg numrash të plotë që përfaqëson shpërndarjen që maksimizon prodhimin.\n  Shembull: Duke pasur parasysh N = 6 dhe M = 3, funksioni kthen [2, 2, 2] pasi ndarja e 6 në tre pjesë nga 2 secila maksimizon prodhimin 222 = 8.",
      "hy": "Գտնում է M դրական ամբողջ թվեր, որոնց գումարը N է և որոնց արտադրյալը հնարավորինս մեծ է:\n  Եթե կան բազմաթիվ հնարավորություններ, արդյունք է տալիս ամենափոքր բառարանային կարգով համակցությունը:\n  Ֆունկցիան նպատակ ունի բաշխել ընդհանուր գումարը N M մասերի այնպես, որ այդ մասերի արտադրյալը առավելագույն լինի:\n  \n  Մուտք: Երկու ամբողջ թվեր՝ $N, որը ներկայացնում է ընդհանուր գումարը, և $M, որը ներկայացնում է մասերի քանակը:\n  Ելք: Ամբողջ թվերի զանգված, որը ներկայացնում է բաշխումը, որը առավելագույնացնում է արտադրյալը:\n  Օրինակ: Տրված N = 6 և M = 3, ֆունկցիան վերադարձնում է [2, 2, 2], քանի որ 6-ը բաժանելով երեք մասերի՝ յուրաքանչյուրը 2, արտադրյալը առավելագույն է՝ 222 = 8:",
      "bn": "Mটি ধনাত্মক পূর্ণসংখ্যা খুঁজে বের করে যাদের যোগফল N এবং যাদের গুণফল যতটা সম্ভব বড় হয়। \nযদি একাধিক সম্ভাবনা থাকে তবে ক্ষুদ্রতম অভিধানিক ক্রম সহ সমন্বয় আউটপুট করে। \nফাংশনটি মোট যোগফল N কে M অংশে বিতরণ করার লক্ষ্য রাখে যাতে এই অংশগুলির গুণফল সর্বাধিক হয়।\n\nInput: দুটি পূর্ণসংখ্যা, $N যা মোট যোগফলকে প্রতিনিধিত্ব করে এবং $M যা অংশের সংখ্যা প্রতিনিধিত্ব করে।\nOutput: পূর্ণসংখ্যার একটি অ্যারে যা গুণফল সর্বাধিক করে এমন বিতরণকে প্রতিনিধিত্ব করে।\nExample: N = 6 এবং M = 3 দেওয়া হলে, ফাংশনটি [2, 2, 2] ফেরত দেয় কারণ 6 কে তিনটি 2 অংশে ভাগ করলে গুণফল সর্বাধিক হয় 222 = 8।",
      "bg": "Намира M положителни цели числа, чиято сума е N и чийто произведение е възможно най-голямо.\n  Извежда комбинацията с най-малък лексикографски ред, ако има множество възможности.\n  Функцията цели да разпредели общата сума N на M части така, че произведението на тези части да бъде максимизирано.\n  \n  Вход: Две цели числа, $N представляващо общата сума и $M представляващо броя на частите.\n  Изход: Масив от цели числа, представляващ разпределението, което максимизира произведението.\n  Пример: Дадено N = 6 и M = 3, функцията връща [2, 2, 2], тъй като разделянето на 6 на три части по 2 всяка максимизира произведението 222 = 8.",
      "zh": "找到 M 个正整数，它们的和为 N，并且它们的乘积尽可能大。\n  如果有多个可能性，则输出字典序最小的组合。\n  该函数旨在将总和 N 分配为 M 部分，使这些部分的乘积最大化。\n  \n  输入：两个整数，$N 表示总和，$M 表示部分的数量。\n  输出：一个整数数组，表示使乘积最大化的分配。\n  示例：给定 N = 6 和 M = 3，函数返回 [2, 2, 2]，因为将 6 分成三个部分，每部分为 2 时，乘积 222 = 8 达到最大。",
      "fr": "Trouve M entiers positifs dont la somme est N et dont le produit est aussi grand que possible.\n  Produit la combinaison avec le plus petit ordre lexicographique s'il y a plusieurs possibilités.\n  La fonction vise à distribuer la somme totale N en M parties de manière à maximiser le produit de ces parties.\n  \n  Entrée : Deux entiers, $N représentant la somme totale et $M représentant le nombre de parties.\n  Sortie : Un tableau d'entiers représentant la distribution qui maximise le produit.\n  Exemple : Étant donné N = 6 et M = 3, la fonction retourne [2, 2, 2] car diviser 6 en trois parties de 2 chacune maximise le produit 222 = 8.",
      "de": "Findet M positive ganze Zahlen, deren Summe N ist und deren Produkt so groß wie möglich ist.\nGibt die Kombination mit der kleinsten lexikographischen Ordnung aus, wenn es mehrere Möglichkeiten gibt.\nDie Funktion zielt darauf ab, die Gesamtsumme N in M Teile zu verteilen, sodass das Produkt dieser Teile maximiert wird.\n\nEingabe: Zwei ganze Zahlen, $N, die die Gesamtsumme darstellt, und $M, die die Anzahl der Teile darstellt.\nAusgabe: Ein Array von ganzen Zahlen, das die Verteilung darstellt, die das Produkt maximiert.\nBeispiel: Gegeben N = 6 und M = 3, gibt die Funktion [2, 2, 2] zurück, da die Aufteilung von 6 in drei Teile von jeweils 2 das Produkt 222 = 8 maximiert.",
      "ha": "Nemo lambobi M masu kyau waɗanda jimlarsu ita ce N kuma samfurin su ya fi girma gwargwadon yiwuwa.\n  Yana fitar da haɗin da ke da ƙaramin tsari na lexicographical idan akwai yuwuwar da yawa.\n  Aikin yana nufin rarraba jimlar adadin N zuwa sassa M ta yadda samfurin waɗannan sassan zai zama mafi girma.\n\n  Input: Lambobi guda biyu, $N yana wakiltar jimlar adadin kuma $M yana wakiltar yawan sassa.\n  Output: Jerin lambobi da ke wakiltar rabon da ke ƙara samfurin.\n  Misali: An ba da N = 6 da M = 3, aikin yana dawowa [2, 2, 2] saboda raba 6 zuwa sassa uku na 2 kowanne yana ƙara samfurin 222 = 8.",
      "hi": "M धनात्मक पूर्णांकों को खोजता है जिनका योग N है और जिनका गुणनफल यथासंभव बड़ा है।\n  यदि कई संभावनाएँ हैं, तो सबसे छोटे शब्दकोश क्रम के संयोजन को आउटपुट करता है।\n  यह फ़ंक्शन कुल योग N को M भागों में वितरित करने का लक्ष्य रखता है ताकि इन भागों का गुणनफल अधिकतम हो सके।\n  \n  इनपुट: दो पूर्णांक, $N जो कुल योग का प्रतिनिधित्व करता है और $M जो भागों की संख्या का प्रतिनिधित्व करता है।\n  आउटपुट: पूर्णांकों की एक सरणी जो गुणनफल को अधिकतम करने वाले वितरण का प्रतिनिधित्व करती है।\n  उदाहरण: दिए गए N = 6 और M = 3 के लिए, फ़ंक्शन [2, 2, 2] लौटाता है क्योंकि 6 को प्रत्येक के तीन भागों में विभाजित करने से गुणनफल 222 = 8 अधिकतम होता है।",
      "hu": "Megtalálja azt az M pozitív egész számot, amelynek összege N, és amelynek szorzata a lehető legnagyobb.\n  Több lehetőség esetén a lexikográfiailag legkisebb kombinációt adja meg.\n  A függvény célja, hogy az összeg N-t M részre ossza fel úgy, hogy ezeknek a részeknek a szorzata maximális legyen.\n  \n  Bemenet: Két egész szám, $N az összeg, és $M a részek száma.\n  Kimenet: Egy egész számokat tartalmazó tömb, amely a szorzatot maximalizáló eloszlást képviseli.\n  Példa: Ha N = 6 és M = 3, a függvény [2, 2, 2] értéket ad vissza, mivel a 6 három részre osztása, mindegyik 2, maximalizálja a szorzatot 222 = 8."
    },
    "docstring_bertscore": {
      "sq": "0.980119283792599",
      "hy": "0.9464411054273717",
      "bn": "0.9727242747066702",
      "bg": "0.9750186542380042",
      "zh": "0.9163108629281895",
      "fr": "0.9832081848480726",
      "de": "0.9845874742139789",
      "ha": "0.928980899043262",
      "hi": "0.9354779001765321",
      "hu": "0.9017228518538443"
    }
  },
  {
    "task_id": "PHP/46",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "sq": "<?php\n\n\n/**\n * Llogarit numrin e karaktereve në titullin e një kompozimi.\n * Titulli mund të përmbajë shkronja të mëdha dhe të vogla të anglishtes, shifra, hapësira dhe karaktere të reja rreshti.\n * Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n * \n * Shembull përdorimi:\n * - Për një titull \"234\", funksioni kthen 3.\n * - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të ri rreshti, funksioni kthen 4.\n * \n * @param string $title Titulli i kompozimit.\n * @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e reja rreshti.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է կոմպոզիցիայի վերնագրի սիմվոլների քանակը:\n * Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ:\n * Ֆունկցիան հաշվում է սիմվոլները՝ բացառելով բացատներն ու նոր տողի սիմվոլները:\n * \n * Օրինակ օգտագործում:\n * - \"234\" վերնագրի դեպքում ֆունկցիան վերադարձնում է 3:\n * - \"Ca 45\\n\" վերնագրի դեպքում, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4:\n * \n * @param string $title Կոմպոզիցիայի վերնագիրը:\n * @return int Վերնագրի սիմվոլների քանակը՝ բացառելով բացատներն ու նոր տողի սիմվոլները:\n */\n\nfunction countTitleCharacters(string $title): int ",
      "bn": "<?php\n\n\n/**\n * একটি রচনার শিরোনামে অক্ষরের সংখ্যা গণনা করে।\n * শিরোনামে বড় হাতের এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n * ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে অক্ষরগুলি গণনা করে।\n * \n * উদাহরণ ব্যবহার:\n * - একটি শিরোনামের জন্য \"234\", ফাংশনটি 3 ফেরত দেয়।\n * - একটি শিরোনামের জন্য \"Ca 45\\n\", একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 ফেরত দেয়।\n * \n * @param string $title রচনার শিরোনাম।\n * @return int শিরোনামে অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে।\n */\n\nfunction countTitleCharacters(string $title): int ",
      "bg": "<?php\n\n\n/**\n * Изчислява броя на символите в заглавието на композицията.\n * Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n * Функцията брои символите, изключвайки интервалите и символите за нов ред.\n * \n * Пример за използване:\n * - За заглавие \"234\", функцията връща 3.\n * - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n * \n * @param string $title Заглавието на композицията.\n * @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "zh": "<?php\n\n\n/**\n * 计算作品标题中的字符数量。\n * 标题可以包含大写和小写的英文字母、数字、空格和换行符。\n * 该函数计算字符数量，不包括空格和换行符。\n * \n * 示例用法：\n * - 对于标题 \"234\"，函数返回 3。\n * - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n * \n * @param string $title 作品的标题。\n * @return int 标题中的字符数量，不包括空格和换行符。\n */\n\nfunction countTitleCharacters(string $title): int ",
      "fr": "<?php\n\n\n/**\n * Calcule le nombre de caractères dans le titre d'une composition.\n * Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n * La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n * \n * Exemple d'utilisation :\n * - Pour un titre \"234\", la fonction renvoie 3.\n * - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction renvoie 4.\n * \n * @param string $title Le titre de la composition.\n * @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "de": "<?php\n\n\n/**\n * Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n * Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n * Die Funktion zählt die Zeichen ohne Leerzeichen und Zeilenumbrüche.\n * \n * Beispielverwendung:\n * - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n * - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n * \n * @param string $title Der Titel der Komposition.\n * @return int Die Anzahl der Zeichen im Titel, ohne Leerzeichen und Zeilenumbrüche.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige yawan haruffa a cikin taken rubutu.\n * Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n * Aikin yana ƙididdige haruffa ba tare da haɗa sarari da haruffan sabon layi ba.\n * \n * Misalin amfani:\n * - Don take \"234\", aikin yana dawo da 3.\n * - Don take \"Ca 45\\n\", tare da harafin sabon layi, aikin yana dawo da 4.\n * \n * @param string $title Taken rubutun.\n * @return int Yawan haruffa a cikin taken, ba tare da haɗa sarari da haruffan sabon layi ba.\n */\n\nfunction countTitleCharacters(string $title): int ",
      "hi": "<?php\n\n\n/**\n * एक रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n * शीर्षक में बड़े और छोटे अंग्रेजी अक्षर, अंक, रिक्त स्थान, और नई पंक्ति वर्ण हो सकते हैं।\n * यह फ़ंक्शन रिक्त स्थान और नई पंक्ति वर्णों को छोड़कर वर्णों की गणना करता है।\n * \n * उदाहरण उपयोग:\n * - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n * - शीर्षक \"Ca 45\\n\", जिसमें एक नई पंक्ति वर्ण शामिल है, के लिए फ़ंक्शन 4 लौटाता है।\n * \n * @param string $title रचना का शीर्षक।\n * @return int शीर्षक में वर्णों की संख्या, रिक्त स्थान और नई पंक्ति वर्णों को छोड़कर।\n */\n\nfunction countTitleCharacters(string $title): int ",
      "hu": "<?php\n\n\n/**\n * Kiszámítja a karakterek számát egy kompozíció címében.\n * A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és új sor karaktereket.\n * A függvény megszámolja a karaktereket a szóközök és új sor karakterek kivételével.\n * \n * Példa használat:\n * - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n * - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy új sor karaktert, a függvény 4-et ad vissza.\n * \n * @param string $title A kompozíció címe.\n * @return int A karakterek száma a címben, a szóközök és új sor karakterek kivételével.\n */\n\nfunction countTitleCharacters(string $title): int "
    },
    "prompt_bertscore": {
      "sq": "0.9915488731781086",
      "hy": "0.9815567718601486",
      "bn": "0.9794693651858529",
      "bg": "0.9904885842041444",
      "zh": "0.968487885939958",
      "fr": "0.9853589546139184",
      "de": "0.9524792703804513",
      "ha": "0.9589585934098094",
      "hi": "0.9873194364747327",
      "hu": "0.9912926399865736"
    },
    "canonical_solution": "{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}",
    "instruction": {
      "en": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në gjuhën shqipe duke përdorur maksimumi 500 karaktere.",
      "hy": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nՏվեք կարճ բնական լեզվով նկարագրություն (docstring) PHP կոդի համար հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen.",
      "ha": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जो अधिकतम 500 वर्णों का हो।",
      "hu": "function countTitleCharacters(string $title): int\n{\n    $count = 0;\n    for ($i = 0; $i < strlen($title); $i++) {\n        if ($title[$i] != \" \" && $title[$i] != \"\\n\") {\n            $count++;\n        }\n    }\n    return $count;\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9230809808353827",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9120311727384118",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(countTitleCharacters(\"234\") === 3, 'Testcase 1 failed');\n    assert(countTitleCharacters(\"Ca 45\") === 4, 'Testcase 2 failed');\n    assert(countTitleCharacters(\" \\nCa 45\\n \") === 4, 'Testcase 3 failed');\n    assert(countTitleCharacters(\"\") === 0, 'Testcase 5 failed');\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countTitleCharacters",
    "signature": "function countTitleCharacters(string $title): int",
    "docstring": {
      "en": "* Calculates the number of characters in a composition's title.\n * The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n * The function counts the characters excluding spaces and newline characters.\n * \n * Example usage:\n * - For a title \"234\", the function returns 3.\n * - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n * \n * @param string $title The title of the composition.\n * @return int The number of characters in the title, excluding spaces and newline characters.  Calculates the number of characters in a composition's title.\n  The title may contain uppercase and lowercase English letters, digits, spaces, and newline characters.\n  The function counts the characters excluding spaces and newline characters.\n  \n  Example usage:\n  - For a title \"234\", the function returns 3.\n  - For a title \"Ca 45\\n\", including a newline character, the function returns 4.\n  \n  @param string $title The title of the composition.\n  @return int The number of characters in the title, excluding spaces and newline characters.",
      "sq": "* Llogarit numrin e karaktereve në titullin e një kompozimi.\n * Titulli mund të përmbajë shkronja të mëdha dhe të vogla angleze, shifra, hapësira dhe karaktere të rreshtave të rinj.\n * Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e rreshtave të rinj.\n * \n * Shembull përdorimi:\n * - Për një titull \"234\", funksioni kthen 3.\n * - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të rreshtit të ri, funksioni kthen 4.\n * \n * @param string $title Titulli i kompozimit.\n * @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e rreshtave të rinj. Llogarit numrin e karaktereve në titullin e një kompozimi.\n  Titulli mund të përmbajë shkronja të mëdha dhe të vogla angleze, shifra, hapësira dhe karaktere të rreshtave të rinj.\n  Funksioni numëron karakteret duke përjashtuar hapësirat dhe karakteret e rreshtave të rinj.\n  \n  Shembull përdorimi:\n  - Për një titull \"234\", funksioni kthen 3.\n  - Për një titull \"Ca 45\\n\", duke përfshirë një karakter të rreshtit të ri, funksioni kthen 4.\n  \n  @param string $title Titulli i kompozimit.\n  @return int Numri i karaktereve në titull, duke përjashtuar hapësirat dhe karakteret e rreshtave të rinj.",
      "hy": "* Հաշվում է ստեղծագործության վերնագրի մեջ գտնվող սիմվոլների քանակը:\n * Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ:\n * Ֆունկցիան հաշվում է սիմվոլները՝ բացի բացատներից և նոր տողի սիմվոլներից:\n * \n * Օգտագործման օրինակ:\n * - \"234\" վերնագրի դեպքում ֆունկցիան վերադարձնում է 3:\n * - \"Ca 45\\n\" վերնագրի դեպքում, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4:\n * \n * @param string $title Ստեղծագործության վերնագիրը:\n * @return int Վերնագրի սիմվոլների քանակը՝ բացի բացատներից և նոր տողի սիմվոլներից: Հաշվում է ստեղծագործության վերնագրի մեջ գտնվող սիմվոլների քանակը:\n  Վերնագիրը կարող է պարունակել մեծատառ և փոքրատառ անգլերեն տառեր, թվեր, բացատներ և նոր տողի սիմվոլներ:\n  Ֆունկցիան հաշվում է սիմվոլները՝ բացի բացատներից և նոր տողի սիմվոլներից:\n  \n  Օգտագործման օրինակ:\n  - \"234\" վերնագրի դեպքում ֆունկցիան վերադարձնում է 3:\n  - \"Ca 45\\n\" վերնագրի դեպքում, ներառյալ նոր տողի սիմվոլը, ֆունկցիան վերադարձնում է 4:\n  \n  @param string $title Ստեղծագործության վերնագիրը:\n  @return int Վերնագրի սիմվոլների քանակը՝ բացի բացատներից և նոր տողի սիմվոլներից:",
      "bn": "* একটি রচনার শিরোনামের অক্ষরের সংখ্যা গণনা করে।\n * শিরোনামে বড় এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n * ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে অক্ষরগুলি গণনা করে।\n * \n * উদাহরণ ব্যবহার:\n * - \"234\" শিরোনামের জন্য, ফাংশনটি 3 প্রদান করে।\n * - \"Ca 45\\n\" শিরোনামের জন্য, একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 প্রদান করে।\n * \n * @param string $title রচনার শিরোনাম।\n * @return int শিরোনামের অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে। একটি রচনার শিরোনামের অক্ষরের সংখ্যা গণনা করে।\n  শিরোনামে বড় এবং ছোট হাতের ইংরেজি অক্ষর, সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর থাকতে পারে।\n  ফাংশনটি স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে অক্ষরগুলি গণনা করে।\n  \n  উদাহরণ ব্যবহার:\n  - \"234\" শিরোনামের জন্য, ফাংশনটি 3 প্রদান করে।\n  - \"Ca 45\\n\" শিরোনামের জন্য, একটি নতুন লাইন অক্ষর সহ, ফাংশনটি 4 প্রদান করে।\n  \n  @param string $title রচনার শিরোনাম।\n  @return int শিরোনামের অক্ষরের সংখ্যা, স্পেস এবং নতুন লাইন অক্ষর বাদ দিয়ে।",
      "bg": "* Изчислява броя на символите в заглавието на композиция.\n * Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n * Функцията брои символите, като изключва интервалите и символите за нов ред.\n * \n * Пример за използване:\n * - За заглавие \"234\", функцията връща 3.\n * - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n * \n * @param string $title Заглавието на композицията.\n * @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред. Изчислява броя на символите в заглавието на композиция.\n  Заглавието може да съдържа главни и малки английски букви, цифри, интервали и символи за нов ред.\n  Функцията брои символите, като изключва интервалите и символите за нов ред.\n  \n  Пример за използване:\n  - За заглавие \"234\", функцията връща 3.\n  - За заглавие \"Ca 45\\n\", включително символ за нов ред, функцията връща 4.\n  \n  @param string $title Заглавието на композицията.\n  @return int Броят на символите в заглавието, изключвайки интервалите и символите за нов ред.",
      "zh": "* 计算作品标题中的字符数。\n * 标题可能包含大写和小写的英文字母、数字、空格和换行符。\n * 该函数计算字符数时不包括空格和换行符。\n * \n * 示例用法：\n * - 对于标题 \"234\"，函数返回 3。\n * - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n * \n * @param string $title 作品的标题。\n * @return int 标题中的字符数，不包括空格和换行符。 计算作品标题中的字符数。\n  标题可能包含大写和小写的英文字母、数字、空格和换行符。\n  该函数计算字符数时不包括空格和换行符。\n  \n  示例用法：\n  - 对于标题 \"234\"，函数返回 3。\n  - 对于标题 \"Ca 45\\n\"，包括一个换行符，函数返回 4。\n  \n  @param string $title 作品的标题。\n  @return int 标题中的字符数，不包括空格和换行符。",
      "fr": "* Calcule le nombre de caractères dans le titre d'une composition.\n * Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n * La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n * \n * Exemple d'utilisation :\n * - Pour un titre \"234\", la fonction retourne 3.\n * - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction retourne 4.\n * \n * @param string $title Le titre de la composition.\n * @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.  Calcule le nombre de caractères dans le titre d'une composition.\n  Le titre peut contenir des lettres majuscules et minuscules anglaises, des chiffres, des espaces et des caractères de nouvelle ligne.\n  La fonction compte les caractères en excluant les espaces et les caractères de nouvelle ligne.\n  \n  Exemple d'utilisation :\n  - Pour un titre \"234\", la fonction retourne 3.\n  - Pour un titre \"Ca 45\\n\", incluant un caractère de nouvelle ligne, la fonction retourne 4.\n  \n  @param string $title Le titre de la composition.\n  @return int Le nombre de caractères dans le titre, en excluant les espaces et les caractères de nouvelle ligne.",
      "de": "* Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n * Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n * Die Funktion zählt die Zeichen ohne Leerzeichen und Zeilenumbrüche.\n * \n * Beispielverwendung:\n * - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n * - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n * \n * @param string $title Der Titel der Komposition.\n * @return int Die Anzahl der Zeichen im Titel, ohne Leerzeichen und Zeilenumbrüche. Berechnet die Anzahl der Zeichen im Titel einer Komposition.\n  Der Titel kann Groß- und Kleinbuchstaben des englischen Alphabets, Ziffern, Leerzeichen und Zeilenumbrüche enthalten.\n  Die Funktion zählt die Zeichen ohne Leerzeichen und Zeilenumbrüche.\n  \n  Beispielverwendung:\n  - Für einen Titel \"234\" gibt die Funktion 3 zurück.\n  - Für einen Titel \"Ca 45\\n\", einschließlich eines Zeilenumbruchs, gibt die Funktion 4 zurück.\n  \n  @param string $title Der Titel der Komposition.\n  @return int Die Anzahl der Zeichen im Titel, ohne Leerzeichen und Zeilenumbrüche.",
      "ha": "* Lissafa adadin haruffa a cikin taken rubutu.\n * Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n * Aikin yana lissafa haruffa banda sarari da haruffan sabon layi.\n * \n * Misalin amfani:\n * - Don take \"234\", aikin yana dawowa 3.\n * - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n * \n * @param string $title Taken rubutun.\n * @return int Adadin haruffa a cikin taken, banda sarari da haruffan sabon layi.  Lissafa adadin haruffa a cikin taken rubutu.\n  Taken na iya ƙunsar manyan da ƙananan haruffan Ingilishi, lambobi, sarari, da haruffan sabon layi.\n  Aikin yana lissafa haruffa banda sarari da haruffan sabon layi.\n  \n  Misalin amfani:\n  - Don take \"234\", aikin yana dawowa 3.\n  - Don take \"Ca 45\\n\", ciki har da harafin sabon layi, aikin yana dawowa 4.\n  \n  @param string $title Taken rubutun.\n  @return int Adadin haruffa a cikin taken, banda sarari da haruffan sabon layi.",
      "hi": "* एक रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n * शीर्षक में बड़े और छोटे अक्षरों के अंग्रेजी अक्षर, अंक, स्पेस, और नई पंक्ति के वर्ण हो सकते हैं।\n * यह फ़ंक्शन स्पेस और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n * \n * उदाहरण उपयोग:\n * - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n * - शीर्षक \"Ca 45\\n\", जिसमें एक नई पंक्ति का वर्ण शामिल है, के लिए फ़ंक्शन 4 लौटाता है।\n * \n * @param string $title रचना का शीर्षक।\n * @return int शीर्षक में वर्णों की संख्या, स्पेस और नई पंक्ति के वर्णों को छोड़कर।  एक रचना के शीर्षक में वर्णों की संख्या की गणना करता है।\n  शीर्षक में बड़े और छोटे अक्षरों के अंग्रेजी अक्षर, अंक, स्पेस, और नई पंक्ति के वर्ण हो सकते हैं।\n  यह फ़ंक्शन स्पेस और नई पंक्ति के वर्णों को छोड़कर वर्णों की गणना करता है।\n  \n  उदाहरण उपयोग:\n  - शीर्षक \"234\" के लिए, फ़ंक्शन 3 लौटाता है।\n  - शीर्षक \"Ca 45\\n\", जिसमें एक नई पंक्ति का वर्ण शामिल है, के लिए फ़ंक्शन 4 लौटाता है।\n  \n  @param string $title रचना का शीर्षक।\n  @return int शीर्षक में वर्णों की संख्या, स्पेस और नई पंक्ति के वर्णों को छोड़कर।",
      "hu": "* Kiszámítja a karakterek számát egy kompozíció címében.\n * A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és újsor karaktereket.\n * A függvény a karaktereket a szóközök és újsor karakterek kivételével számolja.\n * \n * Példa használat:\n * - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n * - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy újsor karaktert, a függvény 4-et ad vissza.\n * \n * @param string $title A kompozíció címe.\n * @return int A karakterek száma a címben, a szóközök és újsor karakterek kivételével.  Kiszámítja a karakterek számát egy kompozíció címében.\n  A cím tartalmazhat nagy- és kisbetűs angol betűket, számjegyeket, szóközöket és újsor karaktereket.\n  A függvény a karaktereket a szóközök és újsor karakterek kivételével számolja.\n  \n  Példa használat:\n  - Egy \"234\" cím esetén a függvény 3-at ad vissza.\n  - Egy \"Ca 45\\n\" cím esetén, amely tartalmaz egy újsor karaktert, a függvény 4-et ad vissza.\n  \n  @param string $title A kompozíció címe.\n  @return int A karakterek száma a címben, a szóközök és újsor karakterek kivételével."
    },
    "docstring_bertscore": {
      "sq": "0.9873851831308553",
      "hy": "0.9255177783499187",
      "bn": "0.9707129434683109",
      "bg": "0.9802587223200856",
      "zh": "0.9279704662949375",
      "fr": "0.9755219836235466",
      "de": "0.9389608839079788",
      "ha": "0.9450242749194498",
      "hi": "0.9709211081076354",
      "hu": "0.9819284093030648"
    }
  },
  {
    "task_id": "PHP/47",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of students enrolled in both courses A and B.\n * Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n * this function calculates the total number of students who have enrolled in both courses.\n * \n * The function accepts two parameters:\n * - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n * - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n * \n * The function returns an integer representing the number of students enrolled in both courses.\n * \n * Example:\n * If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n * the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e studentëve të regjistruar në të dyja kurset A dhe B.\n * Duke pasur dy vargje që përfaqësojnë ID-të e studentëve të atyre që janë regjistruar në kurset A dhe B,\n * kjo funksion llogarit numrin total të studentëve që janë regjistruar në të dyja kurset.\n * \n * Funksioni pranon dy parametra:\n * - $courseA (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin A.\n * - $courseB (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin B.\n * \n * Funksioni kthen një numër të plotë që përfaqëson numrin e studentëve të regjistruar në të dyja kurset.\n * \n * Shembull:\n * Nëse kursi A ka studentë me ID-të [1, 2, 3, 4, 5] dhe kursi B ka studentë me ID-të [1, 3, 4, 5, 6],\n * funksioni duhet të kthejë 4 sepse studentët me ID-të 1, 3, 4, dhe 5 janë regjistruar në të dyja kurset.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է այն ուսանողների քանակը, ովքեր գրանցված են ինչպես A, այնպես էլ B դասընթացներում:\n * Տրված են երկու զանգվածներ, որոնք ներկայացնում են այն ուսանողների ID-ները, ովքեր գրանցված են A և B դասընթացներում,\n * այս ֆունկցիան հաշվարկում է այն ուսանողների ընդհանուր քանակը, ովքեր գրանցված են երկու դասընթացներում:\n * \n * Ֆունկցիան ընդունում է երկու պարամետր:\n * - $courseA (array): Ամբողջ թվերի զանգված, որը ներկայացնում է A դասընթացում գրանցված ուսանողների ID-ները:\n * - $courseB (array): Ամբողջ թվերի զանգված, որը ներկայացնում է B դասընթացում գրանցված ուսանողների ID-ները:\n * \n * Ֆունկցիան վերադարձնում է ամբողջ թիվ, որը ներկայացնում է այն ուսանողների քանակը, ովքեր գրանցված են երկու դասընթացներում:\n * \n * Օրինակ:\n * Եթե A դասընթացում գրանցված են ուսանողներ ID-ներով [1, 2, 3, 4, 5], իսկ B դասընթացում գրանցված են ուսանողներ ID-ներով [1, 3, 4, 5, 6],\n * ֆունկցիան պետք է վերադարձնի 4, որովհետև ուսանողներ ID-ներով 1, 3, 4 և 5 գրանցված են երկու դասընթացներում:\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "bn": "<?php\n\n\n/**\n * উভয় কোর্স A এবং B-তে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা গণনা করে।\n * দুটি অ্যারে দেওয়া হয়েছে যা কোর্স A এবং B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে,\n * এই ফাংশনটি উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের মোট সংখ্যা গণনা করে।\n * \n * ফাংশনটি দুটি প্যারামিটার গ্রহণ করে:\n * - $courseA (array): একটি অ্যারে যা কোর্স A-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n * - $courseB (array): একটি অ্যারে যা কোর্স B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n * \n * ফাংশনটি একটি পূর্ণসংখ্যা ফেরত দেয় যা উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা উপস্থাপন করে।\n * \n * উদাহরণ:\n * যদি কোর্স A-তে শিক্ষার্থীদের আইডি [1, 2, 3, 4, 5] এবং কোর্স B-তে শিক্ষার্থীদের আইডি [1, 3, 4, 5, 6] হয়,\n * তাহলে ফাংশনটি 4 ফেরত দেবে কারণ আইডি 1, 3, 4, এবং 5 সহ শিক্ষার্থীরা উভয় কোর্সে ভর্তি।\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "bg": "<?php\n\n\n/**\n * Брои броя на студентите, записани и в двата курса A и B.\n * Дадени са два масива, представляващи идентификационните номера на студентите, записани в курсове A и B,\n * тази функция изчислява общия брой на студентите, които са записани и в двата курса.\n * \n * Функцията приема два параметъра:\n * - $courseA (array): Масив от цели числа, представляващ идентификационните номера на студентите, записани в курс A.\n * - $courseB (array): Масив от цели числа, представляващ идентификационните номера на студентите, записани в курс B.\n * \n * Функцията връща цяло число, представляващо броя на студентите, записани и в двата курса.\n * \n * Пример:\n * Ако курс A има студенти с идентификационни номера [1, 2, 3, 4, 5] и курс B има студенти с идентификационни номера [1, 3, 4, 5, 6],\n * функцията трябва да върне 4, защото студентите с идентификационни номера 1, 3, 4 и 5 са записани и в двата курса.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "zh": "<?php\n\n\n/**\n * 计算同时注册了课程 A 和课程 B 的学生人数。\n * 给定两个数组，分别表示注册了课程 A 和课程 B 的学生 ID，\n * 此函数计算同时注册了这两个课程的学生总数。\n * \n * 该函数接受两个参数：\n * - $courseA (array): 一个整数数组，表示注册了课程 A 的学生 ID。\n * - $courseB (array): 一个整数数组，表示注册了课程 B 的学生 ID。\n * \n * 该函数返回一个整数，表示同时注册了这两个课程的学生人数。\n * \n * 示例：\n * 如果课程 A 的学生 ID 是 [1, 2, 3, 4, 5]，课程 B 的学生 ID 是 [1, 3, 4, 5, 6]，\n * 函数应该返回 4，因为 ID 为 1、3、4 和 5 的学生同时注册了这两个课程。\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre d'étudiants inscrits dans les deux cours A et B.\n * Étant donné deux tableaux représentant les identifiants des étudiants inscrits dans les cours A et B,\n * cette fonction calcule le nombre total d'étudiants inscrits dans les deux cours.\n * \n * La fonction accepte deux paramètres :\n * - $courseA (array) : Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours A.\n * - $courseB (array) : Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours B.\n * \n * La fonction retourne un entier représentant le nombre d'étudiants inscrits dans les deux cours.\n * \n * Exemple :\n * Si le cours A a des étudiants avec les identifiants [1, 2, 3, 4, 5] et le cours B a des étudiants avec les identifiants [1, 3, 4, 5, 6],\n * la fonction doit retourner 4 car les étudiants avec les identifiants 1, 3, 4 et 5 sont inscrits dans les deux cours.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der Studenten, die in beiden Kursen A und B eingeschrieben sind.\n * Gegeben sind zwei Arrays, die die Studenten-IDs derjenigen darstellen, die sich in die Kurse A und B eingeschrieben haben,\n * berechnet diese Funktion die Gesamtanzahl der Studenten, die in beiden Kursen eingeschrieben sind.\n * \n * Die Funktion akzeptiert zwei Parameter:\n * - $courseA (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs A eingeschriebenen Studenten darstellt.\n * - $courseB (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs B eingeschriebenen Studenten darstellt.\n * \n * Die Funktion gibt eine ganze Zahl zurück, die die Anzahl der in beiden Kursen eingeschriebenen Studenten darstellt.\n * \n * Beispiel:\n * Wenn Kurs A Studenten mit den IDs [1, 2, 3, 4, 5] hat und Kurs B Studenten mit den IDs [1, 3, 4, 5, 6] hat,\n * sollte die Funktion 4 zurückgeben, da die Studenten mit den IDs 1, 3, 4 und 5 in beiden Kursen eingeschrieben sind.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "ha": "<?php\n\n\n/**\n * Yana ƙidaya yawan ɗaliban da suka yi rajista a cikin duka kwasa-kwasan A da B.\n * An ba da jerin abubuwa guda biyu da ke wakiltar lambobin ID na ɗaliban da suka yi rajista a kwasa-kwasan A da B,\n * wannan aikin yana ƙididdige yawan ɗaliban da suka yi rajista a cikin duka kwasa-kwasan.\n * \n * Aikin yana karɓar sigogi guda biyu:\n * - $courseA (array): Jerin lambobi da ke wakiltar lambobin ID na ɗaliban da suka yi rajista a kwas A.\n * - $courseB (array): Jerin lambobi da ke wakiltar lambobin ID na ɗaliban da suka yi rajista a kwas B.\n * \n * Aikin yana mayar da lamba mai nuna yawan ɗaliban da suka yi rajista a cikin duka kwasa-kwasan.\n * \n * Misali:\n * Idan kwas A yana da ɗalibai tare da lambobin ID [1, 2, 3, 4, 5] kuma kwas B yana da ɗalibai tare da lambobin ID [1, 3, 4, 5, 6],\n * aikin ya kamata ya mayar da 4 saboda ɗalibai tare da lambobin ID 1, 3, 4, da 5 suna rajista a cikin duka kwasa-kwasan.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hi": "<?php\n\n\n/**\n * दोनों पाठ्यक्रम A और B में नामांकित छात्रों की संख्या गिनता है।\n * दिए गए दो ऐरे जो उन छात्रों के आईडी का प्रतिनिधित्व करते हैं जिन्होंने पाठ्यक्रम A और B में नामांकन किया है,\n * यह फ़ंक्शन उन छात्रों की कुल संख्या की गणना करता है जिन्होंने दोनों पाठ्यक्रमों में नामांकन किया है।\n * \n * फ़ंक्शन दो पैरामीटर स्वीकार करता है:\n * - $courseA (array): एक ऐरे जो पाठ्यक्रम A में नामांकित छात्रों के आईडी का प्रतिनिधित्व करता है।\n * - $courseB (array): एक ऐरे जो पाठ्यक्रम B में नामांकित छात्रों के आईडी का प्रतिनिधित्व करता है।\n * \n * फ़ंक्शन एक पूर्णांक लौटाता है जो दोनों पाठ्यक्रमों में नामांकित छात्रों की संख्या का प्रतिनिधित्व करता है।\n * \n * उदाहरण:\n * यदि पाठ्यक्रम A में छात्रों के आईडी [1, 2, 3, 4, 5] हैं और पाठ्यक्रम B में छात्रों के आईडी [1, 3, 4, 5, 6] हैं,\n * तो फ़ंक्शन को 4 लौटाना चाहिए क्योंकि आईडी 1, 3, 4, और 5 वाले छात्र दोनों पाठ्यक्रमों में नामांकित हैं।\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int ",
      "hu": "<?php\n\n\n/**\n * Megszámolja azon diákok számát, akik mindkét kurzusra, A-ra és B-re beiratkoztak.\n * Két tömböt kap, amelyek az A és B kurzusokra beiratkozott diákok azonosítóit tartalmazzák,\n * ez a függvény kiszámítja azon diákok összlétszámát, akik mindkét kurzusra beiratkoztak.\n * \n * A függvény két paramétert fogad el:\n * - $courseA (array): Egész számokat tartalmazó tömb, amely az A kurzusra beiratkozott diákok azonosítóit tartalmazza.\n * - $courseB (array): Egész számokat tartalmazó tömb, amely a B kurzusra beiratkozott diákok azonosítóit tartalmazza.\n * \n * A függvény egy egész számot ad vissza, amely a mindkét kurzusra beiratkozott diákok számát jelenti.\n * \n * Példa:\n * Ha az A kurzusra a [1, 2, 3, 4, 5] azonosítójú diákok, és a B kurzusra a [1, 3, 4, 5, 6] azonosítójú diákok iratkoztak be,\n * akkor a függvénynek 4-et kell visszaadnia, mert az 1, 3, 4 és 5 azonosítójú diákok mindkét kurzusra beiratkoztak.\n */\n\nfunction countCommonStudents(array $courseA, array $courseB): int "
    },
    "prompt_bertscore": {
      "sq": "0.9791448031432419",
      "hy": "0.9255239358917308",
      "bn": "0.9668803702662427",
      "bg": "0.976122046004653",
      "zh": "0.9416755653255827",
      "fr": "0.9792963581239715",
      "de": "0.983056629867343",
      "ha": "0.9476843329822691",
      "hi": "0.9775986642572664",
      "hu": "0.951578084341696"
    },
    "canonical_solution": "{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}",
    "instruction": {
      "en": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nPHP կոդի համար տրամադրեք հակիրճ բնական լեզվով նկարագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nПредоставете кратко описание на PHP кода на български език, използвайки не повече от 500 символа.",
      "zh": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\n请提供一段不超过500个字符的中文自然语言描述（文档字符串），用于说明这段PHP代码的功能。",
      "fr": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP cikin Hausa ta amfani da haruffa 500 ko kasa da haka.",
      "hi": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function countCommonStudents(array $courseA, array $courseB): int\n{\n    // Find the intersection of both arrays to get common student IDs\n    $commonStudents = array_intersect($courseA, $courseB);\n    // Count and return the number of common student IDs\n    return count($commonStudents);\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9353905028088767",
      "bn": "0.8743148387267452",
      "bg": "0.8358939162203464",
      "zh": "0.8468438597688581",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.9405372146118718",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n    assert(countCommonStudents([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]) === 4); // Expected: 4\n    assert(countCommonStudents([2, 4, 6, 8], [1, 3, 5, 7]) === 0); // Expected: 0, no common students\n    assert(countCommonStudents([1, 3, 5, 7, 9], [2, 3, 5, 7]) === 3); // Expected: 3, students with IDs 3, 5, and 7 are common\n    \n}\n\n\nmain();\n?>",
    "entry_point": "countCommonStudents",
    "signature": "function countCommonStudents(array $courseA, array $courseB): int",
    "docstring": {
      "en": "Counts the number of students enrolled in both courses A and B.\n  Given two arrays representing the student IDs of those who have enrolled in courses A and B,\n  this function calculates the total number of students who have enrolled in both courses.\n  \n  The function accepts two parameters:\n  - $courseA (array): An array of integers representing the IDs of students enrolled in course A.\n  - $courseB (array): An array of integers representing the IDs of students enrolled in course B.\n  \n  The function returns an integer representing the number of students enrolled in both courses.\n  \n  Example:\n  If course A has students with IDs [1, 2, 3, 4, 5] and course B has students with IDs [1, 3, 4, 5, 6],\n  the function should return 4 because students with IDs 1, 3, 4, and 5 are enrolled in both courses.",
      "sq": "Numëron numrin e studentëve të regjistruar në të dy kurset A dhe B.\n  Duke pasur dy vargje që përfaqësojnë ID-të e studentëve që janë regjistruar në kurset A dhe B,\n  kjo funksion llogarit numrin total të studentëve që janë regjistruar në të dy kurset.\n  \n  Funksioni pranon dy parametra:\n  - $courseA (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin A.\n  - $courseB (array): Një varg i numrave të plotë që përfaqësojnë ID-të e studentëve të regjistruar në kursin B.\n  \n  Funksioni kthen një numër të plotë që përfaqëson numrin e studentëve të regjistruar në të dy kurset.\n  \n  Shembull:\n  Nëse kursi A ka studentë me ID [1, 2, 3, 4, 5] dhe kursi B ka studentë me ID [1, 3, 4, 5, 6],\n  funksioni duhet të kthejë 4 sepse studentët me ID 1, 3, 4, dhe 5 janë regjistruar në të dy kurset.",
      "hy": "Հաշվում է այն ուսանողների քանակը, որոնք գրանցված են և՛ A, և՛ B դասընթացներում:\n  Տրված երկու զանգվածներ, որոնք ներկայացնում են այն ուսանողների ID-ները, ովքեր գրանցված են A և B դասընթացներում,\n  այս ֆունկցիան հաշվարկում է այն ուսանողների ընդհանուր քանակը, ովքեր գրանցված են երկու դասընթացներում:\n  \n  Ֆունկցիան ընդունում է երկու պարամետր.\n  - $courseA (array): Ամբողջ թվերի զանգված, որը ներկայացնում է A դասընթացում գրանցված ուսանողների ID-ները:\n  - $courseB (array): Ամբողջ թվերի զանգված, որը ներկայացնում է B դասընթացում գրանցված ուսանողների ID-ները:\n  \n  Ֆունկցիան վերադարձնում է ամբողջ թիվ, որը ներկայացնում է այն ուսանողների քանակը, որոնք գրանցված են երկու դասընթացներում:\n  \n  Օրինակ:\n  Եթե A դասընթացում ուսանողները ունեն ID-ներ [1, 2, 3, 4, 5], իսկ B դասընթացում ուսանողները ունեն ID-ներ [1, 3, 4, 5, 6],\n  ֆունկցիան պետք է վերադարձնի 4, քանի որ ուսանողները, որոնք ունեն ID-ներ 1, 3, 4 և 5, գրանցված են երկու դասընթացներում:",
      "bn": "কোর্স A এবং B উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা গণনা করে।\n  দুটি অ্যারে দেওয়া হয়েছে যা কোর্স A এবং B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে,\n  এই ফাংশনটি উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের মোট সংখ্যা গণনা করে।\n  \n  ফাংশনটি দুটি প্যারামিটার গ্রহণ করে:\n  - $courseA (array): একটি পূর্ণসংখ্যার অ্যারে যা কোর্স A-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n  - $courseB (array): একটি পূর্ণসংখ্যার অ্যারে যা কোর্স B-তে ভর্তি হওয়া শিক্ষার্থীদের আইডি উপস্থাপন করে।\n  \n  ফাংশনটি একটি পূর্ণসংখ্যা প্রদান করে যা উভয় কোর্সে ভর্তি হওয়া শিক্ষার্থীদের সংখ্যা উপস্থাপন করে।\n  \n  উদাহরণ:\n  যদি কোর্স A-তে শিক্ষার্থীদের আইডি [1, 2, 3, 4, 5] এবং কোর্স B-তে শিক্ষার্থীদের আইডি [1, 3, 4, 5, 6] হয়,\n  তাহলে ফাংশনটি 4 প্রদান করা উচিত কারণ আইডি 1, 3, 4, এবং 5 সহ শিক্ষার্থীরা উভয় কোর্সে ভর্তি হয়েছে।",
      "bg": "Брои броя на студентите, записани и в двата курса A и B.\n  Дадени са два масива, представляващи идентификационните номера на студентите, записани в курсовете A и B,\n  тази функция изчислява общия брой на студентите, които са записани и в двата курса.\n  \n  Функцията приема два параметъра:\n  - $courseA (масив): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс A.\n  - $courseB (масив): Масив от цели числа, представляващи идентификационните номера на студентите, записани в курс B.\n  \n  Функцията връща цяло число, представляващо броя на студентите, записани и в двата курса.\n  \n  Пример:\n  Ако курс A има студенти с идентификационни номера [1, 2, 3, 4, 5] и курс B има студенти с идентификационни номера [1, 3, 4, 5, 6],\n  функцията трябва да върне 4, защото студентите с идентификационни номера 1, 3, 4 и 5 са записани и в двата курса.",
      "zh": "计算同时注册课程A和B的学生人数。\n给定两个数组，分别表示注册课程A和B的学生ID，\n此函数计算同时注册这两门课程的学生总数。\n\n函数接受两个参数：\n- $courseA (array): 一个整数数组，表示注册课程A的学生ID。\n- $courseB (array): 一个整数数组，表示注册课程B的学生ID。\n\n函数返回一个整数，表示同时注册两门课程的学生人数。\n\n示例：\n如果课程A的学生ID为[1, 2, 3, 4, 5]，课程B的学生ID为[1, 3, 4, 5, 6]，\n函数应返回4，因为ID为1, 3, 4和5的学生同时注册了这两门课程。",
      "fr": "Compte le nombre d'étudiants inscrits dans les deux cours A et B.\n  Étant donné deux tableaux représentant les identifiants des étudiants inscrits dans les cours A et B,\n  cette fonction calcule le nombre total d'étudiants inscrits dans les deux cours.\n  \n  La fonction accepte deux paramètres :\n  - $courseA (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours A.\n  - $courseB (array): Un tableau d'entiers représentant les identifiants des étudiants inscrits dans le cours B.\n  \n  La fonction renvoie un entier représentant le nombre d'étudiants inscrits dans les deux cours.\n  \n  Exemple :\n  Si le cours A a des étudiants avec les identifiants [1, 2, 3, 4, 5] et le cours B a des étudiants avec les identifiants [1, 3, 4, 5, 6],\n  la fonction devrait renvoyer 4 car les étudiants avec les identifiants 1, 3, 4 et 5 sont inscrits dans les deux cours.",
      "de": "Zählt die Anzahl der Studenten, die in beiden Kursen A und B eingeschrieben sind.\n  Gegeben zwei Arrays, die die Studenten-IDs derjenigen darstellen, die sich in die Kurse A und B eingeschrieben haben,\n  berechnet diese Funktion die Gesamtanzahl der Studenten, die in beiden Kursen eingeschrieben sind.\n  \n  Die Funktion akzeptiert zwei Parameter:\n  - $courseA (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs A eingeschriebenen Studenten darstellt.\n  - $courseB (array): Ein Array von ganzen Zahlen, das die IDs der in Kurs B eingeschriebenen Studenten darstellt.\n  \n  Die Funktion gibt eine ganze Zahl zurück, die die Anzahl der in beiden Kursen eingeschriebenen Studenten darstellt.\n  \n  Beispiel:\n  Wenn Kurs A Studenten mit den IDs [1, 2, 3, 4, 5] hat und Kurs B Studenten mit den IDs [1, 3, 4, 5, 6] hat,\n  sollte die Funktion 4 zurückgeben, da die Studenten mit den IDs 1, 3, 4 und 5 in beiden Kursen eingeschrieben sind.",
      "ha": "Yana ƙididdige yawan ɗaliban da suka yi rajista a duka darussa A da B.  \n  An ba da jerin lambobi guda biyu da ke wakiltar lambobin ɗaliban da suka yi rajista a darussa A da B,  \n  wannan aikin yana ƙididdige jimillar yawan ɗaliban da suka yi rajista a duka darussa.  \n  \n  Aikin yana karɓar sigogi guda biyu:  \n  - $courseA (array): Jerin lambobi na lambobin ɗaliban da suka yi rajista a darasi A.  \n  - $courseB (array): Jerin lambobi na lambobin ɗaliban da suka yi rajista a darasi B.  \n  \n  Aikin yana mayar da lamba mai nuna yawan ɗaliban da suka yi rajista a duka darussa.  \n  \n  Misali:  \n  Idan darasi A yana da ɗalibai tare da lambobi [1, 2, 3, 4, 5] kuma darasi B yana da ɗalibai tare da lambobi [1, 3, 4, 5, 6],  \n  aikin ya kamata ya mayar da 4 saboda ɗalibai da lambobi 1, 3, 4, da 5 sun yi rajista a duka darussa.",
      "hi": "दो कोर्स A और B में नामांकित छात्रों की संख्या गिनता है।\nदो ऐरे दिए गए हैं जो उन छात्रों के IDs का प्रतिनिधित्व करते हैं जिन्होंने कोर्स A और B में नामांकन किया है,\nयह फ़ंक्शन उन छात्रों की कुल संख्या की गणना करता है जिन्होंने दोनों कोर्स में नामांकन किया है।\nफ़ंक्शन दो पैरामीटर स्वीकार करता है:\n- $courseA (array): पूर्णांकों का एक ऐरे जो कोर्स A में नामांकित छात्रों के IDs का प्रतिनिधित्व करता है।\n- $courseB (array): पूर्णांकों का एक ऐरे जो कोर्स B में नामांकित छात्रों के IDs का प्रतिनिधित्व करता है।\nफ़ंक्शन एक पूर्णांक लौटाता है जो दोनों कोर्स में नामांकित छात्रों की संख्या का प्रतिनिधित्व करता है।\nउदाहरण:\nयदि कोर्स A के छात्रों के IDs [1, 2, 3, 4, 5] हैं और कोर्स B के छात्रों के IDs [1, 3, 4, 5, 6] हैं,\nतो फ़ंक्शन को 4 लौटाना चाहिए क्योंकि IDs 1, 3, 4, और 5 वाले छात्र दोनों कोर्स में नामांकित हैं।",
      "hu": "Számolja meg a mindkét kurzusra, A-ra és B-re beiratkozott diákok számát.\n  Két tömböt adva, amelyek az A és B kurzusokra beiratkozott diákok azonosítóit tartalmazzák,\n  ez a függvény kiszámítja a mindkét kurzusra beiratkozott diákok teljes számát.\n  \n  A függvény két paramétert fogad el:\n  - $courseA (tömb): Egész számokat tartalmazó tömb, amely az A kurzusra beiratkozott diákok azonosítóit képviseli.\n  - $courseB (tömb): Egész számokat tartalmazó tömb, amely a B kurzusra beiratkozott diákok azonosítóit képviseli.\n  \n  A függvény egy egész számot ad vissza, amely a mindkét kurzusra beiratkozott diákok számát képviseli.\n  \n  Példa:\n  Ha az A kurzus diákjai azonosítókkal [1, 2, 3, 4, 5] és a B kurzus diákjai azonosítókkal [1, 3, 4, 5, 6] rendelkeznek,\n  a függvénynek 4-et kell visszaadnia, mert az 1, 3, 4 és 5 azonosítójú diákok mindkét kurzusra beiratkoztak."
    },
    "docstring_bertscore": {
      "sq": "0.9749433733235919",
      "hy": "0.9644699905923844",
      "bn": "0.9600641701106495",
      "bg": "0.9786804053123823",
      "zh": "0.9464720917668131",
      "fr": "0.9784954804276389",
      "de": "0.9822412521531948",
      "ha": "0.9403832760665697",
      "hi": "0.9613296442682228",
      "hu": "0.9613882402306281"
    }
  },
  {
    "task_id": "PHP/48",
    "prompt": {
      "en": "<?php\n\n\n\n/**\n * Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n * Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n * Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n * \n * Arguments:\n * - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n * - $failed: The number of failed deliveries (0 <= $failed <= 100).\n * \n * Returns:\n * - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n * \n * Examples:\n * - calculateDroidEarnings(5, 2) returns 730.\n * - calculateDroidEarnings(0, 10) returns -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "sq": "<?php\n\n\n\n/**\n * Llogarit fitimet totale të Deliv-e-droid bazuar në numrin e dërgesave të suksesshme dhe të dështuara.\n * Deliv-e-droid fiton 50 njësi parash për çdo dërgesë të suksesshme dhe humbet 10 njësi për çdo dërgesë të dështuar.\n * Për më tepër, nëse numri i dërgesave të suksesshme është më i madh se numri i atyre të dështuara, Deliv-e-droid merr një bonus prej 500 njësish.\n * \n * Argumentet:\n * - $delivered: Numri i pakove të dorëzuara me sukses (0 <= $delivered <= 100).\n * - $failed: Numri i dërgesave të dështuara (0 <= $failed <= 100).\n * \n * Kthen:\n * - Fitimet totale të Deliv-e-droid, të cilat mund të jenë negative nëse humbjet tejkalojnë fitimet.\n * \n * Shembuj:\n * - calculateDroidEarnings(5, 2) kthen 730.\n * - calculateDroidEarnings(0, 10) kthen -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hy": "<?php\n\n\n\n/**\n * Հաշվում է Deliv-e-droid-ի ընդհանուր եկամուտը՝ հիմնվելով հաջողությամբ առաքված և ձախողված առաքումների քանակի վրա:\n * Deliv-e-droid-ը վաստակում է 50 միավոր գումար յուրաքանչյուր հաջողված առաքման համար և կորցնում է 10 միավոր յուրաքանչյուր ձախողված առաքման համար:\n * Բացի այդ, եթե հաջողված առաքումների քանակը գերազանցում է ձախողվածներին, Deliv-e-droid-ը ստանում է 500 միավոր բոնուս:\n * \n * Փոփոխականներ:\n * - $delivered: Հաջողությամբ առաքված փաթեթների քանակը (0 <= $delivered <= 100):\n * - $failed: Ձախողված առաքումների քանակը (0 <= $failed <= 100):\n * \n * Վերադարձնում է:\n * - Deliv-e-droid-ի ընդհանուր եկամուտը, որը կարող է լինել բացասական, եթե կորուստները գերազանցում են շահույթները:\n * \n * Օրինակներ:\n * - calculateDroidEarnings(5, 2) վերադարձնում է 730:\n * - calculateDroidEarnings(0, 10) վերադարձնում է -100:\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "bn": "<?php\n\n\n\n/**\n * সফলভাবে বিতরণ এবং ব্যর্থ বিতরণের সংখ্যার ভিত্তিতে Deliv-e-droid এর মোট উপার্জন হিসাব করে।\n * Deliv-e-droid প্রতিটি সফল বিতরণের জন্য 50 ইউনিট অর্থ উপার্জন করে এবং প্রতিটি ব্যর্থ বিতরণের জন্য 10 ইউনিট হারায়।\n * অতিরিক্তভাবে, যদি সফল বিতরণের সংখ্যা ব্যর্থগুলোর চেয়ে বেশি হয়, তাহলে Deliv-e-droid 500 ইউনিট বোনাস পায়।\n * \n * আর্গুমেন্ট:\n * - $delivered: সফলভাবে বিতরণ করা প্যাকেজের সংখ্যা (0 <= $delivered <= 100)।\n * - $failed: ব্যর্থ বিতরণের সংখ্যা (0 <= $failed <= 100)।\n * \n * রিটার্নস:\n * - Deliv-e-droid এর মোট উপার্জন, যা নেতিবাচক হতে পারে যদি ক্ষতি লাভের চেয়ে বেশি হয়।\n * \n * উদাহরণ:\n * - calculateDroidEarnings(5, 2) 730 রিটার্ন করে।\n * - calculateDroidEarnings(0, 10) -100 রিটার্ন করে।\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "bg": "<?php\n\n\n\n/**\n * Изчислява общите приходи на Deliv-e-droid въз основа на броя успешно доставени и неуспешни доставки.\n * Deliv-e-droid печели 50 единици пари за всяка успешна доставка и губи 10 единици за всяка неуспешна доставка.\n * Освен това, ако броят на успешните доставки е по-голям от броя на неуспешните, Deliv-e-droid получава бонус от 500 единици.\n * \n * Аргументи:\n * - $delivered: Броят на успешно доставените пакети (0 <= $delivered <= 100).\n * - $failed: Броят на неуспешните доставки (0 <= $failed <= 100).\n * \n * Връща:\n * - Общите приходи на Deliv-e-droid, които могат да бъдат отрицателни, ако загубите превишават печалбите.\n * \n * Примери:\n * - calculateDroidEarnings(5, 2) връща 730.\n * - calculateDroidEarnings(0, 10) връща -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "zh": "<?php\n\n\n\n/**\n * 计算Deliv-e-droid的总收入，基于成功交付和失败交付的数量。\n * Deliv-e-droid每成功交付一个包裹赚取50个单位的钱，每失败交付一个包裹损失10个单位。\n * 另外，如果成功交付的数量大于失败交付的数量，Deliv-e-droid会获得500个单位的奖金。\n * \n * 参数:\n * - $delivered: 成功交付的包裹数量 (0 <= $delivered <= 100)。\n * - $failed: 失败交付的数量 (0 <= $failed <= 100)。\n * \n * 返回:\n * - Deliv-e-droid的总收入，如果损失超过收益，可能为负数。\n * \n * 示例:\n * - calculateDroidEarnings(5, 2) 返回 730。\n * - calculateDroidEarnings(0, 10) 返回 -100。\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "fr": "<?php\n\n\n\n/**\n * Calcule les gains totaux de Deliv-e-droid en fonction du nombre de livraisons réussies et échouées.\n * Deliv-e-droid gagne 50 unités d'argent pour chaque livraison réussie et perd 10 unités pour chaque livraison échouée.\n * De plus, si le nombre de livraisons réussies est supérieur au nombre de livraisons échouées, Deliv-e-droid reçoit un bonus de 500 unités.\n * \n * Arguments :\n * - $delivered : Le nombre de colis livrés avec succès (0 <= $delivered <= 100).\n * - $failed : Le nombre de livraisons échouées (0 <= $failed <= 100).\n * \n * Renvoie :\n * - Les gains totaux de Deliv-e-droid, qui peuvent être négatifs si les pertes dépassent les gains.\n * \n * Exemples :\n * - calculateDroidEarnings(5, 2) renvoie 730.\n * - calculateDroidEarnings(0, 10) renvoie -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "de": "<?php\n\n\n\n/**\n * Berechnet die Gesamteinnahmen von Deliv-e-droid basierend auf der Anzahl der erfolgreich zugestellten und fehlgeschlagenen Lieferungen.\n * Deliv-e-droid verdient 50 Einheiten Geld für jede erfolgreiche Lieferung und verliert 10 Einheiten für jede fehlgeschlagene Lieferung.\n * Zusätzlich erhält Deliv-e-droid einen Bonus von 500 Einheiten, wenn die Anzahl der erfolgreichen Lieferungen größer ist als die der fehlgeschlagenen.\n * \n * Argumente:\n * - $delivered: Die Anzahl der erfolgreich zugestellten Pakete (0 <= $delivered <= 100).\n * - $failed: Die Anzahl der fehlgeschlagenen Lieferungen (0 <= $failed <= 100).\n * \n * Rückgabewerte:\n * - Die Gesamteinnahmen von Deliv-e-droid, die negativ sein können, wenn die Verluste die Gewinne überwiegen.\n * \n * Beispiele:\n * - calculateDroidEarnings(5, 2) gibt 730 zurück.\n * - calculateDroidEarnings(0, 10) gibt -100 zurück.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "ha": "<?php\n\n\n\n/**\n * Lissafin jimillar kudin da Deliv-e-droid ke samu bisa ga yawan isar da kayayyaki da aka yi nasara da wadanda suka kasa.\n * Deliv-e-droid na samun kudin 50 a kowane isar da aka yi nasara kuma yana rasa kudin 10 a kowane isar da ya kasa.\n * Bugu da ƙari, idan yawan isar da aka yi nasara ya fi yawan wadanda suka kasa, Deliv-e-droid na samun kari na kudin 500.\n * \n * Huɗɗa:\n * - $delivered: Yawan kayayyakin da aka isar da nasara (0 <= $delivered <= 100).\n * - $failed: Yawan isar da aka kasa (0 <= $failed <= 100).\n * \n * Komawa:\n * - Jimillar kudin da Deliv-e-droid ke samu, wanda zai iya zama mara kyau idan asarar ta fi riba.\n * \n * Misalai:\n * - calculateDroidEarnings(5, 2) na dawowa 730.\n * - calculateDroidEarnings(0, 10) na dawowa -100.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hi": "<?php\n\n\n\n/**\n * Deliv-e-droid की कुल कमाई की गणना करता है जो सफलतापूर्वक डिलीवर की गई और असफल डिलीवरी की संख्या पर आधारित है।\n * Deliv-e-droid प्रत्येक सफल डिलीवरी के लिए 50 यूनिट धन कमाता है और प्रत्येक असफल डिलीवरी के लिए 10 यूनिट खोता है।\n * इसके अतिरिक्त, यदि सफल डिलीवरी की संख्या असफल डिलीवरी की संख्या से अधिक है, तो Deliv-e-droid को 500 यूनिट का बोनस प्राप्त होता है।\n * \n * तर्क:\n * - $delivered: सफलतापूर्वक डिलीवर किए गए पैकेजों की संख्या (0 <= $delivered <= 100)।\n * - $failed: असफल डिलीवरी की संख्या (0 <= $failed <= 100)।\n * \n * लौटाता है:\n * - Deliv-e-droid की कुल कमाई, जो नकारात्मक हो सकती है यदि नुकसान लाभ से अधिक हो।\n * \n * उदाहरण:\n * - calculateDroidEarnings(5, 2) 730 लौटाता है।\n * - calculateDroidEarnings(0, 10) -100 लौटाता है।\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int ",
      "hu": "<?php\n\n\n\n/**\n * Kiszámítja a Deliv-e-droid összes bevételét a sikeresen kézbesített és a sikertelen kézbesítések száma alapján.\n * A Deliv-e-droid 50 egység pénzt keres minden sikeres kézbesítésért, és 10 egységet veszít minden sikertelen kézbesítésért.\n * Továbbá, ha a sikeres kézbesítések száma nagyobb, mint a sikerteleneké, a Deliv-e-droid 500 egység bónuszt kap.\n * \n * Argumentumok:\n * - $delivered: A sikeresen kézbesített csomagok száma (0 <= $delivered <= 100).\n * - $failed: A sikertelen kézbesítések száma (0 <= $failed <= 100).\n * \n * Visszatérési érték:\n * - A Deliv-e-droid összes bevétele, amely lehet negatív is, ha a veszteségek meghaladják a nyereségeket.\n * \n * Példák:\n * - calculateDroidEarnings(5, 2) visszaadja a 730-at.\n * - calculateDroidEarnings(0, 10) visszaadja a -100-at.\n */\n\n function calculateDroidEarnings(int $delivered, int $failed): int "
    },
    "prompt_bertscore": {
      "sq": "0.9769169647895546",
      "hy": "0.9721700959435828",
      "bn": "0.9807533119688624",
      "bg": "0.9931436765074377",
      "zh": "0.9793440294154199",
      "fr": "0.9883080198811434",
      "de": "0.985897838837666",
      "ha": "0.9638351678945969",
      "hi": "0.9911100986664025",
      "hu": "0.9956440357439049"
    },
    "canonical_solution": " {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n",
    "instruction": {
      "en": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nJepni një përshkrim të shkurtër në gjuhë natyrale (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nՏվեք PHP կոդի համառոտ բնութագրություն (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে সীমাবদ্ধ।",
      "bg": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nBa da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function calculateDroidEarnings(int $delivered, int $failed): int\n {\n    $earnings = $delivered * 50;\n    $losses = $failed * 10;\n    if ($delivered > $failed) {\n        $earnings += 500; // Bonus\n    }\n    return $earnings - $losses;\n}\n\n\nAdjon meg egy tömör, természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9136390856728892",
      "bn": "0.8753683742677543",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9411050988712505"
    },
    "level": "",
    "test": "function main(){\n    assert(calculateDroidEarnings(5, 2) === 730, 'Test case 1 failed');\n    assert(calculateDroidEarnings(0, 10) === -100, 'Test case 2 failed');\n    assert(calculateDroidEarnings(10, 0) === 1000, 'Test case 3 failed');\n    assert(calculateDroidEarnings(3, 3) === 120, 'Test case 4 failed');\n    assert(calculateDroidEarnings(0, 0) === 0, 'Test case 5 failed');\n    \n}\n\n\nmain();\n?>",
    "entry_point": "calculateDroidEarnings",
    "signature": "function calculateDroidEarnings(int $delivered, int $failed): int",
    "docstring": {
      "en": "Calculates the total earnings of Deliv-e-droid based on the number of successfully delivered and failed deliveries.\n  Deliv-e-droid earns 50 units of money for each successful delivery and loses 10 units for each failed delivery.\n  Additionally, if the number of successful deliveries is greater than the number of failed ones, Deliv-e-droid receives a bonus of 500 units.\n  \n  Arguments:\n  - $delivered: The number of successfully delivered packages (0 <= $delivered <= 100).\n  - $failed: The number of failed deliveries (0 <= $failed <= 100).\n  \n  Returns:\n  - The total earnings of Deliv-e-droid, which can be negative if the losses outweigh the gains.\n  \n  Examples:\n  - calculateDroidEarnings(5, 2) returns 730.\n  - calculateDroidEarnings(0, 10) returns -100.",
      "sq": "Llogarit fitimet totale të Deliv-e-droid bazuar në numrin e dërgesave të suksesshme dhe të dështuara.\n  Deliv-e-droid fiton 50 njësi parash për çdo dërgesë të suksesshme dhe humbet 10 njësi për çdo dërgesë të dështuar.\n  Për më tepër, nëse numri i dërgesave të suksesshme është më i madh se ai i dërgesave të dështuara, Deliv-e-droid merr një bonus prej 500 njësish.\n  \n  Argumentet:\n  - $delivered: Numri i pakove të dorëzuara me sukses (0 <= $delivered <= 100).\n  - $failed: Numri i dërgesave të dështuara (0 <= $failed <= 100).\n  \n  Kthen:\n  - Fitimet totale të Deliv-e-droid, të cilat mund të jenë negative nëse humbjet tejkalojnë fitimet.\n  \n  Shembuj:\n  - calculateDroidEarnings(5, 2) kthen 730.\n  - calculateDroidEarnings(0, 10) kthen -100.",
      "hy": "Հաշվում է Deliv-e-droid-ի ընդհանուր եկամուտը՝ հիմնված հաջողությամբ առաքված և ձախողված առաքումների քանակի վրա։ Deliv-e-droid-ը վաստակում է 50 միավոր գումար յուրաքանչյուր հաջողված առաքման համար և կորցնում է 10 միավոր յուրաքանչյուր ձախողված առաքման համար։ Բացի այդ, եթե հաջողված առաքումների քանակը գերազանցում է ձախողվածներին, Deliv-e-droid-ը ստանում է 500 միավոր բոնուս։\n\nՓոփոխականներ:\n- $delivered: Հաջողությամբ առաքված փաթեթների քանակը (0 <= $delivered <= 100)։\n- $failed: Ձախողված առաքումների քանակը (0 <= $failed <= 100)։\n\nՎերադարձնում է:\n- Deliv-e-droid-ի ընդհանուր եկամուտը, որը կարող է լինել բացասական, եթե կորուստները գերազանցում են շահույթները։\n\nՕրինակներ:\n- calculateDroidEarnings(5, 2) վերադարձնում է 730։\n- calculateDroidEarnings(0, 10) վերադարձնում է -100։",
      "bn": "Deliv-e-droid এর মোট আয় হিসাব করে সফলভাবে বিতরণ এবং ব্যর্থ বিতরণের সংখ্যার উপর ভিত্তি করে।\nDeliv-e-droid প্রতিটি সফল বিতরণের জন্য ৫০ ইউনিট অর্থ উপার্জন করে এবং প্রতিটি ব্যর্থ বিতরণের জন্য ১০ ইউনিট হারায়।\nঅতিরিক্তভাবে, যদি সফল বিতরণের সংখ্যা ব্যর্থ বিতরণের সংখ্যার চেয়ে বেশি হয়, তাহলে Deliv-e-droid ৫০০ ইউনিট বোনাস পায়।\n\nArguments:\n- $delivered: সফলভাবে বিতরণ করা প্যাকেজের সংখ্যা (0 <= $delivered <= 100)।\n- $failed: ব্যর্থ বিতরণের সংখ্যা (0 <= $failed <= 100)।\n\nReturns:\n- Deliv-e-droid এর মোট আয়, যা নেতিবাচক হতে পারে যদি ক্ষতি লাভের চেয়ে বেশি হয়।\n\nExamples:\n- calculateDroidEarnings(5, 2) ৭৩০ রিটার্ন করে।\n- calculateDroidEarnings(0, 10) -১০০ রিটার্ন করে।",
      "bg": "Изчислява общите приходи на Deliv-e-droid въз основа на броя на успешно доставените и неуспешните доставки. Deliv-e-droid печели 50 единици пари за всяка успешна доставка и губи 10 единици за всяка неуспешна доставка. Освен това, ако броят на успешните доставки е по-голям от броя на неуспешните, Deliv-e-droid получава бонус от 500 единици.\n\nАргументи:\n- $delivered: Броят на успешно доставените пакети (0 <= $delivered <= 100).\n- $failed: Броят на неуспешните доставки (0 <= $failed <= 100).\n\nВръща:\n- Общите приходи на Deliv-e-droid, които могат да бъдат отрицателни, ако загубите надвишават печалбите.\n\nПримери:\n- calculateDroidEarnings(5, 2) връща 730.\n- calculateDroidEarnings(0, 10) връща -100.",
      "zh": "计算 Deliv-e-droid 的总收入，基于成功交付和失败交付的数量。\nDeliv-e-droid 每成功交付一个包裹赚取 50 单位的金钱，每失败交付一个包裹损失 10 单位的金钱。\n此外，如果成功交付的数量大于失败交付的数量，Deliv-e-droid 将获得 500 单位的奖金。\n\n参数:\n- $delivered: 成功交付的包裹数量 (0 <= $delivered <= 100)。\n- $failed: 失败交付的数量 (0 <= $failed <= 100)。\n\n返回:\n- Deliv-e-droid 的总收入，如果损失超过收益，则可能为负数。\n\n示例:\n- calculateDroidEarnings(5, 2) 返回 730。\n- calculateDroidEarnings(0, 10) 返回 -100。",
      "fr": "Calcule les gains totaux de Deliv-e-droid en fonction du nombre de livraisons réussies et échouées.\n  Deliv-e-droid gagne 50 unités d'argent pour chaque livraison réussie et perd 10 unités pour chaque livraison échouée.\n  De plus, si le nombre de livraisons réussies est supérieur au nombre de livraisons échouées, Deliv-e-droid reçoit un bonus de 500 unités.\n  \n  Arguments:\n  - $delivered: Le nombre de colis livrés avec succès (0 <= $delivered <= 100).\n  - $failed: Le nombre de livraisons échouées (0 <= $failed <= 100).\n  \n  Retourne:\n  - Les gains totaux de Deliv-e-droid, qui peuvent être négatifs si les pertes dépassent les gains.\n  \n  Exemples:\n  - calculateDroidEarnings(5, 2) retourne 730.\n  - calculateDroidEarnings(0, 10) retourne -100.",
      "de": "Berechnet die Gesamteinnahmen von Deliv-e-droid basierend auf der Anzahl der erfolgreich zugestellten und fehlgeschlagenen Lieferungen. Deliv-e-droid verdient 50 Einheiten Geld für jede erfolgreiche Lieferung und verliert 10 Einheiten für jede fehlgeschlagene Lieferung. Zusätzlich, wenn die Anzahl der erfolgreichen Lieferungen größer ist als die der fehlgeschlagenen, erhält Deliv-e-droid einen Bonus von 500 Einheiten.\n\nArgumente:\n- $delivered: Die Anzahl der erfolgreich zugestellten Pakete (0 <= $delivered <= 100).\n- $failed: Die Anzahl der fehlgeschlagenen Lieferungen (0 <= $failed <= 100).\n\nRückgabewerte:\n- Die Gesamteinnahmen von Deliv-e-droid, die negativ sein können, wenn die Verluste die Gewinne überwiegen.\n\nBeispiele:\n- calculateDroidEarnings(5, 2) gibt 730 zurück.\n- calculateDroidEarnings(0, 10) gibt -100 zurück.",
      "ha": "Yana ƙididdige jimillar kudaden shiga na Deliv-e-droid bisa ga adadin nasarorin da aka kai da kuma gazawar isarwa.\n  Deliv-e-droid yana samun 50 na kuɗi don kowane nasarar isarwa kuma yana rasa 10 na kuɗi don kowane gazawar isarwa.\n  Bugu da ƙari, idan adadin nasarorin da aka kai ya fi na gazawar yawa, Deliv-e-droid yana samun kari na 500 na kuɗi.\n  \n  Huɗɗa:\n  - $delivered: Adadin nasarorin da aka kai (0 <= $delivered <= 100).\n  - $failed: Adadin gazawar isarwa (0 <= $failed <= 100).\n  \n  Komawa:\n  - Jimillar kudaden shiga na Deliv-e-droid, wanda zai iya zama mara kyau idan asarar ta fi riba yawa.\n  \n  Misalai:\n  - calculateDroidEarnings(5, 2) yana dawowa 730.\n  - calculateDroidEarnings(0, 10) yana dawowa -100.",
      "hi": "Deliv-e-droid की कुल कमाई की गणना सफलतापूर्वक वितरित और असफल डिलीवरी की संख्या के आधार पर करता है। Deliv-e-droid प्रत्येक सफल डिलीवरी के लिए 50 यूनिट पैसा कमाता है और प्रत्येक असफल डिलीवरी के लिए 10 यूनिट खोता है। इसके अतिरिक्त, यदि सफल डिलीवरी की संख्या असफल डिलीवरी से अधिक है, तो Deliv-e-droid को 500 यूनिट का बोनस मिलता है।\n\nArguments:\n- $delivered: सफलतापूर्वक वितरित पैकेजों की संख्या (0 <= $delivered <= 100)।\n- $failed: असफल डिलीवरी की संख्या (0 <= $failed <= 100)।\n\nReturns:\n- Deliv-e-droid की कुल कमाई, जो नकारात्मक हो सकती है यदि नुकसान लाभ से अधिक हो।\n\nExamples:\n- calculateDroidEarnings(5, 2) returns 730.\n- calculateDroidEarnings(0, 10) returns -100.",
      "hu": "Kiszámítja a Deliv-e-droid összes bevételét a sikeresen kézbesített és a sikertelen kézbesítések száma alapján. \n  A Deliv-e-droid 50 egységnyi pénzt keres minden sikeres kézbesítésért, és 10 egységet veszít minden sikertelen kézbesítésért. \n  Továbbá, ha a sikeres kézbesítések száma meghaladja a sikertelenekét, a Deliv-e-droid 500 egységnyi bónuszt kap.\n  \n  Argumentumok:\n  - $delivered: A sikeresen kézbesített csomagok száma (0 <= $delivered <= 100).\n  - $failed: A sikertelen kézbesítések száma (0 <= $failed <= 100).\n  \n  Visszatérési érték:\n  - A Deliv-e-droid összes bevétele, amely lehet negatív is, ha a veszteségek meghaladják a nyereséget.\n  \n  Példák:\n  - calculateDroidEarnings(5, 2) visszaadja a 730-at.\n  - calculateDroidEarnings(0, 10) visszaadja a -100-at."
    },
    "docstring_bertscore": {
      "sq": "0.9759208334286646",
      "hy": "0.970633689946278",
      "bn": "0.967092706143569",
      "bg": "0.9923694152821637",
      "zh": "0.9731600697626608",
      "fr": "0.9909849615263505",
      "de": "0.9924395318066691",
      "ha": "0.9563015148027056",
      "hi": "0.96979725741174",
      "hu": "0.9845036521931821"
    }
  },
  {
    "task_id": "PHP/49",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n * Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n * one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n *\n * Note: The missing ID will not be at the start or end of the overall ID range.\n *\n * Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n * Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n *\n * Example:\n * Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Output: [7, 9] // 7 is missing, and 9 is duplicated.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "sq": "<?php\n\n\n/**\n * Identifikon ID-të që mungojnë (të prishura) dhe ID-të e dyfishta nga një grup i dhënë grupesh ID.\n * Çdo grup ID përfaqëson një koleksion të ID-ve të biletave që supozohet të jenë radhazi, por përmbajnë një gabim:\n * një ID mungon, dhe një ID është i dyfishtë. Kjo funksion llogarit dhe kthen ID-të që mungojnë dhe ato të dyfishta.\n *\n * Shënim: ID që mungon nuk do të jetë në fillim ose në fund të intervalit të përgjithshëm të ID-ve.\n *\n * Hyrja: Një varg me vargje, ku çdo nën-varg përmban numra të plotë që përfaqësojnë ID-të e biletave.\n * Dalja: Një varg me dy numra të plotë, i pari është ID që mungon (i prishur) dhe i dyti është ID i dyfishtë.\n *\n * Shembull:\n * Hyrja: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Dalja: [7, 9] // 7 mungon, dhe 9 është i dyfishtë.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hy": "<?php\n\n\n/**\n * Հայտնաբերում է բացակայող (կոտրված) և կրկնօրինակված ID-ները տրված ID խմբերի հավաքածուից:\n * Յուրաքանչյուր ID խումբ ներկայացնում է տոմսերի ID-ների հավաքածու, որոնք պետք է լինեն հաջորդական, բայց պարունակում են սխալ:\n * մեկ ID բացակայում է, և մեկ ID կրկնօրինակված է: Այս ֆունկցիան հաշվարկում և վերադարձնում է բացակայող և կրկնօրինակված ID-ները:\n *\n * Նշում: Բացակայող ID-ն չի լինի ընդհանուր ID տիրույթի սկզբում կամ վերջում:\n *\n * Մուտք: Զանգվածների զանգված, որտեղ յուրաքանչյուր ենթազանգված պարունակում է ամբողջ թվեր, որոնք ներկայացնում են տոմսերի ID-ներ:\n * Ելք: Զանգված երկու ամբողջ թվերով, առաջինը՝ բացակայող (կոտրված) ID-ն և երկրորդը՝ կրկնօրինակված ID-ն:\n *\n * Օրինակ:\n * Մուտք: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Ելք: [7, 9] // 7-ը բացակայում է, և 9-ը կրկնօրինակված է:\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "bn": "<?php\n\n\n/**\n * প্রদত্ত ID গ্রুপের সেট থেকে অনুপস্থিত (ভাঙা) এবং সদৃশ ID সনাক্ত করে।\n * প্রতিটি ID গ্রুপ টিকিট ID এর একটি সংগ্রহ উপস্থাপন করে যা ধারাবাহিক হওয়ার কথা কিন্তু একটি ভুল রয়েছে:\n * একটি ID অনুপস্থিত এবং একটি ID সদৃশ। এই ফাংশনটি অনুপস্থিত এবং সদৃশ ID গুলি গণনা করে এবং ফেরত দেয়।\n *\n * নোট: অনুপস্থিত ID সামগ্রিক ID পরিসরের শুরু বা শেষে থাকবে না।\n *\n * ইনপুট: অ্যারের একটি অ্যারে, যেখানে প্রতিটি উপ-অ্যারে টিকিট ID উপস্থাপনকারী পূর্ণসংখ্যা রয়েছে।\n * আউটপুট: দুটি পূর্ণসংখ্যার একটি অ্যারে, প্রথমটি অনুপস্থিত (ভাঙা) ID এবং দ্বিতীয়টি সদৃশ ID।\n *\n * উদাহরণ:\n * ইনপুট: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * আউটপুট: [7, 9] // 7 অনুপস্থিত, এবং 9 সদৃশ।\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "bg": "<?php\n\n\n/**\n * Идентифицира липсващите (счупени) и дублирани ID-та от даден набор от групи ID-та.\n * Всяка група ID-та представлява колекция от ID-та на билети, които трябва да са последователни, но съдържат грешка:\n * едно ID липсва и едно ID е дублирано. Тази функция изчислява и връща липсващите и дублирани ID-та.\n *\n * Забележка: Липсващото ID няма да бъде в началото или края на общия диапазон от ID-та.\n *\n * Вход: Масив от масиви, където всеки подмасив съдържа цели числа, представляващи ID-та на билети.\n * Изход: Масив с две цели числа, първото от които е липсващото (счупено) ID, а второто е дублираното ID.\n *\n * Пример:\n * Вход: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Изход: [7, 9] // 7 липсва, а 9 е дублирано.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "zh": "<?php\n\n\n/**\n * 识别给定ID组集合中的缺失（错误）和重复ID。\n * 每个ID组代表一个票据ID集合，这些ID应该是连续的，但包含一个错误：\n * 一个ID缺失，一个ID重复。此函数计算并返回缺失和重复的ID。\n *\n * 注意：缺失的ID不会在整个ID范围的开始或结束。\n *\n * 输入：一个数组的数组，其中每个子数组包含代表票据ID的整数。\n * 输出：一个包含两个整数的数组，第一个是缺失（错误）的ID，第二个是重复的ID。\n *\n * 示例：\n * 输入: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * 输出: [7, 9] // 7是缺失的，9是重复的。\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "fr": "<?php\n\n\n/**\n * Identifie les IDs manquants (cassés) et dupliqués à partir d'un ensemble donné de groupes d'IDs.\n * Chaque groupe d'IDs représente une collection d'IDs de tickets qui sont censés être consécutifs mais contiennent une erreur :\n * un ID est manquant et un ID est dupliqué. Cette fonction calcule et retourne les IDs manquants et dupliqués.\n *\n * Remarque : L'ID manquant ne sera pas au début ou à la fin de la plage globale d'IDs.\n *\n * Entrée : Un tableau de tableaux, où chaque sous-tableau contient des entiers représentant des IDs de tickets.\n * Sortie : Un tableau avec deux entiers, le premier étant l'ID manquant (cassé) et le second l'ID dupliqué.\n *\n * Exemple :\n * Entrée : [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Sortie : [7, 9] // 7 est manquant, et 9 est dupliqué.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "de": "<?php\n\n\n/**\n * Identifiziert die fehlenden (defekten) und doppelten IDs aus einer gegebenen Menge von ID-Gruppen.\n * Jede ID-Gruppe repräsentiert eine Sammlung von Ticket-IDs, die aufeinanderfolgend sein sollen, aber einen Fehler enthalten:\n * eine ID fehlt, und eine ID ist doppelt vorhanden. Diese Funktion berechnet und gibt die fehlenden und doppelten IDs zurück.\n *\n * Hinweis: Die fehlende ID wird nicht am Anfang oder Ende des gesamten ID-Bereichs sein.\n *\n * Eingabe: Ein Array von Arrays, wobei jedes Unter-Array Ganzzahlen enthält, die Ticket-IDs darstellen.\n * Ausgabe: Ein Array mit zwei Ganzzahlen, wobei die erste die fehlende (defekte) ID und die zweite die doppelte ID ist.\n *\n * Beispiel:\n * Eingabe: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Ausgabe: [7, 9] // 7 fehlt, und 9 ist doppelt vorhanden.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "ha": "<?php\n\n\n/**\n * Gano ID ɗin da ya ɓace (ya karye) da kuma ID ɗin da aka maimaita daga wani saitin rukunan ID.\n * Kowanne rukuni na ID yana wakiltar tarin ID na tikiti waɗanda ya kamata su kasance a jere amma suna ɗauke da kuskure:\n * ana rasa ID ɗaya, kuma ana maimaita ID ɗaya. Wannan aikin yana lissafi kuma yana dawo da ID ɗin da ya ɓace da kuma ID ɗin da aka maimaita.\n *\n * Lura: ID ɗin da ya ɓace ba zai kasance a farkon ko ƙarshen zangon ID na gaba ɗaya ba.\n *\n * Shigarwa: Jeri na jerin, inda kowanne ƙaramin jeri ya ƙunshi lambobi waɗanda ke wakiltar ID na tikiti.\n * Fitarwa: Jeri tare da lambobi biyu, na farko shine ID ɗin da ya ɓace (ya karye) kuma na biyu shine ID ɗin da aka maimaita.\n *\n * Misali:\n * Shigarwa: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Fitarwa: [7, 9] // 7 ya ɓace, kuma 9 an maimaita.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hi": "<?php\n\n\n/**\n * दिए गए ID समूहों के सेट से गायब (टूटी हुई) और डुप्लिकेट ID की पहचान करता है।\n * प्रत्येक ID समूह टिकट ID का एक संग्रह दर्शाता है जो लगातार होना चाहिए लेकिन इसमें एक गलती होती है:\n * एक ID गायब है, और एक ID डुप्लिकेट है। यह फ़ंक्शन गायब और डुप्लिकेट ID की गणना करता है और लौटाता है।\n *\n * नोट: गायब ID समग्र ID श्रेणी की शुरुआत या अंत में नहीं होगी।\n *\n * इनपुट: एक सरणी की सरणी, जहाँ प्रत्येक उप-सरणी में टिकट ID का प्रतिनिधित्व करने वाले पूर्णांक होते हैं।\n * आउटपुट: दो पूर्णांकों के साथ एक सरणी, पहला गायब (टूटी हुई) ID है और दूसरा डुप्लिकेट ID है।\n *\n * उदाहरण:\n * इनपुट: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * आउटपुट: [7, 9] // 7 गायब है, और 9 डुप्लिकेट है।\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array ",
      "hu": "<?php\n\n\n/**\n * Azonosítja a hiányzó (hibás) és duplikált azonosítókat egy adott azonosítócsoportból.\n * Minden azonosítócsoport egy jegyazonosító-gyűjteményt képvisel, amelyeknek egymást követőnek kellene lenniük, de tartalmaznak egy hibát:\n * egy azonosító hiányzik, és egy azonosító duplikált. Ez a függvény kiszámítja és visszaadja a hiányzó és duplikált azonosítókat.\n *\n * Megjegyzés: A hiányzó azonosító nem lesz az összes azonosító tartomány elején vagy végén.\n *\n * Bemenet: Tömbök tömbje, ahol minden al-tömb egész számokat tartalmaz, amelyek jegyazonosítókat képviselnek.\n * Kimenet: Egy tömb két egész számmal, az első a hiányzó (hibás) azonosító, a második a duplikált azonosító.\n *\n * Példa:\n * Bemenet: [[5, 6, 8, 11, 9], [10, 12, 9]]\n * Kimenet: [7, 9] // 7 hiányzik, és 9 duplikált.\n */\nfunction findMissingAndDuplicateIDs(array $idGroups): array "
    },
    "prompt_bertscore": {
      "sq": "0.9745377700855187",
      "hy": "0.9828015884580942",
      "bn": "0.9836902607828443",
      "bg": "0.9728474255429118",
      "zh": "0.966403657351759",
      "fr": "0.9742430026000629",
      "de": "0.9723691235853799",
      "ha": "0.9468820648732692",
      "hi": "0.981331723638436",
      "hu": "0.9674708983890594"
    },
    "canonical_solution": "{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}",
    "instruction": {
      "en": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nSiguroni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nՏվեք PHP կոդի հակիրճ բնութագրությունը (docstring) հայերենով՝ օգտագործելով առավելագույնը 500 նիշ։",
      "bn": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বিবরণ (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে থাকবে।",
      "bg": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\n请用最多500个字符的中文为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nFournir une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nBayar da takaitaccen bayanin harshen halitta (docstring) na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function findMissingAndDuplicateIDs(array $idGroups): array\n{\n    // Flatten the array of ID groups into a single array\n    $allIds = array_merge(...$idGroups);\n    \n    // Sort the IDs to make it easier to find duplicates and missing IDs\n    sort($allIds);\n    \n    $missingID = null;\n    $duplicateID = null;\n    \n    // Iterate over the sorted IDs to find the missing and duplicate IDs\n    for ($i = 0; $i < count($allIds) - 1; $i++) {\n        // Check if the next ID is the same as the current ID (duplicate)\n        if ($allIds[$i] == $allIds[$i + 1]) {\n            $duplicateID = $allIds[$i];\n        }\n        // Check if the next ID is not the immediate successor (missing)\n        elseif ($allIds[$i] + 1 != $allIds[$i + 1]) {\n            $missingID = $allIds[$i] + 1;\n        }\n    }\n    \n    // Return both the missing and the duplicate IDs\n    return [$missingID, $duplicateID];\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódról magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8680359337518513",
      "bg": "0.8313258612505074",
      "zh": "0.8790082760002186",
      "fr": "0.9692393046714131",
      "de": "0.9254925522915273",
      "ha": "0.953109524579475",
      "hi": "0.9122290085979226",
      "hu": "0.9532755795780201"
    },
    "level": "",
    "test": "function main(){\n\n    // Test case based on the example provided\n    assert(findMissingAndDuplicateIDs([[5, 6, 8, 11, 9], [10, 12, 9]]) === [7, 9]);\n    \n    // Additional test cases\n    assert(findMissingAndDuplicateIDs([[1, 2, 4], [3, 5, 5, 7]]) === [6, 5]);\n    assert(findMissingAndDuplicateIDs([[10, 11, 12, 14, 17], [13, 15, 12]]) === [16, 12]);\n    \n}\n\n\nmain();\n?>",
    "entry_point": "findMissingAndDuplicateIDs",
    "signature": "function findMissingAndDuplicateIDs(array $idGroups): array",
    "docstring": {
      "en": "Identifies the missing (broken) and duplicate IDs from a given set of ID groups.\n  Each ID group represents a collection of ticket IDs which are supposed to be consecutive but contain a mistake:\n  one ID is missing, and one ID is duplicated. This function calculates and returns the missing and duplicated IDs.\n \n  Note: The missing ID will not be at the start or end of the overall ID range.\n \n  Input: An array of arrays, where each sub-array contains integers representing ticket IDs.\n  Output: An array with two integers, the first being the missing (broken) ID and the second the duplicate ID.\n \n  Example:\n  Input: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Output: [7, 9] // 7 is missing, and 9 is duplicated.",
      "sq": "Identifikon ID-të që mungojnë (të thyera) dhe ID-të e dyfishta nga një grup i caktuar grupesh ID-sh.\n  Çdo grup ID-sh përfaqëson një koleksion të ID-ve të biletave që supozohet të jenë të njëpasnjëshme, por përmbajnë një gabim:\n  një ID mungon dhe një ID është e dyfishtë. Kjo funksion llogarit dhe kthen ID-të që mungojnë dhe ato të dyfishta.\n \n  Shënim: ID-ja që mungon nuk do të jetë në fillim ose në fund të intervalit të përgjithshëm të ID-ve.\n \n  Hyrja: Një varg me vargje, ku çdo nën-varg përmban numra të plotë që përfaqësojnë ID-të e biletave.\n  Dalja: Një varg me dy numra të plotë, i pari është ID-ja që mungon (e thyer) dhe i dyti është ID-ja e dyfishtë.\n \n  Shembull:\n  Hyrja: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Dalja: [7, 9] // 7 mungon dhe 9 është i dyfishtë.",
      "hy": "Հայտնաբերում է բացակայող (կոտրված) և կրկնօրինակված ID-ները տրված ID խմբերի հավաքածուից։ \n  Յուրաքանչյուր ID խումբ ներկայացնում է տոմսերի ID-ների հավաքածու, որոնք պետք է լինեն հաջորդական, բայց պարունակում են սխալ՝\n  մեկ ID բացակայում է, և մեկ ID կրկնօրինակված է։ Այս ֆունկցիան հաշվարկում և վերադարձնում է բացակայող և կրկնօրինակված ID-ները։\n \n  Նշում: Բացակայող ID-ն չի լինի ընդհանուր ID միջակայքի սկզբում կամ վերջում։\n \n  Մուտք: Զանգվածների զանգված, որտեղ յուրաքանչյուր ենթազանգված պարունակում է ամբողջ թվեր, որոնք ներկայացնում են տոմսերի ID-ները։\n  Ելք: Զանգված երկու ամբողջ թվերով, առաջինը՝ բացակայող (կոտրված) ID-ն, և երկրորդը՝ կրկնօրինակված ID-ն։\n \n  Օրինակ:\n  Մուտք: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ելք: [7, 9] // 7-ը բացակայում է, իսկ 9-ը կրկնօրինակված է։",
      "bn": "দেওয়া ID গ্রুপগুলির একটি সেট থেকে অনুপস্থিত (ভাঙা) এবং সদৃশ ID সনাক্ত করে। \nপ্রতিটি ID গ্রুপ একটি টিকিট ID এর সংগ্রহ উপস্থাপন করে যা ধারাবাহিক হওয়ার কথা কিন্তু এতে একটি ভুল রয়েছে:\nএকটি ID অনুপস্থিত এবং একটি ID সদৃশ। এই ফাংশনটি অনুপস্থিত এবং সদৃশ ID গণনা করে এবং ফেরত দেয়।\n\nনোট: অনুপস্থিত ID সামগ্রিক ID পরিসরের শুরু বা শেষে থাকবে না।\n\nইনপুট: একটি অ্যারের অ্যারে, যেখানে প্রতিটি উপ-অ্যারে পূর্ণসংখ্যা রয়েছে যা টিকিট ID উপস্থাপন করে।\nআউটপুট: দুটি পূর্ণসংখ্যার একটি অ্যারে, প্রথমটি অনুপস্থিত (ভাঙা) ID এবং দ্বিতীয়টি সদৃশ ID।\n\nউদাহরণ:\nইনপুট: [[5, 6, 8, 11, 9], [10, 12, 9]]\nআউটপুট: [7, 9] // 7 অনুপস্থিত, এবং 9 সদৃশ।",
      "bg": "Идентифицира липсващите (счупени) и дублирани ID от даден набор от ID групи.\n  Всяка ID група представлява колекция от ID на билети, които трябва да бъдат последователни, но съдържат грешка:\n  едно ID липсва и едно ID е дублирано. Тази функция изчислява и връща липсващите и дублирани ID.\n\n  Забележка: Липсващото ID няма да бъде в началото или в края на общия диапазон от ID.\n\n  Вход: Масив от масиви, където всеки подмасив съдържа цели числа, представляващи ID на билети.\n  Изход: Масив с две цели числа, първото от които е липсващото (счупено) ID, а второто е дублираното ID.\n\n  Пример:\n  Вход: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Изход: [7, 9] // 7 липсва, а 9 е дублирано.",
      "zh": "识别给定ID组中的缺失（错误）和重复ID。\n每个ID组代表一组本应连续的票据ID，但其中包含一个错误：一个ID缺失，一个ID重复。此函数计算并返回缺失和重复的ID。\n\n注意：缺失的ID不会出现在整个ID范围的开始或结束位置。\n\n输入：一个数组的数组，其中每个子数组包含表示票据ID的整数。\n输出：一个包含两个整数的数组，第一个是缺失（错误）的ID，第二个是重复的ID。\n\n示例：\n输入：[[5, 6, 8, 11, 9], [10, 12, 9]]\n输出：[7, 9] // 7是缺失的，9是重复的。",
      "fr": "Identifie les IDs manquants (brisés) et dupliqués à partir d'un ensemble donné de groupes d'IDs.\n  Chaque groupe d'IDs représente une collection d'IDs de tickets qui sont censés être consécutifs mais contiennent une erreur :\n  un ID est manquant et un ID est dupliqué. Cette fonction calcule et retourne les IDs manquants et dupliqués.\n \n  Remarque : L'ID manquant ne sera pas au début ou à la fin de la plage globale d'IDs.\n \n  Entrée : Un tableau de tableaux, où chaque sous-tableau contient des entiers représentant des IDs de tickets.\n  Sortie : Un tableau avec deux entiers, le premier étant l'ID manquant (brisé) et le second l'ID dupliqué.\n \n  Exemple :\n  Entrée : [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Sortie : [7, 9] // 7 est manquant, et 9 est dupliqué.",
      "de": "Identifiziert die fehlenden (defekten) und doppelten IDs aus einer gegebenen Menge von ID-Gruppen. \n  Jede ID-Gruppe repräsentiert eine Sammlung von Ticket-IDs, die aufeinanderfolgend sein sollen, aber einen Fehler enthalten: \n  eine ID fehlt und eine ID ist doppelt vorhanden. Diese Funktion berechnet und gibt die fehlenden und doppelten IDs zurück.\n \n  Hinweis: Die fehlende ID wird nicht am Anfang oder Ende des gesamten ID-Bereichs sein.\n \n  Eingabe: Ein Array von Arrays, wobei jedes Unter-Array ganze Zahlen enthält, die Ticket-IDs darstellen.\n  Ausgabe: Ein Array mit zwei ganzen Zahlen, wobei die erste die fehlende (defekte) ID und die zweite die doppelte ID ist.\n \n  Beispiel:\n  Eingabe: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Ausgabe: [7, 9] // 7 fehlt, und 9 ist doppelt vorhanden.",
      "ha": "Gano ID ɗin da ba a samu ba (ɓatacce) da kuma ID ɗin da aka maimaita daga wani saitin ƙungiyoyin ID da aka bayar. \n  Kowace ƙungiyar ID tana wakiltar tarin ID ɗin tikiti waɗanda yakamata su kasance a jere amma suna ɗauke da kuskure:\n  ana rasa ID ɗaya, kuma an maimaita ID ɗaya. Wannan aikin yana ƙididdige kuma yana dawo da ID ɗin da ba a samu ba da ID ɗin da aka maimaita.\n\n  Lura: ID ɗin da ba a samu ba ba zai kasance a farkon ko ƙarshen kewayon ID ɗin gaba ɗaya ba.\n\n  Shigarwa: Jerin jerin, inda kowace ƙaramin jeri ke ɗauke da lambobi da ke wakiltar ID ɗin tikiti.\n  Fitarwa: Jeri tare da lambobi biyu, na farko shine ID ɗin da ba a samu ba (ɓatacce) kuma na biyu shine ID ɗin da aka maimaita.\n\n  Misali:\n  Shigarwa: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Fitarwa: [7, 9] // 7 ba a samu ba, kuma 9 an maimaita.",
      "hi": "दिए गए ID समूहों से गायब (टूटी हुई) और डुप्लिकेट ID की पहचान करता है। \nप्रत्येक ID समूह टिकट ID का एक संग्रह दर्शाता है जो लगातार होने चाहिए लेकिन उनमें एक गलती होती है:\nएक ID गायब है, और एक ID डुप्लिकेट है। यह फ़ंक्शन गायब और डुप्लिकेट ID की गणना करता है और उन्हें लौटाता है।\n\nध्यान दें: गायब ID कुल ID रेंज की शुरुआत या अंत में नहीं होगी।\n\nइनपुट: एक सरणी की सरणी, जहां प्रत्येक उप-सरणी में टिकट ID का प्रतिनिधित्व करने वाले पूर्णांक होते हैं।\nआउटपुट: दो पूर्णांकों के साथ एक सरणी, पहला गायब (टूटी हुई) ID है और दूसरा डुप्लिकेट ID है।\n\nउदाहरण:\nइनपुट: [[5, 6, 8, 11, 9], [10, 12, 9]]\nआउटपुट: [7, 9] // 7 गायब है, और 9 डुप्लिकेट है।",
      "hu": "Azonosítja a hiányzó (hibás) és duplikált azonosítókat egy adott azonosítócsoportból.\n  Minden azonosítócsoport egy olyan jegyazonosító-gyűjteményt képvisel, amelynek folytonosnak kellene lennie, de hibát tartalmaz:\n  egy azonosító hiányzik, és egy azonosító duplikált. Ez a függvény kiszámítja és visszaadja a hiányzó és duplikált azonosítókat.\n \n  Megjegyzés: A hiányzó azonosító nem lesz az összes azonosító tartományának elején vagy végén.\n \n  Bemenet: Tömbök tömbje, ahol minden al-tömb egész számokat tartalmaz, amelyek jegyazonosítókat képviselnek.\n  Kimenet: Egy tömb két egész számmal, ahol az első a hiányzó (hibás) azonosító, a második a duplikált azonosító.\n \n  Példa:\n  Bemenet: [[5, 6, 8, 11, 9], [10, 12, 9]]\n  Kimenet: [7, 9] // 7 hiányzik, és 9 duplikált."
    },
    "docstring_bertscore": {
      "sq": "0.9807765517234435",
      "hy": "0.9741883792452783",
      "bn": "0.9644495316631377",
      "bg": "0.9712504372793913",
      "zh": "0.9485908820413123",
      "fr": "0.9828192665620064",
      "de": "0.9725743087689889",
      "ha": "0.9237189816192667",
      "hi": "0.9618508503880583",
      "hu": "0.9298439480488585"
    }
  },
  {
    "task_id": "PHP/50",
    "prompt": {
      "en": "<?php\n\n\n/**\n * Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n *\n * This function takes a single string of exactly 8 characters as input.\n * It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n *\n * Input: A string of 8 characters.\n * Output: An array of three integers, where:\n * - The first integer is the count of digits in the string.\n * - The second integer is the count of lowercase letters in the string.\n * - The third integer is the count of uppercase letters in the string.\n *\n * Examples:\n * - For the string \"yLOI2022\", the output should be [4, 1, 3].\n * - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n * - For the string \"1n2s0e1s\", the output should be [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "sq": "<?php\n\n\n/**\n * Numëron numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha në një varg prej 8 karakteresh.\n *\n * Kjo funksion merr si hyrje një varg të vetëm me saktësisht 8 karaktere.\n * Pastaj numëron dhe kthen numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha brenda vargut.\n *\n * Hyrja: Një varg prej 8 karakteresh.\n * Dalja: Një varg me tre numra të plotë, ku:\n * - Numri i parë është numri i shifrave në varg.\n * - Numri i dytë është numri i shkronjave të vogla në varg.\n * - Numri i tretë është numri i shkronjave të mëdha në varg.\n *\n * Shembuj:\n * - Për vargun \"yLOI2022\", dalja duhet të jetë [4, 1, 3].\n * - Për vargun \"IAKIOIOI\", dalja duhet të jetë [0, 0, 8].\n * - Për vargun \"1n2s0e1s\", dalja duhet të jetë [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "hy": "<?php\n\n\n/**\n * Հաշվում է թվանշանների, փոքրատառերի և մեծատառերի քանակը 8 նիշանոց տողում:\n *\n * Այս ֆունկցիան ընդունում է հենց 8 նիշից բաղկացած մեկ տող որպես մուտք:\n * Այնուհետև հաշվում և վերադարձնում է թվանշանների, փոքրատառերի և մեծատառերի քանակը տողի մեջ:\n *\n * Մուտք: 8 նիշից բաղկացած տող:\n * Ելք: Երեք ամբողջ թվերից բաղկացած զանգված, որտեղ՝\n * - Առաջին ամբողջ թիվը տողի մեջ թվանշանների քանակն է:\n * - Երկրորդ ամբողջ թիվը տողի մեջ փոքրատառերի քանակն է:\n * - Երրորդ ամբողջ թիվը տողի մեջ մեծատառերի քանակն է:\n *\n * Օրինակներ:\n * - \"yLOI2022\" տողի համար ելքը պետք է լինի [4, 1, 3]:\n * - \"IAKIOIOI\" տողի համար ելքը պետք է լինի [0, 0, 8]:\n * - \"1n2s0e1s\" տողի համար ելքը պետք է լինի [4, 4, 0]:\n */\n\n function countCharacters($s) ",
      "bn": "<?php\n\n\n/**\n * একটি ৮-অক্ষরের স্ট্রিং-এ সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে।\n *\n * এই ফাংশনটি ইনপুট হিসেবে ঠিক ৮ অক্ষরের একটি স্ট্রিং গ্রহণ করে।\n * তারপর এটি স্ট্রিং-এর মধ্যে সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে এবং ফেরত দেয়।\n *\n * ইনপুট: ৮ অক্ষরের একটি স্ট্রিং।\n * আউটপুট: তিনটি পূর্ণসংখ্যার একটি অ্যারে, যেখানে:\n * - প্রথম পূর্ণসংখ্যাটি স্ট্রিং-এ সংখ্যার সংখ্যা।\n * - দ্বিতীয় পূর্ণসংখ্যাটি স্ট্রিং-এ ছোট হাতের অক্ষরের সংখ্যা।\n * - তৃতীয় পূর্ণসংখ্যাটি স্ট্রিং-এ বড় হাতের অক্ষরের সংখ্যা।\n *\n * উদাহরণ:\n * - স্ট্রিং \"yLOI2022\" এর জন্য, আউটপুট হওয়া উচিত [4, 1, 3]।\n * - স্ট্রিং \"IAKIOIOI\" এর জন্য, আউটপুট হওয়া উচিত [0, 0, 8]।\n * - স্ট্রিং \"1n2s0e1s\" এর জন্য, আউটপুট হওয়া উচিত [4, 4, 0]।\n */\n\n function countCharacters($s) ",
      "bg": "<?php\n\n\n/**\n * Брои броя на цифрите, малките букви и главните букви в низ от 8 символа.\n *\n * Тази функция приема един низ от точно 8 символа като вход.\n * След това брои и връща броя на цифрите, малките букви и главните букви в низа.\n *\n * Вход: Низ от 8 символа.\n * Изход: Масив от три цели числа, където:\n * - Първото число е броят на цифрите в низа.\n * - Второто число е броят на малките букви в низа.\n * - Третото число е броят на главните букви в низа.\n *\n * Примери:\n * - За низа \"yLOI2022\", изходът трябва да бъде [4, 1, 3].\n * - За низа \"IAKIOIOI\", изходът трябва да бъде [0, 0, 8].\n * - За низа \"1n2s0e1s\", изходът трябва да бъде [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "zh": "<?php\n\n\n/**\n * 统计一个8字符字符串中的数字、小写字母和大写字母的数量。\n *\n * 此函数接受一个正好8个字符的字符串作为输入。\n * 然后计算并返回字符串中数字、小写字母和大写字母的数量。\n *\n * 输入：一个8字符的字符串。\n * 输出：一个包含三个整数的数组，其中：\n * - 第一个整数是字符串中数字的数量。\n * - 第二个整数是字符串中小写字母的数量。\n * - 第三个整数是字符串中大写字母的数量。\n *\n * 示例:\n * - 对于字符串 \"yLOI2022\"，输出应为 [4, 1, 3]。\n * - 对于字符串 \"IAKIOIOI\"，输出应为 [0, 0, 8]。\n * - 对于字符串 \"1n2s0e1s\"，输出应为 [4, 4, 0]。\n */\n\n function countCharacters($s) ",
      "fr": "<?php\n\n\n/**\n * Compte le nombre de chiffres, de lettres minuscules et de lettres majuscules dans une chaîne de 8 caractères.\n *\n * Cette fonction prend en entrée une seule chaîne de exactement 8 caractères.\n * Elle compte ensuite et renvoie le nombre de chiffres, de lettres minuscules et de lettres majuscules dans la chaîne.\n *\n * Entrée : Une chaîne de 8 caractères.\n * Sortie : Un tableau de trois entiers, où :\n * - Le premier entier est le nombre de chiffres dans la chaîne.\n * - Le deuxième entier est le nombre de lettres minuscules dans la chaîne.\n * - Le troisième entier est le nombre de lettres majuscules dans la chaîne.\n *\n * Exemples :\n * - Pour la chaîne \"yLOI2022\", la sortie devrait être [4, 1, 3].\n * - Pour la chaîne \"IAKIOIOI\", la sortie devrait être [0, 0, 8].\n * - Pour la chaîne \"1n2s0e1s\", la sortie devrait être [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "de": "<?php\n\n\n/**\n * Zählt die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben in einem 8-Zeichen-String.\n *\n * Diese Funktion nimmt einen einzelnen String mit genau 8 Zeichen als Eingabe.\n * Sie zählt dann die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben im String und gibt diese zurück.\n *\n * Eingabe: Ein String mit 8 Zeichen.\n * Ausgabe: Ein Array mit drei ganzen Zahlen, wobei:\n * - Die erste ganze Zahl die Anzahl der Ziffern im String ist.\n * - Die zweite ganze Zahl die Anzahl der Kleinbuchstaben im String ist.\n * - Die dritte ganze Zahl die Anzahl der Großbuchstaben im String ist.\n *\n * Beispiele:\n * - Für den String \"yLOI2022\" sollte die Ausgabe [4, 1, 3] sein.\n * - Für den String \"IAKIOIOI\" sollte die Ausgabe [0, 0, 8] sein.\n * - Für den String \"1n2s0e1s\" sollte die Ausgabe [4, 4, 0] sein.\n */\n\n function countCharacters($s) ",
      "ha": "<?php\n\n\n/**\n * Yana ƙididdige adadin lambobi, haruffan ƙananan baki, da haruffan manyan baki a cikin jeren haruffa guda 8.\n *\n * Wannan aikin yana karɓar jeren haruffa guda ɗaya na ainihin haruffa 8 a matsayin shigarwa.\n * Sannan yana ƙididdige kuma yana dawo da adadin lambobi, haruffan ƙananan baki, da haruffan manyan baki a cikin jeren haruffan.\n *\n * Shigarwa: Jeren haruffa guda 8.\n * Fitarwa: Jeri na lambobi guda uku, inda:\n * - Lamba ta farko ita ce adadin lambobi a cikin jeren haruffan.\n * - Lamba ta biyu ita ce adadin haruffan ƙananan baki a cikin jeren haruffan.\n * - Lamba ta uku ita ce adadin haruffan manyan baki a cikin jeren haruffan.\n *\n * Misalai:\n * - Don jeren haruffan \"yLOI2022\", fitarwa ya kamata ya zama [4, 1, 3].\n * - Don jeren haruffan \"IAKIOIOI\", fitarwa ya kamata ya zama [0, 0, 8].\n * - Don jeren haruffan \"1n2s0e1s\", fitarwa ya kamata ya zama [4, 4, 0].\n */\n\n function countCharacters($s) ",
      "hi": "<?php\n\n\n/**\n * एक 8-अक्षर की स्ट्रिंग में अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है।\n *\n * यह फ़ंक्शन इनपुट के रूप में ठीक 8 अक्षरों की एकल स्ट्रिंग लेता है।\n * फिर यह स्ट्रिंग के भीतर अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है और लौटाता है।\n *\n * इनपुट: 8 अक्षरों की एक स्ट्रिंग।\n * आउटपुट: तीन पूर्णांकों की एक ऐरे, जहां:\n * - पहला पूर्णांक स्ट्रिंग में अंकों की गिनती है।\n * - दूसरा पूर्णांक स्ट्रिंग में छोटे अक्षरों की गिनती है।\n * - तीसरा पूर्णांक स्ट्रिंग में बड़े अक्षरों की गिनती है।\n *\n * उदाहरण:\n * - स्ट्रिंग \"yLOI2022\" के लिए, आउटपुट [4, 1, 3] होना चाहिए।\n * - स्ट्रिंग \"IAKIOIOI\" के लिए, आउटपुट [0, 0, 8] होना चाहिए।\n * - स्ट्रिंग \"1n2s0e1s\" के लिए, आउटपुट [4, 4, 0] होना चाहिए।\n */\n\n function countCharacters($s) ",
      "hu": "<?php\n\n\n/**\n * Megszámolja a számjegyek, kisbetűk és nagybetűk számát egy 8 karakteres stringben.\n *\n * Ez a függvény egy pontosan 8 karakter hosszú stringet vesz be bemenetként.\n * Ezután megszámolja és visszaadja a számjegyek, kisbetűk és nagybetűk számát a stringben.\n *\n * Bemenet: Egy 8 karakteres string.\n * Kimenet: Egy három egész számot tartalmazó tömb, ahol:\n * - Az első egész szám a számjegyek száma a stringben.\n * - A második egész szám a kisbetűk száma a stringben.\n * - A harmadik egész szám a nagybetűk száma a stringben.\n *\n * Példák:\n * - A \"yLOI2022\" string esetén a kimenet [4, 1, 3] kell legyen.\n * - Az \"IAKIOIOI\" string esetén a kimenet [0, 0, 8] kell legyen.\n * - Az \"1n2s0e1s\" string esetén a kimenet [4, 4, 0] kell legyen.\n */\n\n function countCharacters($s) "
    },
    "prompt_bertscore": {
      "sq": "0.9787342341456428",
      "hy": "0.9796409818350671",
      "bn": "0.9865837095433795",
      "bg": "0.9838006992746997",
      "zh": "0.9749153664398661",
      "fr": "0.9891218085522433",
      "de": "0.9825882594288627",
      "ha": "0.9798014751829432",
      "hi": "0.9989550055653754",
      "hu": "0.957259906391199"
    },
    "canonical_solution": " {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}",
    "instruction": {
      "en": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nProvide a concise natural language description (docstring) of the PHP code in English using at most 500 characters.",
      "sq": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nJepni një përshkrim të shkurtër në gjuhë natyrore (docstring) të kodit PHP në shqip duke përdorur maksimumi 500 karaktere.",
      "hy": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nՏրամադրել PHP կոդի հակիրճ բնութագիր (docstring) հայերեն լեզվով՝ օգտագործելով առավելագույնը 500 նիշ:",
      "bn": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nনিচের PHP কোডের জন্য একটি সংক্ষিপ্ত প্রাকৃতিক ভাষার বর্ণনা (ডকস্ট্রিং) বাংলায় প্রদান করুন, যা সর্বাধিক ৫০০ অক্ষরের মধ্যে হবে।",
      "bg": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nПредоставете кратко описание на PHP кода на естествен език на български, използвайки не повече от 500 знака.",
      "zh": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\n请用不超过500个字符的中文，为以下PHP代码提供简洁的自然语言描述（文档字符串）。",
      "fr": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nFournissez une description concise en langage naturel (docstring) du code PHP en français en utilisant au maximum 500 caractères.",
      "de": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nGeben Sie eine prägnante Beschreibung in natürlicher Sprache (Docstring) des PHP-Codes auf Deutsch mit maximal 500 Zeichen an.",
      "ha": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nBa da takaitaccen bayanin yanayi na lambar PHP a cikin Hausa ta amfani da haruffa 500 kacal.",
      "hi": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nPHP कोड के लिए एक संक्षिप्त प्राकृतिक भाषा विवरण (डॉकस्ट्रिंग) हिंदी में प्रदान करें, जिसमें अधिकतम 500 वर्ण हों।",
      "hu": "function countCharacters($s)\n {\n    $digitCount = $lowerCount = $upperCount = 0;\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $digitCount++;\n        } elseif (ctype_lower($s[$i])) {\n            $lowerCount++;\n        } elseif (ctype_upper($s[$i])) {\n            $upperCount++;\n        }\n    }\n    \n    return [$digitCount, $lowerCount, $upperCount];\n}\n\nAdjon meg egy tömör természetes nyelvű leírást (docstring) a PHP kódhoz magyarul, legfeljebb 500 karakterben."
    },
    "instruction_bertscore": {
      "sq": "0.9544141289221121",
      "hy": "0.9072145846286969",
      "bn": "0.8743148387267452",
      "bg": "0.8313258612505074",
      "zh": "0.8718951234249782",
      "fr": "0.9692393046714131",
      "de": "0.9372043954484873",
      "ha": "0.8349089546939958",
      "hi": "0.9122290085979226",
      "hu": "0.9414316472176718"
    },
    "level": "",
    "test": "function main(){\n    // Testcases\n    assert(countCharacters(\"yLOI2022\") === [4, 1, 3]);\n    assert(countCharacters(\"IAKIOIOI\") === [0, 0, 8]);\n    assert(countCharacters(\"1n2s0e1s\") === [4, 4, 0]);\n\n    // echo \"All test cases passed!\";\n\n}\n\n\nmain();\n?>",
    "entry_point": "countCharacters",
    "signature": "function countCharacters($s)",
    "docstring": {
      "en": "Counts the number of digits, lowercase letters, and uppercase letters in an 8-character string.\n \n  This function takes a single string of exactly 8 characters as input.\n  It then counts and returns the number of digits, lowercase letters, and uppercase letters within the string.\n \n  Input: A string of 8 characters.\n  Output: An array of three integers, where:\n  - The first integer is the count of digits in the string.\n  - The second integer is the count of lowercase letters in the string.\n  - The third integer is the count of uppercase letters in the string.\n \n  Examples:\n  - For the string \"yLOI2022\", the output should be [4, 1, 3].\n  - For the string \"IAKIOIOI\", the output should be [0, 0, 8].\n  - For the string \"1n2s0e1s\", the output should be [4, 4, 0].",
      "sq": "Numëron numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha në një varg prej 8 karakteresh.\n\nKjo funksion merr si hyrje një varg të vetëm me saktësisht 8 karaktere. Pastaj numëron dhe kthen numrin e shifrave, shkronjave të vogla dhe shkronjave të mëdha brenda vargut.\n\nHyrja: Një varg me 8 karaktere. Dalja: Një varg me tre numra të plotë, ku: - Numri i parë është numri i shifrave në varg. - Numri i dytë është numri i shkronjave të vogla në varg. - Numri i tretë është numri i shkronjave të mëdha në varg.\n\nShembuj: - Për vargun \"yLOI2022\", dalja duhet të jetë [4, 1, 3]. - Për vargun \"IAKIOIOI\", dalja duhet të jetë [0, 0, 8]. - Për vargun \"1n2s0e1s\", dalja duhet të jetë [4, 4, 0].",
      "hy": "Հաշվում է թվանշանների, փոքրատառերի և մեծատառերի քանակը 8 նիշից բաղկացած տողում։\n\nԱյս ֆունկցիան որպես մուտք ընդունում է ճիշտ 8 նիշից բաղկացած մեկ տող։ Այնուհետև հաշվում և վերադարձնում է թվանշանների, փոքրատառերի և մեծատառերի քանակը տողի մեջ։\n\nՄուտք: 8 նիշից բաղկացած տող։ \nԵլք: Երեք ամբողջ թվերից բաղկացած զանգված, որտեղ՝ \n- Առաջին ամբողջ թիվը տողի մեջ թվանշանների քանակն է։\n- Երկրորդ ամբողջ թիվը տողի մեջ փոքրատառերի քանակն է։\n- Երրորդ ամբողջ թիվը տողի մեջ մեծատառերի քանակն է։\n\nՕրինակներ:\n- \"yLOI2022\" տողի համար ելքը պետք է լինի [4, 1, 3]։\n- \"IAKIOIOI\" տողի համար ելքը պետք է լինի [0, 0, 8]։\n- \"1n2s0e1s\" տողի համար ելքը պետք է լինի [4, 4, 0]։",
      "bn": "একটি ৮-অক্ষরের স্ট্রিং-এ সংখ্যা, ছোট হাতের অক্ষর, এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে।\n\nএই ফাংশনটি একটি ৮ অক্ষরের সঠিক একটি স্ট্রিং ইনপুট হিসেবে গ্রহণ করে। \nএরপর এটি স্ট্রিংয়ের মধ্যে সংখ্যা, ছোট হাতের অক্ষর এবং বড় হাতের অক্ষরের সংখ্যা গণনা করে এবং ফেরত দেয়।\n\nInput: একটি ৮ অক্ষরের স্ট্রিং।\nOutput: তিনটি পূর্ণসংখ্যার একটি অ্যারে, যেখানে:\n- প্রথম পূর্ণসংখ্যাটি স্ট্রিংয়ের সংখ্যার গণনা।\n- দ্বিতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের ছোট হাতের অক্ষরের গণনা।\n- তৃতীয় পূর্ণসংখ্যাটি স্ট্রিংয়ের বড় হাতের অক্ষরের গণনা।\n\nExamples:\n- স্ট্রিং \"yLOI2022\" এর জন্য, আউটপুট হওয়া উচিত [4, 1, 3]।\n- স্ট্রিং \"IAKIOIOI\" এর জন্য, আউটপুট হওয়া উচিত [0, 0, 8]।\n- স্ট্রিং \"1n2s0e1s\" এর জন্য, আউটপুট হওয়া উচিত [4, 4, 0]।",
      "bg": "Брои броя на цифрите, малките букви и главните букви в низ от 8 знака.\n\nТази функция приема един низ от точно 8 знака като вход.\nСлед това брои и връща броя на цифрите, малките букви и главните букви в низа.\n\nВход: Низ от 8 знака.\nИзход: Масив от три цели числа, където:\n- Първото цяло число е броят на цифрите в низа.\n- Второто цяло число е броят на малките букви в низа.\n- Третото цяло число е броят на главните букви в низа.\n\nПримери:\n- За низа \"yLOI2022\", изходът трябва да бъде [4, 1, 3].\n- За низа \"IAKIOIOI\", изходът трябва да бъде [0, 0, 8].\n- За низа \"1n2s0e1s\", изходът трябва да бъде [4, 4, 0].",
      "zh": "计算一个8字符字符串中的数字、小写字母和大写字母的数量。\n\n这个函数接受一个长度正好为8的字符串作为输入。\n然后它计算并返回字符串中数字、小写字母和大写字母的数量。\n\n输入：一个8字符的字符串。\n输出：一个包含三个整数的数组，其中：\n- 第一个整数是字符串中数字的数量。\n- 第二个整数是字符串中小写字母的数量。\n- 第三个整数是字符串中大写字母的数量。\n\n示例：\n- 对于字符串 \"yLOI2022\"，输出应为 [4, 1, 3]。\n- 对于字符串 \"IAKIOIOI\"，输出应为 [0, 0, 8]。\n- 对于字符串 \"1n2s0e1s\"，输出应为 [4, 4, 0]。",
      "fr": "Compte le nombre de chiffres, de lettres minuscules et de lettres majuscules dans une chaîne de 8 caractères.\n\n  Cette fonction prend en entrée une seule chaîne de caractères de exactement 8 caractères.\n  Elle compte ensuite et renvoie le nombre de chiffres, de lettres minuscules et de lettres majuscules dans la chaîne.\n\n  Entrée : Une chaîne de 8 caractères.\n  Sortie : Un tableau de trois entiers, où :\n  - Le premier entier est le compte des chiffres dans la chaîne.\n  - Le deuxième entier est le compte des lettres minuscules dans la chaîne.\n  - Le troisième entier est le compte des lettres majuscules dans la chaîne.\n\n  Exemples :\n  - Pour la chaîne \"yLOI2022\", la sortie devrait être [4, 1, 3].\n  - Pour la chaîne \"IAKIOIOI\", la sortie devrait être [0, 0, 8].\n  - Pour la chaîne \"1n2s0e1s\", la sortie devrait être [4, 4, 0].",
      "de": "Zählt die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben in einem 8-Zeichen-String.\n\n  Diese Funktion nimmt einen einzelnen String mit genau 8 Zeichen als Eingabe.\n  Sie zählt dann die Anzahl der Ziffern, Kleinbuchstaben und Großbuchstaben im String und gibt diese zurück.\n\n  Eingabe: Ein String mit 8 Zeichen.\n  Ausgabe: Ein Array von drei ganzen Zahlen, wobei:\n  - Die erste ganze Zahl die Anzahl der Ziffern im String ist.\n  - Die zweite ganze Zahl die Anzahl der Kleinbuchstaben im String ist.\n  - Die dritte ganze Zahl die Anzahl der Großbuchstaben im String ist.\n\n  Beispiele:\n  - Für den String \"yLOI2022\" sollte die Ausgabe [4, 1, 3] sein.\n  - Für den String \"IAKIOIOI\" sollte die Ausgabe [0, 0, 8] sein.\n  - Für den String \"1n2s0e1s\" sollte die Ausgabe [4, 4, 0] sein.",
      "ha": "Yana ƙidaya adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffa guda 8.\n\nWannan aikin yana karɓar jeren haruffa guda ɗaya na ainihin haruffa 8 a matsayin shigarwa. \nSannan yana ƙidaya kuma yana dawowa da adadin lambobi, ƙananan haruffa, da manyan haruffa a cikin jeren haruffan.\n\nShigarwa: Jeren haruffa na 8.\nFitarwa: Jerin lambobi guda uku, inda:\n- Lamba ta farko ita ce ƙidayar lambobi a cikin jeren haruffa.\n- Lamba ta biyu ita ce ƙidayar ƙananan haruffa a cikin jeren haruffa.\n- Lamba ta uku ita ce ƙidayar manyan haruffa a cikin jeren haruffa.\n\nMisalai:\n- Don jeren haruffa \"yLOI2022\", fitarwa ya kamata ya zama [4, 1, 3].\n- Don jeren haruffa \"IAKIOIOI\", fitarwa ya kamata ya zama [0, 0, 8].\n- Don jeren haruffa \"1n2s0e1s\", fitarwa ya kamata ya zama [4, 4, 0].",
      "hi": "अंक, छोटे अक्षर, और बड़े अक्षरों की संख्या 8-अक्षर की स्ट्रिंग में गिनता है।\n\nयह फ़ंक्शन इनपुट के रूप में ठीक 8 अक्षरों की एकल स्ट्रिंग लेता है। \nयह तब स्ट्रिंग के भीतर अंकों, छोटे अक्षरों, और बड़े अक्षरों की संख्या गिनता है और लौटाता है।\n\nइनपुट: 8 अक्षरों की एक स्ट्रिंग।\nआउटपुट: तीन पूर्णांकों की एक सरणी, जहाँ:\n- पहला पूर्णांक स्ट्रिंग में अंकों की गिनती है।\n- दूसरा पूर्णांक स्ट्रिंग में छोटे अक्षरों की गिनती है।\n- तीसरा पूर्णांक स्ट्रिंग में बड़े अक्षरों की गिनती है।\n\nउदाहरण:\n- स्ट्रिंग \"yLOI2022\" के लिए, आउटपुट [4, 1, 3] होना चाहिए।\n- स्ट्रिंग \"IAKIOIOI\" के लिए, आउटपुट [0, 0, 8] होना चाहिए।\n- स्ट्रिंग \"1n2s0e1s\" के लिए, आउटपुट [4, 4, 0] होना चाहिए।",
      "hu": "Számolja meg a számjegyek, kisbetűk és nagybetűk számát egy 8 karakteres sztringben.\n\nEz a függvény egyetlen, pontosan 8 karakter hosszú sztringet vesz be bemenetként.\nEzután megszámolja és visszaadja a számjegyek, kisbetűk és nagybetűk számát a sztringben.\n\nBemenet: Egy 8 karakteres sztring.\nKimenet: Egy három egész számot tartalmazó tömb, ahol:\n- Az első egész szám a számjegyek száma a sztringben.\n- A második egész szám a kisbetűk száma a sztringben.\n- A harmadik egész szám a nagybetűk száma a sztringben.\n\nPéldák:\n- A \"yLOI2022\" sztring esetén a kimenet [4, 1, 3].\n- Az \"IAKIOIOI\" sztring esetén a kimenet [0, 0, 8].\n- Az \"1n2s0e1s\" sztring esetén a kimenet [4, 4, 0]."
    },
    "docstring_bertscore": {
      "sq": "0.9751219420361423",
      "hy": "0.9802871264645736",
      "bn": "0.9652442518176584",
      "bg": "0.965902512900408",
      "zh": "0.9723961373172005",
      "fr": "0.995712761855743",
      "de": "0.9921781342252272",
      "ha": "0.9554621028124521",
      "hi": "0.9990825262699998",
      "hu": "0.9768079167103665"
    }
  }
]